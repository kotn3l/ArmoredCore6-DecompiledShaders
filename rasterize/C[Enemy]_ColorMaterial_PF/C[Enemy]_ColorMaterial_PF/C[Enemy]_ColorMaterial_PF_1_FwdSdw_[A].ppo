#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1437;
float _4097;
float _4098;
float _4099;
float _4100;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _301 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _317 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _329 = exp2(log2(_317.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    float _340 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    float _363 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _378 = floor(_365);
    vec4 _381 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _378));
    vec4 _405 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _416 = cbMtdParam._m0[9u].x * _405.x;
    float _417 = cbMtdParam._m0[9u].y * _405.y;
    float _418 = cbMtdParam._m0[9u].z * _405.z;
    float _425 = (((cbMtdParam._m0[10u].x * _381.x) - _416) * _342) + _416;
    float _426 = (((cbMtdParam._m0[10u].y * _381.y) - _417) * _342) + _417;
    float _427 = (((cbMtdParam._m0[10u].z * _381.z) - _418) * _342) + _418;
    float _433 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _446 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _465 = (((cbMtdParam._m0[16u].x * _446.x) - _425) * _433) + _425;
    float _466 = (((cbMtdParam._m0[16u].y * _446.y) - _426) * _433) + _426;
    float _467 = (((cbMtdParam._m0[16u].z * _446.z) - _427) * _433) + _427;
    vec4 _480 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _500 = (((cbMtdParam._m0[19u].x * _480.x) - _465) * _331) + _465;
    float _501 = (((cbMtdParam._m0[19u].y * _480.y) - _466) * _331) + _466;
    float _502 = (((cbMtdParam._m0[19u].z * _480.z) - _467) * _331) + _467;
    vec4 _515 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _540 = (_317.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _515.x) - _500) * _303) + _500);
    float _542 = (_317.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _515.y) - _501) * _303) + _501);
    float _544 = (_317.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _515.z) - _502) * _303) + _502);
    float _548 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _557 = (_548 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _548))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4149 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _565 = ((cbMtdParam._m0[21u].x - _540) * _558) + _540;
    float _566 = ((cbMtdParam._m0[21u].y - _542) * _558) + _542;
    float _567 = ((cbMtdParam._m0[21u].z - _544) * _558) + _544;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].x;
    _198[0u] = cbMtdParam._m0[29u].y;
    _197[1u] = cbMtdParam._m0[31u].x;
    _198[1u] = cbMtdParam._m0[31u].y;
    _197[2u] = cbMtdParam._m0[30u].z;
    _198[2u] = cbMtdParam._m0[30u].w;
    _197[3u] = cbMtdParam._m0[30u].x;
    _198[3u] = cbMtdParam._m0[30u].y;
    _197[4u] = cbMtdParam._m0[29u].z;
    _198[4u] = cbMtdParam._m0[29u].w;
    float _609 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _611 = uint(int(isnan(4.0) ? _609 : (isnan(_609) ? 4.0 : min(_609, 4.0))));
    float _618 = ((_198[_611] - cbMtdParam._m0[22u].z) * _342) + cbMtdParam._m0[22u].z;
    float _621 = ((cbMtdParam._m0[22u].w - _618) * _433) + _618;
    float _624 = ((cbMtdParam._m0[25u].y - _621) * _331) + _621;
    float _627 = ((cbMtdParam._m0[26u].y - _624) * _303) + _624;
    float _629 = _627 - (_627 * _548);
    vec4 _645 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _378));
    vec4 _663 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _671 = cbMtdParam._m0[22u].x + _663.z;
    float _674 = (((_645.z + _197[_611]) - _671) * _342) + _671;
    vec4 _687 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _698 = (((_687.z - _674) + cbMtdParam._m0[28u].z) * _433) + _674;
    float _704 = ((((_290 * 2.0) * _698) - _698) * cbMtdParam._m0[24u].w) + _698;
    vec4 _717 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _728 = (((cbMtdParam._m0[23u].z + _717.z) - _704) * _331) + _704;
    vec4 _741 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _752 = (((_741.z - _728) + cbMtdParam._m0[26u].z) * _303) + _728;
    vec4 _767 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _782 = ((cbMtdParam._m0[27u].z * _548) * ((_767.z * cbMtdParam._m0[27u].y) - _752)) + _752;
    float _794 = ((_645.x - _665) * _342) + _665;
    float _795 = ((_645.y - _666) * _342) + _666;
    float _800 = ((_687.x - _794) * _433) + _794;
    float _801 = ((_687.y - _795) * _433) + _795;
    float _806 = ((_717.x - _800) * _331) + _800;
    float _807 = ((_717.y - _801) * _331) + _801;
    float _816 = ((((_741.x - _806) * _303) + _806) * 2.0) + (-1.0);
    float _817 = ((((_741.y - _807) * _303) + _807) * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _4170 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _823 = sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))));
    float _833 = ((cbMtdParam._m0[25u].z * ((_286.x * 2.0) + (-1.0))) + _816) + ((((_767.x * 2.0) + (-1.0)) * _548) * cbMtdParam._m0[27u].x);
    float _834 = ((cbMtdParam._m0[25u].z * ((_286.y * 2.0) + (-1.0))) + _817) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_767.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _836 = gl_FragCoord.x * 0.125;
    float _838 = gl_FragCoord.y * 0.125;
    float _848 = fma(_823, _233 * NORMAL.x, fma(_834, _240 * TANGENT.x, (_226 * _218) * _833));
    float _851 = fma(_823, _233 * NORMAL.y, fma(_834, _240 * TANGENT.y, (_226 * _219) * _833));
    float _854 = fma(_823, _233 * NORMAL.z, fma(_834, _240 * TANGENT.z, (_226 * _220) * _833));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _4181 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _862 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4203 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4214 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4225 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _866 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_836, _838)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_836, _838));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1119 = sqrt(((_936 * _936) + (_937 * _937)) + (_938 * _938));
        float _1125 = (cbMatDynParam._m0[5u].x * _1119) + cbMatDynParam._m0[5u].y;
        float _4236 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1130 = (cbMatDynParam._m0[5u].z * _1119) + cbMatDynParam._m0[5u].w;
        float _4247 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) - _1126)) + _1126) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _982 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _985 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _998 = uint(roundEven(NORMAL.w)) * 13u;
    uint _999 = _998 + 9u;
    uint _1000 = _999 + uint(cbMatDynParam._m0[0u].w);
    float _1006 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_1000].x;
    float _1007 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1000].y;
    float _1008 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1000].z;
    float _4258 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _1012 = 1.0 - _866;
    float _1013 = _1009 * _1012;
    float _1014 = _1010 * _1012;
    float _1015 = _1011 * _1012;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _866;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _866;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _866;
    float _1023 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    vec4 _1035 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1038 = _1035.x * TEXCOORD_3.w;
    float _1039 = dot(vec3(_859, _860, _861), vec3(_943, _944, _945));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _859) - _943;
    float _1047 = (_1042 * _860) - _944;
    float _1048 = (_1042 * _861) - _945;
    float _1052 = abs(dot(vec3(_943, _944, _945), vec3(_859, _860, _861)));
    float _4291 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_862);
    float _1065 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1054;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1165 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1169 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1194 = _1100 + _859;
        float _1195 = _1104 + _860;
        float _1196 = _1108 + _861;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_859, _860, _861), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4339 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_859, _860, _861), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4372 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_859, _860, _861), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4405 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1478 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1482 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1505 = _1100 + _859;
        float _1506 = _1104 + _860;
        float _1507 = _1108 + _861;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_859, _860, _861), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4468 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_859, _860, _861), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4501 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_859, _860, _861), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4534 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1437;
        _1744 = _1437;
        _1745 = _1437;
        _1746 = _1437;
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1449)) + _1449;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1450)) + _1450;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1451)) + _1451;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1046 * 0.5;
    float _1812 = _1047 * 0.5;
    float _1813 = _1048 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1854;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1865;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1856 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1869 = (_1865 * cbModelParam._m0[1u].x) + (_1854 * (1.0 - cbModelParam._m0[1u].x));
    float _1879 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1879 : min(cbModelParam._m0[25u].z, _1879));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1927 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1931 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1935 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1938 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1941 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1944 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1972;
        if (_1938 > 0.0)
        {
            _1972 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1972 = frontier_phi_19_17_ladder;
        }
        float _2144;
        if (_1941 > 0.0)
        {
            _2144 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_1944 > 0.0)
        {
            _2439 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2441 = isnan(_2144) ? _1972 : (isnan(_1972) ? _2144 : min(_1972, _2144));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1938) + _1927;
        float _2447 = (_2442 * _1941) + _1931;
        float _2448 = (_2442 * _1944) + _1935;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2449;
        float _2453 = _2449 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 > _2453) || ((_2447 < _2451) || ((_2446 < _2451) || (_2446 > _2453))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2448, cbModelParam._m0[9u].z, fma(_2447, cbModelParam._m0[9u].y, _2446 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2448, cbModelParam._m0[10u].z, fma(_2447, cbModelParam._m0[10u].y, _2446 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2448, cbModelParam._m0[11u].z, fma(_2447, cbModelParam._m0[11u].y, _2446 * cbModelParam._m0[11u].x))), _1880);
            frontier_phi_18_40_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1960 = frontier_phi_18_40_ladder_2;
        _1962 = frontier_phi_18_40_ladder_1;
        _1964 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1880);
        _1960 = _1948.x * cbModelParam._m0[1u].y;
        _1962 = _1948.y * cbModelParam._m0[1u].y;
        _1964 = _1948.z * cbModelParam._m0[1u].y;
    }
    float _1968 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1968 : min(cbModelParam._m0[25u].w, _1968));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2037 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2040 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2149;
        if (_2034 > 0.0)
        {
            _2149 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2149 = frontier_phi_30_26_ladder;
        }
        float _2466;
        if (_2037 > 0.0)
        {
            _2466 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2466 = frontier_phi_42_37_ladder;
        }
        float _2804;
        if (_2040 > 0.0)
        {
            _2804 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2804 = frontier_phi_52_49_ladder;
        }
        float _2806 = isnan(_2466) ? _2149 : (isnan(_2149) ? _2466 : min(_2149, _2466));
        float _2807 = isnan(_2804) ? _2806 : (isnan(_2806) ? _2804 : min(_2806, _2804));
        float _2811 = (_2807 * _2034) + _2023;
        float _2812 = (_2807 * _2037) + _2027;
        float _2813 = (_2807 * _2040) + _2031;
        float _2814 = _2807 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2814;
        float _2817 = _2814 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2813 > _2817) || ((_2813 < _2815) || ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 < _2815) || (_2811 > _2817))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2813, cbModelParam._m0[17u].z, fma(_2812, cbModelParam._m0[17u].y, _2811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2813, cbModelParam._m0[18u].z, fma(_2812, cbModelParam._m0[18u].y, _2811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2813, cbModelParam._m0[19u].z, fma(_2812, cbModelParam._m0[19u].y, _2811 * cbModelParam._m0[19u].x))), _1969);
            frontier_phi_27_52_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_27_52_ladder_2;
        _2061 = frontier_phi_27_52_ladder_1;
        _2063 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1969);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2076 = (((_1071 * _1023) + _1072) * _1038) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1071 * _1025) + _1072) * _1038) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1071 * _1026) + _1072) * _1038) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2083 = fma(_2080, cbSceneParam._m0[89u].z, fma(_2078, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2080, cbSceneParam._m0[90u].z, fma(_2078, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2080, cbSceneParam._m0[91u].z, fma(_2078, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2136 = _2123 / _2135;
    float _2137 = _2127 / _2135;
    float _2138 = _2131 / _2135;
    float _2285;
    float _2286;
    float _2287;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2165 = ((uint(_2138 > cbSceneParam._m0[59u].y) + uint(_2138 > cbSceneParam._m0[59u].x)) + uint(_2138 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2166 = _2165 + 43u;
        uint _2174 = _2165 + 44u;
        uint _2182 = _2165 + 45u;
        uint _2190 = _2165 + 46u;
        float _2201 = fma(_2135, cbSceneParam._m0[_2166].w, fma(_2131, cbSceneParam._m0[_2166].z, fma(_2127, cbSceneParam._m0[_2166].y, _2123 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2135, cbSceneParam._m0[_2174].w, fma(_2131, cbSceneParam._m0[_2174].z, fma(_2127, cbSceneParam._m0[_2174].y, _2123 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2135, cbSceneParam._m0[_2190].w, fma(_2131, cbSceneParam._m0[_2190].z, fma(_2127, cbSceneParam._m0[_2190].y, _2123 * cbSceneParam._m0[_2190].x)));
        float _2218 = cbSceneParam._m0[33u].z * _2213;
        float _2220 = cbSceneParam._m0[33u].w * _2213;
        float _2223 = fma(_2135, cbSceneParam._m0[_2182].w, fma(_2131, cbSceneParam._m0[_2182].z, fma(_2127, cbSceneParam._m0[_2182].y, _2123 * cbSceneParam._m0[_2182].x))) / _2213;
        float _2271 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
        float _4660 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2278 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2201) / _2213, (_2220 + _2205) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2201) / _2213, (_2205 - _2218) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2218) / _2213, (_2205 - _2220) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2220) / _2213, (_2218 + _2205) / _2213), _2223), 0.0)).x), vec4(0.25)));
        _2285 = 1.0 - (_2278 * cbSceneParam._m0[34u].x);
        _2286 = 1.0 - (_2278 * cbSceneParam._m0[34u].y);
        _2287 = 1.0 - (_2278 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2285 = 1.0;
        _2286 = 1.0;
        _2287 = 1.0;
    }
    float _2351;
    float _2353;
    float _2355;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2339 = fma(_2135, cbSceneParam._m0[63u].w, fma(_2131, cbSceneParam._m0[63u].z, fma(_2127, cbSceneParam._m0[63u].y, _2123 * cbSceneParam._m0[63u].x)));
        float _2340 = fma(_2135, cbSceneParam._m0[60u].w, fma(_2131, cbSceneParam._m0[60u].z, fma(_2127, cbSceneParam._m0[60u].y, _2123 * cbSceneParam._m0[60u].x))) / _2339;
        float _2341 = fma(_2135, cbSceneParam._m0[61u].w, fma(_2131, cbSceneParam._m0[61u].z, fma(_2127, cbSceneParam._m0[61u].y, _2123 * cbSceneParam._m0[61u].x))) / _2339;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2340 >= cbSceneParam._m0[64u].x) && (_2341 >= cbSceneParam._m0[64u].y)) && (_2340 <= cbSceneParam._m0[64u].z)) && (_2341 <= cbSceneParam._m0[64u].w))
        {
            float _2479 = fma(_2135, cbSceneParam._m0[62u].w, fma(_2131, cbSceneParam._m0[62u].z, fma(_2127, cbSceneParam._m0[62u].y, _2123 * cbSceneParam._m0[62u].x))) / _2339;
            float _2483 = isnan(cbSceneParam._m0[41u].w) ? _2479 : (isnan(_2479) ? cbSceneParam._m0[41u].w : max(_2479, cbSceneParam._m0[41u].w));
            float _2526 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
            float _4676 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
            float _2533 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2340, cbSceneParam._m0[33u].w + _2341), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2340, _2341 - cbSceneParam._m0[33u].z), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].z, _2341 - cbSceneParam._m0[33u].w), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2341), _2483), 0.0)).x), vec4(0.25)));
            float _2537 = 1.0 - (_2533 * cbSceneParam._m0[34u].x);
            float _2538 = 1.0 - (_2533 * cbSceneParam._m0[34u].y);
            float _2539 = 1.0 - (_2533 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
            frontier_phi_39_38_ladder_1 = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_39_38_ladder_2 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
        }
        else
        {
            frontier_phi_39_38_ladder = _2287;
            frontier_phi_39_38_ladder_1 = _2286;
            frontier_phi_39_38_ladder_2 = _2285;
        }
        _2351 = frontier_phi_39_38_ladder_2;
        _2353 = frontier_phi_39_38_ladder_1;
        _2355 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2351 = _2285;
        _2353 = _2286;
        _2355 = _2287;
    }
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_998 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2370 = _1038 + (-1.0);
    float _2375 = (cbLight._m0[_2363].x * _2370) + 1.0;
    float _2376 = (cbLight._m0[_2363].y * _2370) + 1.0;
    float _2377 = (cbLight._m0[_2363].z * _2370) + 1.0;
    float _2378 = (cbLight._m0[_2363].w * _2370) + 1.0;
    uint _2379 = _2362 + 5u;
    float _2385 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2389 = _2362 + 4u;
    float _2398 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2402 = _2362 | 1u;
    float _2413 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_859, _860, _861));
    float _2416 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_859, _860, _861));
    float _4712 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _4723 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2421 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2423 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * 0.3183098733425140380859375;
    float _2430 = ((cbLight._m0[_2379].x * _2385) * _2423) + (((cbLight._m0[_2389].x * _2351) * _2398) * _2421);
    float _2431 = ((_2385 * cbLight._m0[_2379].y) * _2423) + (((cbLight._m0[_2389].y * _2353) * _2398) * _2421);
    float _2432 = ((_2385 * cbLight._m0[_2379].z) * _2423) + (((cbLight._m0[_2389].z * _2355) * _2398) * _2421);
    uvec4 _2436 = floatBitsToUint(cbLight._m0[_2362 + 12u]);
    bool _2438 = _2436.x == 0u;
    float _2540;
    float _2542;
    float _2544;
    if (_2438)
    {
        _2540 = _2430;
        _2542 = _2431;
        _2544 = _2432;
    }
    else
    {
        uint _2548 = _2362 + 6u;
        float _2564 = (dot(vec3(cbLight._m0[_2362 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4734 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2567 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2540 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2430;
        _2542 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2431;
        _2544 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2432;
    }
    bool _2547 = _2436.y == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2547)
    {
        _2602 = _2540;
        _2604 = _2542;
        _2606 = _2544;
    }
    else
    {
        uint _2775 = _2362 + 7u;
        float _2791 = (dot(vec3(cbLight._m0[_2362 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2792 = _2791 * _2791;
        float _4750 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2793 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2794 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2602 = (((cbLight._m0[_2775].x * 0.3183098733425140380859375) * _2793) * _2794) + _2540;
        _2604 = (((cbLight._m0[_2775].y * 0.3183098733425140380859375) * _2793) * _2794) + _2542;
        _2606 = (((cbLight._m0[_2775].z * 0.3183098733425140380859375) * _2793) * _2794) + _2544;
    }
    uint _2609 = _2362 + 8u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _862) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2362].x + _943;
    float _2625 = cbLight._m0[_2362].y + _944;
    float _2626 = cbLight._m0[_2362].z + _945;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2362].xyz));
    float _4766 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _4777 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2638 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2639 = dot(vec3(_859, _860, _861), vec3(_2631, _2632, _2633));
    float _4788 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2631, _2632, _2633));
    float _4799 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2623 * _2623;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
    float _2660 = 0.959999978542327880859375 - _1020;
    float _2662 = 0.959999978542327880859375 - _1021;
    float _2663 = 0.959999978542327880859375 - _1022;
    float _2670 = 1.0 - _2623;
    float _2681 = (0.5 / (((_2638 * ((_2637 * _2670) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2670) + _2623) * _2637))) * _2637;
    float _4810 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    uint _2697 = _2362 + 9u;
    float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _862) * 0.949999988079071044921875);
    float _2709 = _2708 * _2708;
    float _2710 = cbLight._m0[_2402].x + _943;
    float _2711 = cbLight._m0[_2402].y + _944;
    float _2712 = cbLight._m0[_2402].z + _945;
    float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
    float _2717 = _2716 * _2710;
    float _2718 = _2716 * _2711;
    float _2719 = _2716 * _2712;
    float _2720 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2402].xyz));
    float _4821 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2724 = dot(vec3(_859, _860, _861), vec3(_2717, _2718, _2719));
    float _4832 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _2728 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2717, _2718, _2719));
    float _4843 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2732 = _2709 * _2709;
    float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
    float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) * 5.0);
    float _2750 = 1.0 - _2709;
    float _2760 = (0.5 / (((_2638 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2750) + _2709) * _2723))) * _2723;
    float _4854 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2762 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
    float _2772 = (((((_2743 * _2660) + _1023) * cbLight._m0[_2697].x) * _2762) * _2385) + ((((cbLight._m0[_2609].x * _2351) * ((_2659 * _2660) + _1023)) * _2683) * _2398);
    float _2773 = (((((_2743 * _2662) + _1025) * cbLight._m0[_2697].y) * _2762) * _2385) + ((((cbLight._m0[_2609].y * _2353) * ((_2659 * _2662) + _1025)) * _2683) * _2398);
    float _2774 = (((((_2743 * _2663) + _1026) * cbLight._m0[_2697].z) * _2762) * _2385) + ((((cbLight._m0[_2609].z * _2355) * ((_2659 * _2663) + _1026)) * _2683) * _2398);
    float _2830;
    float _2832;
    float _2834;
    if (_2438)
    {
        _2830 = _2772;
        _2832 = _2773;
        _2834 = _2774;
    }
    else
    {
        uint _2836 = _2362 + 2u;
        uint _2840 = _2362 + 10u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _862) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _943;
        float _2857 = cbLight._m0[_2836].y + _944;
        float _2858 = cbLight._m0[_2836].z + _945;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2836].xyz));
        float _4865 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2870 = dot(vec3(_859, _860, _861), vec3(_2863, _2864, _2865));
        float _4876 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4887 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2889 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
        float _2896 = 1.0 - _2855;
        float _2906 = (0.5 / (((_2638 * ((_2869 * _2896) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2896) + _2855) * _2869))) * _2869;
        float _4898 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2830 = (((((_2889 * _2660) + _1023) * cbLight._m0[_2840].x) * _2908) * _2909) + _2772;
        _2832 = (((((_2889 * _2662) + _1025) * cbLight._m0[_2840].y) * _2908) * _2909) + _2773;
        _2834 = (((((_2889 * _2663) + _1026) * cbLight._m0[_2840].z) * _2908) * _2909) + _2774;
    }
    float _2940;
    float _2942;
    float _2944;
    if (_2547)
    {
        _2940 = _2830;
        _2942 = _2832;
        _2944 = _2834;
    }
    else
    {
        uint _2951 = _2362 + 3u;
        uint _2955 = _2362 + 11u;
        float _2969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2951].w)) * _862) * 0.949999988079071044921875);
        float _2970 = _2969 * _2969;
        float _2971 = cbLight._m0[_2951].x + _943;
        float _2972 = cbLight._m0[_2951].y + _944;
        float _2973 = cbLight._m0[_2951].z + _945;
        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
        float _2978 = _2977 * _2971;
        float _2979 = _2977 * _2972;
        float _2980 = _2977 * _2973;
        float _2981 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2951].xyz));
        float _4914 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2985 = dot(vec3(_859, _860, _861), vec3(_2978, _2979, _2980));
        float _4925 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _2989 = dot(vec3(cbLight._m0[_2951].xyz), vec3(_2978, _2979, _2980));
        float _4936 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2993 = _2970 * _2970;
        float _2997 = ((_2988 * _2988) * (_2993 + (-1.0))) + 1.0;
        float _3004 = exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0);
        float _3011 = 1.0 - _2970;
        float _3021 = (0.5 / (((_2638 * ((_2984 * _3011) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _3011) + _2970) * _2984))) * _2984;
        float _4947 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3023 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2993 / ((_2997 * _2997) * 3.141590118408203125));
        float _3024 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2940 = (((((_3004 * _2660) + _1023) * cbLight._m0[_2955].x) * _3023) * _3024) + _2830;
        _2942 = (((((_3004 * _2662) + _1025) * cbLight._m0[_2955].y) * _3023) * _3024) + _2832;
        _2944 = (((((_3004 * _2663) + _1026) * cbLight._m0[_2955].z) * _3023) * _3024) + _2834;
    }
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_2360.y == 0u)
    {
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.x;
        uint _3057 = uint((float(_3045.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _3046))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _3046)));
        float _3067 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3068 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        uint _3071 = uint(isnan(14.0) ? _3068 : (isnan(_3068) ? 14.0 : min(_3068, 14.0)));
        uvec4 _3076 = texelFetch(g_lightClusterGridBuffer, int(((_3071 << 2u) + (_3057 << 6u)) >> 2u));
        uint _3077 = _3076.x;
        uint _3078 = _3045.z;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        if (((((1u << ((_3078 >> 4u) & 15u)) + 4294967295u) & _3077) == 0u) || ((_3078 & 240u) == 0u))
        {
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
        }
        else
        {
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            uint _3316 = 0u;
            uint _3325;
            bool _3326;
            for (;;)
            {
                _3325 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                _3326 = _3325 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3326)
                {
                    frontier_phi_73_pred = _3315;
                    frontier_phi_73_pred_1 = _3314;
                    frontier_phi_73_pred_2 = _3313;
                    frontier_phi_73_pred_3 = _3312;
                    frontier_phi_73_pred_4 = _3311;
                    frontier_phi_73_pred_5 = _3310;
                }
                else
                {
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    uint _3461;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3325;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    for (;;)
                    {
                        uint _3465 = uint(findLSB(_3461)) + (_3316 << 5u);
                        uint _3462 = (_3461 + 4294967295u) & _3461;
                        uint _3467 = _3465 * 48u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3487 = (_3465 * 48u) + 4u;
                        vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 3u)).x));
                        uint _3506 = (_3465 * 48u) + 8u;
                        vec3 _3517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x));
                        float _3521 = _3481.x - _2136;
                        float _3522 = _3481.y - _2137;
                        float _3523 = _3481.z - _2138;
                        float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                        float _3527 = inversesqrt(_3524);
                        float _3528 = _3527 * _3521;
                        float _3529 = _3527 * _3522;
                        float _3530 = _3527 * _3523;
                        float _3531 = dot(vec3(_979, _982, _985), vec3(_3528, _3529, _3530));
                        float _3536 = 1.0 - (_3524 * _3481.w);
                        float _4973 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3538 = sqrt(_3524) * _3500.w;
                        float _3541 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                        float _3542 = _3541 * _3541;
                        float _3545 = ((1.0 - _3542) * _3531) + _3542;
                        float _3548 = _3538 * _3538;
                        float _3552 = ((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3537) / ((_3548 * 0.699999988079071044921875) + 1.0);
                        float _3556 = (-0.0) - _2136;
                        float _3557 = (-0.0) - _2137;
                        float _3558 = (-0.0) - _2138;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3563 = _3562 * _3556;
                        float _3564 = _3562 * _3557;
                        float _3565 = _3562 * _3558;
                        float _3572 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                        float _3573 = 1.0 - _1054;
                        float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                        float _3581 = _3580 * _3580;
                        float _3582 = _3581 * _3581;
                        float _3583 = _3563 + _3528;
                        float _3584 = _3564 + _3529;
                        float _3585 = _3565 + _3530;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3593 = dot(vec3(_979, _982, _985), vec3(_3563, _3564, _3565));
                        float _4989 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3596 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3597 = dot(vec3(_979, _982, _985), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                        float _5000 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3600 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                        float _3605 = _3541 * _3581;
                        float _3606 = _3605 * _3605;
                        float _3609 = ((1.0 - _3606) * _3531) + _3606;
                        float _5011 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3610 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                        float _3611 = 1.0 - _3581;
                        float _3621 = (0.5 / (((_3610 * ((_3596 * _3611) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3581) * _3596))) * _3610;
                        float _5022 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3632 = (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0)))) / ((_3604 * _3604) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125))) * _3537;
                        _3385 = (_3552 * _3500.x) + _3458;
                        _3386 = (_3552 * _3500.y) + _3459;
                        _3387 = (_3552 * _3500.z) + _3460;
                        _3382 = (_3632 * _3517.x) + _3455;
                        _3383 = (_3632 * _3517.y) + _3456;
                        _3384 = (_3632 * _3517.z) + _3457;
                        if (_3462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3462;
                        }
                    }
                    frontier_phi_73_pred = _3387;
                    frontier_phi_73_pred_1 = _3386;
                    frontier_phi_73_pred_2 = _3385;
                    frontier_phi_73_pred_3 = _3384;
                    frontier_phi_73_pred_4 = _3383;
                    frontier_phi_73_pred_5 = _3382;
                }
                _3168 = frontier_phi_73_pred;
                _3166 = frontier_phi_73_pred_1;
                _3164 = frontier_phi_73_pred_2;
                _3162 = frontier_phi_73_pred_3;
                _3160 = frontier_phi_73_pred_4;
                _3158 = frontier_phi_73_pred_5;
                uint _3317 = _3316 + 1u;
                if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3310 = _3158;
                    _3311 = _3160;
                    _3312 = _3162;
                    _3313 = _3164;
                    _3314 = _3166;
                    _3315 = _3168;
                    _3316 = _3317;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
        }
        uvec4 _3171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3172 = _3171.z;
        uint _3174 = (_3172 >> 8u) & 15u;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        if (((4294967295u << _3174) & _3077) == 0u)
        {
            _3278 = _3157;
            _3280 = _3159;
            _3282 = _3161;
            _3284 = _3163;
            _3286 = _3165;
            _3288 = _3167;
        }
        else
        {
            float _3303 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _3304 = _3303 * _2136;
            float _3305 = _3303 * _2137;
            float _3306 = _3303 * _2138;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3174 < ((_3172 >> 12u) & 15u))
            {
                float _3279;
                float _3281;
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3438 = _3157;
                float _3439 = _3159;
                float _3440 = _3161;
                float _3441 = _3163;
                float _3442 = _3165;
                float _3443 = _3167;
                uint _3444 = _3174;
                uint _3453;
                bool _3454;
                for (;;)
                {
                    _3453 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3444 << 2u)) >> 2u)).x;
                    _3454 = _3453 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3454)
                    {
                        frontier_phi_84_pred = _3443;
                        frontier_phi_84_pred_1 = _3442;
                        frontier_phi_84_pred_2 = _3441;
                        frontier_phi_84_pred_3 = _3440;
                        frontier_phi_84_pred_4 = _3439;
                        frontier_phi_84_pred_5 = _3438;
                    }
                    else
                    {
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3659 = _3438;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        float _3662 = _3441;
                        float _3663 = _3442;
                        float _3664 = _3443;
                        uint _3665 = _3453;
                        uint _3666;
                        vec4 _3691;
                        float _3692;
                        vec4 _3707;
                        vec3 _3719;
                        vec4 _3734;
                        vec4 _3749;
                        float _3795;
                        bool _3796;
                        for (;;)
                        {
                            uint _3676 = ((_3444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3665));
                            _3666 = (_3665 + 4294967295u) & _3665;
                            uint _3678 = _3676 * 40u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3692 = _3691.w;
                            uint _3694 = (_3676 * 40u) + 4u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3676 * 40u) + 8u;
                            _3719 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x));
                            uint _3721 = (_3676 * 40u) + 16u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3676 * 40u) + 20u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3676 * 40u) + 24u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3770 = (_3676 * 40u) + 28u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            _3795 = fma(_2138, _3783.z, fma(_2137, _3783.y, _3783.x * _2136)) + _3783.w;
                            _3796 = !((fma(_2138, _3764.z, fma(_2137, _3764.y, _3764.x * _2136)) + _3764.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3796)
                            {
                                float _3823 = _3691.x - _2136;
                                float _3824 = _3691.y - _2137;
                                float _3825 = _3691.z - _2138;
                                float _3826 = dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825));
                                float _3829 = inversesqrt(_3826);
                                float _3830 = _3829 * _3823;
                                float _3831 = _3829 * _3824;
                                float _3832 = _3829 * _3825;
                                float _3836 = 1.0 - (_3826 / (_3692 * _3692));
                                float _5033 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3841 = sqrt(_3826) * _3707.w;
                                float _3843 = 1.39999997615814208984375 / (_3841 + 1.39999997615814208984375);
                                float _3844 = _3843 * _3843;
                                float _3847 = ((1.0 - _3844) * dot(vec3(_3830, _3831, _3832), vec3(_979, _982, _985))) + _3844;
                                float _3850 = _3841 * _3841;
                                float _3854 = (fma(_2138, _3734.z, fma(_2137, _3734.y, _3734.x * _2136)) + _3734.w) / _3795;
                                float _3855 = (fma(_2138, _3749.z, fma(_2137, _3749.y, _3749.x * _2136)) + _3749.w) / _3795;
                                float _3859 = 1.0 - dot(vec2(_3854, _3855), vec2(_3854, _3855));
                                float _5049 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3861 = _3860 * (((isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0))) * _3837) / ((_3850 * 0.699999988079071044921875) + 1.0));
                                float _3873 = exp2(log2(1.0 / ((_3850 * 3.5) + 5.0)) * 0.25);
                                float _3874 = 1.0 - _1054;
                                float _3881 = sqrt(1.0 - ((1.0 - (_3874 * _3874)) * (1.0 - (_3873 * _3873))));
                                float _3882 = _3881 * _3881;
                                float _3883 = _3882 * _3882;
                                float _3884 = _3830 - _3304;
                                float _3885 = _3831 - _3305;
                                float _3886 = _3832 - _3306;
                                float _3890 = inversesqrt(dot(vec3(_3884, _3885, _3886), vec3(_3884, _3885, _3886)));
                                float _3894 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3304, (-0.0) - _3305, (-0.0) - _3306));
                                float _5060 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3897 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3898 = dot(vec3(_979, _982, _985), vec3(_3890 * _3884, _3890 * _3885, _3890 * _3886));
                                float _5071 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3901 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3905 = ((_3901 * _3901) * (_3883 + (-1.0))) + 1.0;
                                float _3906 = _3843 * _3882;
                                float _3907 = _3906 * _3906;
                                float _3913 = ((1.0 - _3907) * dot(vec3(_979, _982, _985), vec3(_3830, _3831, _3832))) + _3907;
                                float _5082 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3915 = 1.0 - _3882;
                                float _3925 = (0.5 / (((_3914 * ((_3897 * _3915) + _3882)) + 9.9999999392252902907785028219223e-09) + (((_3914 * _3915) + _3882) * _3897))) * _3914;
                                float _5093 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3935 = (_3860 * _3837) * (((_3883 * 3.1415927410125732421875) * (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0)))) / ((_3905 * _3905) * ((_3850 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3861 * _3707.z;
                                frontier_phi_90_pred_1 = _3861 * _3707.y;
                                frontier_phi_90_pred_2 = _3861 * _3707.x;
                                frontier_phi_90_pred_3 = _3935 * _3719.z;
                                frontier_phi_90_pred_4 = _3935 * _3719.y;
                                frontier_phi_90_pred_5 = _3935 * _3719.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3944 = frontier_phi_90_pred;
                            _3943 = frontier_phi_90_pred_1;
                            _3942 = frontier_phi_90_pred_2;
                            _3941 = frontier_phi_90_pred_3;
                            _3940 = frontier_phi_90_pred_4;
                            _3939 = frontier_phi_90_pred_5;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            if (_3666 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3666;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3651;
                        frontier_phi_84_pred_1 = _3650;
                        frontier_phi_84_pred_2 = _3649;
                        frontier_phi_84_pred_3 = _3648;
                        frontier_phi_84_pred_4 = _3647;
                        frontier_phi_84_pred_5 = _3646;
                    }
                    _3289 = frontier_phi_84_pred;
                    _3287 = frontier_phi_84_pred_1;
                    _3285 = frontier_phi_84_pred_2;
                    _3283 = frontier_phi_84_pred_3;
                    _3281 = frontier_phi_84_pred_4;
                    _3279 = frontier_phi_84_pred_5;
                    uint _3445 = _3444 + 1u;
                    if (_3445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3438 = _3279;
                        _3439 = _3281;
                        _3440 = _3283;
                        _3441 = _3285;
                        _3442 = _3287;
                        _3443 = _3289;
                        _3444 = _3445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3285;
                frontier_phi_65_66_ladder_1 = _3289;
                frontier_phi_65_66_ladder_2 = _3287;
                frontier_phi_65_66_ladder_3 = _3283;
                frontier_phi_65_66_ladder_4 = _3281;
                frontier_phi_65_66_ladder_5 = _3279;
            }
            else
            {
                frontier_phi_65_66_ladder = _3163;
                frontier_phi_65_66_ladder_1 = _3167;
                frontier_phi_65_66_ladder_2 = _3165;
                frontier_phi_65_66_ladder_3 = _3161;
                frontier_phi_65_66_ladder_4 = _3159;
                frontier_phi_65_66_ladder_5 = _3157;
            }
            _3278 = frontier_phi_65_66_ladder_5;
            _3280 = frontier_phi_65_66_ladder_4;
            _3282 = frontier_phi_65_66_ladder_3;
            _3284 = frontier_phi_65_66_ladder;
            _3286 = frontier_phi_65_66_ladder_2;
            _3288 = frontier_phi_65_66_ladder_1;
        }
        float _3293 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _3090 = (_3293 * _3284) + _2602;
        _3092 = (_3293 * _3286) + _2604;
        _3094 = (_3293 * _3288) + _2606;
        _3096 = ((_3278 * _1023) * _3293) + _2940;
        _3098 = ((_3280 * _1025) * _3293) + _2942;
        _3100 = ((_3282 * _1026) * _3293) + _2944;
    }
    else
    {
        _3090 = _2602;
        _3092 = _2604;
        _3094 = _2606;
        _3096 = _2940;
        _3098 = _2942;
        _3100 = _2944;
    }
    float _5109 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _5120 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5131 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _3117 = ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3090 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1038))) + ((_3096 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _3118 = ((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3092 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1038))) + ((_3098 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _3119 = ((isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0))) * (_3094 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1038))) + ((_3100 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    uint _3120 = _998 + 6u;
    float _3128 = _960 / cbSceneParam._m0[86u].x;
    float _3129 = _961 / cbSceneParam._m0[86u].y;
    vec4 _3143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3145 = _3143.x;
    float _3146 = _3143.y;
    float _3147 = _3143.z;
    float _3148 = _3143.w;
    float _3220;
    float _3222;
    float _3224;
    float _3226;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _3182 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _3183 = _3182 / _886;
        float _3194 = _3183 * _936;
        float _3195 = _937 * _3183;
        float _3196 = (-0.0) - _3195;
        float _3198 = _3183 * _938;
        float _3200 = (cbSceneParam._m0[77u].w * _3196) / _3182;
        float _3201 = _3200 + cbSceneParam._m0[79u].w;
        float _3202 = cbSceneParam._m0[79u].w - _3195;
        float _3208 = sqrt(((_3194 * _3194) + (_3195 * _3195)) + (_3198 * _3198));
        float _3211 = (1.0 - (cbSceneParam._m0[77u].w / _3182)) * _3208;
        float _3216 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3218 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3395;
        if (abs((_3196 - _3200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3395 = ((((_3201 > 0.0) ? exp2(_3216 * _3201) : (2.0 - exp2(_3218 * _3201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3211;
        }
        else
        {
            float _3339 = 1.0 / cbSceneParam._m0[80u].x;
            float _3340 = isnan(_3202) ? _3201 : (isnan(_3201) ? _3202 : max(_3201, _3202));
            float _3341 = isnan(_3202) ? _3201 : (isnan(_3201) ? _3202 : min(_3201, _3202));
            float _3350 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : min(_3340, 0.0));
            float _3351 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : min(_3341, 0.0));
            _3395 = ((abs(_3208 / _3196) * cbSceneParam._m0[80u].y) * ((((_3350 - _3351) * 2.0) - ((exp2(_3216 * (isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0)))) - exp2(_3216 * (isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))))) * _3339)) - ((exp2(_3218 * _3350) - exp2(_3218 * _3351)) * _3339))) + (_3211 * cbSceneParam._m0[80u].z);
        }
        vec4 _3397 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, 1.0), 0.0);
        float _3406 = exp2((_3395 * (-1.44269502162933349609375)) * (1.0 - _3397.w));
        float _3407 = log2(_3406);
        float _3423 = log2(_3148);
        _3220 = (exp2(_3423 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].x)) * _3397.x) / cbSceneParam._m0[78u].x)) + _3145;
        _3222 = (exp2(_3423 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].y)) * _3397.y) / cbSceneParam._m0[78u].y)) + _3146;
        _3224 = (exp2(_3423 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3407 * cbSceneParam._m0[78u].z)) * _3397.z) / cbSceneParam._m0[78u].z)) + _3147;
        _3226 = _3406 * _3148;
    }
    else
    {
        _3220 = _3145;
        _3222 = _3146;
        _3224 = _3147;
        _3226 = _3148;
    }
    bool _3433;
    vec4 _3236;
    vec4 _3258;
    float _3260;
    float _3264;
    float _3265;
    float _3266;
    float _3267;
    bool _3277;
    for (;;)
    {
        _3236 = cbMatDynParam._m0[0u];
        float _3238 = roundEven(_3236.y);
        bool _3239 = _3238 == 3.0;
        float _3240 = log2(_3226);
        float _3247 = exp2(_3240 * cbSceneParam._m0[78u].x) * _3117;
        float _3248 = exp2(_3240 * cbSceneParam._m0[78u].y) * _3118;
        float _3249 = exp2(_3240 * cbSceneParam._m0[78u].z) * _3119;
        float _3256 = _949 + (-0.5);
        _3258 = cbMtdParam._m0[1u];
        _3260 = _3258.y * _3256;
        float _3263 = (_3238 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3264 = _3263 * (_3239 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3220)));
        _3265 = _3263 * (_3239 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3222)));
        _3266 = _3263 * (_3239 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3224)));
        _3267 = _3256 * 0.999000012874603271484375;
        _3277 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3277)
        {
            if ((cbInstanceData._m0[_998 + 7u].x + _3267) < 0.5)
            {
                _3433 = true;
                break;
            }
        }
        uint _3374 = _999 + uint(_3236.w);
        if ((cbInstanceData._m0[_3374].w < 1.0) && ((cbInstanceData._m0[_3374].w + _3267) < 0.5))
        {
            _3433 = true;
            break;
        }
        if ((_3260 + 1.0) < _3258.x)
        {
            _3433 = true;
            break;
        }
        _3433 = false;
        break;
    }
    float _3637;
    if (_3433)
    {
        discard_state = true;
        _3637 = 0.0;
    }
    else
    {
        _3637 = cbInstanceData._m0[_3120].w;
    }
    SV_Target.x = _3264;
    SV_Target.y = _3265;
    SV_Target.z = _3266;
    SV_Target.w = _3637;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3120].w;
    discard_exit();
}


