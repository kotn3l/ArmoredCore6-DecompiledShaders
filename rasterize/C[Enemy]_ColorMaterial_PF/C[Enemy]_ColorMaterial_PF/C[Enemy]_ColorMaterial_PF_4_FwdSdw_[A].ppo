#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1511;
float _4170;
float _4171;
float _4172;
float _4173;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _292 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _307 = exp2(log2((1.0 - _296) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _323 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _335 = exp2(log2(_323.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    float _346 = exp2(log2(cbMtdParam._m0[23u].y * _296) * cbMtdParam._m0[22u].y);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _348 = isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0));
    vec4 _360 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _363 = _360.y;
    float _366 = (_360.x + (-0.02500000037252902984619140625)) * 8.0;
    float _370 = roundEven(5.0 - _366);
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(4.0) ? _371 : (isnan(_371) ? 4.0 : min(_371, 4.0));
    float _385 = floor(_372);
    vec4 _388 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _385));
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[17u].x;
    _203[0u] = cbMtdParam._m0[17u].y;
    _204[0u] = cbMtdParam._m0[17u].z;
    _202[1u] = cbMtdParam._m0[15u].x;
    _203[1u] = cbMtdParam._m0[15u].y;
    _204[1u] = cbMtdParam._m0[15u].z;
    _202[2u] = cbMtdParam._m0[14u].x;
    _203[2u] = cbMtdParam._m0[14u].y;
    _204[2u] = cbMtdParam._m0[14u].z;
    _202[3u] = cbMtdParam._m0[13u].x;
    _203[3u] = cbMtdParam._m0[13u].y;
    _204[3u] = cbMtdParam._m0[13u].z;
    _202[4u] = cbMtdParam._m0[12u].x;
    _203[4u] = cbMtdParam._m0[12u].y;
    _204[4u] = cbMtdParam._m0[12u].z;
    _202[5u] = cbMtdParam._m0[18u].x;
    _203[5u] = cbMtdParam._m0[18u].y;
    _204[5u] = cbMtdParam._m0[18u].z;
    float _452 = roundEven(_366);
    float _453 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _453 : (isnan(_453) ? 5.0 : min(_453, 5.0))));
    vec4 _485 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _496 = cbMtdParam._m0[9u].x * _485.x;
    float _497 = cbMtdParam._m0[9u].y * _485.y;
    float _498 = cbMtdParam._m0[9u].z * _485.z;
    float _505 = ((((((_202[_455] - cbMtdParam._m0[10u].x) * _363) + cbMtdParam._m0[10u].x) * _388.x) - _496) * _348) + _496;
    float _506 = ((((((_203[_455] - cbMtdParam._m0[10u].y) * _363) + cbMtdParam._m0[10u].y) * _388.y) - _497) * _348) + _497;
    float _507 = ((((((_204[_455] - cbMtdParam._m0[10u].z) * _363) + cbMtdParam._m0[10u].z) * _388.z) - _498) * _348) + _498;
    float _513 = exp2(log2(_292.w) * cbMtdParam._m0[23u].w);
    vec4 _526 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _545 = (((cbMtdParam._m0[16u].x * _526.x) - _505) * _513) + _505;
    float _546 = (((cbMtdParam._m0[16u].y * _526.y) - _506) * _513) + _506;
    float _547 = (((cbMtdParam._m0[16u].z * _526.z) - _507) * _513) + _507;
    vec4 _560 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _580 = (((cbMtdParam._m0[19u].x * _560.x) - _545) * _337) + _545;
    float _581 = (((cbMtdParam._m0[19u].y * _560.y) - _546) * _337) + _546;
    float _582 = (((cbMtdParam._m0[19u].z * _560.z) - _547) * _337) + _547;
    vec4 _594 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _619 = (_323.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _594.x) - _580) * _309) + _580);
    float _621 = (_323.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _594.y) - _581) * _309) + _581);
    float _623 = (_323.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _594.z) - _582) * _309) + _582);
    float _627 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _636 = (_627 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _627))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4232 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _644 = ((cbMtdParam._m0[21u].x - _619) * _637) + _619;
    float _645 = ((cbMtdParam._m0[21u].y - _621) * _637) + _621;
    float _646 = ((cbMtdParam._m0[21u].z - _623) * _637) + _623;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].x;
    _198[0u] = cbMtdParam._m0[29u].y;
    _197[1u] = cbMtdParam._m0[31u].x;
    _198[1u] = cbMtdParam._m0[31u].y;
    _197[2u] = cbMtdParam._m0[30u].z;
    _198[2u] = cbMtdParam._m0[30u].w;
    _197[3u] = cbMtdParam._m0[30u].x;
    _198[3u] = cbMtdParam._m0[30u].y;
    _197[4u] = cbMtdParam._m0[29u].z;
    _198[4u] = cbMtdParam._m0[29u].w;
    float _686 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    uint _688 = uint(int(isnan(4.0) ? _686 : (isnan(_686) ? 4.0 : min(_686, 4.0))));
    float _695 = ((_198[_688] - cbMtdParam._m0[22u].z) * _348) + cbMtdParam._m0[22u].z;
    float _698 = ((cbMtdParam._m0[22u].w - _695) * _513) + _695;
    float _701 = ((cbMtdParam._m0[25u].y - _698) * _337) + _698;
    float _704 = ((cbMtdParam._m0[26u].y - _701) * _309) + _701;
    float _706 = _704 - (_704 * _627);
    vec4 _722 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _385));
    vec4 _739 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _741 = _739.x;
    float _742 = _739.y;
    float _747 = cbMtdParam._m0[22u].x + _739.z;
    float _750 = (((_722.z + _197[_688]) - _747) * _348) + _747;
    vec4 _762 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _773 = (((_762.z - _750) + cbMtdParam._m0[28u].z) * _513) + _750;
    float _779 = ((((_296 * 2.0) * _773) - _773) * cbMtdParam._m0[24u].w) + _773;
    vec4 _791 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _802 = (((cbMtdParam._m0[23u].z + _791.z) - _779) * _337) + _779;
    vec4 _815 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _826 = (((_815.z - _802) + cbMtdParam._m0[26u].z) * _309) + _802;
    vec4 _841 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _856 = ((cbMtdParam._m0[27u].z * _627) * ((_841.z * cbMtdParam._m0[27u].y) - _826)) + _826;
    float _868 = ((_722.x - _741) * _348) + _741;
    float _869 = ((_722.y - _742) * _348) + _742;
    float _874 = ((_762.x - _868) * _513) + _868;
    float _875 = ((_762.y - _869) * _513) + _869;
    float _880 = ((_791.x - _874) * _337) + _874;
    float _881 = ((_791.y - _875) * _337) + _875;
    float _890 = ((((_815.x - _880) * _309) + _880) * 2.0) + (-1.0);
    float _891 = ((((_815.y - _881) * _309) + _881) * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _4253 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _897 = sqrt(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))));
    float _907 = ((cbMtdParam._m0[25u].z * ((_292.x * 2.0) + (-1.0))) + _890) + ((((_841.x * 2.0) + (-1.0)) * _627) * cbMtdParam._m0[27u].x);
    float _908 = ((cbMtdParam._m0[25u].z * ((_292.y * 2.0) + (-1.0))) + _891) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_841.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _910 = gl_FragCoord.x * 0.125;
    float _912 = gl_FragCoord.y * 0.125;
    float _922 = fma(_897, _239 * NORMAL.x, fma(_908, _246 * TANGENT.x, (_232 * _224) * _907));
    float _925 = fma(_897, _239 * NORMAL.y, fma(_908, _246 * TANGENT.y, (_232 * _225) * _907));
    float _928 = fma(_897, _239 * NORMAL.z, fma(_908, _246 * TANGENT.z, (_232 * _226) * _907));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _4264 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _936 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4286 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4297 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4308 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _940 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_910, _912)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _960 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1010 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1000);
    float _1011 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1000);
    float _1012 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1000);
    float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
    float _1017 = _1010 * _1016;
    float _1018 = _1011 * _1016;
    float _1019 = _1012 * _1016;
    vec4 _1021 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_910, _912));
    float _1023 = _1021.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1193 = sqrt(((_1010 * _1010) + (_1011 * _1011)) + (_1012 * _1012));
        float _1199 = (cbMatDynParam._m0[5u].x * _1193) + cbMatDynParam._m0[5u].y;
        float _4319 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1204 = (cbMatDynParam._m0[5u].z * _1193) + cbMatDynParam._m0[5u].w;
        float _4330 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) - _1200)) + _1200) < ((_1023 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1034 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1035 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1053 = fma(_935, cbSceneParam._m0[5u].z, fma(_934, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _933));
    float _1056 = fma(_935, cbSceneParam._m0[6u].z, fma(_934, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _933));
    float _1059 = fma(_935, cbSceneParam._m0[7u].z, fma(_934, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _933));
    uint _1072 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1073 = _1072 + 9u;
    uint _1074 = _1073 + uint(cbMatDynParam._m0[0u].w);
    float _1080 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * cbInstanceData._m0[_1074].x;
    float _1081 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1074].y;
    float _1082 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * cbInstanceData._m0[_1074].z;
    float _4341 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _1086 = 1.0 - _940;
    float _1087 = _1083 * _1086;
    float _1088 = _1084 * _1086;
    float _1089 = _1085 * _1086;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _940;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _940;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _940;
    float _1097 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    vec4 _1109 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1034, cbSceneParam._m0[86u].y * _1035));
    float _1112 = _1109.x * TEXCOORD_3.w;
    float _1113 = dot(vec3(_933, _934, _935), vec3(_1017, _1018, _1019));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _933) - _1017;
    float _1121 = (_1116 * _934) - _1018;
    float _1122 = (_1116 * _935) - _1019;
    float _1126 = abs(dot(vec3(_1017, _1018, _1019), vec3(_933, _934, _935)));
    float _4374 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_936);
    float _1139 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1145 = (1.0 - _1139) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1146 = _1139 * _1128;
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1510;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1235 = fma(_1182, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174));
        float _1239 = fma(_1182, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174));
        float _1243 = fma(_1182, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174));
        float _1268 = _1174 + _933;
        float _1269 = _1178 + _934;
        float _1270 = _1182 + _935;
        float _1280 = fma(_1270, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1268)) - _1235;
        float _1281 = fma(_1270, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1268)) - _1239;
        float _1282 = fma(_1270, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1268)) - _1243;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1235 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1239 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[34u].z) + ((((((_1243 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1338 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1304.x + (-0.5));
        float _1340 = _1338 * (_1304.y + (-0.5));
        float _1341 = _1338 * (_1304.z + (-0.5));
        float _1348 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1311.x + (-0.5));
        float _1350 = _1348 * (_1311.y + (-0.5));
        float _1351 = _1348 * (_1311.z + (-0.5));
        float _1358 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1318.x + (-0.5));
        float _1360 = _1358 * (_1318.y + (-0.5));
        float _1361 = _1358 * (_1318.z + (-0.5));
        float _1368 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1325.x + (-0.5));
        float _1370 = _1368 * (_1325.y + (-0.5));
        float _1371 = _1368 * (_1325.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1392 = (dot(vec3(_933, _934, _935), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1402 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4422 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1404 + 1.0))) + _1409) * _1372;
        float _1419 = _1340 * 0.5;
        float _1420 = _1350 * 0.5;
        float _1421 = _1360 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_933, _934, _935), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4455 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1446 + 1.0))) + _1451) * _1373;
        float _1461 = _1341 * 0.5;
        float _1462 = _1351 * 0.5;
        float _1463 = _1361 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_933, _934, _935), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4488 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1488 + 1.0))) + _1493) * _1374;
        _1510 = _1341;
        _1512 = _1340;
        _1513 = _1339;
        _1514 = _1351;
        _1515 = _1350;
        _1516 = _1349;
        _1517 = _1361;
        _1518 = _1360;
        _1519 = _1359;
        _1520 = _1374;
        _1521 = _1373;
        _1522 = _1372;
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1511;
        _1512 = _1511;
        _1513 = _1511;
        _1514 = _1511;
        _1515 = _1511;
        _1516 = _1511;
        _1517 = _1511;
        _1518 = _1511;
        _1519 = _1511;
        _1520 = _1511;
        _1521 = _1511;
        _1522 = _1511;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1182, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174));
        float _1552 = fma(_1182, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174));
        float _1556 = fma(_1182, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174));
        float _1579 = _1174 + _933;
        float _1580 = _1178 + _934;
        float _1581 = _1182 + _935;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_933, _934, _935), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4551 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_933, _934, _935), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4584 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_933, _934, _935), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4617 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1511;
        _1818 = _1511;
        _1819 = _1511;
        _1820 = _1511;
        _1821 = _1511;
        _1822 = _1511;
        _1823 = _1511;
        _1824 = _1511;
        _1825 = _1511;
        _1826 = _1511;
        _1827 = _1511;
        _1828 = _1511;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1523)) + _1523;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1524)) + _1524;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1525)) + _1525;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1120 * 0.5;
    float _1886 = _1121 * 0.5;
    float _1887 = _1122 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1510, _1514, _1517, _1520));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _936);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2001 = fma(_1182, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174)) + cbModelParam._m0[13u].w;
        float _2005 = fma(_1182, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174)) + cbModelParam._m0[14u].w;
        float _2009 = fma(_1182, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174)) + cbModelParam._m0[15u].w;
        float _2012 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _2015 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _2018 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2046;
        if (_2012 > 0.0)
        {
            _2046 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2046 = frontier_phi_19_17_ladder;
        }
        float _2217;
        if (_2015 > 0.0)
        {
            _2217 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2217 = frontier_phi_28_24_ladder;
        }
        float _2512;
        if (_2018 > 0.0)
        {
            _2512 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2512 = frontier_phi_40_35_ladder;
        }
        float _2514 = isnan(_2217) ? _2046 : (isnan(_2046) ? _2217 : min(_2046, _2217));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _2012) + _2001;
        float _2520 = (_2515 * _2015) + _2005;
        float _2521 = (_2515 * _2018) + _2009;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2522;
        float _2526 = _2522 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 > _2526) || ((_2520 < _2524) || ((_2519 < _2524) || (_2519 > _2526))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_18_40_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2034 = frontier_phi_18_40_ladder_2;
        _2036 = frontier_phi_18_40_ladder_1;
        _2038 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1954);
        _2034 = _2022.x * cbModelParam._m0[1u].y;
        _2036 = _2022.y * cbModelParam._m0[1u].y;
        _2038 = _2022.z * cbModelParam._m0[1u].y;
    }
    float _2042 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _936);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2042 : min(cbModelParam._m0[25u].w, _2042));
    float _2132;
    float _2134;
    float _2136;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2096 = fma(_1182, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174)) + cbModelParam._m0[21u].w;
        float _2100 = fma(_1182, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174)) + cbModelParam._m0[22u].w;
        float _2104 = fma(_1182, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174)) + cbModelParam._m0[23u].w;
        float _2107 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2110 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2113 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2222;
        if (_2107 > 0.0)
        {
            _2222 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2222 = frontier_phi_30_26_ladder;
        }
        float _2539;
        if (_2110 > 0.0)
        {
            _2539 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2539 = frontier_phi_42_37_ladder;
        }
        float _2877;
        if (_2113 > 0.0)
        {
            _2877 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2877 = frontier_phi_52_49_ladder;
        }
        float _2879 = isnan(_2539) ? _2222 : (isnan(_2222) ? _2539 : min(_2222, _2539));
        float _2880 = isnan(_2877) ? _2879 : (isnan(_2879) ? _2877 : min(_2879, _2877));
        float _2884 = (_2880 * _2107) + _2096;
        float _2885 = (_2880 * _2110) + _2100;
        float _2886 = (_2880 * _2113) + _2104;
        float _2887 = _2880 * 9.9999997473787516355514526367188e-05;
        float _2888 = (-1.0) - _2887;
        float _2890 = _2887 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2886 > _2890) || ((_2886 < _2888) || ((_2885 > _2890) || ((_2885 < _2888) || ((_2884 < _2888) || (_2884 > _2890))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2886, cbModelParam._m0[17u].z, fma(_2885, cbModelParam._m0[17u].y, _2884 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2886, cbModelParam._m0[18u].z, fma(_2885, cbModelParam._m0[18u].y, _2884 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2886, cbModelParam._m0[19u].z, fma(_2885, cbModelParam._m0[19u].y, _2884 * cbModelParam._m0[19u].x))), _2043);
            frontier_phi_27_52_ladder = _3008.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3008.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3008.x * cbModelParam._m0[1u].z;
        }
        _2132 = frontier_phi_27_52_ladder_2;
        _2134 = frontier_phi_27_52_ladder_1;
        _2136 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2043);
        _2132 = _2116.x * cbModelParam._m0[1u].z;
        _2134 = _2116.y * cbModelParam._m0[1u].z;
        _2136 = _2116.z * cbModelParam._m0[1u].z;
    }
    float _2149 = (((_1145 * _1097) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2151 = (((_1145 * _1099) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2153 = (((_1145 * _1100) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2151, cbSceneParam._m0[89u].y, _2149 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2151, cbSceneParam._m0[90u].y, _2149 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2151, cbSceneParam._m0[91u].y, _2149 * cbSceneParam._m0[91u].x));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2209 = _2196 / _2208;
    float _2210 = _2200 / _2208;
    float _2211 = _2204 / _2208;
    float _2358;
    float _2359;
    float _2360;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2238 = ((uint(_2211 > cbSceneParam._m0[59u].y) + uint(_2211 > cbSceneParam._m0[59u].x)) + uint(_2211 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2239 = _2238 + 43u;
        uint _2247 = _2238 + 44u;
        uint _2255 = _2238 + 45u;
        uint _2263 = _2238 + 46u;
        float _2274 = fma(_2208, cbSceneParam._m0[_2239].w, fma(_2204, cbSceneParam._m0[_2239].z, fma(_2200, cbSceneParam._m0[_2239].y, _2196 * cbSceneParam._m0[_2239].x)));
        float _2278 = fma(_2208, cbSceneParam._m0[_2247].w, fma(_2204, cbSceneParam._m0[_2247].z, fma(_2200, cbSceneParam._m0[_2247].y, _2196 * cbSceneParam._m0[_2247].x)));
        float _2286 = fma(_2208, cbSceneParam._m0[_2263].w, fma(_2204, cbSceneParam._m0[_2263].z, fma(_2200, cbSceneParam._m0[_2263].y, _2196 * cbSceneParam._m0[_2263].x)));
        float _2291 = cbSceneParam._m0[33u].z * _2286;
        float _2293 = cbSceneParam._m0[33u].w * _2286;
        float _2296 = fma(_2208, cbSceneParam._m0[_2255].w, fma(_2204, cbSceneParam._m0[_2255].z, fma(_2200, cbSceneParam._m0[_2255].y, _2196 * cbSceneParam._m0[_2255].x))) / _2286;
        float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
        float _4743 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2351 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2274) / _2286, (_2293 + _2278) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2274) / _2286, (_2278 - _2291) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2291) / _2286, (_2278 - _2293) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2293) / _2286, (_2291 + _2278) / _2286), _2296), 0.0)).x), vec4(0.25)));
        _2358 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
        _2359 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
        _2360 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2358 = 1.0;
        _2359 = 1.0;
        _2360 = 1.0;
    }
    float _2424;
    float _2426;
    float _2428;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2412 = fma(_2208, cbSceneParam._m0[63u].w, fma(_2204, cbSceneParam._m0[63u].z, fma(_2200, cbSceneParam._m0[63u].y, _2196 * cbSceneParam._m0[63u].x)));
        float _2413 = fma(_2208, cbSceneParam._m0[60u].w, fma(_2204, cbSceneParam._m0[60u].z, fma(_2200, cbSceneParam._m0[60u].y, _2196 * cbSceneParam._m0[60u].x))) / _2412;
        float _2414 = fma(_2208, cbSceneParam._m0[61u].w, fma(_2204, cbSceneParam._m0[61u].z, fma(_2200, cbSceneParam._m0[61u].y, _2196 * cbSceneParam._m0[61u].x))) / _2412;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2413 >= cbSceneParam._m0[64u].x) && (_2414 >= cbSceneParam._m0[64u].y)) && (_2413 <= cbSceneParam._m0[64u].z)) && (_2414 <= cbSceneParam._m0[64u].w))
        {
            float _2552 = fma(_2208, cbSceneParam._m0[62u].w, fma(_2204, cbSceneParam._m0[62u].z, fma(_2200, cbSceneParam._m0[62u].y, _2196 * cbSceneParam._m0[62u].x))) / _2412;
            float _2556 = isnan(cbSceneParam._m0[41u].w) ? _2552 : (isnan(_2552) ? cbSceneParam._m0[41u].w : max(_2552, cbSceneParam._m0[41u].w));
            float _2599 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
            float _4759 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
            float _2606 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2413, cbSceneParam._m0[33u].w + _2414), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2413, _2414 - cbSceneParam._m0[33u].z), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].z, _2414 - cbSceneParam._m0[33u].w), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2414), _2556), 0.0)).x), vec4(0.25)));
            float _2610 = 1.0 - (_2606 * cbSceneParam._m0[34u].x);
            float _2611 = 1.0 - (_2606 * cbSceneParam._m0[34u].y);
            float _2612 = 1.0 - (_2606 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_39_38_ladder_1 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_39_38_ladder_2 = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
        }
        else
        {
            frontier_phi_39_38_ladder = _2360;
            frontier_phi_39_38_ladder_1 = _2359;
            frontier_phi_39_38_ladder_2 = _2358;
        }
        _2424 = frontier_phi_39_38_ladder_2;
        _2426 = frontier_phi_39_38_ladder_1;
        _2428 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2424 = _2358;
        _2426 = _2359;
        _2428 = _2360;
    }
    uvec4 _2433 = floatBitsToUint(cbInstanceData._m0[_1072 + 5u]);
    uint _2435 = _2433.x * 14u;
    uint _2436 = _2435 + 13u;
    float _2443 = _1112 + (-1.0);
    float _2448 = (cbLight._m0[_2436].x * _2443) + 1.0;
    float _2449 = (cbLight._m0[_2436].y * _2443) + 1.0;
    float _2450 = (cbLight._m0[_2436].z * _2443) + 1.0;
    float _2451 = (cbLight._m0[_2436].w * _2443) + 1.0;
    uint _2452 = _2435 + 5u;
    float _2458 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2462 = _2435 + 4u;
    float _2471 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2475 = _2435 | 1u;
    float _2486 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_933, _934, _935));
    float _2489 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_933, _934, _935));
    float _4795 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _4806 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * 0.3183098733425140380859375;
    float _2496 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * 0.3183098733425140380859375;
    float _2503 = ((cbLight._m0[_2452].x * _2458) * _2496) + (((cbLight._m0[_2462].x * _2424) * _2471) * _2494);
    float _2504 = ((_2458 * cbLight._m0[_2452].y) * _2496) + (((cbLight._m0[_2462].y * _2426) * _2471) * _2494);
    float _2505 = ((_2458 * cbLight._m0[_2452].z) * _2496) + (((cbLight._m0[_2462].z * _2428) * _2471) * _2494);
    uvec4 _2509 = floatBitsToUint(cbLight._m0[_2435 + 12u]);
    bool _2511 = _2509.x == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2511)
    {
        _2613 = _2503;
        _2615 = _2504;
        _2617 = _2505;
    }
    else
    {
        uint _2621 = _2435 + 6u;
        float _2637 = (dot(vec3(cbLight._m0[_2435 + 2u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4817 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2640 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2613 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2503;
        _2615 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2504;
        _2617 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2505;
    }
    bool _2620 = _2509.y == 0u;
    float _2675;
    float _2677;
    float _2679;
    if (_2620)
    {
        _2675 = _2613;
        _2677 = _2615;
        _2679 = _2617;
    }
    else
    {
        uint _2848 = _2435 + 7u;
        float _2864 = (dot(vec3(cbLight._m0[_2435 + 3u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2865 = _2864 * _2864;
        float _4833 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2866 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2867 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2675 = (((cbLight._m0[_2848].x * 0.3183098733425140380859375) * _2866) * _2867) + _2613;
        _2677 = (((cbLight._m0[_2848].y * 0.3183098733425140380859375) * _2866) * _2867) + _2615;
        _2679 = (((cbLight._m0[_2848].z * 0.3183098733425140380859375) * _2866) * _2867) + _2617;
    }
    uint _2682 = _2435 + 8u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _936) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2435].x + _1017;
    float _2698 = cbLight._m0[_2435].y + _1018;
    float _2699 = cbLight._m0[_2435].z + _1019;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2435].xyz));
    float _4849 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _4860 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2711 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _2712 = dot(vec3(_933, _934, _935), vec3(_2704, _2705, _2706));
    float _4871 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2704, _2705, _2706));
    float _4882 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2696 * _2696;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0);
    float _2733 = 0.959999978542327880859375 - _1094;
    float _2735 = 0.959999978542327880859375 - _1095;
    float _2736 = 0.959999978542327880859375 - _1096;
    float _2743 = 1.0 - _2696;
    float _2754 = (0.5 / (((_2711 * ((_2710 * _2743) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2743) + _2696) * _2710))) * _2710;
    float _4893 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2770 = _2435 + 9u;
    float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _936) * 0.949999988079071044921875);
    float _2782 = _2781 * _2781;
    float _2783 = cbLight._m0[_2475].x + _1017;
    float _2784 = cbLight._m0[_2475].y + _1018;
    float _2785 = cbLight._m0[_2475].z + _1019;
    float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
    float _2790 = _2789 * _2783;
    float _2791 = _2789 * _2784;
    float _2792 = _2789 * _2785;
    float _2793 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2475].xyz));
    float _4904 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2796 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    float _2797 = dot(vec3(_933, _934, _935), vec3(_2790, _2791, _2792));
    float _4915 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
    float _2801 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2790, _2791, _2792));
    float _4926 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2805 = _2782 * _2782;
    float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
    float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) * 5.0);
    float _2823 = 1.0 - _2782;
    float _2833 = (0.5 / (((_2711 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2823) + _2782) * _2796))) * _2796;
    float _4937 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2835 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
    float _2845 = (((((_2816 * _2733) + _1097) * cbLight._m0[_2770].x) * _2835) * _2458) + ((((cbLight._m0[_2682].x * _2424) * ((_2732 * _2733) + _1097)) * _2756) * _2471);
    float _2846 = (((((_2816 * _2735) + _1099) * cbLight._m0[_2770].y) * _2835) * _2458) + ((((cbLight._m0[_2682].y * _2426) * ((_2732 * _2735) + _1099)) * _2756) * _2471);
    float _2847 = (((((_2816 * _2736) + _1100) * cbLight._m0[_2770].z) * _2835) * _2458) + ((((cbLight._m0[_2682].z * _2428) * ((_2732 * _2736) + _1100)) * _2756) * _2471);
    float _2903;
    float _2905;
    float _2907;
    if (_2511)
    {
        _2903 = _2845;
        _2905 = _2846;
        _2907 = _2847;
    }
    else
    {
        uint _2909 = _2435 + 2u;
        uint _2913 = _2435 + 10u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _936) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _1017;
        float _2930 = cbLight._m0[_2909].y + _1018;
        float _2931 = cbLight._m0[_2909].z + _1019;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2909].xyz));
        float _4948 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _2943 = dot(vec3(_933, _934, _935), vec3(_2936, _2937, _2938));
        float _4959 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _4970 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2962 = exp2(log2(1.0 - (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) * 5.0);
        float _2969 = 1.0 - _2928;
        float _2979 = (0.5 / (((_2711 * ((_2942 * _2969) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2969) + _2928) * _2942))) * _2942;
        float _4981 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2981 = (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2982 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2903 = (((((_2962 * _2733) + _1097) * cbLight._m0[_2913].x) * _2981) * _2982) + _2845;
        _2905 = (((((_2962 * _2735) + _1099) * cbLight._m0[_2913].y) * _2981) * _2982) + _2846;
        _2907 = (((((_2962 * _2736) + _1100) * cbLight._m0[_2913].z) * _2981) * _2982) + _2847;
    }
    float _3013;
    float _3015;
    float _3017;
    if (_2620)
    {
        _3013 = _2903;
        _3015 = _2905;
        _3017 = _2907;
    }
    else
    {
        uint _3024 = _2435 + 3u;
        uint _3028 = _2435 + 11u;
        float _3042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3024].w)) * _936) * 0.949999988079071044921875);
        float _3043 = _3042 * _3042;
        float _3044 = cbLight._m0[_3024].x + _1017;
        float _3045 = cbLight._m0[_3024].y + _1018;
        float _3046 = cbLight._m0[_3024].z + _1019;
        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
        float _3051 = _3050 * _3044;
        float _3052 = _3050 * _3045;
        float _3053 = _3050 * _3046;
        float _3054 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_3024].xyz));
        float _4997 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3057 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3058 = dot(vec3(_933, _934, _935), vec3(_3051, _3052, _3053));
        float _5008 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3061 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _3062 = dot(vec3(cbLight._m0[_3024].xyz), vec3(_3051, _3052, _3053));
        float _5019 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3066 = _3043 * _3043;
        float _3070 = ((_3061 * _3061) * (_3066 + (-1.0))) + 1.0;
        float _3077 = exp2(log2(1.0 - (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) * 5.0);
        float _3084 = 1.0 - _3043;
        float _3094 = (0.5 / (((_2711 * ((_3057 * _3084) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _3084) + _3043) * _3057))) * _3057;
        float _5030 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        float _3096 = (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3066 / ((_3070 * _3070) * 3.141590118408203125));
        float _3097 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _3013 = (((((_3077 * _2733) + _1097) * cbLight._m0[_3028].x) * _3096) * _3097) + _2903;
        _3015 = (((((_3077 * _2735) + _1099) * cbLight._m0[_3028].y) * _3096) * _3097) + _2905;
        _3017 = (((((_3077 * _2736) + _1100) * cbLight._m0[_3028].z) * _3096) * _3097) + _2907;
    }
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_2433.y == 0u)
    {
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.x;
        uint _3130 = uint((float(_3118.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1035) / _3119))) + floor(float(uint(cbSceneParam._m0[85u].x * _1034) / _3119)));
        float _3140 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3141 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
        uint _3144 = uint(isnan(14.0) ? _3141 : (isnan(_3141) ? 14.0 : min(_3141, 14.0)));
        uvec4 _3149 = texelFetch(g_lightClusterGridBuffer, int(((_3144 << 2u) + (_3130 << 6u)) >> 2u));
        uint _3150 = _3149.x;
        uint _3151 = _3118.z;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((((1u << ((_3151 >> 4u) & 15u)) + 4294967295u) & _3150) == 0u) || ((_3151 & 240u) == 0u))
        {
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
        }
        else
        {
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            uint _3389 = 0u;
            uint _3398;
            bool _3399;
            for (;;)
            {
                _3398 = texelFetch(g_lightClassification, int((((_3144 << 5u) + (_3130 << 9u)) + (_3389 << 2u)) >> 2u)).x;
                _3399 = _3398 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3399)
                {
                    frontier_phi_73_pred = _3388;
                    frontier_phi_73_pred_1 = _3387;
                    frontier_phi_73_pred_2 = _3386;
                    frontier_phi_73_pred_3 = _3385;
                    frontier_phi_73_pred_4 = _3384;
                    frontier_phi_73_pred_5 = _3383;
                }
                else
                {
                    float _3528;
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    uint _3534;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3398;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    for (;;)
                    {
                        uint _3538 = uint(findLSB(_3534)) + (_3389 << 5u);
                        uint _3535 = (_3534 + 4294967295u) & _3534;
                        uint _3540 = _3538 * 48u;
                        vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3540)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 3u)).x));
                        uint _3560 = (_3538 * 48u) + 4u;
                        vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 3u)).x));
                        uint _3579 = (_3538 * 48u) + 8u;
                        vec3 _3590 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3579)).x, texelFetch(g_PointLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3579 + 2u)).x));
                        float _3594 = _3554.x - _2209;
                        float _3595 = _3554.y - _2210;
                        float _3596 = _3554.z - _2211;
                        float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                        float _3600 = inversesqrt(_3597);
                        float _3601 = _3600 * _3594;
                        float _3602 = _3600 * _3595;
                        float _3603 = _3600 * _3596;
                        float _3604 = dot(vec3(_1053, _1056, _1059), vec3(_3601, _3602, _3603));
                        float _3609 = 1.0 - (_3597 * _3554.w);
                        float _5056 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3610 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3611 = sqrt(_3597) * _3573.w;
                        float _3614 = 1.39999997615814208984375 / (_3611 + 1.39999997615814208984375);
                        float _3615 = _3614 * _3614;
                        float _3618 = ((1.0 - _3615) * _3604) + _3615;
                        float _3621 = _3611 * _3611;
                        float _3625 = ((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3610) / ((_3621 * 0.699999988079071044921875) + 1.0);
                        float _3629 = (-0.0) - _2209;
                        float _3630 = (-0.0) - _2210;
                        float _3631 = (-0.0) - _2211;
                        float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                        float _3636 = _3635 * _3629;
                        float _3637 = _3635 * _3630;
                        float _3638 = _3635 * _3631;
                        float _3645 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                        float _3646 = 1.0 - _1128;
                        float _3653 = sqrt(1.0 - ((1.0 - (_3646 * _3646)) * (1.0 - (_3645 * _3645))));
                        float _3654 = _3653 * _3653;
                        float _3655 = _3654 * _3654;
                        float _3656 = _3636 + _3601;
                        float _3657 = _3637 + _3602;
                        float _3658 = _3638 + _3603;
                        float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                        float _3666 = dot(vec3(_1053, _1056, _1059), vec3(_3636, _3637, _3638));
                        float _5072 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                        float _3669 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3670 = dot(vec3(_1053, _1056, _1059), vec3(_3662 * _3656, _3662 * _3657, _3662 * _3658));
                        float _5083 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3673 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3677 = ((_3673 * _3673) * (_3655 + (-1.0))) + 1.0;
                        float _3678 = _3614 * _3654;
                        float _3679 = _3678 * _3678;
                        float _3682 = ((1.0 - _3679) * _3604) + _3679;
                        float _5094 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3683 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3684 = 1.0 - _3654;
                        float _3694 = (0.5 / (((_3683 * ((_3669 * _3684) + _3654)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3654) * _3669))) * _3683;
                        float _5105 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3705 = (((_3655 * 3.1415927410125732421875) * (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0)))) / ((_3677 * _3677) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125))) * _3610;
                        _3458 = (_3625 * _3573.x) + _3531;
                        _3459 = (_3625 * _3573.y) + _3532;
                        _3460 = (_3625 * _3573.z) + _3533;
                        _3455 = (_3705 * _3590.x) + _3528;
                        _3456 = (_3705 * _3590.y) + _3529;
                        _3457 = (_3705 * _3590.z) + _3530;
                        if (_3535 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3535;
                        }
                    }
                    frontier_phi_73_pred = _3460;
                    frontier_phi_73_pred_1 = _3459;
                    frontier_phi_73_pred_2 = _3458;
                    frontier_phi_73_pred_3 = _3457;
                    frontier_phi_73_pred_4 = _3456;
                    frontier_phi_73_pred_5 = _3455;
                }
                _3241 = frontier_phi_73_pred;
                _3239 = frontier_phi_73_pred_1;
                _3237 = frontier_phi_73_pred_2;
                _3235 = frontier_phi_73_pred_3;
                _3233 = frontier_phi_73_pred_4;
                _3231 = frontier_phi_73_pred_5;
                uint _3390 = _3389 + 1u;
                if (_3390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3383 = _3231;
                    _3384 = _3233;
                    _3385 = _3235;
                    _3386 = _3237;
                    _3387 = _3239;
                    _3388 = _3241;
                    _3389 = _3390;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
        }
        uvec4 _3244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3245 = _3244.z;
        uint _3247 = (_3245 >> 8u) & 15u;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        if (((4294967295u << _3247) & _3150) == 0u)
        {
            _3351 = _3230;
            _3353 = _3232;
            _3355 = _3234;
            _3357 = _3236;
            _3359 = _3238;
            _3361 = _3240;
        }
        else
        {
            float _3376 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _3377 = _3376 * _2209;
            float _3378 = _3376 * _2210;
            float _3379 = _3376 * _2211;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3247 < ((_3245 >> 12u) & 15u))
            {
                float _3352;
                float _3354;
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3511 = _3230;
                float _3512 = _3232;
                float _3513 = _3234;
                float _3514 = _3236;
                float _3515 = _3238;
                float _3516 = _3240;
                uint _3517 = _3247;
                uint _3526;
                bool _3527;
                for (;;)
                {
                    _3526 = texelFetch(g_lightClassification, int((((_3144 << 5u) + (_3130 << 9u)) + (_3517 << 2u)) >> 2u)).x;
                    _3527 = _3526 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3527)
                    {
                        frontier_phi_84_pred = _3516;
                        frontier_phi_84_pred_1 = _3515;
                        frontier_phi_84_pred_2 = _3514;
                        frontier_phi_84_pred_3 = _3513;
                        frontier_phi_84_pred_4 = _3512;
                        frontier_phi_84_pred_5 = _3511;
                    }
                    else
                    {
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        uint _3738 = _3526;
                        uint _3739;
                        vec4 _3764;
                        float _3765;
                        vec4 _3780;
                        vec3 _3792;
                        vec4 _3807;
                        vec4 _3822;
                        float _3868;
                        bool _3869;
                        for (;;)
                        {
                            uint _3749 = ((_3517 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3738));
                            _3739 = (_3738 + 4294967295u) & _3738;
                            uint _3751 = _3749 * 40u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3765 = _3764.w;
                            uint _3767 = (_3749 * 40u) + 4u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3782 = (_3749 * 40u) + 8u;
                            _3792 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x));
                            uint _3794 = (_3749 * 40u) + 16u;
                            _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3809 = (_3749 * 40u) + 20u;
                            _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3824 = (_3749 * 40u) + 24u;
                            vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            uint _3843 = (_3749 * 40u) + 28u;
                            vec4 _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3868 = fma(_2211, _3856.z, fma(_2210, _3856.y, _3856.x * _2209)) + _3856.w;
                            _3869 = !((fma(_2211, _3837.z, fma(_2210, _3837.y, _3837.x * _2209)) + _3837.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3869)
                            {
                                float _3896 = _3764.x - _2209;
                                float _3897 = _3764.y - _2210;
                                float _3898 = _3764.z - _2211;
                                float _3899 = dot(vec3(_3896, _3897, _3898), vec3(_3896, _3897, _3898));
                                float _3902 = inversesqrt(_3899);
                                float _3903 = _3902 * _3896;
                                float _3904 = _3902 * _3897;
                                float _3905 = _3902 * _3898;
                                float _3909 = 1.0 - (_3899 / (_3765 * _3765));
                                float _5116 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3910 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3914 = sqrt(_3899) * _3780.w;
                                float _3916 = 1.39999997615814208984375 / (_3914 + 1.39999997615814208984375);
                                float _3917 = _3916 * _3916;
                                float _3920 = ((1.0 - _3917) * dot(vec3(_3903, _3904, _3905), vec3(_1053, _1056, _1059))) + _3917;
                                float _3923 = _3914 * _3914;
                                float _3927 = (fma(_2211, _3807.z, fma(_2210, _3807.y, _3807.x * _2209)) + _3807.w) / _3868;
                                float _3928 = (fma(_2211, _3822.z, fma(_2210, _3822.y, _3822.x * _2209)) + _3822.w) / _3868;
                                float _3932 = 1.0 - dot(vec2(_3927, _3928), vec2(_3927, _3928));
                                float _5132 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3933 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3934 = _3933 * (((isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0))) * _3910) / ((_3923 * 0.699999988079071044921875) + 1.0));
                                float _3946 = exp2(log2(1.0 / ((_3923 * 3.5) + 5.0)) * 0.25);
                                float _3947 = 1.0 - _1128;
                                float _3954 = sqrt(1.0 - ((1.0 - (_3947 * _3947)) * (1.0 - (_3946 * _3946))));
                                float _3955 = _3954 * _3954;
                                float _3956 = _3955 * _3955;
                                float _3957 = _3903 - _3377;
                                float _3958 = _3904 - _3378;
                                float _3959 = _3905 - _3379;
                                float _3963 = inversesqrt(dot(vec3(_3957, _3958, _3959), vec3(_3957, _3958, _3959)));
                                float _3967 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3377, (-0.0) - _3378, (-0.0) - _3379));
                                float _5143 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3970 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3971 = dot(vec3(_1053, _1056, _1059), vec3(_3963 * _3957, _3963 * _3958, _3963 * _3959));
                                float _5154 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3974 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3978 = ((_3974 * _3974) * (_3956 + (-1.0))) + 1.0;
                                float _3979 = _3916 * _3955;
                                float _3980 = _3979 * _3979;
                                float _3986 = ((1.0 - _3980) * dot(vec3(_1053, _1056, _1059), vec3(_3903, _3904, _3905))) + _3980;
                                float _5165 = isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0));
                                float _3987 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3988 = 1.0 - _3955;
                                float _3998 = (0.5 / (((_3987 * ((_3970 * _3988) + _3955)) + 9.9999999392252902907785028219223e-09) + (((_3987 * _3988) + _3955) * _3970))) * _3987;
                                float _5176 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4008 = (_3933 * _3910) * (((_3956 * 3.1415927410125732421875) * (isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0)))) / ((_3978 * _3978) * ((_3923 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3934 * _3780.z;
                                frontier_phi_90_pred_1 = _3934 * _3780.y;
                                frontier_phi_90_pred_2 = _3934 * _3780.x;
                                frontier_phi_90_pred_3 = _4008 * _3792.z;
                                frontier_phi_90_pred_4 = _4008 * _3792.y;
                                frontier_phi_90_pred_5 = _4008 * _3792.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4017 = frontier_phi_90_pred;
                            _4016 = frontier_phi_90_pred_1;
                            _4015 = frontier_phi_90_pred_2;
                            _4014 = frontier_phi_90_pred_3;
                            _4013 = frontier_phi_90_pred_4;
                            _4012 = frontier_phi_90_pred_5;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            if (_3739 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3739;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3724;
                        frontier_phi_84_pred_1 = _3723;
                        frontier_phi_84_pred_2 = _3722;
                        frontier_phi_84_pred_3 = _3721;
                        frontier_phi_84_pred_4 = _3720;
                        frontier_phi_84_pred_5 = _3719;
                    }
                    _3362 = frontier_phi_84_pred;
                    _3360 = frontier_phi_84_pred_1;
                    _3358 = frontier_phi_84_pred_2;
                    _3356 = frontier_phi_84_pred_3;
                    _3354 = frontier_phi_84_pred_4;
                    _3352 = frontier_phi_84_pred_5;
                    uint _3518 = _3517 + 1u;
                    if (_3518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3511 = _3352;
                        _3512 = _3354;
                        _3513 = _3356;
                        _3514 = _3358;
                        _3515 = _3360;
                        _3516 = _3362;
                        _3517 = _3518;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3358;
                frontier_phi_65_66_ladder_1 = _3362;
                frontier_phi_65_66_ladder_2 = _3360;
                frontier_phi_65_66_ladder_3 = _3356;
                frontier_phi_65_66_ladder_4 = _3354;
                frontier_phi_65_66_ladder_5 = _3352;
            }
            else
            {
                frontier_phi_65_66_ladder = _3236;
                frontier_phi_65_66_ladder_1 = _3240;
                frontier_phi_65_66_ladder_2 = _3238;
                frontier_phi_65_66_ladder_3 = _3234;
                frontier_phi_65_66_ladder_4 = _3232;
                frontier_phi_65_66_ladder_5 = _3230;
            }
            _3351 = frontier_phi_65_66_ladder_5;
            _3353 = frontier_phi_65_66_ladder_4;
            _3355 = frontier_phi_65_66_ladder_3;
            _3357 = frontier_phi_65_66_ladder;
            _3359 = frontier_phi_65_66_ladder_2;
            _3361 = frontier_phi_65_66_ladder_1;
        }
        float _3366 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _3163 = (_3366 * _3357) + _2675;
        _3165 = (_3366 * _3359) + _2677;
        _3167 = (_3366 * _3361) + _2679;
        _3169 = ((_3351 * _1097) * _3366) + _3013;
        _3171 = ((_3353 * _1099) * _3366) + _3015;
        _3173 = ((_3355 * _1100) * _3366) + _3017;
    }
    else
    {
        _3163 = _2675;
        _3165 = _2677;
        _3167 = _2679;
        _3169 = _3013;
        _3171 = _3015;
        _3173 = _3017;
    }
    float _5192 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _5203 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _5214 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _3190 = ((isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0))) * (_3163 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1112))) + ((_3169 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _3191 = ((isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3165 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1112))) + ((_3171 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _3192 = ((isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3167 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1112))) + ((_3173 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    uint _3193 = _1072 + 6u;
    float _3201 = _1034 / cbSceneParam._m0[86u].x;
    float _3202 = _1035 / cbSceneParam._m0[86u].y;
    vec4 _3216 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3201, _3202, (log2((isnan(cbSceneParam._m0[77u].w) ? _960 : (isnan(_960) ? cbSceneParam._m0[77u].w : min(_960, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3218 = _3216.x;
    float _3219 = _3216.y;
    float _3220 = _3216.z;
    float _3221 = _3216.w;
    float _3293;
    float _3295;
    float _3297;
    float _3299;
    if (_960 > cbSceneParam._m0[78u].w)
    {
        float _3255 = isnan(_960) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _960 : min(cbSceneParam._m0[80u].w, _960));
        float _3256 = _3255 / _960;
        float _3267 = _3256 * _1010;
        float _3268 = _1011 * _3256;
        float _3269 = (-0.0) - _3268;
        float _3271 = _3256 * _1012;
        float _3273 = (cbSceneParam._m0[77u].w * _3269) / _3255;
        float _3274 = _3273 + cbSceneParam._m0[79u].w;
        float _3275 = cbSceneParam._m0[79u].w - _3268;
        float _3281 = sqrt(((_3267 * _3267) + (_3268 * _3268)) + (_3271 * _3271));
        float _3284 = (1.0 - (cbSceneParam._m0[77u].w / _3255)) * _3281;
        float _3289 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3291 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3468;
        if (abs((_3269 - _3273) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3468 = ((((_3274 > 0.0) ? exp2(_3289 * _3274) : (2.0 - exp2(_3291 * _3274))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3284;
        }
        else
        {
            float _3412 = 1.0 / cbSceneParam._m0[80u].x;
            float _3413 = isnan(_3275) ? _3274 : (isnan(_3274) ? _3275 : max(_3274, _3275));
            float _3414 = isnan(_3275) ? _3274 : (isnan(_3274) ? _3275 : min(_3274, _3275));
            float _3423 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : min(_3413, 0.0));
            float _3424 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : min(_3414, 0.0));
            _3468 = ((abs(_3281 / _3269) * cbSceneParam._m0[80u].y) * ((((_3423 - _3424) * 2.0) - ((exp2(_3289 * (isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0)))) - exp2(_3289 * (isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))))) * _3412)) - ((exp2(_3291 * _3423) - exp2(_3291 * _3424)) * _3412))) + (_3284 * cbSceneParam._m0[80u].z);
        }
        vec4 _3470 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3201, _3202, 1.0), 0.0);
        float _3479 = exp2((_3468 * (-1.44269502162933349609375)) * (1.0 - _3470.w));
        float _3480 = log2(_3479);
        float _3496 = log2(_3221);
        _3293 = (exp2(_3496 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3480 * cbSceneParam._m0[78u].x)) * _3470.x) / cbSceneParam._m0[78u].x)) + _3218;
        _3295 = (exp2(_3496 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3480 * cbSceneParam._m0[78u].y)) * _3470.y) / cbSceneParam._m0[78u].y)) + _3219;
        _3297 = (exp2(_3496 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3480 * cbSceneParam._m0[78u].z)) * _3470.z) / cbSceneParam._m0[78u].z)) + _3220;
        _3299 = _3479 * _3221;
    }
    else
    {
        _3293 = _3218;
        _3295 = _3219;
        _3297 = _3220;
        _3299 = _3221;
    }
    bool _3506;
    vec4 _3309;
    vec4 _3331;
    float _3333;
    float _3337;
    float _3338;
    float _3339;
    float _3340;
    bool _3350;
    for (;;)
    {
        _3309 = cbMatDynParam._m0[0u];
        float _3311 = roundEven(_3309.y);
        bool _3312 = _3311 == 3.0;
        float _3313 = log2(_3299);
        float _3320 = exp2(_3313 * cbSceneParam._m0[78u].x) * _3190;
        float _3321 = exp2(_3313 * cbSceneParam._m0[78u].y) * _3191;
        float _3322 = exp2(_3313 * cbSceneParam._m0[78u].z) * _3192;
        float _3329 = _1023 + (-0.5);
        _3331 = cbMtdParam._m0[1u];
        _3333 = _3331.y * _3329;
        float _3336 = (_3311 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3337 = _3336 * (_3312 ? _3320 : (_3320 + (cbSceneParam._m0[72u].w * _3293)));
        _3338 = _3336 * (_3312 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3295)));
        _3339 = _3336 * (_3312 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3297)));
        _3340 = _3329 * 0.999000012874603271484375;
        _3350 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3350)
        {
            if ((cbInstanceData._m0[_1072 + 7u].x + _3340) < 0.5)
            {
                _3506 = true;
                break;
            }
        }
        uint _3447 = _1073 + uint(_3309.w);
        if ((cbInstanceData._m0[_3447].w < 1.0) && ((cbInstanceData._m0[_3447].w + _3340) < 0.5))
        {
            _3506 = true;
            break;
        }
        if ((_3333 + 1.0) < _3331.x)
        {
            _3506 = true;
            break;
        }
        _3506 = false;
        break;
    }
    float _3710;
    if (_3506)
    {
        discard_state = true;
        _3710 = 0.0;
    }
    else
    {
        _3710 = cbInstanceData._m0[_3193].w;
    }
    SV_Target.x = _3337;
    SV_Target.y = _3338;
    SV_Target.z = _3339;
    SV_Target.w = _3710;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3193].w;
    discard_exit();
}


