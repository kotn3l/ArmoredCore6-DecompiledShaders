#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1506;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _290 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _305 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _328 = log2(0.0);
    float _330 = exp2(_328 * cbMtdParam._m0[23u].x);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    float _341 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _342 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _343 = isnan(1.0) ? _342 : (isnan(_342) ? 1.0 : min(_342, 1.0));
    vec4 _355 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _358 = _355.y;
    float _361 = (_355.x + (-0.02500000037252902984619140625)) * 8.0;
    float _365 = roundEven(5.0 - _361);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(4.0) ? _366 : (isnan(_366) ? 4.0 : min(_366, 4.0));
    float _380 = floor(_367);
    vec4 _383 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _380));
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[17u].x;
    _201[0u] = cbMtdParam._m0[17u].y;
    _202[0u] = cbMtdParam._m0[17u].z;
    _200[1u] = cbMtdParam._m0[15u].x;
    _201[1u] = cbMtdParam._m0[15u].y;
    _202[1u] = cbMtdParam._m0[15u].z;
    _200[2u] = cbMtdParam._m0[14u].x;
    _201[2u] = cbMtdParam._m0[14u].y;
    _202[2u] = cbMtdParam._m0[14u].z;
    _200[3u] = cbMtdParam._m0[13u].x;
    _201[3u] = cbMtdParam._m0[13u].y;
    _202[3u] = cbMtdParam._m0[13u].z;
    _200[4u] = cbMtdParam._m0[12u].x;
    _201[4u] = cbMtdParam._m0[12u].y;
    _202[4u] = cbMtdParam._m0[12u].z;
    _200[5u] = cbMtdParam._m0[18u].x;
    _201[5u] = cbMtdParam._m0[18u].y;
    _202[5u] = cbMtdParam._m0[18u].z;
    float _447 = roundEven(_361);
    float _448 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    uint _450 = uint(int(isnan(5.0) ? _448 : (isnan(_448) ? 5.0 : min(_448, 5.0))));
    vec4 _480 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _491 = cbMtdParam._m0[9u].x * _480.x;
    float _492 = cbMtdParam._m0[9u].y * _480.y;
    float _493 = cbMtdParam._m0[9u].z * _480.z;
    float _500 = ((((((_200[_450] - cbMtdParam._m0[10u].x) * _358) + cbMtdParam._m0[10u].x) * _383.x) - _491) * _343) + _491;
    float _501 = ((((((_201[_450] - cbMtdParam._m0[10u].y) * _358) + cbMtdParam._m0[10u].y) * _383.y) - _492) * _343) + _492;
    float _502 = ((((((_202[_450] - cbMtdParam._m0[10u].z) * _358) + cbMtdParam._m0[10u].z) * _383.z) - _493) * _343) + _493;
    float _508 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _521 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _540 = (((cbMtdParam._m0[16u].x * _521.x) - _500) * _508) + _500;
    float _541 = (((cbMtdParam._m0[16u].y * _521.y) - _501) * _508) + _501;
    float _542 = (((cbMtdParam._m0[16u].z * _521.z) - _502) * _508) + _502;
    vec4 _555 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _575 = (((cbMtdParam._m0[19u].x * _555.x) - _540) * _332) + _540;
    float _576 = (((cbMtdParam._m0[19u].y * _555.y) - _541) * _332) + _541;
    float _577 = (((cbMtdParam._m0[19u].z * _555.z) - _542) * _332) + _542;
    vec4 _589 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _614 = (_320.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _589.x) - _575) * _307) + _575);
    float _616 = (_320.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _589.y) - _576) * _307) + _576);
    float _618 = (_320.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _589.z) - _577) * _307) + _577);
    float _622 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _631 = (_622 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _622))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3968 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _639 = ((cbMtdParam._m0[21u].x - _614) * _632) + _614;
    float _640 = ((cbMtdParam._m0[21u].y - _616) * _632) + _616;
    float _641 = ((cbMtdParam._m0[21u].z - _618) * _632) + _618;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[29u].x;
    _196[0u] = cbMtdParam._m0[29u].y;
    _195[1u] = cbMtdParam._m0[31u].x;
    _196[1u] = cbMtdParam._m0[31u].y;
    _195[2u] = cbMtdParam._m0[30u].z;
    _196[2u] = cbMtdParam._m0[30u].w;
    _195[3u] = cbMtdParam._m0[30u].x;
    _196[3u] = cbMtdParam._m0[30u].y;
    _195[4u] = cbMtdParam._m0[29u].z;
    _196[4u] = cbMtdParam._m0[29u].w;
    float _681 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    uint _683 = uint(int(isnan(4.0) ? _681 : (isnan(_681) ? 4.0 : min(_681, 4.0))));
    float _690 = ((_196[_683] - cbMtdParam._m0[22u].z) * _343) + cbMtdParam._m0[22u].z;
    float _693 = ((cbMtdParam._m0[22u].w - _690) * _508) + _690;
    float _696 = ((cbMtdParam._m0[25u].y - _693) * _332) + _693;
    float _699 = ((cbMtdParam._m0[26u].y - _696) * _307) + _696;
    float _701 = _699 - (_699 * _622);
    vec4 _717 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _380));
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _742 = cbMtdParam._m0[22u].x + _734.z;
    float _745 = (((_717.z + _195[_683]) - _742) * _343) + _742;
    vec4 _757 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _768 = (((_757.z - _745) + cbMtdParam._m0[28u].z) * _508) + _745;
    float _774 = ((((_294 * 2.0) * _768) - _768) * cbMtdParam._m0[24u].w) + _768;
    vec4 _786 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _797 = (((cbMtdParam._m0[23u].z + _786.z) - _774) * _332) + _774;
    vec4 _810 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _821 = (((_810.z - _797) + cbMtdParam._m0[26u].z) * _307) + _797;
    vec4 _836 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _851 = ((cbMtdParam._m0[27u].z * _622) * ((_836.z * cbMtdParam._m0[27u].y) - _821)) + _821;
    float _863 = ((_717.x - _736) * _343) + _736;
    float _864 = ((_717.y - _737) * _343) + _737;
    float _869 = ((_757.x - _863) * _508) + _863;
    float _870 = ((_757.y - _864) * _508) + _864;
    float _875 = ((_786.x - _869) * _332) + _869;
    float _876 = ((_786.y - _870) * _332) + _870;
    float _885 = ((((_810.x - _875) * _307) + _875) * 2.0) + (-1.0);
    float _886 = ((((_810.y - _876) * _307) + _876) * 2.0) + (-1.0);
    float _887 = dot(vec2(_885, _886), vec2(_885, _886));
    float _3989 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _892 = sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))));
    float _902 = ((cbMtdParam._m0[25u].z * ((_290.x * 2.0) + (-1.0))) + _885) + ((((_836.x * 2.0) + (-1.0)) * _622) * cbMtdParam._m0[27u].x);
    float _903 = ((cbMtdParam._m0[25u].z * ((_290.y * 2.0) + (-1.0))) + _886) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_836.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _905 = gl_FragCoord.x * 0.125;
    float _907 = gl_FragCoord.y * 0.125;
    float _917 = fma(_892, _237 * NORMAL.x, fma(_903, _244 * TANGENT.x, (_230 * _222) * _902));
    float _920 = fma(_892, _237 * NORMAL.y, fma(_903, _244 * TANGENT.y, (_230 * _223) * _902));
    float _923 = fma(_892, _237 * NORMAL.z, fma(_903, _244 * TANGENT.z, (_230 * _224) * _902));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _4000 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _931 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4022 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4033 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4044 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _935 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_905, _907)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _955 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1005 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _995);
    float _1006 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _995);
    float _1007 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _995);
    float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
    float _1012 = _1005 * _1011;
    float _1013 = _1006 * _1011;
    float _1014 = _1007 * _1011;
    vec4 _1016 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_905, _907));
    float _1018 = _1016.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1188 = sqrt(((_1005 * _1005) + (_1006 * _1006)) + (_1007 * _1007));
        float _1194 = (cbMatDynParam._m0[5u].x * _1188) + cbMatDynParam._m0[5u].y;
        float _4055 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1199 = (cbMatDynParam._m0[5u].z * _1188) + cbMatDynParam._m0[5u].w;
        float _4066 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) - _1195)) + _1195) < ((_1018 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1051 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1054 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1067 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1068 = _1067 + 9u;
    uint _1069 = _1068 + uint(cbMatDynParam._m0[0u].w);
    float _1075 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1069].x;
    float _1076 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1069].y;
    float _1077 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1069].z;
    float _4077 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1081 = 1.0 - _935;
    float _1082 = _1078 * _1081;
    float _1083 = _1079 * _1081;
    float _1084 = _1080 * _1081;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _935;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _935;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _935;
    float _1092 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    vec4 _1104 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1107 = _1104.x * TEXCOORD_3.w;
    float _1108 = dot(vec3(_928, _929, _930), vec3(_1012, _1013, _1014));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _928) - _1012;
    float _1116 = (_1111 * _929) - _1013;
    float _1117 = (_1111 * _930) - _1014;
    float _1121 = abs(dot(vec3(_1012, _1013, _1014), vec3(_928, _929, _930)));
    float _4110 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_931);
    float _1134 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1140 = (1.0 - _1134) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1141 = _1134 * _1123;
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1505;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1230 = fma(_1177, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169));
        float _1234 = fma(_1177, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169));
        float _1238 = fma(_1177, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169));
        float _1263 = _1169 + _928;
        float _1264 = _1173 + _929;
        float _1265 = _1177 + _930;
        float _1275 = fma(_1265, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263)) - _1230;
        float _1276 = fma(_1265, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263)) - _1234;
        float _1277 = fma(_1265, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263)) - _1238;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1230 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1234 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[34u].z) + ((((((_1238 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1333 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1299.x + (-0.5));
        float _1335 = _1333 * (_1299.y + (-0.5));
        float _1336 = _1333 * (_1299.z + (-0.5));
        float _1343 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1306.x + (-0.5));
        float _1345 = _1343 * (_1306.y + (-0.5));
        float _1346 = _1343 * (_1306.z + (-0.5));
        float _1353 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1313.x + (-0.5));
        float _1355 = _1353 * (_1313.y + (-0.5));
        float _1356 = _1353 * (_1313.z + (-0.5));
        float _1363 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1320.x + (-0.5));
        float _1365 = _1363 * (_1320.y + (-0.5));
        float _1366 = _1363 * (_1320.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1387 = (dot(vec3(_928, _929, _930), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1397 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4158 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1399 + 1.0))) + _1404) * _1367;
        float _1414 = _1335 * 0.5;
        float _1415 = _1345 * 0.5;
        float _1416 = _1355 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_928, _929, _930), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4191 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1441 + 1.0))) + _1446) * _1368;
        float _1456 = _1336 * 0.5;
        float _1457 = _1346 * 0.5;
        float _1458 = _1356 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_928, _929, _930), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4224 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1483 + 1.0))) + _1488) * _1369;
        _1505 = _1336;
        _1507 = _1335;
        _1508 = _1334;
        _1509 = _1346;
        _1510 = _1345;
        _1511 = _1344;
        _1512 = _1356;
        _1513 = _1355;
        _1514 = _1354;
        _1515 = _1369;
        _1516 = _1368;
        _1517 = _1367;
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1506;
        _1507 = _1506;
        _1508 = _1506;
        _1509 = _1506;
        _1510 = _1506;
        _1511 = _1506;
        _1512 = _1506;
        _1513 = _1506;
        _1514 = _1506;
        _1515 = _1506;
        _1516 = _1506;
        _1517 = _1506;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1543 = fma(_1177, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169));
        float _1547 = fma(_1177, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169));
        float _1551 = fma(_1177, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169));
        float _1574 = _1169 + _928;
        float _1575 = _1173 + _929;
        float _1576 = _1177 + _930;
        float _1586 = fma(_1576, cbModelParam._m0[30u].z, fma(_1575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1574)) - _1543;
        float _1587 = fma(_1576, cbModelParam._m0[31u].z, fma(_1575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1574)) - _1547;
        float _1588 = fma(_1576, cbModelParam._m0[32u].z, fma(_1575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1574)) - _1551;
        float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
        float _1605 = ((_1592 * _1586) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1543 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1592 * _1587) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1547 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1592 * _1588) / cbModelParam._m0[35u].z) + ((((((_1551 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        float _1642 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1609.x + (-0.5));
        float _1644 = _1642 * (_1609.y + (-0.5));
        float _1645 = _1642 * (_1609.z + (-0.5));
        float _1652 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1616.x + (-0.5));
        float _1654 = _1652 * (_1616.y + (-0.5));
        float _1655 = _1652 * (_1616.z + (-0.5));
        float _1662 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1623.x + (-0.5));
        float _1664 = _1662 * (_1623.y + (-0.5));
        float _1665 = _1662 * (_1623.z + (-0.5));
        float _1672 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1630.x + (-0.5));
        float _1674 = _1672 * (_1630.y + (-0.5));
        float _1675 = _1672 * (_1630.z + (-0.5));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = _1643 * 0.5;
        float _1680 = _1653 * 0.5;
        float _1681 = _1663 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_928, _929, _930), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4287 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1706 + 1.0))) + _1711) * _1676;
        float _1721 = _1644 * 0.5;
        float _1722 = _1654 * 0.5;
        float _1723 = _1664 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_928, _929, _930), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4320 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1748 + 1.0))) + _1753) * _1677;
        float _1763 = _1645 * 0.5;
        float _1764 = _1655 * 0.5;
        float _1765 = _1665 * 0.5;
        float _1766 = dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765));
        float _1771 = (_1766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1766);
        float _1779 = (dot(vec3(_928, _929, _930), vec3(_1771 * _1763, _1771 * _1764, _1771 * _1765)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1788 = sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1790 = _1789 * 2.0;
        float _1794 = (1.0 - _1789) / (_1789 + 1.0);
        float _4353 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1804 = ((((1.0 - _1795) * (_1790 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1790 + 1.0))) + _1795) * _1678;
        _1812 = _1645;
        _1813 = _1644;
        _1814 = _1643;
        _1815 = _1655;
        _1816 = _1654;
        _1817 = _1653;
        _1818 = _1665;
        _1819 = _1664;
        _1820 = _1663;
        _1821 = _1678;
        _1822 = _1677;
        _1823 = _1676;
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)));
    }
    else
    {
        _1812 = _1506;
        _1813 = _1506;
        _1814 = _1506;
        _1815 = _1506;
        _1816 = _1506;
        _1817 = _1506;
        _1818 = _1506;
        _1819 = _1506;
        _1820 = _1506;
        _1821 = _1506;
        _1822 = _1506;
        _1823 = _1506;
        _1824 = 0.0;
        _1825 = 0.0;
        _1826 = 0.0;
    }
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1518)) + _1518;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1519)) + _1519;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1520)) + _1520;
    float _1859 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1836));
    float _1880 = _1115 * 0.5;
    float _1881 = _1116 * 0.5;
    float _1882 = _1117 * 0.5;
    float _1883 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1886 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1889 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1923;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1896 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1505, _1509, _1512, _1515));
        float _1900 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1904 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1911 = dot(vec4(cbModelParam._m0[39u]), vec4(_1880, _1881, _1882, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1911) ? 0.0 : (isnan(0.0) ? _1911 : max(0.0, _1911))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1934;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1925 = dot(vec4(cbModelParam._m0[40u]), vec4(_1880, _1881, _1882, 1.0));
        _1934 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1934 = 1.0;
    }
    float _1938 = (_1934 * cbModelParam._m0[1u].x) + (_1923 * (1.0 - cbModelParam._m0[1u].x));
    float _1948 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1948 : min(cbModelParam._m0[25u].z, _1948));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1996 = fma(_1177, cbModelParam._m0[13u].z, fma(_1173, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169)) + cbModelParam._m0[13u].w;
        float _2000 = fma(_1177, cbModelParam._m0[14u].z, fma(_1173, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169)) + cbModelParam._m0[14u].w;
        float _2004 = fma(_1177, cbModelParam._m0[15u].z, fma(_1173, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169)) + cbModelParam._m0[15u].w;
        float _2007 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2010 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2013 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2041;
        if (_2007 > 0.0)
        {
            _2041 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2041 = frontier_phi_19_17_ladder;
        }
        float _2264;
        if (_2010 > 0.0)
        {
            _2264 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2264 = frontier_phi_28_24_ladder;
        }
        float _2521;
        if (_2013 > 0.0)
        {
            _2521 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2521 = frontier_phi_40_35_ladder;
        }
        float _2523 = isnan(_2264) ? _2041 : (isnan(_2041) ? _2264 : min(_2041, _2264));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2007) + _1996;
        float _2529 = (_2524 * _2010) + _2000;
        float _2530 = (_2524 * _2013) + _2004;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1949);
            frontier_phi_18_40_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _2029 = frontier_phi_18_40_ladder_2;
        _2031 = frontier_phi_18_40_ladder_1;
        _2033 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1949);
        _2029 = _2017.x * cbModelParam._m0[1u].y;
        _2031 = _2017.y * cbModelParam._m0[1u].y;
        _2033 = _2017.z * cbModelParam._m0[1u].y;
    }
    float _2037 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2038 = isnan(_2037) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2037 : min(cbModelParam._m0[25u].w, _2037));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2091 = fma(_1177, cbModelParam._m0[21u].z, fma(_1173, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169)) + cbModelParam._m0[21u].w;
        float _2095 = fma(_1177, cbModelParam._m0[22u].z, fma(_1173, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169)) + cbModelParam._m0[22u].w;
        float _2099 = fma(_1177, cbModelParam._m0[23u].z, fma(_1173, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169)) + cbModelParam._m0[23u].w;
        float _2102 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2105 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2108 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2269;
        if (_2102 > 0.0)
        {
            _2269 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2269 = frontier_phi_30_26_ladder;
        }
        float _2548;
        if (_2105 > 0.0)
        {
            _2548 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2548 = frontier_phi_42_37_ladder;
        }
        float _2761;
        if (_2108 > 0.0)
        {
            _2761 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2761 = frontier_phi_51_48_ladder;
        }
        float _2763 = isnan(_2548) ? _2269 : (isnan(_2269) ? _2548 : min(_2269, _2548));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _2102) + _2091;
        float _2769 = (_2764 * _2105) + _2095;
        float _2770 = (_2764 * _2108) + _2099;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _2038);
            frontier_phi_27_51_ladder = _2969.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2969.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2969.x * cbModelParam._m0[1u].z;
        }
        _2127 = frontier_phi_27_51_ladder_2;
        _2129 = frontier_phi_27_51_ladder_1;
        _2131 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2038);
        _2127 = _2111.x * cbModelParam._m0[1u].z;
        _2129 = _2111.y * cbModelParam._m0[1u].z;
        _2131 = _2111.z * cbModelParam._m0[1u].z;
    }
    float _2144 = (((_1140 * _1092) + _1141) * _1107) * ((cbModelParam._m0[1u].w * (_2127 - _2029)) + _2029);
    float _2146 = (((_1140 * _1094) + _1141) * _1107) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2148 = (((_1140 * _1095) + _1141) * _1107) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2151 = fma(_2148, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2144 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2148, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2144 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2148, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2144 * cbSceneParam._m0[91u].x));
    vec4 _2165 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1029, _1030));
    float _2167 = _2165.w;
    float _2179 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2167);
    float _2180 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2167);
    float _2181 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2167);
    uvec4 _2185 = floatBitsToUint(cbInstanceData._m0[_1067 + 5u]);
    uint _2187 = _2185.x * 14u;
    uint _2188 = _2187 + 13u;
    float _2195 = _1107 + (-1.0);
    float _2200 = (cbLight._m0[_2188].x * _2195) + 1.0;
    float _2201 = (cbLight._m0[_2188].y * _2195) + 1.0;
    float _2202 = (cbLight._m0[_2188].z * _2195) + 1.0;
    float _2203 = (cbLight._m0[_2188].w * _2195) + 1.0;
    uint _2204 = _2187 + 5u;
    float _2210 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2214 = _2187 + 4u;
    float _2223 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2227 = _2187 | 1u;
    float _2238 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_928, _929, _930));
    float _2241 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_928, _929, _930));
    float _4489 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _4500 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2246 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2248 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2255 = ((cbLight._m0[_2204].x * _2210) * _2248) + (((cbLight._m0[_2214].x * _2179) * _2223) * _2246);
    float _2256 = ((_2210 * cbLight._m0[_2204].y) * _2248) + (((cbLight._m0[_2214].y * _2180) * _2223) * _2246);
    float _2257 = ((_2210 * cbLight._m0[_2204].z) * _2248) + (((cbLight._m0[_2214].z * _2181) * _2223) * _2246);
    uvec4 _2261 = floatBitsToUint(cbLight._m0[_2187 + 12u]);
    bool _2263 = _2261.x == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2263)
    {
        _2274 = _2255;
        _2276 = _2256;
        _2278 = _2257;
    }
    else
    {
        uint _2282 = _2187 + 6u;
        float _2298 = (dot(vec3(cbLight._m0[_2187 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4511 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2301 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2274 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2255;
        _2276 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2256;
        _2278 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2257;
    }
    bool _2281 = _2261.y == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2281)
    {
        _2319 = _2274;
        _2321 = _2276;
        _2323 = _2278;
    }
    else
    {
        uint _2492 = _2187 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2187 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4527 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2511 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2319 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2274;
        _2321 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2276;
        _2323 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2278;
    }
    uint _2326 = _2187 + 8u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _931) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2187].x + _1012;
    float _2342 = cbLight._m0[_2187].y + _1013;
    float _2343 = cbLight._m0[_2187].z + _1014;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2187].xyz));
    float _4543 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _4554 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2355 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2356 = dot(vec3(_928, _929, _930), vec3(_2348, _2349, _2350));
    float _4565 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2348, _2349, _2350));
    float _4576 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2340 * _2340;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
    float _2377 = 0.959999978542327880859375 - _1089;
    float _2379 = 0.959999978542327880859375 - _1090;
    float _2380 = 0.959999978542327880859375 - _1091;
    float _2387 = 1.0 - _2340;
    float _2398 = (0.5 / (((_2355 * ((_2354 * _2387) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2387) + _2340) * _2354))) * _2354;
    float _4587 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    uint _2414 = _2187 + 9u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _931) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2227].x + _1012;
    float _2428 = cbLight._m0[_2227].y + _1013;
    float _2429 = cbLight._m0[_2227].z + _1014;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2227].xyz));
    float _4598 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2441 = dot(vec3(_928, _929, _930), vec3(_2434, _2435, _2436));
    float _4609 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2434, _2435, _2436));
    float _4620 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2426 * _2426;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2467 = 1.0 - _2426;
    float _2477 = (0.5 / (((_2355 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2467) + _2426) * _2440))) * _2440;
    float _4631 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    float _2489 = (((((_2460 * _2377) + _1092) * cbLight._m0[_2414].x) * _2479) * _2210) + ((((cbLight._m0[_2326].x * _2179) * ((_2376 * _2377) + _1092)) * _2400) * _2223);
    float _2490 = (((((_2460 * _2379) + _1094) * cbLight._m0[_2414].y) * _2479) * _2210) + ((((cbLight._m0[_2326].y * _2180) * ((_2376 * _2379) + _1094)) * _2400) * _2223);
    float _2491 = (((((_2460 * _2380) + _1095) * cbLight._m0[_2414].z) * _2479) * _2210) + ((((cbLight._m0[_2326].z * _2181) * ((_2376 * _2380) + _1095)) * _2400) * _2223);
    float _2553;
    float _2555;
    float _2557;
    if (_2263)
    {
        _2553 = _2489;
        _2555 = _2490;
        _2557 = _2491;
    }
    else
    {
        uint _2559 = _2187 + 2u;
        uint _2563 = _2187 + 10u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _931) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _1012;
        float _2580 = cbLight._m0[_2559].y + _1013;
        float _2581 = cbLight._m0[_2559].z + _1014;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2559].xyz));
        float _4642 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2593 = dot(vec3(_928, _929, _930), vec3(_2586, _2587, _2588));
        float _4653 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4664 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2355 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2619) + _2578) * _2592))) * _2592;
        float _4675 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2553 = (((((_2612 * _2377) + _1092) * cbLight._m0[_2563].x) * _2631) * _2632) + _2489;
        _2555 = (((((_2612 * _2379) + _1094) * cbLight._m0[_2563].y) * _2631) * _2632) + _2490;
        _2557 = (((((_2612 * _2380) + _1095) * cbLight._m0[_2563].z) * _2631) * _2632) + _2491;
    }
    float _2667;
    float _2669;
    float _2671;
    if (_2281)
    {
        _2667 = _2553;
        _2669 = _2555;
        _2671 = _2557;
    }
    else
    {
        uint _2678 = _2187 + 3u;
        uint _2682 = _2187 + 11u;
        float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _931) * 0.949999988079071044921875);
        float _2697 = _2696 * _2696;
        float _2698 = cbLight._m0[_2678].x + _1012;
        float _2699 = cbLight._m0[_2678].y + _1013;
        float _2700 = cbLight._m0[_2678].z + _1014;
        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
        float _2705 = _2704 * _2698;
        float _2706 = _2704 * _2699;
        float _2707 = _2704 * _2700;
        float _2708 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2678].xyz));
        float _4691 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2712 = dot(vec3(_928, _929, _930), vec3(_2705, _2706, _2707));
        float _4702 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2716 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2705, _2706, _2707));
        float _4713 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2720 = _2697 * _2697;
        float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
        float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2738 = 1.0 - _2697;
        float _2748 = (0.5 / (((_2355 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2738) + _2697) * _2711))) * _2711;
        float _4724 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2667 = (((((_2731 * _2377) + _1092) * cbLight._m0[_2682].x) * _2750) * _2751) + _2553;
        _2669 = (((((_2731 * _2379) + _1094) * cbLight._m0[_2682].y) * _2750) * _2751) + _2555;
        _2671 = (((((_2731 * _2380) + _1095) * cbLight._m0[_2682].z) * _2750) * _2751) + _2557;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2185.y == 0u)
    {
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2826;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2826;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2826;
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _2842)));
        float _2863 = (log2(_2829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
        }
        else
        {
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3143)
                {
                    frontier_phi_68_pred = _3127;
                    frontier_phi_68_pred_1 = _3132;
                    frontier_phi_68_pred_2 = _3131;
                    frontier_phi_68_pred_3 = _3130;
                    frontier_phi_68_pred_4 = _3129;
                    frontier_phi_68_pred_5 = _3128;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2827;
                        float _3339 = _3298.y - _2828;
                        float _3340 = _3298.z - _2829;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1048, _1051, _1054), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4750 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2827;
                        float _3374 = (-0.0) - _2828;
                        float _3375 = (-0.0) - _2829;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1123;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1048, _1051, _1054), vec3(_3380, _3381, _3382));
                        float _4766 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3415 = dot(vec3(_1048, _1051, _1054), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4777 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4788 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4799 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3450 * _3334.x) + _3272;
                        _3200 = (_3450 * _3334.y) + _3273;
                        _3201 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_68_pred = _3199;
                    frontier_phi_68_pred_1 = _3204;
                    frontier_phi_68_pred_2 = _3203;
                    frontier_phi_68_pred_3 = _3202;
                    frontier_phi_68_pred_4 = _3201;
                    frontier_phi_68_pred_5 = _3200;
                }
                _2975 = frontier_phi_68_pred;
                _2985 = frontier_phi_68_pred_1;
                _2983 = frontier_phi_68_pred_2;
                _2981 = frontier_phi_68_pred_3;
                _2979 = frontier_phi_68_pred_4;
                _2977 = frontier_phi_68_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2975;
                    _3128 = _2977;
                    _3129 = _2979;
                    _3130 = _2981;
                    _3131 = _2983;
                    _3132 = _2985;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
        }
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.z;
        uint _2991 = (_2989 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2991) & _2873) == 0u)
        {
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
            float _3121 = _3120 * _2827;
            float _3122 = _3120 * _2828;
            float _3123 = _3120 * _2829;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2991 < ((_2989 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2974;
                float _3256 = _2976;
                float _3257 = _2978;
                float _3258 = _2980;
                float _3259 = _2982;
                float _3260 = _2984;
                uint _3261 = _2991;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3271)
                    {
                        frontier_phi_79_pred = _3260;
                        frontier_phi_79_pred_1 = _3259;
                        frontier_phi_79_pred_2 = _3258;
                        frontier_phi_79_pred_3 = _3257;
                        frontier_phi_79_pred_4 = _3256;
                        frontier_phi_79_pred_5 = _3255;
                    }
                    else
                    {
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        uint _3483 = _3270;
                        uint _3484;
                        vec4 _3509;
                        float _3510;
                        vec4 _3525;
                        vec3 _3537;
                        vec4 _3552;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3494 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3483));
                            _3484 = (_3483 + 4294967295u) & _3483;
                            uint _3496 = _3494 * 40u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3510 = _3509.w;
                            uint _3512 = (_3494 * 40u) + 4u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3494 * 40u) + 8u;
                            _3537 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x));
                            uint _3539 = (_3494 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3494 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3494 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3494 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_2829, _3601.z, fma(_2828, _3601.y, _3601.x * _2827)) + _3601.w;
                            _3614 = !((fma(_2829, _3582.z, fma(_2828, _3582.y, _3582.x * _2827)) + _3582.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3509.x - _2827;
                                float _3642 = _3509.y - _2828;
                                float _3643 = _3509.z - _2829;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3510 * _3510));
                                float _4810 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3659 = sqrt(_3644) * _3525.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_1048, _1051, _1054))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_2829, _3552.z, fma(_2828, _3552.y, _3552.x * _2827)) + _3552.w) / _3613;
                                float _3673 = (fma(_2829, _3567.z, fma(_2828, _3567.y, _3567.x * _2827)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4826 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _1123;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3121;
                                float _3703 = _3649 - _3122;
                                float _3704 = _3650 - _3123;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4837 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3716 = dot(vec3(_1048, _1051, _1054), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4848 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_1048, _1051, _1054), vec3(_3648, _3649, _3650))) + _3725;
                                float _4859 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4870 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3679 * _3525.y;
                                frontier_phi_85_pred_1 = _3679 * _3525.x;
                                frontier_phi_85_pred_2 = _3753 * _3537.z;
                                frontier_phi_85_pred_3 = _3753 * _3537.y;
                                frontier_phi_85_pred_4 = _3753 * _3537.x;
                                frontier_phi_85_pred_5 = _3679 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_85_pred;
                            _3760 = frontier_phi_85_pred_1;
                            _3759 = frontier_phi_85_pred_2;
                            _3758 = frontier_phi_85_pred_3;
                            _3757 = frontier_phi_85_pred_4;
                            _3762 = frontier_phi_85_pred_5;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            if (_3484 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3484;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3469;
                        frontier_phi_79_pred_1 = _3468;
                        frontier_phi_79_pred_2 = _3467;
                        frontier_phi_79_pred_3 = _3466;
                        frontier_phi_79_pred_4 = _3465;
                        frontier_phi_79_pred_5 = _3464;
                    }
                    _3106 = frontier_phi_79_pred;
                    _3104 = frontier_phi_79_pred_1;
                    _3102 = frontier_phi_79_pred_2;
                    _3100 = frontier_phi_79_pred_3;
                    _3098 = frontier_phi_79_pred_4;
                    _3096 = frontier_phi_79_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3100;
                frontier_phi_60_61_ladder_1 = _3106;
                frontier_phi_60_61_ladder_2 = _3104;
                frontier_phi_60_61_ladder_3 = _3102;
                frontier_phi_60_61_ladder_4 = _3098;
                frontier_phi_60_61_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_60_61_ladder = _2978;
                frontier_phi_60_61_ladder_1 = _2984;
                frontier_phi_60_61_ladder_2 = _2982;
                frontier_phi_60_61_ladder_3 = _2980;
                frontier_phi_60_61_ladder_4 = _2976;
                frontier_phi_60_61_ladder_5 = _2974;
            }
            _3095 = frontier_phi_60_61_ladder_5;
            _3097 = frontier_phi_60_61_ladder_4;
            _3099 = frontier_phi_60_61_ladder;
            _3101 = frontier_phi_60_61_ladder_3;
            _3103 = frontier_phi_60_61_ladder_2;
            _3105 = frontier_phi_60_61_ladder_1;
        }
        float _3110 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _2886 = (_3110 * _3101) + _2319;
        _2888 = (_3110 * _3103) + _2321;
        _2890 = (_3110 * _3105) + _2323;
        _2892 = ((_3095 * _1092) * _3110) + _2667;
        _2894 = ((_3097 * _1094) * _3110) + _2669;
        _2896 = ((_3099 * _1095) * _3110) + _2671;
    }
    else
    {
        _2886 = _2319;
        _2888 = _2321;
        _2890 = _2323;
        _2892 = _2667;
        _2894 = _2669;
        _2896 = _2671;
    }
    float _4886 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4897 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4908 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2913 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2886 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1107))) + ((_2892 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _2914 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2888 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1107))) + ((_2894 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _2915 = ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2890 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1107))) + ((_2896 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    uint _2916 = _1067 + 6u;
    float _2924 = _1029 / cbSceneParam._m0[86u].x;
    float _2925 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _955 : (isnan(_955) ? cbSceneParam._m0[77u].w : min(_955, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_955 > cbSceneParam._m0[78u].w)
    {
        float _2999 = isnan(_955) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _955 : min(cbSceneParam._m0[80u].w, _955));
        float _3000 = _2999 / _955;
        float _3011 = _3000 * _1005;
        float _3012 = _1006 * _3000;
        float _3013 = (-0.0) - _3012;
        float _3015 = _3000 * _1007;
        float _3017 = (cbSceneParam._m0[77u].w * _3013) / _2999;
        float _3018 = _3017 + cbSceneParam._m0[79u].w;
        float _3019 = cbSceneParam._m0[79u].w - _3012;
        float _3025 = sqrt(((_3011 * _3011) + (_3012 * _3012)) + (_3015 * _3015));
        float _3028 = (1.0 - (cbSceneParam._m0[77u].w / _2999)) * _3025;
        float _3033 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3035 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3013 - _3017) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3018 > 0.0) ? exp2(_3033 * _3018) : (2.0 - exp2(_3035 * _3018))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3028;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : max(_3018, _3019));
            float _3158 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : min(_3018, _3019));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3025 / _3013) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3033 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3033 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3035 * _3167) - exp2(_3035 * _3168)) * _3156))) + (_3028 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2944);
        _3037 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3039 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3041 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3043 = _3223 * _2944;
    }
    else
    {
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
        _3043 = _2944;
    }
    bool _3250;
    vec4 _3053;
    vec4 _3075;
    float _3077;
    float _3081;
    float _3082;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3053 = cbMatDynParam._m0[0u];
        float _3055 = roundEven(_3053.y);
        bool _3056 = _3055 == 3.0;
        float _3057 = log2(_3043);
        float _3064 = exp2(_3057 * cbSceneParam._m0[78u].x) * _2913;
        float _3065 = exp2(_3057 * cbSceneParam._m0[78u].y) * _2914;
        float _3066 = exp2(_3057 * cbSceneParam._m0[78u].z) * _2915;
        float _3073 = _1018 + (-0.5);
        _3075 = cbMtdParam._m0[1u];
        _3077 = _3075.y * _3073;
        float _3080 = (_3055 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3081 = _3080 * (_3056 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3037)));
        _3082 = _3080 * (_3056 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3039)));
        _3083 = _3080 * (_3056 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3041)));
        _3084 = _3073 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_1067 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _1068 + uint(_3053.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3077 + 1.0) < _3075.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3455;
    if (_3250)
    {
        discard_state = true;
        _3455 = 0.0;
    }
    else
    {
        _3455 = cbInstanceData._m0[_2916].w;
    }
    SV_Target.x = _3081;
    SV_Target.y = _3082;
    SV_Target.z = _3083;
    SV_Target.w = _3455;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
    discard_exit();
}


