#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1489;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _315 = _311.z;
    float _326 = exp2(log2((1.0 - _315) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _342 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _354 = exp2(log2(_342.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _355 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0));
    float _365 = exp2(log2(cbMtdParam._m0[23u].y * _315) * cbMtdParam._m0[22u].y);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
    float _388 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _390 = isnan(4.0) ? _389 : (isnan(_389) ? 4.0 : min(_389, 4.0));
    float _403 = floor(_390);
    vec4 _406 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _403));
    vec4 _430 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _441 = cbMtdParam._m0[9u].x * _430.x;
    float _442 = cbMtdParam._m0[9u].y * _430.y;
    float _443 = cbMtdParam._m0[9u].z * _430.z;
    float _450 = (((cbMtdParam._m0[10u].x * _406.x) - _441) * _367) + _441;
    float _451 = (((cbMtdParam._m0[10u].y * _406.y) - _442) * _367) + _442;
    float _452 = (((cbMtdParam._m0[10u].z * _406.z) - _443) * _367) + _443;
    float _458 = exp2(log2(_311.w) * cbMtdParam._m0[23u].w);
    vec4 _471 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _490 = (((cbMtdParam._m0[16u].x * _471.x) - _450) * _458) + _450;
    float _491 = (((cbMtdParam._m0[16u].y * _471.y) - _451) * _458) + _451;
    float _492 = (((cbMtdParam._m0[16u].z * _471.z) - _452) * _458) + _452;
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _525 = (((cbMtdParam._m0[19u].x * _505.x) - _490) * _356) + _490;
    float _526 = (((cbMtdParam._m0[19u].y * _505.y) - _491) * _356) + _491;
    float _527 = (((cbMtdParam._m0[19u].z * _505.z) - _492) * _356) + _492;
    vec4 _540 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _565 = (_342.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _540.x) - _525) * _328) + _525);
    float _567 = (_342.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _540.y) - _526) * _328) + _526);
    float _569 = (_342.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _540.z) - _527) * _328) + _527);
    vec4 _582 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _600 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _602 = _600 * (cbMtdParam._m0[24u].z + 1.0);
    float _4136 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _610 = (_603 * ((cbMtdParam._m0[11u].x * _582.x) - _565)) + _565;
    float _611 = (((cbMtdParam._m0[11u].y * _582.y) - _567) * _603) + _567;
    float _612 = (((cbMtdParam._m0[11u].z * _582.z) - _569) * _603) + _569;
    float _616 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _624 = (_616 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _616))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4147 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _632 = ((cbMtdParam._m0[21u].x - _610) * _625) + _610;
    float _633 = ((cbMtdParam._m0[21u].y - _611) * _625) + _611;
    float _634 = ((cbMtdParam._m0[21u].z - _612) * _625) + _612;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].x;
    _204[0u] = cbMtdParam._m0[29u].y;
    _203[1u] = cbMtdParam._m0[31u].x;
    _204[1u] = cbMtdParam._m0[31u].y;
    _203[2u] = cbMtdParam._m0[30u].z;
    _204[2u] = cbMtdParam._m0[30u].w;
    _203[3u] = cbMtdParam._m0[30u].x;
    _204[3u] = cbMtdParam._m0[30u].y;
    _203[4u] = cbMtdParam._m0[29u].z;
    _204[4u] = cbMtdParam._m0[29u].w;
    float _675 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    uint _677 = uint(int(isnan(4.0) ? _675 : (isnan(_675) ? 4.0 : min(_675, 4.0))));
    float _684 = ((_204[_677] - cbMtdParam._m0[22u].z) * _367) + cbMtdParam._m0[22u].z;
    float _687 = ((cbMtdParam._m0[22u].w - _684) * _458) + _684;
    float _690 = ((cbMtdParam._m0[25u].y - _687) * _356) + _687;
    float _693 = ((cbMtdParam._m0[26u].y - _690) * _328) + _690;
    float _698 = (cbMtdParam._m0[24u].y + 1.0) * _600;
    float _4168 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _701 = _693 - (_693 * _699);
    float _703 = _701 - (_701 * _616);
    vec4 _716 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _403));
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _742 = cbMtdParam._m0[22u].x + _734.z;
    float _745 = (((_716.z + _203[_677]) - _742) * _367) + _742;
    vec4 _758 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _769 = (((_758.z - _745) + cbMtdParam._m0[28u].z) * _458) + _745;
    float _775 = ((((_315 * 2.0) * _769) - _769) * cbMtdParam._m0[24u].w) + _769;
    vec4 _788 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _799 = (((cbMtdParam._m0[23u].z + _788.z) - _775) * _356) + _775;
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _823 = (((_812.z - _799) + cbMtdParam._m0[26u].z) * _328) + _799;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _847 = ((_835.z - _823) * _699) + _823;
    vec4 _862 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _876 = ((cbMtdParam._m0[27u].z * _616) * ((_862.z * cbMtdParam._m0[27u].y) - _847)) + _847;
    float _891 = ((_716.x - _736) * _367) + _736;
    float _892 = ((_716.y - _737) * _367) + _737;
    float _897 = ((_758.x - _891) * _458) + _891;
    float _898 = ((_758.y - _892) * _458) + _892;
    float _903 = ((_788.x - _897) * _356) + _897;
    float _904 = ((_788.y - _898) * _356) + _898;
    float _913 = ((((_812.x - _903) * _328) + _903) * 2.0) + (-1.0);
    float _914 = ((((_812.y - _904) * _328) + _904) * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4179 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _920 = sqrt(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))));
    float _936 = (((cbMtdParam._m0[25u].z * ((_311.x * 2.0) + (-1.0))) + _913) + (((((_835.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _699)) + ((((_862.x * 2.0) + (-1.0)) * _616) * cbMtdParam._m0[27u].x);
    float _937 = (((cbMtdParam._m0[25u].z * ((_311.y * 2.0) + (-1.0))) + _914) + (((((_835.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _699)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_862.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _940 = fma(_920, _239 * NORMAL.x, fma(_937, _246 * TANGENT.x, (_232 * _224) * _936));
    float _943 = fma(_920, _239 * NORMAL.y, fma(_937, _246 * TANGENT.y, (_232 * _225) * _936));
    float _946 = fma(_920, _239 * NORMAL.z, fma(_937, _246 * TANGENT.z, (_232 * _226) * _936));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _4190 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _954 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4212 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4223 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4234 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _958 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _974 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1024 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1014);
    float _1025 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1014);
    float _1026 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1014);
    float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
    float _1031 = _1024 * _1030;
    float _1032 = _1025 * _1030;
    float _1033 = _1026 * _1030;
    float _1039 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1040 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1058 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1061 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1064 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1077 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1079 = (_1077 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _4245 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _1091 = 1.0 - _958;
    float _1092 = _1088 * _1091;
    float _1093 = _1089 * _1091;
    float _1094 = _1090 * _1091;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _958;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _958;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _958;
    float _1102 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    float _1105 = _1101 + 0.039999999105930328369140625;
    vec4 _1114 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1039, cbSceneParam._m0[86u].y * _1040));
    float _1117 = _1114.x * TEXCOORD_3.w;
    float _1118 = dot(vec3(_951, _952, _953), vec3(_1031, _1032, _1033));
    float _1121 = _1118 * 2.0;
    float _1125 = (_1121 * _951) - _1031;
    float _1126 = (_1121 * _952) - _1032;
    float _1127 = (_1121 * _953) - _1033;
    float _1131 = abs(dot(vec3(_1031, _1032, _1033), vec3(_951, _952, _953)));
    float _4278 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1133 = sqrt(_954);
    float _1144 = exp2((_1133 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1133 * 3.0));
    float _1150 = (1.0 - _1144) * ((_1133 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1151 = _1144 * _1133;
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1488;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1213 = fma(_1187, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179));
        float _1217 = fma(_1187, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179));
        float _1221 = fma(_1187, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179));
        float _1246 = _1179 + _951;
        float _1247 = _1183 + _952;
        float _1248 = _1187 + _953;
        float _1258 = fma(_1248, cbModelParam._m0[26u].z, fma(_1247, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1246)) - _1213;
        float _1259 = fma(_1248, cbModelParam._m0[27u].z, fma(_1247, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1246)) - _1217;
        float _1260 = fma(_1248, cbModelParam._m0[28u].z, fma(_1247, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1246)) - _1221;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1213 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1217 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[34u].z) + ((((((_1221 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1316 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1282.x + (-0.5));
        float _1318 = _1316 * (_1282.y + (-0.5));
        float _1319 = _1316 * (_1282.z + (-0.5));
        float _1326 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1289.x + (-0.5));
        float _1328 = _1326 * (_1289.y + (-0.5));
        float _1329 = _1326 * (_1289.z + (-0.5));
        float _1336 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1296.x + (-0.5));
        float _1338 = _1336 * (_1296.y + (-0.5));
        float _1339 = _1336 * (_1296.z + (-0.5));
        float _1346 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1303.x + (-0.5));
        float _1348 = _1346 * (_1303.y + (-0.5));
        float _1349 = _1346 * (_1303.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1370 = (dot(vec3(_951, _952, _953), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1380 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4326 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1382 + 1.0))) + _1387) * _1350;
        float _1397 = _1318 * 0.5;
        float _1398 = _1328 * 0.5;
        float _1399 = _1338 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_951, _952, _953), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4359 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1424 + 1.0))) + _1429) * _1351;
        float _1439 = _1319 * 0.5;
        float _1440 = _1329 * 0.5;
        float _1441 = _1339 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_951, _952, _953), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4392 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1466 + 1.0))) + _1471) * _1352;
        _1488 = _1319;
        _1490 = _1318;
        _1491 = _1317;
        _1492 = _1329;
        _1493 = _1328;
        _1494 = _1327;
        _1495 = _1339;
        _1496 = _1338;
        _1497 = _1337;
        _1498 = _1352;
        _1499 = _1351;
        _1500 = _1350;
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1489;
        _1490 = _1489;
        _1491 = _1489;
        _1492 = _1489;
        _1493 = _1489;
        _1494 = _1489;
        _1495 = _1489;
        _1496 = _1489;
        _1497 = _1489;
        _1498 = _1489;
        _1499 = _1489;
        _1500 = _1489;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1187, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179));
        float _1530 = fma(_1187, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179));
        float _1534 = fma(_1187, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179));
        float _1557 = _1179 + _951;
        float _1558 = _1183 + _952;
        float _1559 = _1187 + _953;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_951, _952, _953), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4455 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_951, _952, _953), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4488 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_951, _952, _953), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4521 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1489;
        _1796 = _1489;
        _1797 = _1489;
        _1798 = _1489;
        _1799 = _1489;
        _1800 = _1489;
        _1801 = _1489;
        _1802 = _1489;
        _1803 = _1489;
        _1804 = _1489;
        _1805 = _1489;
        _1806 = _1489;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1502)) + _1502;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1503)) + _1503;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1125 * 0.5;
    float _1864 = _1126 * 0.5;
    float _1865 = _1127 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1488, _1492, _1495, _1498));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1187, cbModelParam._m0[13u].z, fma(_1183, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1187, cbModelParam._m0[14u].z, fma(_1183, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1187, cbModelParam._m0[15u].z, fma(_1183, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1127, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125));
        float _1993 = fma(_1127, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125));
        float _1996 = fma(_1127, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2024 = frontier_phi_14_12_ladder;
        }
        float _2196;
        if (_1993 > 0.0)
        {
            _2196 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2196 = frontier_phi_23_19_ladder;
        }
        float _2491;
        if (_1996 > 0.0)
        {
            _2491 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2491 = frontier_phi_35_30_ladder;
        }
        float _2493 = isnan(_2196) ? _2024 : (isnan(_2024) ? _2196 : min(_2024, _2196));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1990) + _1979;
        float _2499 = (_2494 * _1993) + _1983;
        float _2500 = (_2494 * _1996) + _1987;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_13_35_ladder = _2645.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2645.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2645.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_13_35_ladder_2;
        _2014 = frontier_phi_13_35_ladder_1;
        _2016 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1125, _1126, _1127), _1932);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1187, cbModelParam._m0[21u].z, fma(_1183, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1187, cbModelParam._m0[22u].z, fma(_1183, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1187, cbModelParam._m0[23u].z, fma(_1183, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1127, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125));
        float _2089 = fma(_1127, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125));
        float _2092 = fma(_1127, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125));
        float _2201;
        if (_2086 > 0.0)
        {
            _2201 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2201 = frontier_phi_25_21_ladder;
        }
        float _2518;
        if (_2089 > 0.0)
        {
            _2518 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2518 = frontier_phi_37_32_ladder;
        }
        float _2856;
        if (_2092 > 0.0)
        {
            _2856 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2856 = frontier_phi_47_44_ladder;
        }
        float _2858 = isnan(_2518) ? _2201 : (isnan(_2201) ? _2518 : min(_2201, _2518));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2086) + _2075;
        float _2864 = (_2859 * _2089) + _2079;
        float _2865 = (_2859 * _2092) + _2083;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_22_47_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_22_47_ladder_2;
        _2113 = frontier_phi_22_47_ladder_1;
        _2115 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1125, _1126, _1127), _2021);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1150 * _1102) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1150 * _1104) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1150 * _1105) + _1151) * _1117) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2188 = _2175 / _2187;
    float _2189 = _2179 / _2187;
    float _2190 = _2183 / _2187;
    float _2337;
    float _2338;
    float _2339;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2217 = ((uint(_2190 > cbSceneParam._m0[59u].y) + uint(_2190 > cbSceneParam._m0[59u].x)) + uint(_2190 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2218 = _2217 + 43u;
        uint _2226 = _2217 + 44u;
        uint _2234 = _2217 + 45u;
        uint _2242 = _2217 + 46u;
        float _2253 = fma(_2187, cbSceneParam._m0[_2218].w, fma(_2183, cbSceneParam._m0[_2218].z, fma(_2179, cbSceneParam._m0[_2218].y, _2175 * cbSceneParam._m0[_2218].x)));
        float _2257 = fma(_2187, cbSceneParam._m0[_2226].w, fma(_2183, cbSceneParam._m0[_2226].z, fma(_2179, cbSceneParam._m0[_2226].y, _2175 * cbSceneParam._m0[_2226].x)));
        float _2265 = fma(_2187, cbSceneParam._m0[_2242].w, fma(_2183, cbSceneParam._m0[_2242].z, fma(_2179, cbSceneParam._m0[_2242].y, _2175 * cbSceneParam._m0[_2242].x)));
        float _2270 = cbSceneParam._m0[33u].z * _2265;
        float _2272 = cbSceneParam._m0[33u].w * _2265;
        float _2275 = fma(_2187, cbSceneParam._m0[_2234].w, fma(_2183, cbSceneParam._m0[_2234].z, fma(_2179, cbSceneParam._m0[_2234].y, _2175 * cbSceneParam._m0[_2234].x))) / _2265;
        float _2323 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
        float _4647 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2330 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 + _2253) / _2265, (_2272 + _2257) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 + _2253) / _2265, (_2257 - _2270) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2270) / _2265, (_2257 - _2272) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2272) / _2265, (_2270 + _2257) / _2265), _2275), 0.0)).x), vec4(0.25)));
        _2337 = 1.0 - (_2330 * cbSceneParam._m0[34u].x);
        _2338 = 1.0 - (_2330 * cbSceneParam._m0[34u].y);
        _2339 = 1.0 - (_2330 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2337 = 1.0;
        _2338 = 1.0;
        _2339 = 1.0;
    }
    float _2403;
    float _2405;
    float _2407;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2391 = fma(_2187, cbSceneParam._m0[63u].w, fma(_2183, cbSceneParam._m0[63u].z, fma(_2179, cbSceneParam._m0[63u].y, _2175 * cbSceneParam._m0[63u].x)));
        float _2392 = fma(_2187, cbSceneParam._m0[60u].w, fma(_2183, cbSceneParam._m0[60u].z, fma(_2179, cbSceneParam._m0[60u].y, _2175 * cbSceneParam._m0[60u].x))) / _2391;
        float _2393 = fma(_2187, cbSceneParam._m0[61u].w, fma(_2183, cbSceneParam._m0[61u].z, fma(_2179, cbSceneParam._m0[61u].y, _2175 * cbSceneParam._m0[61u].x))) / _2391;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2392 >= cbSceneParam._m0[64u].x) && (_2393 >= cbSceneParam._m0[64u].y)) && (_2392 <= cbSceneParam._m0[64u].z)) && (_2393 <= cbSceneParam._m0[64u].w))
        {
            float _2531 = fma(_2187, cbSceneParam._m0[62u].w, fma(_2183, cbSceneParam._m0[62u].z, fma(_2179, cbSceneParam._m0[62u].y, _2175 * cbSceneParam._m0[62u].x))) / _2391;
            float _2535 = isnan(cbSceneParam._m0[41u].w) ? _2531 : (isnan(_2531) ? cbSceneParam._m0[41u].w : max(_2531, cbSceneParam._m0[41u].w));
            float _2578 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
            float _4663 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
            float _2585 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2392, cbSceneParam._m0[33u].w + _2393), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2392, _2393 - cbSceneParam._m0[33u].z), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].z, _2393 - cbSceneParam._m0[33u].w), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2393), _2535), 0.0)).x), vec4(0.25)));
            float _2589 = 1.0 - (_2585 * cbSceneParam._m0[34u].x);
            float _2590 = 1.0 - (_2585 * cbSceneParam._m0[34u].y);
            float _2591 = 1.0 - (_2585 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
            frontier_phi_34_33_ladder_1 = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
            frontier_phi_34_33_ladder_2 = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
        }
        else
        {
            frontier_phi_34_33_ladder = _2339;
            frontier_phi_34_33_ladder_1 = _2338;
            frontier_phi_34_33_ladder_2 = _2337;
        }
        _2403 = frontier_phi_34_33_ladder_2;
        _2405 = frontier_phi_34_33_ladder_1;
        _2407 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2403 = _2337;
        _2405 = _2338;
        _2407 = _2339;
    }
    uvec4 _2412 = floatBitsToUint(cbInstanceData._m0[_1077 + 5u]);
    uint _2414 = _2412.x * 14u;
    uint _2415 = _2414 + 13u;
    float _2422 = _1117 + (-1.0);
    float _2427 = (cbLight._m0[_2415].x * _2422) + 1.0;
    float _2428 = (cbLight._m0[_2415].y * _2422) + 1.0;
    float _2429 = (cbLight._m0[_2415].z * _2422) + 1.0;
    float _2430 = (cbLight._m0[_2415].w * _2422) + 1.0;
    uint _2431 = _2414 + 5u;
    float _2437 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2441 = _2414 + 4u;
    float _2450 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2454 = _2414 | 1u;
    float _2465 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_951, _952, _953));
    float _2468 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_951, _952, _953));
    float _4699 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _4710 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2473 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * 0.3183098733425140380859375;
    float _2475 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * 0.3183098733425140380859375;
    float _2482 = ((cbLight._m0[_2431].x * _2437) * _2475) + (((cbLight._m0[_2441].x * _2403) * _2450) * _2473);
    float _2483 = ((_2437 * cbLight._m0[_2431].y) * _2475) + (((cbLight._m0[_2441].y * _2405) * _2450) * _2473);
    float _2484 = ((_2437 * cbLight._m0[_2431].z) * _2475) + (((cbLight._m0[_2441].z * _2407) * _2450) * _2473);
    uvec4 _2488 = floatBitsToUint(cbLight._m0[_2414 + 12u]);
    bool _2490 = _2488.x == 0u;
    float _2592;
    float _2594;
    float _2596;
    if (_2490)
    {
        _2592 = _2482;
        _2594 = _2483;
        _2596 = _2484;
    }
    else
    {
        uint _2600 = _2414 + 6u;
        float _2616 = (dot(vec3(cbLight._m0[_2414 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4721 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2619 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2592 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2482;
        _2594 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2483;
        _2596 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2484;
    }
    bool _2599 = _2488.y == 0u;
    float _2654;
    float _2656;
    float _2658;
    if (_2599)
    {
        _2654 = _2592;
        _2656 = _2594;
        _2658 = _2596;
    }
    else
    {
        uint _2827 = _2414 + 7u;
        float _2843 = (dot(vec3(cbLight._m0[_2414 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2844 = _2843 * _2843;
        float _4737 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2845 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2846 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2654 = (((cbLight._m0[_2827].x * 0.3183098733425140380859375) * _2845) * _2846) + _2592;
        _2656 = (((cbLight._m0[_2827].y * 0.3183098733425140380859375) * _2845) * _2846) + _2594;
        _2658 = (((cbLight._m0[_2827].z * 0.3183098733425140380859375) * _2845) * _2846) + _2596;
    }
    uint _2661 = _2414 + 8u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _954) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2414].x + _1031;
    float _2677 = cbLight._m0[_2414].y + _1032;
    float _2678 = cbLight._m0[_2414].z + _1033;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2414].xyz));
    float _4753 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _4764 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _2690 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2691 = dot(vec3(_951, _952, _953), vec3(_2683, _2684, _2685));
    float _4775 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2683, _2684, _2685));
    float _4786 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2675 * _2675;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
    float _2712 = 0.959999978542327880859375 - _1099;
    float _2714 = 0.959999978542327880859375 - _1100;
    float _2715 = 0.959999978542327880859375 - _1101;
    float _2722 = 1.0 - _2675;
    float _2733 = (0.5 / (((_2690 * ((_2689 * _2722) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2722) + _2675) * _2689))) * _2689;
    float _4797 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2735 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    uint _2749 = _2414 + 9u;
    float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _954) * 0.949999988079071044921875);
    float _2761 = _2760 * _2760;
    float _2762 = cbLight._m0[_2454].x + _1031;
    float _2763 = cbLight._m0[_2454].y + _1032;
    float _2764 = cbLight._m0[_2454].z + _1033;
    float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
    float _2769 = _2768 * _2762;
    float _2770 = _2768 * _2763;
    float _2771 = _2768 * _2764;
    float _2772 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2454].xyz));
    float _4808 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2775 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2776 = dot(vec3(_951, _952, _953), vec3(_2769, _2770, _2771));
    float _4819 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2780 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2769, _2770, _2771));
    float _4830 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2784 = _2761 * _2761;
    float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
    float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
    float _2802 = 1.0 - _2761;
    float _2812 = (0.5 / (((_2690 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2802) + _2761) * _2775))) * _2775;
    float _4841 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2814 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
    float _2824 = (((((_2795 * _2712) + _1102) * cbLight._m0[_2749].x) * _2814) * _2437) + ((((cbLight._m0[_2661].x * _2403) * ((_2711 * _2712) + _1102)) * _2735) * _2450);
    float _2825 = (((((_2795 * _2714) + _1104) * cbLight._m0[_2749].y) * _2814) * _2437) + ((((cbLight._m0[_2661].y * _2405) * ((_2711 * _2714) + _1104)) * _2735) * _2450);
    float _2826 = (((((_2795 * _2715) + _1105) * cbLight._m0[_2749].z) * _2814) * _2437) + ((((cbLight._m0[_2661].z * _2407) * ((_2711 * _2715) + _1105)) * _2735) * _2450);
    float _2882;
    float _2884;
    float _2886;
    if (_2490)
    {
        _2882 = _2824;
        _2884 = _2825;
        _2886 = _2826;
    }
    else
    {
        uint _2888 = _2414 + 2u;
        uint _2892 = _2414 + 10u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _954) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _1031;
        float _2909 = cbLight._m0[_2888].y + _1032;
        float _2910 = cbLight._m0[_2888].z + _1033;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2888].xyz));
        float _4852 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2922 = dot(vec3(_951, _952, _953), vec3(_2915, _2916, _2917));
        float _4863 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4874 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2690 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2948) + _2907) * _2921))) * _2921;
        float _4885 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2882 = (((((_2941 * _2712) + _1102) * cbLight._m0[_2892].x) * _2960) * _2961) + _2824;
        _2884 = (((((_2941 * _2714) + _1104) * cbLight._m0[_2892].y) * _2960) * _2961) + _2825;
        _2886 = (((((_2941 * _2715) + _1105) * cbLight._m0[_2892].z) * _2960) * _2961) + _2826;
    }
    float _2992;
    float _2994;
    float _2996;
    if (_2599)
    {
        _2992 = _2882;
        _2994 = _2884;
        _2996 = _2886;
    }
    else
    {
        uint _3003 = _2414 + 3u;
        uint _3007 = _2414 + 11u;
        float _3021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3003].w)) * _954) * 0.949999988079071044921875);
        float _3022 = _3021 * _3021;
        float _3023 = cbLight._m0[_3003].x + _1031;
        float _3024 = cbLight._m0[_3003].y + _1032;
        float _3025 = cbLight._m0[_3003].z + _1033;
        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
        float _3030 = _3029 * _3023;
        float _3031 = _3029 * _3024;
        float _3032 = _3029 * _3025;
        float _3033 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_3003].xyz));
        float _4901 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _3037 = dot(vec3(_951, _952, _953), vec3(_3030, _3031, _3032));
        float _4912 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3040 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _3041 = dot(vec3(cbLight._m0[_3003].xyz), vec3(_3030, _3031, _3032));
        float _4923 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3045 = _3022 * _3022;
        float _3049 = ((_3040 * _3040) * (_3045 + (-1.0))) + 1.0;
        float _3056 = exp2(log2(1.0 - (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) * 5.0);
        float _3063 = 1.0 - _3022;
        float _3073 = (0.5 / (((_2690 * ((_3036 * _3063) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _3063) + _3022) * _3036))) * _3036;
        float _4934 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3075 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_3045 / ((_3049 * _3049) * 3.141590118408203125));
        float _3076 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2992 = (((((_3056 * _2712) + _1102) * cbLight._m0[_3007].x) * _3075) * _3076) + _2882;
        _2994 = (((((_3056 * _2714) + _1104) * cbLight._m0[_3007].y) * _3075) * _3076) + _2884;
        _2996 = (((((_3056 * _2715) + _1105) * cbLight._m0[_3007].z) * _3075) * _3076) + _2886;
    }
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_2412.y == 0u)
    {
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.x;
        uint _3109 = uint((float(_3097.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1040) / _3098))) + floor(float(uint(cbSceneParam._m0[85u].x * _1039) / _3098)));
        float _3119 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3120 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        uint _3123 = uint(isnan(14.0) ? _3120 : (isnan(_3120) ? 14.0 : min(_3120, 14.0)));
        uvec4 _3128 = texelFetch(g_lightClusterGridBuffer, int(((_3123 << 2u) + (_3109 << 6u)) >> 2u));
        uint _3129 = _3128.x;
        uint _3130 = _3097.z;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((((1u << ((_3130 >> 4u) & 15u)) + 4294967295u) & _3129) == 0u) || ((_3130 & 240u) == 0u))
        {
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
        }
        else
        {
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            uint _3360 = 0u;
            uint _3369;
            bool _3370;
            for (;;)
            {
                _3369 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                _3370 = _3369 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3370)
                {
                    frontier_phi_66_pred = _3359;
                    frontier_phi_66_pred_1 = _3358;
                    frontier_phi_66_pred_2 = _3357;
                    frontier_phi_66_pred_3 = _3356;
                    frontier_phi_66_pred_4 = _3355;
                    frontier_phi_66_pred_5 = _3354;
                }
                else
                {
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    uint _3484;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3369;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    for (;;)
                    {
                        uint _3488 = uint(findLSB(_3484)) + (_3360 << 5u);
                        uint _3485 = (_3484 + 4294967295u) & _3484;
                        uint _3490 = _3488 * 48u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3490)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 3u)).x));
                        uint _3510 = (_3488 * 48u) + 4u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 3u)).x));
                        uint _3529 = (_3488 * 48u) + 8u;
                        vec3 _3540 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x));
                        float _3544 = _3504.x - _2188;
                        float _3545 = _3504.y - _2189;
                        float _3546 = _3504.z - _2190;
                        float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                        float _3550 = inversesqrt(_3547);
                        float _3551 = _3550 * _3544;
                        float _3552 = _3550 * _3545;
                        float _3553 = _3550 * _3546;
                        float _3554 = dot(vec3(_1058, _1061, _1064), vec3(_3551, _3552, _3553));
                        float _3559 = 1.0 - (_3547 * _3504.w);
                        float _4960 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3561 = sqrt(_3547) * _3523.w;
                        float _3564 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3554) + _3565;
                        float _3571 = _3561 * _3561;
                        float _3575 = ((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3560) / ((_3571 * 0.699999988079071044921875) + 1.0);
                        float _3579 = (-0.0) - _2188;
                        float _3580 = (-0.0) - _2189;
                        float _3581 = (-0.0) - _2190;
                        float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                        float _3586 = _3585 * _3579;
                        float _3587 = _3585 * _3580;
                        float _3588 = _3585 * _3581;
                        float _3595 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                        float _3596 = 1.0 - _1133;
                        float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                        float _3604 = _3603 * _3603;
                        float _3605 = _3604 * _3604;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3608 = _3588 + _3553;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3616 = dot(vec3(_1058, _1061, _1064), vec3(_3586, _3587, _3588));
                        float _4976 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3619 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3620 = dot(vec3(_1058, _1061, _1064), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                        float _4987 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                        float _3628 = _3564 * _3604;
                        float _3629 = _3628 * _3628;
                        float _3632 = ((1.0 - _3629) * _3554) + _3629;
                        float _4998 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3634 = 1.0 - _3604;
                        float _3644 = (0.5 / (((_3633 * ((_3619 * _3634) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3604) * _3619))) * _3633;
                        float _5009 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3655 = (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3627 * _3627) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125))) * _3560;
                        _3413 = (_3575 * _3523.x) + _3481;
                        _3414 = (_3575 * _3523.y) + _3482;
                        _3415 = (_3575 * _3523.z) + _3483;
                        _3410 = (_3655 * _3540.x) + _3478;
                        _3411 = (_3655 * _3540.y) + _3479;
                        _3412 = (_3655 * _3540.z) + _3480;
                        if (_3485 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3485;
                        }
                    }
                    frontier_phi_66_pred = _3415;
                    frontier_phi_66_pred_1 = _3414;
                    frontier_phi_66_pred_2 = _3413;
                    frontier_phi_66_pred_3 = _3412;
                    frontier_phi_66_pred_4 = _3411;
                    frontier_phi_66_pred_5 = _3410;
                }
                _3220 = frontier_phi_66_pred;
                _3218 = frontier_phi_66_pred_1;
                _3216 = frontier_phi_66_pred_2;
                _3214 = frontier_phi_66_pred_3;
                _3212 = frontier_phi_66_pred_4;
                _3210 = frontier_phi_66_pred_5;
                uint _3361 = _3360 + 1u;
                if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3354 = _3210;
                    _3355 = _3212;
                    _3356 = _3214;
                    _3357 = _3216;
                    _3358 = _3218;
                    _3359 = _3220;
                    _3360 = _3361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
        }
        uvec4 _3223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3224 = _3223.z;
        uint _3226 = (_3224 >> 8u) & 15u;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        if (((4294967295u << _3226) & _3129) == 0u)
        {
            _3322 = _3209;
            _3324 = _3211;
            _3326 = _3213;
            _3328 = _3215;
            _3330 = _3217;
            _3332 = _3219;
        }
        else
        {
            float _3347 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _3348 = _3347 * _2188;
            float _3349 = _3347 * _2189;
            float _3350 = _3347 * _2190;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3226 < ((_3224 >> 12u) & 15u))
            {
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3461 = _3209;
                float _3462 = _3211;
                float _3463 = _3213;
                float _3464 = _3215;
                float _3465 = _3217;
                float _3466 = _3219;
                uint _3467 = _3226;
                uint _3476;
                bool _3477;
                for (;;)
                {
                    _3476 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3467 << 2u)) >> 2u)).x;
                    _3477 = _3476 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3477)
                    {
                        frontier_phi_72_pred = _3466;
                        frontier_phi_72_pred_1 = _3465;
                        frontier_phi_72_pred_2 = _3464;
                        frontier_phi_72_pred_3 = _3463;
                        frontier_phi_72_pred_4 = _3462;
                        frontier_phi_72_pred_5 = _3461;
                    }
                    else
                    {
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3673 = _3461;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        uint _3679 = _3476;
                        uint _3680;
                        vec4 _3705;
                        float _3706;
                        vec4 _3721;
                        vec3 _3733;
                        vec4 _3748;
                        vec4 _3763;
                        float _3809;
                        bool _3810;
                        for (;;)
                        {
                            uint _3690 = ((_3467 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3679));
                            _3680 = (_3679 + 4294967295u) & _3679;
                            uint _3692 = _3690 * 40u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3706 = _3705.w;
                            uint _3708 = (_3690 * 40u) + 4u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3690 * 40u) + 8u;
                            _3733 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x));
                            uint _3735 = (_3690 * 40u) + 16u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3750 = (_3690 * 40u) + 20u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3690 * 40u) + 24u;
                            vec4 _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3784 = (_3690 * 40u) + 28u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            _3809 = fma(_2190, _3797.z, fma(_2189, _3797.y, _3797.x * _2188)) + _3797.w;
                            _3810 = !((fma(_2190, _3778.z, fma(_2189, _3778.y, _3778.x * _2188)) + _3778.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3810)
                            {
                                float _3837 = _3705.x - _2188;
                                float _3838 = _3705.y - _2189;
                                float _3839 = _3705.z - _2190;
                                float _3840 = dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839));
                                float _3843 = inversesqrt(_3840);
                                float _3844 = _3843 * _3837;
                                float _3845 = _3843 * _3838;
                                float _3846 = _3843 * _3839;
                                float _3850 = 1.0 - (_3840 / (_3706 * _3706));
                                float _5020 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3855 = sqrt(_3840) * _3721.w;
                                float _3857 = 1.39999997615814208984375 / (_3855 + 1.39999997615814208984375);
                                float _3858 = _3857 * _3857;
                                float _3861 = ((1.0 - _3858) * dot(vec3(_3844, _3845, _3846), vec3(_1058, _1061, _1064))) + _3858;
                                float _3864 = _3855 * _3855;
                                float _3868 = (fma(_2190, _3748.z, fma(_2189, _3748.y, _3748.x * _2188)) + _3748.w) / _3809;
                                float _3869 = (fma(_2190, _3763.z, fma(_2189, _3763.y, _3763.x * _2188)) + _3763.w) / _3809;
                                float _3873 = 1.0 - dot(vec2(_3868, _3869), vec2(_3868, _3869));
                                float _5036 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3875 = _3874 * (((isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0))) * _3851) / ((_3864 * 0.699999988079071044921875) + 1.0));
                                float _3887 = exp2(log2(1.0 / ((_3864 * 3.5) + 5.0)) * 0.25);
                                float _3888 = 1.0 - _1133;
                                float _3895 = sqrt(1.0 - ((1.0 - (_3888 * _3888)) * (1.0 - (_3887 * _3887))));
                                float _3896 = _3895 * _3895;
                                float _3897 = _3896 * _3896;
                                float _3898 = _3844 - _3348;
                                float _3899 = _3845 - _3349;
                                float _3900 = _3846 - _3350;
                                float _3904 = inversesqrt(dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900)));
                                float _3908 = dot(vec3(_1058, _1061, _1064), vec3((-0.0) - _3348, (-0.0) - _3349, (-0.0) - _3350));
                                float _5047 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3912 = dot(vec3(_1058, _1061, _1064), vec3(_3904 * _3898, _3904 * _3899, _3904 * _3900));
                                float _5058 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3915 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3919 = ((_3915 * _3915) * (_3897 + (-1.0))) + 1.0;
                                float _3920 = _3857 * _3896;
                                float _3921 = _3920 * _3920;
                                float _3927 = ((1.0 - _3921) * dot(vec3(_1058, _1061, _1064), vec3(_3844, _3845, _3846))) + _3921;
                                float _5069 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3929 = 1.0 - _3896;
                                float _3939 = (0.5 / (((_3928 * ((_3911 * _3929) + _3896)) + 9.9999999392252902907785028219223e-09) + (((_3928 * _3929) + _3896) * _3911))) * _3928;
                                float _5080 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3949 = (_3874 * _3851) * (((_3897 * 3.1415927410125732421875) * (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) / ((_3919 * _3919) * ((_3864 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3875 * _3721.y;
                                frontier_phi_78_pred_1 = _3875 * _3721.x;
                                frontier_phi_78_pred_2 = _3949 * _3733.z;
                                frontier_phi_78_pred_3 = _3949 * _3733.y;
                                frontier_phi_78_pred_4 = _3949 * _3733.x;
                                frontier_phi_78_pred_5 = _3875 * _3721.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3957 = frontier_phi_78_pred;
                            _3956 = frontier_phi_78_pred_1;
                            _3955 = frontier_phi_78_pred_2;
                            _3954 = frontier_phi_78_pred_3;
                            _3953 = frontier_phi_78_pred_4;
                            _3958 = frontier_phi_78_pred_5;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            if (_3680 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3680;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3665;
                        frontier_phi_72_pred_1 = _3664;
                        frontier_phi_72_pred_2 = _3663;
                        frontier_phi_72_pred_3 = _3662;
                        frontier_phi_72_pred_4 = _3661;
                        frontier_phi_72_pred_5 = _3660;
                    }
                    _3333 = frontier_phi_72_pred;
                    _3331 = frontier_phi_72_pred_1;
                    _3329 = frontier_phi_72_pred_2;
                    _3327 = frontier_phi_72_pred_3;
                    _3325 = frontier_phi_72_pred_4;
                    _3323 = frontier_phi_72_pred_5;
                    uint _3468 = _3467 + 1u;
                    if (_3468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3461 = _3323;
                        _3462 = _3325;
                        _3463 = _3327;
                        _3464 = _3329;
                        _3465 = _3331;
                        _3466 = _3333;
                        _3467 = _3468;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3333;
                frontier_phi_60_61_ladder_1 = _3331;
                frontier_phi_60_61_ladder_2 = _3327;
                frontier_phi_60_61_ladder_3 = _3325;
                frontier_phi_60_61_ladder_4 = _3323;
                frontier_phi_60_61_ladder_5 = _3329;
            }
            else
            {
                frontier_phi_60_61_ladder = _3219;
                frontier_phi_60_61_ladder_1 = _3217;
                frontier_phi_60_61_ladder_2 = _3213;
                frontier_phi_60_61_ladder_3 = _3211;
                frontier_phi_60_61_ladder_4 = _3209;
                frontier_phi_60_61_ladder_5 = _3215;
            }
            _3322 = frontier_phi_60_61_ladder_4;
            _3324 = frontier_phi_60_61_ladder_3;
            _3326 = frontier_phi_60_61_ladder_2;
            _3328 = frontier_phi_60_61_ladder_5;
            _3330 = frontier_phi_60_61_ladder_1;
            _3332 = frontier_phi_60_61_ladder;
        }
        float _3337 = isnan(1.0) ? _1117 : (isnan(_1117) ? 1.0 : min(_1117, 1.0));
        _3142 = (_3337 * _3328) + _2654;
        _3144 = (_3337 * _3330) + _2656;
        _3146 = (_3337 * _3332) + _2658;
        _3148 = ((_3322 * _1102) * _3337) + _2992;
        _3150 = ((_3324 * _1104) * _3337) + _2994;
        _3152 = ((_3326 * _1105) * _3337) + _2996;
    }
    else
    {
        _3142 = _2654;
        _3144 = _2656;
        _3146 = _2658;
        _3148 = _2992;
        _3150 = _2994;
        _3152 = _2996;
    }
    float _5096 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _5107 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _5118 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    uint _3172 = _1077 + 6u;
    float _3180 = _1039 / cbSceneParam._m0[86u].x;
    float _3181 = _1040 / cbSceneParam._m0[86u].y;
    vec4 _3195 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, (log2((isnan(cbSceneParam._m0[77u].w) ? _974 : (isnan(_974) ? cbSceneParam._m0[77u].w : min(_974, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3197 = _3195.x;
    float _3198 = _3195.y;
    float _3199 = _3195.z;
    float _3200 = _3195.w;
    float _3272;
    float _3274;
    float _3276;
    float _3278;
    if (_974 > cbSceneParam._m0[78u].w)
    {
        float _3234 = isnan(_974) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _974 : min(cbSceneParam._m0[80u].w, _974));
        float _3235 = _3234 / _974;
        float _3246 = _3235 * _1024;
        float _3247 = _1025 * _3235;
        float _3248 = (-0.0) - _3247;
        float _3250 = _3235 * _1026;
        float _3252 = (cbSceneParam._m0[77u].w * _3248) / _3234;
        float _3253 = _3252 + cbSceneParam._m0[79u].w;
        float _3254 = cbSceneParam._m0[79u].w - _3247;
        float _3260 = sqrt(((_3246 * _3246) + (_3247 * _3247)) + (_3250 * _3250));
        float _3263 = (1.0 - (cbSceneParam._m0[77u].w / _3234)) * _3260;
        float _3268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3423;
        if (abs((_3248 - _3252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3423 = ((((_3253 > 0.0) ? exp2(_3268 * _3253) : (2.0 - exp2(_3270 * _3253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3263;
        }
        else
        {
            float _3383 = 1.0 / cbSceneParam._m0[80u].x;
            float _3384 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : max(_3253, _3254));
            float _3385 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : min(_3253, _3254));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            _3423 = ((abs(_3260 / _3248) * cbSceneParam._m0[80u].y) * ((((_3394 - _3395) * 2.0) - ((exp2(_3268 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0)))) - exp2(_3268 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))))) * _3383)) - ((exp2(_3270 * _3394) - exp2(_3270 * _3395)) * _3383))) + (_3263 * cbSceneParam._m0[80u].z);
        }
        vec4 _3425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, 1.0), 0.0);
        float _3434 = exp2((_3423 * (-1.44269502162933349609375)) * (1.0 - _3425.w));
        float _3435 = log2(_3434);
        float _3451 = log2(_3200);
        _3272 = (exp2(_3451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].x)) * _3425.x) / cbSceneParam._m0[78u].x)) + _3197;
        _3274 = (exp2(_3451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].y)) * _3425.y) / cbSceneParam._m0[78u].y)) + _3198;
        _3276 = (exp2(_3451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].z)) * _3425.z) / cbSceneParam._m0[78u].z)) + _3199;
        _3278 = _3434 * _3200;
    }
    else
    {
        _3272 = _3197;
        _3274 = _3198;
        _3276 = _3199;
        _3278 = _3200;
    }
    float _3290 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3291 = _3290 == 3.0;
    float _3292 = log2(_3278);
    float _3299 = exp2(_3292 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3142 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1117))) + ((_3148 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3300 = exp2(_3292 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3144 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1117))) + ((_3150 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3301 = exp2(_3292 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3146 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1117))) + ((_3152 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3310 = (_3290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3310 * (_3291 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3272)));
    SV_Target.y = _3310 * (_3291 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3274)));
    SV_Target.z = _3310 * (_3291 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3276)));
    SV_Target.w = cbInstanceData._m0[_3172].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3172].w;
}


