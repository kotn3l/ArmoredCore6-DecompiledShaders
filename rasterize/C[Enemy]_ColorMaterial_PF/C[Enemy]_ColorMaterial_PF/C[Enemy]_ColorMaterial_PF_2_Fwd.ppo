#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1485;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _307 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _311 = _307.z;
    float _322 = exp2(log2((1.0 - _311) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    vec4 _338 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _350 = exp2(log2(_338.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _351 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _352 = isnan(1.0) ? _351 : (isnan(_351) ? 1.0 : min(_351, 1.0));
    float _361 = exp2(log2(cbMtdParam._m0[23u].y * _311) * cbMtdParam._m0[22u].y);
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0));
    float _384 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _385 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _386 = isnan(4.0) ? _385 : (isnan(_385) ? 4.0 : min(_385, 4.0));
    float _399 = floor(_386);
    vec4 _402 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _399));
    vec4 _426 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _437 = cbMtdParam._m0[9u].x * _426.x;
    float _438 = cbMtdParam._m0[9u].y * _426.y;
    float _439 = cbMtdParam._m0[9u].z * _426.z;
    float _446 = (((cbMtdParam._m0[10u].x * _402.x) - _437) * _363) + _437;
    float _447 = (((cbMtdParam._m0[10u].y * _402.y) - _438) * _363) + _438;
    float _448 = (((cbMtdParam._m0[10u].z * _402.z) - _439) * _363) + _439;
    float _454 = exp2(log2(_307.w) * cbMtdParam._m0[23u].w);
    vec4 _467 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _486 = (((cbMtdParam._m0[16u].x * _467.x) - _446) * _454) + _446;
    float _487 = (((cbMtdParam._m0[16u].y * _467.y) - _447) * _454) + _447;
    float _488 = (((cbMtdParam._m0[16u].z * _467.z) - _448) * _454) + _448;
    vec4 _501 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _521 = (((cbMtdParam._m0[19u].x * _501.x) - _486) * _352) + _486;
    float _522 = (((cbMtdParam._m0[19u].y * _501.y) - _487) * _352) + _487;
    float _523 = (((cbMtdParam._m0[19u].z * _501.z) - _488) * _352) + _488;
    vec4 _536 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _561 = (_338.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _536.x) - _521) * _324) + _521);
    float _563 = (_338.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _536.y) - _522) * _324) + _522);
    float _565 = (_338.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _536.z) - _523) * _324) + _523);
    vec4 _578 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _596 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _598 = _596 * (cbMtdParam._m0[24u].z + 1.0);
    float _3849 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _606 = (_599 * ((cbMtdParam._m0[11u].x * _578.x) - _561)) + _561;
    float _607 = (((cbMtdParam._m0[11u].y * _578.y) - _563) * _599) + _563;
    float _608 = (((cbMtdParam._m0[11u].z * _578.z) - _565) * _599) + _565;
    float _612 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _620 = (_612 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _612))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3860 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _628 = ((cbMtdParam._m0[21u].x - _606) * _621) + _606;
    float _629 = ((cbMtdParam._m0[21u].y - _607) * _621) + _607;
    float _630 = ((cbMtdParam._m0[21u].z - _608) * _621) + _608;
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[29u].x;
    _200[0u] = cbMtdParam._m0[29u].y;
    _199[1u] = cbMtdParam._m0[31u].x;
    _200[1u] = cbMtdParam._m0[31u].y;
    _199[2u] = cbMtdParam._m0[30u].z;
    _200[2u] = cbMtdParam._m0[30u].w;
    _199[3u] = cbMtdParam._m0[30u].x;
    _200[3u] = cbMtdParam._m0[30u].y;
    _199[4u] = cbMtdParam._m0[29u].z;
    _200[4u] = cbMtdParam._m0[29u].w;
    float _671 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    uint _673 = uint(int(isnan(4.0) ? _671 : (isnan(_671) ? 4.0 : min(_671, 4.0))));
    float _680 = ((_200[_673] - cbMtdParam._m0[22u].z) * _363) + cbMtdParam._m0[22u].z;
    float _683 = ((cbMtdParam._m0[22u].w - _680) * _454) + _680;
    float _686 = ((cbMtdParam._m0[25u].y - _683) * _352) + _683;
    float _689 = ((cbMtdParam._m0[26u].y - _686) * _324) + _686;
    float _694 = (cbMtdParam._m0[24u].y + 1.0) * _596;
    float _3881 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _697 = _689 - (_689 * _695);
    float _699 = _697 - (_697 * _612);
    vec4 _712 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _399));
    vec4 _730 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _732 = _730.x;
    float _733 = _730.y;
    float _738 = cbMtdParam._m0[22u].x + _730.z;
    float _741 = (((_712.z + _199[_673]) - _738) * _363) + _738;
    vec4 _754 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _765 = (((_754.z - _741) + cbMtdParam._m0[28u].z) * _454) + _741;
    float _771 = ((((_311 * 2.0) * _765) - _765) * cbMtdParam._m0[24u].w) + _765;
    vec4 _784 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _795 = (((cbMtdParam._m0[23u].z + _784.z) - _771) * _352) + _771;
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _819 = (((_808.z - _795) + cbMtdParam._m0[26u].z) * _324) + _795;
    vec4 _831 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _843 = ((_831.z - _819) * _695) + _819;
    vec4 _858 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _872 = ((cbMtdParam._m0[27u].z * _612) * ((_858.z * cbMtdParam._m0[27u].y) - _843)) + _843;
    float _887 = ((_712.x - _732) * _363) + _732;
    float _888 = ((_712.y - _733) * _363) + _733;
    float _893 = ((_754.x - _887) * _454) + _887;
    float _894 = ((_754.y - _888) * _454) + _888;
    float _899 = ((_784.x - _893) * _352) + _893;
    float _900 = ((_784.y - _894) * _352) + _894;
    float _909 = ((((_808.x - _899) * _324) + _899) * 2.0) + (-1.0);
    float _910 = ((((_808.y - _900) * _324) + _900) * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3892 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _916 = sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))));
    float _932 = (((cbMtdParam._m0[25u].z * ((_307.x * 2.0) + (-1.0))) + _909) + (((((_831.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _695)) + ((((_858.x * 2.0) + (-1.0)) * _612) * cbMtdParam._m0[27u].x);
    float _933 = (((cbMtdParam._m0[25u].z * ((_307.y * 2.0) + (-1.0))) + _910) + (((((_831.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _695)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_858.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _936 = fma(_916, _235 * NORMAL.x, fma(_933, _242 * TANGENT.x, (_228 * _220) * _932));
    float _939 = fma(_916, _235 * NORMAL.y, fma(_933, _242 * TANGENT.y, (_228 * _221) * _932));
    float _942 = fma(_916, _235 * NORMAL.z, fma(_933, _242 * TANGENT.z, (_228 * _222) * _932));
    float _946 = inversesqrt(dot(vec3(_936, _939, _942), vec3(_936, _939, _942)));
    float _947 = _946 * _936;
    float _948 = _946 * _939;
    float _949 = _946 * _942;
    float _3903 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _950 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3925 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3936 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3947 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _954 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _970 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1020 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1010);
    float _1021 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1010);
    float _1022 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1010);
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1027 = _1020 * _1026;
    float _1028 = _1021 * _1026;
    float _1029 = _1022 * _1026;
    float _1035 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1036 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1054 = fma(_949, cbSceneParam._m0[5u].z, fma(_948, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _947));
    float _1057 = fma(_949, cbSceneParam._m0[6u].z, fma(_948, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _947));
    float _1060 = fma(_949, cbSceneParam._m0[7u].z, fma(_948, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _947));
    uint _1073 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1075 = (_1073 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1081 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_1075].x;
    float _1082 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_1075].y;
    float _1083 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1075].z;
    float _3958 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1087 = 1.0 - _954;
    float _1088 = _1084 * _1087;
    float _1089 = _1085 * _1087;
    float _1090 = _1086 * _1087;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _954;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _954;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _954;
    float _1098 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    float _1101 = _1097 + 0.039999999105930328369140625;
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1035, cbSceneParam._m0[86u].y * _1036));
    float _1113 = _1110.x * TEXCOORD_3.w;
    float _1114 = dot(vec3(_947, _948, _949), vec3(_1027, _1028, _1029));
    float _1117 = _1114 * 2.0;
    float _1121 = (_1117 * _947) - _1027;
    float _1122 = (_1117 * _948) - _1028;
    float _1123 = (_1117 * _949) - _1029;
    float _1127 = abs(dot(vec3(_1027, _1028, _1029), vec3(_947, _948, _949)));
    float _3991 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1129 = sqrt(_950);
    float _1140 = exp2((_1129 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1129 * 3.0));
    float _1146 = (1.0 - _1140) * ((_1129 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1147 = _1140 * _1129;
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1484;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1209 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1213 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1217 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1242 = _1175 + _947;
        float _1243 = _1179 + _948;
        float _1244 = _1183 + _949;
        float _1254 = fma(_1244, cbModelParam._m0[26u].z, fma(_1243, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242)) - _1209;
        float _1255 = fma(_1244, cbModelParam._m0[27u].z, fma(_1243, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242)) - _1213;
        float _1256 = fma(_1244, cbModelParam._m0[28u].z, fma(_1243, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242)) - _1217;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1209 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1213 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[34u].z) + ((((((_1217 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1312 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1278.x + (-0.5));
        float _1314 = _1312 * (_1278.y + (-0.5));
        float _1315 = _1312 * (_1278.z + (-0.5));
        float _1322 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1285.x + (-0.5));
        float _1324 = _1322 * (_1285.y + (-0.5));
        float _1325 = _1322 * (_1285.z + (-0.5));
        float _1332 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1292.x + (-0.5));
        float _1334 = _1332 * (_1292.y + (-0.5));
        float _1335 = _1332 * (_1292.z + (-0.5));
        float _1342 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1299.x + (-0.5));
        float _1344 = _1342 * (_1299.y + (-0.5));
        float _1345 = _1342 * (_1299.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1366 = (dot(vec3(_947, _948, _949), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1376 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4039 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1378 + 1.0))) + _1383) * _1346;
        float _1393 = _1314 * 0.5;
        float _1394 = _1324 * 0.5;
        float _1395 = _1334 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_947, _948, _949), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4072 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1420 + 1.0))) + _1425) * _1347;
        float _1435 = _1315 * 0.5;
        float _1436 = _1325 * 0.5;
        float _1437 = _1335 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_947, _948, _949), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4105 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1462 + 1.0))) + _1467) * _1348;
        _1484 = _1315;
        _1486 = _1314;
        _1487 = _1313;
        _1488 = _1325;
        _1489 = _1324;
        _1490 = _1323;
        _1491 = _1335;
        _1492 = _1334;
        _1493 = _1333;
        _1494 = _1348;
        _1495 = _1347;
        _1496 = _1346;
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1485;
        _1486 = _1485;
        _1487 = _1485;
        _1488 = _1485;
        _1489 = _1485;
        _1490 = _1485;
        _1491 = _1485;
        _1492 = _1485;
        _1493 = _1485;
        _1494 = _1485;
        _1495 = _1485;
        _1496 = _1485;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1526 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1530 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1553 = _1175 + _947;
        float _1554 = _1179 + _948;
        float _1555 = _1183 + _949;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_947, _948, _949), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4168 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_947, _948, _949), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4201 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_947, _948, _949), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4234 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1485;
        _1792 = _1485;
        _1793 = _1485;
        _1794 = _1485;
        _1795 = _1485;
        _1796 = _1485;
        _1797 = _1485;
        _1798 = _1485;
        _1799 = _1485;
        _1800 = _1485;
        _1801 = _1485;
        _1802 = _1485;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1498)) + _1498;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1121 * 0.5;
    float _1860 = _1122 * 0.5;
    float _1861 = _1123 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1484, _1488, _1491, _1494));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _950);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1123, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121));
        float _1989 = fma(_1123, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121));
        float _1992 = fma(_1123, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2020 = frontier_phi_14_12_ladder;
        }
        float _2223;
        if (_1989 > 0.0)
        {
            _2223 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2223 = frontier_phi_23_19_ladder;
        }
        float _2477;
        if (_1992 > 0.0)
        {
            _2477 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2477 = frontier_phi_35_30_ladder;
        }
        float _2479 = isnan(_2223) ? _2020 : (isnan(_2020) ? _2223 : min(_2020, _2223));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1986) + _1975;
        float _2485 = (_2480 * _1989) + _1979;
        float _2486 = (_2480 * _1992) + _1983;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_13_35_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_13_35_ladder_2;
        _2010 = frontier_phi_13_35_ladder_1;
        _2012 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1121, _1122, _1123), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _950);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2071 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2075 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2079 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2082 = fma(_1123, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121));
        float _2085 = fma(_1123, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121));
        float _2088 = fma(_1123, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121));
        float _2228;
        if (_2082 > 0.0)
        {
            _2228 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2228 = frontier_phi_25_21_ladder;
        }
        float _2504;
        if (_2085 > 0.0)
        {
            _2504 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2504 = frontier_phi_37_32_ladder;
        }
        float _2717;
        if (_2088 > 0.0)
        {
            _2717 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2717 = frontier_phi_46_43_ladder;
        }
        float _2719 = isnan(_2504) ? _2228 : (isnan(_2228) ? _2504 : min(_2228, _2504));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _2082) + _2071;
        float _2725 = (_2720 * _2085) + _2075;
        float _2726 = (_2720 * _2088) + _2079;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_22_46_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2107 = frontier_phi_22_46_ladder_2;
        _2109 = frontier_phi_22_46_ladder_1;
        _2111 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1121, _1122, _1123), _2017);
        _2107 = _2091.x * cbModelParam._m0[1u].z;
        _2109 = _2091.y * cbModelParam._m0[1u].z;
        _2111 = _2091.z * cbModelParam._m0[1u].z;
    }
    float _2124 = (((_1146 * _1098) + _1147) * _1113) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1146 * _1100) + _1147) * _1113) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2128 = (((_1146 * _1101) + _1147) * _1113) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2131 = fma(_2128, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2124 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2128, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2124 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2128, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2124 * cbSceneParam._m0[91u].x));
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_1073 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _1113 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2182 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2186 = _2149 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_947, _948, _949));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_947, _948, _949));
    float _4370 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4381 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2166].x * _2172) * _2207) + ((cbLight._m0[_2176].x * _2182) * _2205);
    float _2215 = ((_2172 * cbLight._m0[_2166].y) * _2207) + ((_2182 * cbLight._m0[_2176].y) * _2205);
    float _2216 = ((_2172 * cbLight._m0[_2166].z) * _2207) + ((_2182 * cbLight._m0[_2176].z) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2222)
    {
        _2233 = _2214;
        _2235 = _2215;
        _2237 = _2216;
    }
    else
    {
        uint _2241 = _2149 + 6u;
        float _2257 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4392 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2260 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2233 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2214;
        _2235 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2215;
        _2237 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2216;
    }
    bool _2240 = _2220.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2240)
    {
        _2278 = _2233;
        _2280 = _2235;
        _2282 = _2237;
    }
    else
    {
        uint _2448 = _2149 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4408 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2467 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2278 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2233;
        _2280 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2235;
        _2282 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2237;
    }
    uint _2285 = _2149 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _950) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2149].x + _1027;
    float _2301 = cbLight._m0[_2149].y + _1028;
    float _2302 = cbLight._m0[_2149].z + _1029;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2149].xyz));
    float _4424 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _2314 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2315 = dot(vec3(_947, _948, _949), vec3(_2307, _2308, _2309));
    float _4446 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2307, _2308, _2309));
    float _4457 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2336 = 0.959999978542327880859375 - _1095;
    float _2338 = 0.959999978542327880859375 - _1096;
    float _2339 = 0.959999978542327880859375 - _1097;
    float _2346 = 1.0 - _2299;
    float _2357 = (0.5 / (((_2314 * ((_2313 * _2346) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2346) + _2299) * _2313))) * _2313;
    float _4468 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2370 = _2149 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _950) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2186].x + _1027;
    float _2384 = cbLight._m0[_2186].y + _1028;
    float _2385 = cbLight._m0[_2186].z + _1029;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2186].xyz));
    float _4479 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2397 = dot(vec3(_947, _948, _949), vec3(_2390, _2391, _2392));
    float _4490 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2390, _2391, _2392));
    float _4501 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2314 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2423) + _2382) * _2396))) * _2396;
    float _4512 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2336) + _1098) * cbLight._m0[_2370].x) * _2435) * _2172) + (((((_2335 * _2336) + _1098) * cbLight._m0[_2285].x) * _2359) * _2182);
    float _2446 = (((((_2416 * _2338) + _1100) * cbLight._m0[_2370].y) * _2435) * _2172) + (((((_2335 * _2338) + _1100) * cbLight._m0[_2285].y) * _2359) * _2182);
    float _2447 = (((((_2416 * _2339) + _1101) * cbLight._m0[_2370].z) * _2435) * _2172) + (((((_2335 * _2339) + _1101) * cbLight._m0[_2285].z) * _2359) * _2182);
    float _2509;
    float _2511;
    float _2513;
    if (_2222)
    {
        _2509 = _2445;
        _2511 = _2446;
        _2513 = _2447;
    }
    else
    {
        uint _2515 = _2149 + 2u;
        uint _2519 = _2149 + 10u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _950) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _1027;
        float _2536 = cbLight._m0[_2515].y + _1028;
        float _2537 = cbLight._m0[_2515].z + _1029;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2515].xyz));
        float _4523 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2549 = dot(vec3(_947, _948, _949), vec3(_2542, _2543, _2544));
        float _4534 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4545 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2314 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2575) + _2534) * _2548))) * _2548;
        float _4556 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2509 = (((((_2568 * _2336) + _1098) * cbLight._m0[_2519].x) * _2587) * _2588) + _2445;
        _2511 = (((((_2568 * _2338) + _1100) * cbLight._m0[_2519].y) * _2587) * _2588) + _2446;
        _2513 = (((((_2568 * _2339) + _1101) * cbLight._m0[_2519].z) * _2587) * _2588) + _2447;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2240)
    {
        _2623 = _2509;
        _2625 = _2511;
        _2627 = _2513;
    }
    else
    {
        uint _2634 = _2149 + 3u;
        uint _2638 = _2149 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _950) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1027;
        float _2655 = cbLight._m0[_2634].y + _1028;
        float _2656 = cbLight._m0[_2634].z + _1029;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2634].xyz));
        float _4572 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2668 = dot(vec3(_947, _948, _949), vec3(_2661, _2662, _2663));
        float _4583 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4594 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2314 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2694) + _2653) * _2667))) * _2667;
        float _4605 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2623 = (((((_2687 * _2336) + _1098) * cbLight._m0[_2638].x) * _2706) * _2707) + _2509;
        _2625 = (((((_2687 * _2338) + _1100) * cbLight._m0[_2638].y) * _2706) * _2707) + _2511;
        _2627 = (((((_2687 * _2339) + _1101) * cbLight._m0[_2638].z) * _2706) * _2707) + _2513;
    }
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_2147.y == 0u)
    {
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2782;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2782;
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2782;
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.x;
        uint _2809 = uint((float(_2797.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1036) / _2798))) + floor(float(uint(cbSceneParam._m0[85u].x * _1035) / _2798)));
        float _2819 = (log2(_2785 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2820 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        uint _2823 = uint(isnan(14.0) ? _2820 : (isnan(_2820) ? 14.0 : min(_2820, 14.0)));
        uvec4 _2828 = texelFetch(g_lightClusterGridBuffer, int(((_2823 << 2u) + (_2809 << 6u)) >> 2u));
        uint _2829 = _2828.x;
        uint _2830 = _2797.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2830 >> 4u) & 15u)) + 4294967295u) & _2829) == 0u) || ((_2830 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3091)
                {
                    frontier_phi_61_pred = _3075;
                    frontier_phi_61_pred_1 = _3080;
                    frontier_phi_61_pred_2 = _3079;
                    frontier_phi_61_pred_3 = _3078;
                    frontier_phi_61_pred_4 = _3077;
                    frontier_phi_61_pred_5 = _3076;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3090;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3081 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _2783;
                        float _3266 = _3225.y - _2784;
                        float _3267 = _3225.z - _2785;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_1054, _1057, _1060), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4631 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2783;
                        float _3301 = (-0.0) - _2784;
                        float _3302 = (-0.0) - _2785;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1129;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_1054, _1057, _1060), vec3(_3307, _3308, _3309));
                        float _4647 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3342 = dot(vec3(_1054, _1057, _1060), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4658 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3275) + _3351;
                        float _4669 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4680 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3134 = (_3296 * _3244.x) + _3202;
                        _3135 = (_3296 * _3244.y) + _3203;
                        _3136 = (_3296 * _3244.z) + _3204;
                        _3131 = (_3377 * _3261.x) + _3199;
                        _3132 = (_3377 * _3261.y) + _3200;
                        _3133 = (_3377 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_61_pred = _3131;
                    frontier_phi_61_pred_1 = _3136;
                    frontier_phi_61_pred_2 = _3135;
                    frontier_phi_61_pred_3 = _3134;
                    frontier_phi_61_pred_4 = _3133;
                    frontier_phi_61_pred_5 = _3132;
                }
                _2931 = frontier_phi_61_pred;
                _2941 = frontier_phi_61_pred_1;
                _2939 = frontier_phi_61_pred_2;
                _2937 = frontier_phi_61_pred_3;
                _2935 = frontier_phi_61_pred_4;
                _2933 = frontier_phi_61_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2931;
                    _3076 = _2933;
                    _3077 = _2935;
                    _3078 = _2937;
                    _3079 = _2939;
                    _3080 = _2941;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2947) & _2829) == 0u)
        {
            _3043 = _2930;
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
            float _3069 = _3068 * _2783;
            float _3070 = _3068 * _2784;
            float _3071 = _3068 * _2785;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3182 = _2930;
                float _3183 = _2932;
                float _3184 = _2934;
                float _3185 = _2936;
                float _3186 = _2938;
                float _3187 = _2940;
                uint _3188 = _2947;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3198)
                    {
                        frontier_phi_67_pred = _3185;
                        frontier_phi_67_pred_1 = _3186;
                        frontier_phi_67_pred_2 = _3187;
                        frontier_phi_67_pred_3 = _3184;
                        frontier_phi_67_pred_4 = _3183;
                        frontier_phi_67_pred_5 = _3182;
                    }
                    else
                    {
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        uint _3401 = _3197;
                        uint _3402;
                        vec4 _3427;
                        float _3428;
                        vec4 _3443;
                        vec3 _3455;
                        vec4 _3470;
                        vec4 _3485;
                        float _3531;
                        bool _3532;
                        for (;;)
                        {
                            uint _3412 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3401));
                            _3402 = (_3401 + 4294967295u) & _3401;
                            uint _3414 = _3412 * 40u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3428 = _3427.w;
                            uint _3430 = (_3412 * 40u) + 4u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3412 * 40u) + 8u;
                            _3455 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x));
                            uint _3457 = (_3412 * 40u) + 16u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3412 * 40u) + 20u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3412 * 40u) + 24u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3506 = (_3412 * 40u) + 28u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3531 = fma(_2785, _3519.z, fma(_2784, _3519.y, _3519.x * _2783)) + _3519.w;
                            _3532 = !((fma(_2785, _3500.z, fma(_2784, _3500.y, _3500.x * _2783)) + _3500.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3532)
                            {
                                float _3559 = _3427.x - _2783;
                                float _3560 = _3427.y - _2784;
                                float _3561 = _3427.z - _2785;
                                float _3562 = dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561));
                                float _3565 = inversesqrt(_3562);
                                float _3566 = _3565 * _3559;
                                float _3567 = _3565 * _3560;
                                float _3568 = _3565 * _3561;
                                float _3572 = 1.0 - (_3562 / (_3428 * _3428));
                                float _4691 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3577 = sqrt(_3562) * _3443.w;
                                float _3579 = 1.39999997615814208984375 / (_3577 + 1.39999997615814208984375);
                                float _3580 = _3579 * _3579;
                                float _3583 = ((1.0 - _3580) * dot(vec3(_3566, _3567, _3568), vec3(_1054, _1057, _1060))) + _3580;
                                float _3586 = _3577 * _3577;
                                float _3590 = (fma(_2785, _3470.z, fma(_2784, _3470.y, _3470.x * _2783)) + _3470.w) / _3531;
                                float _3591 = (fma(_2785, _3485.z, fma(_2784, _3485.y, _3485.x * _2783)) + _3485.w) / _3531;
                                float _3595 = 1.0 - dot(vec2(_3590, _3591), vec2(_3590, _3591));
                                float _4707 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3597 = _3596 * (((isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0))) * _3573) / ((_3586 * 0.699999988079071044921875) + 1.0));
                                float _3609 = exp2(log2(1.0 / ((_3586 * 3.5) + 5.0)) * 0.25);
                                float _3610 = 1.0 - _1129;
                                float _3617 = sqrt(1.0 - ((1.0 - (_3610 * _3610)) * (1.0 - (_3609 * _3609))));
                                float _3618 = _3617 * _3617;
                                float _3619 = _3618 * _3618;
                                float _3620 = _3566 - _3069;
                                float _3621 = _3567 - _3070;
                                float _3622 = _3568 - _3071;
                                float _3626 = inversesqrt(dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622)));
                                float _3630 = dot(vec3(_1054, _1057, _1060), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4718 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3634 = dot(vec3(_1054, _1057, _1060), vec3(_3626 * _3620, _3626 * _3621, _3626 * _3622));
                                float _4729 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3641 = ((_3637 * _3637) * (_3619 + (-1.0))) + 1.0;
                                float _3642 = _3579 * _3618;
                                float _3643 = _3642 * _3642;
                                float _3649 = ((1.0 - _3643) * dot(vec3(_1054, _1057, _1060), vec3(_3566, _3567, _3568))) + _3643;
                                float _4740 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3651 = 1.0 - _3618;
                                float _3661 = (0.5 / (((_3650 * ((_3633 * _3651) + _3618)) + 9.9999999392252902907785028219223e-09) + (((_3650 * _3651) + _3618) * _3633))) * _3650;
                                float _4751 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3671 = (_3596 * _3573) * (((_3619 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3641 * _3641) * ((_3586 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3671 * _3455.x;
                                frontier_phi_73_pred_1 = _3671 * _3455.y;
                                frontier_phi_73_pred_2 = _3597 * _3443.z;
                                frontier_phi_73_pred_3 = _3597 * _3443.y;
                                frontier_phi_73_pred_4 = _3597 * _3443.x;
                                frontier_phi_73_pred_5 = _3671 * _3455.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3675 = frontier_phi_73_pred;
                            _3676 = frontier_phi_73_pred_1;
                            _3680 = frontier_phi_73_pred_2;
                            _3679 = frontier_phi_73_pred_3;
                            _3678 = frontier_phi_73_pred_4;
                            _3677 = frontier_phi_73_pred_5;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            if (_3402 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3402;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3385;
                        frontier_phi_67_pred_1 = _3386;
                        frontier_phi_67_pred_2 = _3387;
                        frontier_phi_67_pred_3 = _3384;
                        frontier_phi_67_pred_4 = _3383;
                        frontier_phi_67_pred_5 = _3382;
                    }
                    _3050 = frontier_phi_67_pred;
                    _3052 = frontier_phi_67_pred_1;
                    _3054 = frontier_phi_67_pred_2;
                    _3048 = frontier_phi_67_pred_3;
                    _3046 = frontier_phi_67_pred_4;
                    _3044 = frontier_phi_67_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3044;
                        _3183 = _3046;
                        _3184 = _3048;
                        _3185 = _3050;
                        _3186 = _3052;
                        _3187 = _3054;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3052;
                frontier_phi_55_56_ladder_1 = _3054;
                frontier_phi_55_56_ladder_2 = _3050;
                frontier_phi_55_56_ladder_3 = _3048;
                frontier_phi_55_56_ladder_4 = _3046;
                frontier_phi_55_56_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_55_56_ladder = _2938;
                frontier_phi_55_56_ladder_1 = _2940;
                frontier_phi_55_56_ladder_2 = _2936;
                frontier_phi_55_56_ladder_3 = _2934;
                frontier_phi_55_56_ladder_4 = _2932;
                frontier_phi_55_56_ladder_5 = _2930;
            }
            _3043 = frontier_phi_55_56_ladder_5;
            _3045 = frontier_phi_55_56_ladder_4;
            _3047 = frontier_phi_55_56_ladder_3;
            _3049 = frontier_phi_55_56_ladder_2;
            _3051 = frontier_phi_55_56_ladder;
            _3053 = frontier_phi_55_56_ladder_1;
        }
        float _3058 = isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0));
        _2842 = (_3058 * _3049) + _2278;
        _2844 = (_3058 * _3051) + _2280;
        _2846 = (_3058 * _3053) + _2282;
        _2848 = ((_3043 * _1098) * _3058) + _2623;
        _2850 = ((_3045 * _1100) * _3058) + _2625;
        _2852 = ((_3047 * _1101) * _3058) + _2627;
    }
    else
    {
        _2842 = _2278;
        _2844 = _2280;
        _2846 = _2282;
        _2848 = _2623;
        _2850 = _2625;
        _2852 = _2627;
    }
    float _4767 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _4778 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _4789 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    uint _2872 = _1073 + 6u;
    float _2880 = _1035 / cbSceneParam._m0[86u].x;
    float _2881 = _1036 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _970 : (isnan(_970) ? cbSceneParam._m0[77u].w : min(_970, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_970 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_970) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _970 : min(cbSceneParam._m0[80u].w, _970));
        float _2956 = _2955 / _970;
        float _2967 = _2956 * _1020;
        float _2968 = _1021 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2971 = _2956 * _1022;
        float _2973 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2974 = _2973 + cbSceneParam._m0[79u].w;
        float _2975 = cbSceneParam._m0[79u].w - _2968;
        float _2981 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2971 * _2971));
        float _2984 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2981;
        float _2989 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2991 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3144;
        if (abs((_2969 - _2973) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3144 = ((((_2974 > 0.0) ? exp2(_2989 * _2974) : (2.0 - exp2(_2991 * _2974))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2984;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : max(_2974, _2975));
            float _3106 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : min(_2974, _2975));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3144 = ((abs(_2981 / _2969) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2989 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2989 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2991 * _3115) - exp2(_2991 * _3116)) * _3104))) + (_2984 * cbSceneParam._m0[80u].z);
        }
        vec4 _3146 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3155 = exp2((_3144 * (-1.44269502162933349609375)) * (1.0 - _3146.w));
        float _3156 = log2(_3155);
        float _3172 = log2(_2900);
        _2993 = (exp2(_3172 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].x)) * _3146.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2995 = (exp2(_3172 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].y)) * _3146.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2997 = (exp2(_3172 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].z)) * _3146.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2999 = _3155 * _2900;
    }
    else
    {
        _2993 = _2897;
        _2995 = _2898;
        _2997 = _2899;
        _2999 = _2900;
    }
    float _3011 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3012 = _3011 == 3.0;
    float _3013 = log2(_2999);
    float _3020 = exp2(_3013 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2842 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1113))) + ((_2848 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3021 = exp2(_3013 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2844 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1113))) + ((_2850 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3022 = exp2(_3013 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2846 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1113))) + ((_2852 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3031 = (_3011 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3031 * (_3012 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2993)));
    SV_Target.y = _3031 * (_3012 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2995)));
    SV_Target.z = _3031 * (_3012 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.w = cbInstanceData._m0[_2872].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
}


