#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1378;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _282 = _278.z;
    float _293 = exp2(log2((1.0 - _282) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    vec4 _309 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _321 = exp2(log2(_309.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    float _332 = exp2(log2(cbMtdParam._m0[23u].y * _282) * cbMtdParam._m0[22u].y);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _355 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _357 = isnan(4.0) ? _356 : (isnan(_356) ? 4.0 : min(_356, 4.0));
    float _370 = floor(_357);
    vec4 _373 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _370));
    vec4 _397 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _408 = cbMtdParam._m0[9u].x * _397.x;
    float _409 = cbMtdParam._m0[9u].y * _397.y;
    float _410 = cbMtdParam._m0[9u].z * _397.z;
    float _417 = (((cbMtdParam._m0[10u].x * _373.x) - _408) * _334) + _408;
    float _418 = (((cbMtdParam._m0[10u].y * _373.y) - _409) * _334) + _409;
    float _419 = (((cbMtdParam._m0[10u].z * _373.z) - _410) * _334) + _410;
    float _425 = exp2(log2(_278.w) * cbMtdParam._m0[23u].w);
    vec4 _438 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _457 = (((cbMtdParam._m0[16u].x * _438.x) - _417) * _425) + _417;
    float _458 = (((cbMtdParam._m0[16u].y * _438.y) - _418) * _425) + _418;
    float _459 = (((cbMtdParam._m0[16u].z * _438.z) - _419) * _425) + _419;
    vec4 _472 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _492 = (((cbMtdParam._m0[19u].x * _472.x) - _457) * _323) + _457;
    float _493 = (((cbMtdParam._m0[19u].y * _472.y) - _458) * _323) + _458;
    float _494 = (((cbMtdParam._m0[19u].z * _472.z) - _459) * _323) + _459;
    vec4 _507 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _532 = (_309.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _507.x) - _492) * _295) + _492);
    float _534 = (_309.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _507.y) - _493) * _295) + _493);
    float _536 = (_309.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _507.z) - _494) * _295) + _494);
    float _540 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _549 = (_540 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _540))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3742 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _557 = ((cbMtdParam._m0[21u].x - _532) * _550) + _532;
    float _558 = ((cbMtdParam._m0[21u].y - _534) * _550) + _534;
    float _559 = ((cbMtdParam._m0[21u].z - _536) * _550) + _536;
    float _189[5];
    float _190[5];
    _189[0u] = cbMtdParam._m0[29u].x;
    _190[0u] = cbMtdParam._m0[29u].y;
    _189[1u] = cbMtdParam._m0[31u].x;
    _190[1u] = cbMtdParam._m0[31u].y;
    _189[2u] = cbMtdParam._m0[30u].z;
    _190[2u] = cbMtdParam._m0[30u].w;
    _189[3u] = cbMtdParam._m0[30u].x;
    _190[3u] = cbMtdParam._m0[30u].y;
    _189[4u] = cbMtdParam._m0[29u].z;
    _190[4u] = cbMtdParam._m0[29u].w;
    float _601 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    uint _603 = uint(int(isnan(4.0) ? _601 : (isnan(_601) ? 4.0 : min(_601, 4.0))));
    float _610 = ((_190[_603] - cbMtdParam._m0[22u].z) * _334) + cbMtdParam._m0[22u].z;
    float _613 = ((cbMtdParam._m0[22u].w - _610) * _425) + _610;
    float _616 = ((cbMtdParam._m0[25u].y - _613) * _323) + _613;
    float _619 = ((cbMtdParam._m0[26u].y - _616) * _295) + _616;
    float _621 = _619 - (_619 * _540);
    vec4 _637 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _370));
    vec4 _655 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _657 = _655.x;
    float _658 = _655.y;
    float _663 = cbMtdParam._m0[22u].x + _655.z;
    float _666 = (((_637.z + _189[_603]) - _663) * _334) + _663;
    vec4 _679 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _690 = (((_679.z - _666) + cbMtdParam._m0[28u].z) * _425) + _666;
    float _696 = ((((_282 * 2.0) * _690) - _690) * cbMtdParam._m0[24u].w) + _690;
    vec4 _709 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _720 = (((cbMtdParam._m0[23u].z + _709.z) - _696) * _323) + _696;
    vec4 _733 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _744 = (((_733.z - _720) + cbMtdParam._m0[26u].z) * _295) + _720;
    vec4 _759 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _774 = ((cbMtdParam._m0[27u].z * _540) * ((_759.z * cbMtdParam._m0[27u].y) - _744)) + _744;
    float _786 = ((_637.x - _657) * _334) + _657;
    float _787 = ((_637.y - _658) * _334) + _658;
    float _792 = ((_679.x - _786) * _425) + _786;
    float _793 = ((_679.y - _787) * _425) + _787;
    float _798 = ((_709.x - _792) * _323) + _792;
    float _799 = ((_709.y - _793) * _323) + _793;
    float _808 = ((((_733.x - _798) * _295) + _798) * 2.0) + (-1.0);
    float _809 = ((((_733.y - _799) * _295) + _799) * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _3763 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _815 = sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))));
    float _825 = ((cbMtdParam._m0[25u].z * ((_278.x * 2.0) + (-1.0))) + _808) + ((((_759.x * 2.0) + (-1.0)) * _540) * cbMtdParam._m0[27u].x);
    float _826 = ((cbMtdParam._m0[25u].z * ((_278.y * 2.0) + (-1.0))) + _809) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_759.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _829 = fma(_815, _225 * NORMAL.x, fma(_826, _232 * TANGENT.x, (_218 * _210) * _825));
    float _832 = fma(_815, _225 * NORMAL.y, fma(_826, _232 * TANGENT.y, (_218 * _211) * _825));
    float _835 = fma(_815, _225 * NORMAL.z, fma(_826, _232 * TANGENT.z, (_218 * _212) * _825));
    float _839 = inversesqrt(dot(vec3(_829, _832, _835), vec3(_829, _832, _835)));
    float _840 = _839 * _829;
    float _841 = _839 * _832;
    float _842 = _839 * _835;
    float _3774 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _843 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3796 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3807 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3818 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _847 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_842, cbSceneParam._m0[5u].z, fma(_841, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _840));
    float _950 = fma(_842, cbSceneParam._m0[6u].z, fma(_841, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _840));
    float _953 = fma(_842, cbSceneParam._m0[7u].z, fma(_841, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _840));
    uint _966 = uint(roundEven(NORMAL.w)) * 13u;
    uint _968 = (_966 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_968].z;
    float _3829 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _980 = 1.0 - _847;
    float _981 = _977 * _980;
    float _982 = _978 * _980;
    float _983 = _979 * _980;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _847;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _847;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _847;
    float _991 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = _1003.x * TEXCOORD_3.w;
    float _1007 = dot(vec3(_840, _841, _842), vec3(_920, _921, _922));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _840) - _920;
    float _1015 = (_1010 * _841) - _921;
    float _1016 = (_1010 * _842) - _922;
    float _1020 = abs(dot(vec3(_920, _921, _922), vec3(_840, _841, _842)));
    float _3862 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_843);
    float _1033 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1039 = (1.0 - _1033) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1040 = _1033 * _1022;
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1106 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1110 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1135 = _1068 + _840;
        float _1136 = _1072 + _841;
        float _1137 = _1076 + _842;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_840, _841, _842), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3910 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_840, _841, _842), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3943 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_840, _841, _842), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3976 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1415 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1419 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1423 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1446 = _1068 + _840;
        float _1447 = _1072 + _841;
        float _1448 = _1076 + _842;
        float _1458 = fma(_1448, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1477 = ((_1464 * _1458) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1415 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1459) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1419 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1464 * _1460) / cbModelParam._m0[35u].z) + ((((((_1423 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1514 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1481.x + (-0.5));
        float _1516 = _1514 * (_1481.y + (-0.5));
        float _1517 = _1514 * (_1481.z + (-0.5));
        float _1524 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1488.x + (-0.5));
        float _1526 = _1524 * (_1488.y + (-0.5));
        float _1527 = _1524 * (_1488.z + (-0.5));
        float _1534 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1495.x + (-0.5));
        float _1536 = _1534 * (_1495.y + (-0.5));
        float _1537 = _1534 * (_1495.z + (-0.5));
        float _1544 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1502.x + (-0.5));
        float _1546 = _1544 * (_1502.y + (-0.5));
        float _1547 = _1544 * (_1502.z + (-0.5));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1515 * 0.5;
        float _1552 = _1525 * 0.5;
        float _1553 = _1535 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_840, _841, _842), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4039 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1578 + 1.0))) + _1583) * _1548;
        float _1593 = _1516 * 0.5;
        float _1594 = _1526 * 0.5;
        float _1595 = _1536 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_840, _841, _842), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4072 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1620 + 1.0))) + _1625) * _1549;
        float _1635 = _1517 * 0.5;
        float _1636 = _1527 * 0.5;
        float _1637 = _1537 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_840, _841, _842), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4105 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1662 + 1.0))) + _1667) * _1550;
        _1684 = _1517;
        _1685 = _1516;
        _1686 = _1515;
        _1687 = _1527;
        _1688 = _1526;
        _1689 = _1525;
        _1690 = _1537;
        _1691 = _1536;
        _1692 = _1535;
        _1693 = _1550;
        _1694 = _1549;
        _1695 = _1548;
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    }
    else
    {
        _1684 = _1378;
        _1685 = _1378;
        _1686 = _1378;
        _1687 = _1378;
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = 0.0;
        _1697 = 0.0;
        _1698 = 0.0;
    }
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1390)) + _1390;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1391)) + _1391;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1392)) + _1392;
    float _1731 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1708));
    float _1752 = _1014 * 0.5;
    float _1753 = _1015 * 0.5;
    float _1754 = _1016 * 0.5;
    float _1755 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1758 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1761 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1768 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1772 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1776 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1783 = dot(vec4(cbModelParam._m0[39u]), vec4(_1752, _1753, _1754, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1752, _1753, _1754, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1820 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _843);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1820 : min(cbModelParam._m0[25u].z, _1820));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1882 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1885 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1913 = frontier_phi_14_12_ladder;
        }
        float _2116;
        if (_1882 > 0.0)
        {
            _2116 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2116 = frontier_phi_23_19_ladder;
        }
        float _2370;
        if (_1885 > 0.0)
        {
            _2370 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2370 = frontier_phi_35_30_ladder;
        }
        float _2372 = isnan(_2116) ? _1913 : (isnan(_1913) ? _2116 : min(_1913, _2116));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1879) + _1868;
        float _2378 = (_2373 * _1882) + _1872;
        float _2379 = (_2373 * _1885) + _1876;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1821);
            frontier_phi_13_35_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_13_35_ladder_2;
        _1903 = frontier_phi_13_35_ladder_1;
        _1905 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1821);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _843);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _1978 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _1981 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2121;
        if (_1975 > 0.0)
        {
            _2121 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2121 = frontier_phi_25_21_ladder;
        }
        float _2397;
        if (_1978 > 0.0)
        {
            _2397 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2397 = frontier_phi_37_32_ladder;
        }
        float _2610;
        if (_1981 > 0.0)
        {
            _2610 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2610 = frontier_phi_46_43_ladder;
        }
        float _2612 = isnan(_2397) ? _2121 : (isnan(_2121) ? _2397 : min(_2121, _2397));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1975) + _1964;
        float _2618 = (_2613 * _1978) + _1968;
        float _2619 = (_2613 * _1981) + _1972;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_22_46_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_22_46_ladder_2;
        _2002 = frontier_phi_22_46_ladder_1;
        _2004 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1910);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1039 * _991) + _1040) * _1006) * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2019 = (((_1039 * _993) + _1040) * _1006) * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2021 = (((_1039 * _994) + _1040) * _1006) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_966 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _1006 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2075 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2079 = _2042 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_840, _841, _842));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_840, _841, _842));
    float _4241 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4252 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2059].x * _2065) * _2100) + ((cbLight._m0[_2069].x * _2075) * _2098);
    float _2108 = ((_2065 * cbLight._m0[_2059].y) * _2100) + ((_2075 * cbLight._m0[_2069].y) * _2098);
    float _2109 = ((_2065 * cbLight._m0[_2059].z) * _2100) + ((_2075 * cbLight._m0[_2069].z) * _2098);
    uvec4 _2113 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2115 = _2113.x == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2115)
    {
        _2126 = _2107;
        _2128 = _2108;
        _2130 = _2109;
    }
    else
    {
        uint _2134 = _2042 + 6u;
        float _2150 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_840, _841, _842)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4263 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2153 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2126 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _2107;
        _2128 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _2108;
        _2130 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _2109;
    }
    bool _2133 = _2113.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2133)
    {
        _2171 = _2126;
        _2173 = _2128;
        _2175 = _2130;
    }
    else
    {
        uint _2341 = _2042 + 7u;
        float _2357 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_840, _841, _842)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4279 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2360 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2171 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2126;
        _2173 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2128;
        _2175 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2130;
    }
    uint _2178 = _2042 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _843) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2042].x + _920;
    float _2194 = cbLight._m0[_2042].y + _921;
    float _2195 = cbLight._m0[_2042].z + _922;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2042].xyz));
    float _4295 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2207 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2208 = dot(vec3(_840, _841, _842), vec3(_2200, _2201, _2202));
    float _4317 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2200, _2201, _2202));
    float _4328 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2229 = 0.959999978542327880859375 - _988;
    float _2231 = 0.959999978542327880859375 - _989;
    float _2232 = 0.959999978542327880859375 - _990;
    float _2239 = 1.0 - _2192;
    float _2250 = (0.5 / (((_2207 * ((_2206 * _2239) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2239) + _2192) * _2206))) * _2206;
    float _4339 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2263 = _2042 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _843) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2079].x + _920;
    float _2277 = cbLight._m0[_2079].y + _921;
    float _2278 = cbLight._m0[_2079].z + _922;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2079].xyz));
    float _4350 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2290 = dot(vec3(_840, _841, _842), vec3(_2283, _2284, _2285));
    float _4361 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2283, _2284, _2285));
    float _4372 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2316 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2207 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2316) + _2275) * _2289))) * _2289;
    float _4383 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2338 = (((((_2309 * _2229) + _991) * cbLight._m0[_2263].x) * _2328) * _2065) + (((((_2228 * _2229) + _991) * cbLight._m0[_2178].x) * _2252) * _2075);
    float _2339 = (((((_2309 * _2231) + _993) * cbLight._m0[_2263].y) * _2328) * _2065) + (((((_2228 * _2231) + _993) * cbLight._m0[_2178].y) * _2252) * _2075);
    float _2340 = (((((_2309 * _2232) + _994) * cbLight._m0[_2263].z) * _2328) * _2065) + (((((_2228 * _2232) + _994) * cbLight._m0[_2178].z) * _2252) * _2075);
    float _2402;
    float _2404;
    float _2406;
    if (_2115)
    {
        _2402 = _2338;
        _2404 = _2339;
        _2406 = _2340;
    }
    else
    {
        uint _2408 = _2042 + 2u;
        uint _2412 = _2042 + 10u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _843) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _920;
        float _2429 = cbLight._m0[_2408].y + _921;
        float _2430 = cbLight._m0[_2408].z + _922;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2408].xyz));
        float _4394 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2442 = dot(vec3(_840, _841, _842), vec3(_2435, _2436, _2437));
        float _4405 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4416 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2207 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2468) + _2427) * _2441))) * _2441;
        float _4427 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2402 = (((((_2461 * _2229) + _991) * cbLight._m0[_2412].x) * _2480) * _2481) + _2338;
        _2404 = (((((_2461 * _2231) + _993) * cbLight._m0[_2412].y) * _2480) * _2481) + _2339;
        _2406 = (((((_2461 * _2232) + _994) * cbLight._m0[_2412].z) * _2480) * _2481) + _2340;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2133)
    {
        _2516 = _2402;
        _2518 = _2404;
        _2520 = _2406;
    }
    else
    {
        uint _2527 = _2042 + 3u;
        uint _2531 = _2042 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _843) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _920;
        float _2548 = cbLight._m0[_2527].y + _921;
        float _2549 = cbLight._m0[_2527].z + _922;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2527].xyz));
        float _4443 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2561 = dot(vec3(_840, _841, _842), vec3(_2554, _2555, _2556));
        float _4454 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4465 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2207 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2587) + _2546) * _2560))) * _2560;
        float _4476 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2516 = (((((_2580 * _2229) + _991) * cbLight._m0[_2531].x) * _2599) * _2600) + _2402;
        _2518 = (((((_2580 * _2231) + _993) * cbLight._m0[_2531].y) * _2599) * _2600) + _2404;
        _2520 = (((((_2580 * _2232) + _994) * cbLight._m0[_2531].z) * _2599) * _2600) + _2406;
    }
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_2040.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            uint _2974 = 0u;
            uint _2983;
            bool _2984;
            for (;;)
            {
                _2983 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                _2984 = _2983 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2984)
                {
                    frontier_phi_61_pred = _2968;
                    frontier_phi_61_pred_1 = _2973;
                    frontier_phi_61_pred_2 = _2972;
                    frontier_phi_61_pred_3 = _2971;
                    frontier_phi_61_pred_4 = _2970;
                    frontier_phi_61_pred_5 = _2969;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2983;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2974 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _2676;
                        float _3159 = _3118.y - _2677;
                        float _3160 = _3118.z - _2678;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_947, _950, _953), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4502 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _2676;
                        float _3194 = (-0.0) - _2677;
                        float _3195 = (-0.0) - _2678;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3210 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _1022;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3200 + _3165;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_947, _950, _953), vec3(_3200, _3201, _3202));
                        float _4518 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3235 = dot(vec3(_947, _950, _953), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4529 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3178 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3168) + _3244;
                        float _4540 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4551 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3242 * _3242) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3027 = (_3189 * _3137.x) + _3095;
                        _3028 = (_3189 * _3137.y) + _3096;
                        _3029 = (_3189 * _3137.z) + _3097;
                        _3024 = (_3270 * _3154.x) + _3092;
                        _3025 = (_3270 * _3154.y) + _3093;
                        _3026 = (_3270 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_61_pred = _3024;
                    frontier_phi_61_pred_1 = _3029;
                    frontier_phi_61_pred_2 = _3028;
                    frontier_phi_61_pred_3 = _3027;
                    frontier_phi_61_pred_4 = _3026;
                    frontier_phi_61_pred_5 = _3025;
                }
                _2824 = frontier_phi_61_pred;
                _2834 = frontier_phi_61_pred_1;
                _2832 = frontier_phi_61_pred_2;
                _2830 = frontier_phi_61_pred_3;
                _2828 = frontier_phi_61_pred_4;
                _2826 = frontier_phi_61_pred_5;
                uint _2975 = _2974 + 1u;
                if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2968 = _2824;
                    _2969 = _2826;
                    _2970 = _2828;
                    _2971 = _2830;
                    _2972 = _2832;
                    _2973 = _2834;
                    _2974 = _2975;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((4294967295u << _2840) & _2722) == 0u)
        {
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
            _2946 = _2833;
        }
        else
        {
            float _2961 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _2962 = _2961 * _2676;
            float _2963 = _2961 * _2677;
            float _2964 = _2961 * _2678;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _3075 = _2823;
                float _3076 = _2825;
                float _3077 = _2827;
                float _3078 = _2829;
                float _3079 = _2831;
                float _3080 = _2833;
                uint _3081 = _2840;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3091)
                    {
                        frontier_phi_67_pred = _3078;
                        frontier_phi_67_pred_1 = _3079;
                        frontier_phi_67_pred_2 = _3080;
                        frontier_phi_67_pred_3 = _3077;
                        frontier_phi_67_pred_4 = _3076;
                        frontier_phi_67_pred_5 = _3075;
                    }
                    else
                    {
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3288 = _3075;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        float _3292 = _3079;
                        float _3293 = _3080;
                        uint _3294 = _3090;
                        uint _3295;
                        vec4 _3320;
                        float _3321;
                        vec4 _3336;
                        vec3 _3348;
                        vec4 _3363;
                        vec4 _3378;
                        float _3424;
                        bool _3425;
                        for (;;)
                        {
                            uint _3305 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3294));
                            _3295 = (_3294 + 4294967295u) & _3294;
                            uint _3307 = _3305 * 40u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            _3321 = _3320.w;
                            uint _3323 = (_3305 * 40u) + 4u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3305 * 40u) + 8u;
                            _3348 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x));
                            uint _3350 = (_3305 * 40u) + 16u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3305 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3305 * 40u) + 24u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3399 = (_3305 * 40u) + 28u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3424 = fma(_2678, _3412.z, fma(_2677, _3412.y, _3412.x * _2676)) + _3412.w;
                            _3425 = !((fma(_2678, _3393.z, fma(_2677, _3393.y, _3393.x * _2676)) + _3393.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3425)
                            {
                                float _3452 = _3320.x - _2676;
                                float _3453 = _3320.y - _2677;
                                float _3454 = _3320.z - _2678;
                                float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                                float _3458 = inversesqrt(_3455);
                                float _3459 = _3458 * _3452;
                                float _3460 = _3458 * _3453;
                                float _3461 = _3458 * _3454;
                                float _3465 = 1.0 - (_3455 / (_3321 * _3321));
                                float _4562 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3470 = sqrt(_3455) * _3336.w;
                                float _3472 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                                float _3473 = _3472 * _3472;
                                float _3476 = ((1.0 - _3473) * dot(vec3(_3459, _3460, _3461), vec3(_947, _950, _953))) + _3473;
                                float _3479 = _3470 * _3470;
                                float _3483 = (fma(_2678, _3363.z, fma(_2677, _3363.y, _3363.x * _2676)) + _3363.w) / _3424;
                                float _3484 = (fma(_2678, _3378.z, fma(_2677, _3378.y, _3378.x * _2676)) + _3378.w) / _3424;
                                float _3488 = 1.0 - dot(vec2(_3483, _3484), vec2(_3483, _3484));
                                float _4578 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3490 = _3489 * (((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3466) / ((_3479 * 0.699999988079071044921875) + 1.0));
                                float _3502 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                                float _3503 = 1.0 - _1022;
                                float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                                float _3511 = _3510 * _3510;
                                float _3512 = _3511 * _3511;
                                float _3513 = _3459 - _2962;
                                float _3514 = _3460 - _2963;
                                float _3515 = _3461 - _2964;
                                float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                                float _3523 = dot(vec3(_947, _950, _953), vec3((-0.0) - _2962, (-0.0) - _2963, (-0.0) - _2964));
                                float _4589 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3527 = dot(vec3(_947, _950, _953), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                                float _4600 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                                float _3535 = _3472 * _3511;
                                float _3536 = _3535 * _3535;
                                float _3542 = ((1.0 - _3536) * dot(vec3(_947, _950, _953), vec3(_3459, _3460, _3461))) + _3536;
                                float _4611 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3544 = 1.0 - _3511;
                                float _3554 = (0.5 / (((_3543 * ((_3526 * _3544) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3511) * _3526))) * _3543;
                                float _4622 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3564 = (_3489 * _3466) * (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3534 * _3534) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3564 * _3348.x;
                                frontier_phi_73_pred_1 = _3564 * _3348.y;
                                frontier_phi_73_pred_2 = _3490 * _3336.z;
                                frontier_phi_73_pred_3 = _3490 * _3336.y;
                                frontier_phi_73_pred_4 = _3490 * _3336.x;
                                frontier_phi_73_pred_5 = _3564 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3568 = frontier_phi_73_pred;
                            _3569 = frontier_phi_73_pred_1;
                            _3573 = frontier_phi_73_pred_2;
                            _3572 = frontier_phi_73_pred_3;
                            _3571 = frontier_phi_73_pred_4;
                            _3570 = frontier_phi_73_pred_5;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            if (_3295 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3295;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3278;
                        frontier_phi_67_pred_1 = _3279;
                        frontier_phi_67_pred_2 = _3280;
                        frontier_phi_67_pred_3 = _3277;
                        frontier_phi_67_pred_4 = _3276;
                        frontier_phi_67_pred_5 = _3275;
                    }
                    _2943 = frontier_phi_67_pred;
                    _2945 = frontier_phi_67_pred_1;
                    _2947 = frontier_phi_67_pred_2;
                    _2941 = frontier_phi_67_pred_3;
                    _2939 = frontier_phi_67_pred_4;
                    _2937 = frontier_phi_67_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2937;
                        _3076 = _2939;
                        _3077 = _2941;
                        _3078 = _2943;
                        _3079 = _2945;
                        _3080 = _2947;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2945;
                frontier_phi_55_56_ladder_1 = _2947;
                frontier_phi_55_56_ladder_2 = _2943;
                frontier_phi_55_56_ladder_3 = _2941;
                frontier_phi_55_56_ladder_4 = _2939;
                frontier_phi_55_56_ladder_5 = _2937;
            }
            else
            {
                frontier_phi_55_56_ladder = _2831;
                frontier_phi_55_56_ladder_1 = _2833;
                frontier_phi_55_56_ladder_2 = _2829;
                frontier_phi_55_56_ladder_3 = _2827;
                frontier_phi_55_56_ladder_4 = _2825;
                frontier_phi_55_56_ladder_5 = _2823;
            }
            _2936 = frontier_phi_55_56_ladder_5;
            _2938 = frontier_phi_55_56_ladder_4;
            _2940 = frontier_phi_55_56_ladder_3;
            _2942 = frontier_phi_55_56_ladder_2;
            _2944 = frontier_phi_55_56_ladder;
            _2946 = frontier_phi_55_56_ladder_1;
        }
        float _2951 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2735 = (_2951 * _2942) + _2171;
        _2737 = (_2951 * _2944) + _2173;
        _2739 = (_2951 * _2946) + _2175;
        _2741 = ((_2936 * _991) * _2951) + _2516;
        _2743 = ((_2938 * _993) * _2951) + _2518;
        _2745 = ((_2940 * _994) * _2951) + _2520;
    }
    else
    {
        _2735 = _2171;
        _2737 = _2173;
        _2739 = _2175;
        _2741 = _2516;
        _2743 = _2518;
        _2745 = _2520;
    }
    float _4638 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4649 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4660 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    uint _2765 = _966 + 6u;
    float _2773 = _928 / cbSceneParam._m0[86u].x;
    float _2774 = _929 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2849 = _2848 / _863;
        float _2860 = _2849 * _913;
        float _2861 = _914 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2864 = _2849 * _915;
        float _2866 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2867 = _2866 + cbSceneParam._m0[79u].w;
        float _2868 = cbSceneParam._m0[79u].w - _2861;
        float _2874 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2864 * _2864));
        float _2877 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2874;
        float _2882 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2884 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3037;
        if (abs((_2862 - _2866) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3037 = ((((_2867 > 0.0) ? exp2(_2882 * _2867) : (2.0 - exp2(_2884 * _2867))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2877;
        }
        else
        {
            float _2997 = 1.0 / cbSceneParam._m0[80u].x;
            float _2998 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : max(_2867, _2868));
            float _2999 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : min(_2867, _2868));
            float _3008 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : min(_2998, 0.0));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            _3037 = ((abs(_2874 / _2862) * cbSceneParam._m0[80u].y) * ((((_3008 - _3009) * 2.0) - ((exp2(_2882 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0)))) - exp2(_2882 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))))) * _2997)) - ((exp2(_2884 * _3008) - exp2(_2884 * _3009)) * _2997))) + (_2877 * cbSceneParam._m0[80u].z);
        }
        vec4 _3039 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3048 = exp2((_3037 * (-1.44269502162933349609375)) * (1.0 - _3039.w));
        float _3049 = log2(_3048);
        float _3065 = log2(_2793);
        _2886 = (exp2(_3065 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].x)) * _3039.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2888 = (exp2(_3065 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].y)) * _3039.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2890 = (exp2(_3065 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].z)) * _3039.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2892 = _3048 * _2793;
    }
    else
    {
        _2886 = _2790;
        _2888 = _2791;
        _2890 = _2792;
        _2892 = _2793;
    }
    float _2904 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2905 = _2904 == 3.0;
    float _2906 = log2(_2892);
    float _2913 = exp2(_2906 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2735 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1006))) + ((_2741 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2914 = exp2(_2906 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2737 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1006))) + ((_2743 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2915 = exp2(_2906 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2739 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1006))) + ((_2745 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2924 = (_2904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2924 * (_2905 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2886)));
    SV_Target.y = _2924 * (_2905 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.z = _2924 * (_2905 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.w = cbInstanceData._m0[_2765].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
}


