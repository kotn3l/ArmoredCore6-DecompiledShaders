#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1559;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _313 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _317 = _313.z;
    float _328 = exp2(log2((1.0 - _317) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _356 = exp2(log2(_344.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0));
    float _367 = exp2(log2(cbMtdParam._m0[23u].y * _317) * cbMtdParam._m0[22u].y);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
    vec4 _381 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _384 = _381.y;
    float _387 = (_381.x + (-0.02500000037252902984619140625)) * 8.0;
    float _391 = roundEven(5.0 - _387);
    float _392 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _393 = isnan(4.0) ? _392 : (isnan(_392) ? 4.0 : min(_392, 4.0));
    float _406 = floor(_393);
    vec4 _409 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _406));
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[17u].x;
    _205[0u] = cbMtdParam._m0[17u].y;
    _206[0u] = cbMtdParam._m0[17u].z;
    _204[1u] = cbMtdParam._m0[15u].x;
    _205[1u] = cbMtdParam._m0[15u].y;
    _206[1u] = cbMtdParam._m0[15u].z;
    _204[2u] = cbMtdParam._m0[14u].x;
    _205[2u] = cbMtdParam._m0[14u].y;
    _206[2u] = cbMtdParam._m0[14u].z;
    _204[3u] = cbMtdParam._m0[13u].x;
    _205[3u] = cbMtdParam._m0[13u].y;
    _206[3u] = cbMtdParam._m0[13u].z;
    _204[4u] = cbMtdParam._m0[12u].x;
    _205[4u] = cbMtdParam._m0[12u].y;
    _206[4u] = cbMtdParam._m0[12u].z;
    _204[5u] = cbMtdParam._m0[18u].x;
    _205[5u] = cbMtdParam._m0[18u].y;
    _206[5u] = cbMtdParam._m0[18u].z;
    float _473 = roundEven(_387);
    float _474 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    uint _476 = uint(int(isnan(5.0) ? _474 : (isnan(_474) ? 5.0 : min(_474, 5.0))));
    vec4 _506 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _517 = cbMtdParam._m0[9u].x * _506.x;
    float _518 = cbMtdParam._m0[9u].y * _506.y;
    float _519 = cbMtdParam._m0[9u].z * _506.z;
    float _526 = ((((((_204[_476] - cbMtdParam._m0[10u].x) * _384) + cbMtdParam._m0[10u].x) * _409.x) - _517) * _369) + _517;
    float _527 = ((((((_205[_476] - cbMtdParam._m0[10u].y) * _384) + cbMtdParam._m0[10u].y) * _409.y) - _518) * _369) + _518;
    float _528 = ((((((_206[_476] - cbMtdParam._m0[10u].z) * _384) + cbMtdParam._m0[10u].z) * _409.z) - _519) * _369) + _519;
    float _534 = exp2(log2(_313.w) * cbMtdParam._m0[23u].w);
    vec4 _547 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _566 = (((cbMtdParam._m0[16u].x * _547.x) - _526) * _534) + _526;
    float _567 = (((cbMtdParam._m0[16u].y * _547.y) - _527) * _534) + _527;
    float _568 = (((cbMtdParam._m0[16u].z * _547.z) - _528) * _534) + _528;
    vec4 _581 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _601 = (((cbMtdParam._m0[19u].x * _581.x) - _566) * _358) + _566;
    float _602 = (((cbMtdParam._m0[19u].y * _581.y) - _567) * _358) + _567;
    float _603 = (((cbMtdParam._m0[19u].z * _581.z) - _568) * _358) + _568;
    vec4 _615 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _640 = (_344.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _615.x) - _601) * _330) + _601);
    float _642 = (_344.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _615.y) - _602) * _330) + _602);
    float _644 = (_344.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _615.z) - _603) * _330) + _603);
    vec4 _656 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _674 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _676 = _674 * (cbMtdParam._m0[24u].z + 1.0);
    float _3932 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _684 = (_677 * ((cbMtdParam._m0[11u].x * _656.x) - _640)) + _640;
    float _685 = (((cbMtdParam._m0[11u].y * _656.y) - _642) * _677) + _642;
    float _686 = (((cbMtdParam._m0[11u].z * _656.z) - _644) * _677) + _644;
    float _690 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _698 = (_690 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _690))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3943 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _706 = ((cbMtdParam._m0[21u].x - _684) * _699) + _684;
    float _707 = ((cbMtdParam._m0[21u].y - _685) * _699) + _685;
    float _708 = ((cbMtdParam._m0[21u].z - _686) * _699) + _686;
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[29u].x;
    _200[0u] = cbMtdParam._m0[29u].y;
    _199[1u] = cbMtdParam._m0[31u].x;
    _200[1u] = cbMtdParam._m0[31u].y;
    _199[2u] = cbMtdParam._m0[30u].z;
    _200[2u] = cbMtdParam._m0[30u].w;
    _199[3u] = cbMtdParam._m0[30u].x;
    _200[3u] = cbMtdParam._m0[30u].y;
    _199[4u] = cbMtdParam._m0[29u].z;
    _200[4u] = cbMtdParam._m0[29u].w;
    float _748 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    uint _750 = uint(int(isnan(4.0) ? _748 : (isnan(_748) ? 4.0 : min(_748, 4.0))));
    float _757 = ((_200[_750] - cbMtdParam._m0[22u].z) * _369) + cbMtdParam._m0[22u].z;
    float _760 = ((cbMtdParam._m0[22u].w - _757) * _534) + _757;
    float _763 = ((cbMtdParam._m0[25u].y - _760) * _358) + _760;
    float _766 = ((cbMtdParam._m0[26u].y - _763) * _330) + _763;
    float _771 = (cbMtdParam._m0[24u].y + 1.0) * _674;
    float _3964 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _774 = _766 - (_766 * _772);
    float _776 = _774 - (_774 * _690);
    vec4 _789 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _406));
    vec4 _806 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _808 = _806.x;
    float _809 = _806.y;
    float _814 = cbMtdParam._m0[22u].x + _806.z;
    float _817 = (((_789.z + _199[_750]) - _814) * _369) + _814;
    vec4 _829 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _840 = (((_829.z - _817) + cbMtdParam._m0[28u].z) * _534) + _817;
    float _846 = ((((_317 * 2.0) * _840) - _840) * cbMtdParam._m0[24u].w) + _840;
    vec4 _858 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _869 = (((cbMtdParam._m0[23u].z + _858.z) - _846) * _358) + _846;
    vec4 _882 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _893 = (((_882.z - _869) + cbMtdParam._m0[26u].z) * _330) + _869;
    vec4 _905 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _917 = ((_905.z - _893) * _772) + _893;
    vec4 _932 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _946 = ((cbMtdParam._m0[27u].z * _690) * ((_932.z * cbMtdParam._m0[27u].y) - _917)) + _917;
    float _961 = ((_789.x - _808) * _369) + _808;
    float _962 = ((_789.y - _809) * _369) + _809;
    float _967 = ((_829.x - _961) * _534) + _961;
    float _968 = ((_829.y - _962) * _534) + _962;
    float _973 = ((_858.x - _967) * _358) + _967;
    float _974 = ((_858.y - _968) * _358) + _968;
    float _983 = ((((_882.x - _973) * _330) + _973) * 2.0) + (-1.0);
    float _984 = ((((_882.y - _974) * _330) + _974) * 2.0) + (-1.0);
    float _985 = dot(vec2(_983, _984), vec2(_983, _984));
    float _3975 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _990 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _1006 = (((cbMtdParam._m0[25u].z * ((_313.x * 2.0) + (-1.0))) + _983) + (((((_905.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _772)) + ((((_932.x * 2.0) + (-1.0)) * _690) * cbMtdParam._m0[27u].x);
    float _1007 = (((cbMtdParam._m0[25u].z * ((_313.y * 2.0) + (-1.0))) + _984) + (((((_905.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _772)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_932.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _1010 = fma(_990, _241 * NORMAL.x, fma(_1007, _248 * TANGENT.x, (_234 * _226) * _1006));
    float _1013 = fma(_990, _241 * NORMAL.y, fma(_1007, _248 * TANGENT.y, (_234 * _227) * _1006));
    float _1016 = fma(_990, _241 * NORMAL.z, fma(_1007, _248 * TANGENT.z, (_234 * _228) * _1006));
    float _1020 = inversesqrt(dot(vec3(_1010, _1013, _1016), vec3(_1010, _1013, _1016)));
    float _1021 = _1020 * _1010;
    float _1022 = _1020 * _1013;
    float _1023 = _1020 * _1016;
    float _3986 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _1024 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4008 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4019 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4030 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _1028 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1044 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1094 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1084);
    float _1095 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1084);
    float _1096 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1084);
    float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
    float _1101 = _1094 * _1100;
    float _1102 = _1095 * _1100;
    float _1103 = _1096 * _1100;
    float _1109 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1110 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1128 = fma(_1023, cbSceneParam._m0[5u].z, fma(_1022, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1021));
    float _1131 = fma(_1023, cbSceneParam._m0[6u].z, fma(_1022, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1021));
    float _1134 = fma(_1023, cbSceneParam._m0[7u].z, fma(_1022, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1021));
    uint _1147 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1149 = (_1147 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1155 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1149].x;
    float _1156 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1149].y;
    float _1157 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1149].z;
    float _4041 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1161 = 1.0 - _1028;
    float _1162 = _1158 * _1161;
    float _1163 = _1159 * _1161;
    float _1164 = _1160 * _1161;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1028;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1028;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1028;
    float _1172 = _1169 + 0.039999999105930328369140625;
    float _1174 = _1170 + 0.039999999105930328369140625;
    float _1175 = _1171 + 0.039999999105930328369140625;
    vec4 _1184 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1109, cbSceneParam._m0[86u].y * _1110));
    float _1187 = _1184.x * TEXCOORD_3.w;
    float _1188 = dot(vec3(_1021, _1022, _1023), vec3(_1101, _1102, _1103));
    float _1191 = _1188 * 2.0;
    float _1195 = (_1191 * _1021) - _1101;
    float _1196 = (_1191 * _1022) - _1102;
    float _1197 = (_1191 * _1023) - _1103;
    float _1201 = abs(dot(vec3(_1101, _1102, _1103), vec3(_1021, _1022, _1023)));
    float _4074 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1203 = sqrt(_1024);
    float _1214 = exp2((_1203 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1203 * 3.0));
    float _1220 = (1.0 - _1214) * ((_1203 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1221 = _1214 * _1203;
    float _1249 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1558;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1283 = fma(_1257, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1249));
        float _1287 = fma(_1257, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1249));
        float _1291 = fma(_1257, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1249));
        float _1316 = _1249 + _1021;
        float _1317 = _1253 + _1022;
        float _1318 = _1257 + _1023;
        float _1328 = fma(_1318, cbModelParam._m0[26u].z, fma(_1317, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1316)) - _1283;
        float _1329 = fma(_1318, cbModelParam._m0[27u].z, fma(_1317, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1316)) - _1287;
        float _1330 = fma(_1318, cbModelParam._m0[28u].z, fma(_1317, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1316)) - _1291;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1283 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1287 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[34u].z) + ((((((_1291 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1386 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1352.x + (-0.5));
        float _1388 = _1386 * (_1352.y + (-0.5));
        float _1389 = _1386 * (_1352.z + (-0.5));
        float _1396 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1359.x + (-0.5));
        float _1398 = _1396 * (_1359.y + (-0.5));
        float _1399 = _1396 * (_1359.z + (-0.5));
        float _1406 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1366.x + (-0.5));
        float _1408 = _1406 * (_1366.y + (-0.5));
        float _1409 = _1406 * (_1366.z + (-0.5));
        float _1416 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1373.x + (-0.5));
        float _1418 = _1416 * (_1373.y + (-0.5));
        float _1419 = _1416 * (_1373.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1440 = (dot(vec3(_1021, _1022, _1023), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1450 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4122 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1452 + 1.0))) + _1457) * _1420;
        float _1467 = _1388 * 0.5;
        float _1468 = _1398 * 0.5;
        float _1469 = _1408 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_1021, _1022, _1023), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4155 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1494 + 1.0))) + _1499) * _1421;
        float _1509 = _1389 * 0.5;
        float _1510 = _1399 * 0.5;
        float _1511 = _1409 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_1021, _1022, _1023), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4188 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1536 + 1.0))) + _1541) * _1422;
        _1558 = _1389;
        _1560 = _1388;
        _1561 = _1387;
        _1562 = _1399;
        _1563 = _1398;
        _1564 = _1397;
        _1565 = _1409;
        _1566 = _1408;
        _1567 = _1407;
        _1568 = _1422;
        _1569 = _1421;
        _1570 = _1420;
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1559;
        _1560 = _1559;
        _1561 = _1559;
        _1562 = _1559;
        _1563 = _1559;
        _1564 = _1559;
        _1565 = _1559;
        _1566 = _1559;
        _1567 = _1559;
        _1568 = _1559;
        _1569 = _1559;
        _1570 = _1559;
        _1571 = 0.0;
        _1572 = 0.0;
        _1573 = 0.0;
    }
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1596 = fma(_1257, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249));
        float _1600 = fma(_1257, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249));
        float _1604 = fma(_1257, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249));
        float _1627 = _1249 + _1021;
        float _1628 = _1253 + _1022;
        float _1629 = _1257 + _1023;
        float _1639 = fma(_1629, cbModelParam._m0[30u].z, fma(_1628, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1627)) - _1596;
        float _1640 = fma(_1629, cbModelParam._m0[31u].z, fma(_1628, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1627)) - _1600;
        float _1641 = fma(_1629, cbModelParam._m0[32u].z, fma(_1628, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1627)) - _1604;
        float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
        float _1658 = ((_1645 * _1639) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1596 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1645 * _1640) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1600 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1645 * _1641) / cbModelParam._m0[35u].z) + ((((((_1604 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1676 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1683 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        float _1695 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1662.x + (-0.5));
        float _1697 = _1695 * (_1662.y + (-0.5));
        float _1698 = _1695 * (_1662.z + (-0.5));
        float _1705 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1669.x + (-0.5));
        float _1707 = _1705 * (_1669.y + (-0.5));
        float _1708 = _1705 * (_1669.z + (-0.5));
        float _1715 = exp2((_1676.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1676.x + (-0.5));
        float _1717 = _1715 * (_1676.y + (-0.5));
        float _1718 = _1715 * (_1676.z + (-0.5));
        float _1725 = exp2((_1683.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1683.x + (-0.5));
        float _1727 = _1725 * (_1683.y + (-0.5));
        float _1728 = _1725 * (_1683.z + (-0.5));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = _1696 * 0.5;
        float _1733 = _1706 * 0.5;
        float _1734 = _1716 * 0.5;
        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
        float _1740 = (_1735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1735);
        float _1748 = (dot(vec3(_1021, _1022, _1023), vec3(_1740 * _1732, _1740 * _1733, _1740 * _1734)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1759 = _1758 * 2.0;
        float _1763 = (1.0 - _1758) / (_1758 + 1.0);
        float _4251 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1773 = ((((1.0 - _1764) * (_1759 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1759 + 1.0))) + _1764) * _1729;
        float _1774 = _1697 * 0.5;
        float _1775 = _1707 * 0.5;
        float _1776 = _1717 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_1021, _1022, _1023), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4284 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1801 + 1.0))) + _1806) * _1730;
        float _1816 = _1698 * 0.5;
        float _1817 = _1708 * 0.5;
        float _1818 = _1718 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_1021, _1022, _1023), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4317 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1843 + 1.0))) + _1848) * _1731;
        _1865 = _1698;
        _1866 = _1697;
        _1867 = _1696;
        _1868 = _1708;
        _1869 = _1707;
        _1870 = _1706;
        _1871 = _1718;
        _1872 = _1717;
        _1873 = _1716;
        _1874 = _1731;
        _1875 = _1730;
        _1876 = _1729;
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
    }
    else
    {
        _1865 = _1559;
        _1866 = _1559;
        _1867 = _1559;
        _1868 = _1559;
        _1869 = _1559;
        _1870 = _1559;
        _1871 = _1559;
        _1872 = _1559;
        _1873 = _1559;
        _1874 = _1559;
        _1875 = _1559;
        _1876 = _1559;
        _1877 = 0.0;
        _1878 = 0.0;
        _1879 = 0.0;
    }
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1571)) + _1571;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1572)) + _1572;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1573)) + _1573;
    float _1912 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1889));
    float _1933 = _1195 * 0.5;
    float _1934 = _1196 * 0.5;
    float _1935 = _1197 * 0.5;
    float _1936 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1939 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1942 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1976;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1949 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1558, _1562, _1565, _1568));
        float _1953 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1560, _1563, _1566, _1569));
        float _1957 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1561, _1564, _1567, _1570));
        float _1964 = dot(vec4(cbModelParam._m0[39u]), vec4(_1933, _1934, _1935, 1.0));
        _1976 = dot(vec3(isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1976 = 1.0;
    }
    float _1987;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1978 = dot(vec4(cbModelParam._m0[40u]), vec4(_1933, _1934, _1935, 1.0));
        _1987 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1978) ? 0.0 : (isnan(0.0) ? _1978 : max(0.0, _1978))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1987 = 1.0;
    }
    float _1991 = (_1987 * cbModelParam._m0[1u].x) + (_1976 * (1.0 - cbModelParam._m0[1u].x));
    float _2001 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1024);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2001 : min(cbModelParam._m0[25u].z, _2001));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2049 = fma(_1257, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1249)) + cbModelParam._m0[13u].w;
        float _2053 = fma(_1257, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1249)) + cbModelParam._m0[14u].w;
        float _2057 = fma(_1257, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1249)) + cbModelParam._m0[15u].w;
        float _2060 = fma(_1197, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195));
        float _2063 = fma(_1197, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195));
        float _2066 = fma(_1197, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195));
        float _2094;
        if (_2060 > 0.0)
        {
            _2094 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2094 = frontier_phi_14_12_ladder;
        }
        float _2296;
        if (_2063 > 0.0)
        {
            _2296 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2296 = frontier_phi_23_19_ladder;
        }
        float _2550;
        if (_2066 > 0.0)
        {
            _2550 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2550 = frontier_phi_35_30_ladder;
        }
        float _2552 = isnan(_2296) ? _2094 : (isnan(_2094) ? _2296 : min(_2094, _2296));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _2060) + _2049;
        float _2558 = (_2553 * _2063) + _2053;
        float _2559 = (_2553 * _2066) + _2057;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2560;
        float _2564 = _2560 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 > _2564) || ((_2558 < _2562) || ((_2557 < _2562) || (_2557 > _2564))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2559, cbModelParam._m0[9u].z, fma(_2558, cbModelParam._m0[9u].y, _2557 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2559, cbModelParam._m0[10u].z, fma(_2558, cbModelParam._m0[10u].y, _2557 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2559, cbModelParam._m0[11u].z, fma(_2558, cbModelParam._m0[11u].y, _2557 * cbModelParam._m0[11u].x))), _2002);
            frontier_phi_13_35_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2082 = frontier_phi_13_35_ladder_2;
        _2084 = frontier_phi_13_35_ladder_1;
        _2086 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1195, _1196, _1197), _2002);
        _2082 = _2070.x * cbModelParam._m0[1u].y;
        _2084 = _2070.y * cbModelParam._m0[1u].y;
        _2086 = _2070.z * cbModelParam._m0[1u].y;
    }
    float _2090 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1024);
    float _2091 = isnan(_2090) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2090 : min(cbModelParam._m0[25u].w, _2090));
    float _2180;
    float _2182;
    float _2184;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2144 = fma(_1257, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1249)) + cbModelParam._m0[21u].w;
        float _2148 = fma(_1257, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1249)) + cbModelParam._m0[22u].w;
        float _2152 = fma(_1257, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1249)) + cbModelParam._m0[23u].w;
        float _2155 = fma(_1197, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195));
        float _2158 = fma(_1197, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195));
        float _2161 = fma(_1197, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195));
        float _2301;
        if (_2155 > 0.0)
        {
            _2301 = abs((1.0 - _2144) / _2155);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2144 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2301 = frontier_phi_25_21_ladder;
        }
        float _2577;
        if (_2158 > 0.0)
        {
            _2577 = abs((1.0 - _2148) / _2158);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2148 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2577 = frontier_phi_37_32_ladder;
        }
        float _2790;
        if (_2161 > 0.0)
        {
            _2790 = abs((1.0 - _2152) / _2161);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2152 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2790 = frontier_phi_46_43_ladder;
        }
        float _2792 = isnan(_2577) ? _2301 : (isnan(_2301) ? _2577 : min(_2301, _2577));
        float _2793 = isnan(_2790) ? _2792 : (isnan(_2792) ? _2790 : min(_2792, _2790));
        float _2797 = (_2793 * _2155) + _2144;
        float _2798 = (_2793 * _2158) + _2148;
        float _2799 = (_2793 * _2161) + _2152;
        float _2800 = _2793 * 9.9999997473787516355514526367188e-05;
        float _2801 = (-1.0) - _2800;
        float _2803 = _2800 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2799 > _2803) || ((_2799 < _2801) || ((_2798 > _2803) || ((_2798 < _2801) || ((_2797 < _2801) || (_2797 > _2803))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2799, cbModelParam._m0[17u].z, fma(_2798, cbModelParam._m0[17u].y, _2797 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2799, cbModelParam._m0[18u].z, fma(_2798, cbModelParam._m0[18u].y, _2797 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2799, cbModelParam._m0[19u].z, fma(_2798, cbModelParam._m0[19u].y, _2797 * cbModelParam._m0[19u].x))), _2091);
            frontier_phi_22_46_ladder = _2998.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2998.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2998.x * cbModelParam._m0[1u].z;
        }
        _2180 = frontier_phi_22_46_ladder_2;
        _2182 = frontier_phi_22_46_ladder_1;
        _2184 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2164 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1195, _1196, _1197), _2091);
        _2180 = _2164.x * cbModelParam._m0[1u].z;
        _2182 = _2164.y * cbModelParam._m0[1u].z;
        _2184 = _2164.z * cbModelParam._m0[1u].z;
    }
    float _2197 = (((_1220 * _1172) + _1221) * _1187) * ((cbModelParam._m0[1u].w * (_2180 - _2082)) + _2082);
    float _2199 = (((_1220 * _1174) + _1221) * _1187) * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2201 = (((_1220 * _1175) + _1221) * _1187) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2204 = fma(_2201, cbSceneParam._m0[89u].z, fma(_2199, cbSceneParam._m0[89u].y, _2197 * cbSceneParam._m0[89u].x));
    float _2207 = fma(_2201, cbSceneParam._m0[90u].z, fma(_2199, cbSceneParam._m0[90u].y, _2197 * cbSceneParam._m0[90u].x));
    float _2210 = fma(_2201, cbSceneParam._m0[91u].z, fma(_2199, cbSceneParam._m0[91u].y, _2197 * cbSceneParam._m0[91u].x));
    uvec4 _2220 = floatBitsToUint(cbInstanceData._m0[_1147 + 5u]);
    uint _2222 = _2220.x * 14u;
    uint _2223 = _2222 + 13u;
    float _2230 = _1187 + (-1.0);
    float _2235 = (cbLight._m0[_2223].x * _2230) + 1.0;
    float _2236 = (cbLight._m0[_2223].y * _2230) + 1.0;
    float _2237 = (cbLight._m0[_2223].z * _2230) + 1.0;
    float _2238 = (cbLight._m0[_2223].w * _2230) + 1.0;
    uint _2239 = _2222 + 5u;
    float _2245 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2249 = _2222 + 4u;
    float _2255 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2259 = _2222 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_1021, _1022, _1023));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_1021, _1022, _1023));
    float _4453 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4464 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2239].x * _2245) * _2280) + ((cbLight._m0[_2249].x * _2255) * _2278);
    float _2288 = ((_2245 * cbLight._m0[_2239].y) * _2280) + ((_2255 * cbLight._m0[_2249].y) * _2278);
    float _2289 = ((_2245 * cbLight._m0[_2239].z) * _2280) + ((_2255 * cbLight._m0[_2249].z) * _2278);
    uvec4 _2293 = floatBitsToUint(cbLight._m0[_2222 + 12u]);
    bool _2295 = _2293.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2295)
    {
        _2306 = _2287;
        _2308 = _2288;
        _2310 = _2289;
    }
    else
    {
        uint _2314 = _2222 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2222 + 2u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4475 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2333 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2287;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2288;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2289;
    }
    bool _2313 = _2293.y == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2313)
    {
        _2351 = _2306;
        _2353 = _2308;
        _2355 = _2310;
    }
    else
    {
        uint _2521 = _2222 + 7u;
        float _2537 = (dot(vec3(cbLight._m0[_2222 + 3u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4491 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2540 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2351 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2306;
        _2353 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2308;
        _2355 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2310;
    }
    uint _2358 = _2222 + 8u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _1024) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2222].x + _1101;
    float _2374 = cbLight._m0[_2222].y + _1102;
    float _2375 = cbLight._m0[_2222].z + _1103;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2222].xyz));
    float _4507 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _2387 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2388 = dot(vec3(_1021, _1022, _1023), vec3(_2380, _2381, _2382));
    float _4529 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2380, _2381, _2382));
    float _4540 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2372 * _2372;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2409 = 0.959999978542327880859375 - _1169;
    float _2411 = 0.959999978542327880859375 - _1170;
    float _2412 = 0.959999978542327880859375 - _1171;
    float _2419 = 1.0 - _2372;
    float _2430 = (0.5 / (((_2387 * ((_2386 * _2419) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2419) + _2372) * _2386))) * _2386;
    float _4551 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    uint _2443 = _2222 + 9u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _1024) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2259].x + _1101;
    float _2457 = cbLight._m0[_2259].y + _1102;
    float _2458 = cbLight._m0[_2259].z + _1103;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2259].xyz));
    float _4562 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2470 = dot(vec3(_1021, _1022, _1023), vec3(_2463, _2464, _2465));
    float _4573 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2463, _2464, _2465));
    float _4584 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2455 * _2455;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2496 = 1.0 - _2455;
    float _2506 = (0.5 / (((_2387 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2496) + _2455) * _2469))) * _2469;
    float _4595 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    float _2518 = (((((_2489 * _2409) + _1172) * cbLight._m0[_2443].x) * _2508) * _2245) + (((((_2408 * _2409) + _1172) * cbLight._m0[_2358].x) * _2432) * _2255);
    float _2519 = (((((_2489 * _2411) + _1174) * cbLight._m0[_2443].y) * _2508) * _2245) + (((((_2408 * _2411) + _1174) * cbLight._m0[_2358].y) * _2432) * _2255);
    float _2520 = (((((_2489 * _2412) + _1175) * cbLight._m0[_2443].z) * _2508) * _2245) + (((((_2408 * _2412) + _1175) * cbLight._m0[_2358].z) * _2432) * _2255);
    float _2582;
    float _2584;
    float _2586;
    if (_2295)
    {
        _2582 = _2518;
        _2584 = _2519;
        _2586 = _2520;
    }
    else
    {
        uint _2588 = _2222 + 2u;
        uint _2592 = _2222 + 10u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _1024) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _1101;
        float _2609 = cbLight._m0[_2588].y + _1102;
        float _2610 = cbLight._m0[_2588].z + _1103;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2588].xyz));
        float _4606 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2622 = dot(vec3(_1021, _1022, _1023), vec3(_2615, _2616, _2617));
        float _4617 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4628 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2648 = 1.0 - _2607;
        float _2658 = (0.5 / (((_2387 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2648) + _2607) * _2621))) * _2621;
        float _4639 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2582 = (((((_2641 * _2409) + _1172) * cbLight._m0[_2592].x) * _2660) * _2661) + _2518;
        _2584 = (((((_2641 * _2411) + _1174) * cbLight._m0[_2592].y) * _2660) * _2661) + _2519;
        _2586 = (((((_2641 * _2412) + _1175) * cbLight._m0[_2592].z) * _2660) * _2661) + _2520;
    }
    float _2696;
    float _2698;
    float _2700;
    if (_2313)
    {
        _2696 = _2582;
        _2698 = _2584;
        _2700 = _2586;
    }
    else
    {
        uint _2707 = _2222 + 3u;
        uint _2711 = _2222 + 11u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _1024) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _1101;
        float _2728 = cbLight._m0[_2707].y + _1102;
        float _2729 = cbLight._m0[_2707].z + _1103;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2707].xyz));
        float _4655 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2741 = dot(vec3(_1021, _1022, _1023), vec3(_2734, _2735, _2736));
        float _4666 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4677 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2767 = 1.0 - _2726;
        float _2777 = (0.5 / (((_2387 * ((_2740 * _2767) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2767) + _2726) * _2740))) * _2740;
        float _4688 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2696 = (((((_2760 * _2409) + _1172) * cbLight._m0[_2711].x) * _2779) * _2780) + _2582;
        _2698 = (((((_2760 * _2411) + _1174) * cbLight._m0[_2711].y) * _2779) * _2780) + _2584;
        _2700 = (((((_2760 * _2412) + _1175) * cbLight._m0[_2711].z) * _2779) * _2780) + _2586;
    }
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_2220.y == 0u)
    {
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2855;
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2855;
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2855;
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.x;
        uint _2882 = uint((float(_2870.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1110) / _2871))) + floor(float(uint(cbSceneParam._m0[85u].x * _1109) / _2871)));
        float _2892 = (log2(_2858 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2893 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        uint _2896 = uint(isnan(14.0) ? _2893 : (isnan(_2893) ? 14.0 : min(_2893, 14.0)));
        uvec4 _2901 = texelFetch(g_lightClusterGridBuffer, int(((_2896 << 2u) + (_2882 << 6u)) >> 2u));
        uint _2902 = _2901.x;
        uint _2903 = _2870.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2903 >> 4u) & 15u)) + 4294967295u) & _2902) == 0u) || ((_2903 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            uint _3154 = 0u;
            uint _3163;
            bool _3164;
            for (;;)
            {
                _3163 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                _3164 = _3163 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3164)
                {
                    frontier_phi_61_pred = _3148;
                    frontier_phi_61_pred_1 = _3153;
                    frontier_phi_61_pred_2 = _3152;
                    frontier_phi_61_pred_3 = _3151;
                    frontier_phi_61_pred_4 = _3150;
                    frontier_phi_61_pred_5 = _3149;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3163;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3154 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2856;
                        float _3339 = _3298.y - _2857;
                        float _3340 = _3298.z - _2858;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1128, _1131, _1134), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4714 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2856;
                        float _3374 = (-0.0) - _2857;
                        float _3375 = (-0.0) - _2858;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1203;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1128, _1131, _1134), vec3(_3380, _3381, _3382));
                        float _4730 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3415 = dot(vec3(_1128, _1131, _1134), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4741 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4752 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4763 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3207 = (_3369 * _3317.x) + _3275;
                        _3208 = (_3369 * _3317.y) + _3276;
                        _3209 = (_3369 * _3317.z) + _3277;
                        _3204 = (_3450 * _3334.x) + _3272;
                        _3205 = (_3450 * _3334.y) + _3273;
                        _3206 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_61_pred = _3204;
                    frontier_phi_61_pred_1 = _3209;
                    frontier_phi_61_pred_2 = _3208;
                    frontier_phi_61_pred_3 = _3207;
                    frontier_phi_61_pred_4 = _3206;
                    frontier_phi_61_pred_5 = _3205;
                }
                _3004 = frontier_phi_61_pred;
                _3014 = frontier_phi_61_pred_1;
                _3012 = frontier_phi_61_pred_2;
                _3010 = frontier_phi_61_pred_3;
                _3008 = frontier_phi_61_pred_4;
                _3006 = frontier_phi_61_pred_5;
                uint _3155 = _3154 + 1u;
                if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3148 = _3004;
                    _3149 = _3006;
                    _3150 = _3008;
                    _3151 = _3010;
                    _3152 = _3012;
                    _3153 = _3014;
                    _3154 = _3155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((4294967295u << _3020) & _2902) == 0u)
        {
            _3116 = _3003;
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
            _3126 = _3013;
        }
        else
        {
            float _3141 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
            float _3142 = _3141 * _2856;
            float _3143 = _3141 * _2857;
            float _3144 = _3141 * _2858;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3255 = _3003;
                float _3256 = _3005;
                float _3257 = _3007;
                float _3258 = _3009;
                float _3259 = _3011;
                float _3260 = _3013;
                uint _3261 = _3020;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3271)
                    {
                        frontier_phi_67_pred = _3258;
                        frontier_phi_67_pred_1 = _3259;
                        frontier_phi_67_pred_2 = _3260;
                        frontier_phi_67_pred_3 = _3257;
                        frontier_phi_67_pred_4 = _3256;
                        frontier_phi_67_pred_5 = _3255;
                    }
                    else
                    {
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        float _3473 = _3260;
                        uint _3474 = _3270;
                        uint _3475;
                        vec4 _3500;
                        float _3501;
                        vec4 _3516;
                        vec3 _3528;
                        vec4 _3543;
                        vec4 _3558;
                        float _3604;
                        bool _3605;
                        for (;;)
                        {
                            uint _3485 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3474));
                            _3475 = (_3474 + 4294967295u) & _3474;
                            uint _3487 = _3485 * 40u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3501 = _3500.w;
                            uint _3503 = (_3485 * 40u) + 4u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3485 * 40u) + 8u;
                            _3528 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x));
                            uint _3530 = (_3485 * 40u) + 16u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3485 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3485 * 40u) + 24u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3579 = (_3485 * 40u) + 28u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3604 = fma(_2858, _3592.z, fma(_2857, _3592.y, _3592.x * _2856)) + _3592.w;
                            _3605 = !((fma(_2858, _3573.z, fma(_2857, _3573.y, _3573.x * _2856)) + _3573.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3605)
                            {
                                float _3632 = _3500.x - _2856;
                                float _3633 = _3500.y - _2857;
                                float _3634 = _3500.z - _2858;
                                float _3635 = dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634));
                                float _3638 = inversesqrt(_3635);
                                float _3639 = _3638 * _3632;
                                float _3640 = _3638 * _3633;
                                float _3641 = _3638 * _3634;
                                float _3645 = 1.0 - (_3635 / (_3501 * _3501));
                                float _4774 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3650 = sqrt(_3635) * _3516.w;
                                float _3652 = 1.39999997615814208984375 / (_3650 + 1.39999997615814208984375);
                                float _3653 = _3652 * _3652;
                                float _3656 = ((1.0 - _3653) * dot(vec3(_3639, _3640, _3641), vec3(_1128, _1131, _1134))) + _3653;
                                float _3659 = _3650 * _3650;
                                float _3663 = (fma(_2858, _3543.z, fma(_2857, _3543.y, _3543.x * _2856)) + _3543.w) / _3604;
                                float _3664 = (fma(_2858, _3558.z, fma(_2857, _3558.y, _3558.x * _2856)) + _3558.w) / _3604;
                                float _3668 = 1.0 - dot(vec2(_3663, _3664), vec2(_3663, _3664));
                                float _4790 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3670 = _3669 * (((isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0))) * _3646) / ((_3659 * 0.699999988079071044921875) + 1.0));
                                float _3682 = exp2(log2(1.0 / ((_3659 * 3.5) + 5.0)) * 0.25);
                                float _3683 = 1.0 - _1203;
                                float _3690 = sqrt(1.0 - ((1.0 - (_3683 * _3683)) * (1.0 - (_3682 * _3682))));
                                float _3691 = _3690 * _3690;
                                float _3692 = _3691 * _3691;
                                float _3693 = _3639 - _3142;
                                float _3694 = _3640 - _3143;
                                float _3695 = _3641 - _3144;
                                float _3699 = inversesqrt(dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695)));
                                float _3703 = dot(vec3(_1128, _1131, _1134), vec3((-0.0) - _3142, (-0.0) - _3143, (-0.0) - _3144));
                                float _4801 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3707 = dot(vec3(_1128, _1131, _1134), vec3(_3699 * _3693, _3699 * _3694, _3699 * _3695));
                                float _4812 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3714 = ((_3710 * _3710) * (_3692 + (-1.0))) + 1.0;
                                float _3715 = _3652 * _3691;
                                float _3716 = _3715 * _3715;
                                float _3722 = ((1.0 - _3716) * dot(vec3(_1128, _1131, _1134), vec3(_3639, _3640, _3641))) + _3716;
                                float _4823 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3724 = 1.0 - _3691;
                                float _3734 = (0.5 / (((_3723 * ((_3706 * _3724) + _3691)) + 9.9999999392252902907785028219223e-09) + (((_3723 * _3724) + _3691) * _3706))) * _3723;
                                float _4834 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3744 = (_3669 * _3646) * (((_3692 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3714 * _3714) * ((_3659 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3744 * _3528.x;
                                frontier_phi_73_pred_1 = _3744 * _3528.y;
                                frontier_phi_73_pred_2 = _3670 * _3516.z;
                                frontier_phi_73_pred_3 = _3670 * _3516.y;
                                frontier_phi_73_pred_4 = _3670 * _3516.x;
                                frontier_phi_73_pred_5 = _3744 * _3528.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3748 = frontier_phi_73_pred;
                            _3749 = frontier_phi_73_pred_1;
                            _3753 = frontier_phi_73_pred_2;
                            _3752 = frontier_phi_73_pred_3;
                            _3751 = frontier_phi_73_pred_4;
                            _3750 = frontier_phi_73_pred_5;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            if (_3475 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3475;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3458;
                        frontier_phi_67_pred_1 = _3459;
                        frontier_phi_67_pred_2 = _3460;
                        frontier_phi_67_pred_3 = _3457;
                        frontier_phi_67_pred_4 = _3456;
                        frontier_phi_67_pred_5 = _3455;
                    }
                    _3123 = frontier_phi_67_pred;
                    _3125 = frontier_phi_67_pred_1;
                    _3127 = frontier_phi_67_pred_2;
                    _3121 = frontier_phi_67_pred_3;
                    _3119 = frontier_phi_67_pred_4;
                    _3117 = frontier_phi_67_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3117;
                        _3256 = _3119;
                        _3257 = _3121;
                        _3258 = _3123;
                        _3259 = _3125;
                        _3260 = _3127;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3125;
                frontier_phi_55_56_ladder_1 = _3127;
                frontier_phi_55_56_ladder_2 = _3123;
                frontier_phi_55_56_ladder_3 = _3121;
                frontier_phi_55_56_ladder_4 = _3119;
                frontier_phi_55_56_ladder_5 = _3117;
            }
            else
            {
                frontier_phi_55_56_ladder = _3011;
                frontier_phi_55_56_ladder_1 = _3013;
                frontier_phi_55_56_ladder_2 = _3009;
                frontier_phi_55_56_ladder_3 = _3007;
                frontier_phi_55_56_ladder_4 = _3005;
                frontier_phi_55_56_ladder_5 = _3003;
            }
            _3116 = frontier_phi_55_56_ladder_5;
            _3118 = frontier_phi_55_56_ladder_4;
            _3120 = frontier_phi_55_56_ladder_3;
            _3122 = frontier_phi_55_56_ladder_2;
            _3124 = frontier_phi_55_56_ladder;
            _3126 = frontier_phi_55_56_ladder_1;
        }
        float _3131 = isnan(1.0) ? _1187 : (isnan(_1187) ? 1.0 : min(_1187, 1.0));
        _2915 = (_3131 * _3122) + _2351;
        _2917 = (_3131 * _3124) + _2353;
        _2919 = (_3131 * _3126) + _2355;
        _2921 = ((_3116 * _1172) * _3131) + _2696;
        _2923 = ((_3118 * _1174) * _3131) + _2698;
        _2925 = ((_3120 * _1175) * _3131) + _2700;
    }
    else
    {
        _2915 = _2351;
        _2917 = _2353;
        _2919 = _2355;
        _2921 = _2696;
        _2923 = _2698;
        _2925 = _2700;
    }
    float _4850 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _4861 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _4872 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    uint _2945 = _1147 + 6u;
    float _2953 = _1109 / cbSceneParam._m0[86u].x;
    float _2954 = _1110 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _1044 : (isnan(_1044) ? cbSceneParam._m0[77u].w : min(_1044, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    if (_1044 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_1044) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1044 : min(cbSceneParam._m0[80u].w, _1044));
        float _3029 = _3028 / _1044;
        float _3040 = _3029 * _1094;
        float _3041 = _1095 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3044 = _3029 * _1096;
        float _3046 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3047 = _3046 + cbSceneParam._m0[79u].w;
        float _3048 = cbSceneParam._m0[79u].w - _3041;
        float _3054 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3044 * _3044));
        float _3057 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3054;
        float _3062 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3064 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3042 - _3046) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3047 > 0.0) ? exp2(_3062 * _3047) : (2.0 - exp2(_3064 * _3047))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3057;
        }
        else
        {
            float _3177 = 1.0 / cbSceneParam._m0[80u].x;
            float _3178 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : max(_3047, _3048));
            float _3179 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : min(_3047, _3048));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            _3217 = ((abs(_3054 / _3042) * cbSceneParam._m0[80u].y) * ((((_3188 - _3189) * 2.0) - ((exp2(_3062 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0)))) - exp2(_3062 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))))) * _3177)) - ((exp2(_3064 * _3188) - exp2(_3064 * _3189)) * _3177))) + (_3057 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2973);
        _3066 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3068 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3070 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3072 = _3228 * _2973;
    }
    else
    {
        _3066 = _2970;
        _3068 = _2971;
        _3070 = _2972;
        _3072 = _2973;
    }
    float _3084 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3085 = _3084 == 3.0;
    float _3086 = log2(_3072);
    float _3093 = exp2(_3086 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2915 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1187))) + ((_2921 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1991)) * cbPerFrame._m0[3u].x));
    float _3094 = exp2(_3086 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2917 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1187))) + ((_2923 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1991)) * cbPerFrame._m0[3u].x));
    float _3095 = exp2(_3086 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2919 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1187))) + ((_2925 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1991)) * cbPerFrame._m0[3u].x));
    float _3104 = (_3084 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3104 * (_3085 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.y = _3104 * (_3085 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.z = _3104 * (_3085 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.w = cbInstanceData._m0[_2945].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2945].w;
}


