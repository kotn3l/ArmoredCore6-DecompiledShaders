#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1449;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _299 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _314 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _322 = log2(0.0);
    float _324 = exp2(_322 * cbMtdParam._m0[23u].x);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    float _335 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    vec4 _349 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _352 = _349.y;
    float _355 = (_349.x + (-0.02500000037252902984619140625)) * 8.0;
    float _359 = roundEven(5.0 - _355);
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(4.0) ? _360 : (isnan(_360) ? 4.0 : min(_360, 4.0));
    float _374 = floor(_361);
    vec4 _377 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _374));
    float _194[6];
    float _195[6];
    float _196[6];
    _194[0u] = cbMtdParam._m0[17u].x;
    _195[0u] = cbMtdParam._m0[17u].y;
    _196[0u] = cbMtdParam._m0[17u].z;
    _194[1u] = cbMtdParam._m0[15u].x;
    _195[1u] = cbMtdParam._m0[15u].y;
    _196[1u] = cbMtdParam._m0[15u].z;
    _194[2u] = cbMtdParam._m0[14u].x;
    _195[2u] = cbMtdParam._m0[14u].y;
    _196[2u] = cbMtdParam._m0[14u].z;
    _194[3u] = cbMtdParam._m0[13u].x;
    _195[3u] = cbMtdParam._m0[13u].y;
    _196[3u] = cbMtdParam._m0[13u].z;
    _194[4u] = cbMtdParam._m0[12u].x;
    _195[4u] = cbMtdParam._m0[12u].y;
    _196[4u] = cbMtdParam._m0[12u].z;
    _194[5u] = cbMtdParam._m0[18u].x;
    _195[5u] = cbMtdParam._m0[18u].y;
    _196[5u] = cbMtdParam._m0[18u].z;
    float _441 = roundEven(_355);
    float _442 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    uint _444 = uint(int(isnan(5.0) ? _442 : (isnan(_442) ? 5.0 : min(_442, 5.0))));
    vec4 _474 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _485 = cbMtdParam._m0[9u].x * _474.x;
    float _486 = cbMtdParam._m0[9u].y * _474.y;
    float _487 = cbMtdParam._m0[9u].z * _474.z;
    float _494 = ((((((_194[_444] - cbMtdParam._m0[10u].x) * _352) + cbMtdParam._m0[10u].x) * _377.x) - _485) * _337) + _485;
    float _495 = ((((((_195[_444] - cbMtdParam._m0[10u].y) * _352) + cbMtdParam._m0[10u].y) * _377.y) - _486) * _337) + _486;
    float _496 = ((((((_196[_444] - cbMtdParam._m0[10u].z) * _352) + cbMtdParam._m0[10u].z) * _377.z) - _487) * _337) + _487;
    float _502 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _515 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _534 = (((cbMtdParam._m0[16u].x * _515.x) - _494) * _502) + _494;
    float _535 = (((cbMtdParam._m0[16u].y * _515.y) - _495) * _502) + _495;
    float _536 = (((cbMtdParam._m0[16u].z * _515.z) - _496) * _502) + _496;
    vec4 _549 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _569 = (((cbMtdParam._m0[19u].x * _549.x) - _534) * _326) + _534;
    float _570 = (((cbMtdParam._m0[19u].y * _549.y) - _535) * _326) + _535;
    float _571 = (((cbMtdParam._m0[19u].z * _549.z) - _536) * _326) + _536;
    vec4 _583 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _608 = (_314.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _583.x) - _569) * _301) + _569);
    float _610 = (_314.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _583.y) - _570) * _301) + _570);
    float _612 = (_314.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _583.z) - _571) * _301) + _571);
    float _616 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _625 = (_616 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _616))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3822 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _633 = ((cbMtdParam._m0[21u].x - _608) * _626) + _608;
    float _634 = ((cbMtdParam._m0[21u].y - _610) * _626) + _610;
    float _635 = ((cbMtdParam._m0[21u].z - _612) * _626) + _612;
    float _189[5];
    float _190[5];
    _189[0u] = cbMtdParam._m0[29u].x;
    _190[0u] = cbMtdParam._m0[29u].y;
    _189[1u] = cbMtdParam._m0[31u].x;
    _190[1u] = cbMtdParam._m0[31u].y;
    _189[2u] = cbMtdParam._m0[30u].z;
    _190[2u] = cbMtdParam._m0[30u].w;
    _189[3u] = cbMtdParam._m0[30u].x;
    _190[3u] = cbMtdParam._m0[30u].y;
    _189[4u] = cbMtdParam._m0[29u].z;
    _190[4u] = cbMtdParam._m0[29u].w;
    float _675 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _677 = uint(int(isnan(4.0) ? _675 : (isnan(_675) ? 4.0 : min(_675, 4.0))));
    float _684 = ((_190[_677] - cbMtdParam._m0[22u].z) * _337) + cbMtdParam._m0[22u].z;
    float _687 = ((cbMtdParam._m0[22u].w - _684) * _502) + _684;
    float _690 = ((cbMtdParam._m0[25u].y - _687) * _326) + _687;
    float _693 = ((cbMtdParam._m0[26u].y - _690) * _301) + _690;
    float _695 = _693 - (_693 * _616);
    vec4 _711 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _374));
    vec4 _728 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _730 = _728.x;
    float _731 = _728.y;
    float _736 = cbMtdParam._m0[22u].x + _728.z;
    float _739 = (((_711.z + _189[_677]) - _736) * _337) + _736;
    vec4 _751 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _762 = (((_751.z - _739) + cbMtdParam._m0[28u].z) * _502) + _739;
    float _768 = ((((_288 * 2.0) * _762) - _762) * cbMtdParam._m0[24u].w) + _762;
    vec4 _780 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _791 = (((cbMtdParam._m0[23u].z + _780.z) - _768) * _326) + _768;
    vec4 _804 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _815 = (((_804.z - _791) + cbMtdParam._m0[26u].z) * _301) + _791;
    vec4 _830 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _845 = ((cbMtdParam._m0[27u].z * _616) * ((_830.z * cbMtdParam._m0[27u].y) - _815)) + _815;
    float _857 = ((_711.x - _730) * _337) + _730;
    float _858 = ((_711.y - _731) * _337) + _731;
    float _863 = ((_751.x - _857) * _502) + _857;
    float _864 = ((_751.y - _858) * _502) + _858;
    float _869 = ((_780.x - _863) * _326) + _863;
    float _870 = ((_780.y - _864) * _326) + _864;
    float _879 = ((((_804.x - _869) * _301) + _869) * 2.0) + (-1.0);
    float _880 = ((((_804.y - _870) * _301) + _870) * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _3843 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _886 = sqrt(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))));
    float _896 = ((cbMtdParam._m0[25u].z * ((_284.x * 2.0) + (-1.0))) + _879) + ((((_830.x * 2.0) + (-1.0)) * _616) * cbMtdParam._m0[27u].x);
    float _897 = ((cbMtdParam._m0[25u].z * ((_284.y * 2.0) + (-1.0))) + _880) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_830.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _900 = fma(_886, _231 * NORMAL.x, fma(_897, _238 * TANGENT.x, (_224 * _216) * _896));
    float _903 = fma(_886, _231 * NORMAL.y, fma(_897, _238 * TANGENT.y, (_224 * _217) * _896));
    float _906 = fma(_886, _231 * NORMAL.z, fma(_897, _238 * TANGENT.z, (_224 * _218) * _896));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _3854 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _914 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3876 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3887 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3898 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _918 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _984 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _974);
    float _985 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _974);
    float _986 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _974);
    float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
    float _991 = _984 * _990;
    float _992 = _985 * _990;
    float _993 = _986 * _990;
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1021 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1024 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1037 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1039 = (_1037 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _3909 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1051 = 1.0 - _918;
    float _1052 = _1048 * _1051;
    float _1053 = _1049 * _1051;
    float _1054 = _1050 * _1051;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _918;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _918;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _918;
    float _1062 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    vec4 _1074 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = _1074.x * TEXCOORD_3.w;
    float _1078 = dot(vec3(_911, _912, _913), vec3(_991, _992, _993));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _911) - _991;
    float _1086 = (_1081 * _912) - _992;
    float _1087 = (_1081 * _913) - _993;
    float _1091 = abs(dot(vec3(_991, _992, _993), vec3(_911, _912, _913)));
    float _3942 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_914);
    float _1104 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1093;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1448;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1173 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1177 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1181 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1206 = _1139 + _911;
        float _1207 = _1143 + _912;
        float _1208 = _1147 + _913;
        float _1218 = fma(_1208, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1206)) - _1173;
        float _1219 = fma(_1208, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1206)) - _1177;
        float _1220 = fma(_1208, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1206)) - _1181;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1173 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1177 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[34u].z) + ((((((_1181 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1276 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1242.x + (-0.5));
        float _1278 = _1276 * (_1242.y + (-0.5));
        float _1279 = _1276 * (_1242.z + (-0.5));
        float _1286 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1249.x + (-0.5));
        float _1288 = _1286 * (_1249.y + (-0.5));
        float _1289 = _1286 * (_1249.z + (-0.5));
        float _1296 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1256.x + (-0.5));
        float _1298 = _1296 * (_1256.y + (-0.5));
        float _1299 = _1296 * (_1256.z + (-0.5));
        float _1306 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1263.x + (-0.5));
        float _1308 = _1306 * (_1263.y + (-0.5));
        float _1309 = _1306 * (_1263.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1330 = (dot(vec3(_911, _912, _913), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1340 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3990 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1342 + 1.0))) + _1347) * _1310;
        float _1357 = _1278 * 0.5;
        float _1358 = _1288 * 0.5;
        float _1359 = _1298 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_911, _912, _913), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4023 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1384 + 1.0))) + _1389) * _1311;
        float _1399 = _1279 * 0.5;
        float _1400 = _1289 * 0.5;
        float _1401 = _1299 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_911, _912, _913), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4056 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1426 + 1.0))) + _1431) * _1312;
        _1448 = _1279;
        _1450 = _1278;
        _1451 = _1277;
        _1452 = _1289;
        _1453 = _1288;
        _1454 = _1287;
        _1455 = _1299;
        _1456 = _1298;
        _1457 = _1297;
        _1458 = _1312;
        _1459 = _1311;
        _1460 = _1310;
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1449;
        _1450 = _1449;
        _1451 = _1449;
        _1452 = _1449;
        _1453 = _1449;
        _1454 = _1449;
        _1455 = _1449;
        _1456 = _1449;
        _1457 = _1449;
        _1458 = _1449;
        _1459 = _1449;
        _1460 = _1449;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1486 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1490 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1494 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1517 = _1139 + _911;
        float _1518 = _1143 + _912;
        float _1519 = _1147 + _913;
        float _1529 = fma(_1519, cbModelParam._m0[30u].z, fma(_1518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1517)) - _1486;
        float _1530 = fma(_1519, cbModelParam._m0[31u].z, fma(_1518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1517)) - _1490;
        float _1531 = fma(_1519, cbModelParam._m0[32u].z, fma(_1518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1517)) - _1494;
        float _1535 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
        float _1548 = ((_1535 * _1529) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1486 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1535 * _1530) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1490 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1535 * _1531) / cbModelParam._m0[35u].z) + ((((((_1494 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        float _1585 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1552.x + (-0.5));
        float _1587 = _1585 * (_1552.y + (-0.5));
        float _1588 = _1585 * (_1552.z + (-0.5));
        float _1595 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1559.x + (-0.5));
        float _1597 = _1595 * (_1559.y + (-0.5));
        float _1598 = _1595 * (_1559.z + (-0.5));
        float _1605 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1566.x + (-0.5));
        float _1607 = _1605 * (_1566.y + (-0.5));
        float _1608 = _1605 * (_1566.z + (-0.5));
        float _1615 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1573.x + (-0.5));
        float _1617 = _1615 * (_1573.y + (-0.5));
        float _1618 = _1615 * (_1573.z + (-0.5));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = _1586 * 0.5;
        float _1623 = _1596 * 0.5;
        float _1624 = _1606 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_911, _912, _913), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4119 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1649 + 1.0))) + _1654) * _1619;
        float _1664 = _1587 * 0.5;
        float _1665 = _1597 * 0.5;
        float _1666 = _1607 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_911, _912, _913), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4152 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1691 + 1.0))) + _1696) * _1620;
        float _1706 = _1588 * 0.5;
        float _1707 = _1598 * 0.5;
        float _1708 = _1608 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_911, _912, _913), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4185 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1733 + 1.0))) + _1738) * _1621;
        _1755 = _1588;
        _1756 = _1587;
        _1757 = _1586;
        _1758 = _1598;
        _1759 = _1597;
        _1760 = _1596;
        _1761 = _1608;
        _1762 = _1607;
        _1763 = _1606;
        _1764 = _1621;
        _1765 = _1620;
        _1766 = _1619;
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
    }
    else
    {
        _1755 = _1449;
        _1756 = _1449;
        _1757 = _1449;
        _1758 = _1449;
        _1759 = _1449;
        _1760 = _1449;
        _1761 = _1449;
        _1762 = _1449;
        _1763 = _1449;
        _1764 = _1449;
        _1765 = _1449;
        _1766 = _1449;
        _1767 = 0.0;
        _1768 = 0.0;
        _1769 = 0.0;
    }
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1461)) + _1461;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1462)) + _1462;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1802 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1779));
    float _1823 = _1085 * 0.5;
    float _1824 = _1086 * 0.5;
    float _1825 = _1087 * 0.5;
    float _1826 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1829 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1832 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1866;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1839 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1448, _1452, _1455, _1458));
        float _1843 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1847 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1854 = dot(vec4(cbModelParam._m0[39u]), vec4(_1823, _1824, _1825, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1877;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1868 = dot(vec4(cbModelParam._m0[40u]), vec4(_1823, _1824, _1825, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1881 = (_1877 * cbModelParam._m0[1u].x) + (_1866 * (1.0 - cbModelParam._m0[1u].x));
    float _1891 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1891 : min(cbModelParam._m0[25u].z, _1891));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1939 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1943 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1947 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1950 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1953 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1956 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _1984;
        if (_1950 > 0.0)
        {
            _1984 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1984 = frontier_phi_14_12_ladder;
        }
        float _2186;
        if (_1953 > 0.0)
        {
            _2186 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2186 = frontier_phi_23_19_ladder;
        }
        float _2440;
        if (_1956 > 0.0)
        {
            _2440 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2440 = frontier_phi_35_30_ladder;
        }
        float _2442 = isnan(_2186) ? _1984 : (isnan(_1984) ? _2186 : min(_1984, _2186));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1950) + _1939;
        float _2448 = (_2443 * _1953) + _1943;
        float _2449 = (_2443 * _1956) + _1947;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1892);
            frontier_phi_13_35_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1972 = frontier_phi_13_35_ladder_2;
        _1974 = frontier_phi_13_35_ladder_1;
        _1976 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1892);
        _1972 = _1960.x * cbModelParam._m0[1u].y;
        _1974 = _1960.y * cbModelParam._m0[1u].y;
        _1976 = _1960.z * cbModelParam._m0[1u].y;
    }
    float _1980 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1980 : min(cbModelParam._m0[25u].w, _1980));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2048 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2051 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2191;
        if (_2045 > 0.0)
        {
            _2191 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2191 = frontier_phi_25_21_ladder;
        }
        float _2467;
        if (_2048 > 0.0)
        {
            _2467 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2467 = frontier_phi_37_32_ladder;
        }
        float _2680;
        if (_2051 > 0.0)
        {
            _2680 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2680 = frontier_phi_46_43_ladder;
        }
        float _2682 = isnan(_2467) ? _2191 : (isnan(_2191) ? _2467 : min(_2191, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2045) + _2034;
        float _2688 = (_2683 * _2048) + _2038;
        float _2689 = (_2683 * _2051) + _2042;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1981);
            frontier_phi_22_46_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_22_46_ladder_2;
        _2072 = frontier_phi_22_46_ladder_1;
        _2074 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _1981);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2087 = (((_1110 * _1062) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2070 - _1972)) + _1972);
    float _2089 = (((_1110 * _1064) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2091 = (((_1110 * _1065) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2089, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2089, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2089, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_1037 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _1077 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2145 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2149 = _2112 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_911, _912, _913));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_911, _912, _913));
    float _4321 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4332 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2129].x * _2135) * _2170) + ((cbLight._m0[_2139].x * _2145) * _2168);
    float _2178 = ((_2135 * cbLight._m0[_2129].y) * _2170) + ((_2145 * cbLight._m0[_2139].y) * _2168);
    float _2179 = ((_2135 * cbLight._m0[_2129].z) * _2170) + ((_2145 * cbLight._m0[_2139].z) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2185)
    {
        _2196 = _2177;
        _2198 = _2178;
        _2200 = _2179;
    }
    else
    {
        uint _2204 = _2112 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4343 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2223 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2177;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2178;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2179;
    }
    bool _2203 = _2183.y == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2203)
    {
        _2241 = _2196;
        _2243 = _2198;
        _2245 = _2200;
    }
    else
    {
        uint _2411 = _2112 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4359 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2430 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2241 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2196;
        _2243 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2198;
        _2245 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2200;
    }
    uint _2248 = _2112 + 8u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _914) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2112].x + _991;
    float _2264 = cbLight._m0[_2112].y + _992;
    float _2265 = cbLight._m0[_2112].z + _993;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2112].xyz));
    float _4375 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2277 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2278 = dot(vec3(_911, _912, _913), vec3(_2270, _2271, _2272));
    float _4397 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2270, _2271, _2272));
    float _4408 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2262 * _2262;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
    float _2299 = 0.959999978542327880859375 - _1059;
    float _2301 = 0.959999978542327880859375 - _1060;
    float _2302 = 0.959999978542327880859375 - _1061;
    float _2309 = 1.0 - _2262;
    float _2320 = (0.5 / (((_2277 * ((_2276 * _2309) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2309) + _2262) * _2276))) * _2276;
    float _4419 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    uint _2333 = _2112 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _914) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2149].x + _991;
    float _2347 = cbLight._m0[_2149].y + _992;
    float _2348 = cbLight._m0[_2149].z + _993;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2149].xyz));
    float _4430 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2360 = dot(vec3(_911, _912, _913), vec3(_2353, _2354, _2355));
    float _4441 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2353, _2354, _2355));
    float _4452 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2277 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2386) + _2345) * _2359))) * _2359;
    float _4463 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2299) + _1062) * cbLight._m0[_2333].x) * _2398) * _2135) + (((((_2298 * _2299) + _1062) * cbLight._m0[_2248].x) * _2322) * _2145);
    float _2409 = (((((_2379 * _2301) + _1064) * cbLight._m0[_2333].y) * _2398) * _2135) + (((((_2298 * _2301) + _1064) * cbLight._m0[_2248].y) * _2322) * _2145);
    float _2410 = (((((_2379 * _2302) + _1065) * cbLight._m0[_2333].z) * _2398) * _2135) + (((((_2298 * _2302) + _1065) * cbLight._m0[_2248].z) * _2322) * _2145);
    float _2472;
    float _2474;
    float _2476;
    if (_2185)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2112 + 2u;
        uint _2482 = _2112 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _914) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _991;
        float _2499 = cbLight._m0[_2478].y + _992;
        float _2500 = cbLight._m0[_2478].z + _993;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2478].xyz));
        float _4474 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2512 = dot(vec3(_911, _912, _913), vec3(_2505, _2506, _2507));
        float _4485 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4496 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2277 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2538) + _2497) * _2511))) * _2511;
        float _4507 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2472 = (((((_2531 * _2299) + _1062) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2301) + _1064) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2302) + _1065) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2203)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2112 + 3u;
        uint _2601 = _2112 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _914) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _991;
        float _2618 = cbLight._m0[_2597].y + _992;
        float _2619 = cbLight._m0[_2597].z + _993;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2597].xyz));
        float _4523 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2631 = dot(vec3(_911, _912, _913), vec3(_2624, _2625, _2626));
        float _4534 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4545 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2277 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2657) + _2616) * _2630))) * _2630;
        float _4556 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2586 = (((((_2650 * _2299) + _1062) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2301) + _1064) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2302) + _1065) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_2110.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
        }
        else
        {
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3054)
                {
                    frontier_phi_61_pred = _3038;
                    frontier_phi_61_pred_1 = _3043;
                    frontier_phi_61_pred_2 = _3042;
                    frontier_phi_61_pred_3 = _3041;
                    frontier_phi_61_pred_4 = _3040;
                    frontier_phi_61_pred_5 = _3039;
                }
                else
                {
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    uint _3168;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3053;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    for (;;)
                    {
                        uint _3172 = uint(findLSB(_3168)) + (_3044 << 5u);
                        uint _3169 = (_3168 + 4294967295u) & _3168;
                        uint _3174 = _3172 * 48u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3194 = (_3172 * 48u) + 4u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3213 = (_3172 * 48u) + 8u;
                        vec3 _3224 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x));
                        float _3228 = _3188.x - _2746;
                        float _3229 = _3188.y - _2747;
                        float _3230 = _3188.z - _2748;
                        float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                        float _3234 = inversesqrt(_3231);
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3238 = dot(vec3(_1018, _1021, _1024), vec3(_3235, _3236, _3237));
                        float _3243 = 1.0 - (_3231 * _3188.w);
                        float _4582 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3245 = sqrt(_3231) * _3207.w;
                        float _3248 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3238) + _3249;
                        float _3255 = _3245 * _3245;
                        float _3259 = ((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3244) / ((_3255 * 0.699999988079071044921875) + 1.0);
                        float _3263 = (-0.0) - _2746;
                        float _3264 = (-0.0) - _2747;
                        float _3265 = (-0.0) - _2748;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3280 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _1093;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_1018, _1021, _1024), vec3(_3270, _3271, _3272));
                        float _4598 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3305 = dot(vec3(_1018, _1021, _1024), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4609 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3248 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3238) + _3314;
                        float _4620 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4631 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3340 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3312 * _3312) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125))) * _3244;
                        _3097 = (_3259 * _3207.x) + _3165;
                        _3098 = (_3259 * _3207.y) + _3166;
                        _3099 = (_3259 * _3207.z) + _3167;
                        _3094 = (_3340 * _3224.x) + _3162;
                        _3095 = (_3340 * _3224.y) + _3163;
                        _3096 = (_3340 * _3224.z) + _3164;
                        if (_3169 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3169;
                        }
                    }
                    frontier_phi_61_pred = _3094;
                    frontier_phi_61_pred_1 = _3099;
                    frontier_phi_61_pred_2 = _3098;
                    frontier_phi_61_pred_3 = _3097;
                    frontier_phi_61_pred_4 = _3096;
                    frontier_phi_61_pred_5 = _3095;
                }
                _2894 = frontier_phi_61_pred;
                _2904 = frontier_phi_61_pred_1;
                _2902 = frontier_phi_61_pred_2;
                _2900 = frontier_phi_61_pred_3;
                _2898 = frontier_phi_61_pred_4;
                _2896 = frontier_phi_61_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2894;
                    _3039 = _2896;
                    _3040 = _2898;
                    _3041 = _2900;
                    _3042 = _2902;
                    _3043 = _2904;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
        }
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.z;
        uint _2910 = (_2908 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2910) & _2792) == 0u)
        {
            _3006 = _2893;
            _3008 = _2895;
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3032 = _3031 * _2746;
            float _3033 = _3031 * _2747;
            float _3034 = _3031 * _2748;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2910 < ((_2908 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3145 = _2893;
                float _3146 = _2895;
                float _3147 = _2897;
                float _3148 = _2899;
                float _3149 = _2901;
                float _3150 = _2903;
                uint _3151 = _2910;
                uint _3160;
                bool _3161;
                for (;;)
                {
                    _3160 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                    _3161 = _3160 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3161)
                    {
                        frontier_phi_67_pred = _3148;
                        frontier_phi_67_pred_1 = _3149;
                        frontier_phi_67_pred_2 = _3150;
                        frontier_phi_67_pred_3 = _3147;
                        frontier_phi_67_pred_4 = _3146;
                        frontier_phi_67_pred_5 = _3145;
                    }
                    else
                    {
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3358 = _3145;
                        float _3359 = _3146;
                        float _3360 = _3147;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        uint _3364 = _3160;
                        uint _3365;
                        vec4 _3390;
                        float _3391;
                        vec4 _3406;
                        vec3 _3418;
                        vec4 _3433;
                        vec4 _3448;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3375 = ((_3151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3364));
                            _3365 = (_3364 + 4294967295u) & _3364;
                            uint _3377 = _3375 * 40u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3391 = _3390.w;
                            uint _3393 = (_3375 * 40u) + 4u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3375 * 40u) + 8u;
                            _3418 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x));
                            uint _3420 = (_3375 * 40u) + 16u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3375 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3375 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3375 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_2748, _3482.z, fma(_2747, _3482.y, _3482.x * _2746)) + _3482.w;
                            _3495 = !((fma(_2748, _3463.z, fma(_2747, _3463.y, _3463.x * _2746)) + _3463.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3495)
                            {
                                float _3522 = _3390.x - _2746;
                                float _3523 = _3390.y - _2747;
                                float _3524 = _3390.z - _2748;
                                float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                                float _3528 = inversesqrt(_3525);
                                float _3529 = _3528 * _3522;
                                float _3530 = _3528 * _3523;
                                float _3531 = _3528 * _3524;
                                float _3535 = 1.0 - (_3525 / (_3391 * _3391));
                                float _4642 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3540 = sqrt(_3525) * _3406.w;
                                float _3542 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                                float _3543 = _3542 * _3542;
                                float _3546 = ((1.0 - _3543) * dot(vec3(_3529, _3530, _3531), vec3(_1018, _1021, _1024))) + _3543;
                                float _3549 = _3540 * _3540;
                                float _3553 = (fma(_2748, _3433.z, fma(_2747, _3433.y, _3433.x * _2746)) + _3433.w) / _3494;
                                float _3554 = (fma(_2748, _3448.z, fma(_2747, _3448.y, _3448.x * _2746)) + _3448.w) / _3494;
                                float _3558 = 1.0 - dot(vec2(_3553, _3554), vec2(_3553, _3554));
                                float _4658 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3560 = _3559 * (((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3536) / ((_3549 * 0.699999988079071044921875) + 1.0));
                                float _3572 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                                float _3573 = 1.0 - _1093;
                                float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                                float _3581 = _3580 * _3580;
                                float _3582 = _3581 * _3581;
                                float _3583 = _3529 - _3032;
                                float _3584 = _3530 - _3033;
                                float _3585 = _3531 - _3034;
                                float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                                float _3593 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4669 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3597 = dot(vec3(_1018, _1021, _1024), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                                float _4680 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                                float _3605 = _3542 * _3581;
                                float _3606 = _3605 * _3605;
                                float _3612 = ((1.0 - _3606) * dot(vec3(_1018, _1021, _1024), vec3(_3529, _3530, _3531))) + _3606;
                                float _4691 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3614 = 1.0 - _3581;
                                float _3624 = (0.5 / (((_3613 * ((_3596 * _3614) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3581) * _3596))) * _3613;
                                float _4702 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3634 = (_3559 * _3536) * (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3604 * _3604) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3634 * _3418.x;
                                frontier_phi_73_pred_1 = _3634 * _3418.y;
                                frontier_phi_73_pred_2 = _3560 * _3406.z;
                                frontier_phi_73_pred_3 = _3560 * _3406.y;
                                frontier_phi_73_pred_4 = _3560 * _3406.x;
                                frontier_phi_73_pred_5 = _3634 * _3418.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_73_pred;
                            _3639 = frontier_phi_73_pred_1;
                            _3643 = frontier_phi_73_pred_2;
                            _3642 = frontier_phi_73_pred_3;
                            _3641 = frontier_phi_73_pred_4;
                            _3640 = frontier_phi_73_pred_5;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            if (_3365 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3365;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3348;
                        frontier_phi_67_pred_1 = _3349;
                        frontier_phi_67_pred_2 = _3350;
                        frontier_phi_67_pred_3 = _3347;
                        frontier_phi_67_pred_4 = _3346;
                        frontier_phi_67_pred_5 = _3345;
                    }
                    _3013 = frontier_phi_67_pred;
                    _3015 = frontier_phi_67_pred_1;
                    _3017 = frontier_phi_67_pred_2;
                    _3011 = frontier_phi_67_pred_3;
                    _3009 = frontier_phi_67_pred_4;
                    _3007 = frontier_phi_67_pred_5;
                    uint _3152 = _3151 + 1u;
                    if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3145 = _3007;
                        _3146 = _3009;
                        _3147 = _3011;
                        _3148 = _3013;
                        _3149 = _3015;
                        _3150 = _3017;
                        _3151 = _3152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3015;
                frontier_phi_55_56_ladder_1 = _3017;
                frontier_phi_55_56_ladder_2 = _3013;
                frontier_phi_55_56_ladder_3 = _3011;
                frontier_phi_55_56_ladder_4 = _3009;
                frontier_phi_55_56_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_55_56_ladder = _2901;
                frontier_phi_55_56_ladder_1 = _2903;
                frontier_phi_55_56_ladder_2 = _2899;
                frontier_phi_55_56_ladder_3 = _2897;
                frontier_phi_55_56_ladder_4 = _2895;
                frontier_phi_55_56_ladder_5 = _2893;
            }
            _3006 = frontier_phi_55_56_ladder_5;
            _3008 = frontier_phi_55_56_ladder_4;
            _3010 = frontier_phi_55_56_ladder_3;
            _3012 = frontier_phi_55_56_ladder_2;
            _3014 = frontier_phi_55_56_ladder;
            _3016 = frontier_phi_55_56_ladder_1;
        }
        float _3021 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2805 = (_3021 * _3012) + _2241;
        _2807 = (_3021 * _3014) + _2243;
        _2809 = (_3021 * _3016) + _2245;
        _2811 = ((_3006 * _1062) * _3021) + _2586;
        _2813 = ((_3008 * _1064) * _3021) + _2588;
        _2815 = ((_3010 * _1065) * _3021) + _2590;
    }
    else
    {
        _2805 = _2241;
        _2807 = _2243;
        _2809 = _2245;
        _2811 = _2586;
        _2813 = _2588;
        _2815 = _2590;
    }
    float _4718 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4729 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4740 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    uint _2835 = _1037 + 6u;
    float _2843 = _999 / cbSceneParam._m0[86u].x;
    float _2844 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _2918 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _2919 = _2918 / _934;
        float _2930 = _2919 * _984;
        float _2931 = _985 * _2919;
        float _2932 = (-0.0) - _2931;
        float _2934 = _2919 * _986;
        float _2936 = (cbSceneParam._m0[77u].w * _2932) / _2918;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2931;
        float _2944 = sqrt(((_2930 * _2930) + (_2931 * _2931)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2918)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3107;
        if (abs((_2932 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3107 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3069 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3107 = ((abs(_2944 / _2932) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2954 * _3078) - exp2(_2954 * _3079)) * _3067))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3109 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3118 = exp2((_3107 * (-1.44269502162933349609375)) * (1.0 - _3109.w));
        float _3119 = log2(_3118);
        float _3135 = log2(_2863);
        _2956 = (exp2(_3135 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].x)) * _3109.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2958 = (exp2(_3135 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].y)) * _3109.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2960 = (exp2(_3135 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].z)) * _3109.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2962 = _3118 * _2863;
    }
    else
    {
        _2956 = _2860;
        _2958 = _2861;
        _2960 = _2862;
        _2962 = _2863;
    }
    float _2974 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2975 = _2974 == 3.0;
    float _2976 = log2(_2962);
    float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2805 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1077))) + ((_2811 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2807 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1077))) + ((_2813 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2809 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1077))) + ((_2815 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _2994 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2994 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.y = _2994 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.z = _2994 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.w = cbInstanceData._m0[_2835].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2835].w;
}


