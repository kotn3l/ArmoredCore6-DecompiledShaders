#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1540;
float _3917;
float _3918;
float _3919;
float _3920;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _277 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _311 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _315 = _311.z;
    float _326 = exp2(log2((1.0 - _315) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _342 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _354 = exp2(log2(_342.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _355 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0));
    float _365 = exp2(log2(cbMtdParam._m0[23u].y * _315) * cbMtdParam._m0[22u].y);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
    float _388 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _390 = isnan(4.0) ? _389 : (isnan(_389) ? 4.0 : min(_389, 4.0));
    float _403 = floor(_390);
    vec4 _406 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _403));
    vec4 _430 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _441 = cbMtdParam._m0[9u].x * _430.x;
    float _442 = cbMtdParam._m0[9u].y * _430.y;
    float _443 = cbMtdParam._m0[9u].z * _430.z;
    float _450 = (((cbMtdParam._m0[10u].x * _406.x) - _441) * _367) + _441;
    float _451 = (((cbMtdParam._m0[10u].y * _406.y) - _442) * _367) + _442;
    float _452 = (((cbMtdParam._m0[10u].z * _406.z) - _443) * _367) + _443;
    float _458 = exp2(log2(_311.w) * cbMtdParam._m0[23u].w);
    vec4 _471 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _490 = (((cbMtdParam._m0[16u].x * _471.x) - _450) * _458) + _450;
    float _491 = (((cbMtdParam._m0[16u].y * _471.y) - _451) * _458) + _451;
    float _492 = (((cbMtdParam._m0[16u].z * _471.z) - _452) * _458) + _452;
    vec4 _505 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _525 = (((cbMtdParam._m0[19u].x * _505.x) - _490) * _356) + _490;
    float _526 = (((cbMtdParam._m0[19u].y * _505.y) - _491) * _356) + _491;
    float _527 = (((cbMtdParam._m0[19u].z * _505.z) - _492) * _356) + _492;
    vec4 _540 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _565 = (_342.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _540.x) - _525) * _328) + _525);
    float _567 = (_342.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _540.y) - _526) * _328) + _526);
    float _569 = (_342.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _540.z) - _527) * _328) + _527);
    vec4 _582 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _600 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _602 = _600 * (cbMtdParam._m0[24u].z + 1.0);
    float _3969 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _610 = (_603 * ((cbMtdParam._m0[11u].x * _582.x) - _565)) + _565;
    float _611 = (((cbMtdParam._m0[11u].y * _582.y) - _567) * _603) + _567;
    float _612 = (((cbMtdParam._m0[11u].z * _582.z) - _569) * _603) + _569;
    float _616 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _624 = (_616 - (((_277.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _616))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3980 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _632 = ((cbMtdParam._m0[21u].x - _610) * _625) + _610;
    float _633 = ((cbMtdParam._m0[21u].y - _611) * _625) + _611;
    float _634 = ((cbMtdParam._m0[21u].z - _612) * _625) + _612;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].x;
    _204[0u] = cbMtdParam._m0[29u].y;
    _203[1u] = cbMtdParam._m0[31u].x;
    _204[1u] = cbMtdParam._m0[31u].y;
    _203[2u] = cbMtdParam._m0[30u].z;
    _204[2u] = cbMtdParam._m0[30u].w;
    _203[3u] = cbMtdParam._m0[30u].x;
    _204[3u] = cbMtdParam._m0[30u].y;
    _203[4u] = cbMtdParam._m0[29u].z;
    _204[4u] = cbMtdParam._m0[29u].w;
    float _675 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    uint _677 = uint(int(isnan(4.0) ? _675 : (isnan(_675) ? 4.0 : min(_675, 4.0))));
    float _684 = ((_204[_677] - cbMtdParam._m0[22u].z) * _367) + cbMtdParam._m0[22u].z;
    float _687 = ((cbMtdParam._m0[22u].w - _684) * _458) + _684;
    float _690 = ((cbMtdParam._m0[25u].y - _687) * _356) + _687;
    float _693 = ((cbMtdParam._m0[26u].y - _690) * _328) + _690;
    float _698 = (cbMtdParam._m0[24u].y + 1.0) * _600;
    float _4001 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _701 = _693 - (_693 * _699);
    float _703 = _701 - (_701 * _616);
    vec4 _716 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _403));
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _742 = cbMtdParam._m0[22u].x + _734.z;
    float _745 = (((_716.z + _203[_677]) - _742) * _367) + _742;
    vec4 _758 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _769 = (((_758.z - _745) + cbMtdParam._m0[28u].z) * _458) + _745;
    float _775 = ((((_315 * 2.0) * _769) - _769) * cbMtdParam._m0[24u].w) + _769;
    vec4 _788 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _799 = (((cbMtdParam._m0[23u].z + _788.z) - _775) * _356) + _775;
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _823 = (((_812.z - _799) + cbMtdParam._m0[26u].z) * _328) + _799;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _847 = ((_835.z - _823) * _699) + _823;
    vec4 _862 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _876 = ((cbMtdParam._m0[27u].z * _616) * ((_862.z * cbMtdParam._m0[27u].y) - _847)) + _847;
    float _891 = ((_716.x - _736) * _367) + _736;
    float _892 = ((_716.y - _737) * _367) + _737;
    float _897 = ((_758.x - _891) * _458) + _891;
    float _898 = ((_758.y - _892) * _458) + _892;
    float _903 = ((_788.x - _897) * _356) + _897;
    float _904 = ((_788.y - _898) * _356) + _898;
    float _913 = ((((_812.x - _903) * _328) + _903) * 2.0) + (-1.0);
    float _914 = ((((_812.y - _904) * _328) + _904) * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4012 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _920 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    float _936 = (((cbMtdParam._m0[25u].z * ((_311.x * 2.0) + (-1.0))) + _913) + (((((_835.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _699)) + ((((_862.x * 2.0) + (-1.0)) * _616) * cbMtdParam._m0[27u].x);
    float _937 = (((cbMtdParam._m0[25u].z * ((_311.y * 2.0) + (-1.0))) + _914) + (((((_835.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _699)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_862.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _939 = gl_FragCoord.x * 0.125;
    float _941 = gl_FragCoord.y * 0.125;
    float _951 = fma(_920, _239 * NORMAL.x, fma(_937, _246 * TANGENT.x, (_232 * _224) * _936));
    float _954 = fma(_920, _239 * NORMAL.y, fma(_937, _246 * TANGENT.y, (_232 * _225) * _936));
    float _957 = fma(_920, _239 * NORMAL.z, fma(_937, _246 * TANGENT.z, (_232 * _226) * _936));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _4023 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _965 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4045 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4056 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4067 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _969 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_939, _941)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _989 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1039 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1029);
    float _1040 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1029);
    float _1041 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1029);
    float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
    float _1046 = _1039 * _1045;
    float _1047 = _1040 * _1045;
    float _1048 = _1041 * _1045;
    vec4 _1050 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_939, _941));
    float _1052 = _1050.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1222 = sqrt(((_1039 * _1039) + (_1040 * _1040)) + (_1041 * _1041));
        float _1228 = (cbMatDynParam._m0[5u].x * _1222) + cbMatDynParam._m0[5u].y;
        float _4078 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1233 = (cbMatDynParam._m0[5u].z * _1222) + cbMatDynParam._m0[5u].w;
        float _4089 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) - _1229)) + _1229) < ((_1052 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1063 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1064 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1082 = fma(_964, cbSceneParam._m0[5u].z, fma(_963, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _962));
    float _1085 = fma(_964, cbSceneParam._m0[6u].z, fma(_963, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _962));
    float _1088 = fma(_964, cbSceneParam._m0[7u].z, fma(_963, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _962));
    uint _1101 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1102 = _1101 + 9u;
    uint _1103 = _1102 + uint(cbMatDynParam._m0[0u].w);
    float _1109 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1103].x;
    float _1110 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1103].y;
    float _1111 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1103].z;
    float _4100 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1115 = 1.0 - _969;
    float _1116 = _1112 * _1115;
    float _1117 = _1113 * _1115;
    float _1118 = _1114 * _1115;
    float _1123 = (_1112 + (-0.039999999105930328369140625)) * _969;
    float _1124 = (_1113 + (-0.039999999105930328369140625)) * _969;
    float _1125 = (_1114 + (-0.039999999105930328369140625)) * _969;
    float _1126 = _1123 + 0.039999999105930328369140625;
    float _1128 = _1124 + 0.039999999105930328369140625;
    float _1129 = _1125 + 0.039999999105930328369140625;
    vec4 _1138 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1063, cbSceneParam._m0[86u].y * _1064));
    float _1141 = _1138.x * TEXCOORD_3.w;
    float _1142 = dot(vec3(_962, _963, _964), vec3(_1046, _1047, _1048));
    float _1145 = _1142 * 2.0;
    float _1149 = (_1145 * _962) - _1046;
    float _1150 = (_1145 * _963) - _1047;
    float _1151 = (_1145 * _964) - _1048;
    float _1155 = abs(dot(vec3(_1046, _1047, _1048), vec3(_962, _963, _964)));
    float _4133 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1157 = sqrt(_965);
    float _1168 = exp2((_1157 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1157 * 3.0));
    float _1174 = (1.0 - _1168) * ((_1157 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1175 = _1168 * _1157;
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1539;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1264 = fma(_1211, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203));
        float _1268 = fma(_1211, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203));
        float _1272 = fma(_1211, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203));
        float _1297 = _1203 + _962;
        float _1298 = _1207 + _963;
        float _1299 = _1211 + _964;
        float _1309 = fma(_1299, cbModelParam._m0[26u].z, fma(_1298, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297)) - _1264;
        float _1310 = fma(_1299, cbModelParam._m0[27u].z, fma(_1298, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297)) - _1268;
        float _1311 = fma(_1299, cbModelParam._m0[28u].z, fma(_1298, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297)) - _1272;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1264 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1268 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[34u].z) + ((((((_1272 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1367 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1333.x + (-0.5));
        float _1369 = _1367 * (_1333.y + (-0.5));
        float _1370 = _1367 * (_1333.z + (-0.5));
        float _1377 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1340.x + (-0.5));
        float _1379 = _1377 * (_1340.y + (-0.5));
        float _1380 = _1377 * (_1340.z + (-0.5));
        float _1387 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1347.x + (-0.5));
        float _1389 = _1387 * (_1347.y + (-0.5));
        float _1390 = _1387 * (_1347.z + (-0.5));
        float _1397 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1354.x + (-0.5));
        float _1399 = _1397 * (_1354.y + (-0.5));
        float _1400 = _1397 * (_1354.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1421 = (dot(vec3(_962, _963, _964), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1431 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4181 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1433 + 1.0))) + _1438) * _1401;
        float _1448 = _1369 * 0.5;
        float _1449 = _1379 * 0.5;
        float _1450 = _1389 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_962, _963, _964), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4214 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1475 + 1.0))) + _1480) * _1402;
        float _1490 = _1370 * 0.5;
        float _1491 = _1380 * 0.5;
        float _1492 = _1390 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_962, _963, _964), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4247 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1517 + 1.0))) + _1522) * _1403;
        _1539 = _1370;
        _1541 = _1369;
        _1542 = _1368;
        _1543 = _1380;
        _1544 = _1379;
        _1545 = _1378;
        _1546 = _1390;
        _1547 = _1389;
        _1548 = _1388;
        _1549 = _1403;
        _1550 = _1402;
        _1551 = _1401;
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1553 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1554 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1540;
        _1541 = _1540;
        _1542 = _1540;
        _1543 = _1540;
        _1544 = _1540;
        _1545 = _1540;
        _1546 = _1540;
        _1547 = _1540;
        _1548 = _1540;
        _1549 = _1540;
        _1550 = _1540;
        _1551 = _1540;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1577 = fma(_1211, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203));
        float _1581 = fma(_1211, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203));
        float _1585 = fma(_1211, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203));
        float _1608 = _1203 + _962;
        float _1609 = _1207 + _963;
        float _1610 = _1211 + _964;
        float _1620 = fma(_1610, cbModelParam._m0[30u].z, fma(_1609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1608)) - _1577;
        float _1621 = fma(_1610, cbModelParam._m0[31u].z, fma(_1609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1608)) - _1581;
        float _1622 = fma(_1610, cbModelParam._m0[32u].z, fma(_1609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1608)) - _1585;
        float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
        float _1639 = ((_1626 * _1620) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1577 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1626 * _1621) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1581 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1626 * _1622) / cbModelParam._m0[35u].z) + ((((((_1585 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        float _1676 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1643.x + (-0.5));
        float _1678 = _1676 * (_1643.y + (-0.5));
        float _1679 = _1676 * (_1643.z + (-0.5));
        float _1686 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1650.x + (-0.5));
        float _1688 = _1686 * (_1650.y + (-0.5));
        float _1689 = _1686 * (_1650.z + (-0.5));
        float _1696 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1657.x + (-0.5));
        float _1698 = _1696 * (_1657.y + (-0.5));
        float _1699 = _1696 * (_1657.z + (-0.5));
        float _1706 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1664.x + (-0.5));
        float _1708 = _1706 * (_1664.y + (-0.5));
        float _1709 = _1706 * (_1664.z + (-0.5));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1677 * 0.5;
        float _1714 = _1687 * 0.5;
        float _1715 = _1697 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_962, _963, _964), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4310 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1740 + 1.0))) + _1745) * _1710;
        float _1755 = _1678 * 0.5;
        float _1756 = _1688 * 0.5;
        float _1757 = _1698 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_962, _963, _964), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4343 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1782 + 1.0))) + _1787) * _1711;
        float _1797 = _1679 * 0.5;
        float _1798 = _1689 * 0.5;
        float _1799 = _1699 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_962, _963, _964), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4376 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1824 + 1.0))) + _1829) * _1712;
        _1846 = _1679;
        _1847 = _1678;
        _1848 = _1677;
        _1849 = _1689;
        _1850 = _1688;
        _1851 = _1687;
        _1852 = _1699;
        _1853 = _1698;
        _1854 = _1697;
        _1855 = _1712;
        _1856 = _1711;
        _1857 = _1710;
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
    }
    else
    {
        _1846 = _1540;
        _1847 = _1540;
        _1848 = _1540;
        _1849 = _1540;
        _1850 = _1540;
        _1851 = _1540;
        _1852 = _1540;
        _1853 = _1540;
        _1854 = _1540;
        _1855 = _1540;
        _1856 = _1540;
        _1857 = _1540;
        _1858 = 0.0;
        _1859 = 0.0;
        _1860 = 0.0;
    }
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1552)) + _1552;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1553)) + _1553;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1554)) + _1554;
    float _1893 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1870));
    float _1914 = _1149 * 0.5;
    float _1915 = _1150 * 0.5;
    float _1916 = _1151 * 0.5;
    float _1917 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1920 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1923 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1957;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1930 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1539, _1543, _1546, _1549));
        float _1934 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1541, _1544, _1547, _1550));
        float _1938 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1542, _1545, _1548, _1551));
        float _1945 = dot(vec4(cbModelParam._m0[39u]), vec4(_1914, _1915, _1916, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1968;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1959 = dot(vec4(cbModelParam._m0[40u]), vec4(_1914, _1915, _1916, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1972 = (_1968 * cbModelParam._m0[1u].x) + (_1957 * (1.0 - cbModelParam._m0[1u].x));
    float _1982 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _965);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1982 : min(cbModelParam._m0[25u].z, _1982));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2030 = fma(_1211, cbModelParam._m0[13u].z, fma(_1207, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1203)) + cbModelParam._m0[13u].w;
        float _2034 = fma(_1211, cbModelParam._m0[14u].z, fma(_1207, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1203)) + cbModelParam._m0[14u].w;
        float _2038 = fma(_1211, cbModelParam._m0[15u].z, fma(_1207, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1203)) + cbModelParam._m0[15u].w;
        float _2041 = fma(_1151, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149));
        float _2044 = fma(_1151, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149));
        float _2047 = fma(_1151, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149));
        float _2075;
        if (_2041 > 0.0)
        {
            _2075 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2075 = frontier_phi_19_17_ladder;
        }
        float _2278;
        if (_2044 > 0.0)
        {
            _2278 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2278 = frontier_phi_28_24_ladder;
        }
        float _2532;
        if (_2047 > 0.0)
        {
            _2532 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2532 = frontier_phi_40_35_ladder;
        }
        float _2534 = isnan(_2278) ? _2075 : (isnan(_2075) ? _2278 : min(_2075, _2278));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _2041) + _2030;
        float _2540 = (_2535 * _2044) + _2034;
        float _2541 = (_2535 * _2047) + _2038;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2542;
        float _2546 = _2542 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 > _2546) || ((_2540 < _2544) || ((_2539 < _2544) || (_2539 > _2546))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2541, cbModelParam._m0[9u].z, fma(_2540, cbModelParam._m0[9u].y, _2539 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2541, cbModelParam._m0[10u].z, fma(_2540, cbModelParam._m0[10u].y, _2539 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2541, cbModelParam._m0[11u].z, fma(_2540, cbModelParam._m0[11u].y, _2539 * cbModelParam._m0[11u].x))), _1983);
            frontier_phi_18_40_ladder = _2669.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2669.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2669.x * cbModelParam._m0[1u].y;
        }
        _2063 = frontier_phi_18_40_ladder_2;
        _2065 = frontier_phi_18_40_ladder_1;
        _2067 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1149, _1150, _1151), _1983);
        _2063 = _2051.x * cbModelParam._m0[1u].y;
        _2065 = _2051.y * cbModelParam._m0[1u].y;
        _2067 = _2051.z * cbModelParam._m0[1u].y;
    }
    float _2071 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _965);
    float _2072 = isnan(_2071) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2071 : min(cbModelParam._m0[25u].w, _2071));
    float _2162;
    float _2164;
    float _2166;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2126 = fma(_1211, cbModelParam._m0[21u].z, fma(_1207, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1203)) + cbModelParam._m0[21u].w;
        float _2130 = fma(_1211, cbModelParam._m0[22u].z, fma(_1207, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1203)) + cbModelParam._m0[22u].w;
        float _2134 = fma(_1211, cbModelParam._m0[23u].z, fma(_1207, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1203)) + cbModelParam._m0[23u].w;
        float _2137 = fma(_1151, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149));
        float _2140 = fma(_1151, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149));
        float _2143 = fma(_1151, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149));
        float _2283;
        if (_2137 > 0.0)
        {
            _2283 = abs((1.0 - _2126) / _2137);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2126 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2283 = frontier_phi_30_26_ladder;
        }
        float _2559;
        if (_2140 > 0.0)
        {
            _2559 = abs((1.0 - _2130) / _2140);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2130 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2559 = frontier_phi_42_37_ladder;
        }
        float _2772;
        if (_2143 > 0.0)
        {
            _2772 = abs((1.0 - _2134) / _2143);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2134 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2772 = frontier_phi_51_48_ladder;
        }
        float _2774 = isnan(_2559) ? _2283 : (isnan(_2283) ? _2559 : min(_2283, _2559));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2137) + _2126;
        float _2780 = (_2775 * _2140) + _2130;
        float _2781 = (_2775 * _2143) + _2134;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _2072);
            frontier_phi_27_51_ladder = _2980.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2980.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2980.x * cbModelParam._m0[1u].z;
        }
        _2162 = frontier_phi_27_51_ladder_2;
        _2164 = frontier_phi_27_51_ladder_1;
        _2166 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2146 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1149, _1150, _1151), _2072);
        _2162 = _2146.x * cbModelParam._m0[1u].z;
        _2164 = _2146.y * cbModelParam._m0[1u].z;
        _2166 = _2146.z * cbModelParam._m0[1u].z;
    }
    float _2179 = (((_1174 * _1126) + _1175) * _1141) * ((cbModelParam._m0[1u].w * (_2162 - _2063)) + _2063);
    float _2181 = (((_1174 * _1128) + _1175) * _1141) * ((cbModelParam._m0[1u].w * (_2164 - _2065)) + _2065);
    float _2183 = (((_1174 * _1129) + _1175) * _1141) * ((cbModelParam._m0[1u].w * (_2166 - _2067)) + _2067);
    float _2186 = fma(_2183, cbSceneParam._m0[89u].z, fma(_2181, cbSceneParam._m0[89u].y, _2179 * cbSceneParam._m0[89u].x));
    float _2189 = fma(_2183, cbSceneParam._m0[90u].z, fma(_2181, cbSceneParam._m0[90u].y, _2179 * cbSceneParam._m0[90u].x));
    float _2192 = fma(_2183, cbSceneParam._m0[91u].z, fma(_2181, cbSceneParam._m0[91u].y, _2179 * cbSceneParam._m0[91u].x));
    uvec4 _2202 = floatBitsToUint(cbInstanceData._m0[_1101 + 5u]);
    uint _2204 = _2202.x * 14u;
    uint _2205 = _2204 + 13u;
    float _2212 = _1141 + (-1.0);
    float _2217 = (cbLight._m0[_2205].x * _2212) + 1.0;
    float _2218 = (cbLight._m0[_2205].y * _2212) + 1.0;
    float _2219 = (cbLight._m0[_2205].z * _2212) + 1.0;
    float _2220 = (cbLight._m0[_2205].w * _2212) + 1.0;
    uint _2221 = _2204 + 5u;
    float _2227 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2231 = _2204 + 4u;
    float _2237 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2241 = _2204 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_962, _963, _964));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_962, _963, _964));
    float _4512 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4523 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2221].x * _2227) * _2262) + ((cbLight._m0[_2231].x * _2237) * _2260);
    float _2270 = ((_2227 * cbLight._m0[_2221].y) * _2262) + ((_2237 * cbLight._m0[_2231].y) * _2260);
    float _2271 = ((_2227 * cbLight._m0[_2221].z) * _2262) + ((_2237 * cbLight._m0[_2231].z) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2204 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2277)
    {
        _2288 = _2269;
        _2290 = _2270;
        _2292 = _2271;
    }
    else
    {
        uint _2296 = _2204 + 6u;
        float _2312 = (dot(vec3(cbLight._m0[_2204 + 2u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4534 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2315 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2288 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2269;
        _2290 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2270;
        _2292 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2271;
    }
    bool _2295 = _2275.y == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2295)
    {
        _2333 = _2288;
        _2335 = _2290;
        _2337 = _2292;
    }
    else
    {
        uint _2503 = _2204 + 7u;
        float _2519 = (dot(vec3(cbLight._m0[_2204 + 3u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2520 = _2519 * _2519;
        float _4550 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2521 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2522 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2333 = (((cbLight._m0[_2503].x * 0.3183098733425140380859375) * _2521) * _2522) + _2288;
        _2335 = (((cbLight._m0[_2503].y * 0.3183098733425140380859375) * _2521) * _2522) + _2290;
        _2337 = (((cbLight._m0[_2503].z * 0.3183098733425140380859375) * _2521) * _2522) + _2292;
    }
    uint _2340 = _2204 + 8u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _965) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2204].x + _1046;
    float _2356 = cbLight._m0[_2204].y + _1047;
    float _2357 = cbLight._m0[_2204].z + _1048;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2204].xyz));
    float _4566 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _4577 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2369 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2370 = dot(vec3(_962, _963, _964), vec3(_2362, _2363, _2364));
    float _4588 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2362, _2363, _2364));
    float _4599 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2354 * _2354;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2391 = 0.959999978542327880859375 - _1123;
    float _2393 = 0.959999978542327880859375 - _1124;
    float _2394 = 0.959999978542327880859375 - _1125;
    float _2401 = 1.0 - _2354;
    float _2412 = (0.5 / (((_2369 * ((_2368 * _2401) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2401) + _2354) * _2368))) * _2368;
    float _4610 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    uint _2425 = _2204 + 9u;
    float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _965) * 0.949999988079071044921875);
    float _2437 = _2436 * _2436;
    float _2438 = cbLight._m0[_2241].x + _1046;
    float _2439 = cbLight._m0[_2241].y + _1047;
    float _2440 = cbLight._m0[_2241].z + _1048;
    float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
    float _2445 = _2444 * _2438;
    float _2446 = _2444 * _2439;
    float _2447 = _2444 * _2440;
    float _2448 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2241].xyz));
    float _4621 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2452 = dot(vec3(_962, _963, _964), vec3(_2445, _2446, _2447));
    float _4632 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2445, _2446, _2447));
    float _4643 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2437 * _2437;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
    float _2478 = 1.0 - _2437;
    float _2488 = (0.5 / (((_2369 * ((_2451 * _2478) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2478) + _2437) * _2451))) * _2451;
    float _4654 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    float _2500 = (((((_2471 * _2391) + _1126) * cbLight._m0[_2425].x) * _2490) * _2227) + (((((_2390 * _2391) + _1126) * cbLight._m0[_2340].x) * _2414) * _2237);
    float _2501 = (((((_2471 * _2393) + _1128) * cbLight._m0[_2425].y) * _2490) * _2227) + (((((_2390 * _2393) + _1128) * cbLight._m0[_2340].y) * _2414) * _2237);
    float _2502 = (((((_2471 * _2394) + _1129) * cbLight._m0[_2425].z) * _2490) * _2227) + (((((_2390 * _2394) + _1129) * cbLight._m0[_2340].z) * _2414) * _2237);
    float _2564;
    float _2566;
    float _2568;
    if (_2277)
    {
        _2564 = _2500;
        _2566 = _2501;
        _2568 = _2502;
    }
    else
    {
        uint _2570 = _2204 + 2u;
        uint _2574 = _2204 + 10u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _965) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _1046;
        float _2591 = cbLight._m0[_2570].y + _1047;
        float _2592 = cbLight._m0[_2570].z + _1048;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2570].xyz));
        float _4665 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2604 = dot(vec3(_962, _963, _964), vec3(_2597, _2598, _2599));
        float _4676 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4687 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2630 = 1.0 - _2589;
        float _2640 = (0.5 / (((_2369 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2630) + _2589) * _2603))) * _2603;
        float _4698 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2564 = (((((_2623 * _2391) + _1126) * cbLight._m0[_2574].x) * _2642) * _2643) + _2500;
        _2566 = (((((_2623 * _2393) + _1128) * cbLight._m0[_2574].y) * _2642) * _2643) + _2501;
        _2568 = (((((_2623 * _2394) + _1129) * cbLight._m0[_2574].z) * _2642) * _2643) + _2502;
    }
    float _2678;
    float _2680;
    float _2682;
    if (_2295)
    {
        _2678 = _2564;
        _2680 = _2566;
        _2682 = _2568;
    }
    else
    {
        uint _2689 = _2204 + 3u;
        uint _2693 = _2204 + 11u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _965) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _1046;
        float _2710 = cbLight._m0[_2689].y + _1047;
        float _2711 = cbLight._m0[_2689].z + _1048;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2689].xyz));
        float _4714 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2723 = dot(vec3(_962, _963, _964), vec3(_2716, _2717, _2718));
        float _4725 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4736 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2749 = 1.0 - _2708;
        float _2759 = (0.5 / (((_2369 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2749) + _2708) * _2722))) * _2722;
        float _4747 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2678 = (((((_2742 * _2391) + _1126) * cbLight._m0[_2693].x) * _2761) * _2762) + _2564;
        _2680 = (((((_2742 * _2393) + _1128) * cbLight._m0[_2693].y) * _2761) * _2762) + _2566;
        _2682 = (((((_2742 * _2394) + _1129) * cbLight._m0[_2693].z) * _2761) * _2762) + _2568;
    }
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_2202.y == 0u)
    {
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2837;
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2837;
        float _2840 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2837;
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.x;
        uint _2864 = uint((float(_2852.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1064) / _2853))) + floor(float(uint(cbSceneParam._m0[85u].x * _1063) / _2853)));
        float _2874 = (log2(_2840 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2875 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        uint _2878 = uint(isnan(14.0) ? _2875 : (isnan(_2875) ? 14.0 : min(_2875, 14.0)));
        uvec4 _2883 = texelFetch(g_lightClusterGridBuffer, int(((_2878 << 2u) + (_2864 << 6u)) >> 2u));
        uint _2884 = _2883.x;
        uint _2885 = _2852.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2885 >> 4u) & 15u)) + 4294967295u) & _2884) == 0u) || ((_2885 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3154)
                {
                    frontier_phi_68_pred = _3138;
                    frontier_phi_68_pred_1 = _3143;
                    frontier_phi_68_pred_2 = _3142;
                    frontier_phi_68_pred_3 = _3141;
                    frontier_phi_68_pred_4 = _3140;
                    frontier_phi_68_pred_5 = _3139;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3153;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3144 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _2838;
                        float _3350 = _3309.y - _2839;
                        float _3351 = _3309.z - _2840;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_1082, _1085, _1088), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4773 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _2838;
                        float _3385 = (-0.0) - _2839;
                        float _3386 = (-0.0) - _2840;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3401 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _1157;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3414 = _3393 + _3358;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_1082, _1085, _1088), vec3(_3391, _3392, _3393));
                        float _4789 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3426 = dot(vec3(_1082, _1085, _1088), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4800 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3369 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3359) + _3435;
                        float _4811 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4822 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3433 * _3433) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3213 = (_3380 * _3328.x) + _3286;
                        _3214 = (_3380 * _3328.y) + _3287;
                        _3215 = (_3380 * _3328.z) + _3288;
                        _3210 = (_3461 * _3345.x) + _3283;
                        _3211 = (_3461 * _3345.y) + _3284;
                        _3212 = (_3461 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_68_pred = _3210;
                    frontier_phi_68_pred_1 = _3215;
                    frontier_phi_68_pred_2 = _3214;
                    frontier_phi_68_pred_3 = _3213;
                    frontier_phi_68_pred_4 = _3212;
                    frontier_phi_68_pred_5 = _3211;
                }
                _2986 = frontier_phi_68_pred;
                _2996 = frontier_phi_68_pred_1;
                _2994 = frontier_phi_68_pred_2;
                _2992 = frontier_phi_68_pred_3;
                _2990 = frontier_phi_68_pred_4;
                _2988 = frontier_phi_68_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2986;
                    _3139 = _2988;
                    _3140 = _2990;
                    _3141 = _2992;
                    _3142 = _2994;
                    _3143 = _2996;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3002) & _2884) == 0u)
        {
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
            float _3132 = _3131 * _2838;
            float _3133 = _3131 * _2839;
            float _3134 = _3131 * _2840;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3266 = _2985;
                float _3267 = _2987;
                float _3268 = _2989;
                float _3269 = _2991;
                float _3270 = _2993;
                float _3271 = _2995;
                uint _3272 = _3002;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3282)
                    {
                        frontier_phi_79_pred = _3271;
                        frontier_phi_79_pred_1 = _3270;
                        frontier_phi_79_pred_2 = _3269;
                        frontier_phi_79_pred_3 = _3268;
                        frontier_phi_79_pred_4 = _3267;
                        frontier_phi_79_pred_5 = _3266;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        float _3493 = _3271;
                        uint _3494 = _3281;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3563;
                        vec4 _3578;
                        float _3624;
                        bool _3625;
                        for (;;)
                        {
                            uint _3505 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3550 = (_3505 * 40u) + 16u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3505 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3505 * 40u) + 24u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3599 = (_3505 * 40u) + 28u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3624 = fma(_2840, _3612.z, fma(_2839, _3612.y, _3612.x * _2838)) + _3612.w;
                            _3625 = !((fma(_2840, _3593.z, fma(_2839, _3593.y, _3593.x * _2838)) + _3593.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3625)
                            {
                                float _3652 = _3520.x - _2838;
                                float _3653 = _3520.y - _2839;
                                float _3654 = _3520.z - _2840;
                                float _3655 = dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654));
                                float _3658 = inversesqrt(_3655);
                                float _3659 = _3658 * _3652;
                                float _3660 = _3658 * _3653;
                                float _3661 = _3658 * _3654;
                                float _3665 = 1.0 - (_3655 / (_3521 * _3521));
                                float _4833 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3670 = sqrt(_3655) * _3536.w;
                                float _3672 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                                float _3673 = _3672 * _3672;
                                float _3676 = ((1.0 - _3673) * dot(vec3(_3659, _3660, _3661), vec3(_1082, _1085, _1088))) + _3673;
                                float _3679 = _3670 * _3670;
                                float _3683 = (fma(_2840, _3563.z, fma(_2839, _3563.y, _3563.x * _2838)) + _3563.w) / _3624;
                                float _3684 = (fma(_2840, _3578.z, fma(_2839, _3578.y, _3578.x * _2838)) + _3578.w) / _3624;
                                float _3688 = 1.0 - dot(vec2(_3683, _3684), vec2(_3683, _3684));
                                float _4849 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3690 = _3689 * (((isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0))) * _3666) / ((_3679 * 0.699999988079071044921875) + 1.0));
                                float _3702 = exp2(log2(1.0 / ((_3679 * 3.5) + 5.0)) * 0.25);
                                float _3703 = 1.0 - _1157;
                                float _3710 = sqrt(1.0 - ((1.0 - (_3703 * _3703)) * (1.0 - (_3702 * _3702))));
                                float _3711 = _3710 * _3710;
                                float _3712 = _3711 * _3711;
                                float _3713 = _3659 - _3132;
                                float _3714 = _3660 - _3133;
                                float _3715 = _3661 - _3134;
                                float _3719 = inversesqrt(dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715)));
                                float _3723 = dot(vec3(_1082, _1085, _1088), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4860 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3727 = dot(vec3(_1082, _1085, _1088), vec3(_3719 * _3713, _3719 * _3714, _3719 * _3715));
                                float _4871 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3734 = ((_3730 * _3730) * (_3712 + (-1.0))) + 1.0;
                                float _3735 = _3672 * _3711;
                                float _3736 = _3735 * _3735;
                                float _3742 = ((1.0 - _3736) * dot(vec3(_1082, _1085, _1088), vec3(_3659, _3660, _3661))) + _3736;
                                float _4882 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3744 = 1.0 - _3711;
                                float _3754 = (0.5 / (((_3743 * ((_3726 * _3744) + _3711)) + 9.9999999392252902907785028219223e-09) + (((_3743 * _3744) + _3711) * _3726))) * _3743;
                                float _4893 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3764 = (_3689 * _3666) * (((_3712 * 3.1415927410125732421875) * (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) / ((_3734 * _3734) * ((_3679 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3690 * _3536.y;
                                frontier_phi_85_pred_1 = _3690 * _3536.x;
                                frontier_phi_85_pred_2 = _3764 * _3548.z;
                                frontier_phi_85_pred_3 = _3764 * _3548.y;
                                frontier_phi_85_pred_4 = _3764 * _3548.x;
                                frontier_phi_85_pred_5 = _3690 * _3536.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_85_pred;
                            _3771 = frontier_phi_85_pred_1;
                            _3770 = frontier_phi_85_pred_2;
                            _3769 = frontier_phi_85_pred_3;
                            _3768 = frontier_phi_85_pred_4;
                            _3773 = frontier_phi_85_pred_5;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3480;
                        frontier_phi_79_pred_1 = _3479;
                        frontier_phi_79_pred_2 = _3478;
                        frontier_phi_79_pred_3 = _3477;
                        frontier_phi_79_pred_4 = _3476;
                        frontier_phi_79_pred_5 = _3475;
                    }
                    _3117 = frontier_phi_79_pred;
                    _3115 = frontier_phi_79_pred_1;
                    _3113 = frontier_phi_79_pred_2;
                    _3111 = frontier_phi_79_pred_3;
                    _3109 = frontier_phi_79_pred_4;
                    _3107 = frontier_phi_79_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3107;
                        _3267 = _3109;
                        _3268 = _3111;
                        _3269 = _3113;
                        _3270 = _3115;
                        _3271 = _3117;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3111;
                frontier_phi_60_61_ladder_1 = _3117;
                frontier_phi_60_61_ladder_2 = _3115;
                frontier_phi_60_61_ladder_3 = _3113;
                frontier_phi_60_61_ladder_4 = _3109;
                frontier_phi_60_61_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_60_61_ladder = _2989;
                frontier_phi_60_61_ladder_1 = _2995;
                frontier_phi_60_61_ladder_2 = _2993;
                frontier_phi_60_61_ladder_3 = _2991;
                frontier_phi_60_61_ladder_4 = _2987;
                frontier_phi_60_61_ladder_5 = _2985;
            }
            _3106 = frontier_phi_60_61_ladder_5;
            _3108 = frontier_phi_60_61_ladder_4;
            _3110 = frontier_phi_60_61_ladder;
            _3112 = frontier_phi_60_61_ladder_3;
            _3114 = frontier_phi_60_61_ladder_2;
            _3116 = frontier_phi_60_61_ladder_1;
        }
        float _3121 = isnan(1.0) ? _1141 : (isnan(_1141) ? 1.0 : min(_1141, 1.0));
        _2897 = (_3121 * _3112) + _2333;
        _2899 = (_3121 * _3114) + _2335;
        _2901 = (_3121 * _3116) + _2337;
        _2903 = ((_3106 * _1126) * _3121) + _2678;
        _2905 = ((_3108 * _1128) * _3121) + _2680;
        _2907 = ((_3110 * _1129) * _3121) + _2682;
    }
    else
    {
        _2897 = _2333;
        _2899 = _2335;
        _2901 = _2337;
        _2903 = _2678;
        _2905 = _2680;
        _2907 = _2682;
    }
    float _4909 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4920 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _4931 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _2924 = ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2897 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1141))) + ((_2903 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2899 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1141))) + ((_2905 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2926 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2901 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1141))) + ((_2907 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    uint _2927 = _1101 + 6u;
    float _2935 = _1063 / cbSceneParam._m0[86u].x;
    float _2936 = _1064 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _989 : (isnan(_989) ? cbSceneParam._m0[77u].w : min(_989, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_989 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_989) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _989 : min(cbSceneParam._m0[80u].w, _989));
        float _3011 = _3010 / _989;
        float _3022 = _3011 * _1039;
        float _3023 = _1040 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3026 = _3011 * _1041;
        float _3028 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3023;
        float _3036 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3024 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3223 = ((abs(_3036 / _3024) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3046 * _3178) - exp2(_3046 * _3179)) * _3167))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2955);
        _3048 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3050 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3052 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3054 = _3234 * _2955;
    }
    else
    {
        _3048 = _2952;
        _3050 = _2953;
        _3052 = _2954;
        _3054 = _2955;
    }
    bool _3261;
    vec4 _3064;
    vec4 _3086;
    float _3088;
    float _3092;
    float _3093;
    float _3094;
    float _3095;
    bool _3105;
    for (;;)
    {
        _3064 = cbMatDynParam._m0[0u];
        float _3066 = roundEven(_3064.y);
        bool _3067 = _3066 == 3.0;
        float _3068 = log2(_3054);
        float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * _2924;
        float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * _2925;
        float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * _2926;
        float _3084 = _1052 + (-0.5);
        _3086 = cbMtdParam._m0[1u];
        _3088 = _3086.y * _3084;
        float _3091 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3092 = _3091 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
        _3093 = _3091 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
        _3094 = _3091 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
        _3095 = _3084 * 0.999000012874603271484375;
        _3105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3105)
        {
            if ((cbInstanceData._m0[_1101 + 7u].x + _3095) < 0.5)
            {
                _3261 = true;
                break;
            }
        }
        uint _3202 = _1102 + uint(_3064.w);
        if ((cbInstanceData._m0[_3202].w < 1.0) && ((cbInstanceData._m0[_3202].w + _3095) < 0.5))
        {
            _3261 = true;
            break;
        }
        if ((_3088 + 1.0) < _3086.x)
        {
            _3261 = true;
            break;
        }
        _3261 = false;
        break;
    }
    float _3466;
    if (_3261)
    {
        discard_state = true;
        _3466 = 0.0;
    }
    else
    {
        _3466 = cbInstanceData._m0[_2927].w;
    }
    SV_Target.x = _3092;
    SV_Target.y = _3093;
    SV_Target.z = _3094;
    SV_Target.w = _3466;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
    discard_exit();
}


