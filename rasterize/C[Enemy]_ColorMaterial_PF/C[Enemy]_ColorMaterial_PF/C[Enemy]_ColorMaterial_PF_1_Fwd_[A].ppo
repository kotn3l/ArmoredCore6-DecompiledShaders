#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1433;
float _3810;
float _3811;
float _3812;
float _3813;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _297 = exp2(log2((1.0 - _286) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _313 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _325 = exp2(log2(_313.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _336 = exp2(log2(cbMtdParam._m0[23u].y * _286) * cbMtdParam._m0[22u].y);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _359 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(4.0) ? _360 : (isnan(_360) ? 4.0 : min(_360, 4.0));
    float _374 = floor(_361);
    vec4 _377 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _374));
    vec4 _401 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _412 = cbMtdParam._m0[9u].x * _401.x;
    float _413 = cbMtdParam._m0[9u].y * _401.y;
    float _414 = cbMtdParam._m0[9u].z * _401.z;
    float _421 = (((cbMtdParam._m0[10u].x * _377.x) - _412) * _338) + _412;
    float _422 = (((cbMtdParam._m0[10u].y * _377.y) - _413) * _338) + _413;
    float _423 = (((cbMtdParam._m0[10u].z * _377.z) - _414) * _338) + _414;
    float _429 = exp2(log2(_282.w) * cbMtdParam._m0[23u].w);
    vec4 _442 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _461 = (((cbMtdParam._m0[16u].x * _442.x) - _421) * _429) + _421;
    float _462 = (((cbMtdParam._m0[16u].y * _442.y) - _422) * _429) + _422;
    float _463 = (((cbMtdParam._m0[16u].z * _442.z) - _423) * _429) + _423;
    vec4 _476 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _496 = (((cbMtdParam._m0[19u].x * _476.x) - _461) * _327) + _461;
    float _497 = (((cbMtdParam._m0[19u].y * _476.y) - _462) * _327) + _462;
    float _498 = (((cbMtdParam._m0[19u].z * _476.z) - _463) * _327) + _463;
    vec4 _511 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _536 = (_313.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _511.x) - _496) * _299) + _496);
    float _538 = (_313.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _511.y) - _497) * _299) + _497);
    float _540 = (_313.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _511.z) - _498) * _299) + _498);
    float _544 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _553 = (_544 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _544))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3862 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _561 = ((cbMtdParam._m0[21u].x - _536) * _554) + _536;
    float _562 = ((cbMtdParam._m0[21u].y - _538) * _554) + _538;
    float _563 = ((cbMtdParam._m0[21u].z - _540) * _554) + _540;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _605 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _607 = uint(int(isnan(4.0) ? _605 : (isnan(_605) ? 4.0 : min(_605, 4.0))));
    float _614 = ((_194[_607] - cbMtdParam._m0[22u].z) * _338) + cbMtdParam._m0[22u].z;
    float _617 = ((cbMtdParam._m0[22u].w - _614) * _429) + _614;
    float _620 = ((cbMtdParam._m0[25u].y - _617) * _327) + _617;
    float _623 = ((cbMtdParam._m0[26u].y - _620) * _299) + _620;
    float _625 = _623 - (_623 * _544);
    vec4 _641 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _374));
    vec4 _659 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _667 = cbMtdParam._m0[22u].x + _659.z;
    float _670 = (((_641.z + _193[_607]) - _667) * _338) + _667;
    vec4 _683 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _694 = (((_683.z - _670) + cbMtdParam._m0[28u].z) * _429) + _670;
    float _700 = ((((_286 * 2.0) * _694) - _694) * cbMtdParam._m0[24u].w) + _694;
    vec4 _713 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _724 = (((cbMtdParam._m0[23u].z + _713.z) - _700) * _327) + _700;
    vec4 _737 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _748 = (((_737.z - _724) + cbMtdParam._m0[26u].z) * _299) + _724;
    vec4 _763 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _778 = ((cbMtdParam._m0[27u].z * _544) * ((_763.z * cbMtdParam._m0[27u].y) - _748)) + _748;
    float _790 = ((_641.x - _661) * _338) + _661;
    float _791 = ((_641.y - _662) * _338) + _662;
    float _796 = ((_683.x - _790) * _429) + _790;
    float _797 = ((_683.y - _791) * _429) + _791;
    float _802 = ((_713.x - _796) * _327) + _796;
    float _803 = ((_713.y - _797) * _327) + _797;
    float _812 = ((((_737.x - _802) * _299) + _802) * 2.0) + (-1.0);
    float _813 = ((((_737.y - _803) * _299) + _803) * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _3883 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _819 = sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))));
    float _829 = ((cbMtdParam._m0[25u].z * ((_282.x * 2.0) + (-1.0))) + _812) + ((((_763.x * 2.0) + (-1.0)) * _544) * cbMtdParam._m0[27u].x);
    float _830 = ((cbMtdParam._m0[25u].z * ((_282.y * 2.0) + (-1.0))) + _813) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_763.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _832 = gl_FragCoord.x * 0.125;
    float _834 = gl_FragCoord.y * 0.125;
    float _844 = fma(_819, _229 * NORMAL.x, fma(_830, _236 * TANGENT.x, (_222 * _214) * _829));
    float _847 = fma(_819, _229 * NORMAL.y, fma(_830, _236 * TANGENT.y, (_222 * _215) * _829));
    float _850 = fma(_819, _229 * NORMAL.z, fma(_830, _236 * TANGENT.z, (_222 * _216) * _829));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3894 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _858 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3916 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3927 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3938 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _862 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_832, _834)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    vec4 _943 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_832, _834));
    float _945 = _943.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1115 = sqrt(((_932 * _932) + (_933 * _933)) + (_934 * _934));
        float _1121 = (cbMatDynParam._m0[5u].x * _1115) + cbMatDynParam._m0[5u].y;
        float _3949 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1126 = (cbMatDynParam._m0[5u].z * _1115) + cbMatDynParam._m0[5u].w;
        float _3960 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) - _1122)) + _1122) < ((_945 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _956 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _957 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _975 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _978 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _981 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _994 = uint(roundEven(NORMAL.w)) * 13u;
    uint _995 = _994 + 9u;
    uint _996 = _995 + uint(cbMatDynParam._m0[0u].w);
    float _1002 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_996].x;
    float _1003 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_996].y;
    float _1004 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_996].z;
    float _3971 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1008 = 1.0 - _862;
    float _1009 = _1005 * _1008;
    float _1010 = _1006 * _1008;
    float _1011 = _1007 * _1008;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _862;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _862;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _862;
    float _1019 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    vec4 _1031 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _956, cbSceneParam._m0[86u].y * _957));
    float _1034 = _1031.x * TEXCOORD_3.w;
    float _1035 = dot(vec3(_855, _856, _857), vec3(_939, _940, _941));
    float _1038 = _1035 * 2.0;
    float _1042 = (_1038 * _855) - _939;
    float _1043 = (_1038 * _856) - _940;
    float _1044 = (_1038 * _857) - _941;
    float _1048 = abs(dot(vec3(_939, _940, _941), vec3(_855, _856, _857)));
    float _4004 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1050 = sqrt(_858);
    float _1061 = exp2((_1050 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1050 * 3.0));
    float _1067 = (1.0 - _1061) * ((_1050 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1068 = _1061 * _1050;
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1104, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096));
        float _1161 = fma(_1104, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096));
        float _1165 = fma(_1104, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096));
        float _1190 = _1096 + _855;
        float _1191 = _1100 + _856;
        float _1192 = _1104 + _857;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_855, _856, _857), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4052 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_855, _856, _857), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4085 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_855, _856, _857), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4118 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1104, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096));
        float _1474 = fma(_1104, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096));
        float _1478 = fma(_1104, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096));
        float _1501 = _1096 + _855;
        float _1502 = _1100 + _856;
        float _1503 = _1104 + _857;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_855, _856, _857), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4181 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_855, _856, _857), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4214 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_855, _856, _857), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4247 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1433;
        _1740 = _1433;
        _1741 = _1433;
        _1742 = _1433;
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1042 * 0.5;
    float _1808 = _1043 * 0.5;
    float _1809 = _1044 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1104, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1104, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1104, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1044, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042));
        float _1937 = fma(_1044, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042));
        float _1940 = fma(_1044, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1968 = frontier_phi_19_17_ladder;
        }
        float _2171;
        if (_1937 > 0.0)
        {
            _2171 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2171 = frontier_phi_28_24_ladder;
        }
        float _2425;
        if (_1940 > 0.0)
        {
            _2425 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2425 = frontier_phi_40_35_ladder;
        }
        float _2427 = isnan(_2171) ? _1968 : (isnan(_1968) ? _2171 : min(_1968, _2171));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1934) + _1923;
        float _2433 = (_2428 * _1937) + _1927;
        float _2434 = (_2428 * _1940) + _1931;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2435;
        float _2439 = _2435 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 > _2439) || ((_2433 < _2437) || ((_2432 < _2437) || (_2432 > _2439))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2434, cbModelParam._m0[9u].z, fma(_2433, cbModelParam._m0[9u].y, _2432 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2434, cbModelParam._m0[10u].z, fma(_2433, cbModelParam._m0[10u].y, _2432 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2434, cbModelParam._m0[11u].z, fma(_2433, cbModelParam._m0[11u].y, _2432 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_18_40_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_18_40_ladder_2;
        _1958 = frontier_phi_18_40_ladder_1;
        _1960 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1042, _1043, _1044), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1104, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1104, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1104, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1044, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042));
        float _2033 = fma(_1044, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042));
        float _2036 = fma(_1044, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042));
        float _2176;
        if (_2030 > 0.0)
        {
            _2176 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2176 = frontier_phi_30_26_ladder;
        }
        float _2452;
        if (_2033 > 0.0)
        {
            _2452 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2452 = frontier_phi_42_37_ladder;
        }
        float _2665;
        if (_2036 > 0.0)
        {
            _2665 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2665 = frontier_phi_51_48_ladder;
        }
        float _2667 = isnan(_2452) ? _2176 : (isnan(_2176) ? _2452 : min(_2176, _2452));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2030) + _2019;
        float _2673 = (_2668 * _2033) + _2023;
        float _2674 = (_2668 * _2036) + _2027;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_27_51_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_27_51_ladder_2;
        _2057 = frontier_phi_27_51_ladder_1;
        _2059 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1042, _1043, _1044), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1067 * _1019) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1067 * _1021) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1067 * _1022) + _1068) * _1034) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    uvec4 _2095 = floatBitsToUint(cbInstanceData._m0[_994 + 5u]);
    uint _2097 = _2095.x * 14u;
    uint _2098 = _2097 + 13u;
    float _2105 = _1034 + (-1.0);
    float _2110 = (cbLight._m0[_2098].x * _2105) + 1.0;
    float _2111 = (cbLight._m0[_2098].y * _2105) + 1.0;
    float _2112 = (cbLight._m0[_2098].z * _2105) + 1.0;
    float _2113 = (cbLight._m0[_2098].w * _2105) + 1.0;
    uint _2114 = _2097 + 5u;
    float _2120 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2124 = _2097 + 4u;
    float _2130 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2134 = _2097 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_855, _856, _857));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_855, _856, _857));
    float _4383 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4394 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2114].x * _2120) * _2155) + ((cbLight._m0[_2124].x * _2130) * _2153);
    float _2163 = ((_2120 * cbLight._m0[_2114].y) * _2155) + ((_2130 * cbLight._m0[_2124].y) * _2153);
    float _2164 = ((_2120 * cbLight._m0[_2114].z) * _2155) + ((_2130 * cbLight._m0[_2124].z) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2097 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2170)
    {
        _2181 = _2162;
        _2183 = _2163;
        _2185 = _2164;
    }
    else
    {
        uint _2189 = _2097 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2097 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4405 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2208 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2162;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2163;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2164;
    }
    bool _2188 = _2168.y == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2188)
    {
        _2226 = _2181;
        _2228 = _2183;
        _2230 = _2185;
    }
    else
    {
        uint _2396 = _2097 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_2097 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4421 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2415 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2226 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2181;
        _2228 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2183;
        _2230 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2185;
    }
    uint _2233 = _2097 + 8u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _858) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2097].x + _939;
    float _2249 = cbLight._m0[_2097].y + _940;
    float _2250 = cbLight._m0[_2097].z + _941;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2097].xyz));
    float _4437 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2262 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2263 = dot(vec3(_855, _856, _857), vec3(_2255, _2256, _2257));
    float _4459 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2255, _2256, _2257));
    float _4470 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2247 * _2247;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2284 = 0.959999978542327880859375 - _1016;
    float _2286 = 0.959999978542327880859375 - _1017;
    float _2287 = 0.959999978542327880859375 - _1018;
    float _2294 = 1.0 - _2247;
    float _2305 = (0.5 / (((_2262 * ((_2261 * _2294) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2294) + _2247) * _2261))) * _2261;
    float _4481 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    uint _2318 = _2097 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _858) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2134].x + _939;
    float _2332 = cbLight._m0[_2134].y + _940;
    float _2333 = cbLight._m0[_2134].z + _941;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2134].xyz));
    float _4492 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2345 = dot(vec3(_855, _856, _857), vec3(_2338, _2339, _2340));
    float _4503 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2338, _2339, _2340));
    float _4514 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2371 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2262 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2371) + _2330) * _2344))) * _2344;
    float _4525 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2393 = (((((_2364 * _2284) + _1019) * cbLight._m0[_2318].x) * _2383) * _2120) + (((((_2283 * _2284) + _1019) * cbLight._m0[_2233].x) * _2307) * _2130);
    float _2394 = (((((_2364 * _2286) + _1021) * cbLight._m0[_2318].y) * _2383) * _2120) + (((((_2283 * _2286) + _1021) * cbLight._m0[_2233].y) * _2307) * _2130);
    float _2395 = (((((_2364 * _2287) + _1022) * cbLight._m0[_2318].z) * _2383) * _2120) + (((((_2283 * _2287) + _1022) * cbLight._m0[_2233].z) * _2307) * _2130);
    float _2457;
    float _2459;
    float _2461;
    if (_2170)
    {
        _2457 = _2393;
        _2459 = _2394;
        _2461 = _2395;
    }
    else
    {
        uint _2463 = _2097 + 2u;
        uint _2467 = _2097 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _858) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _939;
        float _2484 = cbLight._m0[_2463].y + _940;
        float _2485 = cbLight._m0[_2463].z + _941;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2463].xyz));
        float _4536 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2497 = dot(vec3(_855, _856, _857), vec3(_2490, _2491, _2492));
        float _4547 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4558 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2262 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2523) + _2482) * _2496))) * _2496;
        float _4569 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2457 = (((((_2516 * _2284) + _1019) * cbLight._m0[_2467].x) * _2535) * _2536) + _2393;
        _2459 = (((((_2516 * _2286) + _1021) * cbLight._m0[_2467].y) * _2535) * _2536) + _2394;
        _2461 = (((((_2516 * _2287) + _1022) * cbLight._m0[_2467].z) * _2535) * _2536) + _2395;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2188)
    {
        _2571 = _2457;
        _2573 = _2459;
        _2575 = _2461;
    }
    else
    {
        uint _2582 = _2097 + 3u;
        uint _2586 = _2097 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _858) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _939;
        float _2603 = cbLight._m0[_2582].y + _940;
        float _2604 = cbLight._m0[_2582].z + _941;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2582].xyz));
        float _4585 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2616 = dot(vec3(_855, _856, _857), vec3(_2609, _2610, _2611));
        float _4596 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4607 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2262 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2642) + _2601) * _2615))) * _2615;
        float _4618 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2571 = (((((_2635 * _2284) + _1019) * cbLight._m0[_2586].x) * _2654) * _2655) + _2457;
        _2573 = (((((_2635 * _2286) + _1021) * cbLight._m0[_2586].y) * _2654) * _2655) + _2459;
        _2575 = (((((_2635 * _2287) + _1022) * cbLight._m0[_2586].z) * _2654) * _2655) + _2461;
    }
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_2095.y == 0u)
    {
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2730;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2730;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2730;
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.x;
        uint _2757 = uint((float(_2745.y) * floor(float(uint(cbSceneParam._m0[85u].y * _957) / _2746))) + floor(float(uint(cbSceneParam._m0[85u].x * _956) / _2746)));
        float _2767 = (log2(_2733 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2768 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        uint _2771 = uint(isnan(14.0) ? _2768 : (isnan(_2768) ? 14.0 : min(_2768, 14.0)));
        uvec4 _2776 = texelFetch(g_lightClusterGridBuffer, int(((_2771 << 2u) + (_2757 << 6u)) >> 2u));
        uint _2777 = _2776.x;
        uint _2778 = _2745.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2778 >> 4u) & 15u)) + 4294967295u) & _2777) == 0u) || ((_2778 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            uint _3037 = 0u;
            uint _3046;
            bool _3047;
            for (;;)
            {
                _3046 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                _3047 = _3046 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3047)
                {
                    frontier_phi_68_pred = _3031;
                    frontier_phi_68_pred_1 = _3036;
                    frontier_phi_68_pred_2 = _3035;
                    frontier_phi_68_pred_3 = _3034;
                    frontier_phi_68_pred_4 = _3033;
                    frontier_phi_68_pred_5 = _3032;
                }
                else
                {
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    uint _3182;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3046;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    for (;;)
                    {
                        uint _3186 = uint(findLSB(_3182)) + (_3037 << 5u);
                        uint _3183 = (_3182 + 4294967295u) & _3182;
                        uint _3188 = _3186 * 48u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3208 = (_3186 * 48u) + 4u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3227 = (_3186 * 48u) + 8u;
                        vec3 _3238 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x));
                        float _3242 = _3202.x - _2731;
                        float _3243 = _3202.y - _2732;
                        float _3244 = _3202.z - _2733;
                        float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                        float _3248 = inversesqrt(_3245);
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3252 = dot(vec3(_975, _978, _981), vec3(_3249, _3250, _3251));
                        float _3257 = 1.0 - (_3245 * _3202.w);
                        float _4644 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3259 = sqrt(_3245) * _3221.w;
                        float _3262 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3252) + _3263;
                        float _3269 = _3259 * _3259;
                        float _3273 = ((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3258) / ((_3269 * 0.699999988079071044921875) + 1.0);
                        float _3277 = (-0.0) - _2731;
                        float _3278 = (-0.0) - _2732;
                        float _3279 = (-0.0) - _2733;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3294 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                        float _3295 = 1.0 - _1050;
                        float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                        float _3303 = _3302 * _3302;
                        float _3304 = _3303 * _3303;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3315 = dot(vec3(_975, _978, _981), vec3(_3284, _3285, _3286));
                        float _4660 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3319 = dot(vec3(_975, _978, _981), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                        float _4671 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                        float _3327 = _3262 * _3303;
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3252) + _3328;
                        float _4682 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3333 = 1.0 - _3303;
                        float _3343 = (0.5 / (((_3332 * ((_3318 * _3333) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3303) * _3318))) * _3332;
                        float _4693 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3354 = (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3326 * _3326) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125))) * _3258;
                        _3106 = (_3273 * _3221.x) + _3179;
                        _3107 = (_3273 * _3221.y) + _3180;
                        _3108 = (_3273 * _3221.z) + _3181;
                        _3103 = (_3354 * _3238.x) + _3176;
                        _3104 = (_3354 * _3238.y) + _3177;
                        _3105 = (_3354 * _3238.z) + _3178;
                        if (_3183 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3183;
                        }
                    }
                    frontier_phi_68_pred = _3103;
                    frontier_phi_68_pred_1 = _3108;
                    frontier_phi_68_pred_2 = _3107;
                    frontier_phi_68_pred_3 = _3106;
                    frontier_phi_68_pred_4 = _3105;
                    frontier_phi_68_pred_5 = _3104;
                }
                _2879 = frontier_phi_68_pred;
                _2889 = frontier_phi_68_pred_1;
                _2887 = frontier_phi_68_pred_2;
                _2885 = frontier_phi_68_pred_3;
                _2883 = frontier_phi_68_pred_4;
                _2881 = frontier_phi_68_pred_5;
                uint _3038 = _3037 + 1u;
                if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3031 = _2879;
                    _3032 = _2881;
                    _3033 = _2883;
                    _3034 = _2885;
                    _3035 = _2887;
                    _3036 = _2889;
                    _3037 = _3038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((4294967295u << _2895) & _2777) == 0u)
        {
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
        }
        else
        {
            float _3024 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
            float _3025 = _3024 * _2731;
            float _3026 = _3024 * _2732;
            float _3027 = _3024 * _2733;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3159 = _2878;
                float _3160 = _2880;
                float _3161 = _2882;
                float _3162 = _2884;
                float _3163 = _2886;
                float _3164 = _2888;
                uint _3165 = _2895;
                uint _3174;
                bool _3175;
                for (;;)
                {
                    _3174 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                    _3175 = _3174 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3175)
                    {
                        frontier_phi_79_pred = _3164;
                        frontier_phi_79_pred_1 = _3163;
                        frontier_phi_79_pred_2 = _3162;
                        frontier_phi_79_pred_3 = _3161;
                        frontier_phi_79_pred_4 = _3160;
                        frontier_phi_79_pred_5 = _3159;
                    }
                    else
                    {
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        uint _3387 = _3174;
                        uint _3388;
                        vec4 _3413;
                        float _3414;
                        vec4 _3429;
                        vec3 _3441;
                        vec4 _3456;
                        vec4 _3471;
                        float _3517;
                        bool _3518;
                        for (;;)
                        {
                            uint _3398 = ((_3165 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3387));
                            _3388 = (_3387 + 4294967295u) & _3387;
                            uint _3400 = _3398 * 40u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3414 = _3413.w;
                            uint _3416 = (_3398 * 40u) + 4u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3398 * 40u) + 8u;
                            _3441 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x));
                            uint _3443 = (_3398 * 40u) + 16u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3398 * 40u) + 20u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3398 * 40u) + 24u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3492 = (_3398 * 40u) + 28u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            _3517 = fma(_2733, _3505.z, fma(_2732, _3505.y, _3505.x * _2731)) + _3505.w;
                            _3518 = !((fma(_2733, _3486.z, fma(_2732, _3486.y, _3486.x * _2731)) + _3486.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3518)
                            {
                                float _3545 = _3413.x - _2731;
                                float _3546 = _3413.y - _2732;
                                float _3547 = _3413.z - _2733;
                                float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                                float _3551 = inversesqrt(_3548);
                                float _3552 = _3551 * _3545;
                                float _3553 = _3551 * _3546;
                                float _3554 = _3551 * _3547;
                                float _3558 = 1.0 - (_3548 / (_3414 * _3414));
                                float _4704 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3563 = sqrt(_3548) * _3429.w;
                                float _3565 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                                float _3566 = _3565 * _3565;
                                float _3569 = ((1.0 - _3566) * dot(vec3(_3552, _3553, _3554), vec3(_975, _978, _981))) + _3566;
                                float _3572 = _3563 * _3563;
                                float _3576 = (fma(_2733, _3456.z, fma(_2732, _3456.y, _3456.x * _2731)) + _3456.w) / _3517;
                                float _3577 = (fma(_2733, _3471.z, fma(_2732, _3471.y, _3471.x * _2731)) + _3471.w) / _3517;
                                float _3581 = 1.0 - dot(vec2(_3576, _3577), vec2(_3576, _3577));
                                float _4720 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3583 = _3582 * (((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3559) / ((_3572 * 0.699999988079071044921875) + 1.0));
                                float _3595 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                                float _3596 = 1.0 - _1050;
                                float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                                float _3604 = _3603 * _3603;
                                float _3605 = _3604 * _3604;
                                float _3606 = _3552 - _3025;
                                float _3607 = _3553 - _3026;
                                float _3608 = _3554 - _3027;
                                float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                                float _3616 = dot(vec3(_975, _978, _981), vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027));
                                float _4731 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3620 = dot(vec3(_975, _978, _981), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                                float _4742 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                                float _3628 = _3565 * _3604;
                                float _3629 = _3628 * _3628;
                                float _3635 = ((1.0 - _3629) * dot(vec3(_975, _978, _981), vec3(_3552, _3553, _3554))) + _3629;
                                float _4753 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3637 = 1.0 - _3604;
                                float _3647 = (0.5 / (((_3636 * ((_3619 * _3637) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3604) * _3619))) * _3636;
                                float _4764 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = (_3582 * _3559) * (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3627 * _3627) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3583 * _3429.y;
                                frontier_phi_85_pred_1 = _3583 * _3429.x;
                                frontier_phi_85_pred_2 = _3657 * _3441.z;
                                frontier_phi_85_pred_3 = _3657 * _3441.y;
                                frontier_phi_85_pred_4 = _3657 * _3441.x;
                                frontier_phi_85_pred_5 = _3583 * _3429.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3665 = frontier_phi_85_pred;
                            _3664 = frontier_phi_85_pred_1;
                            _3663 = frontier_phi_85_pred_2;
                            _3662 = frontier_phi_85_pred_3;
                            _3661 = frontier_phi_85_pred_4;
                            _3666 = frontier_phi_85_pred_5;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            if (_3388 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3388;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3373;
                        frontier_phi_79_pred_1 = _3372;
                        frontier_phi_79_pred_2 = _3371;
                        frontier_phi_79_pred_3 = _3370;
                        frontier_phi_79_pred_4 = _3369;
                        frontier_phi_79_pred_5 = _3368;
                    }
                    _3010 = frontier_phi_79_pred;
                    _3008 = frontier_phi_79_pred_1;
                    _3006 = frontier_phi_79_pred_2;
                    _3004 = frontier_phi_79_pred_3;
                    _3002 = frontier_phi_79_pred_4;
                    _3000 = frontier_phi_79_pred_5;
                    uint _3166 = _3165 + 1u;
                    if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3159 = _3000;
                        _3160 = _3002;
                        _3161 = _3004;
                        _3162 = _3006;
                        _3163 = _3008;
                        _3164 = _3010;
                        _3165 = _3166;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3004;
                frontier_phi_60_61_ladder_1 = _3010;
                frontier_phi_60_61_ladder_2 = _3008;
                frontier_phi_60_61_ladder_3 = _3006;
                frontier_phi_60_61_ladder_4 = _3002;
                frontier_phi_60_61_ladder_5 = _3000;
            }
            else
            {
                frontier_phi_60_61_ladder = _2882;
                frontier_phi_60_61_ladder_1 = _2888;
                frontier_phi_60_61_ladder_2 = _2886;
                frontier_phi_60_61_ladder_3 = _2884;
                frontier_phi_60_61_ladder_4 = _2880;
                frontier_phi_60_61_ladder_5 = _2878;
            }
            _2999 = frontier_phi_60_61_ladder_5;
            _3001 = frontier_phi_60_61_ladder_4;
            _3003 = frontier_phi_60_61_ladder;
            _3005 = frontier_phi_60_61_ladder_3;
            _3007 = frontier_phi_60_61_ladder_2;
            _3009 = frontier_phi_60_61_ladder_1;
        }
        float _3014 = isnan(1.0) ? _1034 : (isnan(_1034) ? 1.0 : min(_1034, 1.0));
        _2790 = (_3014 * _3005) + _2226;
        _2792 = (_3014 * _3007) + _2228;
        _2794 = (_3014 * _3009) + _2230;
        _2796 = ((_2999 * _1019) * _3014) + _2571;
        _2798 = ((_3001 * _1021) * _3014) + _2573;
        _2800 = ((_3003 * _1022) * _3014) + _2575;
    }
    else
    {
        _2790 = _2226;
        _2792 = _2228;
        _2794 = _2230;
        _2796 = _2571;
        _2798 = _2573;
        _2800 = _2575;
    }
    float _4780 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4791 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4802 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2817 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2790 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1034))) + ((_2796 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _2818 = ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2792 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1034))) + ((_2798 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    float _2819 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2794 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1034))) + ((_2800 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1865)) * cbPerFrame._m0[3u].x);
    uint _2820 = _994 + 6u;
    float _2828 = _956 / cbSceneParam._m0[86u].x;
    float _2829 = _957 / cbSceneParam._m0[86u].y;
    vec4 _2843 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2845 = _2843.x;
    float _2846 = _2843.y;
    float _2847 = _2843.z;
    float _2848 = _2843.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2904 = _2903 / _882;
        float _2915 = _2904 * _932;
        float _2916 = _933 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2919 = _2904 * _934;
        float _2921 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2916;
        float _2929 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3116;
        if (abs((_2917 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3116 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3062 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3116 = ((abs(_2929 / _2917) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2939 * _3071) - exp2(_2939 * _3072)) * _3060))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3118 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, 1.0), 0.0);
        float _3127 = exp2((_3116 * (-1.44269502162933349609375)) * (1.0 - _3118.w));
        float _3128 = log2(_3127);
        float _3144 = log2(_2848);
        _2941 = (exp2(_3144 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].x)) * _3118.x) / cbSceneParam._m0[78u].x)) + _2845;
        _2943 = (exp2(_3144 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].y)) * _3118.y) / cbSceneParam._m0[78u].y)) + _2846;
        _2945 = (exp2(_3144 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].z)) * _3118.z) / cbSceneParam._m0[78u].z)) + _2847;
        _2947 = _3127 * _2848;
    }
    else
    {
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
        _2947 = _2848;
    }
    bool _3154;
    vec4 _2957;
    vec4 _2979;
    float _2981;
    float _2985;
    float _2986;
    float _2987;
    float _2988;
    bool _2998;
    for (;;)
    {
        _2957 = cbMatDynParam._m0[0u];
        float _2959 = roundEven(_2957.y);
        bool _2960 = _2959 == 3.0;
        float _2961 = log2(_2947);
        float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * _2817;
        float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * _2818;
        float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * _2819;
        float _2977 = _945 + (-0.5);
        _2979 = cbMtdParam._m0[1u];
        _2981 = _2979.y * _2977;
        float _2984 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2985 = _2984 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
        _2986 = _2984 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
        _2987 = _2984 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
        _2988 = _2977 * 0.999000012874603271484375;
        _2998 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2998)
        {
            if ((cbInstanceData._m0[_994 + 7u].x + _2988) < 0.5)
            {
                _3154 = true;
                break;
            }
        }
        uint _3095 = _995 + uint(_2957.w);
        if ((cbInstanceData._m0[_3095].w < 1.0) && ((cbInstanceData._m0[_3095].w + _2988) < 0.5))
        {
            _3154 = true;
            break;
        }
        if ((_2981 + 1.0) < _2979.x)
        {
            _3154 = true;
            break;
        }
        _3154 = false;
        break;
    }
    float _3359;
    if (_3154)
    {
        discard_state = true;
        _3359 = 0.0;
    }
    else
    {
        _3359 = cbInstanceData._m0[_2820].w;
    }
    SV_Target.x = _2985;
    SV_Target.y = _2986;
    SV_Target.z = _2987;
    SV_Target.w = _3359;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2820].w;
    discard_exit();
}


