#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1382;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _297 = exp2(log2((1.0 - _286) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _313 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _325 = exp2(log2(_313.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _336 = exp2(log2(cbMtdParam._m0[23u].y * _286) * cbMtdParam._m0[22u].y);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _359 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(4.0) ? _360 : (isnan(_360) ? 4.0 : min(_360, 4.0));
    float _374 = floor(_361);
    vec4 _377 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _374));
    vec4 _401 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _412 = cbMtdParam._m0[9u].x * _401.x;
    float _413 = cbMtdParam._m0[9u].y * _401.y;
    float _414 = cbMtdParam._m0[9u].z * _401.z;
    float _421 = (((cbMtdParam._m0[10u].x * _377.x) - _412) * _338) + _412;
    float _422 = (((cbMtdParam._m0[10u].y * _377.y) - _413) * _338) + _413;
    float _423 = (((cbMtdParam._m0[10u].z * _377.z) - _414) * _338) + _414;
    float _429 = exp2(log2(_282.w) * cbMtdParam._m0[23u].w);
    vec4 _442 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _461 = (((cbMtdParam._m0[16u].x * _442.x) - _421) * _429) + _421;
    float _462 = (((cbMtdParam._m0[16u].y * _442.y) - _422) * _429) + _422;
    float _463 = (((cbMtdParam._m0[16u].z * _442.z) - _423) * _429) + _423;
    vec4 _476 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _496 = (((cbMtdParam._m0[19u].x * _476.x) - _461) * _327) + _461;
    float _497 = (((cbMtdParam._m0[19u].y * _476.y) - _462) * _327) + _462;
    float _498 = (((cbMtdParam._m0[19u].z * _476.z) - _463) * _327) + _463;
    vec4 _511 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _536 = (_313.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _511.x) - _496) * _299) + _496);
    float _538 = (_313.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _511.y) - _497) * _299) + _497);
    float _540 = (_313.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _511.z) - _498) * _299) + _498);
    float _544 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _553 = (_544 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _544))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4029 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _561 = ((cbMtdParam._m0[21u].x - _536) * _554) + _536;
    float _562 = ((cbMtdParam._m0[21u].y - _538) * _554) + _538;
    float _563 = ((cbMtdParam._m0[21u].z - _540) * _554) + _540;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _605 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _607 = uint(int(isnan(4.0) ? _605 : (isnan(_605) ? 4.0 : min(_605, 4.0))));
    float _614 = ((_194[_607] - cbMtdParam._m0[22u].z) * _338) + cbMtdParam._m0[22u].z;
    float _617 = ((cbMtdParam._m0[22u].w - _614) * _429) + _614;
    float _620 = ((cbMtdParam._m0[25u].y - _617) * _327) + _617;
    float _623 = ((cbMtdParam._m0[26u].y - _620) * _299) + _620;
    float _625 = _623 - (_623 * _544);
    vec4 _641 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _374));
    vec4 _659 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _667 = cbMtdParam._m0[22u].x + _659.z;
    float _670 = (((_641.z + _193[_607]) - _667) * _338) + _667;
    vec4 _683 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _694 = (((_683.z - _670) + cbMtdParam._m0[28u].z) * _429) + _670;
    float _700 = ((((_286 * 2.0) * _694) - _694) * cbMtdParam._m0[24u].w) + _694;
    vec4 _713 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _724 = (((cbMtdParam._m0[23u].z + _713.z) - _700) * _327) + _700;
    vec4 _737 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _748 = (((_737.z - _724) + cbMtdParam._m0[26u].z) * _299) + _724;
    vec4 _763 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _778 = ((cbMtdParam._m0[27u].z * _544) * ((_763.z * cbMtdParam._m0[27u].y) - _748)) + _748;
    float _790 = ((_641.x - _661) * _338) + _661;
    float _791 = ((_641.y - _662) * _338) + _662;
    float _796 = ((_683.x - _790) * _429) + _790;
    float _797 = ((_683.y - _791) * _429) + _791;
    float _802 = ((_713.x - _796) * _327) + _796;
    float _803 = ((_713.y - _797) * _327) + _797;
    float _812 = ((((_737.x - _802) * _299) + _802) * 2.0) + (-1.0);
    float _813 = ((((_737.y - _803) * _299) + _803) * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _4050 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _819 = sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))));
    float _829 = ((cbMtdParam._m0[25u].z * ((_282.x * 2.0) + (-1.0))) + _812) + ((((_763.x * 2.0) + (-1.0)) * _544) * cbMtdParam._m0[27u].x);
    float _830 = ((cbMtdParam._m0[25u].z * ((_282.y * 2.0) + (-1.0))) + _813) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_763.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _833 = fma(_819, _229 * NORMAL.x, fma(_830, _236 * TANGENT.x, (_222 * _214) * _829));
    float _836 = fma(_819, _229 * NORMAL.y, fma(_830, _236 * TANGENT.y, (_222 * _215) * _829));
    float _839 = fma(_819, _229 * NORMAL.z, fma(_830, _236 * TANGENT.z, (_222 * _216) * _829));
    float _843 = inversesqrt(dot(vec3(_833, _836, _839), vec3(_833, _836, _839)));
    float _844 = _843 * _833;
    float _845 = _843 * _836;
    float _846 = _843 * _839;
    float _4061 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _847 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4083 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4094 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4105 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _851 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_846, cbSceneParam._m0[5u].z, fma(_845, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _844));
    float _954 = fma(_846, cbSceneParam._m0[6u].z, fma(_845, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _844));
    float _957 = fma(_846, cbSceneParam._m0[7u].z, fma(_845, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _844));
    uint _970 = uint(roundEven(NORMAL.w)) * 13u;
    uint _972 = (_970 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_972].z;
    float _4116 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _984 = 1.0 - _851;
    float _985 = _981 * _984;
    float _986 = _982 * _984;
    float _987 = _983 * _984;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _851;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _851;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _851;
    float _995 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _1010 = _1007.x * TEXCOORD_3.w;
    float _1011 = dot(vec3(_844, _845, _846), vec3(_924, _925, _926));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _844) - _924;
    float _1019 = (_1014 * _845) - _925;
    float _1020 = (_1014 * _846) - _926;
    float _1024 = abs(dot(vec3(_924, _925, _926), vec3(_844, _845, _846)));
    float _4149 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_847);
    float _1037 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1026;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1110 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1114 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1139 = _1072 + _844;
        float _1140 = _1076 + _845;
        float _1141 = _1080 + _846;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_844, _845, _846), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4197 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_844, _845, _846), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4230 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_844, _845, _846), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4263 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1423 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1427 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1450 = _1072 + _844;
        float _1451 = _1076 + _845;
        float _1452 = _1080 + _846;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_844, _845, _846), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4326 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_844, _845, _846), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4359 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_844, _845, _846), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4392 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1382;
        _1689 = _1382;
        _1690 = _1382;
        _1691 = _1382;
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1394)) + _1394;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1395)) + _1395;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1396)) + _1396;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _1018 * 0.5;
    float _1757 = _1019 * 0.5;
    float _1758 = _1020 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _847);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1886 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1889 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1917 = frontier_phi_14_12_ladder;
        }
        float _2089;
        if (_1886 > 0.0)
        {
            _2089 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2089 = frontier_phi_23_19_ladder;
        }
        float _2384;
        if (_1889 > 0.0)
        {
            _2384 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2384 = frontier_phi_35_30_ladder;
        }
        float _2386 = isnan(_2089) ? _1917 : (isnan(_1917) ? _2089 : min(_1917, _2089));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1883) + _1872;
        float _2392 = (_2387 * _1886) + _1876;
        float _2393 = (_2387 * _1889) + _1880;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_13_35_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_13_35_ladder_2;
        _1907 = frontier_phi_13_35_ladder_1;
        _1909 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _847);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _1982 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _1985 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2094;
        if (_1979 > 0.0)
        {
            _2094 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2094 = frontier_phi_25_21_ladder;
        }
        float _2411;
        if (_1982 > 0.0)
        {
            _2411 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2411 = frontier_phi_37_32_ladder;
        }
        float _2749;
        if (_1985 > 0.0)
        {
            _2749 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2749 = frontier_phi_47_44_ladder;
        }
        float _2751 = isnan(_2411) ? _2094 : (isnan(_2094) ? _2411 : min(_2094, _2411));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1979) + _1968;
        float _2757 = (_2752 * _1982) + _1972;
        float _2758 = (_2752 * _1985) + _1976;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_22_47_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_22_47_ladder_2;
        _2006 = frontier_phi_22_47_ladder_1;
        _2008 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1914);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1043 * _995) + _1044) * _1010) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1043 * _997) + _1044) * _1010) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1043 * _998) + _1044) * _1010) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2230;
    float _2231;
    float _2232;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4518 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2223 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2230 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
        _2231 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
        _2232 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2230 = 1.0;
        _2231 = 1.0;
        _2232 = 1.0;
    }
    float _2296;
    float _2298;
    float _2300;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2284 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2285 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2284;
        float _2286 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2284;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2285 >= cbSceneParam._m0[64u].x) && (_2286 >= cbSceneParam._m0[64u].y)) && (_2285 <= cbSceneParam._m0[64u].z)) && (_2286 <= cbSceneParam._m0[64u].w))
        {
            float _2424 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2284;
            float _2428 = isnan(cbSceneParam._m0[41u].w) ? _2424 : (isnan(_2424) ? cbSceneParam._m0[41u].w : max(_2424, cbSceneParam._m0[41u].w));
            float _2471 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4534 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
            float _2478 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2285, cbSceneParam._m0[33u].w + _2286), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2285, _2286 - cbSceneParam._m0[33u].z), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].z, _2286 - cbSceneParam._m0[33u].w), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2286), _2428), 0.0)).x), vec4(0.25)));
            float _2482 = 1.0 - (_2478 * cbSceneParam._m0[34u].x);
            float _2483 = 1.0 - (_2478 * cbSceneParam._m0[34u].y);
            float _2484 = 1.0 - (_2478 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
            frontier_phi_34_33_ladder_1 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_34_33_ladder_2 = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
        }
        else
        {
            frontier_phi_34_33_ladder = _2232;
            frontier_phi_34_33_ladder_1 = _2231;
            frontier_phi_34_33_ladder_2 = _2230;
        }
        _2296 = frontier_phi_34_33_ladder_2;
        _2298 = frontier_phi_34_33_ladder_1;
        _2300 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2296 = _2230;
        _2298 = _2231;
        _2300 = _2232;
    }
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_970 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2315 = _1010 + (-1.0);
    float _2320 = (cbLight._m0[_2308].x * _2315) + 1.0;
    float _2321 = (cbLight._m0[_2308].y * _2315) + 1.0;
    float _2322 = (cbLight._m0[_2308].z * _2315) + 1.0;
    float _2323 = (cbLight._m0[_2308].w * _2315) + 1.0;
    uint _2324 = _2307 + 5u;
    float _2330 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2334 = _2307 + 4u;
    float _2343 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2347 = _2307 | 1u;
    float _2358 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_844, _845, _846));
    float _2361 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_844, _845, _846));
    float _4570 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _4581 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2366 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2368 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * 0.3183098733425140380859375;
    float _2375 = ((cbLight._m0[_2324].x * _2330) * _2368) + (((cbLight._m0[_2334].x * _2296) * _2343) * _2366);
    float _2376 = ((_2330 * cbLight._m0[_2324].y) * _2368) + (((cbLight._m0[_2334].y * _2298) * _2343) * _2366);
    float _2377 = ((_2330 * cbLight._m0[_2324].z) * _2368) + (((cbLight._m0[_2334].z * _2300) * _2343) * _2366);
    uvec4 _2381 = floatBitsToUint(cbLight._m0[_2307 + 12u]);
    bool _2383 = _2381.x == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2383)
    {
        _2485 = _2375;
        _2487 = _2376;
        _2489 = _2377;
    }
    else
    {
        uint _2493 = _2307 + 6u;
        float _2509 = (dot(vec3(cbLight._m0[_2307 + 2u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4592 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2512 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2485 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2375;
        _2487 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2376;
        _2489 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2377;
    }
    bool _2492 = _2381.y == 0u;
    float _2547;
    float _2549;
    float _2551;
    if (_2492)
    {
        _2547 = _2485;
        _2549 = _2487;
        _2551 = _2489;
    }
    else
    {
        uint _2720 = _2307 + 7u;
        float _2736 = (dot(vec3(cbLight._m0[_2307 + 3u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2737 = _2736 * _2736;
        float _4608 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2738 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2739 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2547 = (((cbLight._m0[_2720].x * 0.3183098733425140380859375) * _2738) * _2739) + _2485;
        _2549 = (((cbLight._m0[_2720].y * 0.3183098733425140380859375) * _2738) * _2739) + _2487;
        _2551 = (((cbLight._m0[_2720].z * 0.3183098733425140380859375) * _2738) * _2739) + _2489;
    }
    uint _2554 = _2307 + 8u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _847) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2307].x + _924;
    float _2570 = cbLight._m0[_2307].y + _925;
    float _2571 = cbLight._m0[_2307].z + _926;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2307].xyz));
    float _4624 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _4635 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2583 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2584 = dot(vec3(_844, _845, _846), vec3(_2576, _2577, _2578));
    float _4646 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2576, _2577, _2578));
    float _4657 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2568 * _2568;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2605 = 0.959999978542327880859375 - _992;
    float _2607 = 0.959999978542327880859375 - _993;
    float _2608 = 0.959999978542327880859375 - _994;
    float _2615 = 1.0 - _2568;
    float _2626 = (0.5 / (((_2583 * ((_2582 * _2615) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2615) + _2568) * _2582))) * _2582;
    float _4668 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    uint _2642 = _2307 + 9u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _847) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2347].x + _924;
    float _2656 = cbLight._m0[_2347].y + _925;
    float _2657 = cbLight._m0[_2347].z + _926;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2347].xyz));
    float _4679 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2669 = dot(vec3(_844, _845, _846), vec3(_2662, _2663, _2664));
    float _4690 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2673 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2662, _2663, _2664));
    float _4701 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2677 = _2654 * _2654;
    float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
    float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2695 = 1.0 - _2654;
    float _2705 = (0.5 / (((_2583 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2695) + _2654) * _2668))) * _2668;
    float _4712 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2707 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
    float _2717 = (((((_2688 * _2605) + _995) * cbLight._m0[_2642].x) * _2707) * _2330) + ((((cbLight._m0[_2554].x * _2296) * ((_2604 * _2605) + _995)) * _2628) * _2343);
    float _2718 = (((((_2688 * _2607) + _997) * cbLight._m0[_2642].y) * _2707) * _2330) + ((((cbLight._m0[_2554].y * _2298) * ((_2604 * _2607) + _997)) * _2628) * _2343);
    float _2719 = (((((_2688 * _2608) + _998) * cbLight._m0[_2642].z) * _2707) * _2330) + ((((cbLight._m0[_2554].z * _2300) * ((_2604 * _2608) + _998)) * _2628) * _2343);
    float _2775;
    float _2777;
    float _2779;
    if (_2383)
    {
        _2775 = _2717;
        _2777 = _2718;
        _2779 = _2719;
    }
    else
    {
        uint _2781 = _2307 + 2u;
        uint _2785 = _2307 + 10u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _847) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _924;
        float _2802 = cbLight._m0[_2781].y + _925;
        float _2803 = cbLight._m0[_2781].z + _926;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2781].xyz));
        float _4723 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2815 = dot(vec3(_844, _845, _846), vec3(_2808, _2809, _2810));
        float _4734 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4745 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2841 = 1.0 - _2800;
        float _2851 = (0.5 / (((_2583 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2841) + _2800) * _2814))) * _2814;
        float _4756 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2775 = (((((_2834 * _2605) + _995) * cbLight._m0[_2785].x) * _2853) * _2854) + _2717;
        _2777 = (((((_2834 * _2607) + _997) * cbLight._m0[_2785].y) * _2853) * _2854) + _2718;
        _2779 = (((((_2834 * _2608) + _998) * cbLight._m0[_2785].z) * _2853) * _2854) + _2719;
    }
    float _2885;
    float _2887;
    float _2889;
    if (_2492)
    {
        _2885 = _2775;
        _2887 = _2777;
        _2889 = _2779;
    }
    else
    {
        uint _2896 = _2307 + 3u;
        uint _2900 = _2307 + 11u;
        float _2914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2896].w)) * _847) * 0.949999988079071044921875);
        float _2915 = _2914 * _2914;
        float _2916 = cbLight._m0[_2896].x + _924;
        float _2917 = cbLight._m0[_2896].y + _925;
        float _2918 = cbLight._m0[_2896].z + _926;
        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
        float _2923 = _2922 * _2916;
        float _2924 = _2922 * _2917;
        float _2925 = _2922 * _2918;
        float _2926 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2896].xyz));
        float _4772 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2930 = dot(vec3(_844, _845, _846), vec3(_2923, _2924, _2925));
        float _4783 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2934 = dot(vec3(cbLight._m0[_2896].xyz), vec3(_2923, _2924, _2925));
        float _4794 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2938 = _2915 * _2915;
        float _2942 = ((_2933 * _2933) * (_2938 + (-1.0))) + 1.0;
        float _2949 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
        float _2956 = 1.0 - _2915;
        float _2966 = (0.5 / (((_2583 * ((_2929 * _2956) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2956) + _2915) * _2929))) * _2929;
        float _4805 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2968 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2938 / ((_2942 * _2942) * 3.141590118408203125));
        float _2969 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2885 = (((((_2949 * _2605) + _995) * cbLight._m0[_2900].x) * _2968) * _2969) + _2775;
        _2887 = (((((_2949 * _2607) + _997) * cbLight._m0[_2900].y) * _2968) * _2969) + _2777;
        _2889 = (((((_2949 * _2608) + _998) * cbLight._m0[_2900].z) * _2968) * _2969) + _2779;
    }
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_2305.y == 0u)
    {
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.x;
        uint _3002 = uint((float(_2990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _2991))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _2991)));
        float _3012 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        uint _3016 = uint(isnan(14.0) ? _3013 : (isnan(_3013) ? 14.0 : min(_3013, 14.0)));
        uvec4 _3021 = texelFetch(g_lightClusterGridBuffer, int(((_3016 << 2u) + (_3002 << 6u)) >> 2u));
        uint _3022 = _3021.x;
        uint _3023 = _2990.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3023 >> 4u) & 15u)) + 4294967295u) & _3022) == 0u) || ((_3023 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            uint _3253 = 0u;
            uint _3262;
            bool _3263;
            for (;;)
            {
                _3262 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                _3263 = _3262 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3263)
                {
                    frontier_phi_66_pred = _3252;
                    frontier_phi_66_pred_1 = _3251;
                    frontier_phi_66_pred_2 = _3250;
                    frontier_phi_66_pred_3 = _3249;
                    frontier_phi_66_pred_4 = _3248;
                    frontier_phi_66_pred_5 = _3247;
                }
                else
                {
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    uint _3377;
                    _3371 = _3247;
                    _3372 = _3248;
                    _3373 = _3249;
                    _3374 = _3250;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3262;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    for (;;)
                    {
                        uint _3381 = uint(findLSB(_3377)) + (_3253 << 5u);
                        uint _3378 = (_3377 + 4294967295u) & _3377;
                        uint _3383 = _3381 * 48u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 3u)).x));
                        uint _3403 = (_3381 * 48u) + 4u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3422 = (_3381 * 48u) + 8u;
                        vec3 _3433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x));
                        float _3437 = _3397.x - _2081;
                        float _3438 = _3397.y - _2082;
                        float _3439 = _3397.z - _2083;
                        float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                        float _3443 = inversesqrt(_3440);
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3447 = dot(vec3(_951, _954, _957), vec3(_3444, _3445, _3446));
                        float _3452 = 1.0 - (_3440 * _3397.w);
                        float _4831 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3454 = sqrt(_3440) * _3416.w;
                        float _3457 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3447) + _3458;
                        float _3464 = _3454 * _3454;
                        float _3468 = ((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3453) / ((_3464 * 0.699999988079071044921875) + 1.0);
                        float _3472 = (-0.0) - _2081;
                        float _3473 = (-0.0) - _2082;
                        float _3474 = (-0.0) - _2083;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3488 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _1026;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3501 = _3481 + _3446;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_951, _954, _957), vec3(_3479, _3480, _3481));
                        float _4847 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3513 = dot(vec3(_951, _954, _957), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4858 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3457 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3447) + _3522;
                        float _4869 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4880 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3520 * _3520) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125))) * _3453;
                        _3306 = (_3468 * _3416.x) + _3374;
                        _3307 = (_3468 * _3416.y) + _3375;
                        _3308 = (_3468 * _3416.z) + _3376;
                        _3303 = (_3548 * _3433.x) + _3371;
                        _3304 = (_3548 * _3433.y) + _3372;
                        _3305 = (_3548 * _3433.z) + _3373;
                        if (_3378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3371 = _3303;
                            _3372 = _3304;
                            _3373 = _3305;
                            _3374 = _3306;
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3378;
                        }
                    }
                    frontier_phi_66_pred = _3308;
                    frontier_phi_66_pred_1 = _3307;
                    frontier_phi_66_pred_2 = _3306;
                    frontier_phi_66_pred_3 = _3305;
                    frontier_phi_66_pred_4 = _3304;
                    frontier_phi_66_pred_5 = _3303;
                }
                _3113 = frontier_phi_66_pred;
                _3111 = frontier_phi_66_pred_1;
                _3109 = frontier_phi_66_pred_2;
                _3107 = frontier_phi_66_pred_3;
                _3105 = frontier_phi_66_pred_4;
                _3103 = frontier_phi_66_pred_5;
                uint _3254 = _3253 + 1u;
                if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3247 = _3103;
                    _3248 = _3105;
                    _3249 = _3107;
                    _3250 = _3109;
                    _3251 = _3111;
                    _3252 = _3113;
                    _3253 = _3254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((4294967295u << _3119) & _3022) == 0u)
        {
            _3215 = _3102;
            _3217 = _3104;
            _3219 = _3106;
            _3221 = _3108;
            _3223 = _3110;
            _3225 = _3112;
        }
        else
        {
            float _3240 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _3241 = _3240 * _2081;
            float _3242 = _3240 * _2082;
            float _3243 = _3240 * _2083;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3354 = _3102;
                float _3355 = _3104;
                float _3356 = _3106;
                float _3357 = _3108;
                float _3358 = _3110;
                float _3359 = _3112;
                uint _3360 = _3119;
                uint _3369;
                bool _3370;
                for (;;)
                {
                    _3369 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                    _3370 = _3369 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3370)
                    {
                        frontier_phi_72_pred = _3359;
                        frontier_phi_72_pred_1 = _3358;
                        frontier_phi_72_pred_2 = _3357;
                        frontier_phi_72_pred_3 = _3356;
                        frontier_phi_72_pred_4 = _3355;
                        frontier_phi_72_pred_5 = _3354;
                    }
                    else
                    {
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3566 = _3354;
                        float _3567 = _3355;
                        float _3568 = _3356;
                        float _3569 = _3357;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        uint _3572 = _3369;
                        uint _3573;
                        vec4 _3598;
                        float _3599;
                        vec4 _3614;
                        vec3 _3626;
                        vec4 _3641;
                        vec4 _3656;
                        float _3702;
                        bool _3703;
                        for (;;)
                        {
                            uint _3583 = ((_3360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3572));
                            _3573 = (_3572 + 4294967295u) & _3572;
                            uint _3585 = _3583 * 40u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3599 = _3598.w;
                            uint _3601 = (_3583 * 40u) + 4u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3583 * 40u) + 8u;
                            _3626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x));
                            uint _3628 = (_3583 * 40u) + 16u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3583 * 40u) + 20u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3583 * 40u) + 24u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3677 = (_3583 * 40u) + 28u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            _3702 = fma(_2083, _3690.z, fma(_2082, _3690.y, _3690.x * _2081)) + _3690.w;
                            _3703 = !((fma(_2083, _3671.z, fma(_2082, _3671.y, _3671.x * _2081)) + _3671.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3703)
                            {
                                float _3730 = _3598.x - _2081;
                                float _3731 = _3598.y - _2082;
                                float _3732 = _3598.z - _2083;
                                float _3733 = dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732));
                                float _3736 = inversesqrt(_3733);
                                float _3737 = _3736 * _3730;
                                float _3738 = _3736 * _3731;
                                float _3739 = _3736 * _3732;
                                float _3743 = 1.0 - (_3733 / (_3599 * _3599));
                                float _4891 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3748 = sqrt(_3733) * _3614.w;
                                float _3750 = 1.39999997615814208984375 / (_3748 + 1.39999997615814208984375);
                                float _3751 = _3750 * _3750;
                                float _3754 = ((1.0 - _3751) * dot(vec3(_3737, _3738, _3739), vec3(_951, _954, _957))) + _3751;
                                float _3757 = _3748 * _3748;
                                float _3761 = (fma(_2083, _3641.z, fma(_2082, _3641.y, _3641.x * _2081)) + _3641.w) / _3702;
                                float _3762 = (fma(_2083, _3656.z, fma(_2082, _3656.y, _3656.x * _2081)) + _3656.w) / _3702;
                                float _3766 = 1.0 - dot(vec2(_3761, _3762), vec2(_3761, _3762));
                                float _4907 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3768 = _3767 * (((isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0))) * _3744) / ((_3757 * 0.699999988079071044921875) + 1.0));
                                float _3780 = exp2(log2(1.0 / ((_3757 * 3.5) + 5.0)) * 0.25);
                                float _3781 = 1.0 - _1026;
                                float _3788 = sqrt(1.0 - ((1.0 - (_3781 * _3781)) * (1.0 - (_3780 * _3780))));
                                float _3789 = _3788 * _3788;
                                float _3790 = _3789 * _3789;
                                float _3791 = _3737 - _3241;
                                float _3792 = _3738 - _3242;
                                float _3793 = _3739 - _3243;
                                float _3797 = inversesqrt(dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793)));
                                float _3801 = dot(vec3(_951, _954, _957), vec3((-0.0) - _3241, (-0.0) - _3242, (-0.0) - _3243));
                                float _4918 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3805 = dot(vec3(_951, _954, _957), vec3(_3797 * _3791, _3797 * _3792, _3797 * _3793));
                                float _4929 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3812 = ((_3808 * _3808) * (_3790 + (-1.0))) + 1.0;
                                float _3813 = _3750 * _3789;
                                float _3814 = _3813 * _3813;
                                float _3820 = ((1.0 - _3814) * dot(vec3(_951, _954, _957), vec3(_3737, _3738, _3739))) + _3814;
                                float _4940 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3822 = 1.0 - _3789;
                                float _3832 = (0.5 / (((_3821 * ((_3804 * _3822) + _3789)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3789) * _3804))) * _3821;
                                float _4951 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3842 = (_3767 * _3744) * (((_3790 * 3.1415927410125732421875) * (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) / ((_3812 * _3812) * ((_3757 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3768 * _3614.y;
                                frontier_phi_78_pred_1 = _3768 * _3614.x;
                                frontier_phi_78_pred_2 = _3842 * _3626.z;
                                frontier_phi_78_pred_3 = _3842 * _3626.y;
                                frontier_phi_78_pred_4 = _3842 * _3626.x;
                                frontier_phi_78_pred_5 = _3768 * _3614.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3850 = frontier_phi_78_pred;
                            _3849 = frontier_phi_78_pred_1;
                            _3848 = frontier_phi_78_pred_2;
                            _3847 = frontier_phi_78_pred_3;
                            _3846 = frontier_phi_78_pred_4;
                            _3851 = frontier_phi_78_pred_5;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            if (_3573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3573;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3558;
                        frontier_phi_72_pred_1 = _3557;
                        frontier_phi_72_pred_2 = _3556;
                        frontier_phi_72_pred_3 = _3555;
                        frontier_phi_72_pred_4 = _3554;
                        frontier_phi_72_pred_5 = _3553;
                    }
                    _3226 = frontier_phi_72_pred;
                    _3224 = frontier_phi_72_pred_1;
                    _3222 = frontier_phi_72_pred_2;
                    _3220 = frontier_phi_72_pred_3;
                    _3218 = frontier_phi_72_pred_4;
                    _3216 = frontier_phi_72_pred_5;
                    uint _3361 = _3360 + 1u;
                    if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3354 = _3216;
                        _3355 = _3218;
                        _3356 = _3220;
                        _3357 = _3222;
                        _3358 = _3224;
                        _3359 = _3226;
                        _3360 = _3361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3226;
                frontier_phi_60_61_ladder_1 = _3224;
                frontier_phi_60_61_ladder_2 = _3220;
                frontier_phi_60_61_ladder_3 = _3218;
                frontier_phi_60_61_ladder_4 = _3216;
                frontier_phi_60_61_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_60_61_ladder = _3112;
                frontier_phi_60_61_ladder_1 = _3110;
                frontier_phi_60_61_ladder_2 = _3106;
                frontier_phi_60_61_ladder_3 = _3104;
                frontier_phi_60_61_ladder_4 = _3102;
                frontier_phi_60_61_ladder_5 = _3108;
            }
            _3215 = frontier_phi_60_61_ladder_4;
            _3217 = frontier_phi_60_61_ladder_3;
            _3219 = frontier_phi_60_61_ladder_2;
            _3221 = frontier_phi_60_61_ladder_5;
            _3223 = frontier_phi_60_61_ladder_1;
            _3225 = frontier_phi_60_61_ladder;
        }
        float _3230 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _3035 = (_3230 * _3221) + _2547;
        _3037 = (_3230 * _3223) + _2549;
        _3039 = (_3230 * _3225) + _2551;
        _3041 = ((_3215 * _995) * _3230) + _2885;
        _3043 = ((_3217 * _997) * _3230) + _2887;
        _3045 = ((_3219 * _998) * _3230) + _2889;
    }
    else
    {
        _3035 = _2547;
        _3037 = _2549;
        _3039 = _2551;
        _3041 = _2885;
        _3043 = _2887;
        _3045 = _2889;
    }
    float _4967 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4978 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4989 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    uint _3065 = _970 + 6u;
    float _3073 = _932 / cbSceneParam._m0[86u].x;
    float _3074 = _933 / cbSceneParam._m0[86u].y;
    vec4 _3088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3090 = _3088.x;
    float _3091 = _3088.y;
    float _3092 = _3088.z;
    float _3093 = _3088.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _3128 = _3127 / _867;
        float _3139 = _3128 * _917;
        float _3140 = _918 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3143 = _3128 * _919;
        float _3145 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3140;
        float _3153 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_3141 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3276 = 1.0 / cbSceneParam._m0[80u].x;
            float _3277 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3278 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            _3316 = ((abs(_3153 / _3141) * cbSceneParam._m0[80u].y) * ((((_3287 - _3288) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))))) * _3276)) - ((exp2(_3163 * _3287) - exp2(_3163 * _3288)) * _3276))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_3093);
        _3165 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _3090;
        _3167 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _3091;
        _3169 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _3092;
        _3171 = _3327 * _3093;
    }
    else
    {
        _3165 = _3090;
        _3167 = _3091;
        _3169 = _3092;
        _3171 = _3093;
    }
    float _3183 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3184 = _3183 == 3.0;
    float _3185 = log2(_3171);
    float _3192 = exp2(_3185 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_3035 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1010))) + ((_3041 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _3193 = exp2(_3185 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_3037 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1010))) + ((_3043 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _3194 = exp2(_3185 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_3039 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1010))) + ((_3045 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _3203 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3203 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
    SV_Target.y = _3203 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
    SV_Target.z = _3203 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.w = cbInstanceData._m0[_3065].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3065].w;
}


