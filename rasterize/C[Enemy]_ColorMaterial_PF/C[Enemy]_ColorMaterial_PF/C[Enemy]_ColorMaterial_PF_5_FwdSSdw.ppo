#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1561;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _330 = exp2(log2((1.0 - _319) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    vec4 _346 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _358 = exp2(log2(_346.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0));
    float _369 = exp2(log2(cbMtdParam._m0[23u].y * _319) * cbMtdParam._m0[22u].y);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
    vec4 _383 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _386 = _383.y;
    float _389 = (_383.x + (-0.02500000037252902984619140625)) * 8.0;
    float _393 = roundEven(5.0 - _389);
    float _394 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _395 = isnan(4.0) ? _394 : (isnan(_394) ? 4.0 : min(_394, 4.0));
    float _408 = floor(_395);
    vec4 _411 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _408));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _475 = roundEven(_389);
    float _476 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    uint _478 = uint(int(isnan(5.0) ? _476 : (isnan(_476) ? 5.0 : min(_476, 5.0))));
    vec4 _508 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _519 = cbMtdParam._m0[9u].x * _508.x;
    float _520 = cbMtdParam._m0[9u].y * _508.y;
    float _521 = cbMtdParam._m0[9u].z * _508.z;
    float _528 = ((((((_206[_478] - cbMtdParam._m0[10u].x) * _386) + cbMtdParam._m0[10u].x) * _411.x) - _519) * _371) + _519;
    float _529 = ((((((_207[_478] - cbMtdParam._m0[10u].y) * _386) + cbMtdParam._m0[10u].y) * _411.y) - _520) * _371) + _520;
    float _530 = ((((((_208[_478] - cbMtdParam._m0[10u].z) * _386) + cbMtdParam._m0[10u].z) * _411.z) - _521) * _371) + _521;
    float _536 = exp2(log2(_315.w) * cbMtdParam._m0[23u].w);
    vec4 _549 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _568 = (((cbMtdParam._m0[16u].x * _549.x) - _528) * _536) + _528;
    float _569 = (((cbMtdParam._m0[16u].y * _549.y) - _529) * _536) + _529;
    float _570 = (((cbMtdParam._m0[16u].z * _549.z) - _530) * _536) + _530;
    vec4 _583 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _603 = (((cbMtdParam._m0[19u].x * _583.x) - _568) * _360) + _568;
    float _604 = (((cbMtdParam._m0[19u].y * _583.y) - _569) * _360) + _569;
    float _605 = (((cbMtdParam._m0[19u].z * _583.z) - _570) * _360) + _570;
    vec4 _617 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _642 = (_346.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _617.x) - _603) * _332) + _603);
    float _644 = (_346.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _617.y) - _604) * _332) + _604);
    float _646 = (_346.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _617.z) - _605) * _332) + _605);
    vec4 _658 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _676 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _678 = _676 * (cbMtdParam._m0[24u].z + 1.0);
    float _3958 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _686 = (_679 * ((cbMtdParam._m0[11u].x * _658.x) - _642)) + _642;
    float _687 = (((cbMtdParam._m0[11u].y * _658.y) - _644) * _679) + _644;
    float _688 = (((cbMtdParam._m0[11u].z * _658.z) - _646) * _679) + _646;
    float _692 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _700 = (_692 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _692))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3969 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _708 = ((cbMtdParam._m0[21u].x - _686) * _701) + _686;
    float _709 = ((cbMtdParam._m0[21u].y - _687) * _701) + _687;
    float _710 = ((cbMtdParam._m0[21u].z - _688) * _701) + _688;
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].x;
    _202[0u] = cbMtdParam._m0[29u].y;
    _201[1u] = cbMtdParam._m0[31u].x;
    _202[1u] = cbMtdParam._m0[31u].y;
    _201[2u] = cbMtdParam._m0[30u].z;
    _202[2u] = cbMtdParam._m0[30u].w;
    _201[3u] = cbMtdParam._m0[30u].x;
    _202[3u] = cbMtdParam._m0[30u].y;
    _201[4u] = cbMtdParam._m0[29u].z;
    _202[4u] = cbMtdParam._m0[29u].w;
    float _750 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    uint _752 = uint(int(isnan(4.0) ? _750 : (isnan(_750) ? 4.0 : min(_750, 4.0))));
    float _759 = ((_202[_752] - cbMtdParam._m0[22u].z) * _371) + cbMtdParam._m0[22u].z;
    float _762 = ((cbMtdParam._m0[22u].w - _759) * _536) + _759;
    float _765 = ((cbMtdParam._m0[25u].y - _762) * _360) + _762;
    float _768 = ((cbMtdParam._m0[26u].y - _765) * _332) + _765;
    float _773 = (cbMtdParam._m0[24u].y + 1.0) * _676;
    float _3990 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _776 = _768 - (_768 * _774);
    float _778 = _776 - (_776 * _692);
    vec4 _791 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _408));
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _810 = _808.x;
    float _811 = _808.y;
    float _816 = cbMtdParam._m0[22u].x + _808.z;
    float _819 = (((_791.z + _201[_752]) - _816) * _371) + _816;
    vec4 _831 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _842 = (((_831.z - _819) + cbMtdParam._m0[28u].z) * _536) + _819;
    float _848 = ((((_319 * 2.0) * _842) - _842) * cbMtdParam._m0[24u].w) + _842;
    vec4 _860 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _871 = (((cbMtdParam._m0[23u].z + _860.z) - _848) * _360) + _848;
    vec4 _884 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _895 = (((_884.z - _871) + cbMtdParam._m0[26u].z) * _332) + _871;
    vec4 _907 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _919 = ((_907.z - _895) * _774) + _895;
    vec4 _934 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _948 = ((cbMtdParam._m0[27u].z * _692) * ((_934.z * cbMtdParam._m0[27u].y) - _919)) + _919;
    float _963 = ((_791.x - _810) * _371) + _810;
    float _964 = ((_791.y - _811) * _371) + _811;
    float _969 = ((_831.x - _963) * _536) + _963;
    float _970 = ((_831.y - _964) * _536) + _964;
    float _975 = ((_860.x - _969) * _360) + _969;
    float _976 = ((_860.y - _970) * _360) + _970;
    float _985 = ((((_884.x - _975) * _332) + _975) * 2.0) + (-1.0);
    float _986 = ((((_884.y - _976) * _332) + _976) * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _4001 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _992 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    float _1008 = (((cbMtdParam._m0[25u].z * ((_315.x * 2.0) + (-1.0))) + _985) + (((((_907.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _774)) + ((((_934.x * 2.0) + (-1.0)) * _692) * cbMtdParam._m0[27u].x);
    float _1009 = (((cbMtdParam._m0[25u].z * ((_315.y * 2.0) + (-1.0))) + _986) + (((((_907.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _774)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_934.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _1012 = fma(_992, _243 * NORMAL.x, fma(_1009, _250 * TANGENT.x, (_236 * _228) * _1008));
    float _1015 = fma(_992, _243 * NORMAL.y, fma(_1009, _250 * TANGENT.y, (_236 * _229) * _1008));
    float _1018 = fma(_992, _243 * NORMAL.z, fma(_1009, _250 * TANGENT.z, (_236 * _230) * _1008));
    float _1022 = inversesqrt(dot(vec3(_1012, _1015, _1018), vec3(_1012, _1015, _1018)));
    float _1023 = _1022 * _1012;
    float _1024 = _1022 * _1015;
    float _1025 = _1022 * _1018;
    float _4012 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _1026 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4034 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4045 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4056 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _1030 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1046 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1096 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1086);
    float _1097 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1086);
    float _1098 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1086);
    float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
    float _1103 = _1096 * _1102;
    float _1104 = _1097 * _1102;
    float _1105 = _1098 * _1102;
    float _1111 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1112 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1130 = fma(_1025, cbSceneParam._m0[5u].z, fma(_1024, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1023));
    float _1133 = fma(_1025, cbSceneParam._m0[6u].z, fma(_1024, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1023));
    float _1136 = fma(_1025, cbSceneParam._m0[7u].z, fma(_1024, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1023));
    uint _1149 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1151 = (_1149 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1157 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1151].x;
    float _1158 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1151].y;
    float _1159 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1151].z;
    float _4067 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1163 = 1.0 - _1030;
    float _1164 = _1160 * _1163;
    float _1165 = _1161 * _1163;
    float _1166 = _1162 * _1163;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1030;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1030;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1030;
    float _1174 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    vec4 _1186 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1111, cbSceneParam._m0[86u].y * _1112));
    float _1189 = _1186.x * TEXCOORD_3.w;
    float _1190 = dot(vec3(_1023, _1024, _1025), vec3(_1103, _1104, _1105));
    float _1193 = _1190 * 2.0;
    float _1197 = (_1193 * _1023) - _1103;
    float _1198 = (_1193 * _1024) - _1104;
    float _1199 = (_1193 * _1025) - _1105;
    float _1203 = abs(dot(vec3(_1103, _1104, _1105), vec3(_1023, _1024, _1025)));
    float _4100 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1205 = sqrt(_1026);
    float _1216 = exp2((_1205 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1205 * 3.0));
    float _1222 = (1.0 - _1216) * ((_1205 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1223 = _1216 * _1205;
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1560;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1285 = fma(_1259, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251));
        float _1289 = fma(_1259, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251));
        float _1293 = fma(_1259, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251));
        float _1318 = _1251 + _1023;
        float _1319 = _1255 + _1024;
        float _1320 = _1259 + _1025;
        float _1330 = fma(_1320, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1318)) - _1285;
        float _1331 = fma(_1320, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1318)) - _1289;
        float _1332 = fma(_1320, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1318)) - _1293;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1285 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1289 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[34u].z) + ((((((_1293 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1388 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1354.x + (-0.5));
        float _1390 = _1388 * (_1354.y + (-0.5));
        float _1391 = _1388 * (_1354.z + (-0.5));
        float _1398 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1361.x + (-0.5));
        float _1400 = _1398 * (_1361.y + (-0.5));
        float _1401 = _1398 * (_1361.z + (-0.5));
        float _1408 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1368.x + (-0.5));
        float _1410 = _1408 * (_1368.y + (-0.5));
        float _1411 = _1408 * (_1368.z + (-0.5));
        float _1418 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1375.x + (-0.5));
        float _1420 = _1418 * (_1375.y + (-0.5));
        float _1421 = _1418 * (_1375.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1442 = (dot(vec3(_1023, _1024, _1025), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1452 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4148 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1454 + 1.0))) + _1459) * _1422;
        float _1469 = _1390 * 0.5;
        float _1470 = _1400 * 0.5;
        float _1471 = _1410 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_1023, _1024, _1025), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4181 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1496 + 1.0))) + _1501) * _1423;
        float _1511 = _1391 * 0.5;
        float _1512 = _1401 * 0.5;
        float _1513 = _1411 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_1023, _1024, _1025), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4214 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1538 + 1.0))) + _1543) * _1424;
        _1560 = _1391;
        _1562 = _1390;
        _1563 = _1389;
        _1564 = _1401;
        _1565 = _1400;
        _1566 = _1399;
        _1567 = _1411;
        _1568 = _1410;
        _1569 = _1409;
        _1570 = _1424;
        _1571 = _1423;
        _1572 = _1422;
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1561;
        _1562 = _1561;
        _1563 = _1561;
        _1564 = _1561;
        _1565 = _1561;
        _1566 = _1561;
        _1567 = _1561;
        _1568 = _1561;
        _1569 = _1561;
        _1570 = _1561;
        _1571 = _1561;
        _1572 = _1561;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1598 = fma(_1259, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251));
        float _1602 = fma(_1259, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251));
        float _1606 = fma(_1259, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251));
        float _1629 = _1251 + _1023;
        float _1630 = _1255 + _1024;
        float _1631 = _1259 + _1025;
        float _1641 = fma(_1631, cbModelParam._m0[30u].z, fma(_1630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1629)) - _1598;
        float _1642 = fma(_1631, cbModelParam._m0[31u].z, fma(_1630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1629)) - _1602;
        float _1643 = fma(_1631, cbModelParam._m0[32u].z, fma(_1630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1629)) - _1606;
        float _1647 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
        float _1660 = ((_1647 * _1641) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1598 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1647 * _1642) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1602 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1647 * _1643) / cbModelParam._m0[35u].z) + ((((((_1606 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        float _1697 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1664.x + (-0.5));
        float _1699 = _1697 * (_1664.y + (-0.5));
        float _1700 = _1697 * (_1664.z + (-0.5));
        float _1707 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1671.x + (-0.5));
        float _1709 = _1707 * (_1671.y + (-0.5));
        float _1710 = _1707 * (_1671.z + (-0.5));
        float _1717 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1678.x + (-0.5));
        float _1719 = _1717 * (_1678.y + (-0.5));
        float _1720 = _1717 * (_1678.z + (-0.5));
        float _1727 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1685.x + (-0.5));
        float _1729 = _1727 * (_1685.y + (-0.5));
        float _1730 = _1727 * (_1685.z + (-0.5));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = _1698 * 0.5;
        float _1735 = _1708 * 0.5;
        float _1736 = _1718 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_1023, _1024, _1025), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4277 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1761 + 1.0))) + _1766) * _1731;
        float _1776 = _1699 * 0.5;
        float _1777 = _1709 * 0.5;
        float _1778 = _1719 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1792 = (dot(vec3(_1023, _1024, _1025), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1803 = _1802 * 2.0;
        float _1807 = (1.0 - _1802) / (_1802 + 1.0);
        float _4310 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1817 = ((((1.0 - _1808) * (_1803 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1803 + 1.0))) + _1808) * _1732;
        float _1818 = _1700 * 0.5;
        float _1819 = _1710 * 0.5;
        float _1820 = _1720 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_1023, _1024, _1025), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4343 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1845 + 1.0))) + _1850) * _1733;
        _1867 = _1700;
        _1868 = _1699;
        _1869 = _1698;
        _1870 = _1710;
        _1871 = _1709;
        _1872 = _1708;
        _1873 = _1720;
        _1874 = _1719;
        _1875 = _1718;
        _1876 = _1733;
        _1877 = _1732;
        _1878 = _1731;
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
    }
    else
    {
        _1867 = _1561;
        _1868 = _1561;
        _1869 = _1561;
        _1870 = _1561;
        _1871 = _1561;
        _1872 = _1561;
        _1873 = _1561;
        _1874 = _1561;
        _1875 = _1561;
        _1876 = _1561;
        _1877 = _1561;
        _1878 = _1561;
        _1879 = 0.0;
        _1880 = 0.0;
        _1881 = 0.0;
    }
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1573)) + _1573;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1574)) + _1574;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1575)) + _1575;
    float _1914 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1891));
    float _1935 = _1197 * 0.5;
    float _1936 = _1198 * 0.5;
    float _1937 = _1199 * 0.5;
    float _1938 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1941 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1944 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1978;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1951 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1560, _1564, _1567, _1570));
        float _1955 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1959 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1966 = dot(vec4(cbModelParam._m0[39u]), vec4(_1935, _1936, _1937, 1.0));
        _1978 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1978 = 1.0;
    }
    float _1989;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1980 = dot(vec4(cbModelParam._m0[40u]), vec4(_1935, _1936, _1937, 1.0));
        _1989 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1989 = 1.0;
    }
    float _1993 = (_1989 * cbModelParam._m0[1u].x) + (_1978 * (1.0 - cbModelParam._m0[1u].x));
    float _2003 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1026);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2003 : min(cbModelParam._m0[25u].z, _2003));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2051 = fma(_1259, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251)) + cbModelParam._m0[13u].w;
        float _2055 = fma(_1259, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251)) + cbModelParam._m0[14u].w;
        float _2059 = fma(_1259, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251)) + cbModelParam._m0[15u].w;
        float _2062 = fma(_1199, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197));
        float _2065 = fma(_1199, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197));
        float _2068 = fma(_1199, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197));
        float _2096;
        if (_2062 > 0.0)
        {
            _2096 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2096 = frontier_phi_14_12_ladder;
        }
        float _2319;
        if (_2065 > 0.0)
        {
            _2319 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2319 = frontier_phi_23_19_ladder;
        }
        float _2576;
        if (_2068 > 0.0)
        {
            _2576 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2576 = frontier_phi_35_30_ladder;
        }
        float _2578 = isnan(_2319) ? _2096 : (isnan(_2096) ? _2319 : min(_2096, _2319));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _2062) + _2051;
        float _2584 = (_2579 * _2065) + _2055;
        float _2585 = (_2579 * _2068) + _2059;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2586;
        float _2590 = _2586 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 > _2590) || ((_2584 < _2588) || ((_2583 < _2588) || (_2583 > _2590))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2585, cbModelParam._m0[9u].z, fma(_2584, cbModelParam._m0[9u].y, _2583 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2585, cbModelParam._m0[10u].z, fma(_2584, cbModelParam._m0[10u].y, _2583 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2585, cbModelParam._m0[11u].z, fma(_2584, cbModelParam._m0[11u].y, _2583 * cbModelParam._m0[11u].x))), _2004);
            frontier_phi_13_35_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _2084 = frontier_phi_13_35_ladder_2;
        _2086 = frontier_phi_13_35_ladder_1;
        _2088 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1197, _1198, _1199), _2004);
        _2084 = _2072.x * cbModelParam._m0[1u].y;
        _2086 = _2072.y * cbModelParam._m0[1u].y;
        _2088 = _2072.z * cbModelParam._m0[1u].y;
    }
    float _2092 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1026);
    float _2093 = isnan(_2092) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2092 : min(cbModelParam._m0[25u].w, _2092));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1259, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1259, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1259, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1199, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197));
        float _2160 = fma(_1199, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197));
        float _2163 = fma(_1199, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197));
        float _2324;
        if (_2157 > 0.0)
        {
            _2324 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2324 = frontier_phi_25_21_ladder;
        }
        float _2603;
        if (_2160 > 0.0)
        {
            _2603 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2603 = frontier_phi_37_32_ladder;
        }
        float _2816;
        if (_2163 > 0.0)
        {
            _2816 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2816 = frontier_phi_46_43_ladder;
        }
        float _2818 = isnan(_2603) ? _2324 : (isnan(_2324) ? _2603 : min(_2324, _2603));
        float _2819 = isnan(_2816) ? _2818 : (isnan(_2818) ? _2816 : min(_2818, _2816));
        float _2823 = (_2819 * _2157) + _2146;
        float _2824 = (_2819 * _2160) + _2150;
        float _2825 = (_2819 * _2163) + _2154;
        float _2826 = _2819 * 9.9999997473787516355514526367188e-05;
        float _2827 = (-1.0) - _2826;
        float _2829 = _2826 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2825 > _2829) || ((_2825 < _2827) || ((_2824 > _2829) || ((_2824 < _2827) || ((_2823 < _2827) || (_2823 > _2829))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2825, cbModelParam._m0[17u].z, fma(_2824, cbModelParam._m0[17u].y, _2823 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2825, cbModelParam._m0[18u].z, fma(_2824, cbModelParam._m0[18u].y, _2823 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2825, cbModelParam._m0[19u].z, fma(_2824, cbModelParam._m0[19u].y, _2823 * cbModelParam._m0[19u].x))), _2093);
            frontier_phi_22_46_ladder = _3024.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3024.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3024.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_22_46_ladder_2;
        _2184 = frontier_phi_22_46_ladder_1;
        _2186 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1197, _1198, _1199), _2093);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1222 * _1174) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2201 = (((_1222 * _1176) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1222 * _1177) + _1223) * _1189) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    vec4 _2220 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1111, _1112));
    float _2222 = _2220.w;
    float _2234 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2222);
    float _2235 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2222);
    float _2236 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2222);
    uvec4 _2240 = floatBitsToUint(cbInstanceData._m0[_1149 + 5u]);
    uint _2242 = _2240.x * 14u;
    uint _2243 = _2242 + 13u;
    float _2250 = _1189 + (-1.0);
    float _2255 = (cbLight._m0[_2243].x * _2250) + 1.0;
    float _2256 = (cbLight._m0[_2243].y * _2250) + 1.0;
    float _2257 = (cbLight._m0[_2243].z * _2250) + 1.0;
    float _2258 = (cbLight._m0[_2243].w * _2250) + 1.0;
    uint _2259 = _2242 + 5u;
    float _2265 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2269 = _2242 + 4u;
    float _2278 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2282 = _2242 | 1u;
    float _2293 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_1023, _1024, _1025));
    float _2296 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_1023, _1024, _1025));
    float _4479 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _4490 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2301 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2303 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2310 = ((cbLight._m0[_2259].x * _2265) * _2303) + (((cbLight._m0[_2269].x * _2234) * _2278) * _2301);
    float _2311 = ((_2265 * cbLight._m0[_2259].y) * _2303) + (((cbLight._m0[_2269].y * _2235) * _2278) * _2301);
    float _2312 = ((_2265 * cbLight._m0[_2259].z) * _2303) + (((cbLight._m0[_2269].z * _2236) * _2278) * _2301);
    uvec4 _2316 = floatBitsToUint(cbLight._m0[_2242 + 12u]);
    bool _2318 = _2316.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2318)
    {
        _2329 = _2310;
        _2331 = _2311;
        _2333 = _2312;
    }
    else
    {
        uint _2337 = _2242 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2242 + 2u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4501 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2356 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2310;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2311;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2312;
    }
    bool _2336 = _2316.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2336)
    {
        _2374 = _2329;
        _2376 = _2331;
        _2378 = _2333;
    }
    else
    {
        uint _2547 = _2242 + 7u;
        float _2563 = (dot(vec3(cbLight._m0[_2242 + 3u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4517 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2566 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2374 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2329;
        _2376 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2331;
        _2378 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2333;
    }
    uint _2381 = _2242 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _1026) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2242].x + _1103;
    float _2397 = cbLight._m0[_2242].y + _1104;
    float _2398 = cbLight._m0[_2242].z + _1105;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2242].xyz));
    float _4533 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _2410 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2411 = dot(vec3(_1023, _1024, _1025), vec3(_2403, _2404, _2405));
    float _4555 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2403, _2404, _2405));
    float _4566 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2432 = 0.959999978542327880859375 - _1171;
    float _2434 = 0.959999978542327880859375 - _1172;
    float _2435 = 0.959999978542327880859375 - _1173;
    float _2442 = 1.0 - _2395;
    float _2453 = (0.5 / (((_2410 * ((_2409 * _2442) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2442) + _2395) * _2409))) * _2409;
    float _4577 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2469 = _2242 + 9u;
    float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _1026) * 0.949999988079071044921875);
    float _2481 = _2480 * _2480;
    float _2482 = cbLight._m0[_2282].x + _1103;
    float _2483 = cbLight._m0[_2282].y + _1104;
    float _2484 = cbLight._m0[_2282].z + _1105;
    float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
    float _2489 = _2488 * _2482;
    float _2490 = _2488 * _2483;
    float _2491 = _2488 * _2484;
    float _2492 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2282].xyz));
    float _4588 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2496 = dot(vec3(_1023, _1024, _1025), vec3(_2489, _2490, _2491));
    float _4599 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2500 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2489, _2490, _2491));
    float _4610 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = _2481 * _2481;
    float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
    float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2522 = 1.0 - _2481;
    float _2532 = (0.5 / (((_2410 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2522) + _2481) * _2495))) * _2495;
    float _4621 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
    float _2544 = (((((_2515 * _2432) + _1174) * cbLight._m0[_2469].x) * _2534) * _2265) + ((((cbLight._m0[_2381].x * _2234) * ((_2431 * _2432) + _1174)) * _2455) * _2278);
    float _2545 = (((((_2515 * _2434) + _1176) * cbLight._m0[_2469].y) * _2534) * _2265) + ((((cbLight._m0[_2381].y * _2235) * ((_2431 * _2434) + _1176)) * _2455) * _2278);
    float _2546 = (((((_2515 * _2435) + _1177) * cbLight._m0[_2469].z) * _2534) * _2265) + ((((cbLight._m0[_2381].z * _2236) * ((_2431 * _2435) + _1177)) * _2455) * _2278);
    float _2608;
    float _2610;
    float _2612;
    if (_2318)
    {
        _2608 = _2544;
        _2610 = _2545;
        _2612 = _2546;
    }
    else
    {
        uint _2614 = _2242 + 2u;
        uint _2618 = _2242 + 10u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _1026) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _1103;
        float _2635 = cbLight._m0[_2614].y + _1104;
        float _2636 = cbLight._m0[_2614].z + _1105;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2614].xyz));
        float _4632 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2648 = dot(vec3(_1023, _1024, _1025), vec3(_2641, _2642, _2643));
        float _4643 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4654 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2674 = 1.0 - _2633;
        float _2684 = (0.5 / (((_2410 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2674) + _2633) * _2647))) * _2647;
        float _4665 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2608 = (((((_2667 * _2432) + _1174) * cbLight._m0[_2618].x) * _2686) * _2687) + _2544;
        _2610 = (((((_2667 * _2434) + _1176) * cbLight._m0[_2618].y) * _2686) * _2687) + _2545;
        _2612 = (((((_2667 * _2435) + _1177) * cbLight._m0[_2618].z) * _2686) * _2687) + _2546;
    }
    float _2722;
    float _2724;
    float _2726;
    if (_2336)
    {
        _2722 = _2608;
        _2724 = _2610;
        _2726 = _2612;
    }
    else
    {
        uint _2733 = _2242 + 3u;
        uint _2737 = _2242 + 11u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _1026) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _1103;
        float _2754 = cbLight._m0[_2733].y + _1104;
        float _2755 = cbLight._m0[_2733].z + _1105;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2733].xyz));
        float _4681 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2767 = dot(vec3(_1023, _1024, _1025), vec3(_2760, _2761, _2762));
        float _4692 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4703 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2793 = 1.0 - _2752;
        float _2803 = (0.5 / (((_2410 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2793) + _2752) * _2766))) * _2766;
        float _4714 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2722 = (((((_2786 * _2432) + _1174) * cbLight._m0[_2737].x) * _2805) * _2806) + _2608;
        _2724 = (((((_2786 * _2434) + _1176) * cbLight._m0[_2737].y) * _2805) * _2806) + _2610;
        _2726 = (((((_2786 * _2435) + _1177) * cbLight._m0[_2737].z) * _2805) * _2806) + _2612;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2240.y == 0u)
    {
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2882 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2881;
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2881;
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2881;
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1112) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _1111) / _2897)));
        float _2918 = (log2(_2884 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3190)
                {
                    frontier_phi_61_pred = _3174;
                    frontier_phi_61_pred_1 = _3179;
                    frontier_phi_61_pred_2 = _3178;
                    frontier_phi_61_pred_3 = _3177;
                    frontier_phi_61_pred_4 = _3176;
                    frontier_phi_61_pred_5 = _3175;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3189;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3180 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2882;
                        float _3365 = _3324.y - _2883;
                        float _3366 = _3324.z - _2884;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_1130, _1133, _1136), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4740 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2882;
                        float _3400 = (-0.0) - _2883;
                        float _3401 = (-0.0) - _2884;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3416 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _1205;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_1130, _1133, _1136), vec3(_3406, _3407, _3408));
                        float _4756 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3441 = dot(vec3(_1130, _1133, _1136), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4767 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3384 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3374) + _3450;
                        float _4778 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4789 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3448 * _3448) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3233 = (_3395 * _3343.x) + _3301;
                        _3234 = (_3395 * _3343.y) + _3302;
                        _3235 = (_3395 * _3343.z) + _3303;
                        _3230 = (_3476 * _3360.x) + _3298;
                        _3231 = (_3476 * _3360.y) + _3299;
                        _3232 = (_3476 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_61_pred = _3230;
                    frontier_phi_61_pred_1 = _3235;
                    frontier_phi_61_pred_2 = _3234;
                    frontier_phi_61_pred_3 = _3233;
                    frontier_phi_61_pred_4 = _3232;
                    frontier_phi_61_pred_5 = _3231;
                }
                _3030 = frontier_phi_61_pred;
                _3040 = frontier_phi_61_pred_1;
                _3038 = frontier_phi_61_pred_2;
                _3036 = frontier_phi_61_pred_3;
                _3034 = frontier_phi_61_pred_4;
                _3032 = frontier_phi_61_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3030;
                    _3175 = _3032;
                    _3176 = _3034;
                    _3177 = _3036;
                    _3178 = _3038;
                    _3179 = _3040;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3046) & _2928) == 0u)
        {
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
            float _3168 = _3167 * _2882;
            float _3169 = _3167 * _2883;
            float _3170 = _3167 * _2884;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3281 = _3029;
                float _3282 = _3031;
                float _3283 = _3033;
                float _3284 = _3035;
                float _3285 = _3037;
                float _3286 = _3039;
                uint _3287 = _3046;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3297)
                    {
                        frontier_phi_67_pred = _3284;
                        frontier_phi_67_pred_1 = _3285;
                        frontier_phi_67_pred_2 = _3286;
                        frontier_phi_67_pred_3 = _3283;
                        frontier_phi_67_pred_4 = _3282;
                        frontier_phi_67_pred_5 = _3281;
                    }
                    else
                    {
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        float _3499 = _3286;
                        uint _3500 = _3296;
                        uint _3501;
                        vec4 _3526;
                        float _3527;
                        vec4 _3542;
                        vec3 _3554;
                        vec4 _3569;
                        vec4 _3584;
                        float _3630;
                        bool _3631;
                        for (;;)
                        {
                            uint _3511 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3500));
                            _3501 = (_3500 + 4294967295u) & _3500;
                            uint _3513 = _3511 * 40u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3527 = _3526.w;
                            uint _3529 = (_3511 * 40u) + 4u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3511 * 40u) + 8u;
                            _3554 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x));
                            uint _3556 = (_3511 * 40u) + 16u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3511 * 40u) + 20u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3586 = (_3511 * 40u) + 24u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3605 = (_3511 * 40u) + 28u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3630 = fma(_2884, _3618.z, fma(_2883, _3618.y, _3618.x * _2882)) + _3618.w;
                            _3631 = !((fma(_2884, _3599.z, fma(_2883, _3599.y, _3599.x * _2882)) + _3599.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3631)
                            {
                                float _3658 = _3526.x - _2882;
                                float _3659 = _3526.y - _2883;
                                float _3660 = _3526.z - _2884;
                                float _3661 = dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660));
                                float _3664 = inversesqrt(_3661);
                                float _3665 = _3664 * _3658;
                                float _3666 = _3664 * _3659;
                                float _3667 = _3664 * _3660;
                                float _3671 = 1.0 - (_3661 / (_3527 * _3527));
                                float _4800 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3676 = sqrt(_3661) * _3542.w;
                                float _3678 = 1.39999997615814208984375 / (_3676 + 1.39999997615814208984375);
                                float _3679 = _3678 * _3678;
                                float _3682 = ((1.0 - _3679) * dot(vec3(_3665, _3666, _3667), vec3(_1130, _1133, _1136))) + _3679;
                                float _3685 = _3676 * _3676;
                                float _3689 = (fma(_2884, _3569.z, fma(_2883, _3569.y, _3569.x * _2882)) + _3569.w) / _3630;
                                float _3690 = (fma(_2884, _3584.z, fma(_2883, _3584.y, _3584.x * _2882)) + _3584.w) / _3630;
                                float _3694 = 1.0 - dot(vec2(_3689, _3690), vec2(_3689, _3690));
                                float _4816 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3696 = _3695 * (((isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0))) * _3672) / ((_3685 * 0.699999988079071044921875) + 1.0));
                                float _3708 = exp2(log2(1.0 / ((_3685 * 3.5) + 5.0)) * 0.25);
                                float _3709 = 1.0 - _1205;
                                float _3716 = sqrt(1.0 - ((1.0 - (_3709 * _3709)) * (1.0 - (_3708 * _3708))));
                                float _3717 = _3716 * _3716;
                                float _3718 = _3717 * _3717;
                                float _3719 = _3665 - _3168;
                                float _3720 = _3666 - _3169;
                                float _3721 = _3667 - _3170;
                                float _3725 = inversesqrt(dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721)));
                                float _3729 = dot(vec3(_1130, _1133, _1136), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4827 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3733 = dot(vec3(_1130, _1133, _1136), vec3(_3725 * _3719, _3725 * _3720, _3725 * _3721));
                                float _4838 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3740 = ((_3736 * _3736) * (_3718 + (-1.0))) + 1.0;
                                float _3741 = _3678 * _3717;
                                float _3742 = _3741 * _3741;
                                float _3748 = ((1.0 - _3742) * dot(vec3(_1130, _1133, _1136), vec3(_3665, _3666, _3667))) + _3742;
                                float _4849 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3750 = 1.0 - _3717;
                                float _3760 = (0.5 / (((_3749 * ((_3732 * _3750) + _3717)) + 9.9999999392252902907785028219223e-09) + (((_3749 * _3750) + _3717) * _3732))) * _3749;
                                float _4860 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3770 = (_3695 * _3672) * (((_3718 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3740 * _3740) * ((_3685 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3770 * _3554.x;
                                frontier_phi_73_pred_1 = _3770 * _3554.y;
                                frontier_phi_73_pred_2 = _3696 * _3542.z;
                                frontier_phi_73_pred_3 = _3696 * _3542.y;
                                frontier_phi_73_pred_4 = _3696 * _3542.x;
                                frontier_phi_73_pred_5 = _3770 * _3554.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3774 = frontier_phi_73_pred;
                            _3775 = frontier_phi_73_pred_1;
                            _3779 = frontier_phi_73_pred_2;
                            _3778 = frontier_phi_73_pred_3;
                            _3777 = frontier_phi_73_pred_4;
                            _3776 = frontier_phi_73_pred_5;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3486 = _3779 + _3499;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            if (_3501 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3501;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3484;
                        frontier_phi_67_pred_1 = _3485;
                        frontier_phi_67_pred_2 = _3486;
                        frontier_phi_67_pred_3 = _3483;
                        frontier_phi_67_pred_4 = _3482;
                        frontier_phi_67_pred_5 = _3481;
                    }
                    _3149 = frontier_phi_67_pred;
                    _3151 = frontier_phi_67_pred_1;
                    _3153 = frontier_phi_67_pred_2;
                    _3147 = frontier_phi_67_pred_3;
                    _3145 = frontier_phi_67_pred_4;
                    _3143 = frontier_phi_67_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3143;
                        _3282 = _3145;
                        _3283 = _3147;
                        _3284 = _3149;
                        _3285 = _3151;
                        _3286 = _3153;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3151;
                frontier_phi_55_56_ladder_1 = _3153;
                frontier_phi_55_56_ladder_2 = _3149;
                frontier_phi_55_56_ladder_3 = _3147;
                frontier_phi_55_56_ladder_4 = _3145;
                frontier_phi_55_56_ladder_5 = _3143;
            }
            else
            {
                frontier_phi_55_56_ladder = _3037;
                frontier_phi_55_56_ladder_1 = _3039;
                frontier_phi_55_56_ladder_2 = _3035;
                frontier_phi_55_56_ladder_3 = _3033;
                frontier_phi_55_56_ladder_4 = _3031;
                frontier_phi_55_56_ladder_5 = _3029;
            }
            _3142 = frontier_phi_55_56_ladder_5;
            _3144 = frontier_phi_55_56_ladder_4;
            _3146 = frontier_phi_55_56_ladder_3;
            _3148 = frontier_phi_55_56_ladder_2;
            _3150 = frontier_phi_55_56_ladder;
            _3152 = frontier_phi_55_56_ladder_1;
        }
        float _3157 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
        _2941 = (_3157 * _3148) + _2374;
        _2943 = (_3157 * _3150) + _2376;
        _2945 = (_3157 * _3152) + _2378;
        _2947 = ((_3142 * _1174) * _3157) + _2722;
        _2949 = ((_3144 * _1176) * _3157) + _2724;
        _2951 = ((_3146 * _1177) * _3157) + _2726;
    }
    else
    {
        _2941 = _2374;
        _2943 = _2376;
        _2945 = _2378;
        _2947 = _2722;
        _2949 = _2724;
        _2951 = _2726;
    }
    float _4876 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _4887 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _4898 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    uint _2971 = _1149 + 6u;
    float _2979 = _1111 / cbSceneParam._m0[86u].x;
    float _2980 = _1112 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _1046 : (isnan(_1046) ? cbSceneParam._m0[77u].w : min(_1046, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_1046 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_1046) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1046 : min(cbSceneParam._m0[80u].w, _1046));
        float _3055 = _3054 / _1046;
        float _3066 = _3055 * _1096;
        float _3067 = _1097 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3070 = _3055 * _1098;
        float _3072 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3067;
        float _3080 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3068 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3205 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3243 = ((abs(_3080 / _3068) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3090 * _3214) - exp2(_3090 * _3215)) * _3203))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2999);
        _3092 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3094 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3096 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3098 = _3254 * _2999;
    }
    else
    {
        _3092 = _2996;
        _3094 = _2997;
        _3096 = _2998;
        _3098 = _2999;
    }
    float _3110 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3111 = _3110 == 3.0;
    float _3112 = log2(_3098);
    float _3119 = exp2(_3112 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2941 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1189))) + ((_2947 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3120 = exp2(_3112 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2943 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1189))) + ((_2949 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3121 = exp2(_3112 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2945 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1189))) + ((_2951 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1993)) * cbPerFrame._m0[3u].x));
    float _3130 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3130 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.y = _3130 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.z = _3130 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.w = cbInstanceData._m0[_2971].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
}


