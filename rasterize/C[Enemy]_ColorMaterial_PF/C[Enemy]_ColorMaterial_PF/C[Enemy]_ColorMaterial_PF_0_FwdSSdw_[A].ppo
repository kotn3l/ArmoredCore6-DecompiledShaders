#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1432;
float _3833;
float _3834;
float _3835;
float _3836;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _299 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _314 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _322 = log2(0.0);
    float _324 = exp2(_322 * cbMtdParam._m0[23u].x);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    float _335 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    float _358 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = isnan(4.0) ? _359 : (isnan(_359) ? 4.0 : min(_359, 4.0));
    float _373 = floor(_360);
    vec4 _376 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _373));
    vec4 _400 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _411 = cbMtdParam._m0[9u].x * _400.x;
    float _412 = cbMtdParam._m0[9u].y * _400.y;
    float _413 = cbMtdParam._m0[9u].z * _400.z;
    float _420 = (((cbMtdParam._m0[10u].x * _376.x) - _411) * _337) + _411;
    float _421 = (((cbMtdParam._m0[10u].y * _376.y) - _412) * _337) + _412;
    float _422 = (((cbMtdParam._m0[10u].z * _376.z) - _413) * _337) + _413;
    float _428 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _441 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _460 = (((cbMtdParam._m0[16u].x * _441.x) - _420) * _428) + _420;
    float _461 = (((cbMtdParam._m0[16u].y * _441.y) - _421) * _428) + _421;
    float _462 = (((cbMtdParam._m0[16u].z * _441.z) - _422) * _428) + _422;
    vec4 _475 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _495 = (((cbMtdParam._m0[19u].x * _475.x) - _460) * _326) + _460;
    float _496 = (((cbMtdParam._m0[19u].y * _475.y) - _461) * _326) + _461;
    float _497 = (((cbMtdParam._m0[19u].z * _475.z) - _462) * _326) + _462;
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _535 = (_314.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _510.x) - _495) * _301) + _495);
    float _537 = (_314.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _510.y) - _496) * _301) + _496);
    float _539 = (_314.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _510.z) - _497) * _301) + _497);
    float _543 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _552 = (_543 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _543))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3885 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _560 = ((cbMtdParam._m0[21u].x - _535) * _553) + _535;
    float _561 = ((cbMtdParam._m0[21u].y - _537) * _553) + _537;
    float _562 = ((cbMtdParam._m0[21u].z - _539) * _553) + _539;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[29u].x;
    _196[0u] = cbMtdParam._m0[29u].y;
    _195[1u] = cbMtdParam._m0[31u].x;
    _196[1u] = cbMtdParam._m0[31u].y;
    _195[2u] = cbMtdParam._m0[30u].z;
    _196[2u] = cbMtdParam._m0[30u].w;
    _195[3u] = cbMtdParam._m0[30u].x;
    _196[3u] = cbMtdParam._m0[30u].y;
    _195[4u] = cbMtdParam._m0[29u].z;
    _196[4u] = cbMtdParam._m0[29u].w;
    float _604 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    uint _606 = uint(int(isnan(4.0) ? _604 : (isnan(_604) ? 4.0 : min(_604, 4.0))));
    float _613 = ((_196[_606] - cbMtdParam._m0[22u].z) * _337) + cbMtdParam._m0[22u].z;
    float _616 = ((cbMtdParam._m0[22u].w - _613) * _428) + _613;
    float _619 = ((cbMtdParam._m0[25u].y - _616) * _326) + _616;
    float _622 = ((cbMtdParam._m0[26u].y - _619) * _301) + _619;
    float _624 = _622 - (_622 * _543);
    vec4 _640 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _373));
    vec4 _658 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _666 = cbMtdParam._m0[22u].x + _658.z;
    float _669 = (((_640.z + _195[_606]) - _666) * _337) + _666;
    vec4 _682 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _693 = (((_682.z - _669) + cbMtdParam._m0[28u].z) * _428) + _669;
    float _699 = ((((_288 * 2.0) * _693) - _693) * cbMtdParam._m0[24u].w) + _693;
    vec4 _712 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _723 = (((cbMtdParam._m0[23u].z + _712.z) - _699) * _326) + _699;
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _747 = (((_736.z - _723) + cbMtdParam._m0[26u].z) * _301) + _723;
    vec4 _762 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _777 = ((cbMtdParam._m0[27u].z * _543) * ((_762.z * cbMtdParam._m0[27u].y) - _747)) + _747;
    float _789 = ((_640.x - _660) * _337) + _660;
    float _790 = ((_640.y - _661) * _337) + _661;
    float _795 = ((_682.x - _789) * _428) + _789;
    float _796 = ((_682.y - _790) * _428) + _790;
    float _801 = ((_712.x - _795) * _326) + _795;
    float _802 = ((_712.y - _796) * _326) + _796;
    float _811 = ((((_736.x - _801) * _301) + _801) * 2.0) + (-1.0);
    float _812 = ((((_736.y - _802) * _301) + _802) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3906 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    float _828 = ((cbMtdParam._m0[25u].z * ((_284.x * 2.0) + (-1.0))) + _811) + ((((_762.x * 2.0) + (-1.0)) * _543) * cbMtdParam._m0[27u].x);
    float _829 = ((cbMtdParam._m0[25u].z * ((_284.y * 2.0) + (-1.0))) + _812) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_762.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _831 = gl_FragCoord.x * 0.125;
    float _833 = gl_FragCoord.y * 0.125;
    float _843 = fma(_818, _231 * NORMAL.x, fma(_829, _238 * TANGENT.x, (_224 * _216) * _828));
    float _846 = fma(_818, _231 * NORMAL.y, fma(_829, _238 * TANGENT.y, (_224 * _217) * _828));
    float _849 = fma(_818, _231 * NORMAL.z, fma(_829, _238 * TANGENT.z, (_224 * _218) * _828));
    float _853 = inversesqrt(dot(vec3(_843, _846, _849), vec3(_843, _846, _849)));
    float _854 = _853 * _843;
    float _855 = _853 * _846;
    float _856 = _853 * _849;
    float _3917 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _857 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3939 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3950 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3961 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _861 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_831, _833)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _881 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _942 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_831, _833));
    float _944 = _942.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1114 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1120 = (cbMatDynParam._m0[5u].x * _1114) + cbMatDynParam._m0[5u].y;
        float _3972 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1125 = (cbMatDynParam._m0[5u].z * _1114) + cbMatDynParam._m0[5u].w;
        float _3983 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) - _1121)) + _1121) < ((_944 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_856, cbSceneParam._m0[5u].z, fma(_855, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _854));
    float _977 = fma(_856, cbSceneParam._m0[6u].z, fma(_855, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _854));
    float _980 = fma(_856, cbSceneParam._m0[7u].z, fma(_855, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _854));
    uint _993 = uint(roundEven(NORMAL.w)) * 13u;
    uint _994 = _993 + 9u;
    uint _995 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_995].z;
    float _3994 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1007 = 1.0 - _861;
    float _1008 = _1004 * _1007;
    float _1009 = _1005 * _1007;
    float _1010 = _1006 * _1007;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _861;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _861;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _861;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1033 = _1030.x * TEXCOORD_3.w;
    float _1034 = dot(vec3(_854, _855, _856), vec3(_938, _939, _940));
    float _1037 = _1034 * 2.0;
    float _1041 = (_1037 * _854) - _938;
    float _1042 = (_1037 * _855) - _939;
    float _1043 = (_1037 * _856) - _940;
    float _1047 = abs(dot(vec3(_938, _939, _940), vec3(_854, _855, _856)));
    float _4027 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1049 = sqrt(_857);
    float _1060 = exp2((_1049 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1049 * 3.0));
    float _1066 = (1.0 - _1060) * ((_1049 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1067 = _1060 * _1049;
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1431;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1160 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1164 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1189 = _1095 + _854;
        float _1190 = _1099 + _855;
        float _1191 = _1103 + _856;
        float _1201 = fma(_1191, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189)) - _1156;
        float _1202 = fma(_1191, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189)) - _1160;
        float _1203 = fma(_1191, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189)) - _1164;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1259 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1225.x + (-0.5));
        float _1261 = _1259 * (_1225.y + (-0.5));
        float _1262 = _1259 * (_1225.z + (-0.5));
        float _1269 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1232.x + (-0.5));
        float _1271 = _1269 * (_1232.y + (-0.5));
        float _1272 = _1269 * (_1232.z + (-0.5));
        float _1279 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1239.x + (-0.5));
        float _1281 = _1279 * (_1239.y + (-0.5));
        float _1282 = _1279 * (_1239.z + (-0.5));
        float _1289 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1246.x + (-0.5));
        float _1291 = _1289 * (_1246.y + (-0.5));
        float _1292 = _1289 * (_1246.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1313 = (dot(vec3(_854, _855, _856), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1323 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4075 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1325 + 1.0))) + _1330) * _1293;
        float _1340 = _1261 * 0.5;
        float _1341 = _1271 * 0.5;
        float _1342 = _1281 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_854, _855, _856), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4108 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1367 + 1.0))) + _1372) * _1294;
        float _1382 = _1262 * 0.5;
        float _1383 = _1272 * 0.5;
        float _1384 = _1282 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_854, _855, _856), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4141 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1409 + 1.0))) + _1414) * _1295;
        _1431 = _1262;
        _1433 = _1261;
        _1434 = _1260;
        _1435 = _1272;
        _1436 = _1271;
        _1437 = _1270;
        _1438 = _1282;
        _1439 = _1281;
        _1440 = _1280;
        _1441 = _1295;
        _1442 = _1294;
        _1443 = _1293;
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1432;
        _1433 = _1432;
        _1434 = _1432;
        _1435 = _1432;
        _1436 = _1432;
        _1437 = _1432;
        _1438 = _1432;
        _1439 = _1432;
        _1440 = _1432;
        _1441 = _1432;
        _1442 = _1432;
        _1443 = _1432;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1473 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1477 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1500 = _1095 + _854;
        float _1501 = _1099 + _855;
        float _1502 = _1103 + _856;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_854, _855, _856), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4204 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_854, _855, _856), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4237 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_854, _855, _856), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4270 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1432;
        _1739 = _1432;
        _1740 = _1432;
        _1741 = _1432;
        _1742 = _1432;
        _1743 = _1432;
        _1744 = _1432;
        _1745 = _1432;
        _1746 = _1432;
        _1747 = _1432;
        _1748 = _1432;
        _1749 = _1432;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1041 * 0.5;
    float _1807 = _1042 * 0.5;
    float _1808 = _1043 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1431, _1435, _1438, _1441));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _857);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1936 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1939 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1967 = frontier_phi_19_17_ladder;
        }
        float _2191;
        if (_1936 > 0.0)
        {
            _2191 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2191 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_1939 > 0.0)
        {
            _2448 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2450 = isnan(_2191) ? _1967 : (isnan(_1967) ? _2191 : min(_1967, _2191));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1933) + _1922;
        float _2456 = (_2451 * _1936) + _1926;
        float _2457 = (_2451 * _1939) + _1930;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2458;
        float _2462 = _2458 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 > _2462) || ((_2456 < _2460) || ((_2455 < _2460) || (_2455 > _2462))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2457, cbModelParam._m0[9u].z, fma(_2456, cbModelParam._m0[9u].y, _2455 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2457, cbModelParam._m0[10u].z, fma(_2456, cbModelParam._m0[10u].y, _2455 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2457, cbModelParam._m0[11u].z, fma(_2456, cbModelParam._m0[11u].y, _2455 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_18_40_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_18_40_ladder_2;
        _1957 = frontier_phi_18_40_ladder_1;
        _1959 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1875);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _857);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2018 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _2022 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2026 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2029 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2032 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2035 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2196;
        if (_2029 > 0.0)
        {
            _2196 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2196 = frontier_phi_30_26_ladder;
        }
        float _2475;
        if (_2032 > 0.0)
        {
            _2475 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2475 = frontier_phi_42_37_ladder;
        }
        float _2688;
        if (_2035 > 0.0)
        {
            _2688 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2688 = frontier_phi_51_48_ladder;
        }
        float _2690 = isnan(_2475) ? _2196 : (isnan(_2196) ? _2475 : min(_2196, _2475));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _2029) + _2018;
        float _2696 = (_2691 * _2032) + _2022;
        float _2697 = (_2691 * _2035) + _2026;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_27_51_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2054 = frontier_phi_27_51_ladder_2;
        _2056 = frontier_phi_27_51_ladder_1;
        _2058 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1964);
        _2054 = _2038.x * cbModelParam._m0[1u].z;
        _2056 = _2038.y * cbModelParam._m0[1u].z;
        _2058 = _2038.z * cbModelParam._m0[1u].z;
    }
    float _2071 = (((_1066 * _1018) + _1067) * _1033) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2073 = (((_1066 * _1020) + _1067) * _1033) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2075 = (((_1066 * _1021) + _1067) * _1033) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2078 = fma(_2075, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2071 * cbSceneParam._m0[89u].x));
    float _2081 = fma(_2075, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2071 * cbSceneParam._m0[90u].x));
    float _2084 = fma(_2075, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2071 * cbSceneParam._m0[91u].x));
    vec4 _2092 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_955, _956));
    float _2094 = _2092.w;
    float _2106 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2094);
    float _2107 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2094);
    float _2108 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2094);
    uvec4 _2112 = floatBitsToUint(cbInstanceData._m0[_993 + 5u]);
    uint _2114 = _2112.x * 14u;
    uint _2115 = _2114 + 13u;
    float _2122 = _1033 + (-1.0);
    float _2127 = (cbLight._m0[_2115].x * _2122) + 1.0;
    float _2128 = (cbLight._m0[_2115].y * _2122) + 1.0;
    float _2129 = (cbLight._m0[_2115].z * _2122) + 1.0;
    float _2130 = (cbLight._m0[_2115].w * _2122) + 1.0;
    uint _2131 = _2114 + 5u;
    float _2137 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2141 = _2114 + 4u;
    float _2150 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2154 = _2114 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_854, _855, _856));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_854, _855, _856));
    float _4406 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4417 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2131].x * _2137) * _2175) + (((cbLight._m0[_2141].x * _2106) * _2150) * _2173);
    float _2183 = ((_2137 * cbLight._m0[_2131].y) * _2175) + (((cbLight._m0[_2141].y * _2107) * _2150) * _2173);
    float _2184 = ((_2137 * cbLight._m0[_2131].z) * _2175) + (((cbLight._m0[_2141].z * _2108) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2114 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2190)
    {
        _2201 = _2182;
        _2203 = _2183;
        _2205 = _2184;
    }
    else
    {
        uint _2209 = _2114 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2114 + 2u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4428 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2228 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2182;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2183;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2184;
    }
    bool _2208 = _2188.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2208)
    {
        _2246 = _2201;
        _2248 = _2203;
        _2250 = _2205;
    }
    else
    {
        uint _2419 = _2114 + 7u;
        float _2435 = (dot(vec3(cbLight._m0[_2114 + 3u].xyz), vec3(_854, _855, _856)) * 0.5) + 0.5;
        float _2436 = _2435 * _2435;
        float _4444 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2437 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2438 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2246 = (((cbLight._m0[_2419].x * 0.3183098733425140380859375) * _2437) * _2438) + _2201;
        _2248 = (((cbLight._m0[_2419].y * 0.3183098733425140380859375) * _2437) * _2438) + _2203;
        _2250 = (((cbLight._m0[_2419].z * 0.3183098733425140380859375) * _2437) * _2438) + _2205;
    }
    uint _2253 = _2114 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _857) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2114].x + _938;
    float _2269 = cbLight._m0[_2114].y + _939;
    float _2270 = cbLight._m0[_2114].z + _940;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2114].xyz));
    float _4460 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2282 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2283 = dot(vec3(_854, _855, _856), vec3(_2275, _2276, _2277));
    float _4482 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2275, _2276, _2277));
    float _4493 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
    float _2304 = 0.959999978542327880859375 - _1015;
    float _2306 = 0.959999978542327880859375 - _1016;
    float _2307 = 0.959999978542327880859375 - _1017;
    float _2314 = 1.0 - _2267;
    float _2325 = (0.5 / (((_2282 * ((_2281 * _2314) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2314) + _2267) * _2281))) * _2281;
    float _4504 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2341 = _2114 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _857) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2154].x + _938;
    float _2355 = cbLight._m0[_2154].y + _939;
    float _2356 = cbLight._m0[_2154].z + _940;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2154].xyz));
    float _4515 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2368 = dot(vec3(_854, _855, _856), vec3(_2361, _2362, _2363));
    float _4526 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2361, _2362, _2363));
    float _4537 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
    float _2394 = 1.0 - _2353;
    float _2404 = (0.5 / (((_2282 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2394) + _2353) * _2367))) * _2367;
    float _4548 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2416 = (((((_2387 * _2304) + _1018) * cbLight._m0[_2341].x) * _2406) * _2137) + ((((cbLight._m0[_2253].x * _2106) * ((_2303 * _2304) + _1018)) * _2327) * _2150);
    float _2417 = (((((_2387 * _2306) + _1020) * cbLight._m0[_2341].y) * _2406) * _2137) + ((((cbLight._m0[_2253].y * _2107) * ((_2303 * _2306) + _1020)) * _2327) * _2150);
    float _2418 = (((((_2387 * _2307) + _1021) * cbLight._m0[_2341].z) * _2406) * _2137) + ((((cbLight._m0[_2253].z * _2108) * ((_2303 * _2307) + _1021)) * _2327) * _2150);
    float _2480;
    float _2482;
    float _2484;
    if (_2190)
    {
        _2480 = _2416;
        _2482 = _2417;
        _2484 = _2418;
    }
    else
    {
        uint _2486 = _2114 + 2u;
        uint _2490 = _2114 + 10u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _857) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _938;
        float _2507 = cbLight._m0[_2486].y + _939;
        float _2508 = cbLight._m0[_2486].z + _940;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2486].xyz));
        float _4559 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2520 = dot(vec3(_854, _855, _856), vec3(_2513, _2514, _2515));
        float _4570 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4581 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
        float _2546 = 1.0 - _2505;
        float _2556 = (0.5 / (((_2282 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2546) + _2505) * _2519))) * _2519;
        float _4592 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2480 = (((((_2539 * _2304) + _1018) * cbLight._m0[_2490].x) * _2558) * _2559) + _2416;
        _2482 = (((((_2539 * _2306) + _1020) * cbLight._m0[_2490].y) * _2558) * _2559) + _2417;
        _2484 = (((((_2539 * _2307) + _1021) * cbLight._m0[_2490].z) * _2558) * _2559) + _2418;
    }
    float _2594;
    float _2596;
    float _2598;
    if (_2208)
    {
        _2594 = _2480;
        _2596 = _2482;
        _2598 = _2484;
    }
    else
    {
        uint _2605 = _2114 + 3u;
        uint _2609 = _2114 + 11u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _857) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _938;
        float _2626 = cbLight._m0[_2605].y + _939;
        float _2627 = cbLight._m0[_2605].z + _940;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_854, _855, _856), vec3(cbLight._m0[_2605].xyz));
        float _4608 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2639 = dot(vec3(_854, _855, _856), vec3(_2632, _2633, _2634));
        float _4619 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4630 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2282 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2665) + _2624) * _2638))) * _2638;
        float _4641 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2594 = (((((_2658 * _2304) + _1018) * cbLight._m0[_2609].x) * _2677) * _2678) + _2480;
        _2596 = (((((_2658 * _2306) + _1020) * cbLight._m0[_2609].y) * _2677) * _2678) + _2482;
        _2598 = (((((_2658 * _2307) + _1021) * cbLight._m0[_2609].z) * _2677) * _2678) + _2484;
    }
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_2112.y == 0u)
    {
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2753;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2753;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2753;
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.x;
        uint _2780 = uint((float(_2768.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _2769))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _2769)));
        float _2790 = (log2(_2756 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2791 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        uint _2794 = uint(isnan(14.0) ? _2791 : (isnan(_2791) ? 14.0 : min(_2791, 14.0)));
        uvec4 _2799 = texelFetch(g_lightClusterGridBuffer, int(((_2794 << 2u) + (_2780 << 6u)) >> 2u));
        uint _2800 = _2799.x;
        uint _2801 = _2768.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2801 >> 4u) & 15u)) + 4294967295u) & _2800) == 0u) || ((_2801 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            uint _3060 = 0u;
            uint _3069;
            bool _3070;
            for (;;)
            {
                _3069 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                _3070 = _3069 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3070)
                {
                    frontier_phi_68_pred = _3054;
                    frontier_phi_68_pred_1 = _3059;
                    frontier_phi_68_pred_2 = _3058;
                    frontier_phi_68_pred_3 = _3057;
                    frontier_phi_68_pred_4 = _3056;
                    frontier_phi_68_pred_5 = _3055;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3069;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3060 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _2754;
                        float _3266 = _3225.y - _2755;
                        float _3267 = _3225.z - _2756;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_974, _977, _980), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4667 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2754;
                        float _3301 = (-0.0) - _2755;
                        float _3302 = (-0.0) - _2756;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1049;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_974, _977, _980), vec3(_3307, _3308, _3309));
                        float _4683 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3342 = dot(vec3(_974, _977, _980), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4694 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3275) + _3351;
                        float _4705 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4716 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3129 = (_3296 * _3244.x) + _3202;
                        _3130 = (_3296 * _3244.y) + _3203;
                        _3131 = (_3296 * _3244.z) + _3204;
                        _3126 = (_3377 * _3261.x) + _3199;
                        _3127 = (_3377 * _3261.y) + _3200;
                        _3128 = (_3377 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_68_pred = _3126;
                    frontier_phi_68_pred_1 = _3131;
                    frontier_phi_68_pred_2 = _3130;
                    frontier_phi_68_pred_3 = _3129;
                    frontier_phi_68_pred_4 = _3128;
                    frontier_phi_68_pred_5 = _3127;
                }
                _2902 = frontier_phi_68_pred;
                _2912 = frontier_phi_68_pred_1;
                _2910 = frontier_phi_68_pred_2;
                _2908 = frontier_phi_68_pred_3;
                _2906 = frontier_phi_68_pred_4;
                _2904 = frontier_phi_68_pred_5;
                uint _3061 = _3060 + 1u;
                if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3054 = _2902;
                    _3055 = _2904;
                    _3056 = _2906;
                    _3057 = _2908;
                    _3058 = _2910;
                    _3059 = _2912;
                    _3060 = _3061;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((4294967295u << _2918) & _2800) == 0u)
        {
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
        }
        else
        {
            float _3047 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
            float _3048 = _3047 * _2754;
            float _3049 = _3047 * _2755;
            float _3050 = _3047 * _2756;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3182 = _2901;
                float _3183 = _2903;
                float _3184 = _2905;
                float _3185 = _2907;
                float _3186 = _2909;
                float _3187 = _2911;
                uint _3188 = _2918;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2794 << 5u) + (_2780 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3198)
                    {
                        frontier_phi_79_pred = _3187;
                        frontier_phi_79_pred_1 = _3186;
                        frontier_phi_79_pred_2 = _3185;
                        frontier_phi_79_pred_3 = _3184;
                        frontier_phi_79_pred_4 = _3183;
                        frontier_phi_79_pred_5 = _3182;
                    }
                    else
                    {
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        uint _3410 = _3197;
                        uint _3411;
                        vec4 _3436;
                        float _3437;
                        vec4 _3452;
                        vec3 _3464;
                        vec4 _3479;
                        vec4 _3494;
                        float _3540;
                        bool _3541;
                        for (;;)
                        {
                            uint _3421 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3410));
                            _3411 = (_3410 + 4294967295u) & _3410;
                            uint _3423 = _3421 * 40u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3437 = _3436.w;
                            uint _3439 = (_3421 * 40u) + 4u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3421 * 40u) + 8u;
                            _3464 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x));
                            uint _3466 = (_3421 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3421 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3421 * 40u) + 24u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3515 = (_3421 * 40u) + 28u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3540 = fma(_2756, _3528.z, fma(_2755, _3528.y, _3528.x * _2754)) + _3528.w;
                            _3541 = !((fma(_2756, _3509.z, fma(_2755, _3509.y, _3509.x * _2754)) + _3509.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3541)
                            {
                                float _3568 = _3436.x - _2754;
                                float _3569 = _3436.y - _2755;
                                float _3570 = _3436.z - _2756;
                                float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                                float _3574 = inversesqrt(_3571);
                                float _3575 = _3574 * _3568;
                                float _3576 = _3574 * _3569;
                                float _3577 = _3574 * _3570;
                                float _3581 = 1.0 - (_3571 / (_3437 * _3437));
                                float _4727 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3586 = sqrt(_3571) * _3452.w;
                                float _3588 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                                float _3589 = _3588 * _3588;
                                float _3592 = ((1.0 - _3589) * dot(vec3(_3575, _3576, _3577), vec3(_974, _977, _980))) + _3589;
                                float _3595 = _3586 * _3586;
                                float _3599 = (fma(_2756, _3479.z, fma(_2755, _3479.y, _3479.x * _2754)) + _3479.w) / _3540;
                                float _3600 = (fma(_2756, _3494.z, fma(_2755, _3494.y, _3494.x * _2754)) + _3494.w) / _3540;
                                float _3604 = 1.0 - dot(vec2(_3599, _3600), vec2(_3599, _3600));
                                float _4743 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3606 = _3605 * (((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3582) / ((_3595 * 0.699999988079071044921875) + 1.0));
                                float _3618 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                                float _3619 = 1.0 - _1049;
                                float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                                float _3627 = _3626 * _3626;
                                float _3628 = _3627 * _3627;
                                float _3629 = _3575 - _3048;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                                float _3639 = dot(vec3(_974, _977, _980), vec3((-0.0) - _3048, (-0.0) - _3049, (-0.0) - _3050));
                                float _4754 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3643 = dot(vec3(_974, _977, _980), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                                float _4765 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                                float _3651 = _3588 * _3627;
                                float _3652 = _3651 * _3651;
                                float _3658 = ((1.0 - _3652) * dot(vec3(_974, _977, _980), vec3(_3575, _3576, _3577))) + _3652;
                                float _4776 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3660 = 1.0 - _3627;
                                float _3670 = (0.5 / (((_3659 * ((_3642 * _3660) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3627) * _3642))) * _3659;
                                float _4787 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3680 = (_3605 * _3582) * (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3650 * _3650) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3606 * _3452.y;
                                frontier_phi_85_pred_1 = _3606 * _3452.x;
                                frontier_phi_85_pred_2 = _3680 * _3464.z;
                                frontier_phi_85_pred_3 = _3680 * _3464.y;
                                frontier_phi_85_pred_4 = _3680 * _3464.x;
                                frontier_phi_85_pred_5 = _3606 * _3452.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_85_pred;
                            _3687 = frontier_phi_85_pred_1;
                            _3686 = frontier_phi_85_pred_2;
                            _3685 = frontier_phi_85_pred_3;
                            _3684 = frontier_phi_85_pred_4;
                            _3689 = frontier_phi_85_pred_5;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            if (_3411 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3411;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3396;
                        frontier_phi_79_pred_1 = _3395;
                        frontier_phi_79_pred_2 = _3394;
                        frontier_phi_79_pred_3 = _3393;
                        frontier_phi_79_pred_4 = _3392;
                        frontier_phi_79_pred_5 = _3391;
                    }
                    _3033 = frontier_phi_79_pred;
                    _3031 = frontier_phi_79_pred_1;
                    _3029 = frontier_phi_79_pred_2;
                    _3027 = frontier_phi_79_pred_3;
                    _3025 = frontier_phi_79_pred_4;
                    _3023 = frontier_phi_79_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3023;
                        _3183 = _3025;
                        _3184 = _3027;
                        _3185 = _3029;
                        _3186 = _3031;
                        _3187 = _3033;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3027;
                frontier_phi_60_61_ladder_1 = _3033;
                frontier_phi_60_61_ladder_2 = _3031;
                frontier_phi_60_61_ladder_3 = _3029;
                frontier_phi_60_61_ladder_4 = _3025;
                frontier_phi_60_61_ladder_5 = _3023;
            }
            else
            {
                frontier_phi_60_61_ladder = _2905;
                frontier_phi_60_61_ladder_1 = _2911;
                frontier_phi_60_61_ladder_2 = _2909;
                frontier_phi_60_61_ladder_3 = _2907;
                frontier_phi_60_61_ladder_4 = _2903;
                frontier_phi_60_61_ladder_5 = _2901;
            }
            _3022 = frontier_phi_60_61_ladder_5;
            _3024 = frontier_phi_60_61_ladder_4;
            _3026 = frontier_phi_60_61_ladder;
            _3028 = frontier_phi_60_61_ladder_3;
            _3030 = frontier_phi_60_61_ladder_2;
            _3032 = frontier_phi_60_61_ladder_1;
        }
        float _3037 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
        _2813 = (_3037 * _3028) + _2246;
        _2815 = (_3037 * _3030) + _2248;
        _2817 = (_3037 * _3032) + _2250;
        _2819 = ((_3022 * _1018) * _3037) + _2594;
        _2821 = ((_3024 * _1020) * _3037) + _2596;
        _2823 = ((_3026 * _1021) * _3037) + _2598;
    }
    else
    {
        _2813 = _2246;
        _2815 = _2248;
        _2817 = _2250;
        _2819 = _2594;
        _2821 = _2596;
        _2823 = _2598;
    }
    float _4803 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4814 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4825 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _2840 = ((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2813 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1033))) + ((_2819 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2841 = ((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2815 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1033))) + ((_2821 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2817 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1033))) + ((_2823 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    uint _2843 = _993 + 6u;
    float _2851 = _955 / cbSceneParam._m0[86u].x;
    float _2852 = _956 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _881 : (isnan(_881) ? cbSceneParam._m0[77u].w : min(_881, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_881 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_881) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _881 : min(cbSceneParam._m0[80u].w, _881));
        float _2927 = _2926 / _881;
        float _2938 = _2927 * _931;
        float _2939 = _932 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2942 = _2927 * _933;
        float _2944 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2945 = _2944 + cbSceneParam._m0[79u].w;
        float _2946 = cbSceneParam._m0[79u].w - _2939;
        float _2952 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2942 * _2942));
        float _2955 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2952;
        float _2960 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2962 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3139;
        if (abs((_2940 - _2944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3139 = ((((_2945 > 0.0) ? exp2(_2960 * _2945) : (2.0 - exp2(_2962 * _2945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2955;
        }
        else
        {
            float _3083 = 1.0 / cbSceneParam._m0[80u].x;
            float _3084 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : max(_2945, _2946));
            float _3085 = isnan(_2946) ? _2945 : (isnan(_2945) ? _2946 : min(_2945, _2946));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            _3139 = ((abs(_2952 / _2940) * cbSceneParam._m0[80u].y) * ((((_3094 - _3095) * 2.0) - ((exp2(_2960 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)))) - exp2(_2960 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))))) * _3083)) - ((exp2(_2962 * _3094) - exp2(_2962 * _3095)) * _3083))) + (_2955 * cbSceneParam._m0[80u].z);
        }
        vec4 _3141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3150 = exp2((_3139 * (-1.44269502162933349609375)) * (1.0 - _3141.w));
        float _3151 = log2(_3150);
        float _3167 = log2(_2871);
        _2964 = (exp2(_3167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].x)) * _3141.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2966 = (exp2(_3167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].y)) * _3141.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2968 = (exp2(_3167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3151 * cbSceneParam._m0[78u].z)) * _3141.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2970 = _3150 * _2871;
    }
    else
    {
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
        _2970 = _2871;
    }
    bool _3177;
    vec4 _2980;
    vec4 _3002;
    float _3004;
    float _3008;
    float _3009;
    float _3010;
    float _3011;
    bool _3021;
    for (;;)
    {
        _2980 = cbMatDynParam._m0[0u];
        float _2982 = roundEven(_2980.y);
        bool _2983 = _2982 == 3.0;
        float _2984 = log2(_2970);
        float _2991 = exp2(_2984 * cbSceneParam._m0[78u].x) * _2840;
        float _2992 = exp2(_2984 * cbSceneParam._m0[78u].y) * _2841;
        float _2993 = exp2(_2984 * cbSceneParam._m0[78u].z) * _2842;
        float _3000 = _944 + (-0.5);
        _3002 = cbMtdParam._m0[1u];
        _3004 = _3002.y * _3000;
        float _3007 = (_2982 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3008 = _3007 * (_2983 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2964)));
        _3009 = _3007 * (_2983 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2966)));
        _3010 = _3007 * (_2983 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2968)));
        _3011 = _3000 * 0.999000012874603271484375;
        _3021 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3021)
        {
            if ((cbInstanceData._m0[_993 + 7u].x + _3011) < 0.5)
            {
                _3177 = true;
                break;
            }
        }
        uint _3118 = _994 + uint(_2980.w);
        if ((cbInstanceData._m0[_3118].w < 1.0) && ((cbInstanceData._m0[_3118].w + _3011) < 0.5))
        {
            _3177 = true;
            break;
        }
        if ((_3004 + 1.0) < _3002.x)
        {
            _3177 = true;
            break;
        }
        _3177 = false;
        break;
    }
    float _3382;
    if (_3177)
    {
        discard_state = true;
        _3382 = 0.0;
    }
    else
    {
        _3382 = cbInstanceData._m0[_2843].w;
    }
    SV_Target.x = _3008;
    SV_Target.y = _3009;
    SV_Target.z = _3010;
    SV_Target.w = _3382;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2843].w;
    discard_exit();
}


