#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1456;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _303 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _319 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _331 = exp2(log2(_319.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    vec4 _356 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _366 = roundEven(5.0 - _362);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _368 = isnan(4.0) ? _367 : (isnan(_367) ? 4.0 : min(_367, 4.0));
    float _381 = floor(_368);
    vec4 _384 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _381));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _448 = roundEven(_362);
    float _449 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _451 = uint(int(isnan(5.0) ? _449 : (isnan(_449) ? 5.0 : min(_449, 5.0))));
    vec4 _481 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _492 = cbMtdParam._m0[9u].x * _481.x;
    float _493 = cbMtdParam._m0[9u].y * _481.y;
    float _494 = cbMtdParam._m0[9u].z * _481.z;
    float _501 = ((((((_198[_451] - cbMtdParam._m0[10u].x) * _359) + cbMtdParam._m0[10u].x) * _384.x) - _492) * _344) + _492;
    float _502 = ((((((_199[_451] - cbMtdParam._m0[10u].y) * _359) + cbMtdParam._m0[10u].y) * _384.y) - _493) * _344) + _493;
    float _503 = ((((((_200[_451] - cbMtdParam._m0[10u].z) * _359) + cbMtdParam._m0[10u].z) * _384.z) - _494) * _344) + _494;
    float _509 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _522 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _541 = (((cbMtdParam._m0[16u].x * _522.x) - _501) * _509) + _501;
    float _542 = (((cbMtdParam._m0[16u].y * _522.y) - _502) * _509) + _502;
    float _543 = (((cbMtdParam._m0[16u].z * _522.z) - _503) * _509) + _503;
    vec4 _556 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _576 = (((cbMtdParam._m0[19u].x * _556.x) - _541) * _333) + _541;
    float _577 = (((cbMtdParam._m0[19u].y * _556.y) - _542) * _333) + _542;
    float _578 = (((cbMtdParam._m0[19u].z * _556.z) - _543) * _333) + _543;
    vec4 _590 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _615 = (_319.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _590.x) - _576) * _305) + _576);
    float _617 = (_319.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _590.y) - _577) * _305) + _577);
    float _619 = (_319.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _590.z) - _578) * _305) + _578);
    float _623 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _632 = (_623 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _623))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4112 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _640 = ((cbMtdParam._m0[21u].x - _615) * _633) + _615;
    float _641 = ((cbMtdParam._m0[21u].y - _617) * _633) + _617;
    float _642 = ((cbMtdParam._m0[21u].z - _619) * _633) + _619;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _682 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    uint _684 = uint(int(isnan(4.0) ? _682 : (isnan(_682) ? 4.0 : min(_682, 4.0))));
    float _691 = ((_194[_684] - cbMtdParam._m0[22u].z) * _344) + cbMtdParam._m0[22u].z;
    float _694 = ((cbMtdParam._m0[22u].w - _691) * _509) + _691;
    float _697 = ((cbMtdParam._m0[25u].y - _694) * _333) + _694;
    float _700 = ((cbMtdParam._m0[26u].y - _697) * _305) + _697;
    float _702 = _700 - (_700 * _623);
    vec4 _718 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _381));
    vec4 _735 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _737 = _735.x;
    float _738 = _735.y;
    float _743 = cbMtdParam._m0[22u].x + _735.z;
    float _746 = (((_718.z + _193[_684]) - _743) * _344) + _743;
    vec4 _758 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _769 = (((_758.z - _746) + cbMtdParam._m0[28u].z) * _509) + _746;
    float _775 = ((((_292 * 2.0) * _769) - _769) * cbMtdParam._m0[24u].w) + _769;
    vec4 _787 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _798 = (((cbMtdParam._m0[23u].z + _787.z) - _775) * _333) + _775;
    vec4 _811 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _822 = (((_811.z - _798) + cbMtdParam._m0[26u].z) * _305) + _798;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _852 = ((cbMtdParam._m0[27u].z * _623) * ((_837.z * cbMtdParam._m0[27u].y) - _822)) + _822;
    float _864 = ((_718.x - _737) * _344) + _737;
    float _865 = ((_718.y - _738) * _344) + _738;
    float _870 = ((_758.x - _864) * _509) + _864;
    float _871 = ((_758.y - _865) * _509) + _865;
    float _876 = ((_787.x - _870) * _333) + _870;
    float _877 = ((_787.y - _871) * _333) + _871;
    float _886 = ((((_811.x - _876) * _305) + _876) * 2.0) + (-1.0);
    float _887 = ((((_811.y - _877) * _305) + _877) * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _4133 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _893 = sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))));
    float _903 = ((cbMtdParam._m0[25u].z * ((_288.x * 2.0) + (-1.0))) + _886) + ((((_837.x * 2.0) + (-1.0)) * _623) * cbMtdParam._m0[27u].x);
    float _904 = ((cbMtdParam._m0[25u].z * ((_288.y * 2.0) + (-1.0))) + _887) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_837.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _907 = fma(_893, _235 * NORMAL.x, fma(_904, _242 * TANGENT.x, (_228 * _220) * _903));
    float _910 = fma(_893, _235 * NORMAL.y, fma(_904, _242 * TANGENT.y, (_228 * _221) * _903));
    float _913 = fma(_893, _235 * NORMAL.z, fma(_904, _242 * TANGENT.z, (_228 * _222) * _903));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _4144 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _921 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4166 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4177 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4188 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _925 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _941 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _991 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _981);
    float _992 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _981);
    float _993 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _981);
    float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
    float _998 = _991 * _997;
    float _999 = _992 * _997;
    float _1000 = _993 * _997;
    float _1006 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1007 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1025 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1028 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1031 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1044 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1046 = (_1044 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1046].z;
    float _4199 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _1058 = 1.0 - _925;
    float _1059 = _1055 * _1058;
    float _1060 = _1056 * _1058;
    float _1061 = _1057 * _1058;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _925;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _925;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _925;
    float _1069 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    vec4 _1081 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1006, cbSceneParam._m0[86u].y * _1007));
    float _1084 = _1081.x * TEXCOORD_3.w;
    float _1085 = dot(vec3(_918, _919, _920), vec3(_998, _999, _1000));
    float _1088 = _1085 * 2.0;
    float _1092 = (_1088 * _918) - _998;
    float _1093 = (_1088 * _919) - _999;
    float _1094 = (_1088 * _920) - _1000;
    float _1098 = abs(dot(vec3(_998, _999, _1000), vec3(_918, _919, _920)));
    float _4232 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1100 = sqrt(_921);
    float _1111 = exp2((_1100 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1100 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1100 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1100;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1455;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1180 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1184 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1188 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1213 = _1146 + _918;
        float _1214 = _1150 + _919;
        float _1215 = _1154 + _920;
        float _1225 = fma(_1215, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213)) - _1180;
        float _1226 = fma(_1215, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213)) - _1184;
        float _1227 = fma(_1215, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213)) - _1188;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1180 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1184 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[34u].z) + ((((((_1188 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1283 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1249.x + (-0.5));
        float _1285 = _1283 * (_1249.y + (-0.5));
        float _1286 = _1283 * (_1249.z + (-0.5));
        float _1293 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1256.x + (-0.5));
        float _1295 = _1293 * (_1256.y + (-0.5));
        float _1296 = _1293 * (_1256.z + (-0.5));
        float _1303 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1263.x + (-0.5));
        float _1305 = _1303 * (_1263.y + (-0.5));
        float _1306 = _1303 * (_1263.z + (-0.5));
        float _1313 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1270.x + (-0.5));
        float _1315 = _1313 * (_1270.y + (-0.5));
        float _1316 = _1313 * (_1270.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1337 = (dot(vec3(_918, _919, _920), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1347 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4280 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1349 + 1.0))) + _1354) * _1317;
        float _1364 = _1285 * 0.5;
        float _1365 = _1295 * 0.5;
        float _1366 = _1305 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_918, _919, _920), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4313 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1391 + 1.0))) + _1396) * _1318;
        float _1406 = _1286 * 0.5;
        float _1407 = _1296 * 0.5;
        float _1408 = _1306 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_918, _919, _920), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4346 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1433 + 1.0))) + _1438) * _1319;
        _1455 = _1286;
        _1457 = _1285;
        _1458 = _1284;
        _1459 = _1296;
        _1460 = _1295;
        _1461 = _1294;
        _1462 = _1306;
        _1463 = _1305;
        _1464 = _1304;
        _1465 = _1319;
        _1466 = _1318;
        _1467 = _1317;
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1456;
        _1457 = _1456;
        _1458 = _1456;
        _1459 = _1456;
        _1460 = _1456;
        _1461 = _1456;
        _1462 = _1456;
        _1463 = _1456;
        _1464 = _1456;
        _1465 = _1456;
        _1466 = _1456;
        _1467 = _1456;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1497 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1501 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1524 = _1146 + _918;
        float _1525 = _1150 + _919;
        float _1526 = _1154 + _920;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_918, _919, _920), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4409 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_918, _919, _920), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4442 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_918, _919, _920), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4475 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1456;
        _1763 = _1456;
        _1764 = _1456;
        _1765 = _1456;
        _1766 = _1456;
        _1767 = _1456;
        _1768 = _1456;
        _1769 = _1456;
        _1770 = _1456;
        _1771 = _1456;
        _1772 = _1456;
        _1773 = _1456;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1468)) + _1468;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1469)) + _1469;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1470)) + _1470;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1092 * 0.5;
    float _1831 = _1093 * 0.5;
    float _1832 = _1094 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1455, _1459, _1462, _1465));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1946 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1950 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1954 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1957 = fma(_1094, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092));
        float _1960 = fma(_1094, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092));
        float _1963 = fma(_1094, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092));
        float _1991;
        if (_1957 > 0.0)
        {
            _1991 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1991 = frontier_phi_14_12_ladder;
        }
        float _2162;
        if (_1960 > 0.0)
        {
            _2162 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2162 = frontier_phi_23_19_ladder;
        }
        float _2457;
        if (_1963 > 0.0)
        {
            _2457 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2457 = frontier_phi_35_30_ladder;
        }
        float _2459 = isnan(_2162) ? _1991 : (isnan(_1991) ? _2162 : min(_1991, _2162));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1957) + _1946;
        float _2465 = (_2460 * _1960) + _1950;
        float _2466 = (_2460 * _1963) + _1954;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_13_35_ladder = _2611.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2611.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2611.x * cbModelParam._m0[1u].y;
        }
        _1979 = frontier_phi_13_35_ladder_2;
        _1981 = frontier_phi_13_35_ladder_1;
        _1983 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1092, _1093, _1094), _1899);
        _1979 = _1967.x * cbModelParam._m0[1u].y;
        _1981 = _1967.y * cbModelParam._m0[1u].y;
        _1983 = _1967.z * cbModelParam._m0[1u].y;
    }
    float _1987 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1987 : min(cbModelParam._m0[25u].w, _1987));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2041 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2045 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2049 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2052 = fma(_1094, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092));
        float _2055 = fma(_1094, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092));
        float _2058 = fma(_1094, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092));
        float _2167;
        if (_2052 > 0.0)
        {
            _2167 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2167 = frontier_phi_25_21_ladder;
        }
        float _2484;
        if (_2055 > 0.0)
        {
            _2484 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2484 = frontier_phi_37_32_ladder;
        }
        float _2822;
        if (_2058 > 0.0)
        {
            _2822 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2822 = frontier_phi_47_44_ladder;
        }
        float _2824 = isnan(_2484) ? _2167 : (isnan(_2167) ? _2484 : min(_2167, _2484));
        float _2825 = isnan(_2822) ? _2824 : (isnan(_2824) ? _2822 : min(_2824, _2822));
        float _2829 = (_2825 * _2052) + _2041;
        float _2830 = (_2825 * _2055) + _2045;
        float _2831 = (_2825 * _2058) + _2049;
        float _2832 = _2825 * 9.9999997473787516355514526367188e-05;
        float _2833 = (-1.0) - _2832;
        float _2835 = _2832 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2831 > _2835) || ((_2831 < _2833) || ((_2830 > _2835) || ((_2830 < _2833) || ((_2829 < _2833) || (_2829 > _2835))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2831, cbModelParam._m0[17u].z, fma(_2830, cbModelParam._m0[17u].y, _2829 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2831, cbModelParam._m0[18u].z, fma(_2830, cbModelParam._m0[18u].y, _2829 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2831, cbModelParam._m0[19u].z, fma(_2830, cbModelParam._m0[19u].y, _2829 * cbModelParam._m0[19u].x))), _1988);
            frontier_phi_22_47_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2077 = frontier_phi_22_47_ladder_2;
        _2079 = frontier_phi_22_47_ladder_1;
        _2081 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1092, _1093, _1094), _1988);
        _2077 = _2061.x * cbModelParam._m0[1u].z;
        _2079 = _2061.y * cbModelParam._m0[1u].z;
        _2081 = _2061.z * cbModelParam._m0[1u].z;
    }
    float _2094 = (((_1117 * _1069) + _1118) * _1084) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1117 * _1071) + _1118) * _1084) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1117 * _1072) + _1118) * _1084) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2101 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2094 * cbSceneParam._m0[89u].x));
    float _2104 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2094 * cbSceneParam._m0[90u].x));
    float _2107 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2094 * cbSceneParam._m0[91u].x));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2154 = _2141 / _2153;
    float _2155 = _2145 / _2153;
    float _2156 = _2149 / _2153;
    float _2303;
    float _2304;
    float _2305;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2183 = ((uint(_2156 > cbSceneParam._m0[59u].y) + uint(_2156 > cbSceneParam._m0[59u].x)) + uint(_2156 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2184 = _2183 + 43u;
        uint _2192 = _2183 + 44u;
        uint _2200 = _2183 + 45u;
        uint _2208 = _2183 + 46u;
        float _2219 = fma(_2153, cbSceneParam._m0[_2184].w, fma(_2149, cbSceneParam._m0[_2184].z, fma(_2145, cbSceneParam._m0[_2184].y, _2141 * cbSceneParam._m0[_2184].x)));
        float _2223 = fma(_2153, cbSceneParam._m0[_2192].w, fma(_2149, cbSceneParam._m0[_2192].z, fma(_2145, cbSceneParam._m0[_2192].y, _2141 * cbSceneParam._m0[_2192].x)));
        float _2231 = fma(_2153, cbSceneParam._m0[_2208].w, fma(_2149, cbSceneParam._m0[_2208].z, fma(_2145, cbSceneParam._m0[_2208].y, _2141 * cbSceneParam._m0[_2208].x)));
        float _2236 = cbSceneParam._m0[33u].z * _2231;
        float _2238 = cbSceneParam._m0[33u].w * _2231;
        float _2241 = fma(_2153, cbSceneParam._m0[_2200].w, fma(_2149, cbSceneParam._m0[_2200].z, fma(_2145, cbSceneParam._m0[_2200].y, _2141 * cbSceneParam._m0[_2200].x))) / _2231;
        float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2296 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2236 + _2219) / _2231, (_2238 + _2223) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2238 + _2219) / _2231, (_2223 - _2236) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2236) / _2231, (_2223 - _2238) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2238) / _2231, (_2236 + _2223) / _2231), _2241), 0.0)).x), vec4(0.25)));
        _2303 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
        _2304 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
        _2305 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2303 = 1.0;
        _2304 = 1.0;
        _2305 = 1.0;
    }
    float _2369;
    float _2371;
    float _2373;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2357 = fma(_2153, cbSceneParam._m0[63u].w, fma(_2149, cbSceneParam._m0[63u].z, fma(_2145, cbSceneParam._m0[63u].y, _2141 * cbSceneParam._m0[63u].x)));
        float _2358 = fma(_2153, cbSceneParam._m0[60u].w, fma(_2149, cbSceneParam._m0[60u].z, fma(_2145, cbSceneParam._m0[60u].y, _2141 * cbSceneParam._m0[60u].x))) / _2357;
        float _2359 = fma(_2153, cbSceneParam._m0[61u].w, fma(_2149, cbSceneParam._m0[61u].z, fma(_2145, cbSceneParam._m0[61u].y, _2141 * cbSceneParam._m0[61u].x))) / _2357;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2358 >= cbSceneParam._m0[64u].x) && (_2359 >= cbSceneParam._m0[64u].y)) && (_2358 <= cbSceneParam._m0[64u].z)) && (_2359 <= cbSceneParam._m0[64u].w))
        {
            float _2497 = fma(_2153, cbSceneParam._m0[62u].w, fma(_2149, cbSceneParam._m0[62u].z, fma(_2145, cbSceneParam._m0[62u].y, _2141 * cbSceneParam._m0[62u].x))) / _2357;
            float _2501 = isnan(cbSceneParam._m0[41u].w) ? _2497 : (isnan(_2497) ? cbSceneParam._m0[41u].w : max(_2497, cbSceneParam._m0[41u].w));
            float _2544 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
            float _2551 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2358, cbSceneParam._m0[33u].w + _2359), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2358, _2359 - cbSceneParam._m0[33u].z), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2358 - cbSceneParam._m0[33u].z, _2359 - cbSceneParam._m0[33u].w), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2358 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2359), _2501), 0.0)).x), vec4(0.25)));
            float _2555 = 1.0 - (_2551 * cbSceneParam._m0[34u].x);
            float _2556 = 1.0 - (_2551 * cbSceneParam._m0[34u].y);
            float _2557 = 1.0 - (_2551 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2557) ? _2305 : (isnan(_2305) ? _2557 : min(_2305, _2557));
            frontier_phi_34_33_ladder_1 = isnan(_2556) ? _2304 : (isnan(_2304) ? _2556 : min(_2304, _2556));
            frontier_phi_34_33_ladder_2 = isnan(_2555) ? _2303 : (isnan(_2303) ? _2555 : min(_2303, _2555));
        }
        else
        {
            frontier_phi_34_33_ladder = _2305;
            frontier_phi_34_33_ladder_1 = _2304;
            frontier_phi_34_33_ladder_2 = _2303;
        }
        _2369 = frontier_phi_34_33_ladder_2;
        _2371 = frontier_phi_34_33_ladder_1;
        _2373 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2369 = _2303;
        _2371 = _2304;
        _2373 = _2305;
    }
    uvec4 _2378 = floatBitsToUint(cbInstanceData._m0[_1044 + 5u]);
    uint _2380 = _2378.x * 14u;
    uint _2381 = _2380 + 13u;
    float _2388 = _1084 + (-1.0);
    float _2393 = (cbLight._m0[_2381].x * _2388) + 1.0;
    float _2394 = (cbLight._m0[_2381].y * _2388) + 1.0;
    float _2395 = (cbLight._m0[_2381].z * _2388) + 1.0;
    float _2396 = (cbLight._m0[_2381].w * _2388) + 1.0;
    uint _2397 = _2380 + 5u;
    float _2403 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
    uint _2407 = _2380 + 4u;
    float _2416 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
    uint _2420 = _2380 | 1u;
    float _2431 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_918, _919, _920));
    float _2434 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_918, _919, _920));
    float _4653 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _4664 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2439 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2441 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2448 = ((cbLight._m0[_2397].x * _2403) * _2441) + (((cbLight._m0[_2407].x * _2369) * _2416) * _2439);
    float _2449 = ((_2403 * cbLight._m0[_2397].y) * _2441) + (((cbLight._m0[_2407].y * _2371) * _2416) * _2439);
    float _2450 = ((_2403 * cbLight._m0[_2397].z) * _2441) + (((cbLight._m0[_2407].z * _2373) * _2416) * _2439);
    uvec4 _2454 = floatBitsToUint(cbLight._m0[_2380 + 12u]);
    bool _2456 = _2454.x == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2456)
    {
        _2558 = _2448;
        _2560 = _2449;
        _2562 = _2450;
    }
    else
    {
        uint _2566 = _2380 + 6u;
        float _2582 = (dot(vec3(cbLight._m0[_2380 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4675 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2585 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2558 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2448;
        _2560 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2449;
        _2562 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2450;
    }
    bool _2565 = _2454.y == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2565)
    {
        _2620 = _2558;
        _2622 = _2560;
        _2624 = _2562;
    }
    else
    {
        uint _2793 = _2380 + 7u;
        float _2809 = (dot(vec3(cbLight._m0[_2380 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2810 = _2809 * _2809;
        float _4691 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2811 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2812 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2620 = (((cbLight._m0[_2793].x * 0.3183098733425140380859375) * _2811) * _2812) + _2558;
        _2622 = (((cbLight._m0[_2793].y * 0.3183098733425140380859375) * _2811) * _2812) + _2560;
        _2624 = (((cbLight._m0[_2793].z * 0.3183098733425140380859375) * _2811) * _2812) + _2562;
    }
    uint _2627 = _2380 + 8u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _921) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2380].x + _998;
    float _2643 = cbLight._m0[_2380].y + _999;
    float _2644 = cbLight._m0[_2380].z + _1000;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2380].xyz));
    float _4707 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2656 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2657 = dot(vec3(_918, _919, _920), vec3(_2649, _2650, _2651));
    float _4729 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2649, _2650, _2651));
    float _4740 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2641 * _2641;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2678 = 0.959999978542327880859375 - _1066;
    float _2680 = 0.959999978542327880859375 - _1067;
    float _2681 = 0.959999978542327880859375 - _1068;
    float _2688 = 1.0 - _2641;
    float _2699 = (0.5 / (((_2656 * ((_2655 * _2688) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2688) + _2641) * _2655))) * _2655;
    float _4751 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    uint _2715 = _2380 + 9u;
    float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _921) * 0.949999988079071044921875);
    float _2727 = _2726 * _2726;
    float _2728 = cbLight._m0[_2420].x + _998;
    float _2729 = cbLight._m0[_2420].y + _999;
    float _2730 = cbLight._m0[_2420].z + _1000;
    float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
    float _2735 = _2734 * _2728;
    float _2736 = _2734 * _2729;
    float _2737 = _2734 * _2730;
    float _2738 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2420].xyz));
    float _4762 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2742 = dot(vec3(_918, _919, _920), vec3(_2735, _2736, _2737));
    float _4773 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2746 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2735, _2736, _2737));
    float _4784 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2750 = _2727 * _2727;
    float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
    float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2768 = 1.0 - _2727;
    float _2778 = (0.5 / (((_2656 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2768) + _2727) * _2741))) * _2741;
    float _4795 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2780 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
    float _2790 = (((((_2761 * _2678) + _1069) * cbLight._m0[_2715].x) * _2780) * _2403) + ((((cbLight._m0[_2627].x * _2369) * ((_2677 * _2678) + _1069)) * _2701) * _2416);
    float _2791 = (((((_2761 * _2680) + _1071) * cbLight._m0[_2715].y) * _2780) * _2403) + ((((cbLight._m0[_2627].y * _2371) * ((_2677 * _2680) + _1071)) * _2701) * _2416);
    float _2792 = (((((_2761 * _2681) + _1072) * cbLight._m0[_2715].z) * _2780) * _2403) + ((((cbLight._m0[_2627].z * _2373) * ((_2677 * _2681) + _1072)) * _2701) * _2416);
    float _2848;
    float _2850;
    float _2852;
    if (_2456)
    {
        _2848 = _2790;
        _2850 = _2791;
        _2852 = _2792;
    }
    else
    {
        uint _2854 = _2380 + 2u;
        uint _2858 = _2380 + 10u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _921) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _998;
        float _2875 = cbLight._m0[_2854].y + _999;
        float _2876 = cbLight._m0[_2854].z + _1000;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2854].xyz));
        float _4806 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2888 = dot(vec3(_918, _919, _920), vec3(_2881, _2882, _2883));
        float _4817 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4828 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2656 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2914) + _2873) * _2887))) * _2887;
        float _4839 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2848 = (((((_2907 * _2678) + _1069) * cbLight._m0[_2858].x) * _2926) * _2927) + _2790;
        _2850 = (((((_2907 * _2680) + _1071) * cbLight._m0[_2858].y) * _2926) * _2927) + _2791;
        _2852 = (((((_2907 * _2681) + _1072) * cbLight._m0[_2858].z) * _2926) * _2927) + _2792;
    }
    float _2958;
    float _2960;
    float _2962;
    if (_2565)
    {
        _2958 = _2848;
        _2960 = _2850;
        _2962 = _2852;
    }
    else
    {
        uint _2969 = _2380 + 3u;
        uint _2973 = _2380 + 11u;
        float _2987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2969].w)) * _921) * 0.949999988079071044921875);
        float _2988 = _2987 * _2987;
        float _2989 = cbLight._m0[_2969].x + _998;
        float _2990 = cbLight._m0[_2969].y + _999;
        float _2991 = cbLight._m0[_2969].z + _1000;
        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
        float _2996 = _2995 * _2989;
        float _2997 = _2995 * _2990;
        float _2998 = _2995 * _2991;
        float _2999 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2969].xyz));
        float _4855 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _3003 = dot(vec3(_918, _919, _920), vec3(_2996, _2997, _2998));
        float _4866 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _3007 = dot(vec3(cbLight._m0[_2969].xyz), vec3(_2996, _2997, _2998));
        float _4877 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3011 = _2988 * _2988;
        float _3015 = ((_3006 * _3006) * (_3011 + (-1.0))) + 1.0;
        float _3022 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
        float _3029 = 1.0 - _2988;
        float _3039 = (0.5 / (((_2656 * ((_3002 * _3029) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _3029) + _2988) * _3002))) * _3002;
        float _4888 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3041 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_3011 / ((_3015 * _3015) * 3.141590118408203125));
        float _3042 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2958 = (((((_3022 * _2678) + _1069) * cbLight._m0[_2973].x) * _3041) * _3042) + _2848;
        _2960 = (((((_3022 * _2680) + _1071) * cbLight._m0[_2973].y) * _3041) * _3042) + _2850;
        _2962 = (((((_3022 * _2681) + _1072) * cbLight._m0[_2973].z) * _3041) * _3042) + _2852;
    }
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_2378.y == 0u)
    {
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.x;
        uint _3075 = uint((float(_3063.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1007) / _3064))) + floor(float(uint(cbSceneParam._m0[85u].x * _1006) / _3064)));
        float _3085 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3086 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        uint _3089 = uint(isnan(14.0) ? _3086 : (isnan(_3086) ? 14.0 : min(_3086, 14.0)));
        uvec4 _3094 = texelFetch(g_lightClusterGridBuffer, int(((_3089 << 2u) + (_3075 << 6u)) >> 2u));
        uint _3095 = _3094.x;
        uint _3096 = _3063.z;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((((1u << ((_3096 >> 4u) & 15u)) + 4294967295u) & _3095) == 0u) || ((_3096 & 240u) == 0u))
        {
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
        }
        else
        {
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            uint _3326 = 0u;
            uint _3335;
            bool _3336;
            for (;;)
            {
                _3335 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                _3336 = _3335 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3336)
                {
                    frontier_phi_66_pred = _3325;
                    frontier_phi_66_pred_1 = _3324;
                    frontier_phi_66_pred_2 = _3323;
                    frontier_phi_66_pred_3 = _3322;
                    frontier_phi_66_pred_4 = _3321;
                    frontier_phi_66_pred_5 = _3320;
                }
                else
                {
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    uint _3450;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3335;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    for (;;)
                    {
                        uint _3454 = uint(findLSB(_3450)) + (_3326 << 5u);
                        uint _3451 = (_3450 + 4294967295u) & _3450;
                        uint _3456 = _3454 * 48u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3476 = (_3454 * 48u) + 4u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 3u)).x));
                        uint _3495 = (_3454 * 48u) + 8u;
                        vec3 _3506 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x));
                        float _3510 = _3470.x - _2154;
                        float _3511 = _3470.y - _2155;
                        float _3512 = _3470.z - _2156;
                        float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                        float _3516 = inversesqrt(_3513);
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3520 = dot(vec3(_1025, _1028, _1031), vec3(_3517, _3518, _3519));
                        float _3525 = 1.0 - (_3513 * _3470.w);
                        float _4914 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3527 = sqrt(_3513) * _3489.w;
                        float _3530 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3520) + _3531;
                        float _3537 = _3527 * _3527;
                        float _3541 = ((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3526) / ((_3537 * 0.699999988079071044921875) + 1.0);
                        float _3545 = (-0.0) - _2154;
                        float _3546 = (-0.0) - _2155;
                        float _3547 = (-0.0) - _2156;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3561 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                        float _3562 = 1.0 - _1100;
                        float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                        float _3570 = _3569 * _3569;
                        float _3571 = _3570 * _3570;
                        float _3572 = _3552 + _3517;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                        float _3582 = dot(vec3(_1025, _1028, _1031), vec3(_3552, _3553, _3554));
                        float _4930 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3586 = dot(vec3(_1025, _1028, _1031), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                        float _4941 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3589 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                        float _3594 = _3530 * _3570;
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3520) + _3595;
                        float _4952 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3600 = 1.0 - _3570;
                        float _3610 = (0.5 / (((_3599 * ((_3585 * _3600) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3570) * _3585))) * _3599;
                        float _4963 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3621 = (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3593 * _3593) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125))) * _3526;
                        _3379 = (_3541 * _3489.x) + _3447;
                        _3380 = (_3541 * _3489.y) + _3448;
                        _3381 = (_3541 * _3489.z) + _3449;
                        _3376 = (_3621 * _3506.x) + _3444;
                        _3377 = (_3621 * _3506.y) + _3445;
                        _3378 = (_3621 * _3506.z) + _3446;
                        if (_3451 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3451;
                        }
                    }
                    frontier_phi_66_pred = _3381;
                    frontier_phi_66_pred_1 = _3380;
                    frontier_phi_66_pred_2 = _3379;
                    frontier_phi_66_pred_3 = _3378;
                    frontier_phi_66_pred_4 = _3377;
                    frontier_phi_66_pred_5 = _3376;
                }
                _3186 = frontier_phi_66_pred;
                _3184 = frontier_phi_66_pred_1;
                _3182 = frontier_phi_66_pred_2;
                _3180 = frontier_phi_66_pred_3;
                _3178 = frontier_phi_66_pred_4;
                _3176 = frontier_phi_66_pred_5;
                uint _3327 = _3326 + 1u;
                if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3320 = _3176;
                    _3321 = _3178;
                    _3322 = _3180;
                    _3323 = _3182;
                    _3324 = _3184;
                    _3325 = _3186;
                    _3326 = _3327;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
        }
        uvec4 _3189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3190 = _3189.z;
        uint _3192 = (_3190 >> 8u) & 15u;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        if (((4294967295u << _3192) & _3095) == 0u)
        {
            _3288 = _3175;
            _3290 = _3177;
            _3292 = _3179;
            _3294 = _3181;
            _3296 = _3183;
            _3298 = _3185;
        }
        else
        {
            float _3313 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _3314 = _3313 * _2154;
            float _3315 = _3313 * _2155;
            float _3316 = _3313 * _2156;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3192 < ((_3190 >> 12u) & 15u))
            {
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3427 = _3175;
                float _3428 = _3177;
                float _3429 = _3179;
                float _3430 = _3181;
                float _3431 = _3183;
                float _3432 = _3185;
                uint _3433 = _3192;
                uint _3442;
                bool _3443;
                for (;;)
                {
                    _3442 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3433 << 2u)) >> 2u)).x;
                    _3443 = _3442 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3443)
                    {
                        frontier_phi_72_pred = _3432;
                        frontier_phi_72_pred_1 = _3431;
                        frontier_phi_72_pred_2 = _3430;
                        frontier_phi_72_pred_3 = _3429;
                        frontier_phi_72_pred_4 = _3428;
                        frontier_phi_72_pred_5 = _3427;
                    }
                    else
                    {
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3639 = _3427;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        uint _3645 = _3442;
                        uint _3646;
                        vec4 _3671;
                        float _3672;
                        vec4 _3687;
                        vec3 _3699;
                        vec4 _3714;
                        vec4 _3729;
                        float _3775;
                        bool _3776;
                        for (;;)
                        {
                            uint _3656 = ((_3433 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3645));
                            _3646 = (_3645 + 4294967295u) & _3645;
                            uint _3658 = _3656 * 40u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            _3672 = _3671.w;
                            uint _3674 = (_3656 * 40u) + 4u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3656 * 40u) + 8u;
                            _3699 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x));
                            uint _3701 = (_3656 * 40u) + 16u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3656 * 40u) + 20u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3731 = (_3656 * 40u) + 24u;
                            vec4 _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3750 = (_3656 * 40u) + 28u;
                            vec4 _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3775 = fma(_2156, _3763.z, fma(_2155, _3763.y, _3763.x * _2154)) + _3763.w;
                            _3776 = !((fma(_2156, _3744.z, fma(_2155, _3744.y, _3744.x * _2154)) + _3744.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3776)
                            {
                                float _3803 = _3671.x - _2154;
                                float _3804 = _3671.y - _2155;
                                float _3805 = _3671.z - _2156;
                                float _3806 = dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805));
                                float _3809 = inversesqrt(_3806);
                                float _3810 = _3809 * _3803;
                                float _3811 = _3809 * _3804;
                                float _3812 = _3809 * _3805;
                                float _3816 = 1.0 - (_3806 / (_3672 * _3672));
                                float _4974 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3821 = sqrt(_3806) * _3687.w;
                                float _3823 = 1.39999997615814208984375 / (_3821 + 1.39999997615814208984375);
                                float _3824 = _3823 * _3823;
                                float _3827 = ((1.0 - _3824) * dot(vec3(_3810, _3811, _3812), vec3(_1025, _1028, _1031))) + _3824;
                                float _3830 = _3821 * _3821;
                                float _3834 = (fma(_2156, _3714.z, fma(_2155, _3714.y, _3714.x * _2154)) + _3714.w) / _3775;
                                float _3835 = (fma(_2156, _3729.z, fma(_2155, _3729.y, _3729.x * _2154)) + _3729.w) / _3775;
                                float _3839 = 1.0 - dot(vec2(_3834, _3835), vec2(_3834, _3835));
                                float _4990 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3841 = _3840 * (((isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0))) * _3817) / ((_3830 * 0.699999988079071044921875) + 1.0));
                                float _3853 = exp2(log2(1.0 / ((_3830 * 3.5) + 5.0)) * 0.25);
                                float _3854 = 1.0 - _1100;
                                float _3861 = sqrt(1.0 - ((1.0 - (_3854 * _3854)) * (1.0 - (_3853 * _3853))));
                                float _3862 = _3861 * _3861;
                                float _3863 = _3862 * _3862;
                                float _3864 = _3810 - _3314;
                                float _3865 = _3811 - _3315;
                                float _3866 = _3812 - _3316;
                                float _3870 = inversesqrt(dot(vec3(_3864, _3865, _3866), vec3(_3864, _3865, _3866)));
                                float _3874 = dot(vec3(_1025, _1028, _1031), vec3((-0.0) - _3314, (-0.0) - _3315, (-0.0) - _3316));
                                float _5001 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3877 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3878 = dot(vec3(_1025, _1028, _1031), vec3(_3870 * _3864, _3870 * _3865, _3870 * _3866));
                                float _5012 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3881 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3885 = ((_3881 * _3881) * (_3863 + (-1.0))) + 1.0;
                                float _3886 = _3823 * _3862;
                                float _3887 = _3886 * _3886;
                                float _3893 = ((1.0 - _3887) * dot(vec3(_1025, _1028, _1031), vec3(_3810, _3811, _3812))) + _3887;
                                float _5023 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3895 = 1.0 - _3862;
                                float _3905 = (0.5 / (((_3894 * ((_3877 * _3895) + _3862)) + 9.9999999392252902907785028219223e-09) + (((_3894 * _3895) + _3862) * _3877))) * _3894;
                                float _5034 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3915 = (_3840 * _3817) * (((_3863 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3885 * _3885) * ((_3830 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3841 * _3687.y;
                                frontier_phi_78_pred_1 = _3841 * _3687.x;
                                frontier_phi_78_pred_2 = _3915 * _3699.z;
                                frontier_phi_78_pred_3 = _3915 * _3699.y;
                                frontier_phi_78_pred_4 = _3915 * _3699.x;
                                frontier_phi_78_pred_5 = _3841 * _3687.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3923 = frontier_phi_78_pred;
                            _3922 = frontier_phi_78_pred_1;
                            _3921 = frontier_phi_78_pred_2;
                            _3920 = frontier_phi_78_pred_3;
                            _3919 = frontier_phi_78_pred_4;
                            _3924 = frontier_phi_78_pred_5;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            if (_3646 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3646;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3631;
                        frontier_phi_72_pred_1 = _3630;
                        frontier_phi_72_pred_2 = _3629;
                        frontier_phi_72_pred_3 = _3628;
                        frontier_phi_72_pred_4 = _3627;
                        frontier_phi_72_pred_5 = _3626;
                    }
                    _3299 = frontier_phi_72_pred;
                    _3297 = frontier_phi_72_pred_1;
                    _3295 = frontier_phi_72_pred_2;
                    _3293 = frontier_phi_72_pred_3;
                    _3291 = frontier_phi_72_pred_4;
                    _3289 = frontier_phi_72_pred_5;
                    uint _3434 = _3433 + 1u;
                    if (_3434 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3427 = _3289;
                        _3428 = _3291;
                        _3429 = _3293;
                        _3430 = _3295;
                        _3431 = _3297;
                        _3432 = _3299;
                        _3433 = _3434;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3299;
                frontier_phi_60_61_ladder_1 = _3297;
                frontier_phi_60_61_ladder_2 = _3293;
                frontier_phi_60_61_ladder_3 = _3291;
                frontier_phi_60_61_ladder_4 = _3289;
                frontier_phi_60_61_ladder_5 = _3295;
            }
            else
            {
                frontier_phi_60_61_ladder = _3185;
                frontier_phi_60_61_ladder_1 = _3183;
                frontier_phi_60_61_ladder_2 = _3179;
                frontier_phi_60_61_ladder_3 = _3177;
                frontier_phi_60_61_ladder_4 = _3175;
                frontier_phi_60_61_ladder_5 = _3181;
            }
            _3288 = frontier_phi_60_61_ladder_4;
            _3290 = frontier_phi_60_61_ladder_3;
            _3292 = frontier_phi_60_61_ladder_2;
            _3294 = frontier_phi_60_61_ladder_5;
            _3296 = frontier_phi_60_61_ladder_1;
            _3298 = frontier_phi_60_61_ladder;
        }
        float _3303 = isnan(1.0) ? _1084 : (isnan(_1084) ? 1.0 : min(_1084, 1.0));
        _3108 = (_3303 * _3294) + _2620;
        _3110 = (_3303 * _3296) + _2622;
        _3112 = (_3303 * _3298) + _2624;
        _3114 = ((_3288 * _1069) * _3303) + _2958;
        _3116 = ((_3290 * _1071) * _3303) + _2960;
        _3118 = ((_3292 * _1072) * _3303) + _2962;
    }
    else
    {
        _3108 = _2620;
        _3110 = _2622;
        _3112 = _2624;
        _3114 = _2958;
        _3116 = _2960;
        _3118 = _2962;
    }
    float _5050 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _5061 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _5072 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    uint _3138 = _1044 + 6u;
    float _3146 = _1006 / cbSceneParam._m0[86u].x;
    float _3147 = _1007 / cbSceneParam._m0[86u].y;
    vec4 _3161 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, (log2((isnan(cbSceneParam._m0[77u].w) ? _941 : (isnan(_941) ? cbSceneParam._m0[77u].w : min(_941, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3163 = _3161.x;
    float _3164 = _3161.y;
    float _3165 = _3161.z;
    float _3166 = _3161.w;
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    if (_941 > cbSceneParam._m0[78u].w)
    {
        float _3200 = isnan(_941) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _941 : min(cbSceneParam._m0[80u].w, _941));
        float _3201 = _3200 / _941;
        float _3212 = _3201 * _991;
        float _3213 = _992 * _3201;
        float _3214 = (-0.0) - _3213;
        float _3216 = _3201 * _993;
        float _3218 = (cbSceneParam._m0[77u].w * _3214) / _3200;
        float _3219 = _3218 + cbSceneParam._m0[79u].w;
        float _3220 = cbSceneParam._m0[79u].w - _3213;
        float _3226 = sqrt(((_3212 * _3212) + (_3213 * _3213)) + (_3216 * _3216));
        float _3229 = (1.0 - (cbSceneParam._m0[77u].w / _3200)) * _3226;
        float _3234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3389;
        if (abs((_3214 - _3218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3389 = ((((_3219 > 0.0) ? exp2(_3234 * _3219) : (2.0 - exp2(_3236 * _3219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3229;
        }
        else
        {
            float _3349 = 1.0 / cbSceneParam._m0[80u].x;
            float _3350 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : max(_3219, _3220));
            float _3351 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : min(_3219, _3220));
            float _3360 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : min(_3350, 0.0));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            _3389 = ((abs(_3226 / _3214) * cbSceneParam._m0[80u].y) * ((((_3360 - _3361) * 2.0) - ((exp2(_3234 * (isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0)))) - exp2(_3234 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))))) * _3349)) - ((exp2(_3236 * _3360) - exp2(_3236 * _3361)) * _3349))) + (_3229 * cbSceneParam._m0[80u].z);
        }
        vec4 _3391 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, 1.0), 0.0);
        float _3400 = exp2((_3389 * (-1.44269502162933349609375)) * (1.0 - _3391.w));
        float _3401 = log2(_3400);
        float _3417 = log2(_3166);
        _3238 = (exp2(_3417 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].x)) * _3391.x) / cbSceneParam._m0[78u].x)) + _3163;
        _3240 = (exp2(_3417 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].y)) * _3391.y) / cbSceneParam._m0[78u].y)) + _3164;
        _3242 = (exp2(_3417 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].z)) * _3391.z) / cbSceneParam._m0[78u].z)) + _3165;
        _3244 = _3400 * _3166;
    }
    else
    {
        _3238 = _3163;
        _3240 = _3164;
        _3242 = _3165;
        _3244 = _3166;
    }
    float _3256 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3257 = _3256 == 3.0;
    float _3258 = log2(_3244);
    float _3265 = exp2(_3258 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3108 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1084))) + ((_3114 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3266 = exp2(_3258 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3110 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1084))) + ((_3116 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3267 = exp2(_3258 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3112 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1084))) + ((_3118 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3276 = (_3256 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3276 * (_3257 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3238)));
    SV_Target.y = _3276 * (_3257 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.z = _3276 * (_3257 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.w = cbInstanceData._m0[_3138].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3138].w;
}


