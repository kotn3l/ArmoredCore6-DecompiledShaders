#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1618;
float _4277;
float _4278;
float _4279;
float _4280;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _287 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _321 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _336 = exp2(log2((1.0 - _325) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    vec4 _352 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _364 = exp2(log2(_352.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _366 = isnan(1.0) ? _365 : (isnan(_365) ? 1.0 : min(_365, 1.0));
    float _375 = exp2(log2(cbMtdParam._m0[23u].y * _325) * cbMtdParam._m0[22u].y);
    float _376 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
    vec4 _389 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _392 = _389.y;
    float _395 = (_389.x + (-0.02500000037252902984619140625)) * 8.0;
    float _399 = roundEven(5.0 - _395);
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(4.0) ? _400 : (isnan(_400) ? 4.0 : min(_400, 4.0));
    float _414 = floor(_401);
    vec4 _417 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _414));
    float _212[6];
    float _213[6];
    float _214[6];
    _212[0u] = cbMtdParam._m0[17u].x;
    _213[0u] = cbMtdParam._m0[17u].y;
    _214[0u] = cbMtdParam._m0[17u].z;
    _212[1u] = cbMtdParam._m0[15u].x;
    _213[1u] = cbMtdParam._m0[15u].y;
    _214[1u] = cbMtdParam._m0[15u].z;
    _212[2u] = cbMtdParam._m0[14u].x;
    _213[2u] = cbMtdParam._m0[14u].y;
    _214[2u] = cbMtdParam._m0[14u].z;
    _212[3u] = cbMtdParam._m0[13u].x;
    _213[3u] = cbMtdParam._m0[13u].y;
    _214[3u] = cbMtdParam._m0[13u].z;
    _212[4u] = cbMtdParam._m0[12u].x;
    _213[4u] = cbMtdParam._m0[12u].y;
    _214[4u] = cbMtdParam._m0[12u].z;
    _212[5u] = cbMtdParam._m0[18u].x;
    _213[5u] = cbMtdParam._m0[18u].y;
    _214[5u] = cbMtdParam._m0[18u].z;
    float _481 = roundEven(_395);
    float _482 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    uint _484 = uint(int(isnan(5.0) ? _482 : (isnan(_482) ? 5.0 : min(_482, 5.0))));
    vec4 _514 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _525 = cbMtdParam._m0[9u].x * _514.x;
    float _526 = cbMtdParam._m0[9u].y * _514.y;
    float _527 = cbMtdParam._m0[9u].z * _514.z;
    float _534 = ((((((_212[_484] - cbMtdParam._m0[10u].x) * _392) + cbMtdParam._m0[10u].x) * _417.x) - _525) * _377) + _525;
    float _535 = ((((((_213[_484] - cbMtdParam._m0[10u].y) * _392) + cbMtdParam._m0[10u].y) * _417.y) - _526) * _377) + _526;
    float _536 = ((((((_214[_484] - cbMtdParam._m0[10u].z) * _392) + cbMtdParam._m0[10u].z) * _417.z) - _527) * _377) + _527;
    float _542 = exp2(log2(_321.w) * cbMtdParam._m0[23u].w);
    vec4 _555 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _574 = (((cbMtdParam._m0[16u].x * _555.x) - _534) * _542) + _534;
    float _575 = (((cbMtdParam._m0[16u].y * _555.y) - _535) * _542) + _535;
    float _576 = (((cbMtdParam._m0[16u].z * _555.z) - _536) * _542) + _536;
    vec4 _589 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _609 = (((cbMtdParam._m0[19u].x * _589.x) - _574) * _366) + _574;
    float _610 = (((cbMtdParam._m0[19u].y * _589.y) - _575) * _366) + _575;
    float _611 = (((cbMtdParam._m0[19u].z * _589.z) - _576) * _366) + _576;
    vec4 _623 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _648 = (_352.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _623.x) - _609) * _338) + _609);
    float _650 = (_352.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _623.y) - _610) * _338) + _610);
    float _652 = (_352.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _623.z) - _611) * _338) + _611);
    vec4 _664 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _682 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _684 = _682 * (cbMtdParam._m0[24u].z + 1.0);
    float _4339 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _692 = (_685 * ((cbMtdParam._m0[11u].x * _664.x) - _648)) + _648;
    float _693 = (((cbMtdParam._m0[11u].y * _664.y) - _650) * _685) + _650;
    float _694 = (((cbMtdParam._m0[11u].z * _664.z) - _652) * _685) + _652;
    float _698 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _706 = (_698 - (((_287.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _698))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4350 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _714 = ((cbMtdParam._m0[21u].x - _692) * _707) + _692;
    float _715 = ((cbMtdParam._m0[21u].y - _693) * _707) + _693;
    float _716 = ((cbMtdParam._m0[21u].z - _694) * _707) + _694;
    float _207[5];
    float _208[5];
    _207[0u] = cbMtdParam._m0[29u].x;
    _208[0u] = cbMtdParam._m0[29u].y;
    _207[1u] = cbMtdParam._m0[31u].x;
    _208[1u] = cbMtdParam._m0[31u].y;
    _207[2u] = cbMtdParam._m0[30u].z;
    _208[2u] = cbMtdParam._m0[30u].w;
    _207[3u] = cbMtdParam._m0[30u].x;
    _208[3u] = cbMtdParam._m0[30u].y;
    _207[4u] = cbMtdParam._m0[29u].z;
    _208[4u] = cbMtdParam._m0[29u].w;
    float _756 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _758 = uint(int(isnan(4.0) ? _756 : (isnan(_756) ? 4.0 : min(_756, 4.0))));
    float _765 = ((_208[_758] - cbMtdParam._m0[22u].z) * _377) + cbMtdParam._m0[22u].z;
    float _768 = ((cbMtdParam._m0[22u].w - _765) * _542) + _765;
    float _771 = ((cbMtdParam._m0[25u].y - _768) * _366) + _768;
    float _774 = ((cbMtdParam._m0[26u].y - _771) * _338) + _771;
    float _779 = (cbMtdParam._m0[24u].y + 1.0) * _682;
    float _4371 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _780 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _782 = _774 - (_774 * _780);
    float _784 = _782 - (_782 * _698);
    vec4 _797 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _414));
    vec4 _814 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _816 = _814.x;
    float _817 = _814.y;
    float _822 = cbMtdParam._m0[22u].x + _814.z;
    float _825 = (((_797.z + _207[_758]) - _822) * _377) + _822;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _848 = (((_837.z - _825) + cbMtdParam._m0[28u].z) * _542) + _825;
    float _854 = ((((_325 * 2.0) * _848) - _848) * cbMtdParam._m0[24u].w) + _848;
    vec4 _866 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _877 = (((cbMtdParam._m0[23u].z + _866.z) - _854) * _366) + _854;
    vec4 _890 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _901 = (((_890.z - _877) + cbMtdParam._m0[26u].z) * _338) + _877;
    vec4 _913 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _925 = ((_913.z - _901) * _780) + _901;
    vec4 _940 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _954 = ((cbMtdParam._m0[27u].z * _698) * ((_940.z * cbMtdParam._m0[27u].y) - _925)) + _925;
    float _969 = ((_797.x - _816) * _377) + _816;
    float _970 = ((_797.y - _817) * _377) + _817;
    float _975 = ((_837.x - _969) * _542) + _969;
    float _976 = ((_837.y - _970) * _542) + _970;
    float _981 = ((_866.x - _975) * _366) + _975;
    float _982 = ((_866.y - _976) * _366) + _976;
    float _991 = ((((_890.x - _981) * _338) + _981) * 2.0) + (-1.0);
    float _992 = ((((_890.y - _982) * _338) + _982) * 2.0) + (-1.0);
    float _993 = dot(vec2(_991, _992), vec2(_991, _992));
    float _4382 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _998 = sqrt(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))));
    float _1014 = (((cbMtdParam._m0[25u].z * ((_321.x * 2.0) + (-1.0))) + _991) + (((((_913.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _780)) + ((((_940.x * 2.0) + (-1.0)) * _698) * cbMtdParam._m0[27u].x);
    float _1015 = (((cbMtdParam._m0[25u].z * ((_321.y * 2.0) + (-1.0))) + _992) + (((((_913.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _780)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_940.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _1017 = gl_FragCoord.x * 0.125;
    float _1019 = gl_FragCoord.y * 0.125;
    float _1029 = fma(_998, _249 * NORMAL.x, fma(_1015, _256 * TANGENT.x, (_242 * _234) * _1014));
    float _1032 = fma(_998, _249 * NORMAL.y, fma(_1015, _256 * TANGENT.y, (_242 * _235) * _1014));
    float _1035 = fma(_998, _249 * NORMAL.z, fma(_1015, _256 * TANGENT.z, (_242 * _236) * _1014));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4393 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _1043 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4415 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4426 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4437 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1047 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1017, _1019)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    vec4 _1128 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1017, _1019));
    float _1130 = _1128.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1300 = sqrt(((_1117 * _1117) + (_1118 * _1118)) + (_1119 * _1119));
        float _1306 = (cbMatDynParam._m0[5u].x * _1300) + cbMatDynParam._m0[5u].y;
        float _4448 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1311 = (cbMatDynParam._m0[5u].z * _1300) + cbMatDynParam._m0[5u].w;
        float _4459 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) - _1307)) + _1307) < ((_1130 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1163 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1166 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1179 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1180 = _1179 + 9u;
    uint _1181 = _1180 + uint(cbMatDynParam._m0[0u].w);
    float _1187 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * cbInstanceData._m0[_1181].x;
    float _1188 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * cbInstanceData._m0[_1181].y;
    float _1189 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * cbInstanceData._m0[_1181].z;
    float _4470 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _4481 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _1193 = 1.0 - _1047;
    float _1194 = _1190 * _1193;
    float _1195 = _1191 * _1193;
    float _1196 = _1192 * _1193;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1047;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1047;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1047;
    float _1204 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    float _1207 = _1203 + 0.039999999105930328369140625;
    vec4 _1216 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1219 = _1216.x * TEXCOORD_3.w;
    float _1220 = dot(vec3(_1040, _1041, _1042), vec3(_1124, _1125, _1126));
    float _1223 = _1220 * 2.0;
    float _1227 = (_1223 * _1040) - _1124;
    float _1228 = (_1223 * _1041) - _1125;
    float _1229 = (_1223 * _1042) - _1126;
    float _1233 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1040, _1041, _1042)));
    float _4503 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = sqrt(_1043);
    float _1246 = exp2((_1235 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1235 * 3.0));
    float _1252 = (1.0 - _1246) * ((_1235 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1253 = _1246 * _1235;
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1617;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1342 = fma(_1289, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281));
        float _1346 = fma(_1289, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281));
        float _1350 = fma(_1289, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281));
        float _1375 = _1281 + _1040;
        float _1376 = _1285 + _1041;
        float _1377 = _1289 + _1042;
        float _1387 = fma(_1377, cbModelParam._m0[26u].z, fma(_1376, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1375)) - _1342;
        float _1388 = fma(_1377, cbModelParam._m0[27u].z, fma(_1376, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1375)) - _1346;
        float _1389 = fma(_1377, cbModelParam._m0[28u].z, fma(_1376, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1375)) - _1350;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1342 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1346 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[34u].z) + ((((((_1350 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1445 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1411.x + (-0.5));
        float _1447 = _1445 * (_1411.y + (-0.5));
        float _1448 = _1445 * (_1411.z + (-0.5));
        float _1455 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1418.x + (-0.5));
        float _1457 = _1455 * (_1418.y + (-0.5));
        float _1458 = _1455 * (_1418.z + (-0.5));
        float _1465 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1425.x + (-0.5));
        float _1467 = _1465 * (_1425.y + (-0.5));
        float _1468 = _1465 * (_1425.z + (-0.5));
        float _1475 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1432.x + (-0.5));
        float _1477 = _1475 * (_1432.y + (-0.5));
        float _1478 = _1475 * (_1432.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1499 = (dot(vec3(_1040, _1041, _1042), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1509 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4551 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1511 + 1.0))) + _1516) * _1479;
        float _1526 = _1447 * 0.5;
        float _1527 = _1457 * 0.5;
        float _1528 = _1467 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_1040, _1041, _1042), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4584 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1553 + 1.0))) + _1558) * _1480;
        float _1568 = _1448 * 0.5;
        float _1569 = _1458 * 0.5;
        float _1570 = _1468 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_1040, _1041, _1042), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4617 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1595 + 1.0))) + _1600) * _1481;
        _1617 = _1448;
        _1619 = _1447;
        _1620 = _1446;
        _1621 = _1458;
        _1622 = _1457;
        _1623 = _1456;
        _1624 = _1468;
        _1625 = _1467;
        _1626 = _1466;
        _1627 = _1481;
        _1628 = _1480;
        _1629 = _1479;
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1618;
        _1619 = _1618;
        _1620 = _1618;
        _1621 = _1618;
        _1622 = _1618;
        _1623 = _1618;
        _1624 = _1618;
        _1625 = _1618;
        _1626 = _1618;
        _1627 = _1618;
        _1628 = _1618;
        _1629 = _1618;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1655 = fma(_1289, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281));
        float _1659 = fma(_1289, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281));
        float _1663 = fma(_1289, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281));
        float _1686 = _1281 + _1040;
        float _1687 = _1285 + _1041;
        float _1688 = _1289 + _1042;
        float _1698 = fma(_1688, cbModelParam._m0[30u].z, fma(_1687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1686)) - _1655;
        float _1699 = fma(_1688, cbModelParam._m0[31u].z, fma(_1687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1686)) - _1659;
        float _1700 = fma(_1688, cbModelParam._m0[32u].z, fma(_1687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1686)) - _1663;
        float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
        float _1717 = ((_1704 * _1698) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1655 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1718 = ((_1704 * _1699) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1659 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1719 = ((_1704 * _1700) / cbModelParam._m0[35u].z) + ((((((_1663 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        float _1754 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1721.x + (-0.5));
        float _1756 = _1754 * (_1721.y + (-0.5));
        float _1757 = _1754 * (_1721.z + (-0.5));
        float _1764 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1728.x + (-0.5));
        float _1766 = _1764 * (_1728.y + (-0.5));
        float _1767 = _1764 * (_1728.z + (-0.5));
        float _1774 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1735.x + (-0.5));
        float _1776 = _1774 * (_1735.y + (-0.5));
        float _1777 = _1774 * (_1735.z + (-0.5));
        float _1784 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1785 = _1784 * (_1742.x + (-0.5));
        float _1786 = _1784 * (_1742.y + (-0.5));
        float _1787 = _1784 * (_1742.z + (-0.5));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1790 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1791 = _1755 * 0.5;
        float _1792 = _1765 * 0.5;
        float _1793 = _1775 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_1040, _1041, _1042), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4658 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4669 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4680 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_1818 + 1.0))) + _1823) * _1788;
        float _1833 = _1756 * 0.5;
        float _1834 = _1766 * 0.5;
        float _1835 = _1776 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1040, _1041, _1042), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4691 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1789 + 9.9999997473787516355514526367188e-06);
        float _4702 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4713 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_1860 + 1.0))) + _1865) * _1789;
        float _1875 = _1757 * 0.5;
        float _1876 = _1767 * 0.5;
        float _1877 = _1777 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1040, _1041, _1042), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4724 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1790 + 9.9999997473787516355514526367188e-06);
        float _4735 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4746 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_1902 + 1.0))) + _1907) * _1790;
        _1924 = _1757;
        _1925 = _1756;
        _1926 = _1755;
        _1927 = _1767;
        _1928 = _1766;
        _1929 = _1765;
        _1930 = _1777;
        _1931 = _1776;
        _1932 = _1775;
        _1933 = _1790;
        _1934 = _1789;
        _1935 = _1788;
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
        _1937 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
        _1938 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
    }
    else
    {
        _1924 = _1618;
        _1925 = _1618;
        _1926 = _1618;
        _1927 = _1618;
        _1928 = _1618;
        _1929 = _1618;
        _1930 = _1618;
        _1931 = _1618;
        _1932 = _1618;
        _1933 = _1618;
        _1934 = _1618;
        _1935 = _1618;
        _1936 = 0.0;
        _1937 = 0.0;
        _1938 = 0.0;
    }
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1630)) + _1630;
    float _1949 = (cbModelParam._m0[1u].x * (_1937 - _1631)) + _1631;
    float _1950 = (cbModelParam._m0[1u].x * (_1938 - _1632)) + _1632;
    float _1971 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1948));
    float _1992 = _1227 * 0.5;
    float _1993 = _1228 * 0.5;
    float _1994 = _1229 * 0.5;
    float _1995 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1926, _1929, _1932, _1935));
    float _1998 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1925, _1928, _1931, _1934));
    float _2001 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _2035;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2008 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1617, _1621, _1624, _1627));
        float _2012 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1619, _1622, _1625, _1628));
        float _2016 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1620, _1623, _1626, _1629));
        float _2023 = dot(vec4(cbModelParam._m0[39u]), vec4(_1992, _1993, _1994, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2023) ? 0.0 : (isnan(0.0) ? _2023 : max(0.0, _2023))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2046;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2037 = dot(vec4(cbModelParam._m0[40u]), vec4(_1992, _1993, _1994, 1.0));
        _2046 = dot(vec3(isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2037) ? 0.0 : (isnan(0.0) ? _2037 : max(0.0, _2037))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2046 = 1.0;
    }
    float _2050 = (_2046 * cbModelParam._m0[1u].x) + (_2035 * (1.0 - cbModelParam._m0[1u].x));
    float _2060 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2060 : min(cbModelParam._m0[25u].z, _2060));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2108 = fma(_1289, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281)) + cbModelParam._m0[13u].w;
        float _2112 = fma(_1289, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281)) + cbModelParam._m0[14u].w;
        float _2116 = fma(_1289, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281)) + cbModelParam._m0[15u].w;
        float _2119 = fma(_1229, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227));
        float _2122 = fma(_1229, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227));
        float _2125 = fma(_1229, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227));
        float _2153;
        if (_2119 > 0.0)
        {
            _2153 = abs((1.0 - _2108) / _2119);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2108 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2153 = frontier_phi_19_17_ladder;
        }
        float _2324;
        if (_2122 > 0.0)
        {
            _2324 = abs((1.0 - _2112) / _2122);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2112 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2324 = frontier_phi_28_24_ladder;
        }
        float _2619;
        if (_2125 > 0.0)
        {
            _2619 = abs((1.0 - _2116) / _2125);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2116 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2619 = frontier_phi_40_35_ladder;
        }
        float _2621 = isnan(_2324) ? _2153 : (isnan(_2153) ? _2324 : min(_2153, _2324));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _2119) + _2108;
        float _2627 = (_2622 * _2122) + _2112;
        float _2628 = (_2622 * _2125) + _2116;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2629;
        float _2633 = _2629 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 > _2633) || ((_2627 < _2631) || ((_2626 < _2631) || (_2626 > _2633))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2628, cbModelParam._m0[9u].z, fma(_2627, cbModelParam._m0[9u].y, _2626 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2628, cbModelParam._m0[10u].z, fma(_2627, cbModelParam._m0[10u].y, _2626 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2628, cbModelParam._m0[11u].z, fma(_2627, cbModelParam._m0[11u].y, _2626 * cbModelParam._m0[11u].x))), _2061);
            frontier_phi_18_40_ladder = _2773.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2773.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2773.x * cbModelParam._m0[1u].y;
        }
        _2141 = frontier_phi_18_40_ladder_2;
        _2143 = frontier_phi_18_40_ladder_1;
        _2145 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2129 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1227, _1228, _1229), _2061);
        _2141 = _2129.x * cbModelParam._m0[1u].y;
        _2143 = _2129.y * cbModelParam._m0[1u].y;
        _2145 = _2129.z * cbModelParam._m0[1u].y;
    }
    float _2149 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2150 = isnan(_2149) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2149 : min(cbModelParam._m0[25u].w, _2149));
    float _2239;
    float _2241;
    float _2243;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2203 = fma(_1289, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281)) + cbModelParam._m0[21u].w;
        float _2207 = fma(_1289, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281)) + cbModelParam._m0[22u].w;
        float _2211 = fma(_1289, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281)) + cbModelParam._m0[23u].w;
        float _2214 = fma(_1229, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227));
        float _2217 = fma(_1229, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227));
        float _2220 = fma(_1229, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227));
        float _2329;
        if (_2214 > 0.0)
        {
            _2329 = abs((1.0 - _2203) / _2214);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2203 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2329 = frontier_phi_30_26_ladder;
        }
        float _2646;
        if (_2217 > 0.0)
        {
            _2646 = abs((1.0 - _2207) / _2217);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2217 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2207 + 1.0) / _2217);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2646 = frontier_phi_42_37_ladder;
        }
        float _2984;
        if (_2220 > 0.0)
        {
            _2984 = abs((1.0 - _2211) / _2220);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2211 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2984 = frontier_phi_52_49_ladder;
        }
        float _2986 = isnan(_2646) ? _2329 : (isnan(_2329) ? _2646 : min(_2329, _2646));
        float _2987 = isnan(_2984) ? _2986 : (isnan(_2986) ? _2984 : min(_2986, _2984));
        float _2991 = (_2987 * _2214) + _2203;
        float _2992 = (_2987 * _2217) + _2207;
        float _2993 = (_2987 * _2220) + _2211;
        float _2994 = _2987 * 9.9999997473787516355514526367188e-05;
        float _2995 = (-1.0) - _2994;
        float _2997 = _2994 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2993 > _2997) || ((_2993 < _2995) || ((_2992 > _2997) || ((_2992 < _2995) || ((_2991 < _2995) || (_2991 > _2997))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2993, cbModelParam._m0[17u].z, fma(_2992, cbModelParam._m0[17u].y, _2991 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2993, cbModelParam._m0[18u].z, fma(_2992, cbModelParam._m0[18u].y, _2991 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2993, cbModelParam._m0[19u].z, fma(_2992, cbModelParam._m0[19u].y, _2991 * cbModelParam._m0[19u].x))), _2150);
            frontier_phi_27_52_ladder = _3115.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3115.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3115.x * cbModelParam._m0[1u].z;
        }
        _2239 = frontier_phi_27_52_ladder_2;
        _2241 = frontier_phi_27_52_ladder_1;
        _2243 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2223 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1227, _1228, _1229), _2150);
        _2239 = _2223.x * cbModelParam._m0[1u].z;
        _2241 = _2223.y * cbModelParam._m0[1u].z;
        _2243 = _2223.z * cbModelParam._m0[1u].z;
    }
    float _2256 = (((_1252 * _1204) + _1253) * _1219) * ((cbModelParam._m0[1u].w * (_2239 - _2141)) + _2141);
    float _2258 = (((_1252 * _1206) + _1253) * _1219) * ((cbModelParam._m0[1u].w * (_2241 - _2143)) + _2143);
    float _2260 = (((_1252 * _1207) + _1253) * _1219) * ((cbModelParam._m0[1u].w * (_2243 - _2145)) + _2145);
    float _2263 = fma(_2260, cbSceneParam._m0[89u].z, fma(_2258, cbSceneParam._m0[89u].y, _2256 * cbSceneParam._m0[89u].x));
    float _2266 = fma(_2260, cbSceneParam._m0[90u].z, fma(_2258, cbSceneParam._m0[90u].y, _2256 * cbSceneParam._m0[90u].x));
    float _2269 = fma(_2260, cbSceneParam._m0[91u].z, fma(_2258, cbSceneParam._m0[91u].y, _2256 * cbSceneParam._m0[91u].x));
    float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2307 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2315 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2316 = _2303 / _2315;
    float _2317 = _2307 / _2315;
    float _2318 = _2311 / _2315;
    float _2465;
    float _2466;
    float _2467;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2345 = ((uint(_2318 > cbSceneParam._m0[59u].y) + uint(_2318 > cbSceneParam._m0[59u].x)) + uint(_2318 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2346 = _2345 + 43u;
        uint _2354 = _2345 + 44u;
        uint _2362 = _2345 + 45u;
        uint _2370 = _2345 + 46u;
        float _2381 = fma(_2315, cbSceneParam._m0[_2346].w, fma(_2311, cbSceneParam._m0[_2346].z, fma(_2307, cbSceneParam._m0[_2346].y, _2303 * cbSceneParam._m0[_2346].x)));
        float _2385 = fma(_2315, cbSceneParam._m0[_2354].w, fma(_2311, cbSceneParam._m0[_2354].z, fma(_2307, cbSceneParam._m0[_2354].y, _2303 * cbSceneParam._m0[_2354].x)));
        float _2393 = fma(_2315, cbSceneParam._m0[_2370].w, fma(_2311, cbSceneParam._m0[_2370].z, fma(_2307, cbSceneParam._m0[_2370].y, _2303 * cbSceneParam._m0[_2370].x)));
        float _2398 = cbSceneParam._m0[33u].z * _2393;
        float _2400 = cbSceneParam._m0[33u].w * _2393;
        float _2403 = fma(_2315, cbSceneParam._m0[_2362].w, fma(_2311, cbSceneParam._m0[_2362].z, fma(_2307, cbSceneParam._m0[_2362].y, _2303 * cbSceneParam._m0[_2362].x))) / _2393;
        float _2451 = (cbSceneParam._m0[33u].x - sqrt(((_2317 * _2317) + (_2316 * _2316)) + (_2318 * _2318))) * cbSceneParam._m0[33u].y;
        float _4872 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2458 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2398 + _2381) / _2393, (_2400 + _2385) / _2393), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2400 + _2381) / _2393, (_2385 - _2398) / _2393), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2381 - _2398) / _2393, (_2385 - _2400) / _2393), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2381 - _2400) / _2393, (_2398 + _2385) / _2393), _2403), 0.0)).x), vec4(0.25)));
        _2465 = 1.0 - (_2458 * cbSceneParam._m0[34u].x);
        _2466 = 1.0 - (_2458 * cbSceneParam._m0[34u].y);
        _2467 = 1.0 - (_2458 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2465 = 1.0;
        _2466 = 1.0;
        _2467 = 1.0;
    }
    float _2531;
    float _2533;
    float _2535;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2519 = fma(_2315, cbSceneParam._m0[63u].w, fma(_2311, cbSceneParam._m0[63u].z, fma(_2307, cbSceneParam._m0[63u].y, _2303 * cbSceneParam._m0[63u].x)));
        float _2520 = fma(_2315, cbSceneParam._m0[60u].w, fma(_2311, cbSceneParam._m0[60u].z, fma(_2307, cbSceneParam._m0[60u].y, _2303 * cbSceneParam._m0[60u].x))) / _2519;
        float _2521 = fma(_2315, cbSceneParam._m0[61u].w, fma(_2311, cbSceneParam._m0[61u].z, fma(_2307, cbSceneParam._m0[61u].y, _2303 * cbSceneParam._m0[61u].x))) / _2519;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2520 >= cbSceneParam._m0[64u].x) && (_2521 >= cbSceneParam._m0[64u].y)) && (_2520 <= cbSceneParam._m0[64u].z)) && (_2521 <= cbSceneParam._m0[64u].w))
        {
            float _2659 = fma(_2315, cbSceneParam._m0[62u].w, fma(_2311, cbSceneParam._m0[62u].z, fma(_2307, cbSceneParam._m0[62u].y, _2303 * cbSceneParam._m0[62u].x))) / _2519;
            float _2663 = isnan(cbSceneParam._m0[41u].w) ? _2659 : (isnan(_2659) ? cbSceneParam._m0[41u].w : max(_2659, cbSceneParam._m0[41u].w));
            float _2706 = (cbSceneParam._m0[33u].x - sqrt(((_2317 * _2317) + (_2316 * _2316)) + (_2318 * _2318))) * cbSceneParam._m0[33u].y;
            float _4888 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
            float _2713 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2520, cbSceneParam._m0[33u].w + _2521), _2663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2520, _2521 - cbSceneParam._m0[33u].z), _2663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2520 - cbSceneParam._m0[33u].z, _2521 - cbSceneParam._m0[33u].w), _2663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2520 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2521), _2663), 0.0)).x), vec4(0.25)));
            float _2717 = 1.0 - (_2713 * cbSceneParam._m0[34u].x);
            float _2718 = 1.0 - (_2713 * cbSceneParam._m0[34u].y);
            float _2719 = 1.0 - (_2713 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2719) ? _2467 : (isnan(_2467) ? _2719 : min(_2467, _2719));
            frontier_phi_39_38_ladder_1 = isnan(_2718) ? _2466 : (isnan(_2466) ? _2718 : min(_2466, _2718));
            frontier_phi_39_38_ladder_2 = isnan(_2717) ? _2465 : (isnan(_2465) ? _2717 : min(_2465, _2717));
        }
        else
        {
            frontier_phi_39_38_ladder = _2467;
            frontier_phi_39_38_ladder_1 = _2466;
            frontier_phi_39_38_ladder_2 = _2465;
        }
        _2531 = frontier_phi_39_38_ladder_2;
        _2533 = frontier_phi_39_38_ladder_1;
        _2535 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2531 = _2465;
        _2533 = _2466;
        _2535 = _2467;
    }
    uvec4 _2540 = floatBitsToUint(cbInstanceData._m0[_1179 + 5u]);
    uint _2542 = _2540.x * 14u;
    uint _2543 = _2542 + 13u;
    float _2550 = _1219 + (-1.0);
    float _2555 = (cbLight._m0[_2543].x * _2550) + 1.0;
    float _2556 = (cbLight._m0[_2543].y * _2550) + 1.0;
    float _2557 = (cbLight._m0[_2543].z * _2550) + 1.0;
    float _2558 = (cbLight._m0[_2543].w * _2550) + 1.0;
    uint _2559 = _2542 + 5u;
    float _2565 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
    uint _2569 = _2542 + 4u;
    float _2578 = isnan(1.0) ? _2555 : (isnan(_2555) ? 1.0 : min(_2555, 1.0));
    uint _2582 = _2542 | 1u;
    float _2593 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_1040, _1041, _1042));
    float _2596 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_1040, _1041, _1042));
    float _4924 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _4935 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2601 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * 0.3183098733425140380859375;
    float _2603 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * 0.3183098733425140380859375;
    float _2610 = ((cbLight._m0[_2559].x * _2565) * _2603) + (((cbLight._m0[_2569].x * _2531) * _2578) * _2601);
    float _2611 = ((_2565 * cbLight._m0[_2559].y) * _2603) + (((cbLight._m0[_2569].y * _2533) * _2578) * _2601);
    float _2612 = ((_2565 * cbLight._m0[_2559].z) * _2603) + (((cbLight._m0[_2569].z * _2535) * _2578) * _2601);
    uvec4 _2616 = floatBitsToUint(cbLight._m0[_2542 + 12u]);
    bool _2618 = _2616.x == 0u;
    float _2720;
    float _2722;
    float _2724;
    if (_2618)
    {
        _2720 = _2610;
        _2722 = _2611;
        _2724 = _2612;
    }
    else
    {
        uint _2728 = _2542 + 6u;
        float _2744 = (dot(vec3(cbLight._m0[_2542 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4946 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2747 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _2720 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2610;
        _2722 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2611;
        _2724 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2612;
    }
    bool _2727 = _2616.y == 0u;
    float _2782;
    float _2784;
    float _2786;
    if (_2727)
    {
        _2782 = _2720;
        _2784 = _2722;
        _2786 = _2724;
    }
    else
    {
        uint _2955 = _2542 + 7u;
        float _2971 = (dot(vec3(cbLight._m0[_2542 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2972 = _2971 * _2971;
        float _4962 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2973 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2974 = isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0));
        _2782 = (((cbLight._m0[_2955].x * 0.3183098733425140380859375) * _2973) * _2974) + _2720;
        _2784 = (((cbLight._m0[_2955].y * 0.3183098733425140380859375) * _2973) * _2974) + _2722;
        _2786 = (((cbLight._m0[_2955].z * 0.3183098733425140380859375) * _2973) * _2974) + _2724;
    }
    uint _2789 = _2542 + 8u;
    float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _1043) * 0.949999988079071044921875);
    float _2803 = _2802 * _2802;
    float _2804 = cbLight._m0[_2542].x + _1124;
    float _2805 = cbLight._m0[_2542].y + _1125;
    float _2806 = cbLight._m0[_2542].z + _1126;
    float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
    float _2811 = _2810 * _2804;
    float _2812 = _2810 * _2805;
    float _2813 = _2810 * _2806;
    float _2814 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2542].xyz));
    float _4978 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2817 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
    float _4989 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _2818 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
    float _2819 = dot(vec3(_1040, _1041, _1042), vec3(_2811, _2812, _2813));
    float _5000 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
    float _2823 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2811, _2812, _2813));
    float _5011 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2827 = _2803 * _2803;
    float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
    float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) * 5.0);
    float _2840 = 0.959999978542327880859375 - _1201;
    float _2842 = 0.959999978542327880859375 - _1202;
    float _2843 = 0.959999978542327880859375 - _1203;
    float _2850 = 1.0 - _2803;
    float _2861 = (0.5 / (((_2818 * ((_2817 * _2850) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _2850) + _2803) * _2817))) * _2817;
    float _5022 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2863 = (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
    uint _2877 = _2542 + 9u;
    float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _1043) * 0.949999988079071044921875);
    float _2889 = _2888 * _2888;
    float _2890 = cbLight._m0[_2582].x + _1124;
    float _2891 = cbLight._m0[_2582].y + _1125;
    float _2892 = cbLight._m0[_2582].z + _1126;
    float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
    float _2897 = _2896 * _2890;
    float _2898 = _2896 * _2891;
    float _2899 = _2896 * _2892;
    float _2900 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2582].xyz));
    float _5033 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2903 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
    float _2904 = dot(vec3(_1040, _1041, _1042), vec3(_2897, _2898, _2899));
    float _5044 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
    float _2907 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
    float _2908 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2897, _2898, _2899));
    float _5055 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2912 = _2889 * _2889;
    float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
    float _2923 = exp2(log2(1.0 - (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) * 5.0);
    float _2930 = 1.0 - _2889;
    float _2940 = (0.5 / (((_2818 * ((_2903 * _2930) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _2930) + _2889) * _2903))) * _2903;
    float _5066 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
    float _2942 = (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
    float _2952 = (((((_2923 * _2840) + _1204) * cbLight._m0[_2877].x) * _2942) * _2565) + ((((cbLight._m0[_2789].x * _2531) * ((_2839 * _2840) + _1204)) * _2863) * _2578);
    float _2953 = (((((_2923 * _2842) + _1206) * cbLight._m0[_2877].y) * _2942) * _2565) + ((((cbLight._m0[_2789].y * _2533) * ((_2839 * _2842) + _1206)) * _2863) * _2578);
    float _2954 = (((((_2923 * _2843) + _1207) * cbLight._m0[_2877].z) * _2942) * _2565) + ((((cbLight._m0[_2789].z * _2535) * ((_2839 * _2843) + _1207)) * _2863) * _2578);
    float _3010;
    float _3012;
    float _3014;
    if (_2618)
    {
        _3010 = _2952;
        _3012 = _2953;
        _3014 = _2954;
    }
    else
    {
        uint _3016 = _2542 + 2u;
        uint _3020 = _2542 + 10u;
        float _3034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3016].w)) * _1043) * 0.949999988079071044921875);
        float _3035 = _3034 * _3034;
        float _3036 = cbLight._m0[_3016].x + _1124;
        float _3037 = cbLight._m0[_3016].y + _1125;
        float _3038 = cbLight._m0[_3016].z + _1126;
        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
        float _3043 = _3042 * _3036;
        float _3044 = _3042 * _3037;
        float _3045 = _3042 * _3038;
        float _3046 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_3016].xyz));
        float _5077 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3049 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
        float _3050 = dot(vec3(_1040, _1041, _1042), vec3(_3043, _3044, _3045));
        float _5088 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3053 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
        float _3054 = dot(vec3(cbLight._m0[_3016].xyz), vec3(_3043, _3044, _3045));
        float _5099 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3058 = _3035 * _3035;
        float _3062 = ((_3053 * _3053) * (_3058 + (-1.0))) + 1.0;
        float _3069 = exp2(log2(1.0 - (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0)))) * 5.0);
        float _3076 = 1.0 - _3035;
        float _3086 = (0.5 / (((_2818 * ((_3049 * _3076) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _3076) + _3035) * _3049))) * _3049;
        float _5110 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3088 = (isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0))) * (_3058 / ((_3062 * _3062) * 3.141590118408203125));
        float _3089 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _3010 = (((((_3069 * _2840) + _1204) * cbLight._m0[_3020].x) * _3088) * _3089) + _2952;
        _3012 = (((((_3069 * _2842) + _1206) * cbLight._m0[_3020].y) * _3088) * _3089) + _2953;
        _3014 = (((((_3069 * _2843) + _1207) * cbLight._m0[_3020].z) * _3088) * _3089) + _2954;
    }
    float _3120;
    float _3122;
    float _3124;
    if (_2727)
    {
        _3120 = _3010;
        _3122 = _3012;
        _3124 = _3014;
    }
    else
    {
        uint _3131 = _2542 + 3u;
        uint _3135 = _2542 + 11u;
        float _3149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3131].w)) * _1043) * 0.949999988079071044921875);
        float _3150 = _3149 * _3149;
        float _3151 = cbLight._m0[_3131].x + _1124;
        float _3152 = cbLight._m0[_3131].y + _1125;
        float _3153 = cbLight._m0[_3131].z + _1126;
        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
        float _3158 = _3157 * _3151;
        float _3159 = _3157 * _3152;
        float _3160 = _3157 * _3153;
        float _3161 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_3131].xyz));
        float _5126 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        float _3164 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
        float _3165 = dot(vec3(_1040, _1041, _1042), vec3(_3158, _3159, _3160));
        float _5137 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
        float _3168 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
        float _3169 = dot(vec3(cbLight._m0[_3131].xyz), vec3(_3158, _3159, _3160));
        float _5148 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        float _3173 = _3150 * _3150;
        float _3177 = ((_3168 * _3168) * (_3173 + (-1.0))) + 1.0;
        float _3184 = exp2(log2(1.0 - (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0)))) * 5.0);
        float _3191 = 1.0 - _3150;
        float _3201 = (0.5 / (((_2818 * ((_3164 * _3191) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _3191) + _3150) * _3164))) * _3164;
        float _5159 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
        float _3203 = (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3173 / ((_3177 * _3177) * 3.141590118408203125));
        float _3204 = isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0));
        _3120 = (((((_3184 * _2840) + _1204) * cbLight._m0[_3135].x) * _3203) * _3204) + _3010;
        _3122 = (((((_3184 * _2842) + _1206) * cbLight._m0[_3135].y) * _3203) * _3204) + _3012;
        _3124 = (((((_3184 * _2843) + _1207) * cbLight._m0[_3135].z) * _3203) * _3204) + _3014;
    }
    float _3270;
    float _3272;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_2540.y == 0u)
    {
        uvec4 _3225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3226 = _3225.x;
        uint _3237 = uint((float(_3225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _3226))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _3226)));
        float _3247 = (log2(_2318 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3248 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
        uint _3251 = uint(isnan(14.0) ? _3248 : (isnan(_3248) ? 14.0 : min(_3248, 14.0)));
        uvec4 _3256 = texelFetch(g_lightClusterGridBuffer, int(((_3251 << 2u) + (_3237 << 6u)) >> 2u));
        uint _3257 = _3256.x;
        uint _3258 = _3225.z;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        if (((((1u << ((_3258 >> 4u) & 15u)) + 4294967295u) & _3257) == 0u) || ((_3258 & 240u) == 0u))
        {
            _3337 = 0.0;
            _3339 = 0.0;
            _3341 = 0.0;
            _3343 = 0.0;
            _3345 = 0.0;
            _3347 = 0.0;
        }
        else
        {
            float _3338;
            float _3340;
            float _3342;
            float _3344;
            float _3346;
            float _3348;
            float _3490 = 0.0;
            float _3491 = 0.0;
            float _3492 = 0.0;
            float _3493 = 0.0;
            float _3494 = 0.0;
            float _3495 = 0.0;
            uint _3496 = 0u;
            uint _3505;
            bool _3506;
            for (;;)
            {
                _3505 = texelFetch(g_lightClassification, int((((_3251 << 5u) + (_3237 << 9u)) + (_3496 << 2u)) >> 2u)).x;
                _3506 = _3505 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3506)
                {
                    frontier_phi_73_pred = _3495;
                    frontier_phi_73_pred_1 = _3494;
                    frontier_phi_73_pred_2 = _3493;
                    frontier_phi_73_pred_3 = _3492;
                    frontier_phi_73_pred_4 = _3491;
                    frontier_phi_73_pred_5 = _3490;
                }
                else
                {
                    float _3635;
                    float _3636;
                    float _3637;
                    float _3638;
                    float _3639;
                    float _3640;
                    uint _3641;
                    _3635 = _3490;
                    _3636 = _3491;
                    _3637 = _3492;
                    _3638 = _3493;
                    _3639 = _3494;
                    _3640 = _3495;
                    _3641 = _3505;
                    float _3562;
                    float _3563;
                    float _3564;
                    float _3565;
                    float _3566;
                    float _3567;
                    for (;;)
                    {
                        uint _3645 = uint(findLSB(_3641)) + (_3496 << 5u);
                        uint _3642 = (_3641 + 4294967295u) & _3641;
                        uint _3647 = _3645 * 48u;
                        vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3647)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 3u)).x));
                        uint _3667 = (_3645 * 48u) + 4u;
                        vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3667)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 3u)).x));
                        uint _3686 = (_3645 * 48u) + 8u;
                        vec3 _3697 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3686)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 2u)).x));
                        float _3701 = _3661.x - _2316;
                        float _3702 = _3661.y - _2317;
                        float _3703 = _3661.z - _2318;
                        float _3704 = dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703));
                        float _3707 = inversesqrt(_3704);
                        float _3708 = _3707 * _3701;
                        float _3709 = _3707 * _3702;
                        float _3710 = _3707 * _3703;
                        float _3711 = dot(vec3(_1160, _1163, _1166), vec3(_3708, _3709, _3710));
                        float _3716 = 1.0 - (_3704 * _3661.w);
                        float _5185 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                        float _3717 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                        float _3718 = sqrt(_3704) * _3680.w;
                        float _3721 = 1.39999997615814208984375 / (_3718 + 1.39999997615814208984375);
                        float _3722 = _3721 * _3721;
                        float _3725 = ((1.0 - _3722) * _3711) + _3722;
                        float _3728 = _3718 * _3718;
                        float _3732 = ((isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0))) * _3717) / ((_3728 * 0.699999988079071044921875) + 1.0);
                        float _3736 = (-0.0) - _2316;
                        float _3737 = (-0.0) - _2317;
                        float _3738 = (-0.0) - _2318;
                        float _3742 = inversesqrt(dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738)));
                        float _3743 = _3742 * _3736;
                        float _3744 = _3742 * _3737;
                        float _3745 = _3742 * _3738;
                        float _3752 = exp2(log2(1.0 / ((_3728 * 3.5) + 5.0)) * 0.25);
                        float _3753 = 1.0 - _1235;
                        float _3760 = sqrt(1.0 - ((1.0 - (_3753 * _3753)) * (1.0 - (_3752 * _3752))));
                        float _3761 = _3760 * _3760;
                        float _3762 = _3761 * _3761;
                        float _3763 = _3743 + _3708;
                        float _3764 = _3744 + _3709;
                        float _3765 = _3745 + _3710;
                        float _3769 = inversesqrt(dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765)));
                        float _3773 = dot(vec3(_1160, _1163, _1166), vec3(_3743, _3744, _3745));
                        float _5201 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                        float _3776 = isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0));
                        float _3777 = dot(vec3(_1160, _1163, _1166), vec3(_3769 * _3763, _3769 * _3764, _3769 * _3765));
                        float _5212 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                        float _3780 = isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0));
                        float _3784 = ((_3780 * _3780) * (_3762 + (-1.0))) + 1.0;
                        float _3785 = _3721 * _3761;
                        float _3786 = _3785 * _3785;
                        float _3789 = ((1.0 - _3786) * _3711) + _3786;
                        float _5223 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                        float _3790 = isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0));
                        float _3791 = 1.0 - _3761;
                        float _3801 = (0.5 / (((_3790 * ((_3776 * _3791) + _3761)) + 9.9999999392252902907785028219223e-09) + (((_3790 * _3791) + _3761) * _3776))) * _3790;
                        float _5234 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                        float _3812 = (((_3762 * 3.1415927410125732421875) * (isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0)))) / ((_3784 * _3784) * ((_3728 * 2.1991131305694580078125) + 3.141590118408203125))) * _3717;
                        _3565 = (_3732 * _3680.x) + _3638;
                        _3566 = (_3732 * _3680.y) + _3639;
                        _3567 = (_3732 * _3680.z) + _3640;
                        _3562 = (_3812 * _3697.x) + _3635;
                        _3563 = (_3812 * _3697.y) + _3636;
                        _3564 = (_3812 * _3697.z) + _3637;
                        if (_3642 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3635 = _3562;
                            _3636 = _3563;
                            _3637 = _3564;
                            _3638 = _3565;
                            _3639 = _3566;
                            _3640 = _3567;
                            _3641 = _3642;
                        }
                    }
                    frontier_phi_73_pred = _3567;
                    frontier_phi_73_pred_1 = _3566;
                    frontier_phi_73_pred_2 = _3565;
                    frontier_phi_73_pred_3 = _3564;
                    frontier_phi_73_pred_4 = _3563;
                    frontier_phi_73_pred_5 = _3562;
                }
                _3348 = frontier_phi_73_pred;
                _3346 = frontier_phi_73_pred_1;
                _3344 = frontier_phi_73_pred_2;
                _3342 = frontier_phi_73_pred_3;
                _3340 = frontier_phi_73_pred_4;
                _3338 = frontier_phi_73_pred_5;
                uint _3497 = _3496 + 1u;
                if (_3497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3490 = _3338;
                    _3491 = _3340;
                    _3492 = _3342;
                    _3493 = _3344;
                    _3494 = _3346;
                    _3495 = _3348;
                    _3496 = _3497;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3337 = _3338;
            _3339 = _3340;
            _3341 = _3342;
            _3343 = _3344;
            _3345 = _3346;
            _3347 = _3348;
        }
        uvec4 _3351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3352 = _3351.z;
        uint _3354 = (_3352 >> 8u) & 15u;
        float _3458;
        float _3460;
        float _3462;
        float _3464;
        float _3466;
        float _3468;
        if (((4294967295u << _3354) & _3257) == 0u)
        {
            _3458 = _3337;
            _3460 = _3339;
            _3462 = _3341;
            _3464 = _3343;
            _3466 = _3345;
            _3468 = _3347;
        }
        else
        {
            float _3483 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
            float _3484 = _3483 * _2316;
            float _3485 = _3483 * _2317;
            float _3486 = _3483 * _2318;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3354 < ((_3352 >> 12u) & 15u))
            {
                float _3459;
                float _3461;
                float _3463;
                float _3465;
                float _3467;
                float _3469;
                float _3618 = _3337;
                float _3619 = _3339;
                float _3620 = _3341;
                float _3621 = _3343;
                float _3622 = _3345;
                float _3623 = _3347;
                uint _3624 = _3354;
                uint _3633;
                bool _3634;
                for (;;)
                {
                    _3633 = texelFetch(g_lightClassification, int((((_3251 << 5u) + (_3237 << 9u)) + (_3624 << 2u)) >> 2u)).x;
                    _3634 = _3633 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3634)
                    {
                        frontier_phi_84_pred = _3623;
                        frontier_phi_84_pred_1 = _3622;
                        frontier_phi_84_pred_2 = _3621;
                        frontier_phi_84_pred_3 = _3620;
                        frontier_phi_84_pred_4 = _3619;
                        frontier_phi_84_pred_5 = _3618;
                    }
                    else
                    {
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _4119;
                        float _4120;
                        float _4121;
                        float _4122;
                        float _4123;
                        float _4124;
                        float _3839 = _3618;
                        float _3840 = _3619;
                        float _3841 = _3620;
                        float _3842 = _3621;
                        float _3843 = _3622;
                        float _3844 = _3623;
                        uint _3845 = _3633;
                        uint _3846;
                        vec4 _3871;
                        float _3872;
                        vec4 _3887;
                        vec3 _3899;
                        vec4 _3914;
                        vec4 _3929;
                        float _3975;
                        bool _3976;
                        for (;;)
                        {
                            uint _3856 = ((_3624 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3845));
                            _3846 = (_3845 + 4294967295u) & _3845;
                            uint _3858 = _3856 * 40u;
                            _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            _3872 = _3871.w;
                            uint _3874 = (_3856 * 40u) + 4u;
                            _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            uint _3889 = (_3856 * 40u) + 8u;
                            _3899 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x));
                            uint _3901 = (_3856 * 40u) + 16u;
                            _3914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 3u)).x));
                            uint _3916 = (_3856 * 40u) + 20u;
                            _3929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 3u)).x));
                            uint _3931 = (_3856 * 40u) + 24u;
                            vec4 _3944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 3u)).x));
                            uint _3950 = (_3856 * 40u) + 28u;
                            vec4 _3963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 3u)).x));
                            _3975 = fma(_2318, _3963.z, fma(_2317, _3963.y, _3963.x * _2316)) + _3963.w;
                            _3976 = !((fma(_2318, _3944.z, fma(_2317, _3944.y, _3944.x * _2316)) + _3944.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3976)
                            {
                                float _4003 = _3871.x - _2316;
                                float _4004 = _3871.y - _2317;
                                float _4005 = _3871.z - _2318;
                                float _4006 = dot(vec3(_4003, _4004, _4005), vec3(_4003, _4004, _4005));
                                float _4009 = inversesqrt(_4006);
                                float _4010 = _4009 * _4003;
                                float _4011 = _4009 * _4004;
                                float _4012 = _4009 * _4005;
                                float _4016 = 1.0 - (_4006 / (_3872 * _3872));
                                float _5245 = isnan(0.0) ? _4016 : (isnan(_4016) ? 0.0 : max(_4016, 0.0));
                                float _4017 = isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0));
                                float _4021 = sqrt(_4006) * _3887.w;
                                float _4023 = 1.39999997615814208984375 / (_4021 + 1.39999997615814208984375);
                                float _4024 = _4023 * _4023;
                                float _4027 = ((1.0 - _4024) * dot(vec3(_4010, _4011, _4012), vec3(_1160, _1163, _1166))) + _4024;
                                float _4030 = _4021 * _4021;
                                float _4034 = (fma(_2318, _3914.z, fma(_2317, _3914.y, _3914.x * _2316)) + _3914.w) / _3975;
                                float _4035 = (fma(_2318, _3929.z, fma(_2317, _3929.y, _3929.x * _2316)) + _3929.w) / _3975;
                                float _4039 = 1.0 - dot(vec2(_4034, _4035), vec2(_4034, _4035));
                                float _5261 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4040 = isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0));
                                float _4041 = _4040 * (((isnan(0.0) ? _4027 : (isnan(_4027) ? 0.0 : max(_4027, 0.0))) * _4017) / ((_4030 * 0.699999988079071044921875) + 1.0));
                                float _4053 = exp2(log2(1.0 / ((_4030 * 3.5) + 5.0)) * 0.25);
                                float _4054 = 1.0 - _1235;
                                float _4061 = sqrt(1.0 - ((1.0 - (_4054 * _4054)) * (1.0 - (_4053 * _4053))));
                                float _4062 = _4061 * _4061;
                                float _4063 = _4062 * _4062;
                                float _4064 = _4010 - _3484;
                                float _4065 = _4011 - _3485;
                                float _4066 = _4012 - _3486;
                                float _4070 = inversesqrt(dot(vec3(_4064, _4065, _4066), vec3(_4064, _4065, _4066)));
                                float _4074 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3484, (-0.0) - _3485, (-0.0) - _3486));
                                float _5272 = isnan(0.0) ? _4074 : (isnan(_4074) ? 0.0 : max(_4074, 0.0));
                                float _4077 = isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0));
                                float _4078 = dot(vec3(_1160, _1163, _1166), vec3(_4070 * _4064, _4070 * _4065, _4070 * _4066));
                                float _5283 = isnan(0.0) ? _4078 : (isnan(_4078) ? 0.0 : max(_4078, 0.0));
                                float _4081 = isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0));
                                float _4085 = ((_4081 * _4081) * (_4063 + (-1.0))) + 1.0;
                                float _4086 = _4023 * _4062;
                                float _4087 = _4086 * _4086;
                                float _4093 = ((1.0 - _4087) * dot(vec3(_1160, _1163, _1166), vec3(_4010, _4011, _4012))) + _4087;
                                float _5294 = isnan(0.0) ? _4093 : (isnan(_4093) ? 0.0 : max(_4093, 0.0));
                                float _4094 = isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0));
                                float _4095 = 1.0 - _4062;
                                float _4105 = (0.5 / (((_4094 * ((_4077 * _4095) + _4062)) + 9.9999999392252902907785028219223e-09) + (((_4094 * _4095) + _4062) * _4077))) * _4094;
                                float _5305 = isnan(0.0) ? _4105 : (isnan(_4105) ? 0.0 : max(_4105, 0.0));
                                float _4115 = (_4040 * _4017) * (((_4063 * 3.1415927410125732421875) * (isnan(1.0) ? _5305 : (isnan(_5305) ? 1.0 : min(_5305, 1.0)))) / ((_4085 * _4085) * ((_4030 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4041 * _3887.z;
                                frontier_phi_90_pred_1 = _4041 * _3887.y;
                                frontier_phi_90_pred_2 = _4041 * _3887.x;
                                frontier_phi_90_pred_3 = _4115 * _3899.z;
                                frontier_phi_90_pred_4 = _4115 * _3899.y;
                                frontier_phi_90_pred_5 = _4115 * _3899.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4124 = frontier_phi_90_pred;
                            _4123 = frontier_phi_90_pred_1;
                            _4122 = frontier_phi_90_pred_2;
                            _4121 = frontier_phi_90_pred_3;
                            _4120 = frontier_phi_90_pred_4;
                            _4119 = frontier_phi_90_pred_5;
                            _3829 = _4122 + _3842;
                            _3830 = _4123 + _3843;
                            _3831 = _4124 + _3844;
                            _3826 = _4119 + _3839;
                            _3827 = _4120 + _3840;
                            _3828 = _4121 + _3841;
                            if (_3846 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3839 = _3826;
                                _3840 = _3827;
                                _3841 = _3828;
                                _3842 = _3829;
                                _3843 = _3830;
                                _3844 = _3831;
                                _3845 = _3846;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3831;
                        frontier_phi_84_pred_1 = _3830;
                        frontier_phi_84_pred_2 = _3829;
                        frontier_phi_84_pred_3 = _3828;
                        frontier_phi_84_pred_4 = _3827;
                        frontier_phi_84_pred_5 = _3826;
                    }
                    _3469 = frontier_phi_84_pred;
                    _3467 = frontier_phi_84_pred_1;
                    _3465 = frontier_phi_84_pred_2;
                    _3463 = frontier_phi_84_pred_3;
                    _3461 = frontier_phi_84_pred_4;
                    _3459 = frontier_phi_84_pred_5;
                    uint _3625 = _3624 + 1u;
                    if (_3625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3618 = _3459;
                        _3619 = _3461;
                        _3620 = _3463;
                        _3621 = _3465;
                        _3622 = _3467;
                        _3623 = _3469;
                        _3624 = _3625;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3465;
                frontier_phi_65_66_ladder_1 = _3469;
                frontier_phi_65_66_ladder_2 = _3467;
                frontier_phi_65_66_ladder_3 = _3463;
                frontier_phi_65_66_ladder_4 = _3461;
                frontier_phi_65_66_ladder_5 = _3459;
            }
            else
            {
                frontier_phi_65_66_ladder = _3343;
                frontier_phi_65_66_ladder_1 = _3347;
                frontier_phi_65_66_ladder_2 = _3345;
                frontier_phi_65_66_ladder_3 = _3341;
                frontier_phi_65_66_ladder_4 = _3339;
                frontier_phi_65_66_ladder_5 = _3337;
            }
            _3458 = frontier_phi_65_66_ladder_5;
            _3460 = frontier_phi_65_66_ladder_4;
            _3462 = frontier_phi_65_66_ladder_3;
            _3464 = frontier_phi_65_66_ladder;
            _3466 = frontier_phi_65_66_ladder_2;
            _3468 = frontier_phi_65_66_ladder_1;
        }
        float _3473 = isnan(1.0) ? _1219 : (isnan(_1219) ? 1.0 : min(_1219, 1.0));
        _3270 = (_3473 * _3464) + _2782;
        _3272 = (_3473 * _3466) + _2784;
        _3274 = (_3473 * _3468) + _2786;
        _3276 = ((_3458 * _1204) * _3473) + _3120;
        _3278 = ((_3460 * _1206) * _3473) + _3122;
        _3280 = ((_3462 * _1207) * _3473) + _3124;
    }
    else
    {
        _3270 = _2782;
        _3272 = _2784;
        _3274 = _2786;
        _3276 = _3120;
        _3278 = _3122;
        _3280 = _3124;
    }
    float _5321 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5332 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _5343 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _3297 = ((isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0))) * (_3270 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1219))) + ((_3276 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2050)) * cbPerFrame._m0[3u].x);
    float _3298 = ((isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0))) * (_3272 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1219))) + ((_3278 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2050)) * cbPerFrame._m0[3u].x);
    float _3299 = ((isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0))) * (_3274 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1219))) + ((_3280 + ((isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * _2050)) * cbPerFrame._m0[3u].x);
    uint _3300 = _1179 + 6u;
    float _3308 = _1141 / cbSceneParam._m0[86u].x;
    float _3309 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _3323 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3308, _3309, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3325 = _3323.x;
    float _3326 = _3323.y;
    float _3327 = _3323.z;
    float _3328 = _3323.w;
    float _3400;
    float _3402;
    float _3404;
    float _3406;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3362 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3363 = _3362 / _1067;
        float _3374 = _3363 * _1117;
        float _3375 = _1118 * _3363;
        float _3376 = (-0.0) - _3375;
        float _3378 = _3363 * _1119;
        float _3380 = (cbSceneParam._m0[77u].w * _3376) / _3362;
        float _3381 = _3380 + cbSceneParam._m0[79u].w;
        float _3382 = cbSceneParam._m0[79u].w - _3375;
        float _3388 = sqrt(((_3374 * _3374) + (_3375 * _3375)) + (_3378 * _3378));
        float _3391 = (1.0 - (cbSceneParam._m0[77u].w / _3362)) * _3388;
        float _3396 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3398 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3575;
        if (abs((_3376 - _3380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3575 = ((((_3381 > 0.0) ? exp2(_3396 * _3381) : (2.0 - exp2(_3398 * _3381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3391;
        }
        else
        {
            float _3519 = 1.0 / cbSceneParam._m0[80u].x;
            float _3520 = isnan(_3382) ? _3381 : (isnan(_3381) ? _3382 : max(_3381, _3382));
            float _3521 = isnan(_3382) ? _3381 : (isnan(_3381) ? _3382 : min(_3381, _3382));
            float _3530 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : min(_3520, 0.0));
            float _3531 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : min(_3521, 0.0));
            _3575 = ((abs(_3388 / _3376) * cbSceneParam._m0[80u].y) * ((((_3530 - _3531) * 2.0) - ((exp2(_3396 * (isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0)))) - exp2(_3396 * (isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))))) * _3519)) - ((exp2(_3398 * _3530) - exp2(_3398 * _3531)) * _3519))) + (_3391 * cbSceneParam._m0[80u].z);
        }
        vec4 _3577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3308, _3309, 1.0), 0.0);
        float _3586 = exp2((_3575 * (-1.44269502162933349609375)) * (1.0 - _3577.w));
        float _3587 = log2(_3586);
        float _3603 = log2(_3328);
        _3400 = (exp2(_3603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3587 * cbSceneParam._m0[78u].x)) * _3577.x) / cbSceneParam._m0[78u].x)) + _3325;
        _3402 = (exp2(_3603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3587 * cbSceneParam._m0[78u].y)) * _3577.y) / cbSceneParam._m0[78u].y)) + _3326;
        _3404 = (exp2(_3603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3587 * cbSceneParam._m0[78u].z)) * _3577.z) / cbSceneParam._m0[78u].z)) + _3327;
        _3406 = _3586 * _3328;
    }
    else
    {
        _3400 = _3325;
        _3402 = _3326;
        _3404 = _3327;
        _3406 = _3328;
    }
    bool _3613;
    vec4 _3416;
    vec4 _3438;
    float _3440;
    float _3444;
    float _3445;
    float _3446;
    float _3447;
    bool _3457;
    for (;;)
    {
        _3416 = cbMatDynParam._m0[0u];
        float _3418 = roundEven(_3416.y);
        bool _3419 = _3418 == 3.0;
        float _3420 = log2(_3406);
        float _3427 = exp2(_3420 * cbSceneParam._m0[78u].x) * _3297;
        float _3428 = exp2(_3420 * cbSceneParam._m0[78u].y) * _3298;
        float _3429 = exp2(_3420 * cbSceneParam._m0[78u].z) * _3299;
        float _3436 = _1130 + (-0.5);
        _3438 = cbMtdParam._m0[1u];
        _3440 = _3438.y * _3436;
        float _3443 = (_3418 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3444 = _3443 * (_3419 ? _3427 : (_3427 + (cbSceneParam._m0[72u].w * _3400)));
        _3445 = _3443 * (_3419 ? _3428 : (_3428 + (cbSceneParam._m0[72u].w * _3402)));
        _3446 = _3443 * (_3419 ? _3429 : (_3429 + (cbSceneParam._m0[72u].w * _3404)));
        _3447 = _3436 * 0.999000012874603271484375;
        _3457 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3457)
        {
            if ((cbInstanceData._m0[_1179 + 7u].x + _3447) < 0.5)
            {
                _3613 = true;
                break;
            }
        }
        uint _3554 = _1180 + uint(_3416.w);
        if ((cbInstanceData._m0[_3554].w < 1.0) && ((cbInstanceData._m0[_3554].w + _3447) < 0.5))
        {
            _3613 = true;
            break;
        }
        if ((_3440 + 1.0) < _3438.x)
        {
            _3613 = true;
            break;
        }
        _3613 = false;
        break;
    }
    float _3817;
    if (_3613)
    {
        discard_state = true;
        _3817 = 0.0;
    }
    else
    {
        _3817 = cbInstanceData._m0[_3300].w;
    }
    SV_Target.x = _3444;
    SV_Target.y = _3445;
    SV_Target.z = _3446;
    SV_Target.w = _3817;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3300].w;
    discard_exit();
}


