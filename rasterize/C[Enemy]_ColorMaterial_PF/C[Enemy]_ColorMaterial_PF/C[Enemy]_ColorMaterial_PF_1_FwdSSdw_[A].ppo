#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1435;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _299 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _315 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _327 = exp2(log2(_315.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    float _338 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    float _361 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(4.0) ? _362 : (isnan(_362) ? 4.0 : min(_362, 4.0));
    float _376 = floor(_363);
    vec4 _379 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _376));
    vec4 _403 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _414 = cbMtdParam._m0[9u].x * _403.x;
    float _415 = cbMtdParam._m0[9u].y * _403.y;
    float _416 = cbMtdParam._m0[9u].z * _403.z;
    float _423 = (((cbMtdParam._m0[10u].x * _379.x) - _414) * _340) + _414;
    float _424 = (((cbMtdParam._m0[10u].y * _379.y) - _415) * _340) + _415;
    float _425 = (((cbMtdParam._m0[10u].z * _379.z) - _416) * _340) + _416;
    float _431 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _444 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _463 = (((cbMtdParam._m0[16u].x * _444.x) - _423) * _431) + _423;
    float _464 = (((cbMtdParam._m0[16u].y * _444.y) - _424) * _431) + _424;
    float _465 = (((cbMtdParam._m0[16u].z * _444.z) - _425) * _431) + _425;
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _498 = (((cbMtdParam._m0[19u].x * _478.x) - _463) * _329) + _463;
    float _499 = (((cbMtdParam._m0[19u].y * _478.y) - _464) * _329) + _464;
    float _500 = (((cbMtdParam._m0[19u].z * _478.z) - _465) * _329) + _465;
    vec4 _513 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _538 = (_315.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _513.x) - _498) * _301) + _498);
    float _540 = (_315.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _513.y) - _499) * _301) + _499);
    float _542 = (_315.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _513.z) - _500) * _301) + _500);
    float _546 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _555 = (_546 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _546))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3888 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _563 = ((cbMtdParam._m0[21u].x - _538) * _556) + _538;
    float _564 = ((cbMtdParam._m0[21u].y - _540) * _556) + _540;
    float _565 = ((cbMtdParam._m0[21u].z - _542) * _556) + _542;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[29u].x;
    _196[0u] = cbMtdParam._m0[29u].y;
    _195[1u] = cbMtdParam._m0[31u].x;
    _196[1u] = cbMtdParam._m0[31u].y;
    _195[2u] = cbMtdParam._m0[30u].z;
    _196[2u] = cbMtdParam._m0[30u].w;
    _195[3u] = cbMtdParam._m0[30u].x;
    _196[3u] = cbMtdParam._m0[30u].y;
    _195[4u] = cbMtdParam._m0[29u].z;
    _196[4u] = cbMtdParam._m0[29u].w;
    float _607 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    uint _609 = uint(int(isnan(4.0) ? _607 : (isnan(_607) ? 4.0 : min(_607, 4.0))));
    float _616 = ((_196[_609] - cbMtdParam._m0[22u].z) * _340) + cbMtdParam._m0[22u].z;
    float _619 = ((cbMtdParam._m0[22u].w - _616) * _431) + _616;
    float _622 = ((cbMtdParam._m0[25u].y - _619) * _329) + _619;
    float _625 = ((cbMtdParam._m0[26u].y - _622) * _301) + _622;
    float _627 = _625 - (_625 * _546);
    vec4 _643 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _376));
    vec4 _661 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _669 = cbMtdParam._m0[22u].x + _661.z;
    float _672 = (((_643.z + _195[_609]) - _669) * _340) + _669;
    vec4 _685 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _696 = (((_685.z - _672) + cbMtdParam._m0[28u].z) * _431) + _672;
    float _702 = ((((_288 * 2.0) * _696) - _696) * cbMtdParam._m0[24u].w) + _696;
    vec4 _715 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _726 = (((cbMtdParam._m0[23u].z + _715.z) - _702) * _329) + _702;
    vec4 _739 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _750 = (((_739.z - _726) + cbMtdParam._m0[26u].z) * _301) + _726;
    vec4 _765 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _780 = ((cbMtdParam._m0[27u].z * _546) * ((_765.z * cbMtdParam._m0[27u].y) - _750)) + _750;
    float _792 = ((_643.x - _663) * _340) + _663;
    float _793 = ((_643.y - _664) * _340) + _664;
    float _798 = ((_685.x - _792) * _431) + _792;
    float _799 = ((_685.y - _793) * _431) + _793;
    float _804 = ((_715.x - _798) * _329) + _798;
    float _805 = ((_715.y - _799) * _329) + _799;
    float _814 = ((((_739.x - _804) * _301) + _804) * 2.0) + (-1.0);
    float _815 = ((((_739.y - _805) * _301) + _805) * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3909 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _821 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    float _831 = ((cbMtdParam._m0[25u].z * ((_284.x * 2.0) + (-1.0))) + _814) + ((((_765.x * 2.0) + (-1.0)) * _546) * cbMtdParam._m0[27u].x);
    float _832 = ((cbMtdParam._m0[25u].z * ((_284.y * 2.0) + (-1.0))) + _815) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_765.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _834 = gl_FragCoord.x * 0.125;
    float _836 = gl_FragCoord.y * 0.125;
    float _846 = fma(_821, _231 * NORMAL.x, fma(_832, _238 * TANGENT.x, (_224 * _216) * _831));
    float _849 = fma(_821, _231 * NORMAL.y, fma(_832, _238 * TANGENT.y, (_224 * _217) * _831));
    float _852 = fma(_821, _231 * NORMAL.z, fma(_832, _238 * TANGENT.z, (_224 * _218) * _831));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _3920 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _860 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3942 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3953 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3964 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _864 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_834, _836)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_834, _836));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1117 = sqrt(((_934 * _934) + (_935 * _935)) + (_936 * _936));
        float _1123 = (cbMatDynParam._m0[5u].x * _1117) + cbMatDynParam._m0[5u].y;
        float _3975 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1128 = (cbMatDynParam._m0[5u].z * _1117) + cbMatDynParam._m0[5u].w;
        float _3986 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) - _1124)) + _1124) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _980 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _983 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _996 = uint(roundEven(NORMAL.w)) * 13u;
    uint _997 = _996 + 9u;
    uint _998 = _997 + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_998].z;
    float _3997 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1010 = 1.0 - _864;
    float _1011 = _1007 * _1010;
    float _1012 = _1008 * _1010;
    float _1013 = _1009 * _1010;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _864;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _864;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _864;
    float _1021 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = _1033.x * TEXCOORD_3.w;
    float _1037 = dot(vec3(_857, _858, _859), vec3(_941, _942, _943));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _857) - _941;
    float _1045 = (_1040 * _858) - _942;
    float _1046 = (_1040 * _859) - _943;
    float _1050 = abs(dot(vec3(_941, _942, _943), vec3(_857, _858, _859)));
    float _4030 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_860);
    float _1063 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1069 = (1.0 - _1063) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1070 = _1063 * _1052;
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1106, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098));
        float _1163 = fma(_1106, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098));
        float _1167 = fma(_1106, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098));
        float _1192 = _1098 + _857;
        float _1193 = _1102 + _858;
        float _1194 = _1106 + _859;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_857, _858, _859), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4078 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_857, _858, _859), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4111 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_857, _858, _859), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4144 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1106, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098));
        float _1476 = fma(_1106, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098));
        float _1480 = fma(_1106, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098));
        float _1503 = _1098 + _857;
        float _1504 = _1102 + _858;
        float _1505 = _1106 + _859;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_857, _858, _859), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4207 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_857, _858, _859), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4240 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_857, _858, _859), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4273 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1435;
        _1742 = _1435;
        _1743 = _1435;
        _1744 = _1435;
        _1745 = _1435;
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1448)) + _1448;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1449)) + _1449;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1044 * 0.5;
    float _1810 = _1045 * 0.5;
    float _1811 = _1046 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1106, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1098)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1106, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1098)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1106, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1098)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1939 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1942 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1970 = frontier_phi_19_17_ladder;
        }
        float _2194;
        if (_1939 > 0.0)
        {
            _2194 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2194 = frontier_phi_28_24_ladder;
        }
        float _2451;
        if (_1942 > 0.0)
        {
            _2451 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2451 = frontier_phi_40_35_ladder;
        }
        float _2453 = isnan(_2194) ? _1970 : (isnan(_1970) ? _2194 : min(_1970, _2194));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1936) + _1925;
        float _2459 = (_2454 * _1939) + _1929;
        float _2460 = (_2454 * _1942) + _1933;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2461;
        float _2465 = _2461 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 > _2465) || ((_2459 < _2463) || ((_2458 < _2463) || (_2458 > _2465))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_18_40_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_18_40_ladder_2;
        _1960 = frontier_phi_18_40_ladder_1;
        _1962 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1878);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1106, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1098)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1106, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1098)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1106, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1098)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2035 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2038 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2199;
        if (_2032 > 0.0)
        {
            _2199 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2199 = frontier_phi_30_26_ladder;
        }
        float _2478;
        if (_2035 > 0.0)
        {
            _2478 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2478 = frontier_phi_42_37_ladder;
        }
        float _2691;
        if (_2038 > 0.0)
        {
            _2691 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2691 = frontier_phi_51_48_ladder;
        }
        float _2693 = isnan(_2478) ? _2199 : (isnan(_2199) ? _2478 : min(_2199, _2478));
        float _2694 = isnan(_2691) ? _2693 : (isnan(_2693) ? _2691 : min(_2693, _2691));
        float _2698 = (_2694 * _2032) + _2021;
        float _2699 = (_2694 * _2035) + _2025;
        float _2700 = (_2694 * _2038) + _2029;
        float _2701 = _2694 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2701;
        float _2704 = _2701 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2700 > _2704) || ((_2700 < _2702) || ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 < _2702) || (_2698 > _2704))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2700, cbModelParam._m0[17u].z, fma(_2699, cbModelParam._m0[17u].y, _2698 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2700, cbModelParam._m0[18u].z, fma(_2699, cbModelParam._m0[18u].y, _2698 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2700, cbModelParam._m0[19u].z, fma(_2699, cbModelParam._m0[19u].y, _2698 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_27_51_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_27_51_ladder_2;
        _2059 = frontier_phi_27_51_ladder_1;
        _2061 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1967);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1069 * _1021) + _1070) * _1036) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1069 * _1023) + _1070) * _1036) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1069 * _1024) + _1070) * _1036) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    vec4 _2095 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_958, _959));
    float _2097 = _2095.w;
    float _2109 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2097);
    float _2110 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2097);
    float _2111 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2097);
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_996 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _1036 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2153 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2157 = _2117 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_857, _858, _859));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_857, _858, _859));
    float _4409 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4420 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2134].x * _2140) * _2178) + (((cbLight._m0[_2144].x * _2109) * _2153) * _2176);
    float _2186 = ((_2140 * cbLight._m0[_2134].y) * _2178) + (((cbLight._m0[_2144].y * _2110) * _2153) * _2176);
    float _2187 = ((_2140 * cbLight._m0[_2134].z) * _2178) + (((cbLight._m0[_2144].z * _2111) * _2153) * _2176);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2193)
    {
        _2204 = _2185;
        _2206 = _2186;
        _2208 = _2187;
    }
    else
    {
        uint _2212 = _2117 + 6u;
        float _2228 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4431 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2231 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2204 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2185;
        _2206 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2186;
        _2208 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2187;
    }
    bool _2211 = _2191.y == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2211)
    {
        _2249 = _2204;
        _2251 = _2206;
        _2253 = _2208;
    }
    else
    {
        uint _2422 = _2117 + 7u;
        float _2438 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4447 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2441 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2249 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2204;
        _2251 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2206;
        _2253 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2208;
    }
    uint _2256 = _2117 + 8u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _860) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2117].x + _941;
    float _2272 = cbLight._m0[_2117].y + _942;
    float _2273 = cbLight._m0[_2117].z + _943;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2117].xyz));
    float _4463 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _4474 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2285 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2286 = dot(vec3(_857, _858, _859), vec3(_2278, _2279, _2280));
    float _4485 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2278, _2279, _2280));
    float _4496 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2270 * _2270;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
    float _2307 = 0.959999978542327880859375 - _1018;
    float _2309 = 0.959999978542327880859375 - _1019;
    float _2310 = 0.959999978542327880859375 - _1020;
    float _2317 = 1.0 - _2270;
    float _2328 = (0.5 / (((_2285 * ((_2284 * _2317) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2317) + _2270) * _2284))) * _2284;
    float _4507 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    uint _2344 = _2117 + 9u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _860) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2157].x + _941;
    float _2358 = cbLight._m0[_2157].y + _942;
    float _2359 = cbLight._m0[_2157].z + _943;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2157].xyz));
    float _4518 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2371 = dot(vec3(_857, _858, _859), vec3(_2364, _2365, _2366));
    float _4529 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2375 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2364, _2365, _2366));
    float _4540 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = _2356 * _2356;
    float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2397 = 1.0 - _2356;
    float _2407 = (0.5 / (((_2285 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2397) + _2356) * _2370))) * _2370;
    float _4551 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
    float _2419 = (((((_2390 * _2307) + _1021) * cbLight._m0[_2344].x) * _2409) * _2140) + ((((cbLight._m0[_2256].x * _2109) * ((_2306 * _2307) + _1021)) * _2330) * _2153);
    float _2420 = (((((_2390 * _2309) + _1023) * cbLight._m0[_2344].y) * _2409) * _2140) + ((((cbLight._m0[_2256].y * _2110) * ((_2306 * _2309) + _1023)) * _2330) * _2153);
    float _2421 = (((((_2390 * _2310) + _1024) * cbLight._m0[_2344].z) * _2409) * _2140) + ((((cbLight._m0[_2256].z * _2111) * ((_2306 * _2310) + _1024)) * _2330) * _2153);
    float _2483;
    float _2485;
    float _2487;
    if (_2193)
    {
        _2483 = _2419;
        _2485 = _2420;
        _2487 = _2421;
    }
    else
    {
        uint _2489 = _2117 + 2u;
        uint _2493 = _2117 + 10u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _860) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _941;
        float _2510 = cbLight._m0[_2489].y + _942;
        float _2511 = cbLight._m0[_2489].z + _943;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2489].xyz));
        float _4562 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2523 = dot(vec3(_857, _858, _859), vec3(_2516, _2517, _2518));
        float _4573 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4584 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2549 = 1.0 - _2508;
        float _2559 = (0.5 / (((_2285 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2549) + _2508) * _2522))) * _2522;
        float _4595 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2483 = (((((_2542 * _2307) + _1021) * cbLight._m0[_2493].x) * _2561) * _2562) + _2419;
        _2485 = (((((_2542 * _2309) + _1023) * cbLight._m0[_2493].y) * _2561) * _2562) + _2420;
        _2487 = (((((_2542 * _2310) + _1024) * cbLight._m0[_2493].z) * _2561) * _2562) + _2421;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2211)
    {
        _2597 = _2483;
        _2599 = _2485;
        _2601 = _2487;
    }
    else
    {
        uint _2608 = _2117 + 3u;
        uint _2612 = _2117 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _860) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _941;
        float _2629 = cbLight._m0[_2608].y + _942;
        float _2630 = cbLight._m0[_2608].z + _943;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2608].xyz));
        float _4611 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2642 = dot(vec3(_857, _858, _859), vec3(_2635, _2636, _2637));
        float _4622 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4633 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2285 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2668) + _2627) * _2641))) * _2641;
        float _4644 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2597 = (((((_2661 * _2307) + _1021) * cbLight._m0[_2612].x) * _2680) * _2681) + _2483;
        _2599 = (((((_2661 * _2309) + _1023) * cbLight._m0[_2612].y) * _2680) * _2681) + _2485;
        _2601 = (((((_2661 * _2310) + _1024) * cbLight._m0[_2612].z) * _2680) * _2681) + _2487;
    }
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_2115.y == 0u)
    {
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2756;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2756;
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2756;
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2772)));
        float _2793 = (log2(_2759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            uint _3063 = 0u;
            uint _3072;
            bool _3073;
            for (;;)
            {
                _3072 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                _3073 = _3072 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3073)
                {
                    frontier_phi_68_pred = _3057;
                    frontier_phi_68_pred_1 = _3062;
                    frontier_phi_68_pred_2 = _3061;
                    frontier_phi_68_pred_3 = _3060;
                    frontier_phi_68_pred_4 = _3059;
                    frontier_phi_68_pred_5 = _3058;
                }
                else
                {
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    uint _3208;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3072;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    for (;;)
                    {
                        uint _3212 = uint(findLSB(_3208)) + (_3063 << 5u);
                        uint _3209 = (_3208 + 4294967295u) & _3208;
                        uint _3214 = _3212 * 48u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3234 = (_3212 * 48u) + 4u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3253 = (_3212 * 48u) + 8u;
                        vec3 _3264 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x));
                        float _3268 = _3228.x - _2757;
                        float _3269 = _3228.y - _2758;
                        float _3270 = _3228.z - _2759;
                        float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                        float _3274 = inversesqrt(_3271);
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3278 = dot(vec3(_977, _980, _983), vec3(_3275, _3276, _3277));
                        float _3283 = 1.0 - (_3271 * _3228.w);
                        float _4670 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3285 = sqrt(_3271) * _3247.w;
                        float _3288 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3278) + _3289;
                        float _3295 = _3285 * _3285;
                        float _3299 = ((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3284) / ((_3295 * 0.699999988079071044921875) + 1.0);
                        float _3303 = (-0.0) - _2757;
                        float _3304 = (-0.0) - _2758;
                        float _3305 = (-0.0) - _2759;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3320 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                        float _3321 = 1.0 - _1052;
                        float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                        float _3329 = _3328 * _3328;
                        float _3330 = _3329 * _3329;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3341 = dot(vec3(_977, _980, _983), vec3(_3310, _3311, _3312));
                        float _4686 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3345 = dot(vec3(_977, _980, _983), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                        float _4697 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                        float _3353 = _3288 * _3329;
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3278) + _3354;
                        float _4708 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3359 = 1.0 - _3329;
                        float _3369 = (0.5 / (((_3358 * ((_3344 * _3359) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3329) * _3344))) * _3358;
                        float _4719 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3380 = (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3352 * _3352) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125))) * _3284;
                        _3132 = (_3299 * _3247.x) + _3205;
                        _3133 = (_3299 * _3247.y) + _3206;
                        _3134 = (_3299 * _3247.z) + _3207;
                        _3129 = (_3380 * _3264.x) + _3202;
                        _3130 = (_3380 * _3264.y) + _3203;
                        _3131 = (_3380 * _3264.z) + _3204;
                        if (_3209 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3209;
                        }
                    }
                    frontier_phi_68_pred = _3129;
                    frontier_phi_68_pred_1 = _3134;
                    frontier_phi_68_pred_2 = _3133;
                    frontier_phi_68_pred_3 = _3132;
                    frontier_phi_68_pred_4 = _3131;
                    frontier_phi_68_pred_5 = _3130;
                }
                _2905 = frontier_phi_68_pred;
                _2915 = frontier_phi_68_pred_1;
                _2913 = frontier_phi_68_pred_2;
                _2911 = frontier_phi_68_pred_3;
                _2909 = frontier_phi_68_pred_4;
                _2907 = frontier_phi_68_pred_5;
                uint _3064 = _3063 + 1u;
                if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3057 = _2905;
                    _3058 = _2907;
                    _3059 = _2909;
                    _3060 = _2911;
                    _3061 = _2913;
                    _3062 = _2915;
                    _3063 = _3064;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((4294967295u << _2921) & _2803) == 0u)
        {
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
        }
        else
        {
            float _3050 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
            float _3051 = _3050 * _2757;
            float _3052 = _3050 * _2758;
            float _3053 = _3050 * _2759;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3185 = _2904;
                float _3186 = _2906;
                float _3187 = _2908;
                float _3188 = _2910;
                float _3189 = _2912;
                float _3190 = _2914;
                uint _3191 = _2921;
                uint _3200;
                bool _3201;
                for (;;)
                {
                    _3200 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                    _3201 = _3200 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3201)
                    {
                        frontier_phi_79_pred = _3190;
                        frontier_phi_79_pred_1 = _3189;
                        frontier_phi_79_pred_2 = _3188;
                        frontier_phi_79_pred_3 = _3187;
                        frontier_phi_79_pred_4 = _3186;
                        frontier_phi_79_pred_5 = _3185;
                    }
                    else
                    {
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        uint _3413 = _3200;
                        uint _3414;
                        vec4 _3439;
                        float _3440;
                        vec4 _3455;
                        vec3 _3467;
                        vec4 _3482;
                        vec4 _3497;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3424 = ((_3191 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3413));
                            _3414 = (_3413 + 4294967295u) & _3413;
                            uint _3426 = _3424 * 40u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3440 = _3439.w;
                            uint _3442 = (_3424 * 40u) + 4u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3424 * 40u) + 8u;
                            _3467 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x));
                            uint _3469 = (_3424 * 40u) + 16u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3424 * 40u) + 20u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3424 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3424 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_2759, _3531.z, fma(_2758, _3531.y, _3531.x * _2757)) + _3531.w;
                            _3544 = !((fma(_2759, _3512.z, fma(_2758, _3512.y, _3512.x * _2757)) + _3512.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3439.x - _2757;
                                float _3572 = _3439.y - _2758;
                                float _3573 = _3439.z - _2759;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3440 * _3440));
                                float _4730 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3589 = sqrt(_3574) * _3455.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_977, _980, _983))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_2759, _3482.z, fma(_2758, _3482.y, _3482.x * _2757)) + _3482.w) / _3543;
                                float _3603 = (fma(_2759, _3497.z, fma(_2758, _3497.y, _3497.x * _2757)) + _3497.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4746 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _1052;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3634 = _3580 - _3053;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3051, (-0.0) - _3052, (-0.0) - _3053));
                                float _4757 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3646 = dot(vec3(_977, _980, _983), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4768 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_977, _980, _983), vec3(_3578, _3579, _3580))) + _3655;
                                float _4779 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4790 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3609 * _3455.y;
                                frontier_phi_85_pred_1 = _3609 * _3455.x;
                                frontier_phi_85_pred_2 = _3683 * _3467.z;
                                frontier_phi_85_pred_3 = _3683 * _3467.y;
                                frontier_phi_85_pred_4 = _3683 * _3467.x;
                                frontier_phi_85_pred_5 = _3609 * _3455.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_85_pred;
                            _3690 = frontier_phi_85_pred_1;
                            _3689 = frontier_phi_85_pred_2;
                            _3688 = frontier_phi_85_pred_3;
                            _3687 = frontier_phi_85_pred_4;
                            _3692 = frontier_phi_85_pred_5;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            if (_3414 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3414;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3399;
                        frontier_phi_79_pred_1 = _3398;
                        frontier_phi_79_pred_2 = _3397;
                        frontier_phi_79_pred_3 = _3396;
                        frontier_phi_79_pred_4 = _3395;
                        frontier_phi_79_pred_5 = _3394;
                    }
                    _3036 = frontier_phi_79_pred;
                    _3034 = frontier_phi_79_pred_1;
                    _3032 = frontier_phi_79_pred_2;
                    _3030 = frontier_phi_79_pred_3;
                    _3028 = frontier_phi_79_pred_4;
                    _3026 = frontier_phi_79_pred_5;
                    uint _3192 = _3191 + 1u;
                    if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3185 = _3026;
                        _3186 = _3028;
                        _3187 = _3030;
                        _3188 = _3032;
                        _3189 = _3034;
                        _3190 = _3036;
                        _3191 = _3192;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3030;
                frontier_phi_60_61_ladder_1 = _3036;
                frontier_phi_60_61_ladder_2 = _3034;
                frontier_phi_60_61_ladder_3 = _3032;
                frontier_phi_60_61_ladder_4 = _3028;
                frontier_phi_60_61_ladder_5 = _3026;
            }
            else
            {
                frontier_phi_60_61_ladder = _2908;
                frontier_phi_60_61_ladder_1 = _2914;
                frontier_phi_60_61_ladder_2 = _2912;
                frontier_phi_60_61_ladder_3 = _2910;
                frontier_phi_60_61_ladder_4 = _2906;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            _3025 = frontier_phi_60_61_ladder_5;
            _3027 = frontier_phi_60_61_ladder_4;
            _3029 = frontier_phi_60_61_ladder;
            _3031 = frontier_phi_60_61_ladder_3;
            _3033 = frontier_phi_60_61_ladder_2;
            _3035 = frontier_phi_60_61_ladder_1;
        }
        float _3040 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2816 = (_3040 * _3031) + _2249;
        _2818 = (_3040 * _3033) + _2251;
        _2820 = (_3040 * _3035) + _2253;
        _2822 = ((_3025 * _1021) * _3040) + _2597;
        _2824 = ((_3027 * _1023) * _3040) + _2599;
        _2826 = ((_3029 * _1024) * _3040) + _2601;
    }
    else
    {
        _2816 = _2249;
        _2818 = _2251;
        _2820 = _2253;
        _2822 = _2597;
        _2824 = _2599;
        _2826 = _2601;
    }
    float _4806 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4817 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4828 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2843 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2816 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1036))) + ((_2822 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2818 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1036))) + ((_2824 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _2845 = ((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2820 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1036))) + ((_2826 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    uint _2846 = _996 + 6u;
    float _2854 = _958 / cbSceneParam._m0[86u].x;
    float _2855 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2930 = _2929 / _884;
        float _2941 = _2930 * _934;
        float _2942 = _935 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2945 = _2930 * _936;
        float _2947 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2948 = _2947 + cbSceneParam._m0[79u].w;
        float _2949 = cbSceneParam._m0[79u].w - _2942;
        float _2955 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2945 * _2945));
        float _2958 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2955;
        float _2963 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2965 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3142;
        if (abs((_2943 - _2947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3142 = ((((_2948 > 0.0) ? exp2(_2963 * _2948) : (2.0 - exp2(_2965 * _2948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2958;
        }
        else
        {
            float _3086 = 1.0 / cbSceneParam._m0[80u].x;
            float _3087 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : max(_2948, _2949));
            float _3088 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : min(_2948, _2949));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            _3142 = ((abs(_2955 / _2943) * cbSceneParam._m0[80u].y) * ((((_3097 - _3098) * 2.0) - ((exp2(_2963 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)))) - exp2(_2963 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))))) * _3086)) - ((exp2(_2965 * _3097) - exp2(_2965 * _3098)) * _3086))) + (_2958 * cbSceneParam._m0[80u].z);
        }
        vec4 _3144 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3153 = exp2((_3142 * (-1.44269502162933349609375)) * (1.0 - _3144.w));
        float _3154 = log2(_3153);
        float _3170 = log2(_2874);
        _2967 = (exp2(_3170 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].x)) * _3144.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2969 = (exp2(_3170 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].y)) * _3144.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2971 = (exp2(_3170 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].z)) * _3144.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2973 = _3153 * _2874;
    }
    else
    {
        _2967 = _2871;
        _2969 = _2872;
        _2971 = _2873;
        _2973 = _2874;
    }
    bool _3180;
    vec4 _2983;
    vec4 _3005;
    float _3007;
    float _3011;
    float _3012;
    float _3013;
    float _3014;
    bool _3024;
    for (;;)
    {
        _2983 = cbMatDynParam._m0[0u];
        float _2985 = roundEven(_2983.y);
        bool _2986 = _2985 == 3.0;
        float _2987 = log2(_2973);
        float _2994 = exp2(_2987 * cbSceneParam._m0[78u].x) * _2843;
        float _2995 = exp2(_2987 * cbSceneParam._m0[78u].y) * _2844;
        float _2996 = exp2(_2987 * cbSceneParam._m0[78u].z) * _2845;
        float _3003 = _947 + (-0.5);
        _3005 = cbMtdParam._m0[1u];
        _3007 = _3005.y * _3003;
        float _3010 = (_2985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3011 = _3010 * (_2986 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = _3010 * (_2986 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2969)));
        _3013 = _3010 * (_2986 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2971)));
        _3014 = _3003 * 0.999000012874603271484375;
        _3024 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3024)
        {
            if ((cbInstanceData._m0[_996 + 7u].x + _3014) < 0.5)
            {
                _3180 = true;
                break;
            }
        }
        uint _3121 = _997 + uint(_2983.w);
        if ((cbInstanceData._m0[_3121].w < 1.0) && ((cbInstanceData._m0[_3121].w + _3014) < 0.5))
        {
            _3180 = true;
            break;
        }
        if ((_3007 + 1.0) < _3005.x)
        {
            _3180 = true;
            break;
        }
        _3180 = false;
        break;
    }
    float _3385;
    if (_3180)
    {
        discard_state = true;
        _3385 = 0.0;
    }
    else
    {
        _3385 = cbInstanceData._m0[_2846].w;
    }
    SV_Target.x = _3011;
    SV_Target.y = _3012;
    SV_Target.z = _3013;
    SV_Target.w = _3385;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
    discard_exit();
}


