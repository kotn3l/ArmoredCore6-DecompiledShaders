#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1507;
float _3883;
float _3884;
float _3885;
float _3886;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _303 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _319 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _331 = exp2(log2(_319.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    vec4 _356 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _366 = roundEven(5.0 - _362);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _368 = isnan(4.0) ? _367 : (isnan(_367) ? 4.0 : min(_367, 4.0));
    float _381 = floor(_368);
    vec4 _384 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _381));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _448 = roundEven(_362);
    float _449 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _451 = uint(int(isnan(5.0) ? _449 : (isnan(_449) ? 5.0 : min(_449, 5.0))));
    vec4 _481 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _492 = cbMtdParam._m0[9u].x * _481.x;
    float _493 = cbMtdParam._m0[9u].y * _481.y;
    float _494 = cbMtdParam._m0[9u].z * _481.z;
    float _501 = ((((((_198[_451] - cbMtdParam._m0[10u].x) * _359) + cbMtdParam._m0[10u].x) * _384.x) - _492) * _344) + _492;
    float _502 = ((((((_199[_451] - cbMtdParam._m0[10u].y) * _359) + cbMtdParam._m0[10u].y) * _384.y) - _493) * _344) + _493;
    float _503 = ((((((_200[_451] - cbMtdParam._m0[10u].z) * _359) + cbMtdParam._m0[10u].z) * _384.z) - _494) * _344) + _494;
    float _509 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _522 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _541 = (((cbMtdParam._m0[16u].x * _522.x) - _501) * _509) + _501;
    float _542 = (((cbMtdParam._m0[16u].y * _522.y) - _502) * _509) + _502;
    float _543 = (((cbMtdParam._m0[16u].z * _522.z) - _503) * _509) + _503;
    vec4 _556 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _576 = (((cbMtdParam._m0[19u].x * _556.x) - _541) * _333) + _541;
    float _577 = (((cbMtdParam._m0[19u].y * _556.y) - _542) * _333) + _542;
    float _578 = (((cbMtdParam._m0[19u].z * _556.z) - _543) * _333) + _543;
    vec4 _590 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _615 = (_319.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _590.x) - _576) * _305) + _576);
    float _617 = (_319.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _590.y) - _577) * _305) + _577);
    float _619 = (_319.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _590.z) - _578) * _305) + _578);
    float _623 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _632 = (_623 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _623))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3945 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _640 = ((cbMtdParam._m0[21u].x - _615) * _633) + _615;
    float _641 = ((cbMtdParam._m0[21u].y - _617) * _633) + _617;
    float _642 = ((cbMtdParam._m0[21u].z - _619) * _633) + _619;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _682 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    uint _684 = uint(int(isnan(4.0) ? _682 : (isnan(_682) ? 4.0 : min(_682, 4.0))));
    float _691 = ((_194[_684] - cbMtdParam._m0[22u].z) * _344) + cbMtdParam._m0[22u].z;
    float _694 = ((cbMtdParam._m0[22u].w - _691) * _509) + _691;
    float _697 = ((cbMtdParam._m0[25u].y - _694) * _333) + _694;
    float _700 = ((cbMtdParam._m0[26u].y - _697) * _305) + _697;
    float _702 = _700 - (_700 * _623);
    vec4 _718 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _381));
    vec4 _735 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _737 = _735.x;
    float _738 = _735.y;
    float _743 = cbMtdParam._m0[22u].x + _735.z;
    float _746 = (((_718.z + _193[_684]) - _743) * _344) + _743;
    vec4 _758 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _769 = (((_758.z - _746) + cbMtdParam._m0[28u].z) * _509) + _746;
    float _775 = ((((_292 * 2.0) * _769) - _769) * cbMtdParam._m0[24u].w) + _769;
    vec4 _787 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _798 = (((cbMtdParam._m0[23u].z + _787.z) - _775) * _333) + _775;
    vec4 _811 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _822 = (((_811.z - _798) + cbMtdParam._m0[26u].z) * _305) + _798;
    vec4 _837 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _852 = ((cbMtdParam._m0[27u].z * _623) * ((_837.z * cbMtdParam._m0[27u].y) - _822)) + _822;
    float _864 = ((_718.x - _737) * _344) + _737;
    float _865 = ((_718.y - _738) * _344) + _738;
    float _870 = ((_758.x - _864) * _509) + _864;
    float _871 = ((_758.y - _865) * _509) + _865;
    float _876 = ((_787.x - _870) * _333) + _870;
    float _877 = ((_787.y - _871) * _333) + _871;
    float _886 = ((((_811.x - _876) * _305) + _876) * 2.0) + (-1.0);
    float _887 = ((((_811.y - _877) * _305) + _877) * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3966 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _893 = sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))));
    float _903 = ((cbMtdParam._m0[25u].z * ((_288.x * 2.0) + (-1.0))) + _886) + ((((_837.x * 2.0) + (-1.0)) * _623) * cbMtdParam._m0[27u].x);
    float _904 = ((cbMtdParam._m0[25u].z * ((_288.y * 2.0) + (-1.0))) + _887) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_837.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _906 = gl_FragCoord.x * 0.125;
    float _908 = gl_FragCoord.y * 0.125;
    float _918 = fma(_893, _235 * NORMAL.x, fma(_904, _242 * TANGENT.x, (_228 * _220) * _903));
    float _921 = fma(_893, _235 * NORMAL.y, fma(_904, _242 * TANGENT.y, (_228 * _221) * _903));
    float _924 = fma(_893, _235 * NORMAL.z, fma(_904, _242 * TANGENT.z, (_228 * _222) * _903));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _3977 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _932 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3999 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4010 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4021 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _936 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_906, _908)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _956 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1006 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _996);
    float _1007 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _996);
    float _1008 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _996);
    float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
    float _1013 = _1006 * _1012;
    float _1014 = _1007 * _1012;
    float _1015 = _1008 * _1012;
    vec4 _1017 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_906, _908));
    float _1019 = _1017.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1189 = sqrt(((_1006 * _1006) + (_1007 * _1007)) + (_1008 * _1008));
        float _1195 = (cbMatDynParam._m0[5u].x * _1189) + cbMatDynParam._m0[5u].y;
        float _4032 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1200 = (cbMatDynParam._m0[5u].z * _1189) + cbMatDynParam._m0[5u].w;
        float _4043 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) - _1196)) + _1196) < ((_1019 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1052 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1055 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1068 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1069 = _1068 + 9u;
    uint _1070 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _1076 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1070].x;
    float _1077 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1070].y;
    float _1078 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1070].z;
    float _4054 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1082 = 1.0 - _936;
    float _1083 = _1079 * _1082;
    float _1084 = _1080 * _1082;
    float _1085 = _1081 * _1082;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _936;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _936;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _936;
    float _1093 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1108 = _1105.x * TEXCOORD_3.w;
    float _1109 = dot(vec3(_929, _930, _931), vec3(_1013, _1014, _1015));
    float _1112 = _1109 * 2.0;
    float _1116 = (_1112 * _929) - _1013;
    float _1117 = (_1112 * _930) - _1014;
    float _1118 = (_1112 * _931) - _1015;
    float _1122 = abs(dot(vec3(_1013, _1014, _1015), vec3(_929, _930, _931)));
    float _4087 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1124 = sqrt(_932);
    float _1135 = exp2((_1124 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1124 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1124 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1124;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1506;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1231 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1235 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1239 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1264 = _1170 + _929;
        float _1265 = _1174 + _930;
        float _1266 = _1178 + _931;
        float _1276 = fma(_1266, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264)) - _1231;
        float _1277 = fma(_1266, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264)) - _1235;
        float _1278 = fma(_1266, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264)) - _1239;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1231 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1235 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[34u].z) + ((((((_1239 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1334 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1300.x + (-0.5));
        float _1336 = _1334 * (_1300.y + (-0.5));
        float _1337 = _1334 * (_1300.z + (-0.5));
        float _1344 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1307.x + (-0.5));
        float _1346 = _1344 * (_1307.y + (-0.5));
        float _1347 = _1344 * (_1307.z + (-0.5));
        float _1354 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1314.x + (-0.5));
        float _1356 = _1354 * (_1314.y + (-0.5));
        float _1357 = _1354 * (_1314.z + (-0.5));
        float _1364 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1321.x + (-0.5));
        float _1366 = _1364 * (_1321.y + (-0.5));
        float _1367 = _1364 * (_1321.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1388 = (dot(vec3(_929, _930, _931), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1398 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4135 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1400 + 1.0))) + _1405) * _1368;
        float _1415 = _1336 * 0.5;
        float _1416 = _1346 * 0.5;
        float _1417 = _1356 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_929, _930, _931), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4168 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1442 + 1.0))) + _1447) * _1369;
        float _1457 = _1337 * 0.5;
        float _1458 = _1347 * 0.5;
        float _1459 = _1357 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_929, _930, _931), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4201 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1484 + 1.0))) + _1489) * _1370;
        _1506 = _1337;
        _1508 = _1336;
        _1509 = _1335;
        _1510 = _1347;
        _1511 = _1346;
        _1512 = _1345;
        _1513 = _1357;
        _1514 = _1356;
        _1515 = _1355;
        _1516 = _1370;
        _1517 = _1369;
        _1518 = _1368;
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1507;
        _1508 = _1507;
        _1509 = _1507;
        _1510 = _1507;
        _1511 = _1507;
        _1512 = _1507;
        _1513 = _1507;
        _1514 = _1507;
        _1515 = _1507;
        _1516 = _1507;
        _1517 = _1507;
        _1518 = _1507;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1548 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1552 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1575 = _1170 + _929;
        float _1576 = _1174 + _930;
        float _1577 = _1178 + _931;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_929, _930, _931), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4264 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_929, _930, _931), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4297 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_929, _930, _931), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4330 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1507;
        _1814 = _1507;
        _1815 = _1507;
        _1816 = _1507;
        _1817 = _1507;
        _1818 = _1507;
        _1819 = _1507;
        _1820 = _1507;
        _1821 = _1507;
        _1822 = _1507;
        _1823 = _1507;
        _1824 = _1507;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1519)) + _1519;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1520)) + _1520;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1521)) + _1521;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1116 * 0.5;
    float _1882 = _1117 * 0.5;
    float _1883 = _1118 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1506, _1510, _1513, _1516));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1118, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116));
        float _2011 = fma(_1118, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116));
        float _2014 = fma(_1118, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2042 = frontier_phi_19_17_ladder;
        }
        float _2244;
        if (_2011 > 0.0)
        {
            _2244 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2244 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_2014 > 0.0)
        {
            _2498 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2500 = isnan(_2244) ? _2042 : (isnan(_2042) ? _2244 : min(_2042, _2244));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _2008) + _1997;
        float _2506 = (_2501 * _2011) + _2001;
        float _2507 = (_2501 * _2014) + _2005;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_18_40_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_18_40_ladder_2;
        _2032 = frontier_phi_18_40_ladder_1;
        _2034 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1116, _1117, _1118), _1950);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1118, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116));
        float _2106 = fma(_1118, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116));
        float _2109 = fma(_1118, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116));
        float _2249;
        if (_2103 > 0.0)
        {
            _2249 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2249 = frontier_phi_30_26_ladder;
        }
        float _2525;
        if (_2106 > 0.0)
        {
            _2525 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2525 = frontier_phi_42_37_ladder;
        }
        float _2738;
        if (_2109 > 0.0)
        {
            _2738 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2738 = frontier_phi_51_48_ladder;
        }
        float _2740 = isnan(_2525) ? _2249 : (isnan(_2249) ? _2525 : min(_2249, _2525));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _2103) + _2092;
        float _2746 = (_2741 * _2106) + _2096;
        float _2747 = (_2741 * _2109) + _2100;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_27_51_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_27_51_ladder_2;
        _2130 = frontier_phi_27_51_ladder_1;
        _2132 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1116, _1117, _1118), _2039);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2145 = (((_1141 * _1093) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1141 * _1095) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1141 * _1096) + _1142) * _1108) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2147, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2147, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2147, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_1068 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1108 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2203 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2207 = _2170 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_929, _930, _931));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_929, _930, _931));
    float _4466 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4477 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2187].x * _2193) * _2228) + ((cbLight._m0[_2197].x * _2203) * _2226);
    float _2236 = ((_2193 * cbLight._m0[_2187].y) * _2228) + ((_2203 * cbLight._m0[_2197].y) * _2226);
    float _2237 = ((_2193 * cbLight._m0[_2187].z) * _2228) + ((_2203 * cbLight._m0[_2197].z) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2243)
    {
        _2254 = _2235;
        _2256 = _2236;
        _2258 = _2237;
    }
    else
    {
        uint _2262 = _2170 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4488 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2281 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2235;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2236;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2237;
    }
    bool _2261 = _2241.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2261)
    {
        _2299 = _2254;
        _2301 = _2256;
        _2303 = _2258;
    }
    else
    {
        uint _2469 = _2170 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4504 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2488 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2299 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2254;
        _2301 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2256;
        _2303 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2258;
    }
    uint _2306 = _2170 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _932) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2170].x + _1013;
    float _2322 = cbLight._m0[_2170].y + _1014;
    float _2323 = cbLight._m0[_2170].z + _1015;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2170].xyz));
    float _4520 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _4531 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _2335 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2336 = dot(vec3(_929, _930, _931), vec3(_2328, _2329, _2330));
    float _4542 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2328, _2329, _2330));
    float _4553 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2356 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
    float _2357 = 0.959999978542327880859375 - _1090;
    float _2359 = 0.959999978542327880859375 - _1091;
    float _2360 = 0.959999978542327880859375 - _1092;
    float _2367 = 1.0 - _2320;
    float _2378 = (0.5 / (((_2335 * ((_2334 * _2367) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2367) + _2320) * _2334))) * _2334;
    float _4564 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2391 = _2170 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _932) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2207].x + _1013;
    float _2405 = cbLight._m0[_2207].y + _1014;
    float _2406 = cbLight._m0[_2207].z + _1015;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2207].xyz));
    float _4575 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2418 = dot(vec3(_929, _930, _931), vec3(_2411, _2412, _2413));
    float _4586 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2411, _2412, _2413));
    float _4597 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2444 = 1.0 - _2403;
    float _2454 = (0.5 / (((_2335 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2444) + _2403) * _2417))) * _2417;
    float _4608 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2466 = (((((_2437 * _2357) + _1093) * cbLight._m0[_2391].x) * _2456) * _2193) + (((((_2356 * _2357) + _1093) * cbLight._m0[_2306].x) * _2380) * _2203);
    float _2467 = (((((_2437 * _2359) + _1095) * cbLight._m0[_2391].y) * _2456) * _2193) + (((((_2356 * _2359) + _1095) * cbLight._m0[_2306].y) * _2380) * _2203);
    float _2468 = (((((_2437 * _2360) + _1096) * cbLight._m0[_2391].z) * _2456) * _2193) + (((((_2356 * _2360) + _1096) * cbLight._m0[_2306].z) * _2380) * _2203);
    float _2530;
    float _2532;
    float _2534;
    if (_2243)
    {
        _2530 = _2466;
        _2532 = _2467;
        _2534 = _2468;
    }
    else
    {
        uint _2536 = _2170 + 2u;
        uint _2540 = _2170 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _932) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _1013;
        float _2557 = cbLight._m0[_2536].y + _1014;
        float _2558 = cbLight._m0[_2536].z + _1015;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2536].xyz));
        float _4619 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2570 = dot(vec3(_929, _930, _931), vec3(_2563, _2564, _2565));
        float _4630 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4641 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2335 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2596) + _2555) * _2569))) * _2569;
        float _4652 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2530 = (((((_2589 * _2357) + _1093) * cbLight._m0[_2540].x) * _2608) * _2609) + _2466;
        _2532 = (((((_2589 * _2359) + _1095) * cbLight._m0[_2540].y) * _2608) * _2609) + _2467;
        _2534 = (((((_2589 * _2360) + _1096) * cbLight._m0[_2540].z) * _2608) * _2609) + _2468;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2261)
    {
        _2644 = _2530;
        _2646 = _2532;
        _2648 = _2534;
    }
    else
    {
        uint _2655 = _2170 + 3u;
        uint _2659 = _2170 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _932) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1013;
        float _2676 = cbLight._m0[_2655].y + _1014;
        float _2677 = cbLight._m0[_2655].z + _1015;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2655].xyz));
        float _4668 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2689 = dot(vec3(_929, _930, _931), vec3(_2682, _2683, _2684));
        float _4679 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4690 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2335 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2715) + _2674) * _2688))) * _2688;
        float _4701 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2644 = (((((_2708 * _2357) + _1093) * cbLight._m0[_2659].x) * _2727) * _2728) + _2530;
        _2646 = (((((_2708 * _2359) + _1095) * cbLight._m0[_2659].y) * _2727) * _2728) + _2532;
        _2648 = (((((_2708 * _2360) + _1096) * cbLight._m0[_2659].z) * _2727) * _2728) + _2534;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2168.y == 0u)
    {
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2803;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2803;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2803;
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _2819)));
        float _2840 = (log2(_2806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            uint _3110 = 0u;
            uint _3119;
            bool _3120;
            for (;;)
            {
                _3119 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                _3120 = _3119 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3120)
                {
                    frontier_phi_68_pred = _3104;
                    frontier_phi_68_pred_1 = _3109;
                    frontier_phi_68_pred_2 = _3108;
                    frontier_phi_68_pred_3 = _3107;
                    frontier_phi_68_pred_4 = _3106;
                    frontier_phi_68_pred_5 = _3105;
                }
                else
                {
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    uint _3255;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3119;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    for (;;)
                    {
                        uint _3259 = uint(findLSB(_3255)) + (_3110 << 5u);
                        uint _3256 = (_3255 + 4294967295u) & _3255;
                        uint _3261 = _3259 * 48u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3281 = (_3259 * 48u) + 4u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3300 = (_3259 * 48u) + 8u;
                        vec3 _3311 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x));
                        float _3315 = _3275.x - _2804;
                        float _3316 = _3275.y - _2805;
                        float _3317 = _3275.z - _2806;
                        float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                        float _3321 = inversesqrt(_3318);
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3325 = dot(vec3(_1049, _1052, _1055), vec3(_3322, _3323, _3324));
                        float _3330 = 1.0 - (_3318 * _3275.w);
                        float _4727 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3332 = sqrt(_3318) * _3294.w;
                        float _3335 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3325) + _3336;
                        float _3342 = _3332 * _3332;
                        float _3346 = ((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3331) / ((_3342 * 0.699999988079071044921875) + 1.0);
                        float _3350 = (-0.0) - _2804;
                        float _3351 = (-0.0) - _2805;
                        float _3352 = (-0.0) - _2806;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3367 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                        float _3368 = 1.0 - _1124;
                        float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                        float _3376 = _3375 * _3375;
                        float _3377 = _3376 * _3376;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3388 = dot(vec3(_1049, _1052, _1055), vec3(_3357, _3358, _3359));
                        float _4743 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3392 = dot(vec3(_1049, _1052, _1055), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                        float _4754 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                        float _3400 = _3335 * _3376;
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3325) + _3401;
                        float _4765 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3406 = 1.0 - _3376;
                        float _3416 = (0.5 / (((_3405 * ((_3391 * _3406) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3376) * _3391))) * _3405;
                        float _4776 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3427 = (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3399 * _3399) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125))) * _3331;
                        _3179 = (_3346 * _3294.x) + _3252;
                        _3180 = (_3346 * _3294.y) + _3253;
                        _3181 = (_3346 * _3294.z) + _3254;
                        _3176 = (_3427 * _3311.x) + _3249;
                        _3177 = (_3427 * _3311.y) + _3250;
                        _3178 = (_3427 * _3311.z) + _3251;
                        if (_3256 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3256;
                        }
                    }
                    frontier_phi_68_pred = _3176;
                    frontier_phi_68_pred_1 = _3181;
                    frontier_phi_68_pred_2 = _3180;
                    frontier_phi_68_pred_3 = _3179;
                    frontier_phi_68_pred_4 = _3178;
                    frontier_phi_68_pred_5 = _3177;
                }
                _2952 = frontier_phi_68_pred;
                _2962 = frontier_phi_68_pred_1;
                _2960 = frontier_phi_68_pred_2;
                _2958 = frontier_phi_68_pred_3;
                _2956 = frontier_phi_68_pred_4;
                _2954 = frontier_phi_68_pred_5;
                uint _3111 = _3110 + 1u;
                if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3104 = _2952;
                    _3105 = _2954;
                    _3106 = _2956;
                    _3107 = _2958;
                    _3108 = _2960;
                    _3109 = _2962;
                    _3110 = _3111;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((4294967295u << _2968) & _2850) == 0u)
        {
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
        }
        else
        {
            float _3097 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
            float _3098 = _3097 * _2804;
            float _3099 = _3097 * _2805;
            float _3100 = _3097 * _2806;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3232 = _2951;
                float _3233 = _2953;
                float _3234 = _2955;
                float _3235 = _2957;
                float _3236 = _2959;
                float _3237 = _2961;
                uint _3238 = _2968;
                uint _3247;
                bool _3248;
                for (;;)
                {
                    _3247 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                    _3248 = _3247 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3248)
                    {
                        frontier_phi_79_pred = _3237;
                        frontier_phi_79_pred_1 = _3236;
                        frontier_phi_79_pred_2 = _3235;
                        frontier_phi_79_pred_3 = _3234;
                        frontier_phi_79_pred_4 = _3233;
                        frontier_phi_79_pred_5 = _3232;
                    }
                    else
                    {
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        uint _3460 = _3247;
                        uint _3461;
                        vec4 _3486;
                        float _3487;
                        vec4 _3502;
                        vec3 _3514;
                        vec4 _3529;
                        vec4 _3544;
                        float _3590;
                        bool _3591;
                        for (;;)
                        {
                            uint _3471 = ((_3238 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3460));
                            _3461 = (_3460 + 4294967295u) & _3460;
                            uint _3473 = _3471 * 40u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3487 = _3486.w;
                            uint _3489 = (_3471 * 40u) + 4u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3471 * 40u) + 8u;
                            _3514 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x));
                            uint _3516 = (_3471 * 40u) + 16u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3471 * 40u) + 20u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3471 * 40u) + 24u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3565 = (_3471 * 40u) + 28u;
                            vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3590 = fma(_2806, _3578.z, fma(_2805, _3578.y, _3578.x * _2804)) + _3578.w;
                            _3591 = !((fma(_2806, _3559.z, fma(_2805, _3559.y, _3559.x * _2804)) + _3559.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3591)
                            {
                                float _3618 = _3486.x - _2804;
                                float _3619 = _3486.y - _2805;
                                float _3620 = _3486.z - _2806;
                                float _3621 = dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620));
                                float _3624 = inversesqrt(_3621);
                                float _3625 = _3624 * _3618;
                                float _3626 = _3624 * _3619;
                                float _3627 = _3624 * _3620;
                                float _3631 = 1.0 - (_3621 / (_3487 * _3487));
                                float _4787 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3636 = sqrt(_3621) * _3502.w;
                                float _3638 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                                float _3639 = _3638 * _3638;
                                float _3642 = ((1.0 - _3639) * dot(vec3(_3625, _3626, _3627), vec3(_1049, _1052, _1055))) + _3639;
                                float _3645 = _3636 * _3636;
                                float _3649 = (fma(_2806, _3529.z, fma(_2805, _3529.y, _3529.x * _2804)) + _3529.w) / _3590;
                                float _3650 = (fma(_2806, _3544.z, fma(_2805, _3544.y, _3544.x * _2804)) + _3544.w) / _3590;
                                float _3654 = 1.0 - dot(vec2(_3649, _3650), vec2(_3649, _3650));
                                float _4803 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3656 = _3655 * (((isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0))) * _3632) / ((_3645 * 0.699999988079071044921875) + 1.0));
                                float _3668 = exp2(log2(1.0 / ((_3645 * 3.5) + 5.0)) * 0.25);
                                float _3669 = 1.0 - _1124;
                                float _3676 = sqrt(1.0 - ((1.0 - (_3669 * _3669)) * (1.0 - (_3668 * _3668))));
                                float _3677 = _3676 * _3676;
                                float _3678 = _3677 * _3677;
                                float _3679 = _3625 - _3098;
                                float _3680 = _3626 - _3099;
                                float _3681 = _3627 - _3100;
                                float _3685 = inversesqrt(dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681)));
                                float _3689 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3098, (-0.0) - _3099, (-0.0) - _3100));
                                float _4814 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3692 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3693 = dot(vec3(_1049, _1052, _1055), vec3(_3685 * _3679, _3685 * _3680, _3685 * _3681));
                                float _4825 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3700 = ((_3696 * _3696) * (_3678 + (-1.0))) + 1.0;
                                float _3701 = _3638 * _3677;
                                float _3702 = _3701 * _3701;
                                float _3708 = ((1.0 - _3702) * dot(vec3(_1049, _1052, _1055), vec3(_3625, _3626, _3627))) + _3702;
                                float _4836 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3710 = 1.0 - _3677;
                                float _3720 = (0.5 / (((_3709 * ((_3692 * _3710) + _3677)) + 9.9999999392252902907785028219223e-09) + (((_3709 * _3710) + _3677) * _3692))) * _3709;
                                float _4847 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3730 = (_3655 * _3632) * (((_3678 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3700 * _3700) * ((_3645 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3656 * _3502.y;
                                frontier_phi_85_pred_1 = _3656 * _3502.x;
                                frontier_phi_85_pred_2 = _3730 * _3514.z;
                                frontier_phi_85_pred_3 = _3730 * _3514.y;
                                frontier_phi_85_pred_4 = _3730 * _3514.x;
                                frontier_phi_85_pred_5 = _3656 * _3502.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3738 = frontier_phi_85_pred;
                            _3737 = frontier_phi_85_pred_1;
                            _3736 = frontier_phi_85_pred_2;
                            _3735 = frontier_phi_85_pred_3;
                            _3734 = frontier_phi_85_pred_4;
                            _3739 = frontier_phi_85_pred_5;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            if (_3461 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3461;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3446;
                        frontier_phi_79_pred_1 = _3445;
                        frontier_phi_79_pred_2 = _3444;
                        frontier_phi_79_pred_3 = _3443;
                        frontier_phi_79_pred_4 = _3442;
                        frontier_phi_79_pred_5 = _3441;
                    }
                    _3083 = frontier_phi_79_pred;
                    _3081 = frontier_phi_79_pred_1;
                    _3079 = frontier_phi_79_pred_2;
                    _3077 = frontier_phi_79_pred_3;
                    _3075 = frontier_phi_79_pred_4;
                    _3073 = frontier_phi_79_pred_5;
                    uint _3239 = _3238 + 1u;
                    if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3232 = _3073;
                        _3233 = _3075;
                        _3234 = _3077;
                        _3235 = _3079;
                        _3236 = _3081;
                        _3237 = _3083;
                        _3238 = _3239;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3077;
                frontier_phi_60_61_ladder_1 = _3083;
                frontier_phi_60_61_ladder_2 = _3081;
                frontier_phi_60_61_ladder_3 = _3079;
                frontier_phi_60_61_ladder_4 = _3075;
                frontier_phi_60_61_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_60_61_ladder = _2955;
                frontier_phi_60_61_ladder_1 = _2961;
                frontier_phi_60_61_ladder_2 = _2959;
                frontier_phi_60_61_ladder_3 = _2957;
                frontier_phi_60_61_ladder_4 = _2953;
                frontier_phi_60_61_ladder_5 = _2951;
            }
            _3072 = frontier_phi_60_61_ladder_5;
            _3074 = frontier_phi_60_61_ladder_4;
            _3076 = frontier_phi_60_61_ladder;
            _3078 = frontier_phi_60_61_ladder_3;
            _3080 = frontier_phi_60_61_ladder_2;
            _3082 = frontier_phi_60_61_ladder_1;
        }
        float _3087 = isnan(1.0) ? _1108 : (isnan(_1108) ? 1.0 : min(_1108, 1.0));
        _2863 = (_3087 * _3078) + _2299;
        _2865 = (_3087 * _3080) + _2301;
        _2867 = (_3087 * _3082) + _2303;
        _2869 = ((_3072 * _1093) * _3087) + _2644;
        _2871 = ((_3074 * _1095) * _3087) + _2646;
        _2873 = ((_3076 * _1096) * _3087) + _2648;
    }
    else
    {
        _2863 = _2299;
        _2865 = _2301;
        _2867 = _2303;
        _2869 = _2644;
        _2871 = _2646;
        _2873 = _2648;
    }
    float _4863 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4874 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4885 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2890 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2863 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1108))) + ((_2869 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2865 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1108))) + ((_2871 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2867 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1108))) + ((_2873 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    uint _2893 = _1068 + 6u;
    float _2901 = _1030 / cbSceneParam._m0[86u].x;
    float _2902 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _956 : (isnan(_956) ? cbSceneParam._m0[77u].w : min(_956, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_956 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_956) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _956 : min(cbSceneParam._m0[80u].w, _956));
        float _2977 = _2976 / _956;
        float _2988 = _2977 * _1006;
        float _2989 = _1007 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2992 = _2977 * _1008;
        float _2994 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2995 = _2994 + cbSceneParam._m0[79u].w;
        float _2996 = cbSceneParam._m0[79u].w - _2989;
        float _3002 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2992 * _2992));
        float _3005 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3002;
        float _3010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3189;
        if (abs((_2990 - _2994) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3189 = ((((_2995 > 0.0) ? exp2(_3010 * _2995) : (2.0 - exp2(_3012 * _2995))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3005;
        }
        else
        {
            float _3133 = 1.0 / cbSceneParam._m0[80u].x;
            float _3134 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : max(_2995, _2996));
            float _3135 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : min(_2995, _2996));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            _3189 = ((abs(_3002 / _2990) * cbSceneParam._m0[80u].y) * ((((_3144 - _3145) * 2.0) - ((exp2(_3010 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0)))) - exp2(_3010 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))))) * _3133)) - ((exp2(_3012 * _3144) - exp2(_3012 * _3145)) * _3133))) + (_3005 * cbSceneParam._m0[80u].z);
        }
        vec4 _3191 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3200 = exp2((_3189 * (-1.44269502162933349609375)) * (1.0 - _3191.w));
        float _3201 = log2(_3200);
        float _3217 = log2(_2921);
        _3014 = (exp2(_3217 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].x)) * _3191.x) / cbSceneParam._m0[78u].x)) + _2918;
        _3016 = (exp2(_3217 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].y)) * _3191.y) / cbSceneParam._m0[78u].y)) + _2919;
        _3018 = (exp2(_3217 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].z)) * _3191.z) / cbSceneParam._m0[78u].z)) + _2920;
        _3020 = _3200 * _2921;
    }
    else
    {
        _3014 = _2918;
        _3016 = _2919;
        _3018 = _2920;
        _3020 = _2921;
    }
    bool _3227;
    vec4 _3030;
    vec4 _3052;
    float _3054;
    float _3058;
    float _3059;
    float _3060;
    float _3061;
    bool _3071;
    for (;;)
    {
        _3030 = cbMatDynParam._m0[0u];
        float _3032 = roundEven(_3030.y);
        bool _3033 = _3032 == 3.0;
        float _3034 = log2(_3020);
        float _3041 = exp2(_3034 * cbSceneParam._m0[78u].x) * _2890;
        float _3042 = exp2(_3034 * cbSceneParam._m0[78u].y) * _2891;
        float _3043 = exp2(_3034 * cbSceneParam._m0[78u].z) * _2892;
        float _3050 = _1019 + (-0.5);
        _3052 = cbMtdParam._m0[1u];
        _3054 = _3052.y * _3050;
        float _3057 = (_3032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3058 = _3057 * (_3033 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3014)));
        _3059 = _3057 * (_3033 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3016)));
        _3060 = _3057 * (_3033 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3018)));
        _3061 = _3050 * 0.999000012874603271484375;
        _3071 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3071)
        {
            if ((cbInstanceData._m0[_1068 + 7u].x + _3061) < 0.5)
            {
                _3227 = true;
                break;
            }
        }
        uint _3168 = _1069 + uint(_3030.w);
        if ((cbInstanceData._m0[_3168].w < 1.0) && ((cbInstanceData._m0[_3168].w + _3061) < 0.5))
        {
            _3227 = true;
            break;
        }
        if ((_3054 + 1.0) < _3052.x)
        {
            _3227 = true;
            break;
        }
        _3227 = false;
        break;
    }
    float _3432;
    if (_3227)
    {
        discard_state = true;
        _3432 = 0.0;
    }
    else
    {
        _3432 = cbInstanceData._m0[_2893].w;
    }
    SV_Target.x = _3058;
    SV_Target.y = _3059;
    SV_Target.z = _3060;
    SV_Target.w = _3432;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
    discard_exit();
}


