#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1430;
float _3807;
float _3808;
float _3809;
float _3810;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _297 = exp2(log2((1.0 - _286) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _320 = log2(0.0);
    float _322 = exp2(_320 * cbMtdParam._m0[23u].x);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    float _333 = exp2(log2(cbMtdParam._m0[23u].y * _286) * cbMtdParam._m0[22u].y);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _356 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _358 = isnan(4.0) ? _357 : (isnan(_357) ? 4.0 : min(_357, 4.0));
    float _371 = floor(_358);
    vec4 _374 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _371));
    vec4 _398 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _409 = cbMtdParam._m0[9u].x * _398.x;
    float _410 = cbMtdParam._m0[9u].y * _398.y;
    float _411 = cbMtdParam._m0[9u].z * _398.z;
    float _418 = (((cbMtdParam._m0[10u].x * _374.x) - _409) * _335) + _409;
    float _419 = (((cbMtdParam._m0[10u].y * _374.y) - _410) * _335) + _410;
    float _420 = (((cbMtdParam._m0[10u].z * _374.z) - _411) * _335) + _411;
    float _426 = exp2(log2(_282.w) * cbMtdParam._m0[23u].w);
    vec4 _439 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _458 = (((cbMtdParam._m0[16u].x * _439.x) - _418) * _426) + _418;
    float _459 = (((cbMtdParam._m0[16u].y * _439.y) - _419) * _426) + _419;
    float _460 = (((cbMtdParam._m0[16u].z * _439.z) - _420) * _426) + _420;
    vec4 _473 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _493 = (((cbMtdParam._m0[19u].x * _473.x) - _458) * _324) + _458;
    float _494 = (((cbMtdParam._m0[19u].y * _473.y) - _459) * _324) + _459;
    float _495 = (((cbMtdParam._m0[19u].z * _473.z) - _460) * _324) + _460;
    vec4 _508 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _533 = (_312.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _508.x) - _493) * _299) + _493);
    float _535 = (_312.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _508.y) - _494) * _299) + _494);
    float _537 = (_312.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _508.z) - _495) * _299) + _495);
    float _541 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _550 = (_541 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _541))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3859 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _558 = ((cbMtdParam._m0[21u].x - _533) * _551) + _533;
    float _559 = ((cbMtdParam._m0[21u].y - _535) * _551) + _535;
    float _560 = ((cbMtdParam._m0[21u].z - _537) * _551) + _537;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _602 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    uint _604 = uint(int(isnan(4.0) ? _602 : (isnan(_602) ? 4.0 : min(_602, 4.0))));
    float _611 = ((_194[_604] - cbMtdParam._m0[22u].z) * _335) + cbMtdParam._m0[22u].z;
    float _614 = ((cbMtdParam._m0[22u].w - _611) * _426) + _611;
    float _617 = ((cbMtdParam._m0[25u].y - _614) * _324) + _614;
    float _620 = ((cbMtdParam._m0[26u].y - _617) * _299) + _617;
    float _622 = _620 - (_620 * _541);
    vec4 _638 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _371));
    vec4 _656 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _664 = cbMtdParam._m0[22u].x + _656.z;
    float _667 = (((_638.z + _193[_604]) - _664) * _335) + _664;
    vec4 _680 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _691 = (((_680.z - _667) + cbMtdParam._m0[28u].z) * _426) + _667;
    float _697 = ((((_286 * 2.0) * _691) - _691) * cbMtdParam._m0[24u].w) + _691;
    vec4 _710 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _721 = (((cbMtdParam._m0[23u].z + _710.z) - _697) * _324) + _697;
    vec4 _734 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _745 = (((_734.z - _721) + cbMtdParam._m0[26u].z) * _299) + _721;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _775 = ((cbMtdParam._m0[27u].z * _541) * ((_760.z * cbMtdParam._m0[27u].y) - _745)) + _745;
    float _787 = ((_638.x - _658) * _335) + _658;
    float _788 = ((_638.y - _659) * _335) + _659;
    float _793 = ((_680.x - _787) * _426) + _787;
    float _794 = ((_680.y - _788) * _426) + _788;
    float _799 = ((_710.x - _793) * _324) + _793;
    float _800 = ((_710.y - _794) * _324) + _794;
    float _809 = ((((_734.x - _799) * _299) + _799) * 2.0) + (-1.0);
    float _810 = ((((_734.y - _800) * _299) + _800) * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3880 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _816 = sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))));
    float _826 = ((cbMtdParam._m0[25u].z * ((_282.x * 2.0) + (-1.0))) + _809) + ((((_760.x * 2.0) + (-1.0)) * _541) * cbMtdParam._m0[27u].x);
    float _827 = ((cbMtdParam._m0[25u].z * ((_282.y * 2.0) + (-1.0))) + _810) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_760.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _829 = gl_FragCoord.x * 0.125;
    float _831 = gl_FragCoord.y * 0.125;
    float _841 = fma(_816, _229 * NORMAL.x, fma(_827, _236 * TANGENT.x, (_222 * _214) * _826));
    float _844 = fma(_816, _229 * NORMAL.y, fma(_827, _236 * TANGENT.y, (_222 * _215) * _826));
    float _847 = fma(_816, _229 * NORMAL.z, fma(_827, _236 * TANGENT.z, (_222 * _216) * _826));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _3891 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _855 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3913 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3924 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3935 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _859 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_829, _831)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _879 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _929 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _919);
    float _930 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _919);
    float _931 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _919);
    float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
    float _936 = _929 * _935;
    float _937 = _930 * _935;
    float _938 = _931 * _935;
    vec4 _940 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_829, _831));
    float _942 = _940.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_929 * _929) + (_930 * _930)) + (_931 * _931));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _3946 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _3957 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) - _1119)) + _1119) < ((_942 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _975 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _978 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _991 = uint(roundEven(NORMAL.w)) * 13u;
    uint _992 = _991 + 9u;
    uint _993 = _992 + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_993].z;
    float _3968 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1005 = 1.0 - _859;
    float _1006 = _1002 * _1005;
    float _1007 = _1003 * _1005;
    float _1008 = _1004 * _1005;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _859;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _859;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _859;
    float _1016 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1031 = _1028.x * TEXCOORD_3.w;
    float _1032 = dot(vec3(_852, _853, _854), vec3(_936, _937, _938));
    float _1035 = _1032 * 2.0;
    float _1039 = (_1035 * _852) - _936;
    float _1040 = (_1035 * _853) - _937;
    float _1041 = (_1035 * _854) - _938;
    float _1045 = abs(dot(vec3(_936, _937, _938), vec3(_852, _853, _854)));
    float _4001 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1047 = sqrt(_855);
    float _1058 = exp2((_1047 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1047 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1047 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1047;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1429;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1158 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1162 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1187 = _1093 + _852;
        float _1188 = _1097 + _853;
        float _1189 = _1101 + _854;
        float _1199 = fma(_1189, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1187)) - _1154;
        float _1200 = fma(_1189, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1187)) - _1158;
        float _1201 = fma(_1189, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1187)) - _1162;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1257 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1223.x + (-0.5));
        float _1259 = _1257 * (_1223.y + (-0.5));
        float _1260 = _1257 * (_1223.z + (-0.5));
        float _1267 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1230.x + (-0.5));
        float _1269 = _1267 * (_1230.y + (-0.5));
        float _1270 = _1267 * (_1230.z + (-0.5));
        float _1277 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1237.x + (-0.5));
        float _1279 = _1277 * (_1237.y + (-0.5));
        float _1280 = _1277 * (_1237.z + (-0.5));
        float _1287 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1244.x + (-0.5));
        float _1289 = _1287 * (_1244.y + (-0.5));
        float _1290 = _1287 * (_1244.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1311 = (dot(vec3(_852, _853, _854), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1321 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4049 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1323 + 1.0))) + _1328) * _1291;
        float _1338 = _1259 * 0.5;
        float _1339 = _1269 * 0.5;
        float _1340 = _1279 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_852, _853, _854), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4082 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1365 + 1.0))) + _1370) * _1292;
        float _1380 = _1260 * 0.5;
        float _1381 = _1270 * 0.5;
        float _1382 = _1280 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_852, _853, _854), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4115 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1407 + 1.0))) + _1412) * _1293;
        _1429 = _1260;
        _1431 = _1259;
        _1432 = _1258;
        _1433 = _1270;
        _1434 = _1269;
        _1435 = _1268;
        _1436 = _1280;
        _1437 = _1279;
        _1438 = _1278;
        _1439 = _1293;
        _1440 = _1292;
        _1441 = _1291;
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1430;
        _1431 = _1430;
        _1432 = _1430;
        _1433 = _1430;
        _1434 = _1430;
        _1435 = _1430;
        _1436 = _1430;
        _1437 = _1430;
        _1438 = _1430;
        _1439 = _1430;
        _1440 = _1430;
        _1441 = _1430;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1471 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1475 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1498 = _1093 + _852;
        float _1499 = _1097 + _853;
        float _1500 = _1101 + _854;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_852, _853, _854), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4178 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_852, _853, _854), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4211 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_852, _853, _854), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4244 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1430;
        _1737 = _1430;
        _1738 = _1430;
        _1739 = _1430;
        _1740 = _1430;
        _1741 = _1430;
        _1742 = _1430;
        _1743 = _1430;
        _1744 = _1430;
        _1745 = _1430;
        _1746 = _1430;
        _1747 = _1430;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1442)) + _1442;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1443)) + _1443;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1039 * 0.5;
    float _1805 = _1040 * 0.5;
    float _1806 = _1041 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1429, _1433, _1436, _1439));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1041, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039));
        float _1934 = fma(_1041, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039));
        float _1937 = fma(_1041, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1965 = frontier_phi_19_17_ladder;
        }
        float _2168;
        if (_1934 > 0.0)
        {
            _2168 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2168 = frontier_phi_28_24_ladder;
        }
        float _2422;
        if (_1937 > 0.0)
        {
            _2422 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2422 = frontier_phi_40_35_ladder;
        }
        float _2424 = isnan(_2168) ? _1965 : (isnan(_1965) ? _2168 : min(_1965, _2168));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1931) + _1920;
        float _2430 = (_2425 * _1934) + _1924;
        float _2431 = (_2425 * _1937) + _1928;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_18_40_ladder = _2559.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2559.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2559.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_18_40_ladder_2;
        _1955 = frontier_phi_18_40_ladder_1;
        _1957 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1039, _1040, _1041), _1873);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1041, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039));
        float _2030 = fma(_1041, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039));
        float _2033 = fma(_1041, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039));
        float _2173;
        if (_2027 > 0.0)
        {
            _2173 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2173 = frontier_phi_30_26_ladder;
        }
        float _2449;
        if (_2030 > 0.0)
        {
            _2449 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2449 = frontier_phi_42_37_ladder;
        }
        float _2662;
        if (_2033 > 0.0)
        {
            _2662 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2662 = frontier_phi_51_48_ladder;
        }
        float _2664 = isnan(_2449) ? _2173 : (isnan(_2173) ? _2449 : min(_2173, _2449));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2027) + _2016;
        float _2670 = (_2665 * _2030) + _2020;
        float _2671 = (_2665 * _2033) + _2024;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_27_51_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_27_51_ladder_2;
        _2054 = frontier_phi_27_51_ladder_1;
        _2056 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1039, _1040, _1041), _1962);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2069 = (((_1064 * _1016) + _1065) * _1031) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2071 = (((_1064 * _1018) + _1065) * _1031) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2073 = (((_1064 * _1019) + _1065) * _1031) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_991 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _1031 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2127 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2131 = _2094 | 1u;
    float _2142 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_852, _853, _854));
    float _2145 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_852, _853, _854));
    float _4380 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _4391 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2150 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2152 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2159 = ((cbLight._m0[_2111].x * _2117) * _2152) + ((cbLight._m0[_2121].x * _2127) * _2150);
    float _2160 = ((_2117 * cbLight._m0[_2111].y) * _2152) + ((_2127 * cbLight._m0[_2121].y) * _2150);
    float _2161 = ((_2117 * cbLight._m0[_2111].z) * _2152) + ((_2127 * cbLight._m0[_2121].z) * _2150);
    uvec4 _2165 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2167 = _2165.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2167)
    {
        _2178 = _2159;
        _2180 = _2160;
        _2182 = _2161;
    }
    else
    {
        uint _2186 = _2094 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4402 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2205 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2159;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2160;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2161;
    }
    bool _2185 = _2165.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2185)
    {
        _2223 = _2178;
        _2225 = _2180;
        _2227 = _2182;
    }
    else
    {
        uint _2393 = _2094 + 7u;
        float _2409 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4418 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2412 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2223 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2178;
        _2225 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2180;
        _2227 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2182;
    }
    uint _2230 = _2094 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _855) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2094].x + _936;
    float _2246 = cbLight._m0[_2094].y + _937;
    float _2247 = cbLight._m0[_2094].z + _938;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2094].xyz));
    float _4434 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2259 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2260 = dot(vec3(_852, _853, _854), vec3(_2252, _2253, _2254));
    float _4456 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2252, _2253, _2254));
    float _4467 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2281 = 0.959999978542327880859375 - _1013;
    float _2283 = 0.959999978542327880859375 - _1014;
    float _2284 = 0.959999978542327880859375 - _1015;
    float _2291 = 1.0 - _2244;
    float _2302 = (0.5 / (((_2259 * ((_2258 * _2291) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2291) + _2244) * _2258))) * _2258;
    float _4478 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2315 = _2094 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _855) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2131].x + _936;
    float _2329 = cbLight._m0[_2131].y + _937;
    float _2330 = cbLight._m0[_2131].z + _938;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2131].xyz));
    float _4489 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2342 = dot(vec3(_852, _853, _854), vec3(_2335, _2336, _2337));
    float _4500 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2335, _2336, _2337));
    float _4511 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2368 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2259 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2368) + _2327) * _2341))) * _2341;
    float _4522 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2390 = (((((_2361 * _2281) + _1016) * cbLight._m0[_2315].x) * _2380) * _2117) + (((((_2280 * _2281) + _1016) * cbLight._m0[_2230].x) * _2304) * _2127);
    float _2391 = (((((_2361 * _2283) + _1018) * cbLight._m0[_2315].y) * _2380) * _2117) + (((((_2280 * _2283) + _1018) * cbLight._m0[_2230].y) * _2304) * _2127);
    float _2392 = (((((_2361 * _2284) + _1019) * cbLight._m0[_2315].z) * _2380) * _2117) + (((((_2280 * _2284) + _1019) * cbLight._m0[_2230].z) * _2304) * _2127);
    float _2454;
    float _2456;
    float _2458;
    if (_2167)
    {
        _2454 = _2390;
        _2456 = _2391;
        _2458 = _2392;
    }
    else
    {
        uint _2460 = _2094 + 2u;
        uint _2464 = _2094 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _855) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _936;
        float _2481 = cbLight._m0[_2460].y + _937;
        float _2482 = cbLight._m0[_2460].z + _938;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2460].xyz));
        float _4533 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2494 = dot(vec3(_852, _853, _854), vec3(_2487, _2488, _2489));
        float _4544 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4555 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2259 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2520) + _2479) * _2493))) * _2493;
        float _4566 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2454 = (((((_2513 * _2281) + _1016) * cbLight._m0[_2464].x) * _2532) * _2533) + _2390;
        _2456 = (((((_2513 * _2283) + _1018) * cbLight._m0[_2464].y) * _2532) * _2533) + _2391;
        _2458 = (((((_2513 * _2284) + _1019) * cbLight._m0[_2464].z) * _2532) * _2533) + _2392;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2185)
    {
        _2568 = _2454;
        _2570 = _2456;
        _2572 = _2458;
    }
    else
    {
        uint _2579 = _2094 + 3u;
        uint _2583 = _2094 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _855) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _936;
        float _2600 = cbLight._m0[_2579].y + _937;
        float _2601 = cbLight._m0[_2579].z + _938;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2579].xyz));
        float _4582 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2613 = dot(vec3(_852, _853, _854), vec3(_2606, _2607, _2608));
        float _4593 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4604 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2259 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2639) + _2598) * _2612))) * _2612;
        float _4615 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2568 = (((((_2632 * _2281) + _1016) * cbLight._m0[_2583].x) * _2651) * _2652) + _2454;
        _2570 = (((((_2632 * _2283) + _1018) * cbLight._m0[_2583].y) * _2651) * _2652) + _2456;
        _2572 = (((((_2632 * _2284) + _1019) * cbLight._m0[_2583].z) * _2651) * _2652) + _2458;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2092.y == 0u)
    {
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2727;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2727;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2727;
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _2743)));
        float _2764 = (log2(_2730 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3044)
                {
                    frontier_phi_68_pred = _3028;
                    frontier_phi_68_pred_1 = _3033;
                    frontier_phi_68_pred_2 = _3032;
                    frontier_phi_68_pred_3 = _3031;
                    frontier_phi_68_pred_4 = _3030;
                    frontier_phi_68_pred_5 = _3029;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3043;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3034 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _2728;
                        float _3240 = _3199.y - _2729;
                        float _3241 = _3199.z - _2730;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_972, _975, _978), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4641 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _2728;
                        float _3275 = (-0.0) - _2729;
                        float _3276 = (-0.0) - _2730;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3291 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _1047;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_972, _975, _978), vec3(_3281, _3282, _3283));
                        float _4657 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3316 = dot(vec3(_972, _975, _978), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4668 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3259 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3249) + _3325;
                        float _4679 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4690 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3323 * _3323) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3103 = (_3270 * _3218.x) + _3176;
                        _3104 = (_3270 * _3218.y) + _3177;
                        _3105 = (_3270 * _3218.z) + _3178;
                        _3100 = (_3351 * _3235.x) + _3173;
                        _3101 = (_3351 * _3235.y) + _3174;
                        _3102 = (_3351 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_68_pred = _3100;
                    frontier_phi_68_pred_1 = _3105;
                    frontier_phi_68_pred_2 = _3104;
                    frontier_phi_68_pred_3 = _3103;
                    frontier_phi_68_pred_4 = _3102;
                    frontier_phi_68_pred_5 = _3101;
                }
                _2876 = frontier_phi_68_pred;
                _2886 = frontier_phi_68_pred_1;
                _2884 = frontier_phi_68_pred_2;
                _2882 = frontier_phi_68_pred_3;
                _2880 = frontier_phi_68_pred_4;
                _2878 = frontier_phi_68_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2876;
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2892) & _2774) == 0u)
        {
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
            float _3022 = _3021 * _2728;
            float _3023 = _3021 * _2729;
            float _3024 = _3021 * _2730;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3156 = _2875;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                uint _3162 = _2892;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3172)
                    {
                        frontier_phi_79_pred = _3161;
                        frontier_phi_79_pred_1 = _3160;
                        frontier_phi_79_pred_2 = _3159;
                        frontier_phi_79_pred_3 = _3158;
                        frontier_phi_79_pred_4 = _3157;
                        frontier_phi_79_pred_5 = _3156;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        uint _3384 = _3171;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3468;
                        float _3514;
                        bool _3515;
                        for (;;)
                        {
                            uint _3395 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3395 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3395 * 40u) + 24u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3489 = (_3395 * 40u) + 28u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3514 = fma(_2730, _3502.z, fma(_2729, _3502.y, _3502.x * _2728)) + _3502.w;
                            _3515 = !((fma(_2730, _3483.z, fma(_2729, _3483.y, _3483.x * _2728)) + _3483.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3515)
                            {
                                float _3542 = _3410.x - _2728;
                                float _3543 = _3410.y - _2729;
                                float _3544 = _3410.z - _2730;
                                float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                                float _3548 = inversesqrt(_3545);
                                float _3549 = _3548 * _3542;
                                float _3550 = _3548 * _3543;
                                float _3551 = _3548 * _3544;
                                float _3555 = 1.0 - (_3545 / (_3411 * _3411));
                                float _4701 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3560 = sqrt(_3545) * _3426.w;
                                float _3562 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                                float _3563 = _3562 * _3562;
                                float _3566 = ((1.0 - _3563) * dot(vec3(_3549, _3550, _3551), vec3(_972, _975, _978))) + _3563;
                                float _3569 = _3560 * _3560;
                                float _3573 = (fma(_2730, _3453.z, fma(_2729, _3453.y, _3453.x * _2728)) + _3453.w) / _3514;
                                float _3574 = (fma(_2730, _3468.z, fma(_2729, _3468.y, _3468.x * _2728)) + _3468.w) / _3514;
                                float _3578 = 1.0 - dot(vec2(_3573, _3574), vec2(_3573, _3574));
                                float _4717 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3580 = _3579 * (((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3556) / ((_3569 * 0.699999988079071044921875) + 1.0));
                                float _3592 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                                float _3593 = 1.0 - _1047;
                                float _3600 = sqrt(1.0 - ((1.0 - (_3593 * _3593)) * (1.0 - (_3592 * _3592))));
                                float _3601 = _3600 * _3600;
                                float _3602 = _3601 * _3601;
                                float _3603 = _3549 - _3022;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                                float _3613 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4728 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3617 = dot(vec3(_972, _975, _978), vec3(_3609 * _3603, _3609 * _3604, _3609 * _3605));
                                float _4739 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3624 = ((_3620 * _3620) * (_3602 + (-1.0))) + 1.0;
                                float _3625 = _3562 * _3601;
                                float _3626 = _3625 * _3625;
                                float _3632 = ((1.0 - _3626) * dot(vec3(_972, _975, _978), vec3(_3549, _3550, _3551))) + _3626;
                                float _4750 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3634 = 1.0 - _3601;
                                float _3644 = (0.5 / (((_3633 * ((_3616 * _3634) + _3601)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3601) * _3616))) * _3633;
                                float _4761 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3654 = (_3579 * _3556) * (((_3602 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3624 * _3624) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3580 * _3426.y;
                                frontier_phi_85_pred_1 = _3580 * _3426.x;
                                frontier_phi_85_pred_2 = _3654 * _3438.z;
                                frontier_phi_85_pred_3 = _3654 * _3438.y;
                                frontier_phi_85_pred_4 = _3654 * _3438.x;
                                frontier_phi_85_pred_5 = _3580 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3662 = frontier_phi_85_pred;
                            _3661 = frontier_phi_85_pred_1;
                            _3660 = frontier_phi_85_pred_2;
                            _3659 = frontier_phi_85_pred_3;
                            _3658 = frontier_phi_85_pred_4;
                            _3663 = frontier_phi_85_pred_5;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3370;
                        frontier_phi_79_pred_1 = _3369;
                        frontier_phi_79_pred_2 = _3368;
                        frontier_phi_79_pred_3 = _3367;
                        frontier_phi_79_pred_4 = _3366;
                        frontier_phi_79_pred_5 = _3365;
                    }
                    _3007 = frontier_phi_79_pred;
                    _3005 = frontier_phi_79_pred_1;
                    _3003 = frontier_phi_79_pred_2;
                    _3001 = frontier_phi_79_pred_3;
                    _2999 = frontier_phi_79_pred_4;
                    _2997 = frontier_phi_79_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _2997;
                        _3157 = _2999;
                        _3158 = _3001;
                        _3159 = _3003;
                        _3160 = _3005;
                        _3161 = _3007;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3001;
                frontier_phi_60_61_ladder_1 = _3007;
                frontier_phi_60_61_ladder_2 = _3005;
                frontier_phi_60_61_ladder_3 = _3003;
                frontier_phi_60_61_ladder_4 = _2999;
                frontier_phi_60_61_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_60_61_ladder = _2879;
                frontier_phi_60_61_ladder_1 = _2885;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2877;
                frontier_phi_60_61_ladder_5 = _2875;
            }
            _2996 = frontier_phi_60_61_ladder_5;
            _2998 = frontier_phi_60_61_ladder_4;
            _3000 = frontier_phi_60_61_ladder;
            _3002 = frontier_phi_60_61_ladder_3;
            _3004 = frontier_phi_60_61_ladder_2;
            _3006 = frontier_phi_60_61_ladder_1;
        }
        float _3011 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _2787 = (_3011 * _3002) + _2223;
        _2789 = (_3011 * _3004) + _2225;
        _2791 = (_3011 * _3006) + _2227;
        _2793 = ((_2996 * _1016) * _3011) + _2568;
        _2795 = ((_2998 * _1018) * _3011) + _2570;
        _2797 = ((_3000 * _1019) * _3011) + _2572;
    }
    else
    {
        _2787 = _2223;
        _2789 = _2225;
        _2791 = _2227;
        _2793 = _2568;
        _2795 = _2570;
        _2797 = _2572;
    }
    float _4777 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4788 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4799 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2814 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2787 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1031))) + ((_2793 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2789 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1031))) + ((_2795 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2791 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1031))) + ((_2797 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1862)) * cbPerFrame._m0[3u].x);
    uint _2817 = _991 + 6u;
    float _2825 = _953 / cbSceneParam._m0[86u].x;
    float _2826 = _954 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _879 : (isnan(_879) ? cbSceneParam._m0[77u].w : min(_879, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_879 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_879) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _879 : min(cbSceneParam._m0[80u].w, _879));
        float _2901 = _2900 / _879;
        float _2912 = _2901 * _929;
        float _2913 = _930 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _931;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3059 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3113 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2936 * _3068) - exp2(_2936 * _3069)) * _3057))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2845);
        _2938 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2940 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2942 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2944 = _3124 * _2845;
    }
    else
    {
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
        _2944 = _2845;
    }
    bool _3151;
    vec4 _2954;
    vec4 _2976;
    float _2978;
    float _2982;
    float _2983;
    float _2984;
    float _2985;
    bool _2995;
    for (;;)
    {
        _2954 = cbMatDynParam._m0[0u];
        float _2956 = roundEven(_2954.y);
        bool _2957 = _2956 == 3.0;
        float _2958 = log2(_2944);
        float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * _2814;
        float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * _2815;
        float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * _2816;
        float _2974 = _942 + (-0.5);
        _2976 = cbMtdParam._m0[1u];
        _2978 = _2976.y * _2974;
        float _2981 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2982 = _2981 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
        _2983 = _2981 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
        _2984 = _2981 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
        _2985 = _2974 * 0.999000012874603271484375;
        _2995 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2995)
        {
            if ((cbInstanceData._m0[_991 + 7u].x + _2985) < 0.5)
            {
                _3151 = true;
                break;
            }
        }
        uint _3092 = _992 + uint(_2954.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2985) < 0.5))
        {
            _3151 = true;
            break;
        }
        if ((_2978 + 1.0) < _2976.x)
        {
            _3151 = true;
            break;
        }
        _3151 = false;
        break;
    }
    float _3356;
    if (_3151)
    {
        discard_state = true;
        _3356 = 0.0;
    }
    else
    {
        _3356 = cbInstanceData._m0[_2817].w;
    }
    SV_Target.x = _2982;
    SV_Target.y = _2983;
    SV_Target.z = _2984;
    SV_Target.w = _3356;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
    discard_exit();
}


