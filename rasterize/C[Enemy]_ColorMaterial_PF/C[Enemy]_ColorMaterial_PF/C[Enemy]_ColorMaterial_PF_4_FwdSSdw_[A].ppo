#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _3909;
float _3910;
float _3911;
float _3912;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _290 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _305 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _321 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _333 = exp2(log2(_321.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _346 = isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0));
    vec4 _358 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _361 = _358.y;
    float _364 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _368 = roundEven(5.0 - _364);
    float _369 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _370 = isnan(4.0) ? _369 : (isnan(_369) ? 4.0 : min(_369, 4.0));
    float _383 = floor(_370);
    vec4 _386 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _383));
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[17u].x;
    _201[0u] = cbMtdParam._m0[17u].y;
    _202[0u] = cbMtdParam._m0[17u].z;
    _200[1u] = cbMtdParam._m0[15u].x;
    _201[1u] = cbMtdParam._m0[15u].y;
    _202[1u] = cbMtdParam._m0[15u].z;
    _200[2u] = cbMtdParam._m0[14u].x;
    _201[2u] = cbMtdParam._m0[14u].y;
    _202[2u] = cbMtdParam._m0[14u].z;
    _200[3u] = cbMtdParam._m0[13u].x;
    _201[3u] = cbMtdParam._m0[13u].y;
    _202[3u] = cbMtdParam._m0[13u].z;
    _200[4u] = cbMtdParam._m0[12u].x;
    _201[4u] = cbMtdParam._m0[12u].y;
    _202[4u] = cbMtdParam._m0[12u].z;
    _200[5u] = cbMtdParam._m0[18u].x;
    _201[5u] = cbMtdParam._m0[18u].y;
    _202[5u] = cbMtdParam._m0[18u].z;
    float _450 = roundEven(_364);
    float _451 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _453 = uint(int(isnan(5.0) ? _451 : (isnan(_451) ? 5.0 : min(_451, 5.0))));
    vec4 _483 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _494 = cbMtdParam._m0[9u].x * _483.x;
    float _495 = cbMtdParam._m0[9u].y * _483.y;
    float _496 = cbMtdParam._m0[9u].z * _483.z;
    float _503 = ((((((_200[_453] - cbMtdParam._m0[10u].x) * _361) + cbMtdParam._m0[10u].x) * _386.x) - _494) * _346) + _494;
    float _504 = ((((((_201[_453] - cbMtdParam._m0[10u].y) * _361) + cbMtdParam._m0[10u].y) * _386.y) - _495) * _346) + _495;
    float _505 = ((((((_202[_453] - cbMtdParam._m0[10u].z) * _361) + cbMtdParam._m0[10u].z) * _386.z) - _496) * _346) + _496;
    float _511 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _524 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _543 = (((cbMtdParam._m0[16u].x * _524.x) - _503) * _511) + _503;
    float _544 = (((cbMtdParam._m0[16u].y * _524.y) - _504) * _511) + _504;
    float _545 = (((cbMtdParam._m0[16u].z * _524.z) - _505) * _511) + _505;
    vec4 _558 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _578 = (((cbMtdParam._m0[19u].x * _558.x) - _543) * _335) + _543;
    float _579 = (((cbMtdParam._m0[19u].y * _558.y) - _544) * _335) + _544;
    float _580 = (((cbMtdParam._m0[19u].z * _558.z) - _545) * _335) + _545;
    vec4 _592 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _617 = (_321.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _592.x) - _578) * _307) + _578);
    float _619 = (_321.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _592.y) - _579) * _307) + _579);
    float _621 = (_321.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _592.z) - _580) * _307) + _580);
    float _625 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _634 = (_625 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _625))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3971 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _642 = ((cbMtdParam._m0[21u].x - _617) * _635) + _617;
    float _643 = ((cbMtdParam._m0[21u].y - _619) * _635) + _619;
    float _644 = ((cbMtdParam._m0[21u].z - _621) * _635) + _621;
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[29u].x;
    _196[0u] = cbMtdParam._m0[29u].y;
    _195[1u] = cbMtdParam._m0[31u].x;
    _196[1u] = cbMtdParam._m0[31u].y;
    _195[2u] = cbMtdParam._m0[30u].z;
    _196[2u] = cbMtdParam._m0[30u].w;
    _195[3u] = cbMtdParam._m0[30u].x;
    _196[3u] = cbMtdParam._m0[30u].y;
    _195[4u] = cbMtdParam._m0[29u].z;
    _196[4u] = cbMtdParam._m0[29u].w;
    float _684 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    uint _686 = uint(int(isnan(4.0) ? _684 : (isnan(_684) ? 4.0 : min(_684, 4.0))));
    float _693 = ((_196[_686] - cbMtdParam._m0[22u].z) * _346) + cbMtdParam._m0[22u].z;
    float _696 = ((cbMtdParam._m0[22u].w - _693) * _511) + _693;
    float _699 = ((cbMtdParam._m0[25u].y - _696) * _335) + _696;
    float _702 = ((cbMtdParam._m0[26u].y - _699) * _307) + _699;
    float _704 = _702 - (_702 * _625);
    vec4 _720 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _383));
    vec4 _737 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _739 = _737.x;
    float _740 = _737.y;
    float _745 = cbMtdParam._m0[22u].x + _737.z;
    float _748 = (((_720.z + _195[_686]) - _745) * _346) + _745;
    vec4 _760 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _771 = (((_760.z - _748) + cbMtdParam._m0[28u].z) * _511) + _748;
    float _777 = ((((_294 * 2.0) * _771) - _771) * cbMtdParam._m0[24u].w) + _771;
    vec4 _789 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _800 = (((cbMtdParam._m0[23u].z + _789.z) - _777) * _335) + _777;
    vec4 _813 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _824 = (((_813.z - _800) + cbMtdParam._m0[26u].z) * _307) + _800;
    vec4 _839 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _854 = ((cbMtdParam._m0[27u].z * _625) * ((_839.z * cbMtdParam._m0[27u].y) - _824)) + _824;
    float _866 = ((_720.x - _739) * _346) + _739;
    float _867 = ((_720.y - _740) * _346) + _740;
    float _872 = ((_760.x - _866) * _511) + _866;
    float _873 = ((_760.y - _867) * _511) + _867;
    float _878 = ((_789.x - _872) * _335) + _872;
    float _879 = ((_789.y - _873) * _335) + _873;
    float _888 = ((((_813.x - _878) * _307) + _878) * 2.0) + (-1.0);
    float _889 = ((((_813.y - _879) * _307) + _879) * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _3992 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _895 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    float _905 = ((cbMtdParam._m0[25u].z * ((_290.x * 2.0) + (-1.0))) + _888) + ((((_839.x * 2.0) + (-1.0)) * _625) * cbMtdParam._m0[27u].x);
    float _906 = ((cbMtdParam._m0[25u].z * ((_290.y * 2.0) + (-1.0))) + _889) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_839.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _908 = gl_FragCoord.x * 0.125;
    float _910 = gl_FragCoord.y * 0.125;
    float _920 = fma(_895, _237 * NORMAL.x, fma(_906, _244 * TANGENT.x, (_230 * _222) * _905));
    float _923 = fma(_895, _237 * NORMAL.y, fma(_906, _244 * TANGENT.y, (_230 * _223) * _905));
    float _926 = fma(_895, _237 * NORMAL.z, fma(_906, _244 * TANGENT.z, (_230 * _224) * _905));
    float _930 = inversesqrt(dot(vec3(_920, _923, _926), vec3(_920, _923, _926)));
    float _931 = _930 * _920;
    float _932 = _930 * _923;
    float _933 = _930 * _926;
    float _4003 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _934 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4025 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4036 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4047 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _938 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_908, _910)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _958 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1008 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _998);
    float _1009 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _998);
    float _1010 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _998);
    float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
    float _1015 = _1008 * _1014;
    float _1016 = _1009 * _1014;
    float _1017 = _1010 * _1014;
    vec4 _1019 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_908, _910));
    float _1021 = _1019.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1191 = sqrt(((_1008 * _1008) + (_1009 * _1009)) + (_1010 * _1010));
        float _1197 = (cbMatDynParam._m0[5u].x * _1191) + cbMatDynParam._m0[5u].y;
        float _4058 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1202 = (cbMatDynParam._m0[5u].z * _1191) + cbMatDynParam._m0[5u].w;
        float _4069 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) - _1198)) + _1198) < ((_1021 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1032 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1033 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1051 = fma(_933, cbSceneParam._m0[5u].z, fma(_932, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _931));
    float _1054 = fma(_933, cbSceneParam._m0[6u].z, fma(_932, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _931));
    float _1057 = fma(_933, cbSceneParam._m0[7u].z, fma(_932, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _931));
    uint _1070 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1071 = _1070 + 9u;
    uint _1072 = _1071 + uint(cbMatDynParam._m0[0u].w);
    float _1078 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1072].x;
    float _1079 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1072].y;
    float _1080 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1072].z;
    float _4080 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1084 = 1.0 - _938;
    float _1085 = _1081 * _1084;
    float _1086 = _1082 * _1084;
    float _1087 = _1083 * _1084;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _938;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _938;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _938;
    float _1095 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    vec4 _1107 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1032, cbSceneParam._m0[86u].y * _1033));
    float _1110 = _1107.x * TEXCOORD_3.w;
    float _1111 = dot(vec3(_931, _932, _933), vec3(_1015, _1016, _1017));
    float _1114 = _1111 * 2.0;
    float _1118 = (_1114 * _931) - _1015;
    float _1119 = (_1114 * _932) - _1016;
    float _1120 = (_1114 * _933) - _1017;
    float _1124 = abs(dot(vec3(_1015, _1016, _1017), vec3(_931, _932, _933)));
    float _4113 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1126 = sqrt(_934);
    float _1137 = exp2((_1126 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1126 * 3.0));
    float _1143 = (1.0 - _1137) * ((_1126 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1144 = _1137 * _1126;
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1180, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172));
        float _1237 = fma(_1180, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172));
        float _1241 = fma(_1180, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172));
        float _1266 = _1172 + _931;
        float _1267 = _1176 + _932;
        float _1268 = _1180 + _933;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_931, _932, _933), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4161 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_931, _932, _933), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4194 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_931, _932, _933), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4227 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1180, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172));
        float _1550 = fma(_1180, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172));
        float _1554 = fma(_1180, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172));
        float _1577 = _1172 + _931;
        float _1578 = _1176 + _932;
        float _1579 = _1180 + _933;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_931, _932, _933), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4290 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_931, _932, _933), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4323 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_931, _932, _933), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4356 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1509;
        _1816 = _1509;
        _1817 = _1509;
        _1818 = _1509;
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1521)) + _1521;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1522)) + _1522;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1523)) + _1523;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1118 * 0.5;
    float _1884 = _1119 * 0.5;
    float _1885 = _1120 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1180, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1172)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1180, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1172)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1180, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1172)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1120, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118));
        float _2013 = fma(_1120, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118));
        float _2016 = fma(_1120, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2044 = frontier_phi_19_17_ladder;
        }
        float _2267;
        if (_2013 > 0.0)
        {
            _2267 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2267 = frontier_phi_28_24_ladder;
        }
        float _2524;
        if (_2016 > 0.0)
        {
            _2524 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2524 = frontier_phi_40_35_ladder;
        }
        float _2526 = isnan(_2267) ? _2044 : (isnan(_2044) ? _2267 : min(_2044, _2267));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _2010) + _1999;
        float _2532 = (_2527 * _2013) + _2003;
        float _2533 = (_2527 * _2016) + _2007;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2534;
        float _2538 = _2534 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 > _2538) || ((_2532 < _2536) || ((_2531 < _2536) || (_2531 > _2538))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2533, cbModelParam._m0[9u].z, fma(_2532, cbModelParam._m0[9u].y, _2531 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2533, cbModelParam._m0[10u].z, fma(_2532, cbModelParam._m0[10u].y, _2531 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2533, cbModelParam._m0[11u].z, fma(_2532, cbModelParam._m0[11u].y, _2531 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_18_40_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_18_40_ladder_2;
        _2034 = frontier_phi_18_40_ladder_1;
        _2036 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1118, _1119, _1120), _1952);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1180, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1172)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1180, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1172)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1180, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1172)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1120, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118));
        float _2108 = fma(_1120, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118));
        float _2111 = fma(_1120, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118));
        float _2272;
        if (_2105 > 0.0)
        {
            _2272 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2272 = frontier_phi_30_26_ladder;
        }
        float _2551;
        if (_2108 > 0.0)
        {
            _2551 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2551 = frontier_phi_42_37_ladder;
        }
        float _2764;
        if (_2111 > 0.0)
        {
            _2764 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2764 = frontier_phi_51_48_ladder;
        }
        float _2766 = isnan(_2551) ? _2272 : (isnan(_2272) ? _2551 : min(_2272, _2551));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _2105) + _2094;
        float _2772 = (_2767 * _2108) + _2098;
        float _2773 = (_2767 * _2111) + _2102;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2775 = (-1.0) - _2774;
        float _2777 = _2774 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2773 > _2777) || ((_2773 < _2775) || ((_2772 > _2777) || ((_2772 < _2775) || ((_2771 < _2775) || (_2771 > _2777))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2773, cbModelParam._m0[17u].z, fma(_2772, cbModelParam._m0[17u].y, _2771 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2773, cbModelParam._m0[18u].z, fma(_2772, cbModelParam._m0[18u].y, _2771 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2773, cbModelParam._m0[19u].z, fma(_2772, cbModelParam._m0[19u].y, _2771 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_27_51_ladder = _2972.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2972.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2972.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_27_51_ladder_2;
        _2132 = frontier_phi_27_51_ladder_1;
        _2134 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1118, _1119, _1120), _2041);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2147 = (((_1143 * _1095) + _1144) * _1110) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1143 * _1097) + _1144) * _1110) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2151 = (((_1143 * _1098) + _1144) * _1110) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    vec4 _2168 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1032, _1033));
    float _2170 = _2168.w;
    float _2182 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2170);
    float _2183 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2170);
    float _2184 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2170);
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_1070 + 5u]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _1110 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2226 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2230 = _2190 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_931, _932, _933));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_931, _932, _933));
    float _4492 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4503 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2182) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2183) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2184) * _2226) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2190 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4514 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2304 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2495 = _2190 + 7u;
        float _2511 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4530 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2514 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2322 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2277;
        _2324 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2279;
        _2326 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2281;
    }
    uint _2329 = _2190 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _934) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2190].x + _1015;
    float _2345 = cbLight._m0[_2190].y + _1016;
    float _2346 = cbLight._m0[_2190].z + _1017;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2190].xyz));
    float _4546 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _2358 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2359 = dot(vec3(_931, _932, _933), vec3(_2351, _2352, _2353));
    float _4568 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2351, _2352, _2353));
    float _4579 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
    float _2380 = 0.959999978542327880859375 - _1092;
    float _2382 = 0.959999978542327880859375 - _1093;
    float _2383 = 0.959999978542327880859375 - _1094;
    float _2390 = 1.0 - _2343;
    float _2401 = (0.5 / (((_2358 * ((_2357 * _2390) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2390) + _2343) * _2357))) * _2357;
    float _4590 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2417 = _2190 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _934) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2230].x + _1015;
    float _2431 = cbLight._m0[_2230].y + _1016;
    float _2432 = cbLight._m0[_2230].z + _1017;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2230].xyz));
    float _4601 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2444 = dot(vec3(_931, _932, _933), vec3(_2437, _2438, _2439));
    float _4612 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2437, _2438, _2439));
    float _4623 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2470 = 1.0 - _2429;
    float _2480 = (0.5 / (((_2358 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2470) + _2429) * _2443))) * _2443;
    float _4634 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2492 = (((((_2463 * _2380) + _1095) * cbLight._m0[_2417].x) * _2482) * _2213) + ((((cbLight._m0[_2329].x * _2182) * ((_2379 * _2380) + _1095)) * _2403) * _2226);
    float _2493 = (((((_2463 * _2382) + _1097) * cbLight._m0[_2417].y) * _2482) * _2213) + ((((cbLight._m0[_2329].y * _2183) * ((_2379 * _2382) + _1097)) * _2403) * _2226);
    float _2494 = (((((_2463 * _2383) + _1098) * cbLight._m0[_2417].z) * _2482) * _2213) + ((((cbLight._m0[_2329].z * _2184) * ((_2379 * _2383) + _1098)) * _2403) * _2226);
    float _2556;
    float _2558;
    float _2560;
    if (_2266)
    {
        _2556 = _2492;
        _2558 = _2493;
        _2560 = _2494;
    }
    else
    {
        uint _2562 = _2190 + 2u;
        uint _2566 = _2190 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _934) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _1015;
        float _2583 = cbLight._m0[_2562].y + _1016;
        float _2584 = cbLight._m0[_2562].z + _1017;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2562].xyz));
        float _4645 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2596 = dot(vec3(_931, _932, _933), vec3(_2589, _2590, _2591));
        float _4656 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4667 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2358 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2622) + _2581) * _2595))) * _2595;
        float _4678 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2556 = (((((_2615 * _2380) + _1095) * cbLight._m0[_2566].x) * _2634) * _2635) + _2492;
        _2558 = (((((_2615 * _2382) + _1097) * cbLight._m0[_2566].y) * _2634) * _2635) + _2493;
        _2560 = (((((_2615 * _2383) + _1098) * cbLight._m0[_2566].z) * _2634) * _2635) + _2494;
    }
    float _2670;
    float _2672;
    float _2674;
    if (_2284)
    {
        _2670 = _2556;
        _2672 = _2558;
        _2674 = _2560;
    }
    else
    {
        uint _2681 = _2190 + 3u;
        uint _2685 = _2190 + 11u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _934) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1015;
        float _2702 = cbLight._m0[_2681].y + _1016;
        float _2703 = cbLight._m0[_2681].z + _1017;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2681].xyz));
        float _4694 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2715 = dot(vec3(_931, _932, _933), vec3(_2708, _2709, _2710));
        float _4705 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4716 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2358 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2741) + _2700) * _2714))) * _2714;
        float _4727 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2670 = (((((_2734 * _2380) + _1095) * cbLight._m0[_2685].x) * _2753) * _2754) + _2556;
        _2672 = (((((_2734 * _2382) + _1097) * cbLight._m0[_2685].y) * _2753) * _2754) + _2558;
        _2674 = (((((_2734 * _2383) + _1098) * cbLight._m0[_2685].z) * _2753) * _2754) + _2560;
    }
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_2188.y == 0u)
    {
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2829;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2829;
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2829;
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.x;
        uint _2856 = uint((float(_2844.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1033) / _2845))) + floor(float(uint(cbSceneParam._m0[85u].x * _1032) / _2845)));
        float _2866 = (log2(_2832 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2867 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        uint _2870 = uint(isnan(14.0) ? _2867 : (isnan(_2867) ? 14.0 : min(_2867, 14.0)));
        uvec4 _2875 = texelFetch(g_lightClusterGridBuffer, int(((_2870 << 2u) + (_2856 << 6u)) >> 2u));
        uint _2876 = _2875.x;
        uint _2877 = _2844.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2877 >> 4u) & 15u)) + 4294967295u) & _2876) == 0u) || ((_2877 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            uint _3136 = 0u;
            uint _3145;
            bool _3146;
            for (;;)
            {
                _3145 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                _3146 = _3145 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3146)
                {
                    frontier_phi_68_pred = _3130;
                    frontier_phi_68_pred_1 = _3135;
                    frontier_phi_68_pred_2 = _3134;
                    frontier_phi_68_pred_3 = _3133;
                    frontier_phi_68_pred_4 = _3132;
                    frontier_phi_68_pred_5 = _3131;
                }
                else
                {
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    uint _3281;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3145;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    for (;;)
                    {
                        uint _3285 = uint(findLSB(_3281)) + (_3136 << 5u);
                        uint _3282 = (_3281 + 4294967295u) & _3281;
                        uint _3287 = _3285 * 48u;
                        vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3307 = (_3285 * 48u) + 4u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3326 = (_3285 * 48u) + 8u;
                        vec3 _3337 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x));
                        float _3341 = _3301.x - _2830;
                        float _3342 = _3301.y - _2831;
                        float _3343 = _3301.z - _2832;
                        float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                        float _3347 = inversesqrt(_3344);
                        float _3348 = _3347 * _3341;
                        float _3349 = _3347 * _3342;
                        float _3350 = _3347 * _3343;
                        float _3351 = dot(vec3(_1051, _1054, _1057), vec3(_3348, _3349, _3350));
                        float _3356 = 1.0 - (_3344 * _3301.w);
                        float _4753 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3358 = sqrt(_3344) * _3320.w;
                        float _3361 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3351) + _3362;
                        float _3368 = _3358 * _3358;
                        float _3372 = ((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3357) / ((_3368 * 0.699999988079071044921875) + 1.0);
                        float _3376 = (-0.0) - _2830;
                        float _3377 = (-0.0) - _2831;
                        float _3378 = (-0.0) - _2832;
                        float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3393 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                        float _3394 = 1.0 - _1126;
                        float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                        float _3402 = _3401 * _3401;
                        float _3403 = _3402 * _3402;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3414 = dot(vec3(_1051, _1054, _1057), vec3(_3383, _3384, _3385));
                        float _4769 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3418 = dot(vec3(_1051, _1054, _1057), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                        float _4780 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                        float _3426 = _3361 * _3402;
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3351) + _3427;
                        float _4791 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3432 = 1.0 - _3402;
                        float _3442 = (0.5 / (((_3431 * ((_3417 * _3432) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3402) * _3417))) * _3431;
                        float _4802 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3453 = (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) / ((_3425 * _3425) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125))) * _3357;
                        _3205 = (_3372 * _3320.x) + _3278;
                        _3206 = (_3372 * _3320.y) + _3279;
                        _3207 = (_3372 * _3320.z) + _3280;
                        _3202 = (_3453 * _3337.x) + _3275;
                        _3203 = (_3453 * _3337.y) + _3276;
                        _3204 = (_3453 * _3337.z) + _3277;
                        if (_3282 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3282;
                        }
                    }
                    frontier_phi_68_pred = _3202;
                    frontier_phi_68_pred_1 = _3207;
                    frontier_phi_68_pred_2 = _3206;
                    frontier_phi_68_pred_3 = _3205;
                    frontier_phi_68_pred_4 = _3204;
                    frontier_phi_68_pred_5 = _3203;
                }
                _2978 = frontier_phi_68_pred;
                _2988 = frontier_phi_68_pred_1;
                _2986 = frontier_phi_68_pred_2;
                _2984 = frontier_phi_68_pred_3;
                _2982 = frontier_phi_68_pred_4;
                _2980 = frontier_phi_68_pred_5;
                uint _3137 = _3136 + 1u;
                if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3130 = _2978;
                    _3131 = _2980;
                    _3132 = _2982;
                    _3133 = _2984;
                    _3134 = _2986;
                    _3135 = _2988;
                    _3136 = _3137;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((4294967295u << _2994) & _2876) == 0u)
        {
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
        }
        else
        {
            float _3123 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
            float _3124 = _3123 * _2830;
            float _3125 = _3123 * _2831;
            float _3126 = _3123 * _2832;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3258 = _2977;
                float _3259 = _2979;
                float _3260 = _2981;
                float _3261 = _2983;
                float _3262 = _2985;
                float _3263 = _2987;
                uint _3264 = _2994;
                uint _3273;
                bool _3274;
                for (;;)
                {
                    _3273 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                    _3274 = _3273 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3274)
                    {
                        frontier_phi_79_pred = _3263;
                        frontier_phi_79_pred_1 = _3262;
                        frontier_phi_79_pred_2 = _3261;
                        frontier_phi_79_pred_3 = _3260;
                        frontier_phi_79_pred_4 = _3259;
                        frontier_phi_79_pred_5 = _3258;
                    }
                    else
                    {
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        uint _3486 = _3273;
                        uint _3487;
                        vec4 _3512;
                        float _3513;
                        vec4 _3528;
                        vec3 _3540;
                        vec4 _3555;
                        vec4 _3570;
                        float _3616;
                        bool _3617;
                        for (;;)
                        {
                            uint _3497 = ((_3264 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3486));
                            _3487 = (_3486 + 4294967295u) & _3486;
                            uint _3499 = _3497 * 40u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3513 = _3512.w;
                            uint _3515 = (_3497 * 40u) + 4u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3497 * 40u) + 8u;
                            _3540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x));
                            uint _3542 = (_3497 * 40u) + 16u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3497 * 40u) + 20u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3497 * 40u) + 24u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3591 = (_3497 * 40u) + 28u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3616 = fma(_2832, _3604.z, fma(_2831, _3604.y, _3604.x * _2830)) + _3604.w;
                            _3617 = !((fma(_2832, _3585.z, fma(_2831, _3585.y, _3585.x * _2830)) + _3585.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3617)
                            {
                                float _3644 = _3512.x - _2830;
                                float _3645 = _3512.y - _2831;
                                float _3646 = _3512.z - _2832;
                                float _3647 = dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646));
                                float _3650 = inversesqrt(_3647);
                                float _3651 = _3650 * _3644;
                                float _3652 = _3650 * _3645;
                                float _3653 = _3650 * _3646;
                                float _3657 = 1.0 - (_3647 / (_3513 * _3513));
                                float _4813 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3662 = sqrt(_3647) * _3528.w;
                                float _3664 = 1.39999997615814208984375 / (_3662 + 1.39999997615814208984375);
                                float _3665 = _3664 * _3664;
                                float _3668 = ((1.0 - _3665) * dot(vec3(_3651, _3652, _3653), vec3(_1051, _1054, _1057))) + _3665;
                                float _3671 = _3662 * _3662;
                                float _3675 = (fma(_2832, _3555.z, fma(_2831, _3555.y, _3555.x * _2830)) + _3555.w) / _3616;
                                float _3676 = (fma(_2832, _3570.z, fma(_2831, _3570.y, _3570.x * _2830)) + _3570.w) / _3616;
                                float _3680 = 1.0 - dot(vec2(_3675, _3676), vec2(_3675, _3676));
                                float _4829 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3682 = _3681 * (((isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0))) * _3658) / ((_3671 * 0.699999988079071044921875) + 1.0));
                                float _3694 = exp2(log2(1.0 / ((_3671 * 3.5) + 5.0)) * 0.25);
                                float _3695 = 1.0 - _1126;
                                float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                                float _3703 = _3702 * _3702;
                                float _3704 = _3703 * _3703;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                                float _3715 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _3124, (-0.0) - _3125, (-0.0) - _3126));
                                float _4840 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3719 = dot(vec3(_1051, _1054, _1057), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                                float _4851 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                                float _3727 = _3664 * _3703;
                                float _3728 = _3727 * _3727;
                                float _3734 = ((1.0 - _3728) * dot(vec3(_1051, _1054, _1057), vec3(_3651, _3652, _3653))) + _3728;
                                float _4862 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3736 = 1.0 - _3703;
                                float _3746 = (0.5 / (((_3735 * ((_3718 * _3736) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3735 * _3736) + _3703) * _3718))) * _3735;
                                float _4873 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3756 = (_3681 * _3658) * (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) / ((_3726 * _3726) * ((_3671 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3682 * _3528.y;
                                frontier_phi_85_pred_1 = _3682 * _3528.x;
                                frontier_phi_85_pred_2 = _3756 * _3540.z;
                                frontier_phi_85_pred_3 = _3756 * _3540.y;
                                frontier_phi_85_pred_4 = _3756 * _3540.x;
                                frontier_phi_85_pred_5 = _3682 * _3528.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3764 = frontier_phi_85_pred;
                            _3763 = frontier_phi_85_pred_1;
                            _3762 = frontier_phi_85_pred_2;
                            _3761 = frontier_phi_85_pred_3;
                            _3760 = frontier_phi_85_pred_4;
                            _3765 = frontier_phi_85_pred_5;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            if (_3487 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3487;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3472;
                        frontier_phi_79_pred_1 = _3471;
                        frontier_phi_79_pred_2 = _3470;
                        frontier_phi_79_pred_3 = _3469;
                        frontier_phi_79_pred_4 = _3468;
                        frontier_phi_79_pred_5 = _3467;
                    }
                    _3109 = frontier_phi_79_pred;
                    _3107 = frontier_phi_79_pred_1;
                    _3105 = frontier_phi_79_pred_2;
                    _3103 = frontier_phi_79_pred_3;
                    _3101 = frontier_phi_79_pred_4;
                    _3099 = frontier_phi_79_pred_5;
                    uint _3265 = _3264 + 1u;
                    if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3258 = _3099;
                        _3259 = _3101;
                        _3260 = _3103;
                        _3261 = _3105;
                        _3262 = _3107;
                        _3263 = _3109;
                        _3264 = _3265;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3103;
                frontier_phi_60_61_ladder_1 = _3109;
                frontier_phi_60_61_ladder_2 = _3107;
                frontier_phi_60_61_ladder_3 = _3105;
                frontier_phi_60_61_ladder_4 = _3101;
                frontier_phi_60_61_ladder_5 = _3099;
            }
            else
            {
                frontier_phi_60_61_ladder = _2981;
                frontier_phi_60_61_ladder_1 = _2987;
                frontier_phi_60_61_ladder_2 = _2985;
                frontier_phi_60_61_ladder_3 = _2983;
                frontier_phi_60_61_ladder_4 = _2979;
                frontier_phi_60_61_ladder_5 = _2977;
            }
            _3098 = frontier_phi_60_61_ladder_5;
            _3100 = frontier_phi_60_61_ladder_4;
            _3102 = frontier_phi_60_61_ladder;
            _3104 = frontier_phi_60_61_ladder_3;
            _3106 = frontier_phi_60_61_ladder_2;
            _3108 = frontier_phi_60_61_ladder_1;
        }
        float _3113 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
        _2889 = (_3113 * _3104) + _2322;
        _2891 = (_3113 * _3106) + _2324;
        _2893 = (_3113 * _3108) + _2326;
        _2895 = ((_3098 * _1095) * _3113) + _2670;
        _2897 = ((_3100 * _1097) * _3113) + _2672;
        _2899 = ((_3102 * _1098) * _3113) + _2674;
    }
    else
    {
        _2889 = _2322;
        _2891 = _2324;
        _2893 = _2326;
        _2895 = _2670;
        _2897 = _2672;
        _2899 = _2674;
    }
    float _4889 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _4900 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _4911 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _2916 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2889 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1110))) + ((_2895 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2891 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1110))) + ((_2897 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2893 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1110))) + ((_2899 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1941)) * cbPerFrame._m0[3u].x);
    uint _2919 = _1070 + 6u;
    float _2927 = _1032 / cbSceneParam._m0[86u].x;
    float _2928 = _1033 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _958 : (isnan(_958) ? cbSceneParam._m0[77u].w : min(_958, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_958 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_958) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _958 : min(cbSceneParam._m0[80u].w, _958));
        float _3003 = _3002 / _958;
        float _3014 = _3003 * _1008;
        float _3015 = _1009 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3018 = _3003 * _1010;
        float _3020 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3021 = _3020 + cbSceneParam._m0[79u].w;
        float _3022 = cbSceneParam._m0[79u].w - _3015;
        float _3028 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3018 * _3018));
        float _3031 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3028;
        float _3036 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3038 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3215;
        if (abs((_3016 - _3020) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3215 = ((((_3021 > 0.0) ? exp2(_3036 * _3021) : (2.0 - exp2(_3038 * _3021))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3031;
        }
        else
        {
            float _3159 = 1.0 / cbSceneParam._m0[80u].x;
            float _3160 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : max(_3021, _3022));
            float _3161 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : min(_3021, _3022));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            _3215 = ((abs(_3028 / _3016) * cbSceneParam._m0[80u].y) * ((((_3170 - _3171) * 2.0) - ((exp2(_3036 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0)))) - exp2(_3036 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))))) * _3159)) - ((exp2(_3038 * _3170) - exp2(_3038 * _3171)) * _3159))) + (_3031 * cbSceneParam._m0[80u].z);
        }
        vec4 _3217 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3226 = exp2((_3215 * (-1.44269502162933349609375)) * (1.0 - _3217.w));
        float _3227 = log2(_3226);
        float _3243 = log2(_2947);
        _3040 = (exp2(_3243 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].x)) * _3217.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3042 = (exp2(_3243 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].y)) * _3217.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3044 = (exp2(_3243 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].z)) * _3217.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3046 = _3226 * _2947;
    }
    else
    {
        _3040 = _2944;
        _3042 = _2945;
        _3044 = _2946;
        _3046 = _2947;
    }
    bool _3253;
    vec4 _3056;
    vec4 _3078;
    float _3080;
    float _3084;
    float _3085;
    float _3086;
    float _3087;
    bool _3097;
    for (;;)
    {
        _3056 = cbMatDynParam._m0[0u];
        float _3058 = roundEven(_3056.y);
        bool _3059 = _3058 == 3.0;
        float _3060 = log2(_3046);
        float _3067 = exp2(_3060 * cbSceneParam._m0[78u].x) * _2916;
        float _3068 = exp2(_3060 * cbSceneParam._m0[78u].y) * _2917;
        float _3069 = exp2(_3060 * cbSceneParam._m0[78u].z) * _2918;
        float _3076 = _1021 + (-0.5);
        _3078 = cbMtdParam._m0[1u];
        _3080 = _3078.y * _3076;
        float _3083 = (_3058 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3084 = _3083 * (_3059 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3040)));
        _3085 = _3083 * (_3059 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3042)));
        _3086 = _3083 * (_3059 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3044)));
        _3087 = _3076 * 0.999000012874603271484375;
        _3097 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3097)
        {
            if ((cbInstanceData._m0[_1070 + 7u].x + _3087) < 0.5)
            {
                _3253 = true;
                break;
            }
        }
        uint _3194 = _1071 + uint(_3056.w);
        if ((cbInstanceData._m0[_3194].w < 1.0) && ((cbInstanceData._m0[_3194].w + _3087) < 0.5))
        {
            _3253 = true;
            break;
        }
        if ((_3080 + 1.0) < _3078.x)
        {
            _3253 = true;
            break;
        }
        _3253 = false;
        break;
    }
    float _3458;
    if (_3253)
    {
        discard_state = true;
        _3458 = 0.0;
    }
    else
    {
        _3458 = cbInstanceData._m0[_2919].w;
    }
    SV_Target.x = _3084;
    SV_Target.y = _3085;
    SV_Target.z = _3086;
    SV_Target.w = _3458;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2919].w;
    discard_exit();
}


