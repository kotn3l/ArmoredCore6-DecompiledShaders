#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1616;
float _4016;
float _4017;
float _4018;
float _4019;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _285 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _319 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _334 = exp2(log2((1.0 - _323) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    vec4 _350 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _362 = exp2(log2(_350.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _364 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
    float _373 = exp2(log2(cbMtdParam._m0[23u].y * _323) * cbMtdParam._m0[22u].y);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
    vec4 _387 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _390 = _387.y;
    float _393 = (_387.x + (-0.02500000037252902984619140625)) * 8.0;
    float _397 = roundEven(5.0 - _393);
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(4.0) ? _398 : (isnan(_398) ? 4.0 : min(_398, 4.0));
    float _412 = floor(_399);
    vec4 _415 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _412));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[17u].x;
    _211[0u] = cbMtdParam._m0[17u].y;
    _212[0u] = cbMtdParam._m0[17u].z;
    _210[1u] = cbMtdParam._m0[15u].x;
    _211[1u] = cbMtdParam._m0[15u].y;
    _212[1u] = cbMtdParam._m0[15u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[13u].x;
    _211[3u] = cbMtdParam._m0[13u].y;
    _212[3u] = cbMtdParam._m0[13u].z;
    _210[4u] = cbMtdParam._m0[12u].x;
    _211[4u] = cbMtdParam._m0[12u].y;
    _212[4u] = cbMtdParam._m0[12u].z;
    _210[5u] = cbMtdParam._m0[18u].x;
    _211[5u] = cbMtdParam._m0[18u].y;
    _212[5u] = cbMtdParam._m0[18u].z;
    float _479 = roundEven(_393);
    float _480 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    uint _482 = uint(int(isnan(5.0) ? _480 : (isnan(_480) ? 5.0 : min(_480, 5.0))));
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _523 = cbMtdParam._m0[9u].x * _512.x;
    float _524 = cbMtdParam._m0[9u].y * _512.y;
    float _525 = cbMtdParam._m0[9u].z * _512.z;
    float _532 = ((((((_210[_482] - cbMtdParam._m0[10u].x) * _390) + cbMtdParam._m0[10u].x) * _415.x) - _523) * _375) + _523;
    float _533 = ((((((_211[_482] - cbMtdParam._m0[10u].y) * _390) + cbMtdParam._m0[10u].y) * _415.y) - _524) * _375) + _524;
    float _534 = ((((((_212[_482] - cbMtdParam._m0[10u].z) * _390) + cbMtdParam._m0[10u].z) * _415.z) - _525) * _375) + _525;
    float _540 = exp2(log2(_319.w) * cbMtdParam._m0[23u].w);
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _572 = (((cbMtdParam._m0[16u].x * _553.x) - _532) * _540) + _532;
    float _573 = (((cbMtdParam._m0[16u].y * _553.y) - _533) * _540) + _533;
    float _574 = (((cbMtdParam._m0[16u].z * _553.z) - _534) * _540) + _534;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _607 = (((cbMtdParam._m0[19u].x * _587.x) - _572) * _364) + _572;
    float _608 = (((cbMtdParam._m0[19u].y * _587.y) - _573) * _364) + _573;
    float _609 = (((cbMtdParam._m0[19u].z * _587.z) - _574) * _364) + _574;
    vec4 _621 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _646 = (_350.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _621.x) - _607) * _336) + _607);
    float _648 = (_350.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _621.y) - _608) * _336) + _608);
    float _650 = (_350.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _621.z) - _609) * _336) + _609);
    vec4 _662 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _680 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _682 = _680 * (cbMtdParam._m0[24u].z + 1.0);
    float _4078 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _690 = (_683 * ((cbMtdParam._m0[11u].x * _662.x) - _646)) + _646;
    float _691 = (((cbMtdParam._m0[11u].y * _662.y) - _648) * _683) + _648;
    float _692 = (((cbMtdParam._m0[11u].z * _662.z) - _650) * _683) + _650;
    float _696 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _704 = (_696 - (((_285.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _696))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4089 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _712 = ((cbMtdParam._m0[21u].x - _690) * _705) + _690;
    float _713 = ((cbMtdParam._m0[21u].y - _691) * _705) + _691;
    float _714 = ((cbMtdParam._m0[21u].z - _692) * _705) + _692;
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[29u].x;
    _206[0u] = cbMtdParam._m0[29u].y;
    _205[1u] = cbMtdParam._m0[31u].x;
    _206[1u] = cbMtdParam._m0[31u].y;
    _205[2u] = cbMtdParam._m0[30u].z;
    _206[2u] = cbMtdParam._m0[30u].w;
    _205[3u] = cbMtdParam._m0[30u].x;
    _206[3u] = cbMtdParam._m0[30u].y;
    _205[4u] = cbMtdParam._m0[29u].z;
    _206[4u] = cbMtdParam._m0[29u].w;
    float _754 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    uint _756 = uint(int(isnan(4.0) ? _754 : (isnan(_754) ? 4.0 : min(_754, 4.0))));
    float _763 = ((_206[_756] - cbMtdParam._m0[22u].z) * _375) + cbMtdParam._m0[22u].z;
    float _766 = ((cbMtdParam._m0[22u].w - _763) * _540) + _763;
    float _769 = ((cbMtdParam._m0[25u].y - _766) * _364) + _766;
    float _772 = ((cbMtdParam._m0[26u].y - _769) * _336) + _769;
    float _777 = (cbMtdParam._m0[24u].y + 1.0) * _680;
    float _4110 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _778 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _780 = _772 - (_772 * _778);
    float _782 = _780 - (_780 * _696);
    vec4 _795 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _412));
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _814 = _812.x;
    float _815 = _812.y;
    float _820 = cbMtdParam._m0[22u].x + _812.z;
    float _823 = (((_795.z + _205[_756]) - _820) * _375) + _820;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _846 = (((_835.z - _823) + cbMtdParam._m0[28u].z) * _540) + _823;
    float _852 = ((((_323 * 2.0) * _846) - _846) * cbMtdParam._m0[24u].w) + _846;
    vec4 _864 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _875 = (((cbMtdParam._m0[23u].z + _864.z) - _852) * _364) + _852;
    vec4 _888 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _899 = (((_888.z - _875) + cbMtdParam._m0[26u].z) * _336) + _875;
    vec4 _911 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _923 = ((_911.z - _899) * _778) + _899;
    vec4 _938 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _952 = ((cbMtdParam._m0[27u].z * _696) * ((_938.z * cbMtdParam._m0[27u].y) - _923)) + _923;
    float _967 = ((_795.x - _814) * _375) + _814;
    float _968 = ((_795.y - _815) * _375) + _815;
    float _973 = ((_835.x - _967) * _540) + _967;
    float _974 = ((_835.y - _968) * _540) + _968;
    float _979 = ((_864.x - _973) * _364) + _973;
    float _980 = ((_864.y - _974) * _364) + _974;
    float _989 = ((((_888.x - _979) * _336) + _979) * 2.0) + (-1.0);
    float _990 = ((((_888.y - _980) * _336) + _980) * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4121 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _996 = sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))));
    float _1012 = (((cbMtdParam._m0[25u].z * ((_319.x * 2.0) + (-1.0))) + _989) + (((((_911.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _778)) + ((((_938.x * 2.0) + (-1.0)) * _696) * cbMtdParam._m0[27u].x);
    float _1013 = (((cbMtdParam._m0[25u].z * ((_319.y * 2.0) + (-1.0))) + _990) + (((((_911.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _778)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_938.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _1015 = gl_FragCoord.x * 0.125;
    float _1017 = gl_FragCoord.y * 0.125;
    float _1027 = fma(_996, _247 * NORMAL.x, fma(_1013, _254 * TANGENT.x, (_240 * _232) * _1012));
    float _1030 = fma(_996, _247 * NORMAL.y, fma(_1013, _254 * TANGENT.y, (_240 * _233) * _1012));
    float _1033 = fma(_996, _247 * NORMAL.z, fma(_1013, _254 * TANGENT.z, (_240 * _234) * _1012));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4132 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _1041 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4154 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4165 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4176 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1045 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1015, _1017)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    vec4 _1126 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1015, _1017));
    float _1128 = _1126.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1298 = sqrt(((_1115 * _1115) + (_1116 * _1116)) + (_1117 * _1117));
        float _1304 = (cbMatDynParam._m0[5u].x * _1298) + cbMatDynParam._m0[5u].y;
        float _4187 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1309 = (cbMatDynParam._m0[5u].z * _1298) + cbMatDynParam._m0[5u].w;
        float _4198 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) - _1305)) + _1305) < ((_1128 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1139 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1140 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1158 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1161 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1164 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1177 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1178 = _1177 + 9u;
    uint _1179 = _1178 + uint(cbMatDynParam._m0[0u].w);
    float _1185 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_1179].x;
    float _1186 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_1179].y;
    float _1187 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1179].z;
    float _4209 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _1191 = 1.0 - _1045;
    float _1192 = _1188 * _1191;
    float _1193 = _1189 * _1191;
    float _1194 = _1190 * _1191;
    float _1199 = (_1188 + (-0.039999999105930328369140625)) * _1045;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1045;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1045;
    float _1202 = _1199 + 0.039999999105930328369140625;
    float _1204 = _1200 + 0.039999999105930328369140625;
    float _1205 = _1201 + 0.039999999105930328369140625;
    vec4 _1214 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1139, cbSceneParam._m0[86u].y * _1140));
    float _1217 = _1214.x * TEXCOORD_3.w;
    float _1218 = dot(vec3(_1038, _1039, _1040), vec3(_1122, _1123, _1124));
    float _1221 = _1218 * 2.0;
    float _1225 = (_1221 * _1038) - _1122;
    float _1226 = (_1221 * _1039) - _1123;
    float _1227 = (_1221 * _1040) - _1124;
    float _1231 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1038, _1039, _1040)));
    float _4242 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1233 = sqrt(_1041);
    float _1244 = exp2((_1233 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1233 * 3.0));
    float _1250 = (1.0 - _1244) * ((_1233 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1251 = _1244 * _1233;
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1615;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1340 = fma(_1287, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1279));
        float _1344 = fma(_1287, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1279));
        float _1348 = fma(_1287, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1279));
        float _1373 = _1279 + _1038;
        float _1374 = _1283 + _1039;
        float _1375 = _1287 + _1040;
        float _1385 = fma(_1375, cbModelParam._m0[26u].z, fma(_1374, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1373)) - _1340;
        float _1386 = fma(_1375, cbModelParam._m0[27u].z, fma(_1374, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1373)) - _1344;
        float _1387 = fma(_1375, cbModelParam._m0[28u].z, fma(_1374, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1373)) - _1348;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1340 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1344 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[34u].z) + ((((((_1348 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1443 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1409.x + (-0.5));
        float _1445 = _1443 * (_1409.y + (-0.5));
        float _1446 = _1443 * (_1409.z + (-0.5));
        float _1453 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1416.x + (-0.5));
        float _1455 = _1453 * (_1416.y + (-0.5));
        float _1456 = _1453 * (_1416.z + (-0.5));
        float _1463 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1423.x + (-0.5));
        float _1465 = _1463 * (_1423.y + (-0.5));
        float _1466 = _1463 * (_1423.z + (-0.5));
        float _1473 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1430.x + (-0.5));
        float _1475 = _1473 * (_1430.y + (-0.5));
        float _1476 = _1473 * (_1430.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1497 = (dot(vec3(_1038, _1039, _1040), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1507 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4290 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1509 + 1.0))) + _1514) * _1477;
        float _1524 = _1445 * 0.5;
        float _1525 = _1455 * 0.5;
        float _1526 = _1465 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_1038, _1039, _1040), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4323 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1551 + 1.0))) + _1556) * _1478;
        float _1566 = _1446 * 0.5;
        float _1567 = _1456 * 0.5;
        float _1568 = _1466 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_1038, _1039, _1040), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4356 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1593 + 1.0))) + _1598) * _1479;
        _1615 = _1446;
        _1617 = _1445;
        _1618 = _1444;
        _1619 = _1456;
        _1620 = _1455;
        _1621 = _1454;
        _1622 = _1466;
        _1623 = _1465;
        _1624 = _1464;
        _1625 = _1479;
        _1626 = _1478;
        _1627 = _1477;
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1616;
        _1617 = _1616;
        _1618 = _1616;
        _1619 = _1616;
        _1620 = _1616;
        _1621 = _1616;
        _1622 = _1616;
        _1623 = _1616;
        _1624 = _1616;
        _1625 = _1616;
        _1626 = _1616;
        _1627 = _1616;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1653 = fma(_1287, cbModelParam._m0[30u].z, fma(_1283, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279));
        float _1657 = fma(_1287, cbModelParam._m0[31u].z, fma(_1283, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279));
        float _1661 = fma(_1287, cbModelParam._m0[32u].z, fma(_1283, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279));
        float _1684 = _1279 + _1038;
        float _1685 = _1283 + _1039;
        float _1686 = _1287 + _1040;
        float _1696 = fma(_1686, cbModelParam._m0[30u].z, fma(_1685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1684)) - _1653;
        float _1697 = fma(_1686, cbModelParam._m0[31u].z, fma(_1685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1684)) - _1657;
        float _1698 = fma(_1686, cbModelParam._m0[32u].z, fma(_1685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1684)) - _1661;
        float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
        float _1715 = ((_1702 * _1696) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1653 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1716 = ((_1702 * _1697) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1657 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1717 = ((_1702 * _1698) / cbModelParam._m0[35u].z) + ((((((_1661 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        float _1752 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1719.x + (-0.5));
        float _1754 = _1752 * (_1719.y + (-0.5));
        float _1755 = _1752 * (_1719.z + (-0.5));
        float _1762 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1726.x + (-0.5));
        float _1764 = _1762 * (_1726.y + (-0.5));
        float _1765 = _1762 * (_1726.z + (-0.5));
        float _1772 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1733.x + (-0.5));
        float _1774 = _1772 * (_1733.y + (-0.5));
        float _1775 = _1772 * (_1733.z + (-0.5));
        float _1782 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1740.x + (-0.5));
        float _1784 = _1782 * (_1740.y + (-0.5));
        float _1785 = _1782 * (_1740.z + (-0.5));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = _1753 * 0.5;
        float _1790 = _1763 * 0.5;
        float _1791 = _1773 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_1038, _1039, _1040), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4419 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1816 + 1.0))) + _1821) * _1786;
        float _1831 = _1754 * 0.5;
        float _1832 = _1764 * 0.5;
        float _1833 = _1774 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1038, _1039, _1040), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4452 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1858 + 1.0))) + _1863) * _1787;
        float _1873 = _1755 * 0.5;
        float _1874 = _1765 * 0.5;
        float _1875 = _1775 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1038, _1039, _1040), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4485 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1900 + 1.0))) + _1905) * _1788;
        _1922 = _1755;
        _1923 = _1754;
        _1924 = _1753;
        _1925 = _1765;
        _1926 = _1764;
        _1927 = _1763;
        _1928 = _1775;
        _1929 = _1774;
        _1930 = _1773;
        _1931 = _1788;
        _1932 = _1787;
        _1933 = _1786;
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
    }
    else
    {
        _1922 = _1616;
        _1923 = _1616;
        _1924 = _1616;
        _1925 = _1616;
        _1926 = _1616;
        _1927 = _1616;
        _1928 = _1616;
        _1929 = _1616;
        _1930 = _1616;
        _1931 = _1616;
        _1932 = _1616;
        _1933 = _1616;
        _1934 = 0.0;
        _1935 = 0.0;
        _1936 = 0.0;
    }
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1628)) + _1628;
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1629)) + _1629;
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1630)) + _1630;
    float _1969 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1946));
    float _1990 = _1225 * 0.5;
    float _1991 = _1226 * 0.5;
    float _1992 = _1227 * 0.5;
    float _1993 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _1996 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _1999 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _2033;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2006 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1615, _1619, _1622, _1625));
        float _2010 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1617, _1620, _1623, _1626));
        float _2014 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1618, _1621, _1624, _1627));
        float _2021 = dot(vec4(cbModelParam._m0[39u]), vec4(_1990, _1991, _1992, 1.0));
        _2033 = dot(vec3(isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2021) ? 0.0 : (isnan(0.0) ? _2021 : max(0.0, _2021))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2033 = 1.0;
    }
    float _2044;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2035 = dot(vec4(cbModelParam._m0[40u]), vec4(_1990, _1991, _1992, 1.0));
        _2044 = dot(vec3(isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2035) ? 0.0 : (isnan(0.0) ? _2035 : max(0.0, _2035))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2044 = 1.0;
    }
    float _2048 = (_2044 * cbModelParam._m0[1u].x) + (_2033 * (1.0 - cbModelParam._m0[1u].x));
    float _2058 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2059 = isnan(_2058) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2058 : min(cbModelParam._m0[25u].z, _2058));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2106 = fma(_1287, cbModelParam._m0[13u].z, fma(_1283, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1279)) + cbModelParam._m0[13u].w;
        float _2110 = fma(_1287, cbModelParam._m0[14u].z, fma(_1283, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1279)) + cbModelParam._m0[14u].w;
        float _2114 = fma(_1287, cbModelParam._m0[15u].z, fma(_1283, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1279)) + cbModelParam._m0[15u].w;
        float _2117 = fma(_1227, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1225));
        float _2120 = fma(_1227, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1225));
        float _2123 = fma(_1227, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1225));
        float _2151;
        if (_2117 > 0.0)
        {
            _2151 = abs((1.0 - _2106) / _2117);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2106 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2151 = frontier_phi_19_17_ladder;
        }
        float _2374;
        if (_2120 > 0.0)
        {
            _2374 = abs((1.0 - _2110) / _2120);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2110 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2374 = frontier_phi_28_24_ladder;
        }
        float _2631;
        if (_2123 > 0.0)
        {
            _2631 = abs((1.0 - _2114) / _2123);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2114 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2631 = frontier_phi_40_35_ladder;
        }
        float _2633 = isnan(_2374) ? _2151 : (isnan(_2151) ? _2374 : min(_2151, _2374));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _2117) + _2106;
        float _2639 = (_2634 * _2120) + _2110;
        float _2640 = (_2634 * _2123) + _2114;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2641;
        float _2645 = _2641 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 > _2645) || ((_2639 < _2643) || ((_2638 < _2643) || (_2638 > _2645))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2640, cbModelParam._m0[9u].z, fma(_2639, cbModelParam._m0[9u].y, _2638 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2640, cbModelParam._m0[10u].z, fma(_2639, cbModelParam._m0[10u].y, _2638 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2640, cbModelParam._m0[11u].z, fma(_2639, cbModelParam._m0[11u].y, _2638 * cbModelParam._m0[11u].x))), _2059);
            frontier_phi_18_40_ladder = _2768.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2768.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2768.x * cbModelParam._m0[1u].y;
        }
        _2139 = frontier_phi_18_40_ladder_2;
        _2141 = frontier_phi_18_40_ladder_1;
        _2143 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2127 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1225, _1226, _1227), _2059);
        _2139 = _2127.x * cbModelParam._m0[1u].y;
        _2141 = _2127.y * cbModelParam._m0[1u].y;
        _2143 = _2127.z * cbModelParam._m0[1u].y;
    }
    float _2147 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2148 = isnan(_2147) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2147 : min(cbModelParam._m0[25u].w, _2147));
    float _2237;
    float _2239;
    float _2241;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2201 = fma(_1287, cbModelParam._m0[21u].z, fma(_1283, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1279)) + cbModelParam._m0[21u].w;
        float _2205 = fma(_1287, cbModelParam._m0[22u].z, fma(_1283, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1279)) + cbModelParam._m0[22u].w;
        float _2209 = fma(_1287, cbModelParam._m0[23u].z, fma(_1283, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1279)) + cbModelParam._m0[23u].w;
        float _2212 = fma(_1227, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1225));
        float _2215 = fma(_1227, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1225));
        float _2218 = fma(_1227, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1225));
        float _2379;
        if (_2212 > 0.0)
        {
            _2379 = abs((1.0 - _2201) / _2212);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2201 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2379 = frontier_phi_30_26_ladder;
        }
        float _2658;
        if (_2215 > 0.0)
        {
            _2658 = abs((1.0 - _2205) / _2215);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2215 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2205 + 1.0) / _2215);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2658 = frontier_phi_42_37_ladder;
        }
        float _2871;
        if (_2218 > 0.0)
        {
            _2871 = abs((1.0 - _2209) / _2218);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2218 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2209 + 1.0) / _2218);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2871 = frontier_phi_51_48_ladder;
        }
        float _2873 = isnan(_2658) ? _2379 : (isnan(_2379) ? _2658 : min(_2379, _2658));
        float _2874 = isnan(_2871) ? _2873 : (isnan(_2873) ? _2871 : min(_2873, _2871));
        float _2878 = (_2874 * _2212) + _2201;
        float _2879 = (_2874 * _2215) + _2205;
        float _2880 = (_2874 * _2218) + _2209;
        float _2881 = _2874 * 9.9999997473787516355514526367188e-05;
        float _2882 = (-1.0) - _2881;
        float _2884 = _2881 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2880 > _2884) || ((_2880 < _2882) || ((_2879 > _2884) || ((_2879 < _2882) || ((_2878 < _2882) || (_2878 > _2884))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2880, cbModelParam._m0[17u].z, fma(_2879, cbModelParam._m0[17u].y, _2878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2880, cbModelParam._m0[18u].z, fma(_2879, cbModelParam._m0[18u].y, _2878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2880, cbModelParam._m0[19u].z, fma(_2879, cbModelParam._m0[19u].y, _2878 * cbModelParam._m0[19u].x))), _2148);
            frontier_phi_27_51_ladder = _3079.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3079.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3079.x * cbModelParam._m0[1u].z;
        }
        _2237 = frontier_phi_27_51_ladder_2;
        _2239 = frontier_phi_27_51_ladder_1;
        _2241 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2221 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1225, _1226, _1227), _2148);
        _2237 = _2221.x * cbModelParam._m0[1u].z;
        _2239 = _2221.y * cbModelParam._m0[1u].z;
        _2241 = _2221.z * cbModelParam._m0[1u].z;
    }
    float _2254 = (((_1250 * _1202) + _1251) * _1217) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2256 = (((_1250 * _1204) + _1251) * _1217) * ((cbModelParam._m0[1u].w * (_2239 - _2141)) + _2141);
    float _2258 = (((_1250 * _1205) + _1251) * _1217) * ((cbModelParam._m0[1u].w * (_2241 - _2143)) + _2143);
    float _2261 = fma(_2258, cbSceneParam._m0[89u].z, fma(_2256, cbSceneParam._m0[89u].y, _2254 * cbSceneParam._m0[89u].x));
    float _2264 = fma(_2258, cbSceneParam._m0[90u].z, fma(_2256, cbSceneParam._m0[90u].y, _2254 * cbSceneParam._m0[90u].x));
    float _2267 = fma(_2258, cbSceneParam._m0[91u].z, fma(_2256, cbSceneParam._m0[91u].y, _2254 * cbSceneParam._m0[91u].x));
    vec4 _2275 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1139, _1140));
    float _2277 = _2275.w;
    float _2289 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2277);
    float _2290 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2277);
    float _2291 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2277);
    uvec4 _2295 = floatBitsToUint(cbInstanceData._m0[_1177 + 5u]);
    uint _2297 = _2295.x * 14u;
    uint _2298 = _2297 + 13u;
    float _2305 = _1217 + (-1.0);
    float _2310 = (cbLight._m0[_2298].x * _2305) + 1.0;
    float _2311 = (cbLight._m0[_2298].y * _2305) + 1.0;
    float _2312 = (cbLight._m0[_2298].z * _2305) + 1.0;
    float _2313 = (cbLight._m0[_2298].w * _2305) + 1.0;
    uint _2314 = _2297 + 5u;
    float _2320 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    uint _2324 = _2297 + 4u;
    float _2333 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2337 = _2297 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1038, _1039, _1040));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_1038, _1039, _1040));
    float _4621 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4632 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2314].x * _2320) * _2358) + (((cbLight._m0[_2324].x * _2289) * _2333) * _2356);
    float _2366 = ((_2320 * cbLight._m0[_2314].y) * _2358) + (((cbLight._m0[_2324].y * _2290) * _2333) * _2356);
    float _2367 = ((_2320 * cbLight._m0[_2314].z) * _2358) + (((cbLight._m0[_2324].z * _2291) * _2333) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2297 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2373)
    {
        _2384 = _2365;
        _2386 = _2366;
        _2388 = _2367;
    }
    else
    {
        uint _2392 = _2297 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2297 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4643 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2411 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2365;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2366;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2367;
    }
    bool _2391 = _2371.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2391)
    {
        _2429 = _2384;
        _2431 = _2386;
        _2433 = _2388;
    }
    else
    {
        uint _2602 = _2297 + 7u;
        float _2618 = (dot(vec3(cbLight._m0[_2297 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4659 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2621 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2429 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2384;
        _2431 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2386;
        _2433 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2388;
    }
    uint _2436 = _2297 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1041) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2297].x + _1122;
    float _2452 = cbLight._m0[_2297].y + _1123;
    float _2453 = cbLight._m0[_2297].z + _1124;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2297].xyz));
    float _4675 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _4686 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _2465 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2466 = dot(vec3(_1038, _1039, _1040), vec3(_2458, _2459, _2460));
    float _4697 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2458, _2459, _2460));
    float _4708 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
    float _2487 = 0.959999978542327880859375 - _1199;
    float _2489 = 0.959999978542327880859375 - _1200;
    float _2490 = 0.959999978542327880859375 - _1201;
    float _2497 = 1.0 - _2450;
    float _2508 = (0.5 / (((_2465 * ((_2464 * _2497) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2497) + _2450) * _2464))) * _2464;
    float _4719 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2524 = _2297 + 9u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _1041) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2337].x + _1122;
    float _2538 = cbLight._m0[_2337].y + _1123;
    float _2539 = cbLight._m0[_2337].z + _1124;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2337].xyz));
    float _4730 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2551 = dot(vec3(_1038, _1039, _1040), vec3(_2544, _2545, _2546));
    float _4741 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2544, _2545, _2546));
    float _4752 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2536 * _2536;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
    float _2577 = 1.0 - _2536;
    float _2587 = (0.5 / (((_2465 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2577) + _2536) * _2550))) * _2550;
    float _4763 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2589 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    float _2599 = (((((_2570 * _2487) + _1202) * cbLight._m0[_2524].x) * _2589) * _2320) + ((((cbLight._m0[_2436].x * _2289) * ((_2486 * _2487) + _1202)) * _2510) * _2333);
    float _2600 = (((((_2570 * _2489) + _1204) * cbLight._m0[_2524].y) * _2589) * _2320) + ((((cbLight._m0[_2436].y * _2290) * ((_2486 * _2489) + _1204)) * _2510) * _2333);
    float _2601 = (((((_2570 * _2490) + _1205) * cbLight._m0[_2524].z) * _2589) * _2320) + ((((cbLight._m0[_2436].z * _2291) * ((_2486 * _2490) + _1205)) * _2510) * _2333);
    float _2663;
    float _2665;
    float _2667;
    if (_2373)
    {
        _2663 = _2599;
        _2665 = _2600;
        _2667 = _2601;
    }
    else
    {
        uint _2669 = _2297 + 2u;
        uint _2673 = _2297 + 10u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _1041) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _1122;
        float _2690 = cbLight._m0[_2669].y + _1123;
        float _2691 = cbLight._m0[_2669].z + _1124;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2669].xyz));
        float _4774 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2703 = dot(vec3(_1038, _1039, _1040), vec3(_2696, _2697, _2698));
        float _4785 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4796 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2729 = 1.0 - _2688;
        float _2739 = (0.5 / (((_2465 * ((_2702 * _2729) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2729) + _2688) * _2702))) * _2702;
        float _4807 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2663 = (((((_2722 * _2487) + _1202) * cbLight._m0[_2673].x) * _2741) * _2742) + _2599;
        _2665 = (((((_2722 * _2489) + _1204) * cbLight._m0[_2673].y) * _2741) * _2742) + _2600;
        _2667 = (((((_2722 * _2490) + _1205) * cbLight._m0[_2673].z) * _2741) * _2742) + _2601;
    }
    float _2777;
    float _2779;
    float _2781;
    if (_2391)
    {
        _2777 = _2663;
        _2779 = _2665;
        _2781 = _2667;
    }
    else
    {
        uint _2788 = _2297 + 3u;
        uint _2792 = _2297 + 11u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _1041) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _1122;
        float _2809 = cbLight._m0[_2788].y + _1123;
        float _2810 = cbLight._m0[_2788].z + _1124;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2788].xyz));
        float _4823 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2822 = dot(vec3(_1038, _1039, _1040), vec3(_2815, _2816, _2817));
        float _4834 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4845 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2465 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2848) + _2807) * _2821))) * _2821;
        float _4856 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2777 = (((((_2841 * _2487) + _1202) * cbLight._m0[_2792].x) * _2860) * _2861) + _2663;
        _2779 = (((((_2841 * _2489) + _1204) * cbLight._m0[_2792].y) * _2860) * _2861) + _2665;
        _2781 = (((((_2841 * _2490) + _1205) * cbLight._m0[_2792].z) * _2860) * _2861) + _2667;
    }
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_2295.y == 0u)
    {
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2937 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2936;
        float _2938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2936;
        float _2939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2936;
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.x;
        uint _2963 = uint((float(_2951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1140) / _2952))) + floor(float(uint(cbSceneParam._m0[85u].x * _1139) / _2952)));
        float _2973 = (log2(_2939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2974 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        uint _2977 = uint(isnan(14.0) ? _2974 : (isnan(_2974) ? 14.0 : min(_2974, 14.0)));
        uvec4 _2982 = texelFetch(g_lightClusterGridBuffer, int(((_2977 << 2u) + (_2963 << 6u)) >> 2u));
        uint _2983 = _2982.x;
        uint _2984 = _2951.z;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((((1u << ((_2984 >> 4u) & 15u)) + 4294967295u) & _2983) == 0u) || ((_2984 & 240u) == 0u))
        {
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
        }
        else
        {
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            uint _3243 = 0u;
            uint _3252;
            bool _3253;
            for (;;)
            {
                _3252 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                _3253 = _3252 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3253)
                {
                    frontier_phi_68_pred = _3237;
                    frontier_phi_68_pred_1 = _3242;
                    frontier_phi_68_pred_2 = _3241;
                    frontier_phi_68_pred_3 = _3240;
                    frontier_phi_68_pred_4 = _3239;
                    frontier_phi_68_pred_5 = _3238;
                }
                else
                {
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    uint _3388;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3252;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    for (;;)
                    {
                        uint _3392 = uint(findLSB(_3388)) + (_3243 << 5u);
                        uint _3389 = (_3388 + 4294967295u) & _3388;
                        uint _3394 = _3392 * 48u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3414 = (_3392 * 48u) + 4u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3433 = (_3392 * 48u) + 8u;
                        vec3 _3444 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x));
                        float _3448 = _3408.x - _2937;
                        float _3449 = _3408.y - _2938;
                        float _3450 = _3408.z - _2939;
                        float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                        float _3454 = inversesqrt(_3451);
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3458 = dot(vec3(_1158, _1161, _1164), vec3(_3455, _3456, _3457));
                        float _3463 = 1.0 - (_3451 * _3408.w);
                        float _4882 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3465 = sqrt(_3451) * _3427.w;
                        float _3468 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3458) + _3469;
                        float _3475 = _3465 * _3465;
                        float _3479 = ((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3464) / ((_3475 * 0.699999988079071044921875) + 1.0);
                        float _3483 = (-0.0) - _2937;
                        float _3484 = (-0.0) - _2938;
                        float _3485 = (-0.0) - _2939;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3500 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                        float _3501 = 1.0 - _1233;
                        float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                        float _3509 = _3508 * _3508;
                        float _3510 = _3509 * _3509;
                        float _3511 = _3490 + _3455;
                        float _3512 = _3491 + _3456;
                        float _3513 = _3492 + _3457;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3521 = dot(vec3(_1158, _1161, _1164), vec3(_3490, _3491, _3492));
                        float _4898 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3524 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3525 = dot(vec3(_1158, _1161, _1164), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                        float _4909 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                        float _3533 = _3468 * _3509;
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3458) + _3534;
                        float _4920 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3539 = 1.0 - _3509;
                        float _3549 = (0.5 / (((_3538 * ((_3524 * _3539) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3509) * _3524))) * _3538;
                        float _4931 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3560 = (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3532 * _3532) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125))) * _3464;
                        _3312 = (_3479 * _3427.x) + _3385;
                        _3313 = (_3479 * _3427.y) + _3386;
                        _3314 = (_3479 * _3427.z) + _3387;
                        _3309 = (_3560 * _3444.x) + _3382;
                        _3310 = (_3560 * _3444.y) + _3383;
                        _3311 = (_3560 * _3444.z) + _3384;
                        if (_3389 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3389;
                        }
                    }
                    frontier_phi_68_pred = _3309;
                    frontier_phi_68_pred_1 = _3314;
                    frontier_phi_68_pred_2 = _3313;
                    frontier_phi_68_pred_3 = _3312;
                    frontier_phi_68_pred_4 = _3311;
                    frontier_phi_68_pred_5 = _3310;
                }
                _3085 = frontier_phi_68_pred;
                _3095 = frontier_phi_68_pred_1;
                _3093 = frontier_phi_68_pred_2;
                _3091 = frontier_phi_68_pred_3;
                _3089 = frontier_phi_68_pred_4;
                _3087 = frontier_phi_68_pred_5;
                uint _3244 = _3243 + 1u;
                if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3237 = _3085;
                    _3238 = _3087;
                    _3239 = _3089;
                    _3240 = _3091;
                    _3241 = _3093;
                    _3242 = _3095;
                    _3243 = _3244;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
        }
        uvec4 _3098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3099 = _3098.z;
        uint _3101 = (_3099 >> 8u) & 15u;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((4294967295u << _3101) & _2983) == 0u)
        {
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
        }
        else
        {
            float _3230 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
            float _3231 = _3230 * _2937;
            float _3232 = _3230 * _2938;
            float _3233 = _3230 * _2939;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3101 < ((_3099 >> 12u) & 15u))
            {
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3365 = _3084;
                float _3366 = _3086;
                float _3367 = _3088;
                float _3368 = _3090;
                float _3369 = _3092;
                float _3370 = _3094;
                uint _3371 = _3101;
                uint _3380;
                bool _3381;
                for (;;)
                {
                    _3380 = texelFetch(g_lightClassification, int((((_2977 << 5u) + (_2963 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                    _3381 = _3380 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3381)
                    {
                        frontier_phi_79_pred = _3370;
                        frontier_phi_79_pred_1 = _3369;
                        frontier_phi_79_pred_2 = _3368;
                        frontier_phi_79_pred_3 = _3367;
                        frontier_phi_79_pred_4 = _3366;
                        frontier_phi_79_pred_5 = _3365;
                    }
                    else
                    {
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3587 = _3365;
                        float _3588 = _3366;
                        float _3589 = _3367;
                        float _3590 = _3368;
                        float _3591 = _3369;
                        float _3592 = _3370;
                        uint _3593 = _3380;
                        uint _3594;
                        vec4 _3619;
                        float _3620;
                        vec4 _3635;
                        vec3 _3647;
                        vec4 _3662;
                        vec4 _3677;
                        float _3723;
                        bool _3724;
                        for (;;)
                        {
                            uint _3604 = ((_3371 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3593));
                            _3594 = (_3593 + 4294967295u) & _3593;
                            uint _3606 = _3604 * 40u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3620 = _3619.w;
                            uint _3622 = (_3604 * 40u) + 4u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3604 * 40u) + 8u;
                            _3647 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x));
                            uint _3649 = (_3604 * 40u) + 16u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3604 * 40u) + 20u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3604 * 40u) + 24u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3698 = (_3604 * 40u) + 28u;
                            vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            _3723 = fma(_2939, _3711.z, fma(_2938, _3711.y, _3711.x * _2937)) + _3711.w;
                            _3724 = !((fma(_2939, _3692.z, fma(_2938, _3692.y, _3692.x * _2937)) + _3692.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3724)
                            {
                                float _3751 = _3619.x - _2937;
                                float _3752 = _3619.y - _2938;
                                float _3753 = _3619.z - _2939;
                                float _3754 = dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753));
                                float _3757 = inversesqrt(_3754);
                                float _3758 = _3757 * _3751;
                                float _3759 = _3757 * _3752;
                                float _3760 = _3757 * _3753;
                                float _3764 = 1.0 - (_3754 / (_3620 * _3620));
                                float _4942 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3769 = sqrt(_3754) * _3635.w;
                                float _3771 = 1.39999997615814208984375 / (_3769 + 1.39999997615814208984375);
                                float _3772 = _3771 * _3771;
                                float _3775 = ((1.0 - _3772) * dot(vec3(_3758, _3759, _3760), vec3(_1158, _1161, _1164))) + _3772;
                                float _3778 = _3769 * _3769;
                                float _3782 = (fma(_2939, _3662.z, fma(_2938, _3662.y, _3662.x * _2937)) + _3662.w) / _3723;
                                float _3783 = (fma(_2939, _3677.z, fma(_2938, _3677.y, _3677.x * _2937)) + _3677.w) / _3723;
                                float _3787 = 1.0 - dot(vec2(_3782, _3783), vec2(_3782, _3783));
                                float _4958 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3789 = _3788 * (((isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0))) * _3765) / ((_3778 * 0.699999988079071044921875) + 1.0));
                                float _3801 = exp2(log2(1.0 / ((_3778 * 3.5) + 5.0)) * 0.25);
                                float _3802 = 1.0 - _1233;
                                float _3809 = sqrt(1.0 - ((1.0 - (_3802 * _3802)) * (1.0 - (_3801 * _3801))));
                                float _3810 = _3809 * _3809;
                                float _3811 = _3810 * _3810;
                                float _3812 = _3758 - _3231;
                                float _3813 = _3759 - _3232;
                                float _3814 = _3760 - _3233;
                                float _3818 = inversesqrt(dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814)));
                                float _3822 = dot(vec3(_1158, _1161, _1164), vec3((-0.0) - _3231, (-0.0) - _3232, (-0.0) - _3233));
                                float _4969 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3825 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3826 = dot(vec3(_1158, _1161, _1164), vec3(_3818 * _3812, _3818 * _3813, _3818 * _3814));
                                float _4980 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3829 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3833 = ((_3829 * _3829) * (_3811 + (-1.0))) + 1.0;
                                float _3834 = _3771 * _3810;
                                float _3835 = _3834 * _3834;
                                float _3841 = ((1.0 - _3835) * dot(vec3(_1158, _1161, _1164), vec3(_3758, _3759, _3760))) + _3835;
                                float _4991 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3843 = 1.0 - _3810;
                                float _3853 = (0.5 / (((_3842 * ((_3825 * _3843) + _3810)) + 9.9999999392252902907785028219223e-09) + (((_3842 * _3843) + _3810) * _3825))) * _3842;
                                float _5002 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3863 = (_3788 * _3765) * (((_3811 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3833 * _3833) * ((_3778 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3789 * _3635.y;
                                frontier_phi_85_pred_1 = _3789 * _3635.x;
                                frontier_phi_85_pred_2 = _3863 * _3647.z;
                                frontier_phi_85_pred_3 = _3863 * _3647.y;
                                frontier_phi_85_pred_4 = _3863 * _3647.x;
                                frontier_phi_85_pred_5 = _3789 * _3635.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3871 = frontier_phi_85_pred;
                            _3870 = frontier_phi_85_pred_1;
                            _3869 = frontier_phi_85_pred_2;
                            _3868 = frontier_phi_85_pred_3;
                            _3867 = frontier_phi_85_pred_4;
                            _3872 = frontier_phi_85_pred_5;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            if (_3594 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3594;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3579;
                        frontier_phi_79_pred_1 = _3578;
                        frontier_phi_79_pred_2 = _3577;
                        frontier_phi_79_pred_3 = _3576;
                        frontier_phi_79_pred_4 = _3575;
                        frontier_phi_79_pred_5 = _3574;
                    }
                    _3216 = frontier_phi_79_pred;
                    _3214 = frontier_phi_79_pred_1;
                    _3212 = frontier_phi_79_pred_2;
                    _3210 = frontier_phi_79_pred_3;
                    _3208 = frontier_phi_79_pred_4;
                    _3206 = frontier_phi_79_pred_5;
                    uint _3372 = _3371 + 1u;
                    if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3365 = _3206;
                        _3366 = _3208;
                        _3367 = _3210;
                        _3368 = _3212;
                        _3369 = _3214;
                        _3370 = _3216;
                        _3371 = _3372;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3210;
                frontier_phi_60_61_ladder_1 = _3216;
                frontier_phi_60_61_ladder_2 = _3214;
                frontier_phi_60_61_ladder_3 = _3212;
                frontier_phi_60_61_ladder_4 = _3208;
                frontier_phi_60_61_ladder_5 = _3206;
            }
            else
            {
                frontier_phi_60_61_ladder = _3088;
                frontier_phi_60_61_ladder_1 = _3094;
                frontier_phi_60_61_ladder_2 = _3092;
                frontier_phi_60_61_ladder_3 = _3090;
                frontier_phi_60_61_ladder_4 = _3086;
                frontier_phi_60_61_ladder_5 = _3084;
            }
            _3205 = frontier_phi_60_61_ladder_5;
            _3207 = frontier_phi_60_61_ladder_4;
            _3209 = frontier_phi_60_61_ladder;
            _3211 = frontier_phi_60_61_ladder_3;
            _3213 = frontier_phi_60_61_ladder_2;
            _3215 = frontier_phi_60_61_ladder_1;
        }
        float _3220 = isnan(1.0) ? _1217 : (isnan(_1217) ? 1.0 : min(_1217, 1.0));
        _2996 = (_3220 * _3211) + _2429;
        _2998 = (_3220 * _3213) + _2431;
        _3000 = (_3220 * _3215) + _2433;
        _3002 = ((_3205 * _1202) * _3220) + _2777;
        _3004 = ((_3207 * _1204) * _3220) + _2779;
        _3006 = ((_3209 * _1205) * _3220) + _2781;
    }
    else
    {
        _2996 = _2429;
        _2998 = _2431;
        _3000 = _2433;
        _3002 = _2777;
        _3004 = _2779;
        _3006 = _2781;
    }
    float _5018 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _5029 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5040 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _3023 = ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2996 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1217))) + ((_3002 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2048)) * cbPerFrame._m0[3u].x);
    float _3024 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2998 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1217))) + ((_3004 + ((isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))) * _2048)) * cbPerFrame._m0[3u].x);
    float _3025 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_3000 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1217))) + ((_3006 + ((isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0))) * _2048)) * cbPerFrame._m0[3u].x);
    uint _3026 = _1177 + 6u;
    float _3034 = _1139 / cbSceneParam._m0[86u].x;
    float _3035 = _1140 / cbSceneParam._m0[86u].y;
    vec4 _3049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3051 = _3049.x;
    float _3052 = _3049.y;
    float _3053 = _3049.z;
    float _3054 = _3049.w;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3109 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3110 = _3109 / _1065;
        float _3121 = _3110 * _1115;
        float _3122 = _1116 * _3110;
        float _3123 = (-0.0) - _3122;
        float _3125 = _3110 * _1117;
        float _3127 = (cbSceneParam._m0[77u].w * _3123) / _3109;
        float _3128 = _3127 + cbSceneParam._m0[79u].w;
        float _3129 = cbSceneParam._m0[79u].w - _3122;
        float _3135 = sqrt(((_3121 * _3121) + (_3122 * _3122)) + (_3125 * _3125));
        float _3138 = (1.0 - (cbSceneParam._m0[77u].w / _3109)) * _3135;
        float _3143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3322;
        if (abs((_3123 - _3127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3322 = ((((_3128 > 0.0) ? exp2(_3143 * _3128) : (2.0 - exp2(_3145 * _3128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3138;
        }
        else
        {
            float _3266 = 1.0 / cbSceneParam._m0[80u].x;
            float _3267 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : max(_3128, _3129));
            float _3268 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : min(_3128, _3129));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            _3322 = ((abs(_3135 / _3123) * cbSceneParam._m0[80u].y) * ((((_3277 - _3278) * 2.0) - ((exp2(_3143 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0)))) - exp2(_3143 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))))) * _3266)) - ((exp2(_3145 * _3277) - exp2(_3145 * _3278)) * _3266))) + (_3138 * cbSceneParam._m0[80u].z);
        }
        vec4 _3324 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, 1.0), 0.0);
        float _3333 = exp2((_3322 * (-1.44269502162933349609375)) * (1.0 - _3324.w));
        float _3334 = log2(_3333);
        float _3350 = log2(_3054);
        _3147 = (exp2(_3350 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].x)) * _3324.x) / cbSceneParam._m0[78u].x)) + _3051;
        _3149 = (exp2(_3350 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].y)) * _3324.y) / cbSceneParam._m0[78u].y)) + _3052;
        _3151 = (exp2(_3350 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].z)) * _3324.z) / cbSceneParam._m0[78u].z)) + _3053;
        _3153 = _3333 * _3054;
    }
    else
    {
        _3147 = _3051;
        _3149 = _3052;
        _3151 = _3053;
        _3153 = _3054;
    }
    bool _3360;
    vec4 _3163;
    vec4 _3185;
    float _3187;
    float _3191;
    float _3192;
    float _3193;
    float _3194;
    bool _3204;
    for (;;)
    {
        _3163 = cbMatDynParam._m0[0u];
        float _3165 = roundEven(_3163.y);
        bool _3166 = _3165 == 3.0;
        float _3167 = log2(_3153);
        float _3174 = exp2(_3167 * cbSceneParam._m0[78u].x) * _3023;
        float _3175 = exp2(_3167 * cbSceneParam._m0[78u].y) * _3024;
        float _3176 = exp2(_3167 * cbSceneParam._m0[78u].z) * _3025;
        float _3183 = _1128 + (-0.5);
        _3185 = cbMtdParam._m0[1u];
        _3187 = _3185.y * _3183;
        float _3190 = (_3165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3191 = _3190 * (_3166 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3147)));
        _3192 = _3190 * (_3166 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3149)));
        _3193 = _3190 * (_3166 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3151)));
        _3194 = _3183 * 0.999000012874603271484375;
        _3204 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3204)
        {
            if ((cbInstanceData._m0[_1177 + 7u].x + _3194) < 0.5)
            {
                _3360 = true;
                break;
            }
        }
        uint _3301 = _1178 + uint(_3163.w);
        if ((cbInstanceData._m0[_3301].w < 1.0) && ((cbInstanceData._m0[_3301].w + _3194) < 0.5))
        {
            _3360 = true;
            break;
        }
        if ((_3187 + 1.0) < _3185.x)
        {
            _3360 = true;
            break;
        }
        _3360 = false;
        break;
    }
    float _3565;
    if (_3360)
    {
        discard_state = true;
        _3565 = 0.0;
    }
    else
    {
        _3565 = cbInstanceData._m0[_3026].w;
    }
    SV_Target.x = _3191;
    SV_Target.y = _3192;
    SV_Target.z = _3193;
    SV_Target.w = _3565;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3026].w;
    discard_exit();
}


