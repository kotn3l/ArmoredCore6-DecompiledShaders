#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1504;
float _3880;
float _3881;
float _3882;
float _3883;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _303 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _326 = log2(0.0);
    float _328 = exp2(_326 * cbMtdParam._m0[23u].x);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    vec4 _353 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _356 = _353.y;
    float _359 = (_353.x + (-0.02500000037252902984619140625)) * 8.0;
    float _363 = roundEven(5.0 - _359);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _378 = floor(_365);
    vec4 _381 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _378));
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[17u].x;
    _199[0u] = cbMtdParam._m0[17u].y;
    _200[0u] = cbMtdParam._m0[17u].z;
    _198[1u] = cbMtdParam._m0[15u].x;
    _199[1u] = cbMtdParam._m0[15u].y;
    _200[1u] = cbMtdParam._m0[15u].z;
    _198[2u] = cbMtdParam._m0[14u].x;
    _199[2u] = cbMtdParam._m0[14u].y;
    _200[2u] = cbMtdParam._m0[14u].z;
    _198[3u] = cbMtdParam._m0[13u].x;
    _199[3u] = cbMtdParam._m0[13u].y;
    _200[3u] = cbMtdParam._m0[13u].z;
    _198[4u] = cbMtdParam._m0[12u].x;
    _199[4u] = cbMtdParam._m0[12u].y;
    _200[4u] = cbMtdParam._m0[12u].z;
    _198[5u] = cbMtdParam._m0[18u].x;
    _199[5u] = cbMtdParam._m0[18u].y;
    _200[5u] = cbMtdParam._m0[18u].z;
    float _445 = roundEven(_359);
    float _446 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    uint _448 = uint(int(isnan(5.0) ? _446 : (isnan(_446) ? 5.0 : min(_446, 5.0))));
    vec4 _478 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _489 = cbMtdParam._m0[9u].x * _478.x;
    float _490 = cbMtdParam._m0[9u].y * _478.y;
    float _491 = cbMtdParam._m0[9u].z * _478.z;
    float _498 = ((((((_198[_448] - cbMtdParam._m0[10u].x) * _356) + cbMtdParam._m0[10u].x) * _381.x) - _489) * _341) + _489;
    float _499 = ((((((_199[_448] - cbMtdParam._m0[10u].y) * _356) + cbMtdParam._m0[10u].y) * _381.y) - _490) * _341) + _490;
    float _500 = ((((((_200[_448] - cbMtdParam._m0[10u].z) * _356) + cbMtdParam._m0[10u].z) * _381.z) - _491) * _341) + _491;
    float _506 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _519 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _538 = (((cbMtdParam._m0[16u].x * _519.x) - _498) * _506) + _498;
    float _539 = (((cbMtdParam._m0[16u].y * _519.y) - _499) * _506) + _499;
    float _540 = (((cbMtdParam._m0[16u].z * _519.z) - _500) * _506) + _500;
    vec4 _553 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _573 = (((cbMtdParam._m0[19u].x * _553.x) - _538) * _330) + _538;
    float _574 = (((cbMtdParam._m0[19u].y * _553.y) - _539) * _330) + _539;
    float _575 = (((cbMtdParam._m0[19u].z * _553.z) - _540) * _330) + _540;
    vec4 _587 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _612 = (_318.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _587.x) - _573) * _305) + _573);
    float _614 = (_318.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _587.y) - _574) * _305) + _574);
    float _616 = (_318.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _587.z) - _575) * _305) + _575);
    float _620 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _629 = (_620 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _620))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3942 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _637 = ((cbMtdParam._m0[21u].x - _612) * _630) + _612;
    float _638 = ((cbMtdParam._m0[21u].y - _614) * _630) + _614;
    float _639 = ((cbMtdParam._m0[21u].z - _616) * _630) + _616;
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[29u].x;
    _194[0u] = cbMtdParam._m0[29u].y;
    _193[1u] = cbMtdParam._m0[31u].x;
    _194[1u] = cbMtdParam._m0[31u].y;
    _193[2u] = cbMtdParam._m0[30u].z;
    _194[2u] = cbMtdParam._m0[30u].w;
    _193[3u] = cbMtdParam._m0[30u].x;
    _194[3u] = cbMtdParam._m0[30u].y;
    _193[4u] = cbMtdParam._m0[29u].z;
    _194[4u] = cbMtdParam._m0[29u].w;
    float _679 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _681 = uint(int(isnan(4.0) ? _679 : (isnan(_679) ? 4.0 : min(_679, 4.0))));
    float _688 = ((_194[_681] - cbMtdParam._m0[22u].z) * _341) + cbMtdParam._m0[22u].z;
    float _691 = ((cbMtdParam._m0[22u].w - _688) * _506) + _688;
    float _694 = ((cbMtdParam._m0[25u].y - _691) * _330) + _691;
    float _697 = ((cbMtdParam._m0[26u].y - _694) * _305) + _694;
    float _699 = _697 - (_697 * _620);
    vec4 _715 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _378));
    vec4 _732 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _740 = cbMtdParam._m0[22u].x + _732.z;
    float _743 = (((_715.z + _193[_681]) - _740) * _341) + _740;
    vec4 _755 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _766 = (((_755.z - _743) + cbMtdParam._m0[28u].z) * _506) + _743;
    float _772 = ((((_292 * 2.0) * _766) - _766) * cbMtdParam._m0[24u].w) + _766;
    vec4 _784 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _795 = (((cbMtdParam._m0[23u].z + _784.z) - _772) * _330) + _772;
    vec4 _808 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _819 = (((_808.z - _795) + cbMtdParam._m0[26u].z) * _305) + _795;
    vec4 _834 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _849 = ((cbMtdParam._m0[27u].z * _620) * ((_834.z * cbMtdParam._m0[27u].y) - _819)) + _819;
    float _861 = ((_715.x - _734) * _341) + _734;
    float _862 = ((_715.y - _735) * _341) + _735;
    float _867 = ((_755.x - _861) * _506) + _861;
    float _868 = ((_755.y - _862) * _506) + _862;
    float _873 = ((_784.x - _867) * _330) + _867;
    float _874 = ((_784.y - _868) * _330) + _868;
    float _883 = ((((_808.x - _873) * _305) + _873) * 2.0) + (-1.0);
    float _884 = ((((_808.y - _874) * _305) + _874) * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _3963 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _890 = sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))));
    float _900 = ((cbMtdParam._m0[25u].z * ((_288.x * 2.0) + (-1.0))) + _883) + ((((_834.x * 2.0) + (-1.0)) * _620) * cbMtdParam._m0[27u].x);
    float _901 = ((cbMtdParam._m0[25u].z * ((_288.y * 2.0) + (-1.0))) + _884) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_834.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _903 = gl_FragCoord.x * 0.125;
    float _905 = gl_FragCoord.y * 0.125;
    float _915 = fma(_890, _235 * NORMAL.x, fma(_901, _242 * TANGENT.x, (_228 * _220) * _900));
    float _918 = fma(_890, _235 * NORMAL.y, fma(_901, _242 * TANGENT.y, (_228 * _221) * _900));
    float _921 = fma(_890, _235 * NORMAL.z, fma(_901, _242 * TANGENT.z, (_228 * _222) * _900));
    float _925 = inversesqrt(dot(vec3(_915, _918, _921), vec3(_915, _918, _921)));
    float _926 = _925 * _915;
    float _927 = _925 * _918;
    float _928 = _925 * _921;
    float _3974 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _929 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3996 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4007 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4018 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _933 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_903, _905)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _953 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1003 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _993);
    float _1004 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _993);
    float _1005 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _993);
    float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
    float _1010 = _1003 * _1009;
    float _1011 = _1004 * _1009;
    float _1012 = _1005 * _1009;
    vec4 _1014 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_903, _905));
    float _1016 = _1014.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1186 = sqrt(((_1003 * _1003) + (_1004 * _1004)) + (_1005 * _1005));
        float _1192 = (cbMatDynParam._m0[5u].x * _1186) + cbMatDynParam._m0[5u].y;
        float _4029 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1197 = (cbMatDynParam._m0[5u].z * _1186) + cbMatDynParam._m0[5u].w;
        float _4040 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) - _1193)) + _1193) < ((_1016 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1027 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1028 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1046 = fma(_928, cbSceneParam._m0[5u].z, fma(_927, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _926));
    float _1049 = fma(_928, cbSceneParam._m0[6u].z, fma(_927, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _926));
    float _1052 = fma(_928, cbSceneParam._m0[7u].z, fma(_927, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _926));
    uint _1065 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1066 = _1065 + 9u;
    uint _1067 = _1066 + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _4051 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1079 = 1.0 - _933;
    float _1080 = _1076 * _1079;
    float _1081 = _1077 * _1079;
    float _1082 = _1078 * _1079;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _933;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _933;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _933;
    float _1090 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    vec4 _1102 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1027, cbSceneParam._m0[86u].y * _1028));
    float _1105 = _1102.x * TEXCOORD_3.w;
    float _1106 = dot(vec3(_926, _927, _928), vec3(_1010, _1011, _1012));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _926) - _1010;
    float _1114 = (_1109 * _927) - _1011;
    float _1115 = (_1109 * _928) - _1012;
    float _1119 = abs(dot(vec3(_1010, _1011, _1012), vec3(_926, _927, _928)));
    float _4084 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_929);
    float _1132 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1138 = (1.0 - _1132) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1139 = _1132 * _1121;
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1503;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1228 = fma(_1175, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167));
        float _1232 = fma(_1175, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167));
        float _1236 = fma(_1175, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167));
        float _1261 = _1167 + _926;
        float _1262 = _1171 + _927;
        float _1263 = _1175 + _928;
        float _1273 = fma(_1263, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261)) - _1228;
        float _1274 = fma(_1263, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261)) - _1232;
        float _1275 = fma(_1263, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261)) - _1236;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1228 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1232 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[34u].z) + ((((((_1236 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1331 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1297.x + (-0.5));
        float _1333 = _1331 * (_1297.y + (-0.5));
        float _1334 = _1331 * (_1297.z + (-0.5));
        float _1341 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1304.x + (-0.5));
        float _1343 = _1341 * (_1304.y + (-0.5));
        float _1344 = _1341 * (_1304.z + (-0.5));
        float _1351 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1311.x + (-0.5));
        float _1353 = _1351 * (_1311.y + (-0.5));
        float _1354 = _1351 * (_1311.z + (-0.5));
        float _1361 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1318.x + (-0.5));
        float _1363 = _1361 * (_1318.y + (-0.5));
        float _1364 = _1361 * (_1318.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1385 = (dot(vec3(_926, _927, _928), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1395 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4132 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1397 + 1.0))) + _1402) * _1365;
        float _1412 = _1333 * 0.5;
        float _1413 = _1343 * 0.5;
        float _1414 = _1353 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_926, _927, _928), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4165 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1439 + 1.0))) + _1444) * _1366;
        float _1454 = _1334 * 0.5;
        float _1455 = _1344 * 0.5;
        float _1456 = _1354 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_926, _927, _928), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4198 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1481 + 1.0))) + _1486) * _1367;
        _1503 = _1334;
        _1505 = _1333;
        _1506 = _1332;
        _1507 = _1344;
        _1508 = _1343;
        _1509 = _1342;
        _1510 = _1354;
        _1511 = _1353;
        _1512 = _1352;
        _1513 = _1367;
        _1514 = _1366;
        _1515 = _1365;
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1504;
        _1505 = _1504;
        _1506 = _1504;
        _1507 = _1504;
        _1508 = _1504;
        _1509 = _1504;
        _1510 = _1504;
        _1511 = _1504;
        _1512 = _1504;
        _1513 = _1504;
        _1514 = _1504;
        _1515 = _1504;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1541 = fma(_1175, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167));
        float _1545 = fma(_1175, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167));
        float _1549 = fma(_1175, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167));
        float _1572 = _1167 + _926;
        float _1573 = _1171 + _927;
        float _1574 = _1175 + _928;
        float _1584 = fma(_1574, cbModelParam._m0[30u].z, fma(_1573, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1572)) - _1541;
        float _1585 = fma(_1574, cbModelParam._m0[31u].z, fma(_1573, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1572)) - _1545;
        float _1586 = fma(_1574, cbModelParam._m0[32u].z, fma(_1573, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1572)) - _1549;
        float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
        float _1603 = ((_1590 * _1584) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1541 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1590 * _1585) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1545 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1590 * _1586) / cbModelParam._m0[35u].z) + ((((((_1549 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        float _1640 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1607.x + (-0.5));
        float _1642 = _1640 * (_1607.y + (-0.5));
        float _1643 = _1640 * (_1607.z + (-0.5));
        float _1650 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1614.x + (-0.5));
        float _1652 = _1650 * (_1614.y + (-0.5));
        float _1653 = _1650 * (_1614.z + (-0.5));
        float _1660 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1621.x + (-0.5));
        float _1662 = _1660 * (_1621.y + (-0.5));
        float _1663 = _1660 * (_1621.z + (-0.5));
        float _1670 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1628.x + (-0.5));
        float _1672 = _1670 * (_1628.y + (-0.5));
        float _1673 = _1670 * (_1628.z + (-0.5));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = _1641 * 0.5;
        float _1678 = _1651 * 0.5;
        float _1679 = _1661 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_926, _927, _928), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4261 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1704 + 1.0))) + _1709) * _1674;
        float _1719 = _1642 * 0.5;
        float _1720 = _1652 * 0.5;
        float _1721 = _1662 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_926, _927, _928), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4294 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1746 + 1.0))) + _1751) * _1675;
        float _1761 = _1643 * 0.5;
        float _1762 = _1653 * 0.5;
        float _1763 = _1663 * 0.5;
        float _1764 = dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763));
        float _1769 = (_1764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1764);
        float _1777 = (dot(vec3(_926, _927, _928), vec3(_1769 * _1761, _1769 * _1762, _1769 * _1763)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1786 = sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1788 = _1787 * 2.0;
        float _1792 = (1.0 - _1787) / (_1787 + 1.0);
        float _4327 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1802 = ((((1.0 - _1793) * (_1788 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1788 + 1.0))) + _1793) * _1676;
        _1810 = _1643;
        _1811 = _1642;
        _1812 = _1641;
        _1813 = _1653;
        _1814 = _1652;
        _1815 = _1651;
        _1816 = _1663;
        _1817 = _1662;
        _1818 = _1661;
        _1819 = _1676;
        _1820 = _1675;
        _1821 = _1674;
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)));
    }
    else
    {
        _1810 = _1504;
        _1811 = _1504;
        _1812 = _1504;
        _1813 = _1504;
        _1814 = _1504;
        _1815 = _1504;
        _1816 = _1504;
        _1817 = _1504;
        _1818 = _1504;
        _1819 = _1504;
        _1820 = _1504;
        _1821 = _1504;
        _1822 = 0.0;
        _1823 = 0.0;
        _1824 = 0.0;
    }
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1516)) + _1516;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1517)) + _1517;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1518)) + _1518;
    float _1857 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1834));
    float _1878 = _1113 * 0.5;
    float _1879 = _1114 * 0.5;
    float _1880 = _1115 * 0.5;
    float _1881 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1884 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1887 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1921;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1894 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1503, _1507, _1510, _1513));
        float _1898 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1902 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1909 = dot(vec4(cbModelParam._m0[39u]), vec4(_1878, _1879, _1880, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1932;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1923 = dot(vec4(cbModelParam._m0[40u]), vec4(_1878, _1879, _1880, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1936 = (_1932 * cbModelParam._m0[1u].x) + (_1921 * (1.0 - cbModelParam._m0[1u].x));
    float _1946 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1946 : min(cbModelParam._m0[25u].z, _1946));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1994 = fma(_1175, cbModelParam._m0[13u].z, fma(_1171, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167)) + cbModelParam._m0[13u].w;
        float _1998 = fma(_1175, cbModelParam._m0[14u].z, fma(_1171, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167)) + cbModelParam._m0[14u].w;
        float _2002 = fma(_1175, cbModelParam._m0[15u].z, fma(_1171, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167)) + cbModelParam._m0[15u].w;
        float _2005 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2008 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2011 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2039;
        if (_2005 > 0.0)
        {
            _2039 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2039 = frontier_phi_19_17_ladder;
        }
        float _2241;
        if (_2008 > 0.0)
        {
            _2241 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2241 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2011 > 0.0)
        {
            _2495 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2497 = isnan(_2241) ? _2039 : (isnan(_2039) ? _2241 : min(_2039, _2241));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _2005) + _1994;
        float _2503 = (_2498 * _2008) + _1998;
        float _2504 = (_2498 * _2011) + _2002;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2505;
        float _2509 = _2505 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 > _2509) || ((_2503 < _2507) || ((_2502 < _2507) || (_2502 > _2509))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2504, cbModelParam._m0[9u].z, fma(_2503, cbModelParam._m0[9u].y, _2502 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2504, cbModelParam._m0[10u].z, fma(_2503, cbModelParam._m0[10u].y, _2502 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2504, cbModelParam._m0[11u].z, fma(_2503, cbModelParam._m0[11u].y, _2502 * cbModelParam._m0[11u].x))), _1947);
            frontier_phi_18_40_ladder = _2632.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2632.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2632.x * cbModelParam._m0[1u].y;
        }
        _2027 = frontier_phi_18_40_ladder_2;
        _2029 = frontier_phi_18_40_ladder_1;
        _2031 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1947);
        _2027 = _2015.x * cbModelParam._m0[1u].y;
        _2029 = _2015.y * cbModelParam._m0[1u].y;
        _2031 = _2015.z * cbModelParam._m0[1u].y;
    }
    float _2035 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2035 : min(cbModelParam._m0[25u].w, _2035));
    float _2125;
    float _2127;
    float _2129;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2089 = fma(_1175, cbModelParam._m0[21u].z, fma(_1171, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167)) + cbModelParam._m0[21u].w;
        float _2093 = fma(_1175, cbModelParam._m0[22u].z, fma(_1171, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167)) + cbModelParam._m0[22u].w;
        float _2097 = fma(_1175, cbModelParam._m0[23u].z, fma(_1171, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167)) + cbModelParam._m0[23u].w;
        float _2100 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2103 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2106 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2246;
        if (_2100 > 0.0)
        {
            _2246 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2246 = frontier_phi_30_26_ladder;
        }
        float _2522;
        if (_2103 > 0.0)
        {
            _2522 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2522 = frontier_phi_42_37_ladder;
        }
        float _2735;
        if (_2106 > 0.0)
        {
            _2735 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2735 = frontier_phi_51_48_ladder;
        }
        float _2737 = isnan(_2522) ? _2246 : (isnan(_2246) ? _2522 : min(_2246, _2522));
        float _2738 = isnan(_2735) ? _2737 : (isnan(_2737) ? _2735 : min(_2737, _2735));
        float _2742 = (_2738 * _2100) + _2089;
        float _2743 = (_2738 * _2103) + _2093;
        float _2744 = (_2738 * _2106) + _2097;
        float _2745 = _2738 * 9.9999997473787516355514526367188e-05;
        float _2746 = (-1.0) - _2745;
        float _2748 = _2745 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2744 > _2748) || ((_2744 < _2746) || ((_2743 > _2748) || ((_2743 < _2746) || ((_2742 < _2746) || (_2742 > _2748))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2744, cbModelParam._m0[17u].z, fma(_2743, cbModelParam._m0[17u].y, _2742 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2744, cbModelParam._m0[18u].z, fma(_2743, cbModelParam._m0[18u].y, _2742 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2744, cbModelParam._m0[19u].z, fma(_2743, cbModelParam._m0[19u].y, _2742 * cbModelParam._m0[19u].x))), _2036);
            frontier_phi_27_51_ladder = _2943.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2943.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2943.x * cbModelParam._m0[1u].z;
        }
        _2125 = frontier_phi_27_51_ladder_2;
        _2127 = frontier_phi_27_51_ladder_1;
        _2129 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2036);
        _2125 = _2109.x * cbModelParam._m0[1u].z;
        _2127 = _2109.y * cbModelParam._m0[1u].z;
        _2129 = _2109.z * cbModelParam._m0[1u].z;
    }
    float _2142 = (((_1138 * _1090) + _1139) * _1105) * ((cbModelParam._m0[1u].w * (_2125 - _2027)) + _2027);
    float _2144 = (((_1138 * _1092) + _1139) * _1105) * ((cbModelParam._m0[1u].w * (_2127 - _2029)) + _2029);
    float _2146 = (((_1138 * _1093) + _1139) * _1105) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2149 = fma(_2146, cbSceneParam._m0[89u].z, fma(_2144, cbSceneParam._m0[89u].y, _2142 * cbSceneParam._m0[89u].x));
    float _2152 = fma(_2146, cbSceneParam._m0[90u].z, fma(_2144, cbSceneParam._m0[90u].y, _2142 * cbSceneParam._m0[90u].x));
    float _2155 = fma(_2146, cbSceneParam._m0[91u].z, fma(_2144, cbSceneParam._m0[91u].y, _2142 * cbSceneParam._m0[91u].x));
    uvec4 _2165 = floatBitsToUint(cbInstanceData._m0[_1065 + 5u]);
    uint _2167 = _2165.x * 14u;
    uint _2168 = _2167 + 13u;
    float _2175 = _1105 + (-1.0);
    float _2180 = (cbLight._m0[_2168].x * _2175) + 1.0;
    float _2181 = (cbLight._m0[_2168].y * _2175) + 1.0;
    float _2182 = (cbLight._m0[_2168].z * _2175) + 1.0;
    float _2183 = (cbLight._m0[_2168].w * _2175) + 1.0;
    uint _2184 = _2167 + 5u;
    float _2190 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2194 = _2167 + 4u;
    float _2200 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2204 = _2167 | 1u;
    float _2215 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_926, _927, _928));
    float _2218 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_926, _927, _928));
    float _4463 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _4474 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2223 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2225 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2232 = ((cbLight._m0[_2184].x * _2190) * _2225) + ((cbLight._m0[_2194].x * _2200) * _2223);
    float _2233 = ((_2190 * cbLight._m0[_2184].y) * _2225) + ((_2200 * cbLight._m0[_2194].y) * _2223);
    float _2234 = ((_2190 * cbLight._m0[_2184].z) * _2225) + ((_2200 * cbLight._m0[_2194].z) * _2223);
    uvec4 _2238 = floatBitsToUint(cbLight._m0[_2167 + 12u]);
    bool _2240 = _2238.x == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2240)
    {
        _2251 = _2232;
        _2253 = _2233;
        _2255 = _2234;
    }
    else
    {
        uint _2259 = _2167 + 6u;
        float _2275 = (dot(vec3(cbLight._m0[_2167 + 2u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4485 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2278 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2251 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2232;
        _2253 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2233;
        _2255 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2234;
    }
    bool _2258 = _2238.y == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2258)
    {
        _2296 = _2251;
        _2298 = _2253;
        _2300 = _2255;
    }
    else
    {
        uint _2466 = _2167 + 7u;
        float _2482 = (dot(vec3(cbLight._m0[_2167 + 3u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4501 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2485 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2296 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2251;
        _2298 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2253;
        _2300 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2255;
    }
    uint _2303 = _2167 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _929) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2167].x + _1010;
    float _2319 = cbLight._m0[_2167].y + _1011;
    float _2320 = cbLight._m0[_2167].z + _1012;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2167].xyz));
    float _4517 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _4528 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2332 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2333 = dot(vec3(_926, _927, _928), vec3(_2325, _2326, _2327));
    float _4539 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2325, _2326, _2327));
    float _4550 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
    float _2354 = 0.959999978542327880859375 - _1087;
    float _2356 = 0.959999978542327880859375 - _1088;
    float _2357 = 0.959999978542327880859375 - _1089;
    float _2364 = 1.0 - _2317;
    float _2375 = (0.5 / (((_2332 * ((_2331 * _2364) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2364) + _2317) * _2331))) * _2331;
    float _4561 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2388 = _2167 + 9u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _929) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2204].x + _1010;
    float _2402 = cbLight._m0[_2204].y + _1011;
    float _2403 = cbLight._m0[_2204].z + _1012;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2204].xyz));
    float _4572 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2415 = dot(vec3(_926, _927, _928), vec3(_2408, _2409, _2410));
    float _4583 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2419 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2408, _2409, _2410));
    float _4594 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2423 = _2400 * _2400;
    float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
    float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
    float _2441 = 1.0 - _2400;
    float _2451 = (0.5 / (((_2332 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2441) + _2400) * _2414))) * _2414;
    float _4605 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
    float _2463 = (((((_2434 * _2354) + _1090) * cbLight._m0[_2388].x) * _2453) * _2190) + (((((_2353 * _2354) + _1090) * cbLight._m0[_2303].x) * _2377) * _2200);
    float _2464 = (((((_2434 * _2356) + _1092) * cbLight._m0[_2388].y) * _2453) * _2190) + (((((_2353 * _2356) + _1092) * cbLight._m0[_2303].y) * _2377) * _2200);
    float _2465 = (((((_2434 * _2357) + _1093) * cbLight._m0[_2388].z) * _2453) * _2190) + (((((_2353 * _2357) + _1093) * cbLight._m0[_2303].z) * _2377) * _2200);
    float _2527;
    float _2529;
    float _2531;
    if (_2240)
    {
        _2527 = _2463;
        _2529 = _2464;
        _2531 = _2465;
    }
    else
    {
        uint _2533 = _2167 + 2u;
        uint _2537 = _2167 + 10u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _929) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _1010;
        float _2554 = cbLight._m0[_2533].y + _1011;
        float _2555 = cbLight._m0[_2533].z + _1012;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2533].xyz));
        float _4616 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2567 = dot(vec3(_926, _927, _928), vec3(_2560, _2561, _2562));
        float _4627 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4638 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2593 = 1.0 - _2552;
        float _2603 = (0.5 / (((_2332 * ((_2566 * _2593) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2593) + _2552) * _2566))) * _2566;
        float _4649 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2527 = (((((_2586 * _2354) + _1090) * cbLight._m0[_2537].x) * _2605) * _2606) + _2463;
        _2529 = (((((_2586 * _2356) + _1092) * cbLight._m0[_2537].y) * _2605) * _2606) + _2464;
        _2531 = (((((_2586 * _2357) + _1093) * cbLight._m0[_2537].z) * _2605) * _2606) + _2465;
    }
    float _2641;
    float _2643;
    float _2645;
    if (_2258)
    {
        _2641 = _2527;
        _2643 = _2529;
        _2645 = _2531;
    }
    else
    {
        uint _2652 = _2167 + 3u;
        uint _2656 = _2167 + 11u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _929) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _1010;
        float _2673 = cbLight._m0[_2652].y + _1011;
        float _2674 = cbLight._m0[_2652].z + _1012;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2652].xyz));
        float _4665 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2686 = dot(vec3(_926, _927, _928), vec3(_2679, _2680, _2681));
        float _4676 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4687 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2712 = 1.0 - _2671;
        float _2722 = (0.5 / (((_2332 * ((_2685 * _2712) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2712) + _2671) * _2685))) * _2685;
        float _4698 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2641 = (((((_2705 * _2354) + _1090) * cbLight._m0[_2656].x) * _2724) * _2725) + _2527;
        _2643 = (((((_2705 * _2356) + _1092) * cbLight._m0[_2656].y) * _2724) * _2725) + _2529;
        _2645 = (((((_2705 * _2357) + _1093) * cbLight._m0[_2656].z) * _2724) * _2725) + _2531;
    }
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_2165.y == 0u)
    {
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2800;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2800;
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2800;
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.x;
        uint _2827 = uint((float(_2815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1028) / _2816))) + floor(float(uint(cbSceneParam._m0[85u].x * _1027) / _2816)));
        float _2837 = (log2(_2803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2838 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        uint _2841 = uint(isnan(14.0) ? _2838 : (isnan(_2838) ? 14.0 : min(_2838, 14.0)));
        uvec4 _2846 = texelFetch(g_lightClusterGridBuffer, int(((_2841 << 2u) + (_2827 << 6u)) >> 2u));
        uint _2847 = _2846.x;
        uint _2848 = _2815.z;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((((1u << ((_2848 >> 4u) & 15u)) + 4294967295u) & _2847) == 0u) || ((_2848 & 240u) == 0u))
        {
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
        }
        else
        {
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            uint _3107 = 0u;
            uint _3116;
            bool _3117;
            for (;;)
            {
                _3116 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                _3117 = _3116 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3117)
                {
                    frontier_phi_68_pred = _3101;
                    frontier_phi_68_pred_1 = _3106;
                    frontier_phi_68_pred_2 = _3105;
                    frontier_phi_68_pred_3 = _3104;
                    frontier_phi_68_pred_4 = _3103;
                    frontier_phi_68_pred_5 = _3102;
                }
                else
                {
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    uint _3252;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3116;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3256 = uint(findLSB(_3252)) + (_3107 << 5u);
                        uint _3253 = (_3252 + 4294967295u) & _3252;
                        uint _3258 = _3256 * 48u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3278 = (_3256 * 48u) + 4u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3297 = (_3256 * 48u) + 8u;
                        vec3 _3308 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x));
                        float _3312 = _3272.x - _2801;
                        float _3313 = _3272.y - _2802;
                        float _3314 = _3272.z - _2803;
                        float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                        float _3318 = inversesqrt(_3315);
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3322 = dot(vec3(_1046, _1049, _1052), vec3(_3319, _3320, _3321));
                        float _3327 = 1.0 - (_3315 * _3272.w);
                        float _4724 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3329 = sqrt(_3315) * _3291.w;
                        float _3332 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3322) + _3333;
                        float _3339 = _3329 * _3329;
                        float _3343 = ((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3328) / ((_3339 * 0.699999988079071044921875) + 1.0);
                        float _3347 = (-0.0) - _2801;
                        float _3348 = (-0.0) - _2802;
                        float _3349 = (-0.0) - _2803;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3364 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                        float _3365 = 1.0 - _1121;
                        float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                        float _3373 = _3372 * _3372;
                        float _3374 = _3373 * _3373;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3377 = _3356 + _3321;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3385 = dot(vec3(_1046, _1049, _1052), vec3(_3354, _3355, _3356));
                        float _4740 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3389 = dot(vec3(_1046, _1049, _1052), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                        float _4751 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                        float _3397 = _3332 * _3373;
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3322) + _3398;
                        float _4762 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3403 = 1.0 - _3373;
                        float _3413 = (0.5 / (((_3402 * ((_3388 * _3403) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3373) * _3388))) * _3402;
                        float _4773 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3424 = (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3396 * _3396) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125))) * _3328;
                        _3176 = (_3343 * _3291.x) + _3249;
                        _3177 = (_3343 * _3291.y) + _3250;
                        _3178 = (_3343 * _3291.z) + _3251;
                        _3173 = (_3424 * _3308.x) + _3246;
                        _3174 = (_3424 * _3308.y) + _3247;
                        _3175 = (_3424 * _3308.z) + _3248;
                        if (_3253 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3253;
                        }
                    }
                    frontier_phi_68_pred = _3173;
                    frontier_phi_68_pred_1 = _3178;
                    frontier_phi_68_pred_2 = _3177;
                    frontier_phi_68_pred_3 = _3176;
                    frontier_phi_68_pred_4 = _3175;
                    frontier_phi_68_pred_5 = _3174;
                }
                _2949 = frontier_phi_68_pred;
                _2959 = frontier_phi_68_pred_1;
                _2957 = frontier_phi_68_pred_2;
                _2955 = frontier_phi_68_pred_3;
                _2953 = frontier_phi_68_pred_4;
                _2951 = frontier_phi_68_pred_5;
                uint _3108 = _3107 + 1u;
                if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3101 = _2949;
                    _3102 = _2951;
                    _3103 = _2953;
                    _3104 = _2955;
                    _3105 = _2957;
                    _3106 = _2959;
                    _3107 = _3108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
        }
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.z;
        uint _2965 = (_2963 >> 8u) & 15u;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((4294967295u << _2965) & _2847) == 0u)
        {
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
        }
        else
        {
            float _3094 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
            float _3095 = _3094 * _2801;
            float _3096 = _3094 * _2802;
            float _3097 = _3094 * _2803;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2965 < ((_2963 >> 12u) & 15u))
            {
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3229 = _2948;
                float _3230 = _2950;
                float _3231 = _2952;
                float _3232 = _2954;
                float _3233 = _2956;
                float _3234 = _2958;
                uint _3235 = _2965;
                uint _3244;
                bool _3245;
                for (;;)
                {
                    _3244 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                    _3245 = _3244 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3245)
                    {
                        frontier_phi_79_pred = _3234;
                        frontier_phi_79_pred_1 = _3233;
                        frontier_phi_79_pred_2 = _3232;
                        frontier_phi_79_pred_3 = _3231;
                        frontier_phi_79_pred_4 = _3230;
                        frontier_phi_79_pred_5 = _3229;
                    }
                    else
                    {
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        uint _3457 = _3244;
                        uint _3458;
                        vec4 _3483;
                        float _3484;
                        vec4 _3499;
                        vec3 _3511;
                        vec4 _3526;
                        vec4 _3541;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3468 = ((_3235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3457));
                            _3458 = (_3457 + 4294967295u) & _3457;
                            uint _3470 = _3468 * 40u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3484 = _3483.w;
                            uint _3486 = (_3468 * 40u) + 4u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3468 * 40u) + 8u;
                            _3511 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x));
                            uint _3513 = (_3468 * 40u) + 16u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3468 * 40u) + 20u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3468 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3468 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_2803, _3575.z, fma(_2802, _3575.y, _3575.x * _2801)) + _3575.w;
                            _3588 = !((fma(_2803, _3556.z, fma(_2802, _3556.y, _3556.x * _2801)) + _3556.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3483.x - _2801;
                                float _3616 = _3483.y - _2802;
                                float _3617 = _3483.z - _2803;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3484 * _3484));
                                float _4784 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3633 = sqrt(_3618) * _3499.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_1046, _1049, _1052))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_2803, _3526.z, fma(_2802, _3526.y, _3526.x * _2801)) + _3526.w) / _3587;
                                float _3647 = (fma(_2803, _3541.z, fma(_2802, _3541.y, _3541.x * _2801)) + _3541.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4800 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3666 = 1.0 - _1121;
                                float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                                float _3674 = _3673 * _3673;
                                float _3675 = _3674 * _3674;
                                float _3676 = _3622 - _3095;
                                float _3677 = _3623 - _3096;
                                float _3678 = _3624 - _3097;
                                float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                                float _3686 = dot(vec3(_1046, _1049, _1052), vec3((-0.0) - _3095, (-0.0) - _3096, (-0.0) - _3097));
                                float _4811 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3690 = dot(vec3(_1046, _1049, _1052), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                                float _4822 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                                float _3698 = _3635 * _3674;
                                float _3699 = _3698 * _3698;
                                float _3705 = ((1.0 - _3699) * dot(vec3(_1046, _1049, _1052), vec3(_3622, _3623, _3624))) + _3699;
                                float _4833 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3707 = 1.0 - _3674;
                                float _3717 = (0.5 / (((_3706 * ((_3689 * _3707) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3674) * _3689))) * _3706;
                                float _4844 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3727 = (_3652 * _3629) * (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3697 * _3697) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3653 * _3499.y;
                                frontier_phi_85_pred_1 = _3653 * _3499.x;
                                frontier_phi_85_pred_2 = _3727 * _3511.z;
                                frontier_phi_85_pred_3 = _3727 * _3511.y;
                                frontier_phi_85_pred_4 = _3727 * _3511.x;
                                frontier_phi_85_pred_5 = _3653 * _3499.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3735 = frontier_phi_85_pred;
                            _3734 = frontier_phi_85_pred_1;
                            _3733 = frontier_phi_85_pred_2;
                            _3732 = frontier_phi_85_pred_3;
                            _3731 = frontier_phi_85_pred_4;
                            _3736 = frontier_phi_85_pred_5;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            if (_3458 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3458;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3443;
                        frontier_phi_79_pred_1 = _3442;
                        frontier_phi_79_pred_2 = _3441;
                        frontier_phi_79_pred_3 = _3440;
                        frontier_phi_79_pred_4 = _3439;
                        frontier_phi_79_pred_5 = _3438;
                    }
                    _3080 = frontier_phi_79_pred;
                    _3078 = frontier_phi_79_pred_1;
                    _3076 = frontier_phi_79_pred_2;
                    _3074 = frontier_phi_79_pred_3;
                    _3072 = frontier_phi_79_pred_4;
                    _3070 = frontier_phi_79_pred_5;
                    uint _3236 = _3235 + 1u;
                    if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3229 = _3070;
                        _3230 = _3072;
                        _3231 = _3074;
                        _3232 = _3076;
                        _3233 = _3078;
                        _3234 = _3080;
                        _3235 = _3236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3074;
                frontier_phi_60_61_ladder_1 = _3080;
                frontier_phi_60_61_ladder_2 = _3078;
                frontier_phi_60_61_ladder_3 = _3076;
                frontier_phi_60_61_ladder_4 = _3072;
                frontier_phi_60_61_ladder_5 = _3070;
            }
            else
            {
                frontier_phi_60_61_ladder = _2952;
                frontier_phi_60_61_ladder_1 = _2958;
                frontier_phi_60_61_ladder_2 = _2956;
                frontier_phi_60_61_ladder_3 = _2954;
                frontier_phi_60_61_ladder_4 = _2950;
                frontier_phi_60_61_ladder_5 = _2948;
            }
            _3069 = frontier_phi_60_61_ladder_5;
            _3071 = frontier_phi_60_61_ladder_4;
            _3073 = frontier_phi_60_61_ladder;
            _3075 = frontier_phi_60_61_ladder_3;
            _3077 = frontier_phi_60_61_ladder_2;
            _3079 = frontier_phi_60_61_ladder_1;
        }
        float _3084 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2860 = (_3084 * _3075) + _2296;
        _2862 = (_3084 * _3077) + _2298;
        _2864 = (_3084 * _3079) + _2300;
        _2866 = ((_3069 * _1090) * _3084) + _2641;
        _2868 = ((_3071 * _1092) * _3084) + _2643;
        _2870 = ((_3073 * _1093) * _3084) + _2645;
    }
    else
    {
        _2860 = _2296;
        _2862 = _2298;
        _2864 = _2300;
        _2866 = _2641;
        _2868 = _2643;
        _2870 = _2645;
    }
    float _4860 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4871 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4882 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2887 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2860 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1105))) + ((_2866 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2862 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1105))) + ((_2868 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2889 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2864 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1105))) + ((_2870 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    uint _2890 = _1065 + 6u;
    float _2898 = _1027 / cbSceneParam._m0[86u].x;
    float _2899 = _1028 / cbSceneParam._m0[86u].y;
    vec4 _2913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, (log2((isnan(cbSceneParam._m0[77u].w) ? _953 : (isnan(_953) ? cbSceneParam._m0[77u].w : min(_953, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2915 = _2913.x;
    float _2916 = _2913.y;
    float _2917 = _2913.z;
    float _2918 = _2913.w;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_953 > cbSceneParam._m0[78u].w)
    {
        float _2973 = isnan(_953) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _953 : min(cbSceneParam._m0[80u].w, _953));
        float _2974 = _2973 / _953;
        float _2985 = _2974 * _1003;
        float _2986 = _1004 * _2974;
        float _2987 = (-0.0) - _2986;
        float _2989 = _2974 * _1005;
        float _2991 = (cbSceneParam._m0[77u].w * _2987) / _2973;
        float _2992 = _2991 + cbSceneParam._m0[79u].w;
        float _2993 = cbSceneParam._m0[79u].w - _2986;
        float _2999 = sqrt(((_2985 * _2985) + (_2986 * _2986)) + (_2989 * _2989));
        float _3002 = (1.0 - (cbSceneParam._m0[77u].w / _2973)) * _2999;
        float _3007 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3009 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_2987 - _2991) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_2992 > 0.0) ? exp2(_3007 * _2992) : (2.0 - exp2(_3009 * _2992))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3002;
        }
        else
        {
            float _3130 = 1.0 / cbSceneParam._m0[80u].x;
            float _3131 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : max(_2992, _2993));
            float _3132 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : min(_2992, _2993));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            _3186 = ((abs(_2999 / _2987) * cbSceneParam._m0[80u].y) * ((((_3141 - _3142) * 2.0) - ((exp2(_3007 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)))) - exp2(_3007 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))))) * _3130)) - ((exp2(_3009 * _3141) - exp2(_3009 * _3142)) * _3130))) + (_3002 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2918);
        _3011 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2915;
        _3013 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2916;
        _3015 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2917;
        _3017 = _3197 * _2918;
    }
    else
    {
        _3011 = _2915;
        _3013 = _2916;
        _3015 = _2917;
        _3017 = _2918;
    }
    bool _3224;
    vec4 _3027;
    vec4 _3049;
    float _3051;
    float _3055;
    float _3056;
    float _3057;
    float _3058;
    bool _3068;
    for (;;)
    {
        _3027 = cbMatDynParam._m0[0u];
        float _3029 = roundEven(_3027.y);
        bool _3030 = _3029 == 3.0;
        float _3031 = log2(_3017);
        float _3038 = exp2(_3031 * cbSceneParam._m0[78u].x) * _2887;
        float _3039 = exp2(_3031 * cbSceneParam._m0[78u].y) * _2888;
        float _3040 = exp2(_3031 * cbSceneParam._m0[78u].z) * _2889;
        float _3047 = _1016 + (-0.5);
        _3049 = cbMtdParam._m0[1u];
        _3051 = _3049.y * _3047;
        float _3054 = (_3029 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3055 = _3054 * (_3030 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3011)));
        _3056 = _3054 * (_3030 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3013)));
        _3057 = _3054 * (_3030 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3015)));
        _3058 = _3047 * 0.999000012874603271484375;
        _3068 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3068)
        {
            if ((cbInstanceData._m0[_1065 + 7u].x + _3058) < 0.5)
            {
                _3224 = true;
                break;
            }
        }
        uint _3165 = _1066 + uint(_3027.w);
        if ((cbInstanceData._m0[_3165].w < 1.0) && ((cbInstanceData._m0[_3165].w + _3058) < 0.5))
        {
            _3224 = true;
            break;
        }
        if ((_3051 + 1.0) < _3049.x)
        {
            _3224 = true;
            break;
        }
        _3224 = false;
        break;
    }
    float _3429;
    if (_3224)
    {
        discard_state = true;
        _3429 = 0.0;
    }
    else
    {
        _3429 = cbInstanceData._m0[_2890].w;
    }
    SV_Target.x = _3055;
    SV_Target.y = _3056;
    SV_Target.z = _3057;
    SV_Target.w = _3429;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2890].w;
    discard_exit();
}


