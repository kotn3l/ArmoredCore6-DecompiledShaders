#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1434;
float _4094;
float _4095;
float _4096;
float _4097;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _301 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _316 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _324 = log2(0.0);
    float _326 = exp2(_324 * cbMtdParam._m0[23u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    float _337 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    float _360 = roundEven(5.0 - ((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(4.0) ? _361 : (isnan(_361) ? 4.0 : min(_361, 4.0));
    float _375 = floor(_362);
    vec4 _378 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _375));
    vec4 _402 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _413 = cbMtdParam._m0[9u].x * _402.x;
    float _414 = cbMtdParam._m0[9u].y * _402.y;
    float _415 = cbMtdParam._m0[9u].z * _402.z;
    float _422 = (((cbMtdParam._m0[10u].x * _378.x) - _413) * _339) + _413;
    float _423 = (((cbMtdParam._m0[10u].y * _378.y) - _414) * _339) + _414;
    float _424 = (((cbMtdParam._m0[10u].z * _378.z) - _415) * _339) + _415;
    float _430 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _443 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _462 = (((cbMtdParam._m0[16u].x * _443.x) - _422) * _430) + _422;
    float _463 = (((cbMtdParam._m0[16u].y * _443.y) - _423) * _430) + _423;
    float _464 = (((cbMtdParam._m0[16u].z * _443.z) - _424) * _430) + _424;
    vec4 _477 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _497 = (((cbMtdParam._m0[19u].x * _477.x) - _462) * _328) + _462;
    float _498 = (((cbMtdParam._m0[19u].y * _477.y) - _463) * _328) + _463;
    float _499 = (((cbMtdParam._m0[19u].z * _477.z) - _464) * _328) + _464;
    vec4 _512 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _537 = (_316.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _512.x) - _497) * _303) + _497);
    float _539 = (_316.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _512.y) - _498) * _303) + _498);
    float _541 = (_316.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _512.z) - _499) * _303) + _499);
    float _545 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _554 = (_545 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _545))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4146 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _562 = ((cbMtdParam._m0[21u].x - _537) * _555) + _537;
    float _563 = ((cbMtdParam._m0[21u].y - _539) * _555) + _539;
    float _564 = ((cbMtdParam._m0[21u].z - _541) * _555) + _541;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].x;
    _198[0u] = cbMtdParam._m0[29u].y;
    _197[1u] = cbMtdParam._m0[31u].x;
    _198[1u] = cbMtdParam._m0[31u].y;
    _197[2u] = cbMtdParam._m0[30u].z;
    _198[2u] = cbMtdParam._m0[30u].w;
    _197[3u] = cbMtdParam._m0[30u].x;
    _198[3u] = cbMtdParam._m0[30u].y;
    _197[4u] = cbMtdParam._m0[29u].z;
    _198[4u] = cbMtdParam._m0[29u].w;
    float _606 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    uint _608 = uint(int(isnan(4.0) ? _606 : (isnan(_606) ? 4.0 : min(_606, 4.0))));
    float _615 = ((_198[_608] - cbMtdParam._m0[22u].z) * _339) + cbMtdParam._m0[22u].z;
    float _618 = ((cbMtdParam._m0[22u].w - _615) * _430) + _615;
    float _621 = ((cbMtdParam._m0[25u].y - _618) * _328) + _618;
    float _624 = ((cbMtdParam._m0[26u].y - _621) * _303) + _621;
    float _626 = _624 - (_624 * _545);
    vec4 _642 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _375));
    vec4 _660 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _668 = cbMtdParam._m0[22u].x + _660.z;
    float _671 = (((_642.z + _197[_608]) - _668) * _339) + _668;
    vec4 _684 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _695 = (((_684.z - _671) + cbMtdParam._m0[28u].z) * _430) + _671;
    float _701 = ((((_290 * 2.0) * _695) - _695) * cbMtdParam._m0[24u].w) + _695;
    vec4 _714 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _725 = (((cbMtdParam._m0[23u].z + _714.z) - _701) * _328) + _701;
    vec4 _738 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _749 = (((_738.z - _725) + cbMtdParam._m0[26u].z) * _303) + _725;
    vec4 _764 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _779 = ((cbMtdParam._m0[27u].z * _545) * ((_764.z * cbMtdParam._m0[27u].y) - _749)) + _749;
    float _791 = ((_642.x - _662) * _339) + _662;
    float _792 = ((_642.y - _663) * _339) + _663;
    float _797 = ((_684.x - _791) * _430) + _791;
    float _798 = ((_684.y - _792) * _430) + _792;
    float _803 = ((_714.x - _797) * _328) + _797;
    float _804 = ((_714.y - _798) * _328) + _798;
    float _813 = ((((_738.x - _803) * _303) + _803) * 2.0) + (-1.0);
    float _814 = ((((_738.y - _804) * _303) + _804) * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4167 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _820 = sqrt(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))));
    float _830 = ((cbMtdParam._m0[25u].z * ((_286.x * 2.0) + (-1.0))) + _813) + ((((_764.x * 2.0) + (-1.0)) * _545) * cbMtdParam._m0[27u].x);
    float _831 = ((cbMtdParam._m0[25u].z * ((_286.y * 2.0) + (-1.0))) + _814) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_764.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _833 = gl_FragCoord.x * 0.125;
    float _835 = gl_FragCoord.y * 0.125;
    float _845 = fma(_820, _233 * NORMAL.x, fma(_831, _240 * TANGENT.x, (_226 * _218) * _830));
    float _848 = fma(_820, _233 * NORMAL.y, fma(_831, _240 * TANGENT.y, (_226 * _219) * _830));
    float _851 = fma(_820, _233 * NORMAL.z, fma(_831, _240 * TANGENT.z, (_226 * _220) * _830));
    float _855 = inversesqrt(dot(vec3(_845, _848, _851), vec3(_845, _848, _851)));
    float _856 = _855 * _845;
    float _857 = _855 * _848;
    float _858 = _855 * _851;
    float _4178 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _859 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4200 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4211 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4222 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _863 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_833, _835)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _944 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_833, _835));
    float _946 = _944.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1116 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1122 = (cbMatDynParam._m0[5u].x * _1116) + cbMatDynParam._m0[5u].y;
        float _4233 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1127 = (cbMatDynParam._m0[5u].z * _1116) + cbMatDynParam._m0[5u].w;
        float _4244 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) - _1123)) + _1123) < ((_946 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_858, cbSceneParam._m0[5u].z, fma(_857, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _856));
    float _979 = fma(_858, cbSceneParam._m0[6u].z, fma(_857, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _856));
    float _982 = fma(_858, cbSceneParam._m0[7u].z, fma(_857, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _856));
    uint _995 = uint(roundEven(NORMAL.w)) * 13u;
    uint _996 = _995 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4255 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _1009 = 1.0 - _863;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _863;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _863;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _863;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1035 = _1032.x * TEXCOORD_3.w;
    float _1036 = dot(vec3(_856, _857, _858), vec3(_940, _941, _942));
    float _1039 = _1036 * 2.0;
    float _1043 = (_1039 * _856) - _940;
    float _1044 = (_1039 * _857) - _941;
    float _1045 = (_1039 * _858) - _942;
    float _1049 = abs(dot(vec3(_940, _941, _942), vec3(_856, _857, _858)));
    float _4288 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1051 = sqrt(_859);
    float _1062 = exp2((_1051 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1051 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1051 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1051;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1433;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1158 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1162 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1166 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1191 = _1097 + _856;
        float _1192 = _1101 + _857;
        float _1193 = _1105 + _858;
        float _1203 = fma(_1193, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191)) - _1158;
        float _1204 = fma(_1193, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191)) - _1162;
        float _1205 = fma(_1193, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191)) - _1166;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1158 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1162 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[34u].z) + ((((((_1166 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1261 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1227.x + (-0.5));
        float _1263 = _1261 * (_1227.y + (-0.5));
        float _1264 = _1261 * (_1227.z + (-0.5));
        float _1271 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1234.x + (-0.5));
        float _1273 = _1271 * (_1234.y + (-0.5));
        float _1274 = _1271 * (_1234.z + (-0.5));
        float _1281 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1241.x + (-0.5));
        float _1283 = _1281 * (_1241.y + (-0.5));
        float _1284 = _1281 * (_1241.z + (-0.5));
        float _1291 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1248.x + (-0.5));
        float _1293 = _1291 * (_1248.y + (-0.5));
        float _1294 = _1291 * (_1248.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1315 = (dot(vec3(_856, _857, _858), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1325 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4336 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1327 + 1.0))) + _1332) * _1295;
        float _1342 = _1263 * 0.5;
        float _1343 = _1273 * 0.5;
        float _1344 = _1283 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_856, _857, _858), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4369 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1369 + 1.0))) + _1374) * _1296;
        float _1384 = _1264 * 0.5;
        float _1385 = _1274 * 0.5;
        float _1386 = _1284 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_856, _857, _858), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4402 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1411 + 1.0))) + _1416) * _1297;
        _1433 = _1264;
        _1435 = _1263;
        _1436 = _1262;
        _1437 = _1274;
        _1438 = _1273;
        _1439 = _1272;
        _1440 = _1284;
        _1441 = _1283;
        _1442 = _1282;
        _1443 = _1297;
        _1444 = _1296;
        _1445 = _1295;
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1434;
        _1435 = _1434;
        _1436 = _1434;
        _1437 = _1434;
        _1438 = _1434;
        _1439 = _1434;
        _1440 = _1434;
        _1441 = _1434;
        _1442 = _1434;
        _1443 = _1434;
        _1444 = _1434;
        _1445 = _1434;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1475 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1479 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1502 = _1097 + _856;
        float _1503 = _1101 + _857;
        float _1504 = _1105 + _858;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_856, _857, _858), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4465 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_856, _857, _858), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4498 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_856, _857, _858), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4531 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1434;
        _1741 = _1434;
        _1742 = _1434;
        _1743 = _1434;
        _1744 = _1434;
        _1745 = _1434;
        _1746 = _1434;
        _1747 = _1434;
        _1748 = _1434;
        _1749 = _1434;
        _1750 = _1434;
        _1751 = _1434;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1448)) + _1448;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1043 * 0.5;
    float _1809 = _1044 * 0.5;
    float _1810 = _1045 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1433, _1437, _1440, _1443));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _859);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1045, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043));
        float _1938 = fma(_1045, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043));
        float _1941 = fma(_1045, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1969 = frontier_phi_19_17_ladder;
        }
        float _2141;
        if (_1938 > 0.0)
        {
            _2141 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2141 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_1941 > 0.0)
        {
            _2436 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_40_35_ladder;
        }
        float _2438 = isnan(_2141) ? _1969 : (isnan(_1969) ? _2141 : min(_1969, _2141));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1935) + _1924;
        float _2444 = (_2439 * _1938) + _1928;
        float _2445 = (_2439 * _1941) + _1932;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_18_40_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_18_40_ladder_2;
        _1959 = frontier_phi_18_40_ladder_1;
        _1961 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1043, _1044, _1045), _1877);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _859);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1045, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043));
        float _2034 = fma(_1045, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043));
        float _2037 = fma(_1045, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043));
        float _2146;
        if (_2031 > 0.0)
        {
            _2146 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2146 = frontier_phi_30_26_ladder;
        }
        float _2463;
        if (_2034 > 0.0)
        {
            _2463 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2463 = frontier_phi_42_37_ladder;
        }
        float _2801;
        if (_2037 > 0.0)
        {
            _2801 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2801 = frontier_phi_52_49_ladder;
        }
        float _2803 = isnan(_2463) ? _2146 : (isnan(_2146) ? _2463 : min(_2146, _2463));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2031) + _2020;
        float _2809 = (_2804 * _2034) + _2024;
        float _2810 = (_2804 * _2037) + _2028;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_27_52_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_27_52_ladder_2;
        _2058 = frontier_phi_27_52_ladder_1;
        _2060 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1043, _1044, _1045), _1966);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2073 = (((_1068 * _1020) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2075 = (((_1068 * _1022) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2077 = (((_1068 * _1023) + _1069) * _1035) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2133 = _2120 / _2132;
    float _2134 = _2124 / _2132;
    float _2135 = _2128 / _2132;
    float _2282;
    float _2283;
    float _2284;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2162 = ((uint(_2135 > cbSceneParam._m0[59u].y) + uint(_2135 > cbSceneParam._m0[59u].x)) + uint(_2135 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2163 = _2162 + 43u;
        uint _2171 = _2162 + 44u;
        uint _2179 = _2162 + 45u;
        uint _2187 = _2162 + 46u;
        float _2198 = fma(_2132, cbSceneParam._m0[_2163].w, fma(_2128, cbSceneParam._m0[_2163].z, fma(_2124, cbSceneParam._m0[_2163].y, _2120 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2132, cbSceneParam._m0[_2171].w, fma(_2128, cbSceneParam._m0[_2171].z, fma(_2124, cbSceneParam._m0[_2171].y, _2120 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2132, cbSceneParam._m0[_2187].w, fma(_2128, cbSceneParam._m0[_2187].z, fma(_2124, cbSceneParam._m0[_2187].y, _2120 * cbSceneParam._m0[_2187].x)));
        float _2215 = cbSceneParam._m0[33u].z * _2210;
        float _2217 = cbSceneParam._m0[33u].w * _2210;
        float _2220 = fma(_2132, cbSceneParam._m0[_2179].w, fma(_2128, cbSceneParam._m0[_2179].z, fma(_2124, cbSceneParam._m0[_2179].y, _2120 * cbSceneParam._m0[_2179].x))) / _2210;
        float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
        float _4657 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2275 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2198) / _2210, (_2217 + _2202) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2198) / _2210, (_2202 - _2215) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2215) / _2210, (_2202 - _2217) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2217) / _2210, (_2215 + _2202) / _2210), _2220), 0.0)).x), vec4(0.25)));
        _2282 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
        _2283 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
        _2284 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2282 = 1.0;
        _2283 = 1.0;
        _2284 = 1.0;
    }
    float _2348;
    float _2350;
    float _2352;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2336 = fma(_2132, cbSceneParam._m0[63u].w, fma(_2128, cbSceneParam._m0[63u].z, fma(_2124, cbSceneParam._m0[63u].y, _2120 * cbSceneParam._m0[63u].x)));
        float _2337 = fma(_2132, cbSceneParam._m0[60u].w, fma(_2128, cbSceneParam._m0[60u].z, fma(_2124, cbSceneParam._m0[60u].y, _2120 * cbSceneParam._m0[60u].x))) / _2336;
        float _2338 = fma(_2132, cbSceneParam._m0[61u].w, fma(_2128, cbSceneParam._m0[61u].z, fma(_2124, cbSceneParam._m0[61u].y, _2120 * cbSceneParam._m0[61u].x))) / _2336;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2337 >= cbSceneParam._m0[64u].x) && (_2338 >= cbSceneParam._m0[64u].y)) && (_2337 <= cbSceneParam._m0[64u].z)) && (_2338 <= cbSceneParam._m0[64u].w))
        {
            float _2476 = fma(_2132, cbSceneParam._m0[62u].w, fma(_2128, cbSceneParam._m0[62u].z, fma(_2124, cbSceneParam._m0[62u].y, _2120 * cbSceneParam._m0[62u].x))) / _2336;
            float _2480 = isnan(cbSceneParam._m0[41u].w) ? _2476 : (isnan(_2476) ? cbSceneParam._m0[41u].w : max(_2476, cbSceneParam._m0[41u].w));
            float _2523 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
            float _4673 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
            float _2530 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2337, cbSceneParam._m0[33u].w + _2338), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2337, _2338 - cbSceneParam._m0[33u].z), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].z, _2338 - cbSceneParam._m0[33u].w), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2338), _2480), 0.0)).x), vec4(0.25)));
            float _2534 = 1.0 - (_2530 * cbSceneParam._m0[34u].x);
            float _2535 = 1.0 - (_2530 * cbSceneParam._m0[34u].y);
            float _2536 = 1.0 - (_2530 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_39_38_ladder_1 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_39_38_ladder_2 = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
        }
        else
        {
            frontier_phi_39_38_ladder = _2284;
            frontier_phi_39_38_ladder_1 = _2283;
            frontier_phi_39_38_ladder_2 = _2282;
        }
        _2348 = frontier_phi_39_38_ladder_2;
        _2350 = frontier_phi_39_38_ladder_1;
        _2352 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2348 = _2282;
        _2350 = _2283;
        _2352 = _2284;
    }
    uvec4 _2357 = floatBitsToUint(cbInstanceData._m0[_995 + 5u]);
    uint _2359 = _2357.x * 14u;
    uint _2360 = _2359 + 13u;
    float _2367 = _1035 + (-1.0);
    float _2372 = (cbLight._m0[_2360].x * _2367) + 1.0;
    float _2373 = (cbLight._m0[_2360].y * _2367) + 1.0;
    float _2374 = (cbLight._m0[_2360].z * _2367) + 1.0;
    float _2375 = (cbLight._m0[_2360].w * _2367) + 1.0;
    uint _2376 = _2359 + 5u;
    float _2382 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2386 = _2359 + 4u;
    float _2395 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2399 = _2359 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_856, _857, _858));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_856, _857, _858));
    float _4709 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4720 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2376].x * _2382) * _2420) + (((cbLight._m0[_2386].x * _2348) * _2395) * _2418);
    float _2428 = ((_2382 * cbLight._m0[_2376].y) * _2420) + (((cbLight._m0[_2386].y * _2350) * _2395) * _2418);
    float _2429 = ((_2382 * cbLight._m0[_2376].z) * _2420) + (((cbLight._m0[_2386].z * _2352) * _2395) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2359 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2435)
    {
        _2537 = _2427;
        _2539 = _2428;
        _2541 = _2429;
    }
    else
    {
        uint _2545 = _2359 + 6u;
        float _2561 = (dot(vec3(cbLight._m0[_2359 + 2u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4731 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2564 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2537 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2427;
        _2539 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2428;
        _2541 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2429;
    }
    bool _2544 = _2433.y == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2544)
    {
        _2599 = _2537;
        _2601 = _2539;
        _2603 = _2541;
    }
    else
    {
        uint _2772 = _2359 + 7u;
        float _2788 = (dot(vec3(cbLight._m0[_2359 + 3u].xyz), vec3(_856, _857, _858)) * 0.5) + 0.5;
        float _2789 = _2788 * _2788;
        float _4747 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2790 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2791 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2599 = (((cbLight._m0[_2772].x * 0.3183098733425140380859375) * _2790) * _2791) + _2537;
        _2601 = (((cbLight._m0[_2772].y * 0.3183098733425140380859375) * _2790) * _2791) + _2539;
        _2603 = (((cbLight._m0[_2772].z * 0.3183098733425140380859375) * _2790) * _2791) + _2541;
    }
    uint _2606 = _2359 + 8u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _859) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2359].x + _940;
    float _2622 = cbLight._m0[_2359].y + _941;
    float _2623 = cbLight._m0[_2359].z + _942;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2359].xyz));
    float _4763 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _4774 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2635 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2636 = dot(vec3(_856, _857, _858), vec3(_2628, _2629, _2630));
    float _4785 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2628, _2629, _2630));
    float _4796 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2620 * _2620;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
    float _2657 = 0.959999978542327880859375 - _1017;
    float _2659 = 0.959999978542327880859375 - _1018;
    float _2660 = 0.959999978542327880859375 - _1019;
    float _2667 = 1.0 - _2620;
    float _2678 = (0.5 / (((_2635 * ((_2634 * _2667) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2667) + _2620) * _2634))) * _2634;
    float _4807 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    uint _2694 = _2359 + 9u;
    float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _859) * 0.949999988079071044921875);
    float _2706 = _2705 * _2705;
    float _2707 = cbLight._m0[_2399].x + _940;
    float _2708 = cbLight._m0[_2399].y + _941;
    float _2709 = cbLight._m0[_2399].z + _942;
    float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
    float _2714 = _2713 * _2707;
    float _2715 = _2713 * _2708;
    float _2716 = _2713 * _2709;
    float _2717 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2399].xyz));
    float _4818 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2721 = dot(vec3(_856, _857, _858), vec3(_2714, _2715, _2716));
    float _4829 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2724 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _2725 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2714, _2715, _2716));
    float _4840 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2729 = _2706 * _2706;
    float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
    float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0);
    float _2747 = 1.0 - _2706;
    float _2757 = (0.5 / (((_2635 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2747) + _2706) * _2720))) * _2720;
    float _4851 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2759 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
    float _2769 = (((((_2740 * _2657) + _1020) * cbLight._m0[_2694].x) * _2759) * _2382) + ((((cbLight._m0[_2606].x * _2348) * ((_2656 * _2657) + _1020)) * _2680) * _2395);
    float _2770 = (((((_2740 * _2659) + _1022) * cbLight._m0[_2694].y) * _2759) * _2382) + ((((cbLight._m0[_2606].y * _2350) * ((_2656 * _2659) + _1022)) * _2680) * _2395);
    float _2771 = (((((_2740 * _2660) + _1023) * cbLight._m0[_2694].z) * _2759) * _2382) + ((((cbLight._m0[_2606].z * _2352) * ((_2656 * _2660) + _1023)) * _2680) * _2395);
    float _2827;
    float _2829;
    float _2831;
    if (_2435)
    {
        _2827 = _2769;
        _2829 = _2770;
        _2831 = _2771;
    }
    else
    {
        uint _2833 = _2359 + 2u;
        uint _2837 = _2359 + 10u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _859) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _940;
        float _2854 = cbLight._m0[_2833].y + _941;
        float _2855 = cbLight._m0[_2833].z + _942;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2833].xyz));
        float _4862 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2867 = dot(vec3(_856, _857, _858), vec3(_2860, _2861, _2862));
        float _4873 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4884 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2635 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2893) + _2852) * _2866))) * _2866;
        float _4895 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2827 = (((((_2886 * _2657) + _1020) * cbLight._m0[_2837].x) * _2905) * _2906) + _2769;
        _2829 = (((((_2886 * _2659) + _1022) * cbLight._m0[_2837].y) * _2905) * _2906) + _2770;
        _2831 = (((((_2886 * _2660) + _1023) * cbLight._m0[_2837].z) * _2905) * _2906) + _2771;
    }
    float _2937;
    float _2939;
    float _2941;
    if (_2544)
    {
        _2937 = _2827;
        _2939 = _2829;
        _2941 = _2831;
    }
    else
    {
        uint _2948 = _2359 + 3u;
        uint _2952 = _2359 + 11u;
        float _2966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2948].w)) * _859) * 0.949999988079071044921875);
        float _2967 = _2966 * _2966;
        float _2968 = cbLight._m0[_2948].x + _940;
        float _2969 = cbLight._m0[_2948].y + _941;
        float _2970 = cbLight._m0[_2948].z + _942;
        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
        float _2975 = _2974 * _2968;
        float _2976 = _2974 * _2969;
        float _2977 = _2974 * _2970;
        float _2978 = dot(vec3(_856, _857, _858), vec3(cbLight._m0[_2948].xyz));
        float _4911 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2982 = dot(vec3(_856, _857, _858), vec3(_2975, _2976, _2977));
        float _4922 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2985 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2986 = dot(vec3(cbLight._m0[_2948].xyz), vec3(_2975, _2976, _2977));
        float _4933 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2990 = _2967 * _2967;
        float _2994 = ((_2985 * _2985) * (_2990 + (-1.0))) + 1.0;
        float _3001 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
        float _3008 = 1.0 - _2967;
        float _3018 = (0.5 / (((_2635 * ((_2981 * _3008) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _3008) + _2967) * _2981))) * _2981;
        float _4944 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3020 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2990 / ((_2994 * _2994) * 3.141590118408203125));
        float _3021 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2937 = (((((_3001 * _2657) + _1020) * cbLight._m0[_2952].x) * _3020) * _3021) + _2827;
        _2939 = (((((_3001 * _2659) + _1022) * cbLight._m0[_2952].y) * _3020) * _3021) + _2829;
        _2941 = (((((_3001 * _2660) + _1023) * cbLight._m0[_2952].z) * _3020) * _3021) + _2831;
    }
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_2357.y == 0u)
    {
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.x;
        uint _3054 = uint((float(_3042.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _3043))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _3043)));
        float _3064 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3065 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        uint _3068 = uint(isnan(14.0) ? _3065 : (isnan(_3065) ? 14.0 : min(_3065, 14.0)));
        uvec4 _3073 = texelFetch(g_lightClusterGridBuffer, int(((_3068 << 2u) + (_3054 << 6u)) >> 2u));
        uint _3074 = _3073.x;
        uint _3075 = _3042.z;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((((1u << ((_3075 >> 4u) & 15u)) + 4294967295u) & _3074) == 0u) || ((_3075 & 240u) == 0u))
        {
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
        }
        else
        {
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            uint _3313 = 0u;
            uint _3322;
            bool _3323;
            for (;;)
            {
                _3322 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                _3323 = _3322 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3323)
                {
                    frontier_phi_73_pred = _3312;
                    frontier_phi_73_pred_1 = _3311;
                    frontier_phi_73_pred_2 = _3310;
                    frontier_phi_73_pred_3 = _3309;
                    frontier_phi_73_pred_4 = _3308;
                    frontier_phi_73_pred_5 = _3307;
                }
                else
                {
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    uint _3458;
                    _3452 = _3307;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3322;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    for (;;)
                    {
                        uint _3462 = uint(findLSB(_3458)) + (_3313 << 5u);
                        uint _3459 = (_3458 + 4294967295u) & _3458;
                        uint _3464 = _3462 * 48u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 3u)).x));
                        uint _3484 = (_3462 * 48u) + 4u;
                        vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 3u)).x));
                        uint _3503 = (_3462 * 48u) + 8u;
                        vec3 _3514 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3503)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 2u)).x));
                        float _3518 = _3478.x - _2133;
                        float _3519 = _3478.y - _2134;
                        float _3520 = _3478.z - _2135;
                        float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                        float _3524 = inversesqrt(_3521);
                        float _3525 = _3524 * _3518;
                        float _3526 = _3524 * _3519;
                        float _3527 = _3524 * _3520;
                        float _3528 = dot(vec3(_976, _979, _982), vec3(_3525, _3526, _3527));
                        float _3533 = 1.0 - (_3521 * _3478.w);
                        float _4970 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3534 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3535 = sqrt(_3521) * _3497.w;
                        float _3538 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3528) + _3539;
                        float _3545 = _3535 * _3535;
                        float _3549 = ((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3534) / ((_3545 * 0.699999988079071044921875) + 1.0);
                        float _3553 = (-0.0) - _2133;
                        float _3554 = (-0.0) - _2134;
                        float _3555 = (-0.0) - _2135;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3560 = _3559 * _3553;
                        float _3561 = _3559 * _3554;
                        float _3562 = _3559 * _3555;
                        float _3569 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                        float _3570 = 1.0 - _1051;
                        float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                        float _3578 = _3577 * _3577;
                        float _3579 = _3578 * _3578;
                        float _3580 = _3560 + _3525;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3590 = dot(vec3(_976, _979, _982), vec3(_3560, _3561, _3562));
                        float _4986 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3594 = dot(vec3(_976, _979, _982), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                        float _4997 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                        float _3602 = _3538 * _3578;
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3528) + _3603;
                        float _5008 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3608 = 1.0 - _3578;
                        float _3618 = (0.5 / (((_3607 * ((_3593 * _3608) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3578) * _3593))) * _3607;
                        float _5019 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3629 = (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) / ((_3601 * _3601) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125))) * _3534;
                        _3382 = (_3549 * _3497.x) + _3455;
                        _3383 = (_3549 * _3497.y) + _3456;
                        _3384 = (_3549 * _3497.z) + _3457;
                        _3379 = (_3629 * _3514.x) + _3452;
                        _3380 = (_3629 * _3514.y) + _3453;
                        _3381 = (_3629 * _3514.z) + _3454;
                        if (_3459 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3452 = _3379;
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3459;
                        }
                    }
                    frontier_phi_73_pred = _3384;
                    frontier_phi_73_pred_1 = _3383;
                    frontier_phi_73_pred_2 = _3382;
                    frontier_phi_73_pred_3 = _3381;
                    frontier_phi_73_pred_4 = _3380;
                    frontier_phi_73_pred_5 = _3379;
                }
                _3165 = frontier_phi_73_pred;
                _3163 = frontier_phi_73_pred_1;
                _3161 = frontier_phi_73_pred_2;
                _3159 = frontier_phi_73_pred_3;
                _3157 = frontier_phi_73_pred_4;
                _3155 = frontier_phi_73_pred_5;
                uint _3314 = _3313 + 1u;
                if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3307 = _3155;
                    _3308 = _3157;
                    _3309 = _3159;
                    _3310 = _3161;
                    _3311 = _3163;
                    _3312 = _3165;
                    _3313 = _3314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
        }
        uvec4 _3168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3169 = _3168.z;
        uint _3171 = (_3169 >> 8u) & 15u;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        if (((4294967295u << _3171) & _3074) == 0u)
        {
            _3275 = _3154;
            _3277 = _3156;
            _3279 = _3158;
            _3281 = _3160;
            _3283 = _3162;
            _3285 = _3164;
        }
        else
        {
            float _3300 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _3301 = _3300 * _2133;
            float _3302 = _3300 * _2134;
            float _3303 = _3300 * _2135;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3171 < ((_3169 >> 12u) & 15u))
            {
                float _3276;
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3435 = _3154;
                float _3436 = _3156;
                float _3437 = _3158;
                float _3438 = _3160;
                float _3439 = _3162;
                float _3440 = _3164;
                uint _3441 = _3171;
                uint _3450;
                bool _3451;
                for (;;)
                {
                    _3450 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3441 << 2u)) >> 2u)).x;
                    _3451 = _3450 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3451)
                    {
                        frontier_phi_84_pred = _3440;
                        frontier_phi_84_pred_1 = _3439;
                        frontier_phi_84_pred_2 = _3438;
                        frontier_phi_84_pred_3 = _3437;
                        frontier_phi_84_pred_4 = _3436;
                        frontier_phi_84_pred_5 = _3435;
                    }
                    else
                    {
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3656 = _3435;
                        float _3657 = _3436;
                        float _3658 = _3437;
                        float _3659 = _3438;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        uint _3662 = _3450;
                        uint _3663;
                        vec4 _3688;
                        float _3689;
                        vec4 _3704;
                        vec3 _3716;
                        vec4 _3731;
                        vec4 _3746;
                        float _3792;
                        bool _3793;
                        for (;;)
                        {
                            uint _3673 = ((_3441 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3662));
                            _3663 = (_3662 + 4294967295u) & _3662;
                            uint _3675 = _3673 * 40u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            _3689 = _3688.w;
                            uint _3691 = (_3673 * 40u) + 4u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3706 = (_3673 * 40u) + 8u;
                            _3716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x));
                            uint _3718 = (_3673 * 40u) + 16u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3673 * 40u) + 20u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3673 * 40u) + 24u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3767 = (_3673 * 40u) + 28u;
                            vec4 _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            _3792 = fma(_2135, _3780.z, fma(_2134, _3780.y, _3780.x * _2133)) + _3780.w;
                            _3793 = !((fma(_2135, _3761.z, fma(_2134, _3761.y, _3761.x * _2133)) + _3761.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3793)
                            {
                                float _3820 = _3688.x - _2133;
                                float _3821 = _3688.y - _2134;
                                float _3822 = _3688.z - _2135;
                                float _3823 = dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822));
                                float _3826 = inversesqrt(_3823);
                                float _3827 = _3826 * _3820;
                                float _3828 = _3826 * _3821;
                                float _3829 = _3826 * _3822;
                                float _3833 = 1.0 - (_3823 / (_3689 * _3689));
                                float _5030 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3838 = sqrt(_3823) * _3704.w;
                                float _3840 = 1.39999997615814208984375 / (_3838 + 1.39999997615814208984375);
                                float _3841 = _3840 * _3840;
                                float _3844 = ((1.0 - _3841) * dot(vec3(_3827, _3828, _3829), vec3(_976, _979, _982))) + _3841;
                                float _3847 = _3838 * _3838;
                                float _3851 = (fma(_2135, _3731.z, fma(_2134, _3731.y, _3731.x * _2133)) + _3731.w) / _3792;
                                float _3852 = (fma(_2135, _3746.z, fma(_2134, _3746.y, _3746.x * _2133)) + _3746.w) / _3792;
                                float _3856 = 1.0 - dot(vec2(_3851, _3852), vec2(_3851, _3852));
                                float _5046 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3858 = _3857 * (((isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0))) * _3834) / ((_3847 * 0.699999988079071044921875) + 1.0));
                                float _3870 = exp2(log2(1.0 / ((_3847 * 3.5) + 5.0)) * 0.25);
                                float _3871 = 1.0 - _1051;
                                float _3878 = sqrt(1.0 - ((1.0 - (_3871 * _3871)) * (1.0 - (_3870 * _3870))));
                                float _3879 = _3878 * _3878;
                                float _3880 = _3879 * _3879;
                                float _3881 = _3827 - _3301;
                                float _3882 = _3828 - _3302;
                                float _3883 = _3829 - _3303;
                                float _3887 = inversesqrt(dot(vec3(_3881, _3882, _3883), vec3(_3881, _3882, _3883)));
                                float _3891 = dot(vec3(_976, _979, _982), vec3((-0.0) - _3301, (-0.0) - _3302, (-0.0) - _3303));
                                float _5057 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3894 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3895 = dot(vec3(_976, _979, _982), vec3(_3887 * _3881, _3887 * _3882, _3887 * _3883));
                                float _5068 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3898 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3902 = ((_3898 * _3898) * (_3880 + (-1.0))) + 1.0;
                                float _3903 = _3840 * _3879;
                                float _3904 = _3903 * _3903;
                                float _3910 = ((1.0 - _3904) * dot(vec3(_976, _979, _982), vec3(_3827, _3828, _3829))) + _3904;
                                float _5079 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3912 = 1.0 - _3879;
                                float _3922 = (0.5 / (((_3911 * ((_3894 * _3912) + _3879)) + 9.9999999392252902907785028219223e-09) + (((_3911 * _3912) + _3879) * _3894))) * _3911;
                                float _5090 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3932 = (_3857 * _3834) * (((_3880 * 3.1415927410125732421875) * (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0)))) / ((_3902 * _3902) * ((_3847 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3858 * _3704.z;
                                frontier_phi_90_pred_1 = _3858 * _3704.y;
                                frontier_phi_90_pred_2 = _3858 * _3704.x;
                                frontier_phi_90_pred_3 = _3932 * _3716.z;
                                frontier_phi_90_pred_4 = _3932 * _3716.y;
                                frontier_phi_90_pred_5 = _3932 * _3716.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3941 = frontier_phi_90_pred;
                            _3940 = frontier_phi_90_pred_1;
                            _3939 = frontier_phi_90_pred_2;
                            _3938 = frontier_phi_90_pred_3;
                            _3937 = frontier_phi_90_pred_4;
                            _3936 = frontier_phi_90_pred_5;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            if (_3663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3663;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3648;
                        frontier_phi_84_pred_1 = _3647;
                        frontier_phi_84_pred_2 = _3646;
                        frontier_phi_84_pred_3 = _3645;
                        frontier_phi_84_pred_4 = _3644;
                        frontier_phi_84_pred_5 = _3643;
                    }
                    _3286 = frontier_phi_84_pred;
                    _3284 = frontier_phi_84_pred_1;
                    _3282 = frontier_phi_84_pred_2;
                    _3280 = frontier_phi_84_pred_3;
                    _3278 = frontier_phi_84_pred_4;
                    _3276 = frontier_phi_84_pred_5;
                    uint _3442 = _3441 + 1u;
                    if (_3442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3435 = _3276;
                        _3436 = _3278;
                        _3437 = _3280;
                        _3438 = _3282;
                        _3439 = _3284;
                        _3440 = _3286;
                        _3441 = _3442;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3282;
                frontier_phi_65_66_ladder_1 = _3286;
                frontier_phi_65_66_ladder_2 = _3284;
                frontier_phi_65_66_ladder_3 = _3280;
                frontier_phi_65_66_ladder_4 = _3278;
                frontier_phi_65_66_ladder_5 = _3276;
            }
            else
            {
                frontier_phi_65_66_ladder = _3160;
                frontier_phi_65_66_ladder_1 = _3164;
                frontier_phi_65_66_ladder_2 = _3162;
                frontier_phi_65_66_ladder_3 = _3158;
                frontier_phi_65_66_ladder_4 = _3156;
                frontier_phi_65_66_ladder_5 = _3154;
            }
            _3275 = frontier_phi_65_66_ladder_5;
            _3277 = frontier_phi_65_66_ladder_4;
            _3279 = frontier_phi_65_66_ladder_3;
            _3281 = frontier_phi_65_66_ladder;
            _3283 = frontier_phi_65_66_ladder_2;
            _3285 = frontier_phi_65_66_ladder_1;
        }
        float _3290 = isnan(1.0) ? _1035 : (isnan(_1035) ? 1.0 : min(_1035, 1.0));
        _3087 = (_3290 * _3281) + _2599;
        _3089 = (_3290 * _3283) + _2601;
        _3091 = (_3290 * _3285) + _2603;
        _3093 = ((_3275 * _1020) * _3290) + _2937;
        _3095 = ((_3277 * _1022) * _3290) + _2939;
        _3097 = ((_3279 * _1023) * _3290) + _2941;
    }
    else
    {
        _3087 = _2599;
        _3089 = _2601;
        _3091 = _2603;
        _3093 = _2937;
        _3095 = _2939;
        _3097 = _2941;
    }
    float _5106 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _5117 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _5128 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _3114 = ((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3087 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1035))) + ((_3093 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _3115 = ((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3089 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1035))) + ((_3095 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _3116 = ((isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3091 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1035))) + ((_3097 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    uint _3117 = _995 + 6u;
    float _3125 = _957 / cbSceneParam._m0[86u].x;
    float _3126 = _958 / cbSceneParam._m0[86u].y;
    vec4 _3140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3142 = _3140.x;
    float _3143 = _3140.y;
    float _3144 = _3140.z;
    float _3145 = _3140.w;
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _3179 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _3180 = _3179 / _883;
        float _3191 = _3180 * _933;
        float _3192 = _934 * _3180;
        float _3193 = (-0.0) - _3192;
        float _3195 = _3180 * _935;
        float _3197 = (cbSceneParam._m0[77u].w * _3193) / _3179;
        float _3198 = _3197 + cbSceneParam._m0[79u].w;
        float _3199 = cbSceneParam._m0[79u].w - _3192;
        float _3205 = sqrt(((_3191 * _3191) + (_3192 * _3192)) + (_3195 * _3195));
        float _3208 = (1.0 - (cbSceneParam._m0[77u].w / _3179)) * _3205;
        float _3213 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3215 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3392;
        if (abs((_3193 - _3197) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3392 = ((((_3198 > 0.0) ? exp2(_3213 * _3198) : (2.0 - exp2(_3215 * _3198))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3208;
        }
        else
        {
            float _3336 = 1.0 / cbSceneParam._m0[80u].x;
            float _3337 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : max(_3198, _3199));
            float _3338 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : min(_3198, _3199));
            float _3347 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : min(_3337, 0.0));
            float _3348 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : min(_3338, 0.0));
            _3392 = ((abs(_3205 / _3193) * cbSceneParam._m0[80u].y) * ((((_3347 - _3348) * 2.0) - ((exp2(_3213 * (isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0)))) - exp2(_3213 * (isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))))) * _3336)) - ((exp2(_3215 * _3347) - exp2(_3215 * _3348)) * _3336))) + (_3208 * cbSceneParam._m0[80u].z);
        }
        vec4 _3394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, 1.0), 0.0);
        float _3403 = exp2((_3392 * (-1.44269502162933349609375)) * (1.0 - _3394.w));
        float _3404 = log2(_3403);
        float _3420 = log2(_3145);
        _3217 = (exp2(_3420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].x)) * _3394.x) / cbSceneParam._m0[78u].x)) + _3142;
        _3219 = (exp2(_3420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].y)) * _3394.y) / cbSceneParam._m0[78u].y)) + _3143;
        _3221 = (exp2(_3420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].z)) * _3394.z) / cbSceneParam._m0[78u].z)) + _3144;
        _3223 = _3403 * _3145;
    }
    else
    {
        _3217 = _3142;
        _3219 = _3143;
        _3221 = _3144;
        _3223 = _3145;
    }
    bool _3430;
    vec4 _3233;
    vec4 _3255;
    float _3257;
    float _3261;
    float _3262;
    float _3263;
    float _3264;
    bool _3274;
    for (;;)
    {
        _3233 = cbMatDynParam._m0[0u];
        float _3235 = roundEven(_3233.y);
        bool _3236 = _3235 == 3.0;
        float _3237 = log2(_3223);
        float _3244 = exp2(_3237 * cbSceneParam._m0[78u].x) * _3114;
        float _3245 = exp2(_3237 * cbSceneParam._m0[78u].y) * _3115;
        float _3246 = exp2(_3237 * cbSceneParam._m0[78u].z) * _3116;
        float _3253 = _946 + (-0.5);
        _3255 = cbMtdParam._m0[1u];
        _3257 = _3255.y * _3253;
        float _3260 = (_3235 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3261 = _3260 * (_3236 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3217)));
        _3262 = _3260 * (_3236 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3219)));
        _3263 = _3260 * (_3236 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3221)));
        _3264 = _3253 * 0.999000012874603271484375;
        _3274 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3274)
        {
            if ((cbInstanceData._m0[_995 + 7u].x + _3264) < 0.5)
            {
                _3430 = true;
                break;
            }
        }
        uint _3371 = _996 + uint(_3233.w);
        if ((cbInstanceData._m0[_3371].w < 1.0) && ((cbInstanceData._m0[_3371].w + _3264) < 0.5))
        {
            _3430 = true;
            break;
        }
        if ((_3257 + 1.0) < _3255.x)
        {
            _3430 = true;
            break;
        }
        _3430 = false;
        break;
    }
    float _3634;
    if (_3430)
    {
        discard_state = true;
        _3634 = 0.0;
    }
    else
    {
        _3634 = cbInstanceData._m0[_3117].w;
    }
    SV_Target.x = _3261;
    SV_Target.y = _3262;
    SV_Target.z = _3263;
    SV_Target.w = _3634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3117].w;
    discard_exit();
}


