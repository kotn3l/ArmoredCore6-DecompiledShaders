#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1508;
float _4167;
float _4168;
float _4169;
float _4170;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _292 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _307 = exp2(log2((1.0 - _296) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _330 = log2(0.0);
    float _332 = exp2(_330 * cbMtdParam._m0[23u].x);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _343 = exp2(log2(cbMtdParam._m0[23u].y * _296) * cbMtdParam._m0[22u].y);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0));
    vec4 _357 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _360 = _357.y;
    float _363 = (_357.x + (-0.02500000037252902984619140625)) * 8.0;
    float _367 = roundEven(5.0 - _363);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _382 = floor(_369);
    vec4 _385 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _382));
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[17u].x;
    _203[0u] = cbMtdParam._m0[17u].y;
    _204[0u] = cbMtdParam._m0[17u].z;
    _202[1u] = cbMtdParam._m0[15u].x;
    _203[1u] = cbMtdParam._m0[15u].y;
    _204[1u] = cbMtdParam._m0[15u].z;
    _202[2u] = cbMtdParam._m0[14u].x;
    _203[2u] = cbMtdParam._m0[14u].y;
    _204[2u] = cbMtdParam._m0[14u].z;
    _202[3u] = cbMtdParam._m0[13u].x;
    _203[3u] = cbMtdParam._m0[13u].y;
    _204[3u] = cbMtdParam._m0[13u].z;
    _202[4u] = cbMtdParam._m0[12u].x;
    _203[4u] = cbMtdParam._m0[12u].y;
    _204[4u] = cbMtdParam._m0[12u].z;
    _202[5u] = cbMtdParam._m0[18u].x;
    _203[5u] = cbMtdParam._m0[18u].y;
    _204[5u] = cbMtdParam._m0[18u].z;
    float _449 = roundEven(_363);
    float _450 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    uint _452 = uint(int(isnan(5.0) ? _450 : (isnan(_450) ? 5.0 : min(_450, 5.0))));
    vec4 _482 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _493 = cbMtdParam._m0[9u].x * _482.x;
    float _494 = cbMtdParam._m0[9u].y * _482.y;
    float _495 = cbMtdParam._m0[9u].z * _482.z;
    float _502 = ((((((_202[_452] - cbMtdParam._m0[10u].x) * _360) + cbMtdParam._m0[10u].x) * _385.x) - _493) * _345) + _493;
    float _503 = ((((((_203[_452] - cbMtdParam._m0[10u].y) * _360) + cbMtdParam._m0[10u].y) * _385.y) - _494) * _345) + _494;
    float _504 = ((((((_204[_452] - cbMtdParam._m0[10u].z) * _360) + cbMtdParam._m0[10u].z) * _385.z) - _495) * _345) + _495;
    float _510 = exp2(log2(_292.w) * cbMtdParam._m0[23u].w);
    vec4 _523 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _542 = (((cbMtdParam._m0[16u].x * _523.x) - _502) * _510) + _502;
    float _543 = (((cbMtdParam._m0[16u].y * _523.y) - _503) * _510) + _503;
    float _544 = (((cbMtdParam._m0[16u].z * _523.z) - _504) * _510) + _504;
    vec4 _557 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _577 = (((cbMtdParam._m0[19u].x * _557.x) - _542) * _334) + _542;
    float _578 = (((cbMtdParam._m0[19u].y * _557.y) - _543) * _334) + _543;
    float _579 = (((cbMtdParam._m0[19u].z * _557.z) - _544) * _334) + _544;
    vec4 _591 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _616 = (_322.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _591.x) - _577) * _309) + _577);
    float _618 = (_322.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _591.y) - _578) * _309) + _578);
    float _620 = (_322.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _591.z) - _579) * _309) + _579);
    float _624 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _633 = (_624 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _624))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4229 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _641 = ((cbMtdParam._m0[21u].x - _616) * _634) + _616;
    float _642 = ((cbMtdParam._m0[21u].y - _618) * _634) + _618;
    float _643 = ((cbMtdParam._m0[21u].z - _620) * _634) + _620;
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].x;
    _198[0u] = cbMtdParam._m0[29u].y;
    _197[1u] = cbMtdParam._m0[31u].x;
    _198[1u] = cbMtdParam._m0[31u].y;
    _197[2u] = cbMtdParam._m0[30u].z;
    _198[2u] = cbMtdParam._m0[30u].w;
    _197[3u] = cbMtdParam._m0[30u].x;
    _198[3u] = cbMtdParam._m0[30u].y;
    _197[4u] = cbMtdParam._m0[29u].z;
    _198[4u] = cbMtdParam._m0[29u].w;
    float _683 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _685 = uint(int(isnan(4.0) ? _683 : (isnan(_683) ? 4.0 : min(_683, 4.0))));
    float _692 = ((_198[_685] - cbMtdParam._m0[22u].z) * _345) + cbMtdParam._m0[22u].z;
    float _695 = ((cbMtdParam._m0[22u].w - _692) * _510) + _692;
    float _698 = ((cbMtdParam._m0[25u].y - _695) * _334) + _695;
    float _701 = ((cbMtdParam._m0[26u].y - _698) * _309) + _698;
    float _703 = _701 - (_701 * _624);
    vec4 _719 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _382));
    vec4 _736 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _744 = cbMtdParam._m0[22u].x + _736.z;
    float _747 = (((_719.z + _197[_685]) - _744) * _345) + _744;
    vec4 _759 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _770 = (((_759.z - _747) + cbMtdParam._m0[28u].z) * _510) + _747;
    float _776 = ((((_296 * 2.0) * _770) - _770) * cbMtdParam._m0[24u].w) + _770;
    vec4 _788 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _799 = (((cbMtdParam._m0[23u].z + _788.z) - _776) * _334) + _776;
    vec4 _812 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _823 = (((_812.z - _799) + cbMtdParam._m0[26u].z) * _309) + _799;
    vec4 _838 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _853 = ((cbMtdParam._m0[27u].z * _624) * ((_838.z * cbMtdParam._m0[27u].y) - _823)) + _823;
    float _865 = ((_719.x - _738) * _345) + _738;
    float _866 = ((_719.y - _739) * _345) + _739;
    float _871 = ((_759.x - _865) * _510) + _865;
    float _872 = ((_759.y - _866) * _510) + _866;
    float _877 = ((_788.x - _871) * _334) + _871;
    float _878 = ((_788.y - _872) * _334) + _872;
    float _887 = ((((_812.x - _877) * _309) + _877) * 2.0) + (-1.0);
    float _888 = ((((_812.y - _878) * _309) + _878) * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _4250 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _894 = sqrt(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))));
    float _904 = ((cbMtdParam._m0[25u].z * ((_292.x * 2.0) + (-1.0))) + _887) + ((((_838.x * 2.0) + (-1.0)) * _624) * cbMtdParam._m0[27u].x);
    float _905 = ((cbMtdParam._m0[25u].z * ((_292.y * 2.0) + (-1.0))) + _888) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_838.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _907 = gl_FragCoord.x * 0.125;
    float _909 = gl_FragCoord.y * 0.125;
    float _919 = fma(_894, _239 * NORMAL.x, fma(_905, _246 * TANGENT.x, (_232 * _224) * _904));
    float _922 = fma(_894, _239 * NORMAL.y, fma(_905, _246 * TANGENT.y, (_232 * _225) * _904));
    float _925 = fma(_894, _239 * NORMAL.z, fma(_905, _246 * TANGENT.z, (_232 * _226) * _904));
    float _929 = inversesqrt(dot(vec3(_919, _922, _925), vec3(_919, _922, _925)));
    float _930 = _929 * _919;
    float _931 = _929 * _922;
    float _932 = _929 * _925;
    float _4261 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _933 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4283 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4294 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4305 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _937 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_907, _909)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1007 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _997);
    float _1008 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _997);
    float _1009 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _997);
    float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
    float _1014 = _1007 * _1013;
    float _1015 = _1008 * _1013;
    float _1016 = _1009 * _1013;
    vec4 _1018 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_907, _909));
    float _1020 = _1018.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1190 = sqrt(((_1007 * _1007) + (_1008 * _1008)) + (_1009 * _1009));
        float _1196 = (cbMatDynParam._m0[5u].x * _1190) + cbMatDynParam._m0[5u].y;
        float _4316 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1201 = (cbMatDynParam._m0[5u].z * _1190) + cbMatDynParam._m0[5u].w;
        float _4327 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) - _1197)) + _1197) < ((_1020 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1031 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1032 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1050 = fma(_932, cbSceneParam._m0[5u].z, fma(_931, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _930));
    float _1053 = fma(_932, cbSceneParam._m0[6u].z, fma(_931, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _930));
    float _1056 = fma(_932, cbSceneParam._m0[7u].z, fma(_931, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _930));
    uint _1069 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1070 = _1069 + 9u;
    uint _1071 = _1070 + uint(cbMatDynParam._m0[0u].w);
    float _1077 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * cbInstanceData._m0[_1071].x;
    float _1078 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * cbInstanceData._m0[_1071].y;
    float _1079 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * cbInstanceData._m0[_1071].z;
    float _4338 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _4349 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _1083 = 1.0 - _937;
    float _1084 = _1080 * _1083;
    float _1085 = _1081 * _1083;
    float _1086 = _1082 * _1083;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _937;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _937;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _937;
    float _1094 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    vec4 _1106 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1031, cbSceneParam._m0[86u].y * _1032));
    float _1109 = _1106.x * TEXCOORD_3.w;
    float _1110 = dot(vec3(_930, _931, _932), vec3(_1014, _1015, _1016));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _930) - _1014;
    float _1118 = (_1113 * _931) - _1015;
    float _1119 = (_1113 * _932) - _1016;
    float _1123 = abs(dot(vec3(_1014, _1015, _1016), vec3(_930, _931, _932)));
    float _4371 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_933);
    float _1136 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1142 = (1.0 - _1136) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1143 = _1136 * _1125;
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1236 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1240 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1265 = _1171 + _930;
        float _1266 = _1175 + _931;
        float _1267 = _1179 + _932;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_930, _931, _932), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4419 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_930, _931, _932), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4452 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_930, _931, _932), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4485 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1545 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1549 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1553 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1576 = _1171 + _930;
        float _1577 = _1175 + _931;
        float _1578 = _1179 + _932;
        float _1588 = fma(_1578, cbModelParam._m0[30u].z, fma(_1577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1576)) - _1545;
        float _1589 = fma(_1578, cbModelParam._m0[31u].z, fma(_1577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1576)) - _1549;
        float _1590 = fma(_1578, cbModelParam._m0[32u].z, fma(_1577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1576)) - _1553;
        float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
        float _1607 = ((_1594 * _1588) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1545 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1594 * _1589) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1549 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1594 * _1590) / cbModelParam._m0[35u].z) + ((((((_1553 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        float _1644 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1611.x + (-0.5));
        float _1646 = _1644 * (_1611.y + (-0.5));
        float _1647 = _1644 * (_1611.z + (-0.5));
        float _1654 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1618.x + (-0.5));
        float _1656 = _1654 * (_1618.y + (-0.5));
        float _1657 = _1654 * (_1618.z + (-0.5));
        float _1664 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1625.x + (-0.5));
        float _1666 = _1664 * (_1625.y + (-0.5));
        float _1667 = _1664 * (_1625.z + (-0.5));
        float _1674 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1632.x + (-0.5));
        float _1676 = _1674 * (_1632.y + (-0.5));
        float _1677 = _1674 * (_1632.z + (-0.5));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1645 * 0.5;
        float _1682 = _1655 * 0.5;
        float _1683 = _1665 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_930, _931, _932), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4526 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4537 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4548 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_1708 + 1.0))) + _1713) * _1678;
        float _1723 = _1646 * 0.5;
        float _1724 = _1656 * 0.5;
        float _1725 = _1666 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_930, _931, _932), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4559 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4570 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4581 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_1750 + 1.0))) + _1755) * _1679;
        float _1765 = _1647 * 0.5;
        float _1766 = _1657 * 0.5;
        float _1767 = _1667 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_930, _931, _932), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4592 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4603 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4614 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_1792 + 1.0))) + _1797) * _1680;
        _1814 = _1647;
        _1815 = _1646;
        _1816 = _1645;
        _1817 = _1657;
        _1818 = _1656;
        _1819 = _1655;
        _1820 = _1667;
        _1821 = _1666;
        _1822 = _1665;
        _1823 = _1680;
        _1824 = _1679;
        _1825 = _1678;
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    }
    else
    {
        _1814 = _1508;
        _1815 = _1508;
        _1816 = _1508;
        _1817 = _1508;
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = 0.0;
        _1827 = 0.0;
        _1828 = 0.0;
    }
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1520)) + _1520;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1521)) + _1521;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1522)) + _1522;
    float _1861 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1838));
    float _1882 = _1117 * 0.5;
    float _1883 = _1118 * 0.5;
    float _1884 = _1119 * 0.5;
    float _1885 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1888 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1891 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1898 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1902 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1906 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1913 = dot(vec4(cbModelParam._m0[39u]), vec4(_1882, _1883, _1884, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1882, _1883, _1884, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _2012 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _2015 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2043 = frontier_phi_19_17_ladder;
        }
        float _2214;
        if (_2012 > 0.0)
        {
            _2214 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2214 = frontier_phi_28_24_ladder;
        }
        float _2509;
        if (_2015 > 0.0)
        {
            _2509 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2509 = frontier_phi_40_35_ladder;
        }
        float _2511 = isnan(_2214) ? _2043 : (isnan(_2043) ? _2214 : min(_2043, _2214));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _2009) + _1998;
        float _2517 = (_2512 * _2012) + _2002;
        float _2518 = (_2512 * _2015) + _2006;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2519;
        float _2523 = _2519 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 > _2523) || ((_2517 < _2521) || ((_2516 < _2521) || (_2516 > _2523))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2518, cbModelParam._m0[9u].z, fma(_2517, cbModelParam._m0[9u].y, _2516 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2518, cbModelParam._m0[10u].z, fma(_2517, cbModelParam._m0[10u].y, _2516 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2518, cbModelParam._m0[11u].z, fma(_2517, cbModelParam._m0[11u].y, _2516 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_18_40_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_18_40_ladder_2;
        _2033 = frontier_phi_18_40_ladder_1;
        _2035 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1951);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2093 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2097 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2101 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2104 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2107 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2110 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2219;
        if (_2104 > 0.0)
        {
            _2219 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2219 = frontier_phi_30_26_ladder;
        }
        float _2536;
        if (_2107 > 0.0)
        {
            _2536 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2536 = frontier_phi_42_37_ladder;
        }
        float _2874;
        if (_2110 > 0.0)
        {
            _2874 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2874 = frontier_phi_52_49_ladder;
        }
        float _2876 = isnan(_2536) ? _2219 : (isnan(_2219) ? _2536 : min(_2219, _2536));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2104) + _2093;
        float _2882 = (_2877 * _2107) + _2097;
        float _2883 = (_2877 * _2110) + _2101;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_27_52_ladder = _3005.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3005.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3005.x * cbModelParam._m0[1u].z;
        }
        _2129 = frontier_phi_27_52_ladder_2;
        _2131 = frontier_phi_27_52_ladder_1;
        _2133 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2040);
        _2129 = _2113.x * cbModelParam._m0[1u].z;
        _2131 = _2113.y * cbModelParam._m0[1u].z;
        _2133 = _2113.z * cbModelParam._m0[1u].z;
    }
    float _2146 = (((_1142 * _1094) + _1143) * _1109) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2148 = (((_1142 * _1096) + _1143) * _1109) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2150 = (((_1142 * _1097) + _1143) * _1109) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2146 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2146 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2146 * cbSceneParam._m0[91u].x));
    float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2205 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2206 = _2193 / _2205;
    float _2207 = _2197 / _2205;
    float _2208 = _2201 / _2205;
    float _2355;
    float _2356;
    float _2357;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2235 = ((uint(_2208 > cbSceneParam._m0[59u].y) + uint(_2208 > cbSceneParam._m0[59u].x)) + uint(_2208 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2236 = _2235 + 43u;
        uint _2244 = _2235 + 44u;
        uint _2252 = _2235 + 45u;
        uint _2260 = _2235 + 46u;
        float _2271 = fma(_2205, cbSceneParam._m0[_2236].w, fma(_2201, cbSceneParam._m0[_2236].z, fma(_2197, cbSceneParam._m0[_2236].y, _2193 * cbSceneParam._m0[_2236].x)));
        float _2275 = fma(_2205, cbSceneParam._m0[_2244].w, fma(_2201, cbSceneParam._m0[_2244].z, fma(_2197, cbSceneParam._m0[_2244].y, _2193 * cbSceneParam._m0[_2244].x)));
        float _2283 = fma(_2205, cbSceneParam._m0[_2260].w, fma(_2201, cbSceneParam._m0[_2260].z, fma(_2197, cbSceneParam._m0[_2260].y, _2193 * cbSceneParam._m0[_2260].x)));
        float _2288 = cbSceneParam._m0[33u].z * _2283;
        float _2290 = cbSceneParam._m0[33u].w * _2283;
        float _2293 = fma(_2205, cbSceneParam._m0[_2252].w, fma(_2201, cbSceneParam._m0[_2252].z, fma(_2197, cbSceneParam._m0[_2252].y, _2193 * cbSceneParam._m0[_2252].x))) / _2283;
        float _2341 = (cbSceneParam._m0[33u].x - sqrt(((_2207 * _2207) + (_2206 * _2206)) + (_2208 * _2208))) * cbSceneParam._m0[33u].y;
        float _4740 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2348 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2288 + _2271) / _2283, (_2290 + _2275) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2290 + _2271) / _2283, (_2275 - _2288) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 - _2288) / _2283, (_2275 - _2290) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 - _2290) / _2283, (_2288 + _2275) / _2283), _2293), 0.0)).x), vec4(0.25)));
        _2355 = 1.0 - (_2348 * cbSceneParam._m0[34u].x);
        _2356 = 1.0 - (_2348 * cbSceneParam._m0[34u].y);
        _2357 = 1.0 - (_2348 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2355 = 1.0;
        _2356 = 1.0;
        _2357 = 1.0;
    }
    float _2421;
    float _2423;
    float _2425;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2409 = fma(_2205, cbSceneParam._m0[63u].w, fma(_2201, cbSceneParam._m0[63u].z, fma(_2197, cbSceneParam._m0[63u].y, _2193 * cbSceneParam._m0[63u].x)));
        float _2410 = fma(_2205, cbSceneParam._m0[60u].w, fma(_2201, cbSceneParam._m0[60u].z, fma(_2197, cbSceneParam._m0[60u].y, _2193 * cbSceneParam._m0[60u].x))) / _2409;
        float _2411 = fma(_2205, cbSceneParam._m0[61u].w, fma(_2201, cbSceneParam._m0[61u].z, fma(_2197, cbSceneParam._m0[61u].y, _2193 * cbSceneParam._m0[61u].x))) / _2409;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2410 >= cbSceneParam._m0[64u].x) && (_2411 >= cbSceneParam._m0[64u].y)) && (_2410 <= cbSceneParam._m0[64u].z)) && (_2411 <= cbSceneParam._m0[64u].w))
        {
            float _2549 = fma(_2205, cbSceneParam._m0[62u].w, fma(_2201, cbSceneParam._m0[62u].z, fma(_2197, cbSceneParam._m0[62u].y, _2193 * cbSceneParam._m0[62u].x))) / _2409;
            float _2553 = isnan(cbSceneParam._m0[41u].w) ? _2549 : (isnan(_2549) ? cbSceneParam._m0[41u].w : max(_2549, cbSceneParam._m0[41u].w));
            float _2596 = (cbSceneParam._m0[33u].x - sqrt(((_2207 * _2207) + (_2206 * _2206)) + (_2208 * _2208))) * cbSceneParam._m0[33u].y;
            float _4756 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
            float _2603 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2410, cbSceneParam._m0[33u].w + _2411), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2410, _2411 - cbSceneParam._m0[33u].z), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2410 - cbSceneParam._m0[33u].z, _2411 - cbSceneParam._m0[33u].w), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2410 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2411), _2553), 0.0)).x), vec4(0.25)));
            float _2607 = 1.0 - (_2603 * cbSceneParam._m0[34u].x);
            float _2608 = 1.0 - (_2603 * cbSceneParam._m0[34u].y);
            float _2609 = 1.0 - (_2603 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
            frontier_phi_39_38_ladder_1 = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
            frontier_phi_39_38_ladder_2 = isnan(_2607) ? _2355 : (isnan(_2355) ? _2607 : min(_2355, _2607));
        }
        else
        {
            frontier_phi_39_38_ladder = _2357;
            frontier_phi_39_38_ladder_1 = _2356;
            frontier_phi_39_38_ladder_2 = _2355;
        }
        _2421 = frontier_phi_39_38_ladder_2;
        _2423 = frontier_phi_39_38_ladder_1;
        _2425 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2421 = _2355;
        _2423 = _2356;
        _2425 = _2357;
    }
    uvec4 _2430 = floatBitsToUint(cbInstanceData._m0[_1069 + 5u]);
    uint _2432 = _2430.x * 14u;
    uint _2433 = _2432 + 13u;
    float _2440 = _1109 + (-1.0);
    float _2445 = (cbLight._m0[_2433].x * _2440) + 1.0;
    float _2446 = (cbLight._m0[_2433].y * _2440) + 1.0;
    float _2447 = (cbLight._m0[_2433].z * _2440) + 1.0;
    float _2448 = (cbLight._m0[_2433].w * _2440) + 1.0;
    uint _2449 = _2432 + 5u;
    float _2455 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2459 = _2432 + 4u;
    float _2468 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
    uint _2472 = _2432 | 1u;
    float _2483 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_930, _931, _932));
    float _2486 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_930, _931, _932));
    float _4792 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _4803 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2491 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * 0.3183098733425140380859375;
    float _2493 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * 0.3183098733425140380859375;
    float _2500 = ((cbLight._m0[_2449].x * _2455) * _2493) + (((cbLight._m0[_2459].x * _2421) * _2468) * _2491);
    float _2501 = ((_2455 * cbLight._m0[_2449].y) * _2493) + (((cbLight._m0[_2459].y * _2423) * _2468) * _2491);
    float _2502 = ((_2455 * cbLight._m0[_2449].z) * _2493) + (((cbLight._m0[_2459].z * _2425) * _2468) * _2491);
    uvec4 _2506 = floatBitsToUint(cbLight._m0[_2432 + 12u]);
    bool _2508 = _2506.x == 0u;
    float _2610;
    float _2612;
    float _2614;
    if (_2508)
    {
        _2610 = _2500;
        _2612 = _2501;
        _2614 = _2502;
    }
    else
    {
        uint _2618 = _2432 + 6u;
        float _2634 = (dot(vec3(cbLight._m0[_2432 + 2u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4814 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2637 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2610 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2500;
        _2612 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2501;
        _2614 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2502;
    }
    bool _2617 = _2506.y == 0u;
    float _2672;
    float _2674;
    float _2676;
    if (_2617)
    {
        _2672 = _2610;
        _2674 = _2612;
        _2676 = _2614;
    }
    else
    {
        uint _2845 = _2432 + 7u;
        float _2861 = (dot(vec3(cbLight._m0[_2432 + 3u].xyz), vec3(_930, _931, _932)) * 0.5) + 0.5;
        float _2862 = _2861 * _2861;
        float _4830 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2863 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2864 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2672 = (((cbLight._m0[_2845].x * 0.3183098733425140380859375) * _2863) * _2864) + _2610;
        _2674 = (((cbLight._m0[_2845].y * 0.3183098733425140380859375) * _2863) * _2864) + _2612;
        _2676 = (((cbLight._m0[_2845].z * 0.3183098733425140380859375) * _2863) * _2864) + _2614;
    }
    uint _2679 = _2432 + 8u;
    float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _933) * 0.949999988079071044921875);
    float _2693 = _2692 * _2692;
    float _2694 = cbLight._m0[_2432].x + _1014;
    float _2695 = cbLight._m0[_2432].y + _1015;
    float _2696 = cbLight._m0[_2432].z + _1016;
    float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
    float _2701 = _2700 * _2694;
    float _2702 = _2700 * _2695;
    float _2703 = _2700 * _2696;
    float _2704 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2432].xyz));
    float _4846 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _4857 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2708 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _2709 = dot(vec3(_930, _931, _932), vec3(_2701, _2702, _2703));
    float _4868 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2701, _2702, _2703));
    float _4879 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2693 * _2693;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) * 5.0);
    float _2730 = 0.959999978542327880859375 - _1091;
    float _2732 = 0.959999978542327880859375 - _1092;
    float _2733 = 0.959999978542327880859375 - _1093;
    float _2740 = 1.0 - _2693;
    float _2751 = (0.5 / (((_2708 * ((_2707 * _2740) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2740) + _2693) * _2707))) * _2707;
    float _4890 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2753 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    uint _2767 = _2432 + 9u;
    float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _933) * 0.949999988079071044921875);
    float _2779 = _2778 * _2778;
    float _2780 = cbLight._m0[_2472].x + _1014;
    float _2781 = cbLight._m0[_2472].y + _1015;
    float _2782 = cbLight._m0[_2472].z + _1016;
    float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
    float _2787 = _2786 * _2780;
    float _2788 = _2786 * _2781;
    float _2789 = _2786 * _2782;
    float _2790 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2472].xyz));
    float _4901 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
    float _2794 = dot(vec3(_930, _931, _932), vec3(_2787, _2788, _2789));
    float _4912 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    float _2798 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2787, _2788, _2789));
    float _4923 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2802 = _2779 * _2779;
    float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
    float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) * 5.0);
    float _2820 = 1.0 - _2779;
    float _2830 = (0.5 / (((_2708 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2820) + _2779) * _2793))) * _2793;
    float _4934 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2832 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
    float _2842 = (((((_2813 * _2730) + _1094) * cbLight._m0[_2767].x) * _2832) * _2455) + ((((cbLight._m0[_2679].x * _2421) * ((_2729 * _2730) + _1094)) * _2753) * _2468);
    float _2843 = (((((_2813 * _2732) + _1096) * cbLight._m0[_2767].y) * _2832) * _2455) + ((((cbLight._m0[_2679].y * _2423) * ((_2729 * _2732) + _1096)) * _2753) * _2468);
    float _2844 = (((((_2813 * _2733) + _1097) * cbLight._m0[_2767].z) * _2832) * _2455) + ((((cbLight._m0[_2679].z * _2425) * ((_2729 * _2733) + _1097)) * _2753) * _2468);
    float _2900;
    float _2902;
    float _2904;
    if (_2508)
    {
        _2900 = _2842;
        _2902 = _2843;
        _2904 = _2844;
    }
    else
    {
        uint _2906 = _2432 + 2u;
        uint _2910 = _2432 + 10u;
        float _2924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2906].w)) * _933) * 0.949999988079071044921875);
        float _2925 = _2924 * _2924;
        float _2926 = cbLight._m0[_2906].x + _1014;
        float _2927 = cbLight._m0[_2906].y + _1015;
        float _2928 = cbLight._m0[_2906].z + _1016;
        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
        float _2933 = _2932 * _2926;
        float _2934 = _2932 * _2927;
        float _2935 = _2932 * _2928;
        float _2936 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_2906].xyz));
        float _4945 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
        float _2940 = dot(vec3(_930, _931, _932), vec3(_2933, _2934, _2935));
        float _4956 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2944 = dot(vec3(cbLight._m0[_2906].xyz), vec3(_2933, _2934, _2935));
        float _4967 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2948 = _2925 * _2925;
        float _2952 = ((_2943 * _2943) * (_2948 + (-1.0))) + 1.0;
        float _2959 = exp2(log2(1.0 - (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) * 5.0);
        float _2966 = 1.0 - _2925;
        float _2976 = (0.5 / (((_2708 * ((_2939 * _2966) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2966) + _2925) * _2939))) * _2939;
        float _4978 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2978 = (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2948 / ((_2952 * _2952) * 3.141590118408203125));
        float _2979 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2900 = (((((_2959 * _2730) + _1094) * cbLight._m0[_2910].x) * _2978) * _2979) + _2842;
        _2902 = (((((_2959 * _2732) + _1096) * cbLight._m0[_2910].y) * _2978) * _2979) + _2843;
        _2904 = (((((_2959 * _2733) + _1097) * cbLight._m0[_2910].z) * _2978) * _2979) + _2844;
    }
    float _3010;
    float _3012;
    float _3014;
    if (_2617)
    {
        _3010 = _2900;
        _3012 = _2902;
        _3014 = _2904;
    }
    else
    {
        uint _3021 = _2432 + 3u;
        uint _3025 = _2432 + 11u;
        float _3039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3021].w)) * _933) * 0.949999988079071044921875);
        float _3040 = _3039 * _3039;
        float _3041 = cbLight._m0[_3021].x + _1014;
        float _3042 = cbLight._m0[_3021].y + _1015;
        float _3043 = cbLight._m0[_3021].z + _1016;
        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
        float _3048 = _3047 * _3041;
        float _3049 = _3047 * _3042;
        float _3050 = _3047 * _3043;
        float _3051 = dot(vec3(_930, _931, _932), vec3(cbLight._m0[_3021].xyz));
        float _4994 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _3055 = dot(vec3(_930, _931, _932), vec3(_3048, _3049, _3050));
        float _5005 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3058 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _3059 = dot(vec3(cbLight._m0[_3021].xyz), vec3(_3048, _3049, _3050));
        float _5016 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3063 = _3040 * _3040;
        float _3067 = ((_3058 * _3058) * (_3063 + (-1.0))) + 1.0;
        float _3074 = exp2(log2(1.0 - (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) * 5.0);
        float _3081 = 1.0 - _3040;
        float _3091 = (0.5 / (((_2708 * ((_3054 * _3081) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _3081) + _3040) * _3054))) * _3054;
        float _5027 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3093 = (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3063 / ((_3067 * _3067) * 3.141590118408203125));
        float _3094 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _3010 = (((((_3074 * _2730) + _1094) * cbLight._m0[_3025].x) * _3093) * _3094) + _2900;
        _3012 = (((((_3074 * _2732) + _1096) * cbLight._m0[_3025].y) * _3093) * _3094) + _2902;
        _3014 = (((((_3074 * _2733) + _1097) * cbLight._m0[_3025].z) * _3093) * _3094) + _2904;
    }
    float _3160;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    if (_2430.y == 0u)
    {
        uvec4 _3115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3116 = _3115.x;
        uint _3127 = uint((float(_3115.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1032) / _3116))) + floor(float(uint(cbSceneParam._m0[85u].x * _1031) / _3116)));
        float _3137 = (log2(_2208 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3138 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
        uint _3141 = uint(isnan(14.0) ? _3138 : (isnan(_3138) ? 14.0 : min(_3138, 14.0)));
        uvec4 _3146 = texelFetch(g_lightClusterGridBuffer, int(((_3141 << 2u) + (_3127 << 6u)) >> 2u));
        uint _3147 = _3146.x;
        uint _3148 = _3115.z;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        if (((((1u << ((_3148 >> 4u) & 15u)) + 4294967295u) & _3147) == 0u) || ((_3148 & 240u) == 0u))
        {
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
        }
        else
        {
            float _3228;
            float _3230;
            float _3232;
            float _3234;
            float _3236;
            float _3238;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            uint _3386 = 0u;
            uint _3395;
            bool _3396;
            for (;;)
            {
                _3395 = texelFetch(g_lightClassification, int((((_3141 << 5u) + (_3127 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                _3396 = _3395 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3396)
                {
                    frontier_phi_73_pred = _3385;
                    frontier_phi_73_pred_1 = _3384;
                    frontier_phi_73_pred_2 = _3383;
                    frontier_phi_73_pred_3 = _3382;
                    frontier_phi_73_pred_4 = _3381;
                    frontier_phi_73_pred_5 = _3380;
                }
                else
                {
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    uint _3531;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3395;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    for (;;)
                    {
                        uint _3535 = uint(findLSB(_3531)) + (_3386 << 5u);
                        uint _3532 = (_3531 + 4294967295u) & _3531;
                        uint _3537 = _3535 * 48u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3557 = (_3535 * 48u) + 4u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 3u)).x));
                        uint _3576 = (_3535 * 48u) + 8u;
                        vec3 _3587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x));
                        float _3591 = _3551.x - _2206;
                        float _3592 = _3551.y - _2207;
                        float _3593 = _3551.z - _2208;
                        float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                        float _3597 = inversesqrt(_3594);
                        float _3598 = _3597 * _3591;
                        float _3599 = _3597 * _3592;
                        float _3600 = _3597 * _3593;
                        float _3601 = dot(vec3(_1050, _1053, _1056), vec3(_3598, _3599, _3600));
                        float _3606 = 1.0 - (_3594 * _3551.w);
                        float _5053 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                        float _3608 = sqrt(_3594) * _3570.w;
                        float _3611 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3601) + _3612;
                        float _3618 = _3608 * _3608;
                        float _3622 = ((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3607) / ((_3618 * 0.699999988079071044921875) + 1.0);
                        float _3626 = (-0.0) - _2206;
                        float _3627 = (-0.0) - _2207;
                        float _3628 = (-0.0) - _2208;
                        float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                        float _3633 = _3632 * _3626;
                        float _3634 = _3632 * _3627;
                        float _3635 = _3632 * _3628;
                        float _3642 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                        float _3643 = 1.0 - _1125;
                        float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                        float _3651 = _3650 * _3650;
                        float _3652 = _3651 * _3651;
                        float _3653 = _3633 + _3598;
                        float _3654 = _3634 + _3599;
                        float _3655 = _3635 + _3600;
                        float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                        float _3663 = dot(vec3(_1050, _1053, _1056), vec3(_3633, _3634, _3635));
                        float _5069 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3666 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3667 = dot(vec3(_1050, _1053, _1056), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                        float _5080 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3670 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                        float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                        float _3675 = _3611 * _3651;
                        float _3676 = _3675 * _3675;
                        float _3679 = ((1.0 - _3676) * _3601) + _3676;
                        float _5091 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3680 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3681 = 1.0 - _3651;
                        float _3691 = (0.5 / (((_3680 * ((_3666 * _3681) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3651) * _3666))) * _3680;
                        float _5102 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3702 = (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)))) / ((_3674 * _3674) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125))) * _3607;
                        _3455 = (_3622 * _3570.x) + _3528;
                        _3456 = (_3622 * _3570.y) + _3529;
                        _3457 = (_3622 * _3570.z) + _3530;
                        _3452 = (_3702 * _3587.x) + _3525;
                        _3453 = (_3702 * _3587.y) + _3526;
                        _3454 = (_3702 * _3587.z) + _3527;
                        if (_3532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3532;
                        }
                    }
                    frontier_phi_73_pred = _3457;
                    frontier_phi_73_pred_1 = _3456;
                    frontier_phi_73_pred_2 = _3455;
                    frontier_phi_73_pred_3 = _3454;
                    frontier_phi_73_pred_4 = _3453;
                    frontier_phi_73_pred_5 = _3452;
                }
                _3238 = frontier_phi_73_pred;
                _3236 = frontier_phi_73_pred_1;
                _3234 = frontier_phi_73_pred_2;
                _3232 = frontier_phi_73_pred_3;
                _3230 = frontier_phi_73_pred_4;
                _3228 = frontier_phi_73_pred_5;
                uint _3387 = _3386 + 1u;
                if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3380 = _3228;
                    _3381 = _3230;
                    _3382 = _3232;
                    _3383 = _3234;
                    _3384 = _3236;
                    _3385 = _3238;
                    _3386 = _3387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
        }
        uvec4 _3241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3242 = _3241.z;
        uint _3244 = (_3242 >> 8u) & 15u;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        if (((4294967295u << _3244) & _3147) == 0u)
        {
            _3348 = _3227;
            _3350 = _3229;
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
        }
        else
        {
            float _3373 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
            float _3374 = _3373 * _2206;
            float _3375 = _3373 * _2207;
            float _3376 = _3373 * _2208;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3244 < ((_3242 >> 12u) & 15u))
            {
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3508 = _3227;
                float _3509 = _3229;
                float _3510 = _3231;
                float _3511 = _3233;
                float _3512 = _3235;
                float _3513 = _3237;
                uint _3514 = _3244;
                uint _3523;
                bool _3524;
                for (;;)
                {
                    _3523 = texelFetch(g_lightClassification, int((((_3141 << 5u) + (_3127 << 9u)) + (_3514 << 2u)) >> 2u)).x;
                    _3524 = _3523 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3524)
                    {
                        frontier_phi_84_pred = _3513;
                        frontier_phi_84_pred_1 = _3512;
                        frontier_phi_84_pred_2 = _3511;
                        frontier_phi_84_pred_3 = _3510;
                        frontier_phi_84_pred_4 = _3509;
                        frontier_phi_84_pred_5 = _3508;
                    }
                    else
                    {
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        uint _3735 = _3523;
                        uint _3736;
                        vec4 _3761;
                        float _3762;
                        vec4 _3777;
                        vec3 _3789;
                        vec4 _3804;
                        vec4 _3819;
                        float _3865;
                        bool _3866;
                        for (;;)
                        {
                            uint _3746 = ((_3514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3735));
                            _3736 = (_3735 + 4294967295u) & _3735;
                            uint _3748 = _3746 * 40u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3762 = _3761.w;
                            uint _3764 = (_3746 * 40u) + 4u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3746 * 40u) + 8u;
                            _3789 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x));
                            uint _3791 = (_3746 * 40u) + 16u;
                            _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3806 = (_3746 * 40u) + 20u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3746 * 40u) + 24u;
                            vec4 _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3840 = (_3746 * 40u) + 28u;
                            vec4 _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            _3865 = fma(_2208, _3853.z, fma(_2207, _3853.y, _3853.x * _2206)) + _3853.w;
                            _3866 = !((fma(_2208, _3834.z, fma(_2207, _3834.y, _3834.x * _2206)) + _3834.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3866)
                            {
                                float _3893 = _3761.x - _2206;
                                float _3894 = _3761.y - _2207;
                                float _3895 = _3761.z - _2208;
                                float _3896 = dot(vec3(_3893, _3894, _3895), vec3(_3893, _3894, _3895));
                                float _3899 = inversesqrt(_3896);
                                float _3900 = _3899 * _3893;
                                float _3901 = _3899 * _3894;
                                float _3902 = _3899 * _3895;
                                float _3906 = 1.0 - (_3896 / (_3762 * _3762));
                                float _5113 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3911 = sqrt(_3896) * _3777.w;
                                float _3913 = 1.39999997615814208984375 / (_3911 + 1.39999997615814208984375);
                                float _3914 = _3913 * _3913;
                                float _3917 = ((1.0 - _3914) * dot(vec3(_3900, _3901, _3902), vec3(_1050, _1053, _1056))) + _3914;
                                float _3920 = _3911 * _3911;
                                float _3924 = (fma(_2208, _3804.z, fma(_2207, _3804.y, _3804.x * _2206)) + _3804.w) / _3865;
                                float _3925 = (fma(_2208, _3819.z, fma(_2207, _3819.y, _3819.x * _2206)) + _3819.w) / _3865;
                                float _3929 = 1.0 - dot(vec2(_3924, _3925), vec2(_3924, _3925));
                                float _5129 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3931 = _3930 * (((isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0))) * _3907) / ((_3920 * 0.699999988079071044921875) + 1.0));
                                float _3943 = exp2(log2(1.0 / ((_3920 * 3.5) + 5.0)) * 0.25);
                                float _3944 = 1.0 - _1125;
                                float _3951 = sqrt(1.0 - ((1.0 - (_3944 * _3944)) * (1.0 - (_3943 * _3943))));
                                float _3952 = _3951 * _3951;
                                float _3953 = _3952 * _3952;
                                float _3954 = _3900 - _3374;
                                float _3955 = _3901 - _3375;
                                float _3956 = _3902 - _3376;
                                float _3960 = inversesqrt(dot(vec3(_3954, _3955, _3956), vec3(_3954, _3955, _3956)));
                                float _3964 = dot(vec3(_1050, _1053, _1056), vec3((-0.0) - _3374, (-0.0) - _3375, (-0.0) - _3376));
                                float _5140 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3967 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3968 = dot(vec3(_1050, _1053, _1056), vec3(_3960 * _3954, _3960 * _3955, _3960 * _3956));
                                float _5151 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3975 = ((_3971 * _3971) * (_3953 + (-1.0))) + 1.0;
                                float _3976 = _3913 * _3952;
                                float _3977 = _3976 * _3976;
                                float _3983 = ((1.0 - _3977) * dot(vec3(_1050, _1053, _1056), vec3(_3900, _3901, _3902))) + _3977;
                                float _5162 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3984 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3985 = 1.0 - _3952;
                                float _3995 = (0.5 / (((_3984 * ((_3967 * _3985) + _3952)) + 9.9999999392252902907785028219223e-09) + (((_3984 * _3985) + _3952) * _3967))) * _3984;
                                float _5173 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _4005 = (_3930 * _3907) * (((_3953 * 3.1415927410125732421875) * (isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0)))) / ((_3975 * _3975) * ((_3920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3931 * _3777.z;
                                frontier_phi_90_pred_1 = _3931 * _3777.y;
                                frontier_phi_90_pred_2 = _3931 * _3777.x;
                                frontier_phi_90_pred_3 = _4005 * _3789.z;
                                frontier_phi_90_pred_4 = _4005 * _3789.y;
                                frontier_phi_90_pred_5 = _4005 * _3789.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4014 = frontier_phi_90_pred;
                            _4013 = frontier_phi_90_pred_1;
                            _4012 = frontier_phi_90_pred_2;
                            _4011 = frontier_phi_90_pred_3;
                            _4010 = frontier_phi_90_pred_4;
                            _4009 = frontier_phi_90_pred_5;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            if (_3736 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3736;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3721;
                        frontier_phi_84_pred_1 = _3720;
                        frontier_phi_84_pred_2 = _3719;
                        frontier_phi_84_pred_3 = _3718;
                        frontier_phi_84_pred_4 = _3717;
                        frontier_phi_84_pred_5 = _3716;
                    }
                    _3359 = frontier_phi_84_pred;
                    _3357 = frontier_phi_84_pred_1;
                    _3355 = frontier_phi_84_pred_2;
                    _3353 = frontier_phi_84_pred_3;
                    _3351 = frontier_phi_84_pred_4;
                    _3349 = frontier_phi_84_pred_5;
                    uint _3515 = _3514 + 1u;
                    if (_3515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3508 = _3349;
                        _3509 = _3351;
                        _3510 = _3353;
                        _3511 = _3355;
                        _3512 = _3357;
                        _3513 = _3359;
                        _3514 = _3515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3355;
                frontier_phi_65_66_ladder_1 = _3359;
                frontier_phi_65_66_ladder_2 = _3357;
                frontier_phi_65_66_ladder_3 = _3353;
                frontier_phi_65_66_ladder_4 = _3351;
                frontier_phi_65_66_ladder_5 = _3349;
            }
            else
            {
                frontier_phi_65_66_ladder = _3233;
                frontier_phi_65_66_ladder_1 = _3237;
                frontier_phi_65_66_ladder_2 = _3235;
                frontier_phi_65_66_ladder_3 = _3231;
                frontier_phi_65_66_ladder_4 = _3229;
                frontier_phi_65_66_ladder_5 = _3227;
            }
            _3348 = frontier_phi_65_66_ladder_5;
            _3350 = frontier_phi_65_66_ladder_4;
            _3352 = frontier_phi_65_66_ladder_3;
            _3354 = frontier_phi_65_66_ladder;
            _3356 = frontier_phi_65_66_ladder_2;
            _3358 = frontier_phi_65_66_ladder_1;
        }
        float _3363 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _3160 = (_3363 * _3354) + _2672;
        _3162 = (_3363 * _3356) + _2674;
        _3164 = (_3363 * _3358) + _2676;
        _3166 = ((_3348 * _1094) * _3363) + _3010;
        _3168 = ((_3350 * _1096) * _3363) + _3012;
        _3170 = ((_3352 * _1097) * _3363) + _3014;
    }
    else
    {
        _3160 = _2672;
        _3162 = _2674;
        _3164 = _2676;
        _3166 = _3010;
        _3168 = _3012;
        _3170 = _3014;
    }
    float _5189 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _5200 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _5211 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _3187 = ((isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0))) * (_3160 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1109))) + ((_3166 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _3188 = ((isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0))) * (_3162 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1109))) + ((_3168 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _3189 = ((isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3164 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1109))) + ((_3170 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    uint _3190 = _1069 + 6u;
    float _3198 = _1031 / cbSceneParam._m0[86u].x;
    float _3199 = _1032 / cbSceneParam._m0[86u].y;
    vec4 _3213 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3198, _3199, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3215 = _3213.x;
    float _3216 = _3213.y;
    float _3217 = _3213.z;
    float _3218 = _3213.w;
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _3252 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _3253 = _3252 / _957;
        float _3264 = _3253 * _1007;
        float _3265 = _1008 * _3253;
        float _3266 = (-0.0) - _3265;
        float _3268 = _3253 * _1009;
        float _3270 = (cbSceneParam._m0[77u].w * _3266) / _3252;
        float _3271 = _3270 + cbSceneParam._m0[79u].w;
        float _3272 = cbSceneParam._m0[79u].w - _3265;
        float _3278 = sqrt(((_3264 * _3264) + (_3265 * _3265)) + (_3268 * _3268));
        float _3281 = (1.0 - (cbSceneParam._m0[77u].w / _3252)) * _3278;
        float _3286 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3288 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3465;
        if (abs((_3266 - _3270) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3465 = ((((_3271 > 0.0) ? exp2(_3286 * _3271) : (2.0 - exp2(_3288 * _3271))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3281;
        }
        else
        {
            float _3409 = 1.0 / cbSceneParam._m0[80u].x;
            float _3410 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : max(_3271, _3272));
            float _3411 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : min(_3271, _3272));
            float _3420 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : min(_3410, 0.0));
            float _3421 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : min(_3411, 0.0));
            _3465 = ((abs(_3278 / _3266) * cbSceneParam._m0[80u].y) * ((((_3420 - _3421) * 2.0) - ((exp2(_3286 * (isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0)))) - exp2(_3286 * (isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))))) * _3409)) - ((exp2(_3288 * _3420) - exp2(_3288 * _3421)) * _3409))) + (_3281 * cbSceneParam._m0[80u].z);
        }
        vec4 _3467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3198, _3199, 1.0), 0.0);
        float _3476 = exp2((_3465 * (-1.44269502162933349609375)) * (1.0 - _3467.w));
        float _3477 = log2(_3476);
        float _3493 = log2(_3218);
        _3290 = (exp2(_3493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].x)) * _3467.x) / cbSceneParam._m0[78u].x)) + _3215;
        _3292 = (exp2(_3493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].y)) * _3467.y) / cbSceneParam._m0[78u].y)) + _3216;
        _3294 = (exp2(_3493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].z)) * _3467.z) / cbSceneParam._m0[78u].z)) + _3217;
        _3296 = _3476 * _3218;
    }
    else
    {
        _3290 = _3215;
        _3292 = _3216;
        _3294 = _3217;
        _3296 = _3218;
    }
    bool _3503;
    vec4 _3306;
    vec4 _3328;
    float _3330;
    float _3334;
    float _3335;
    float _3336;
    float _3337;
    bool _3347;
    for (;;)
    {
        _3306 = cbMatDynParam._m0[0u];
        float _3308 = roundEven(_3306.y);
        bool _3309 = _3308 == 3.0;
        float _3310 = log2(_3296);
        float _3317 = exp2(_3310 * cbSceneParam._m0[78u].x) * _3187;
        float _3318 = exp2(_3310 * cbSceneParam._m0[78u].y) * _3188;
        float _3319 = exp2(_3310 * cbSceneParam._m0[78u].z) * _3189;
        float _3326 = _1020 + (-0.5);
        _3328 = cbMtdParam._m0[1u];
        _3330 = _3328.y * _3326;
        float _3333 = (_3308 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3334 = _3333 * (_3309 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3290)));
        _3335 = _3333 * (_3309 ? _3318 : (_3318 + (cbSceneParam._m0[72u].w * _3292)));
        _3336 = _3333 * (_3309 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3294)));
        _3337 = _3326 * 0.999000012874603271484375;
        _3347 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3347)
        {
            if ((cbInstanceData._m0[_1069 + 7u].x + _3337) < 0.5)
            {
                _3503 = true;
                break;
            }
        }
        uint _3444 = _1070 + uint(_3306.w);
        if ((cbInstanceData._m0[_3444].w < 1.0) && ((cbInstanceData._m0[_3444].w + _3337) < 0.5))
        {
            _3503 = true;
            break;
        }
        if ((_3330 + 1.0) < _3328.x)
        {
            _3503 = true;
            break;
        }
        _3503 = false;
        break;
    }
    float _3707;
    if (_3503)
    {
        discard_state = true;
        _3707 = 0.0;
    }
    else
    {
        _3707 = cbInstanceData._m0[_3190].w;
    }
    SV_Target.x = _3334;
    SV_Target.y = _3335;
    SV_Target.z = _3336;
    SV_Target.w = _3707;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3190].w;
    discard_exit();
}


