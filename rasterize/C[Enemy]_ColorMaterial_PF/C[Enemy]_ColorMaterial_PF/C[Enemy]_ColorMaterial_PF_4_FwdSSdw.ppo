#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1454;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _301 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _317 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _329 = exp2(log2(_317.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    float _340 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    vec4 _354 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _357 = _354.y;
    float _360 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _364 = roundEven(5.0 - _360);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _366 = isnan(4.0) ? _365 : (isnan(_365) ? 4.0 : min(_365, 4.0));
    float _379 = floor(_366);
    vec4 _382 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _379));
    float _196[6];
    float _197[6];
    float _198[6];
    _196[0u] = cbMtdParam._m0[17u].x;
    _197[0u] = cbMtdParam._m0[17u].y;
    _198[0u] = cbMtdParam._m0[17u].z;
    _196[1u] = cbMtdParam._m0[15u].x;
    _197[1u] = cbMtdParam._m0[15u].y;
    _198[1u] = cbMtdParam._m0[15u].z;
    _196[2u] = cbMtdParam._m0[14u].x;
    _197[2u] = cbMtdParam._m0[14u].y;
    _198[2u] = cbMtdParam._m0[14u].z;
    _196[3u] = cbMtdParam._m0[13u].x;
    _197[3u] = cbMtdParam._m0[13u].y;
    _198[3u] = cbMtdParam._m0[13u].z;
    _196[4u] = cbMtdParam._m0[12u].x;
    _197[4u] = cbMtdParam._m0[12u].y;
    _198[4u] = cbMtdParam._m0[12u].z;
    _196[5u] = cbMtdParam._m0[18u].x;
    _197[5u] = cbMtdParam._m0[18u].y;
    _198[5u] = cbMtdParam._m0[18u].z;
    float _446 = roundEven(_360);
    float _447 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _449 = uint(int(isnan(5.0) ? _447 : (isnan(_447) ? 5.0 : min(_447, 5.0))));
    vec4 _479 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _490 = cbMtdParam._m0[9u].x * _479.x;
    float _491 = cbMtdParam._m0[9u].y * _479.y;
    float _492 = cbMtdParam._m0[9u].z * _479.z;
    float _499 = ((((((_196[_449] - cbMtdParam._m0[10u].x) * _357) + cbMtdParam._m0[10u].x) * _382.x) - _490) * _342) + _490;
    float _500 = ((((((_197[_449] - cbMtdParam._m0[10u].y) * _357) + cbMtdParam._m0[10u].y) * _382.y) - _491) * _342) + _491;
    float _501 = ((((((_198[_449] - cbMtdParam._m0[10u].z) * _357) + cbMtdParam._m0[10u].z) * _382.z) - _492) * _342) + _492;
    float _507 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _520 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _539 = (((cbMtdParam._m0[16u].x * _520.x) - _499) * _507) + _499;
    float _540 = (((cbMtdParam._m0[16u].y * _520.y) - _500) * _507) + _500;
    float _541 = (((cbMtdParam._m0[16u].z * _520.z) - _501) * _507) + _501;
    vec4 _554 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _574 = (((cbMtdParam._m0[19u].x * _554.x) - _539) * _331) + _539;
    float _575 = (((cbMtdParam._m0[19u].y * _554.y) - _540) * _331) + _540;
    float _576 = (((cbMtdParam._m0[19u].z * _554.z) - _541) * _331) + _541;
    vec4 _588 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _613 = (_317.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _588.x) - _574) * _303) + _574);
    float _615 = (_317.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _588.y) - _575) * _303) + _575);
    float _617 = (_317.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _588.z) - _576) * _303) + _576);
    float _621 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _630 = (_621 - (((texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _621))) * (cbMtdParam._m0[28u].x + 1.0);
    float _3851 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _638 = ((cbMtdParam._m0[21u].x - _613) * _631) + _613;
    float _639 = ((cbMtdParam._m0[21u].y - _615) * _631) + _615;
    float _640 = ((cbMtdParam._m0[21u].z - _617) * _631) + _617;
    float _191[5];
    float _192[5];
    _191[0u] = cbMtdParam._m0[29u].x;
    _192[0u] = cbMtdParam._m0[29u].y;
    _191[1u] = cbMtdParam._m0[31u].x;
    _192[1u] = cbMtdParam._m0[31u].y;
    _191[2u] = cbMtdParam._m0[30u].z;
    _192[2u] = cbMtdParam._m0[30u].w;
    _191[3u] = cbMtdParam._m0[30u].x;
    _192[3u] = cbMtdParam._m0[30u].y;
    _191[4u] = cbMtdParam._m0[29u].z;
    _192[4u] = cbMtdParam._m0[29u].w;
    float _680 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    uint _682 = uint(int(isnan(4.0) ? _680 : (isnan(_680) ? 4.0 : min(_680, 4.0))));
    float _689 = ((_192[_682] - cbMtdParam._m0[22u].z) * _342) + cbMtdParam._m0[22u].z;
    float _692 = ((cbMtdParam._m0[22u].w - _689) * _507) + _689;
    float _695 = ((cbMtdParam._m0[25u].y - _692) * _331) + _692;
    float _698 = ((cbMtdParam._m0[26u].y - _695) * _303) + _695;
    float _700 = _698 - (_698 * _621);
    vec4 _716 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _379));
    vec4 _733 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _735 = _733.x;
    float _736 = _733.y;
    float _741 = cbMtdParam._m0[22u].x + _733.z;
    float _744 = (((_716.z + _191[_682]) - _741) * _342) + _741;
    vec4 _756 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _767 = (((_756.z - _744) + cbMtdParam._m0[28u].z) * _507) + _744;
    float _773 = ((((_290 * 2.0) * _767) - _767) * cbMtdParam._m0[24u].w) + _767;
    vec4 _785 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _796 = (((cbMtdParam._m0[23u].z + _785.z) - _773) * _331) + _773;
    vec4 _809 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _820 = (((_809.z - _796) + cbMtdParam._m0[26u].z) * _303) + _796;
    vec4 _835 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _850 = ((cbMtdParam._m0[27u].z * _621) * ((_835.z * cbMtdParam._m0[27u].y) - _820)) + _820;
    float _862 = ((_716.x - _735) * _342) + _735;
    float _863 = ((_716.y - _736) * _342) + _736;
    float _868 = ((_756.x - _862) * _507) + _862;
    float _869 = ((_756.y - _863) * _507) + _863;
    float _874 = ((_785.x - _868) * _331) + _868;
    float _875 = ((_785.y - _869) * _331) + _869;
    float _884 = ((((_809.x - _874) * _303) + _874) * 2.0) + (-1.0);
    float _885 = ((((_809.y - _875) * _303) + _875) * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _3872 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _891 = sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))));
    float _901 = ((cbMtdParam._m0[25u].z * ((_286.x * 2.0) + (-1.0))) + _884) + ((((_835.x * 2.0) + (-1.0)) * _621) * cbMtdParam._m0[27u].x);
    float _902 = ((cbMtdParam._m0[25u].z * ((_286.y * 2.0) + (-1.0))) + _885) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_835.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _905 = fma(_891, _233 * NORMAL.x, fma(_902, _240 * TANGENT.x, (_226 * _218) * _901));
    float _908 = fma(_891, _233 * NORMAL.y, fma(_902, _240 * TANGENT.y, (_226 * _219) * _901));
    float _911 = fma(_891, _233 * NORMAL.z, fma(_902, _240 * TANGENT.z, (_226 * _220) * _901));
    float _915 = inversesqrt(dot(vec3(_905, _908, _911), vec3(_905, _908, _911)));
    float _916 = _915 * _905;
    float _917 = _915 * _908;
    float _918 = _915 * _911;
    float _3883 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _919 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3905 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3916 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3927 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _923 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_918, cbSceneParam._m0[5u].z, fma(_917, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _916));
    float _1026 = fma(_918, cbSceneParam._m0[6u].z, fma(_917, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _916));
    float _1029 = fma(_918, cbSceneParam._m0[7u].z, fma(_917, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _916));
    uint _1042 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1044 = (_1042 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1050 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_1044].x;
    float _1051 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_1044].y;
    float _1052 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_1044].z;
    float _3938 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1056 = 1.0 - _923;
    float _1057 = _1053 * _1056;
    float _1058 = _1054 * _1056;
    float _1059 = _1055 * _1056;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _923;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _923;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _923;
    float _1067 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1082 = _1079.x * TEXCOORD_3.w;
    float _1083 = dot(vec3(_916, _917, _918), vec3(_996, _997, _998));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _916) - _996;
    float _1091 = (_1086 * _917) - _997;
    float _1092 = (_1086 * _918) - _998;
    float _1096 = abs(dot(vec3(_996, _997, _998), vec3(_916, _917, _918)));
    float _3971 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_919);
    float _1109 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1115 = (1.0 - _1109) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1116 = _1109 * _1098;
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1182 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1186 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1211 = _1144 + _916;
        float _1212 = _1148 + _917;
        float _1213 = _1152 + _918;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_916, _917, _918), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4019 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_916, _917, _918), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4052 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_916, _917, _918), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4085 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1495 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1499 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1522 = _1144 + _916;
        float _1523 = _1148 + _917;
        float _1524 = _1152 + _918;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_916, _917, _918), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4148 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_916, _917, _918), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4181 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_916, _917, _918), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4214 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1454;
        _1761 = _1454;
        _1762 = _1454;
        _1763 = _1454;
        _1764 = _1454;
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1468)) + _1468;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1090 * 0.5;
    float _1829 = _1091 * 0.5;
    float _1830 = _1092 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _919);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1944 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1948 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1952 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1955 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1958 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1961 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _1989;
        if (_1955 > 0.0)
        {
            _1989 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1989 = frontier_phi_14_12_ladder;
        }
        float _2212;
        if (_1958 > 0.0)
        {
            _2212 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2212 = frontier_phi_23_19_ladder;
        }
        float _2469;
        if (_1961 > 0.0)
        {
            _2469 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2469 = frontier_phi_35_30_ladder;
        }
        float _2471 = isnan(_2212) ? _1989 : (isnan(_1989) ? _2212 : min(_1989, _2212));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1955) + _1944;
        float _2477 = (_2472 * _1958) + _1948;
        float _2478 = (_2472 * _1961) + _1952;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_13_35_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _1977 = frontier_phi_13_35_ladder_2;
        _1979 = frontier_phi_13_35_ladder_1;
        _1981 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1897);
        _1977 = _1965.x * cbModelParam._m0[1u].y;
        _1979 = _1965.y * cbModelParam._m0[1u].y;
        _1981 = _1965.z * cbModelParam._m0[1u].y;
    }
    float _1985 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _919);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1985 : min(cbModelParam._m0[25u].w, _1985));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2039 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2043 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2047 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2050 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2053 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2056 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2217;
        if (_2050 > 0.0)
        {
            _2217 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2217 = frontier_phi_25_21_ladder;
        }
        float _2496;
        if (_2053 > 0.0)
        {
            _2496 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2496 = frontier_phi_37_32_ladder;
        }
        float _2709;
        if (_2056 > 0.0)
        {
            _2709 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2709 = frontier_phi_46_43_ladder;
        }
        float _2711 = isnan(_2496) ? _2217 : (isnan(_2217) ? _2496 : min(_2217, _2496));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2050) + _2039;
        float _2717 = (_2712 * _2053) + _2043;
        float _2718 = (_2712 * _2056) + _2047;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1986);
            frontier_phi_22_46_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2075 = frontier_phi_22_46_ladder_2;
        _2077 = frontier_phi_22_46_ladder_1;
        _2079 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2059 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _1986);
        _2075 = _2059.x * cbModelParam._m0[1u].z;
        _2077 = _2059.y * cbModelParam._m0[1u].z;
        _2079 = _2059.z * cbModelParam._m0[1u].z;
    }
    float _2092 = (((_1115 * _1067) + _1116) * _1082) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2094 = (((_1115 * _1069) + _1116) * _1082) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1115 * _1070) + _1116) * _1082) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2099 = fma(_2096, cbSceneParam._m0[89u].z, fma(_2094, cbSceneParam._m0[89u].y, _2092 * cbSceneParam._m0[89u].x));
    float _2102 = fma(_2096, cbSceneParam._m0[90u].z, fma(_2094, cbSceneParam._m0[90u].y, _2092 * cbSceneParam._m0[90u].x));
    float _2105 = fma(_2096, cbSceneParam._m0[91u].z, fma(_2094, cbSceneParam._m0[91u].y, _2092 * cbSceneParam._m0[91u].x));
    vec4 _2113 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1004, _1005));
    float _2115 = _2113.w;
    float _2127 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2115);
    float _2128 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2115);
    float _2129 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2115);
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_1042 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _1082 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2171 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2175 = _2135 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_916, _917, _918));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_916, _917, _918));
    float _4350 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4361 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2152].x * _2158) * _2196) + (((cbLight._m0[_2162].x * _2127) * _2171) * _2194);
    float _2204 = ((_2158 * cbLight._m0[_2152].y) * _2196) + (((cbLight._m0[_2162].y * _2128) * _2171) * _2194);
    float _2205 = ((_2158 * cbLight._m0[_2152].z) * _2196) + (((cbLight._m0[_2162].z * _2129) * _2171) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2203;
        _2224 = _2204;
        _2226 = _2205;
    }
    else
    {
        uint _2230 = _2135 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4372 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2249 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2205;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2440 = _2135 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4388 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2459 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2267 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2222;
        _2269 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2224;
        _2271 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2226;
    }
    uint _2274 = _2135 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _919) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2135].x + _996;
    float _2290 = cbLight._m0[_2135].y + _997;
    float _2291 = cbLight._m0[_2135].z + _998;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2135].xyz));
    float _4404 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2303 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2304 = dot(vec3(_916, _917, _918), vec3(_2296, _2297, _2298));
    float _4426 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2296, _2297, _2298));
    float _4437 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _1064;
    float _2327 = 0.959999978542327880859375 - _1065;
    float _2328 = 0.959999978542327880859375 - _1066;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4448 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2362 = _2135 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _919) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2175].x + _996;
    float _2376 = cbLight._m0[_2175].y + _997;
    float _2377 = cbLight._m0[_2175].z + _998;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2175].xyz));
    float _4459 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2389 = dot(vec3(_916, _917, _918), vec3(_2382, _2383, _2384));
    float _4470 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2382, _2383, _2384));
    float _4481 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2303 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2415) + _2374) * _2388))) * _2388;
    float _4492 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2325) + _1067) * cbLight._m0[_2362].x) * _2427) * _2158) + ((((cbLight._m0[_2274].x * _2127) * ((_2324 * _2325) + _1067)) * _2348) * _2171);
    float _2438 = (((((_2408 * _2327) + _1069) * cbLight._m0[_2362].y) * _2427) * _2158) + ((((cbLight._m0[_2274].y * _2128) * ((_2324 * _2327) + _1069)) * _2348) * _2171);
    float _2439 = (((((_2408 * _2328) + _1070) * cbLight._m0[_2362].z) * _2427) * _2158) + ((((cbLight._m0[_2274].z * _2129) * ((_2324 * _2328) + _1070)) * _2348) * _2171);
    float _2501;
    float _2503;
    float _2505;
    if (_2211)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2135 + 2u;
        uint _2511 = _2135 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _919) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _996;
        float _2528 = cbLight._m0[_2507].y + _997;
        float _2529 = cbLight._m0[_2507].z + _998;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2507].xyz));
        float _4503 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2541 = dot(vec3(_916, _917, _918), vec3(_2534, _2535, _2536));
        float _4514 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4525 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2303 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2567) + _2526) * _2540))) * _2540;
        float _4536 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2501 = (((((_2560 * _2325) + _1067) * cbLight._m0[_2511].x) * _2579) * _2580) + _2437;
        _2503 = (((((_2560 * _2327) + _1069) * cbLight._m0[_2511].y) * _2579) * _2580) + _2438;
        _2505 = (((((_2560 * _2328) + _1070) * cbLight._m0[_2511].z) * _2579) * _2580) + _2439;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2229)
    {
        _2615 = _2501;
        _2617 = _2503;
        _2619 = _2505;
    }
    else
    {
        uint _2626 = _2135 + 3u;
        uint _2630 = _2135 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _919) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _996;
        float _2647 = cbLight._m0[_2626].y + _997;
        float _2648 = cbLight._m0[_2626].z + _998;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2626].xyz));
        float _4552 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2660 = dot(vec3(_916, _917, _918), vec3(_2653, _2654, _2655));
        float _4563 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4574 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2303 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2686) + _2645) * _2659))) * _2659;
        float _4585 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2615 = (((((_2679 * _2325) + _1067) * cbLight._m0[_2630].x) * _2698) * _2699) + _2501;
        _2617 = (((((_2679 * _2327) + _1069) * cbLight._m0[_2630].y) * _2698) * _2699) + _2503;
        _2619 = (((((_2679 * _2328) + _1070) * cbLight._m0[_2630].z) * _2698) * _2699) + _2505;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2133.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3083)
                {
                    frontier_phi_61_pred = _3067;
                    frontier_phi_61_pred_1 = _3072;
                    frontier_phi_61_pred_2 = _3071;
                    frontier_phi_61_pred_3 = _3070;
                    frontier_phi_61_pred_4 = _3069;
                    frontier_phi_61_pred_5 = _3068;
                }
                else
                {
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    uint _3197;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3082;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    for (;;)
                    {
                        uint _3201 = uint(findLSB(_3197)) + (_3073 << 5u);
                        uint _3198 = (_3197 + 4294967295u) & _3197;
                        uint _3203 = _3201 * 48u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3223 = (_3201 * 48u) + 4u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3242 = (_3201 * 48u) + 8u;
                        vec3 _3253 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x));
                        float _3257 = _3217.x - _2775;
                        float _3258 = _3217.y - _2776;
                        float _3259 = _3217.z - _2777;
                        float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                        float _3263 = inversesqrt(_3260);
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3267 = dot(vec3(_1023, _1026, _1029), vec3(_3264, _3265, _3266));
                        float _3272 = 1.0 - (_3260 * _3217.w);
                        float _4611 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3274 = sqrt(_3260) * _3236.w;
                        float _3277 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3267) + _3278;
                        float _3284 = _3274 * _3274;
                        float _3288 = ((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3273) / ((_3284 * 0.699999988079071044921875) + 1.0);
                        float _3292 = (-0.0) - _2775;
                        float _3293 = (-0.0) - _2776;
                        float _3294 = (-0.0) - _2777;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3309 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _1098;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_1023, _1026, _1029), vec3(_3299, _3300, _3301));
                        float _4627 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3334 = dot(vec3(_1023, _1026, _1029), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4638 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3277 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3267) + _3343;
                        float _4649 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4660 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3341 * _3341) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125))) * _3273;
                        _3126 = (_3288 * _3236.x) + _3194;
                        _3127 = (_3288 * _3236.y) + _3195;
                        _3128 = (_3288 * _3236.z) + _3196;
                        _3123 = (_3369 * _3253.x) + _3191;
                        _3124 = (_3369 * _3253.y) + _3192;
                        _3125 = (_3369 * _3253.z) + _3193;
                        if (_3198 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3198;
                        }
                    }
                    frontier_phi_61_pred = _3123;
                    frontier_phi_61_pred_1 = _3128;
                    frontier_phi_61_pred_2 = _3127;
                    frontier_phi_61_pred_3 = _3126;
                    frontier_phi_61_pred_4 = _3125;
                    frontier_phi_61_pred_5 = _3124;
                }
                _2923 = frontier_phi_61_pred;
                _2933 = frontier_phi_61_pred_1;
                _2931 = frontier_phi_61_pred_2;
                _2929 = frontier_phi_61_pred_3;
                _2927 = frontier_phi_61_pred_4;
                _2925 = frontier_phi_61_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2923;
                    _3068 = _2925;
                    _3069 = _2927;
                    _3070 = _2929;
                    _3071 = _2931;
                    _3072 = _2933;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2939) & _2821) == 0u)
        {
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
            _3043 = _2930;
            _3045 = _2932;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3061 = _3060 * _2775;
            float _3062 = _3060 * _2776;
            float _3063 = _3060 * _2777;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3174 = _2922;
                float _3175 = _2924;
                float _3176 = _2926;
                float _3177 = _2928;
                float _3178 = _2930;
                float _3179 = _2932;
                uint _3180 = _2939;
                uint _3189;
                bool _3190;
                for (;;)
                {
                    _3189 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                    _3190 = _3189 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3190)
                    {
                        frontier_phi_67_pred = _3177;
                        frontier_phi_67_pred_1 = _3178;
                        frontier_phi_67_pred_2 = _3179;
                        frontier_phi_67_pred_3 = _3176;
                        frontier_phi_67_pred_4 = _3175;
                        frontier_phi_67_pred_5 = _3174;
                    }
                    else
                    {
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        uint _3393 = _3189;
                        uint _3394;
                        vec4 _3419;
                        float _3420;
                        vec4 _3435;
                        vec3 _3447;
                        vec4 _3462;
                        vec4 _3477;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3404 = ((_3180 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3393));
                            _3394 = (_3393 + 4294967295u) & _3393;
                            uint _3406 = _3404 * 40u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3420 = _3419.w;
                            uint _3422 = (_3404 * 40u) + 4u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3404 * 40u) + 8u;
                            _3447 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x));
                            uint _3449 = (_3404 * 40u) + 16u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3404 * 40u) + 20u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3404 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3404 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_2777, _3511.z, fma(_2776, _3511.y, _3511.x * _2775)) + _3511.w;
                            _3524 = !((fma(_2777, _3492.z, fma(_2776, _3492.y, _3492.x * _2775)) + _3492.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3419.x - _2775;
                                float _3552 = _3419.y - _2776;
                                float _3553 = _3419.z - _2777;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3420 * _3420));
                                float _4671 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3569 = sqrt(_3554) * _3435.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_1023, _1026, _1029))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_2777, _3462.z, fma(_2776, _3462.y, _3462.x * _2775)) + _3462.w) / _3523;
                                float _3583 = (fma(_2777, _3477.z, fma(_2776, _3477.y, _3477.x * _2775)) + _3477.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4687 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _1098;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3061;
                                float _3613 = _3559 - _3062;
                                float _3614 = _3560 - _3063;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4698 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3626 = dot(vec3(_1023, _1026, _1029), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4709 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_1023, _1026, _1029), vec3(_3558, _3559, _3560))) + _3635;
                                float _4720 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4731 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3663 * _3447.x;
                                frontier_phi_73_pred_1 = _3663 * _3447.y;
                                frontier_phi_73_pred_2 = _3589 * _3435.z;
                                frontier_phi_73_pred_3 = _3589 * _3435.y;
                                frontier_phi_73_pred_4 = _3589 * _3435.x;
                                frontier_phi_73_pred_5 = _3663 * _3447.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_73_pred;
                            _3668 = frontier_phi_73_pred_1;
                            _3672 = frontier_phi_73_pred_2;
                            _3671 = frontier_phi_73_pred_3;
                            _3670 = frontier_phi_73_pred_4;
                            _3669 = frontier_phi_73_pred_5;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            if (_3394 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3394;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3377;
                        frontier_phi_67_pred_1 = _3378;
                        frontier_phi_67_pred_2 = _3379;
                        frontier_phi_67_pred_3 = _3376;
                        frontier_phi_67_pred_4 = _3375;
                        frontier_phi_67_pred_5 = _3374;
                    }
                    _3042 = frontier_phi_67_pred;
                    _3044 = frontier_phi_67_pred_1;
                    _3046 = frontier_phi_67_pred_2;
                    _3040 = frontier_phi_67_pred_3;
                    _3038 = frontier_phi_67_pred_4;
                    _3036 = frontier_phi_67_pred_5;
                    uint _3181 = _3180 + 1u;
                    if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3174 = _3036;
                        _3175 = _3038;
                        _3176 = _3040;
                        _3177 = _3042;
                        _3178 = _3044;
                        _3179 = _3046;
                        _3180 = _3181;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3044;
                frontier_phi_55_56_ladder_1 = _3046;
                frontier_phi_55_56_ladder_2 = _3042;
                frontier_phi_55_56_ladder_3 = _3040;
                frontier_phi_55_56_ladder_4 = _3038;
                frontier_phi_55_56_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_55_56_ladder = _2930;
                frontier_phi_55_56_ladder_1 = _2932;
                frontier_phi_55_56_ladder_2 = _2928;
                frontier_phi_55_56_ladder_3 = _2926;
                frontier_phi_55_56_ladder_4 = _2924;
                frontier_phi_55_56_ladder_5 = _2922;
            }
            _3035 = frontier_phi_55_56_ladder_5;
            _3037 = frontier_phi_55_56_ladder_4;
            _3039 = frontier_phi_55_56_ladder_3;
            _3041 = frontier_phi_55_56_ladder_2;
            _3043 = frontier_phi_55_56_ladder;
            _3045 = frontier_phi_55_56_ladder_1;
        }
        float _3050 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _2834 = (_3050 * _3041) + _2267;
        _2836 = (_3050 * _3043) + _2269;
        _2838 = (_3050 * _3045) + _2271;
        _2840 = ((_3035 * _1067) * _3050) + _2615;
        _2842 = ((_3037 * _1069) * _3050) + _2617;
        _2844 = ((_3039 * _1070) * _3050) + _2619;
    }
    else
    {
        _2834 = _2267;
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2615;
        _2842 = _2617;
        _2844 = _2619;
    }
    float _4747 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _4758 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4769 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    uint _2864 = _1042 + 6u;
    float _2872 = _1004 / cbSceneParam._m0[86u].x;
    float _2873 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _2948 = _2947 / _939;
        float _2959 = _2948 * _989;
        float _2960 = _990 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _991;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3136;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3136 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3098 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3136 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2983 * _3107) - exp2(_2983 * _3108)) * _3096))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3138 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3147 = exp2((_3136 * (-1.44269502162933349609375)) * (1.0 - _3138.w));
        float _3148 = log2(_3147);
        float _3164 = log2(_2892);
        _2985 = (exp2(_3164 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].x)) * _3138.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2987 = (exp2(_3164 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].y)) * _3138.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2989 = (exp2(_3164 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3148 * cbSceneParam._m0[78u].z)) * _3138.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2991 = _3147 * _2892;
    }
    else
    {
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
        _2991 = _2892;
    }
    float _3003 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3004 = _3003 == 3.0;
    float _3005 = log2(_2991);
    float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2834 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1082))) + ((_2840 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2836 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1082))) + ((_2842 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2838 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1082))) + ((_2844 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3023 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3023 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.y = _3023 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
    SV_Target.z = _3023 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.w = cbInstanceData._m0[_2864].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
}


