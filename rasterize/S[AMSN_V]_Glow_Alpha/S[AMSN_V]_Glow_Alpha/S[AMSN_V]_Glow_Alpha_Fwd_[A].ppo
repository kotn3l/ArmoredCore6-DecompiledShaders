#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _871;
float _3267;
float _3268;
float _3269;
float _3270;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _234 = _228.w;
    float _235 = _234 * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3279 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))));
    float _271 = fma(_268, _212, fma(_261, _204 * TANGENT.x, (_190 * _182) * _259));
    float _274 = fma(_268, _213, fma(_261, _204 * TANGENT.y, (_190 * _183) * _259));
    float _277 = fma(_268, _214, fma(_261, _204 * TANGENT.z, (_190 * _184) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3290 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _285 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _286 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3323 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3334 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3345 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _290 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    vec4 _372 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _374 = _372.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _550 = sqrt(((_358 * _358) + (_359 * _359)) + (_360 * _360));
        float _556 = (cbMatDynParam._m0[5u].x * _550) + cbMatDynParam._m0[5u].y;
        float _3356 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _557 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _561 = (cbMatDynParam._m0[5u].z * _550) + cbMatDynParam._m0[5u].w;
        float _3367 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) - _557)) + _557) < ((_374 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _410 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _413 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _428 = _426 + 9u;
    uint _429 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3378 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _441 = 1.0 - _290;
    float _442 = _438 * _441;
    float _443 = _439 * _441;
    float _444 = _440 * _441;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _290;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _290;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _290;
    float _452 = _449 + 0.039999999105930328369140625;
    float _454 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _467 = _464.x * TEXCOORD_1.w;
    float _468 = dot(vec3(_282, _283, _284), vec3(_365, _366, _367));
    float _471 = _468 * 2.0;
    float _475 = (_471 * _282) - _365;
    float _476 = (_471 * _283) - _366;
    float _477 = (_471 * _284) - _367;
    float _481 = abs(dot(vec3(_365, _366, _367), vec3(_282, _283, _284)));
    float _3411 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _483 = sqrt(_286);
    float _496 = exp2((_483 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_483 * 3.0));
    float _502 = (1.0 - _496) * ((_483 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _503 = _496 * _483;
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _870;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _595 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _599 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _603 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _628 = _531 + _282;
        float _629 = _535 + _283;
        float _630 = _539 + _284;
        float _640 = fma(_630, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) - _595;
        float _641 = fma(_630, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) - _599;
        float _642 = fma(_630, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) - _603;
        float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
        float _659 = ((_646 * _640) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_595 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_646 * _641) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_599 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_646 * _642) / cbModelParam._m0[34u].z) + ((((((_603 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        float _698 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_664.x + (-0.5));
        float _700 = _698 * (_664.y + (-0.5));
        float _701 = _698 * (_664.z + (-0.5));
        float _708 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_671.x + (-0.5));
        float _710 = _708 * (_671.y + (-0.5));
        float _711 = _708 * (_671.z + (-0.5));
        float _718 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_678.x + (-0.5));
        float _720 = _718 * (_678.y + (-0.5));
        float _721 = _718 * (_678.z + (-0.5));
        float _728 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_685.x + (-0.5));
        float _730 = _728 * (_685.y + (-0.5));
        float _731 = _728 * (_685.z + (-0.5));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = _699 * 0.5;
        float _736 = _709 * 0.5;
        float _737 = _719 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _752 = (dot(vec3(_282, _283, _284), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _762 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3459 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_764 + 1.0))) + _769) * _732;
        float _779 = _700 * 0.5;
        float _780 = _710 * 0.5;
        float _781 = _720 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_282, _283, _284), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3492 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_806 + 1.0))) + _811) * _733;
        float _821 = _701 * 0.5;
        float _822 = _711 * 0.5;
        float _823 = _721 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_282, _283, _284), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3525 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_848 + 1.0))) + _853) * _734;
        _870 = _701;
        _872 = _700;
        _873 = _699;
        _874 = _711;
        _875 = _710;
        _876 = _709;
        _877 = _721;
        _878 = _720;
        _879 = _719;
        _880 = _734;
        _881 = _733;
        _882 = _732;
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
    }
    else
    {
        _870 = _871;
        _872 = _871;
        _873 = _871;
        _874 = _871;
        _875 = _871;
        _876 = _871;
        _877 = _871;
        _878 = _871;
        _879 = _871;
        _880 = _871;
        _881 = _871;
        _882 = _871;
        _883 = 0.0;
        _884 = 0.0;
        _885 = 0.0;
    }
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _914 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _918 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _922 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _945 = _531 + _282;
        float _946 = _535 + _283;
        float _947 = _539 + _284;
        float _957 = fma(_947, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945)) - _914;
        float _958 = fma(_947, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945)) - _918;
        float _959 = fma(_947, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945)) - _922;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_914 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_918 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[35u].z) + ((((((_922 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_980.x + (-0.5));
        float _1015 = _1013 * (_980.y + (-0.5));
        float _1016 = _1013 * (_980.z + (-0.5));
        float _1023 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_987.x + (-0.5));
        float _1025 = _1023 * (_987.y + (-0.5));
        float _1026 = _1023 * (_987.z + (-0.5));
        float _1033 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_994.x + (-0.5));
        float _1035 = _1033 * (_994.y + (-0.5));
        float _1036 = _1033 * (_994.z + (-0.5));
        float _1043 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1001.x + (-0.5));
        float _1045 = _1043 * (_1001.y + (-0.5));
        float _1046 = _1043 * (_1001.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_282, _283, _284), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3588 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1077 + 1.0))) + _1082) * _1047;
        float _1092 = _1015 * 0.5;
        float _1093 = _1025 * 0.5;
        float _1094 = _1035 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_282, _283, _284), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3621 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1119 + 1.0))) + _1124) * _1048;
        float _1134 = _1016 * 0.5;
        float _1135 = _1026 * 0.5;
        float _1136 = _1036 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_282, _283, _284), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3654 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1161 + 1.0))) + _1166) * _1049;
        _1183 = _1016;
        _1184 = _1015;
        _1185 = _1014;
        _1186 = _1026;
        _1187 = _1025;
        _1188 = _1024;
        _1189 = _1036;
        _1190 = _1035;
        _1191 = _1034;
        _1192 = _1049;
        _1193 = _1048;
        _1194 = _1047;
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _871;
        _1184 = _871;
        _1185 = _871;
        _1186 = _871;
        _1187 = _871;
        _1188 = _871;
        _1189 = _871;
        _1190 = _871;
        _1191 = _871;
        _1192 = _871;
        _1193 = _871;
        _1194 = _871;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _883)) + _883;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _884)) + _884;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1230 = fma(_1209, cbSceneParam._m0[89u].z, fma(_1208, cbSceneParam._m0[89u].y, _1207 * cbSceneParam._m0[89u].x));
    float _1233 = fma(_1209, cbSceneParam._m0[90u].z, fma(_1208, cbSceneParam._m0[90u].y, _1207 * cbSceneParam._m0[90u].x));
    float _1236 = fma(_1209, cbSceneParam._m0[91u].z, fma(_1208, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1207));
    float _1251 = _475 * 0.5;
    float _1252 = _476 * 0.5;
    float _1253 = _477 * 0.5;
    float _1254 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1257 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1260 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1294;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1267 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_870, _874, _877, _880));
        float _1271 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_872, _875, _878, _881));
        float _1275 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_873, _876, _879, _882));
        float _1282 = dot(vec4(cbModelParam._m0[39u]), vec4(_1251, _1252, _1253, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1305;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1296 = dot(vec4(cbModelParam._m0[40u]), vec4(_1251, _1252, _1253, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1309 = (_1305 * cbModelParam._m0[1u].x) + (_1294 * (1.0 - cbModelParam._m0[1u].x));
    float _1319 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _286);
    float _1320 = isnan(_1319) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1319 : min(cbModelParam._m0[25u].z, _1319));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1369 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1373 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1377 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1380 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1383 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1386 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1414;
        if (_1380 > 0.0)
        {
            _1414 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1414 = frontier_phi_19_17_ladder;
        }
        float _1622;
        if (_1383 > 0.0)
        {
            _1622 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1622 = frontier_phi_28_24_ladder;
        }
        float _1876;
        if (_1386 > 0.0)
        {
            _1876 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1876 = frontier_phi_40_35_ladder;
        }
        float _1878 = isnan(_1622) ? _1414 : (isnan(_1414) ? _1622 : min(_1414, _1622));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1380) + _1369;
        float _1884 = (_1879 * _1383) + _1373;
        float _1885 = (_1879 * _1386) + _1377;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1320);
            frontier_phi_18_40_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1402 = frontier_phi_18_40_ladder_2;
        _1404 = frontier_phi_18_40_ladder_1;
        _1406 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1320);
        _1402 = _1390.x * cbModelParam._m0[1u].y;
        _1404 = _1390.y * cbModelParam._m0[1u].y;
        _1406 = _1390.z * cbModelParam._m0[1u].y;
    }
    float _1410 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _286);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1410 : min(cbModelParam._m0[25u].w, _1410));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1482 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1485 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1627;
        if (_1479 > 0.0)
        {
            _1627 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1627 = frontier_phi_30_26_ladder;
        }
        float _1903;
        if (_1482 > 0.0)
        {
            _1903 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1903 = frontier_phi_42_37_ladder;
        }
        float _2116;
        if (_1485 > 0.0)
        {
            _2116 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2116 = frontier_phi_51_48_ladder;
        }
        float _2118 = isnan(_1903) ? _1627 : (isnan(_1627) ? _1903 : min(_1627, _1903));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1479) + _1468;
        float _2124 = (_2119 * _1482) + _1472;
        float _2125 = (_2119 * _1485) + _1476;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2126;
        float _2129 = _2126 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2125 > _2129) || ((_2125 < _2127) || ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 < _2127) || (_2123 > _2129))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2125, cbModelParam._m0[17u].z, fma(_2124, cbModelParam._m0[17u].y, _2123 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2125, cbModelParam._m0[18u].z, fma(_2124, cbModelParam._m0[18u].y, _2123 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2125, cbModelParam._m0[19u].z, fma(_2124, cbModelParam._m0[19u].y, _2123 * cbModelParam._m0[19u].x))), _1411);
            frontier_phi_27_51_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_27_51_ladder_2;
        _1506 = frontier_phi_27_51_ladder_1;
        _1508 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1411);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1521 = (((_502 * _452) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_502 * _454) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_502 * _455) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1528 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    uvec4 _1544 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1546 = _1544.x * 14u;
    uint _1547 = _1546 + 13u;
    float _1554 = _467 + (-1.0);
    float _1559 = (cbLight._m0[_1547].x * _1554) + 1.0;
    float _1560 = (cbLight._m0[_1547].y * _1554) + 1.0;
    float _1561 = (cbLight._m0[_1547].z * _1554) + 1.0;
    float _1562 = (cbLight._m0[_1547].w * _1554) + 1.0;
    uint _1563 = _1546 + 5u;
    float _1569 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1573 = _1546 + 4u;
    float _1580 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1584 = _1546 | 1u;
    float _1595 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_282, _283, _284));
    float _1598 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_282, _283, _284));
    float _3790 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _3801 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1603 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1605 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1612 = ((cbLight._m0[_1563].x * _1569) * _1605) + ((cbLight._m0[_1573].x * _1580) * _1603);
    float _1613 = ((_1569 * cbLight._m0[_1563].y) * _1605) + ((_1580 * cbLight._m0[_1573].y) * _1603);
    float _1614 = ((_1569 * cbLight._m0[_1563].z) * _1605) + ((_1580 * cbLight._m0[_1573].z) * _1603);
    uvec4 _1619 = floatBitsToUint(cbLight._m0[_1546 + 12u]);
    bool _1621 = _1619.x == 0u;
    float _1632;
    float _1634;
    float _1636;
    if (_1621)
    {
        _1632 = _1612;
        _1634 = _1613;
        _1636 = _1614;
    }
    else
    {
        uint _1640 = _1546 + 6u;
        float _1656 = (dot(vec3(cbLight._m0[_1546 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1657 = _1656 * _1656;
        float _3812 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1659 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1632 = (((cbLight._m0[_1640].x * 0.3183098733425140380859375) * _1658) * _1659) + _1612;
        _1634 = (((cbLight._m0[_1640].y * 0.3183098733425140380859375) * _1658) * _1659) + _1613;
        _1636 = (((cbLight._m0[_1640].z * 0.3183098733425140380859375) * _1658) * _1659) + _1614;
    }
    bool _1639 = _1619.y == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1639)
    {
        _1677 = _1632;
        _1679 = _1634;
        _1681 = _1636;
    }
    else
    {
        uint _1847 = _1546 + 7u;
        float _1863 = (dot(vec3(cbLight._m0[_1546 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3828 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1866 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1677 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1632;
        _1679 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1634;
        _1681 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1636;
    }
    uint _1684 = _1546 + 8u;
    float _1697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _286) * 0.949999988079071044921875);
    float _1698 = _1697 * _1697;
    float _1699 = cbLight._m0[_1546].x + _365;
    float _1700 = cbLight._m0[_1546].y + _366;
    float _1701 = cbLight._m0[_1546].z + _367;
    float _1705 = inversesqrt(dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701)));
    float _1706 = _1705 * _1699;
    float _1707 = _1705 * _1700;
    float _1708 = _1705 * _1701;
    float _1709 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1546].xyz));
    float _3844 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _1713 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1714 = dot(vec3(_282, _283, _284), vec3(_1706, _1707, _1708));
    float _3866 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1706, _1707, _1708));
    float _3877 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1722 = _1698 * _1698;
    float _1726 = ((_1717 * _1717) * (_1722 + (-1.0))) + 1.0;
    float _1734 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
    float _1735 = 0.959999978542327880859375 - _449;
    float _1737 = 0.959999978542327880859375 - _450;
    float _1738 = 0.959999978542327880859375 - _451;
    float _1745 = 1.0 - _1698;
    float _1756 = (0.5 / (((_1713 * ((_1712 * _1745) + _1698)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1745) + _1698) * _1712))) * _1712;
    float _3888 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1722 / ((_1726 * _1726) * 3.141590118408203125));
    uint _1769 = _1546 + 9u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _286) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1584].x + _365;
    float _1783 = cbLight._m0[_1584].y + _366;
    float _1784 = cbLight._m0[_1584].z + _367;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1584].xyz));
    float _3899 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1796 = dot(vec3(_282, _283, _284), vec3(_1789, _1790, _1791));
    float _3910 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1789, _1790, _1791));
    float _3921 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1781 * _1781;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
    float _1822 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1713 * ((_1795 * _1822) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1822) + _1781) * _1795))) * _1795;
    float _3932 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    float _1844 = (((((_1815 * _1735) + _452) * cbLight._m0[_1769].x) * _1834) * _1569) + (((((_1734 * _1735) + _452) * cbLight._m0[_1684].x) * _1758) * _1580);
    float _1845 = (((((_1815 * _1737) + _454) * cbLight._m0[_1769].y) * _1834) * _1569) + (((((_1734 * _1737) + _454) * cbLight._m0[_1684].y) * _1758) * _1580);
    float _1846 = (((((_1815 * _1738) + _455) * cbLight._m0[_1769].z) * _1834) * _1569) + (((((_1734 * _1738) + _455) * cbLight._m0[_1684].z) * _1758) * _1580);
    float _1908;
    float _1910;
    float _1912;
    if (_1621)
    {
        _1908 = _1844;
        _1910 = _1845;
        _1912 = _1846;
    }
    else
    {
        uint _1914 = _1546 + 2u;
        uint _1918 = _1546 + 10u;
        float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _286) * 0.949999988079071044921875);
        float _1933 = _1932 * _1932;
        float _1934 = cbLight._m0[_1914].x + _365;
        float _1935 = cbLight._m0[_1914].y + _366;
        float _1936 = cbLight._m0[_1914].z + _367;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1941 = _1940 * _1934;
        float _1942 = _1940 * _1935;
        float _1943 = _1940 * _1936;
        float _1944 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1914].xyz));
        float _3943 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1948 = dot(vec3(_282, _283, _284), vec3(_1941, _1942, _1943));
        float _3954 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1952 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_1941, _1942, _1943));
        float _3965 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1956 = _1933 * _1933;
        float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
        float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
        float _1974 = 1.0 - _1933;
        float _1984 = (0.5 / (((_1713 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1974) + _1933) * _1947))) * _1947;
        float _3976 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1986 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
        float _1987 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1908 = (((((_1967 * _1735) + _452) * cbLight._m0[_1918].x) * _1986) * _1987) + _1844;
        _1910 = (((((_1967 * _1737) + _454) * cbLight._m0[_1918].y) * _1986) * _1987) + _1845;
        _1912 = (((((_1967 * _1738) + _455) * cbLight._m0[_1918].z) * _1986) * _1987) + _1846;
    }
    float _2022;
    float _2024;
    float _2026;
    if (_1639)
    {
        _2022 = _1908;
        _2024 = _1910;
        _2026 = _1912;
    }
    else
    {
        uint _2033 = _1546 + 3u;
        uint _2037 = _1546 + 11u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _286) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _365;
        float _2054 = cbLight._m0[_2033].y + _366;
        float _2055 = cbLight._m0[_2033].z + _367;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_2033].xyz));
        float _3992 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2067 = dot(vec3(_282, _283, _284), vec3(_2060, _2061, _2062));
        float _4003 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _4014 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
        float _2093 = 1.0 - _2052;
        float _2103 = (0.5 / (((_1713 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _2093) + _2052) * _2066))) * _2066;
        float _4025 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _2022 = (((((_2086 * _1735) + _452) * cbLight._m0[_2037].x) * _2105) * _2106) + _1908;
        _2024 = (((((_2086 * _1737) + _454) * cbLight._m0[_2037].y) * _2105) * _2106) + _1910;
        _2026 = (((((_2086 * _1738) + _455) * cbLight._m0[_2037].z) * _2105) * _2106) + _1912;
    }
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1544.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            uint _2491 = 0u;
            uint _2500;
            bool _2501;
            for (;;)
            {
                _2500 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                _2501 = _2500 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2501)
                {
                    frontier_phi_68_pred = _2487;
                    frontier_phi_68_pred_1 = _2490;
                    frontier_phi_68_pred_2 = _2489;
                    frontier_phi_68_pred_3 = _2488;
                    frontier_phi_68_pred_4 = _2486;
                    frontier_phi_68_pred_5 = _2485;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2488;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2500;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2491 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _2182;
                        float _2697 = _2656.y - _2183;
                        float _2698 = _2656.z - _2184;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2706 = dot(vec3(_407, _410, _413), vec3(_2703, _2704, _2705));
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _4051 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * _2706) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _2182;
                        float _2732 = (-0.0) - _2183;
                        float _2733 = (-0.0) - _2184;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2748 = exp2(log2(1.0 / ((_2723 * 3.5) + 5.0)) * 0.25);
                        float _2749 = 1.0 - _483;
                        float _2756 = sqrt(1.0 - ((1.0 - (_2749 * _2749)) * (1.0 - (_2748 * _2748))));
                        float _2757 = _2756 * _2756;
                        float _2758 = _2757 * _2757;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2761 = _2740 + _2705;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_407, _410, _413), vec3(_2738, _2739, _2740));
                        float _4067 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2773 = dot(vec3(_407, _410, _413), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _4078 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2780 = ((_2776 * _2776) * (_2758 + (-1.0))) + 1.0;
                        float _2781 = _2716 * _2757;
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2706) + _2782;
                        float _4089 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2787 = 1.0 - _2757;
                        float _2797 = (0.5 / (((_2786 * ((_2772 * _2787) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2787) + _2757) * _2772))) * _2786;
                        float _4100 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2808 = (((_2758 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_2780 * _2780) * ((_2723 * 2.1991131305694580078125) + 3.141590118408203125))) * _2712;
                        _2560 = (_2727 * _2675.x) + _2633;
                        _2561 = (_2727 * _2675.y) + _2634;
                        _2562 = (_2727 * _2675.z) + _2635;
                        _2557 = (_2808 * _2692.x) + _2630;
                        _2558 = (_2808 * _2692.y) + _2631;
                        _2559 = (_2808 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_68_pred = _2559;
                    frontier_phi_68_pred_1 = _2562;
                    frontier_phi_68_pred_2 = _2561;
                    frontier_phi_68_pred_3 = _2560;
                    frontier_phi_68_pred_4 = _2558;
                    frontier_phi_68_pred_5 = _2557;
                }
                _2338 = frontier_phi_68_pred;
                _2344 = frontier_phi_68_pred_1;
                _2342 = frontier_phi_68_pred_2;
                _2340 = frontier_phi_68_pred_3;
                _2336 = frontier_phi_68_pred_4;
                _2334 = frontier_phi_68_pred_5;
                uint _2492 = _2491 + 1u;
                if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2485 = _2334;
                    _2486 = _2336;
                    _2487 = _2338;
                    _2488 = _2340;
                    _2489 = _2342;
                    _2490 = _2344;
                    _2491 = _2492;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((4294967295u << _2350) & _2228) == 0u)
        {
            _2453 = _2333;
            _2455 = _2335;
            _2457 = _2337;
            _2459 = _2339;
            _2461 = _2341;
            _2463 = _2343;
        }
        else
        {
            float _2478 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2479 = _2478 * _2182;
            float _2480 = _2478 * _2183;
            float _2481 = _2478 * _2184;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2454;
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2613 = _2333;
                float _2614 = _2335;
                float _2615 = _2337;
                float _2616 = _2339;
                float _2617 = _2341;
                float _2618 = _2343;
                uint _2619 = _2350;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2629)
                    {
                        frontier_phi_79_pred = _2618;
                        frontier_phi_79_pred_1 = _2617;
                        frontier_phi_79_pred_2 = _2616;
                        frontier_phi_79_pred_3 = _2615;
                        frontier_phi_79_pred_4 = _2614;
                        frontier_phi_79_pred_5 = _2613;
                    }
                    else
                    {
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        float _2838 = _2616;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        uint _2841 = _2628;
                        uint _2842;
                        vec4 _2867;
                        float _2868;
                        vec4 _2883;
                        vec3 _2895;
                        vec4 _2911;
                        vec4 _2927;
                        float _2974;
                        bool _2975;
                        for (;;)
                        {
                            uint _2852 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2841));
                            _2842 = (_2841 + 4294967295u) & _2841;
                            uint _2854 = _2852 * 40u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            _2868 = _2867.w;
                            uint _2870 = (_2852 * 40u) + 4u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2885 = (_2852 * 40u) + 8u;
                            _2895 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x));
                            uint _2898 = (_2852 * 40u) + 16u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2914 = (_2852 * 40u) + 20u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2852 * 40u) + 24u;
                            vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2949 = (_2852 * 40u) + 28u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2974 = fma(_2184, _2962.z, fma(_2183, _2962.y, _2962.x * _2182)) + _2962.w;
                            _2975 = !((fma(_2184, _2943.z, fma(_2183, _2943.y, _2943.x * _2182)) + _2943.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2975)
                            {
                                float _3002 = _2867.x - _2182;
                                float _3003 = _2867.y - _2183;
                                float _3004 = _2867.z - _2184;
                                float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                                float _3008 = inversesqrt(_3005);
                                float _3009 = _3008 * _3002;
                                float _3010 = _3008 * _3003;
                                float _3011 = _3008 * _3004;
                                float _3015 = 1.0 - (_3005 / (_2868 * _2868));
                                float _4111 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3020 = sqrt(_3005) * _2883.w;
                                float _3022 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                                float _3023 = _3022 * _3022;
                                float _3026 = ((1.0 - _3023) * dot(vec3(_3009, _3010, _3011), vec3(_407, _410, _413))) + _3023;
                                float _3029 = _3020 * _3020;
                                float _3033 = (fma(_2184, _2911.z, fma(_2183, _2911.y, _2911.x * _2182)) + _2911.w) / _2974;
                                float _3034 = (fma(_2184, _2927.z, fma(_2183, _2927.y, _2927.x * _2182)) + _2927.w) / _2974;
                                float _3038 = 1.0 - dot(vec2(_3033, _3034), vec2(_3033, _3034));
                                float _4127 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3040 = _3039 * (((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3016) / ((_3029 * 0.699999988079071044921875) + 1.0));
                                float _3052 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                                float _3053 = 1.0 - _483;
                                float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                                float _3061 = _3060 * _3060;
                                float _3062 = _3061 * _3061;
                                float _3063 = _3009 - _2479;
                                float _3064 = _3010 - _2480;
                                float _3065 = _3011 - _2481;
                                float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                                float _3073 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2479, (-0.0) - _2480, (-0.0) - _2481));
                                float _4138 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3076 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3077 = dot(vec3(_407, _410, _413), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                                float _4149 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                                float _3085 = _3022 * _3061;
                                float _3086 = _3085 * _3085;
                                float _3092 = ((1.0 - _3086) * dot(vec3(_407, _410, _413), vec3(_3009, _3010, _3011))) + _3086;
                                float _4160 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3094 = 1.0 - _3061;
                                float _3104 = (0.5 / (((_3093 * ((_3076 * _3094) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3061) * _3076))) * _3093;
                                float _4171 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3114 = (_3039 * _3016) * (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_3084 * _3084) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3040 * _2883.z;
                                frontier_phi_85_pred_1 = _3040 * _2883.y;
                                frontier_phi_85_pred_2 = _3040 * _2883.x;
                                frontier_phi_85_pred_3 = _3114 * _2895.z;
                                frontier_phi_85_pred_4 = _3114 * _2895.y;
                                frontier_phi_85_pred_5 = _3114 * _2895.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3123 = frontier_phi_85_pred;
                            _3122 = frontier_phi_85_pred_1;
                            _3121 = frontier_phi_85_pred_2;
                            _3120 = frontier_phi_85_pred_3;
                            _3119 = frontier_phi_85_pred_4;
                            _3118 = frontier_phi_85_pred_5;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            if (_2842 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2842;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2827;
                        frontier_phi_79_pred_1 = _2826;
                        frontier_phi_79_pred_2 = _2825;
                        frontier_phi_79_pred_3 = _2824;
                        frontier_phi_79_pred_4 = _2823;
                        frontier_phi_79_pred_5 = _2822;
                    }
                    _2464 = frontier_phi_79_pred;
                    _2462 = frontier_phi_79_pred_1;
                    _2460 = frontier_phi_79_pred_2;
                    _2458 = frontier_phi_79_pred_3;
                    _2456 = frontier_phi_79_pred_4;
                    _2454 = frontier_phi_79_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2454;
                        _2614 = _2456;
                        _2615 = _2458;
                        _2616 = _2460;
                        _2617 = _2462;
                        _2618 = _2464;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2460;
                frontier_phi_60_61_ladder_1 = _2464;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2458;
                frontier_phi_60_61_ladder_4 = _2456;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            else
            {
                frontier_phi_60_61_ladder = _2339;
                frontier_phi_60_61_ladder_1 = _2343;
                frontier_phi_60_61_ladder_2 = _2341;
                frontier_phi_60_61_ladder_3 = _2337;
                frontier_phi_60_61_ladder_4 = _2335;
                frontier_phi_60_61_ladder_5 = _2333;
            }
            _2453 = frontier_phi_60_61_ladder_5;
            _2455 = frontier_phi_60_61_ladder_4;
            _2457 = frontier_phi_60_61_ladder_3;
            _2459 = frontier_phi_60_61_ladder;
            _2461 = frontier_phi_60_61_ladder_2;
            _2463 = frontier_phi_60_61_ladder_1;
        }
        float _2468 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _2240 = (_2468 * _2459) + _1677;
        _2242 = (_2468 * _2461) + _1679;
        _2244 = (_2468 * _2463) + _1681;
        _2246 = ((_2453 * _452) * _2468) + _2022;
        _2248 = ((_2455 * _454) * _2468) + _2024;
        _2250 = ((_2457 * _455) * _2468) + _2026;
    }
    else
    {
        _2240 = _1677;
        _2242 = _1679;
        _2244 = _1681;
        _2246 = _2022;
        _2248 = _2024;
        _2250 = _2026;
    }
    float _4187 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4198 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4209 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4220 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _2268 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2240 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _467))) + ((_2246 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1309)) * cbPerFrame._m0[3u].x);
    float _2269 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2242 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _467))) + ((_2248 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1309)) * cbPerFrame._m0[3u].x);
    float _2270 = ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2244 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _467))) + ((_2250 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1309)) * cbPerFrame._m0[3u].x);
    float _2271 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2278 = cbInstanceData._m0[_426 + 6u].w * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)));
    float _2283 = _386 / cbSceneParam._m0[86u].x;
    float _2284 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2359 = _2358 / _306;
        float _2370 = _2359 * _358;
        float _2371 = _359 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2373 = _2359 * _360;
        float _2375 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2376 = _2375 + cbSceneParam._m0[79u].w;
        float _2377 = cbSceneParam._m0[79u].w - _2371;
        float _2383 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2373 * _2373));
        float _2386 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2383;
        float _2391 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2393 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2372 - _2375) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2376 > 0.0) ? exp2(_2391 * _2376) : (2.0 - exp2(_2393 * _2376))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2386;
        }
        else
        {
            float _2514 = 1.0 / cbSceneParam._m0[80u].x;
            float _2515 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : max(_2376, _2377));
            float _2516 = isnan(_2377) ? _2376 : (isnan(_2376) ? _2377 : min(_2376, _2377));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            _2570 = ((abs(_2383 / _2372) * cbSceneParam._m0[80u].y) * ((((_2525 - _2526) * 2.0) - ((exp2(_2391 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0)))) - exp2(_2391 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0))))) * _2514)) - ((exp2(_2393 * _2525) - exp2(_2393 * _2526)) * _2514))) + (_2386 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2303);
        _2395 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2397 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2399 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2401 = _2581 * _2303;
    }
    else
    {
        _2395 = _2300;
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
    }
    bool _2608;
    vec4 _2411;
    vec4 _2433;
    float _2435;
    float _2439;
    float _2440;
    float _2441;
    float _2442;
    bool _2452;
    for (;;)
    {
        _2411 = cbMatDynParam._m0[0u];
        float _2413 = roundEven(_2411.y);
        bool _2414 = _2413 == 3.0;
        float _2415 = log2(_2401);
        float _2422 = exp2(_2415 * cbSceneParam._m0[78u].x) * _2271;
        float _2423 = exp2(_2415 * cbSceneParam._m0[78u].y) * _2272;
        float _2424 = exp2(_2415 * cbSceneParam._m0[78u].z) * _2273;
        float _2431 = _374 + (-0.5);
        _2433 = cbMtdParam._m0[1u];
        _2435 = _2433.y * _2431;
        float _2438 = (_2413 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2439 = _2438 * (_2414 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2395)));
        _2440 = _2438 * (_2414 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2397)));
        _2441 = _2438 * (_2414 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2399)));
        _2442 = _2431 * 0.999000012874603271484375;
        _2452 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2452)
        {
            if ((cbInstanceData._m0[_426 + 7u].x + _2442) < 0.5)
            {
                _2608 = true;
                break;
            }
        }
        uint _2549 = _428 + uint(_2411.w);
        if ((cbInstanceData._m0[_2549].w < 1.0) && ((cbInstanceData._m0[_2549].w + _2442) < 0.5))
        {
            _2608 = true;
            break;
        }
        if ((_2435 + _234) < _2433.x)
        {
            _2608 = true;
            break;
        }
        _2608 = false;
        break;
    }
    float _2813;
    if (_2608)
    {
        discard_state = true;
        _2813 = 0.0;
    }
    else
    {
        _2813 = _2278;
    }
    SV_Target.x = _2439;
    SV_Target.y = _2440;
    SV_Target.z = _2441;
    SV_Target.w = _2813;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2278;
    discard_exit();
}


