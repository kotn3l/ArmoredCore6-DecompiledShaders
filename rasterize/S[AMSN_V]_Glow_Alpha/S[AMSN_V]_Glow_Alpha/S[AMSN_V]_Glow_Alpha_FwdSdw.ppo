#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _830;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3455 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    float _271 = fma(_268, _212, fma(_261, _204 * TANGENT.x, (_190 * _182) * _259));
    float _274 = fma(_268, _213, fma(_261, _204 * TANGENT.y, (_190 * _183) * _259));
    float _277 = fma(_268, _214, fma(_261, _204 * TANGENT.z, (_190 * _184) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3466 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _285 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _286 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3499 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3510 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3521 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _290 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _398 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _401 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _423 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_417].x;
    float _424 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_417].y;
    float _425 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_417].z;
    float _3532 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _429 = 1.0 - _290;
    float _430 = _426 * _429;
    float _431 = _427 * _429;
    float _432 = _428 * _429;
    float _437 = (_426 + (-0.039999999105930328369140625)) * _290;
    float _438 = (_427 + (-0.039999999105930328369140625)) * _290;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _290;
    float _440 = _437 + 0.039999999105930328369140625;
    float _442 = _438 + 0.039999999105930328369140625;
    float _443 = _439 + 0.039999999105930328369140625;
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _455 = _452.x * TEXCOORD_1.w;
    float _456 = dot(vec3(_282, _283, _284), vec3(_365, _366, _367));
    float _459 = _456 * 2.0;
    float _463 = (_459 * _282) - _365;
    float _464 = (_459 * _283) - _366;
    float _465 = (_459 * _284) - _367;
    float _469 = abs(dot(vec3(_365, _366, _367), vec3(_282, _283, _284)));
    float _3565 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _471 = sqrt(_286);
    float _484 = exp2((_471 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_471 * 3.0));
    float _490 = (1.0 - _484) * ((_471 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _491 = _484 * _471;
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _829;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _554 = fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519));
        float _558 = fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519));
        float _562 = fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519));
        float _587 = _519 + _282;
        float _588 = _523 + _283;
        float _589 = _527 + _284;
        float _599 = fma(_589, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _587)) - _554;
        float _600 = fma(_589, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _587)) - _558;
        float _601 = fma(_589, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _587)) - _562;
        float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
        float _618 = ((_605 * _599) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_554 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _619 = ((_605 * _600) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_558 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _620 = ((_605 * _601) / cbModelParam._m0[34u].z) + ((((((_562 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        float _657 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_623.x + (-0.5));
        float _659 = _657 * (_623.y + (-0.5));
        float _660 = _657 * (_623.z + (-0.5));
        float _667 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_630.x + (-0.5));
        float _669 = _667 * (_630.y + (-0.5));
        float _670 = _667 * (_630.z + (-0.5));
        float _677 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_637.x + (-0.5));
        float _679 = _677 * (_637.y + (-0.5));
        float _680 = _677 * (_637.z + (-0.5));
        float _687 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_644.x + (-0.5));
        float _689 = _687 * (_644.y + (-0.5));
        float _690 = _687 * (_644.z + (-0.5));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = _658 * 0.5;
        float _695 = _668 * 0.5;
        float _696 = _678 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _711 = (dot(vec3(_282, _283, _284), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _721 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3613 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_723 + 1.0))) + _728) * _691;
        float _738 = _659 * 0.5;
        float _739 = _669 * 0.5;
        float _740 = _679 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _754 = (dot(vec3(_282, _283, _284), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _763 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3646 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_765 + 1.0))) + _770) * _692;
        float _780 = _660 * 0.5;
        float _781 = _670 * 0.5;
        float _782 = _680 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_282, _283, _284), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3679 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_807 + 1.0))) + _812) * _693;
        _829 = _660;
        _831 = _659;
        _832 = _658;
        _833 = _670;
        _834 = _669;
        _835 = _668;
        _836 = _680;
        _837 = _679;
        _838 = _678;
        _839 = _693;
        _840 = _692;
        _841 = _691;
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
    }
    else
    {
        _829 = _830;
        _831 = _830;
        _832 = _830;
        _833 = _830;
        _834 = _830;
        _835 = _830;
        _836 = _830;
        _837 = _830;
        _838 = _830;
        _839 = _830;
        _840 = _830;
        _841 = _830;
        _842 = 0.0;
        _843 = 0.0;
        _844 = 0.0;
    }
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _870 = fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519));
        float _874 = fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519));
        float _878 = fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519));
        float _901 = _519 + _282;
        float _902 = _523 + _283;
        float _903 = _527 + _284;
        float _913 = fma(_903, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901)) - _870;
        float _914 = fma(_903, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901)) - _874;
        float _915 = fma(_903, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901)) - _878;
        float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
        float _932 = ((_919 * _913) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_870 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_919 * _914) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_874 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_919 * _915) / cbModelParam._m0[35u].z) + ((((((_878 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        float _969 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_936.x + (-0.5));
        float _971 = _969 * (_936.y + (-0.5));
        float _972 = _969 * (_936.z + (-0.5));
        float _979 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_943.x + (-0.5));
        float _981 = _979 * (_943.y + (-0.5));
        float _982 = _979 * (_943.z + (-0.5));
        float _989 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_950.x + (-0.5));
        float _991 = _989 * (_950.y + (-0.5));
        float _992 = _989 * (_950.z + (-0.5));
        float _999 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_957.x + (-0.5));
        float _1001 = _999 * (_957.y + (-0.5));
        float _1002 = _999 * (_957.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_282, _283, _284), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3742 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1033 + 1.0))) + _1038) * _1003;
        float _1048 = _971 * 0.5;
        float _1049 = _981 * 0.5;
        float _1050 = _991 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_282, _283, _284), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3775 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1075 + 1.0))) + _1080) * _1004;
        float _1090 = _972 * 0.5;
        float _1091 = _982 * 0.5;
        float _1092 = _992 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_282, _283, _284), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3808 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1117 + 1.0))) + _1122) * _1005;
        _1139 = _972;
        _1140 = _971;
        _1141 = _970;
        _1142 = _982;
        _1143 = _981;
        _1144 = _980;
        _1145 = _992;
        _1146 = _991;
        _1147 = _990;
        _1148 = _1005;
        _1149 = _1004;
        _1150 = _1003;
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _830;
        _1140 = _830;
        _1141 = _830;
        _1142 = _830;
        _1143 = _830;
        _1144 = _830;
        _1145 = _830;
        _1146 = _830;
        _1147 = _830;
        _1148 = _830;
        _1149 = _830;
        _1150 = _830;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _842)) + _842;
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _843)) + _843;
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1186 = fma(_1165, cbSceneParam._m0[89u].z, fma(_1164, cbSceneParam._m0[89u].y, _1163 * cbSceneParam._m0[89u].x));
    float _1189 = fma(_1165, cbSceneParam._m0[90u].z, fma(_1164, cbSceneParam._m0[90u].y, _1163 * cbSceneParam._m0[90u].x));
    float _1192 = fma(_1165, cbSceneParam._m0[91u].z, fma(_1164, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1163));
    float _1207 = _463 * 0.5;
    float _1208 = _464 * 0.5;
    float _1209 = _465 * 0.5;
    float _1210 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1213 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1140, _1143, _1146, _1149));
    float _1216 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1250;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1223 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_829, _833, _836, _839));
        float _1227 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_831, _834, _837, _840));
        float _1231 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_832, _835, _838, _841));
        float _1238 = dot(vec4(cbModelParam._m0[39u]), vec4(_1207, _1208, _1209, 1.0));
        _1250 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1238) ? 0.0 : (isnan(0.0) ? _1238 : max(0.0, _1238))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1250 = 1.0;
    }
    float _1261;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1252 = dot(vec4(cbModelParam._m0[40u]), vec4(_1207, _1208, _1209, 1.0));
        _1261 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1261 = 1.0;
    }
    float _1265 = (_1261 * cbModelParam._m0[1u].x) + (_1250 * (1.0 - cbModelParam._m0[1u].x));
    float _1275 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _286);
    float _1276 = isnan(_1275) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1275 : min(cbModelParam._m0[25u].z, _1275));
    float _1358;
    float _1360;
    float _1362;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1325 = fma(_527, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519)) + cbModelParam._m0[13u].w;
        float _1329 = fma(_527, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519)) + cbModelParam._m0[14u].w;
        float _1333 = fma(_527, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519)) + cbModelParam._m0[15u].w;
        float _1336 = fma(_465, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _463));
        float _1339 = fma(_465, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _463));
        float _1342 = fma(_465, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _463));
        float _1370;
        if (_1336 > 0.0)
        {
            _1370 = abs((1.0 - _1325) / _1336);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1325 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1370 = frontier_phi_16_14_ladder;
        }
        float _1546;
        if (_1339 > 0.0)
        {
            _1546 = abs((1.0 - _1329) / _1339);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1329 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1546 = frontier_phi_25_21_ladder;
        }
        float _1842;
        if (_1342 > 0.0)
        {
            _1842 = abs((1.0 - _1333) / _1342);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1333 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1842 = frontier_phi_37_32_ladder;
        }
        float _1844 = isnan(_1546) ? _1370 : (isnan(_1370) ? _1546 : min(_1370, _1546));
        float _1845 = isnan(_1842) ? _1844 : (isnan(_1844) ? _1842 : min(_1844, _1842));
        float _1849 = (_1845 * _1336) + _1325;
        float _1850 = (_1845 * _1339) + _1329;
        float _1851 = (_1845 * _1342) + _1333;
        float _1852 = _1845 * 9.9999997473787516355514526367188e-05;
        float _1854 = (-1.0) - _1852;
        float _1856 = _1852 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1851 > _1856) || ((_1851 < _1854) || ((_1850 > _1856) || ((_1850 < _1854) || ((_1849 < _1854) || (_1849 > _1856))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1851, cbModelParam._m0[9u].z, fma(_1850, cbModelParam._m0[9u].y, _1849 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1851, cbModelParam._m0[10u].z, fma(_1850, cbModelParam._m0[10u].y, _1849 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1851, cbModelParam._m0[11u].z, fma(_1850, cbModelParam._m0[11u].y, _1849 * cbModelParam._m0[11u].x))), _1276);
            frontier_phi_15_37_ladder = _1996.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1996.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1996.z * cbModelParam._m0[1u].y;
        }
        _1358 = frontier_phi_15_37_ladder_1;
        _1360 = frontier_phi_15_37_ladder;
        _1362 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_463, _464, _465), _1276);
        _1358 = _1346.x * cbModelParam._m0[1u].y;
        _1360 = _1346.y * cbModelParam._m0[1u].y;
        _1362 = _1346.z * cbModelParam._m0[1u].y;
    }
    float _1366 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _286);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1366 : min(cbModelParam._m0[25u].w, _1366));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1424 = fma(_527, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519)) + cbModelParam._m0[21u].w;
        float _1428 = fma(_527, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519)) + cbModelParam._m0[22u].w;
        float _1432 = fma(_527, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519)) + cbModelParam._m0[23u].w;
        float _1435 = fma(_465, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _463));
        float _1438 = fma(_465, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _463));
        float _1441 = fma(_465, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _463));
        float _1551;
        if (_1435 > 0.0)
        {
            _1551 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1551 = frontier_phi_27_23_ladder;
        }
        float _1869;
        if (_1438 > 0.0)
        {
            _1869 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1869 = frontier_phi_39_34_ladder;
        }
        float _2207;
        if (_1441 > 0.0)
        {
            _2207 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2207 = frontier_phi_49_46_ladder;
        }
        float _2209 = isnan(_1869) ? _1551 : (isnan(_1551) ? _1869 : min(_1551, _1869));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1435) + _1424;
        float _2215 = (_2210 * _1438) + _1428;
        float _2216 = (_2210 * _1441) + _1432;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2217;
        float _2220 = _2217 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2216 > _2220) || ((_2216 < _2218) || ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 < _2218) || (_2214 > _2220))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2216, cbModelParam._m0[17u].z, fma(_2215, cbModelParam._m0[17u].y, _2214 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2216, cbModelParam._m0[18u].z, fma(_2215, cbModelParam._m0[18u].y, _2214 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2216, cbModelParam._m0[19u].z, fma(_2215, cbModelParam._m0[19u].y, _2214 * cbModelParam._m0[19u].x))), _1367);
            frontier_phi_24_49_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1460 = frontier_phi_24_49_ladder_2;
        _1462 = frontier_phi_24_49_ladder_1;
        _1464 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_463, _464, _465), _1367);
        _1460 = _1444.x * cbModelParam._m0[1u].z;
        _1462 = _1444.y * cbModelParam._m0[1u].z;
        _1464 = _1444.z * cbModelParam._m0[1u].z;
    }
    float _1477 = (((_490 * _440) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1479 = (((_490 * _442) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1481 = (((_490 * _443) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1484 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, _1477 * cbSceneParam._m0[91u].x));
    float _1525 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1529 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1537 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1538 = _1525 / _1537;
    float _1539 = _1529 / _1537;
    float _1540 = _1533 / _1537;
    float _1687;
    float _1688;
    float _1689;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1567 = ((uint(_1540 > cbSceneParam._m0[59u].y) + uint(_1540 > cbSceneParam._m0[59u].x)) + uint(_1540 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1568 = _1567 + 43u;
        uint _1576 = _1567 + 44u;
        uint _1584 = _1567 + 45u;
        uint _1592 = _1567 + 46u;
        float _1603 = fma(_1537, cbSceneParam._m0[_1568].w, fma(_1533, cbSceneParam._m0[_1568].z, fma(_1529, cbSceneParam._m0[_1568].y, _1525 * cbSceneParam._m0[_1568].x)));
        float _1607 = fma(_1537, cbSceneParam._m0[_1576].w, fma(_1533, cbSceneParam._m0[_1576].z, fma(_1529, cbSceneParam._m0[_1576].y, _1525 * cbSceneParam._m0[_1576].x)));
        float _1615 = fma(_1537, cbSceneParam._m0[_1592].w, fma(_1533, cbSceneParam._m0[_1592].z, fma(_1529, cbSceneParam._m0[_1592].y, _1525 * cbSceneParam._m0[_1592].x)));
        float _1620 = cbSceneParam._m0[33u].z * _1615;
        float _1622 = cbSceneParam._m0[33u].w * _1615;
        float _1625 = fma(_1537, cbSceneParam._m0[_1584].w, fma(_1533, cbSceneParam._m0[_1584].z, fma(_1529, cbSceneParam._m0[_1584].y, _1525 * cbSceneParam._m0[_1584].x))) / _1615;
        float _1673 = (cbSceneParam._m0[33u].x - sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540))) * cbSceneParam._m0[33u].y;
        float _3934 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1680 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 + _1603) / _1615, (_1622 + _1607) / _1615), _1625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1622 + _1603) / _1615, (_1607 - _1620) / _1615), _1625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 - _1620) / _1615, (_1607 - _1622) / _1615), _1625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 - _1622) / _1615, (_1620 + _1607) / _1615), _1625), 0.0)).x), vec4(0.25)));
        _1687 = 1.0 - (_1680 * cbSceneParam._m0[34u].x);
        _1688 = 1.0 - (_1680 * cbSceneParam._m0[34u].y);
        _1689 = 1.0 - (_1680 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1687 = 1.0;
        _1688 = 1.0;
        _1689 = 1.0;
    }
    float _1753;
    float _1755;
    float _1757;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1741 = fma(_1537, cbSceneParam._m0[63u].w, fma(_1533, cbSceneParam._m0[63u].z, fma(_1529, cbSceneParam._m0[63u].y, _1525 * cbSceneParam._m0[63u].x)));
        float _1742 = fma(_1537, cbSceneParam._m0[60u].w, fma(_1533, cbSceneParam._m0[60u].z, fma(_1529, cbSceneParam._m0[60u].y, _1525 * cbSceneParam._m0[60u].x))) / _1741;
        float _1743 = fma(_1537, cbSceneParam._m0[61u].w, fma(_1533, cbSceneParam._m0[61u].z, fma(_1529, cbSceneParam._m0[61u].y, _1525 * cbSceneParam._m0[61u].x))) / _1741;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1742 >= cbSceneParam._m0[64u].x) && (_1743 >= cbSceneParam._m0[64u].y)) && (_1742 <= cbSceneParam._m0[64u].z)) && (_1743 <= cbSceneParam._m0[64u].w))
        {
            float _1882 = fma(_1537, cbSceneParam._m0[62u].w, fma(_1533, cbSceneParam._m0[62u].z, fma(_1529, cbSceneParam._m0[62u].y, _1525 * cbSceneParam._m0[62u].x))) / _1741;
            float _1886 = isnan(cbSceneParam._m0[41u].w) ? _1882 : (isnan(_1882) ? cbSceneParam._m0[41u].w : max(_1882, cbSceneParam._m0[41u].w));
            float _1929 = (cbSceneParam._m0[33u].x - sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540))) * cbSceneParam._m0[33u].y;
            float _3950 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
            float _1936 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1742, cbSceneParam._m0[33u].w + _1743), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1742, _1743 - cbSceneParam._m0[33u].z), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1742 - cbSceneParam._m0[33u].z, _1743 - cbSceneParam._m0[33u].w), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1742 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1743), _1886), 0.0)).x), vec4(0.25)));
            float _1940 = 1.0 - (_1936 * cbSceneParam._m0[34u].x);
            float _1941 = 1.0 - (_1936 * cbSceneParam._m0[34u].y);
            float _1942 = 1.0 - (_1936 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1941) ? _1688 : (isnan(_1688) ? _1941 : min(_1688, _1941));
            frontier_phi_36_35_ladder_1 = isnan(_1942) ? _1689 : (isnan(_1689) ? _1942 : min(_1689, _1942));
            frontier_phi_36_35_ladder_2 = isnan(_1940) ? _1687 : (isnan(_1687) ? _1940 : min(_1687, _1940));
        }
        else
        {
            frontier_phi_36_35_ladder = _1688;
            frontier_phi_36_35_ladder_1 = _1689;
            frontier_phi_36_35_ladder_2 = _1687;
        }
        _1753 = frontier_phi_36_35_ladder_2;
        _1755 = frontier_phi_36_35_ladder;
        _1757 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1753 = _1687;
        _1755 = _1688;
        _1757 = _1689;
    }
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1772 = _455 + (-1.0);
    float _1777 = (cbLight._m0[_1765].x * _1772) + 1.0;
    float _1778 = (cbLight._m0[_1765].y * _1772) + 1.0;
    float _1779 = (cbLight._m0[_1765].z * _1772) + 1.0;
    float _1780 = (cbLight._m0[_1765].w * _1772) + 1.0;
    uint _1781 = _1764 + 5u;
    float _1787 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1791 = _1764 + 4u;
    float _1801 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1805 = _1764 | 1u;
    float _1816 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_282, _283, _284));
    float _1819 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_282, _283, _284));
    float _3986 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _3997 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1824 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1826 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1833 = ((cbLight._m0[_1781].x * _1787) * _1826) + (((cbLight._m0[_1791].x * _1753) * _1801) * _1824);
    float _1834 = ((_1787 * cbLight._m0[_1781].y) * _1826) + (((cbLight._m0[_1791].y * _1755) * _1801) * _1824);
    float _1835 = ((_1787 * cbLight._m0[_1781].z) * _1826) + (((cbLight._m0[_1791].z * _1757) * _1801) * _1824);
    uvec4 _1839 = floatBitsToUint(cbLight._m0[_1764 + 12u]);
    bool _1841 = _1839.x == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1841)
    {
        _1943 = _1833;
        _1945 = _1834;
        _1947 = _1835;
    }
    else
    {
        uint _1951 = _1764 + 6u;
        float _1967 = (dot(vec3(cbLight._m0[_1764 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1968 = _1967 * _1967;
        float _4008 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1970 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1943 = (((cbLight._m0[_1951].x * 0.3183098733425140380859375) * _1969) * _1970) + _1833;
        _1945 = (((cbLight._m0[_1951].y * 0.3183098733425140380859375) * _1969) * _1970) + _1834;
        _1947 = (((cbLight._m0[_1951].z * 0.3183098733425140380859375) * _1969) * _1970) + _1835;
    }
    bool _1950 = _1839.y == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1950)
    {
        _2005 = _1943;
        _2007 = _1945;
        _2009 = _1947;
    }
    else
    {
        uint _2178 = _1764 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1764 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4024 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2197 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2005 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1943;
        _2007 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1945;
        _2009 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1947;
    }
    uint _2012 = _1764 + 8u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _286) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1764].x + _365;
    float _2028 = cbLight._m0[_1764].y + _366;
    float _2029 = cbLight._m0[_1764].z + _367;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1764].xyz));
    float _4040 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2041 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _2042 = dot(vec3(_282, _283, _284), vec3(_2034, _2035, _2036));
    float _4062 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_2034, _2035, _2036));
    float _4073 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2026 * _2026;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _2063 = 0.959999978542327880859375 - _437;
    float _2065 = 0.959999978542327880859375 - _438;
    float _2066 = 0.959999978542327880859375 - _439;
    float _2073 = 1.0 - _2026;
    float _2084 = (0.5 / (((_2041 * ((_2040 * _2073) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2073) + _2026) * _2040))) * _2040;
    float _4084 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    uint _2100 = _1764 + 9u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _286) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1805].x + _365;
    float _2114 = cbLight._m0[_1805].y + _366;
    float _2115 = cbLight._m0[_1805].z + _367;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1805].xyz));
    float _4095 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2127 = dot(vec3(_282, _283, _284), vec3(_2120, _2121, _2122));
    float _4106 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_2120, _2121, _2122));
    float _4117 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2112 * _2112;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _2153 = 1.0 - _2112;
    float _2163 = (0.5 / (((_2041 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2153) + _2112) * _2126))) * _2126;
    float _4128 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    float _2175 = (((((_2146 * _2063) + _440) * cbLight._m0[_2100].x) * _2165) * _1787) + ((((cbLight._m0[_2012].x * _1753) * ((_2062 * _2063) + _440)) * _2086) * _1801);
    float _2176 = (((((_2146 * _2065) + _442) * cbLight._m0[_2100].y) * _2165) * _1787) + ((((cbLight._m0[_2012].y * _1755) * ((_2062 * _2065) + _442)) * _2086) * _1801);
    float _2177 = (((((_2146 * _2066) + _443) * cbLight._m0[_2100].z) * _2165) * _1787) + ((((cbLight._m0[_2012].z * _1757) * ((_2062 * _2066) + _443)) * _2086) * _1801);
    float _2233;
    float _2235;
    float _2237;
    if (_1841)
    {
        _2233 = _2175;
        _2235 = _2176;
        _2237 = _2177;
    }
    else
    {
        uint _2239 = _1764 + 2u;
        uint _2243 = _1764 + 10u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _286) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _365;
        float _2260 = cbLight._m0[_2239].y + _366;
        float _2261 = cbLight._m0[_2239].z + _367;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_2239].xyz));
        float _4139 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2273 = dot(vec3(_282, _283, _284), vec3(_2266, _2267, _2268));
        float _4150 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4161 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
        float _2299 = 1.0 - _2258;
        float _2309 = (0.5 / (((_2041 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2299) + _2258) * _2272))) * _2272;
        float _4172 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2233 = (((((_2292 * _2063) + _440) * cbLight._m0[_2243].x) * _2311) * _2312) + _2175;
        _2235 = (((((_2292 * _2065) + _442) * cbLight._m0[_2243].y) * _2311) * _2312) + _2176;
        _2237 = (((((_2292 * _2066) + _443) * cbLight._m0[_2243].z) * _2311) * _2312) + _2177;
    }
    float _2343;
    float _2345;
    float _2347;
    if (_1950)
    {
        _2343 = _2233;
        _2345 = _2235;
        _2347 = _2237;
    }
    else
    {
        uint _2354 = _1764 + 3u;
        uint _2358 = _1764 + 11u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _286) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _365;
        float _2375 = cbLight._m0[_2354].y + _366;
        float _2376 = cbLight._m0[_2354].z + _367;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_2354].xyz));
        float _4188 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2388 = dot(vec3(_282, _283, _284), vec3(_2381, _2382, _2383));
        float _4199 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4210 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2041 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2414) + _2373) * _2387))) * _2387;
        float _4221 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2343 = (((((_2407 * _2063) + _440) * cbLight._m0[_2358].x) * _2426) * _2427) + _2233;
        _2345 = (((((_2407 * _2065) + _442) * cbLight._m0[_2358].y) * _2426) * _2427) + _2235;
        _2347 = (((((_2407 * _2066) + _443) * cbLight._m0[_2358].z) * _2426) * _2427) + _2237;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1762.y == 0u)
    {
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2449)));
        float _2470 = (log2(_1540 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
        }
        else
        {
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2724)
                {
                    frontier_phi_68_pred = _2713;
                    frontier_phi_68_pred_1 = _2712;
                    frontier_phi_68_pred_2 = _2711;
                    frontier_phi_68_pred_3 = _2709;
                    frontier_phi_68_pred_4 = _2708;
                    frontier_phi_68_pred_5 = _2710;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2723;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2714 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _1538;
                        float _2899 = _2858.y - _1539;
                        float _2900 = _2858.z - _1540;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_395, _398, _401), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4247 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _1538;
                        float _2934 = (-0.0) - _1539;
                        float _2935 = (-0.0) - _1540;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2949 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _471;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2940 + _2905;
                        float _2961 = _2941 + _2906;
                        float _2962 = _2942 + _2907;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_395, _398, _401), vec3(_2940, _2941, _2942));
                        float _4263 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2974 = dot(vec3(_395, _398, _401), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4274 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2918 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2908) + _2983;
                        float _4285 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4296 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_2981 * _2981) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2767 = (_2929 * _2877.x) + _2835;
                        _2768 = (_2929 * _2877.y) + _2836;
                        _2769 = (_2929 * _2877.z) + _2837;
                        _2764 = (_3009 * _2894.x) + _2832;
                        _2765 = (_3009 * _2894.y) + _2833;
                        _2766 = (_3009 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_68_pred = _2769;
                    frontier_phi_68_pred_1 = _2768;
                    frontier_phi_68_pred_2 = _2767;
                    frontier_phi_68_pred_3 = _2765;
                    frontier_phi_68_pred_4 = _2764;
                    frontier_phi_68_pred_5 = _2766;
                }
                _2575 = frontier_phi_68_pred;
                _2573 = frontier_phi_68_pred_1;
                _2571 = frontier_phi_68_pred_2;
                _2567 = frontier_phi_68_pred_3;
                _2565 = frontier_phi_68_pred_4;
                _2569 = frontier_phi_68_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2565;
                    _2709 = _2567;
                    _2710 = _2569;
                    _2711 = _2571;
                    _2712 = _2573;
                    _2713 = _2575;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
        }
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.z;
        uint _2581 = (_2579 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2581) & _2480) == 0u)
        {
            _2676 = _2564;
            _2678 = _2566;
            _2680 = _2568;
            _2682 = _2570;
            _2684 = _2572;
            _2686 = _2574;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
            float _2702 = _2701 * _1538;
            float _2703 = _2701 * _1539;
            float _2704 = _2701 * _1540;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2581 < ((_2579 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2815 = _2564;
                float _2816 = _2566;
                float _2817 = _2568;
                float _2818 = _2570;
                float _2819 = _2572;
                float _2820 = _2574;
                uint _2821 = _2581;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2831)
                    {
                        frontier_phi_74_pred = _2817;
                        frontier_phi_74_pred_1 = _2816;
                        frontier_phi_74_pred_2 = _2815;
                        frontier_phi_74_pred_3 = _2820;
                        frontier_phi_74_pred_4 = _2819;
                        frontier_phi_74_pred_5 = _2818;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3027 = _2815;
                        float _3028 = _2816;
                        float _3029 = _2817;
                        float _3030 = _2818;
                        float _3031 = _2819;
                        float _3032 = _2820;
                        uint _3033 = _2830;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3103;
                        vec4 _3119;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3044 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3090 = (_3044 * 40u) + 16u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3044 * 40u) + 20u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3044 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3044 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_1540, _3154.z, fma(_1539, _3154.y, _3154.x * _1538)) + _3154.w;
                            _3167 = !((fma(_1540, _3135.z, fma(_1539, _3135.y, _3135.x * _1538)) + _3135.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3059.x - _1538;
                                float _3195 = _3059.y - _1539;
                                float _3196 = _3059.z - _1540;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3060 * _3060));
                                float _4307 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3212 = sqrt(_3197) * _3075.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_395, _398, _401))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_1540, _3103.z, fma(_1539, _3103.y, _3103.x * _1538)) + _3103.w) / _3166;
                                float _3226 = (fma(_1540, _3119.z, fma(_1539, _3119.y, _3119.x * _1538)) + _3119.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4323 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _471;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2702;
                                float _3256 = _3202 - _2703;
                                float _3257 = _3203 - _2704;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4334 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3269 = dot(vec3(_395, _398, _401), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4345 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_395, _398, _401), vec3(_3201, _3202, _3203))) + _3278;
                                float _4356 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4367 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3306 * _3087.z;
                                frontier_phi_80_pred_1 = _3306 * _3087.y;
                                frontier_phi_80_pred_2 = _3306 * _3087.x;
                                frontier_phi_80_pred_3 = _3232 * _3075.z;
                                frontier_phi_80_pred_4 = _3232 * _3075.y;
                                frontier_phi_80_pred_5 = _3232 * _3075.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3312 = frontier_phi_80_pred;
                            _3311 = frontier_phi_80_pred_1;
                            _3310 = frontier_phi_80_pred_2;
                            _3315 = frontier_phi_80_pred_3;
                            _3314 = frontier_phi_80_pred_4;
                            _3313 = frontier_phi_80_pred_5;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            _3019 = _3315 + _3032;
                            _3014 = _3310 + _3027;
                            _3015 = _3311 + _3028;
                            _3016 = _3312 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3016;
                        frontier_phi_74_pred_1 = _3015;
                        frontier_phi_74_pred_2 = _3014;
                        frontier_phi_74_pred_3 = _3019;
                        frontier_phi_74_pred_4 = _3018;
                        frontier_phi_74_pred_5 = _3017;
                    }
                    _2681 = frontier_phi_74_pred;
                    _2679 = frontier_phi_74_pred_1;
                    _2677 = frontier_phi_74_pred_2;
                    _2687 = frontier_phi_74_pred_3;
                    _2685 = frontier_phi_74_pred_4;
                    _2683 = frontier_phi_74_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2677;
                        _2816 = _2679;
                        _2817 = _2681;
                        _2818 = _2683;
                        _2819 = _2685;
                        _2820 = _2687;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2685;
                frontier_phi_62_63_ladder_1 = _2683;
                frontier_phi_62_63_ladder_2 = _2681;
                frontier_phi_62_63_ladder_3 = _2687;
                frontier_phi_62_63_ladder_4 = _2679;
                frontier_phi_62_63_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_62_63_ladder = _2572;
                frontier_phi_62_63_ladder_1 = _2570;
                frontier_phi_62_63_ladder_2 = _2568;
                frontier_phi_62_63_ladder_3 = _2574;
                frontier_phi_62_63_ladder_4 = _2566;
                frontier_phi_62_63_ladder_5 = _2564;
            }
            _2676 = frontier_phi_62_63_ladder_5;
            _2678 = frontier_phi_62_63_ladder_4;
            _2680 = frontier_phi_62_63_ladder_2;
            _2682 = frontier_phi_62_63_ladder_1;
            _2684 = frontier_phi_62_63_ladder;
            _2686 = frontier_phi_62_63_ladder_3;
        }
        float _2691 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2492 = (_2691 * _2682) + _2005;
        _2494 = (_2691 * _2684) + _2007;
        _2496 = (_2691 * _2686) + _2009;
        _2498 = ((_2676 * _440) * _2691) + _2343;
        _2500 = ((_2678 * _442) * _2691) + _2345;
        _2502 = ((_2680 * _443) * _2691) + _2347;
    }
    else
    {
        _2492 = _2005;
        _2494 = _2007;
        _2496 = _2009;
        _2498 = _2343;
        _2500 = _2345;
        _2502 = _2347;
    }
    float _4383 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4394 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4405 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4416 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _2520 = ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2492 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _455))) + ((_2498 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1265)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2494 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _455))) + ((_2500 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1265)) * cbPerFrame._m0[3u].x);
    float _2522 = ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2496 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _455))) + ((_2502 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1265)) * cbPerFrame._m0[3u].x);
    float _2530 = cbInstanceData._m0[_414 + 6u].w * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)));
    float _2535 = _373 / cbSceneParam._m0[86u].x;
    float _2536 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2589 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2590 = _2589 / _306;
        float _2601 = _2590 * _358;
        float _2602 = _359 * _2590;
        float _2603 = (-0.0) - _2602;
        float _2604 = _2590 * _360;
        float _2606 = (cbSceneParam._m0[77u].w * _2603) / _2589;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2602;
        float _2614 = sqrt(((_2601 * _2601) + (_2602 * _2602)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2589)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2603 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2739 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2777 = ((abs(_2614 / _2603) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2624 * _2748) - exp2(_2624 * _2749)) * _2737))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2555);
        _2626 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2628 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2630 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2632 = _2788 * _2555;
    }
    else
    {
        _2626 = _2552;
        _2628 = _2553;
        _2630 = _2554;
        _2632 = _2555;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2632);
    float _2653 = exp2(_2646 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)));
    float _2654 = exp2(_2646 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)));
    float _2655 = exp2(_2646 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.w = _2530;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2530;
}


