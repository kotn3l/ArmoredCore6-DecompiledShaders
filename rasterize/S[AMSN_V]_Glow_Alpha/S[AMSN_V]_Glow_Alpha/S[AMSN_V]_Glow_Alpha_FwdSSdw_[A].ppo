#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _873;
float _3293;
float _3294;
float _3295;
float _3296;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _236 = _230.w;
    float _237 = _236 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3305 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    float _273 = fma(_270, _214, fma(_263, _206 * TANGENT.x, (_192 * _184) * _261));
    float _276 = fma(_270, _215, fma(_263, _206 * TANGENT.y, (_192 * _185) * _261));
    float _279 = fma(_270, _216, fma(_263, _206 * TANGENT.z, (_192 * _186) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3316 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _287 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _288 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3349 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3360 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3371 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _292 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    vec4 _374 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _376 = _374.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _552 = sqrt(((_360 * _360) + (_361 * _361)) + (_362 * _362));
        float _558 = (cbMatDynParam._m0[5u].x * _552) + cbMatDynParam._m0[5u].y;
        float _3382 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _559 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _563 = (cbMatDynParam._m0[5u].z * _552) + cbMatDynParam._m0[5u].w;
        float _3393 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) - _559)) + _559) < ((_376 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _412 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _415 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3404 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _443 = 1.0 - _292;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _292;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _292;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _292;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _469 = _466.x * TEXCOORD_1.w;
    float _470 = dot(vec3(_284, _285, _286), vec3(_367, _368, _369));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _284) - _367;
    float _478 = (_473 * _285) - _368;
    float _479 = (_473 * _286) - _369;
    float _483 = abs(dot(vec3(_367, _368, _369), vec3(_284, _285, _286)));
    float _3437 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_288);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _872;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _601 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _605 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _630 = _533 + _284;
        float _631 = _537 + _285;
        float _632 = _541 + _286;
        float _642 = fma(_632, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) - _597;
        float _643 = fma(_632, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) - _601;
        float _644 = fma(_632, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) - _605;
        float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
        float _661 = ((_648 * _642) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_648 * _643) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_648 * _644) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _710 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_673.x + (-0.5));
        float _712 = _710 * (_673.y + (-0.5));
        float _713 = _710 * (_673.z + (-0.5));
        float _720 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_680.x + (-0.5));
        float _722 = _720 * (_680.y + (-0.5));
        float _723 = _720 * (_680.z + (-0.5));
        float _730 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_687.x + (-0.5));
        float _732 = _730 * (_687.y + (-0.5));
        float _733 = _730 * (_687.z + (-0.5));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = _701 * 0.5;
        float _738 = _711 * 0.5;
        float _739 = _721 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _754 = (dot(vec3(_284, _285, _286), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _764 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3485 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_766 + 1.0))) + _771) * _734;
        float _781 = _702 * 0.5;
        float _782 = _712 * 0.5;
        float _783 = _722 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_284, _285, _286), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3518 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_808 + 1.0))) + _813) * _735;
        float _823 = _703 * 0.5;
        float _824 = _713 * 0.5;
        float _825 = _723 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_284, _285, _286), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3551 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_850 + 1.0))) + _855) * _736;
        _872 = _703;
        _874 = _702;
        _875 = _701;
        _876 = _713;
        _877 = _712;
        _878 = _711;
        _879 = _723;
        _880 = _722;
        _881 = _721;
        _882 = _736;
        _883 = _735;
        _884 = _734;
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
    }
    else
    {
        _872 = _873;
        _874 = _873;
        _875 = _873;
        _876 = _873;
        _877 = _873;
        _878 = _873;
        _879 = _873;
        _880 = _873;
        _881 = _873;
        _882 = _873;
        _883 = _873;
        _884 = _873;
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _920 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _924 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _947 = _533 + _284;
        float _948 = _537 + _285;
        float _949 = _541 + _286;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_284, _285, _286), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3614 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_284, _285, _286), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3647 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_284, _285, _286), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3680 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _873;
        _1186 = _873;
        _1187 = _873;
        _1188 = _873;
        _1189 = _873;
        _1190 = _873;
        _1191 = _873;
        _1192 = _873;
        _1193 = _873;
        _1194 = _873;
        _1195 = _873;
        _1196 = _873;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _886)) + _886;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _477 * 0.5;
    float _1254 = _478 * 0.5;
    float _1255 = _479 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_872, _876, _879, _882));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_874, _877, _880, _883));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_875, _878, _881, _884));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1321 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _288);
    float _1322 = isnan(_1321) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1321 : min(cbModelParam._m0[25u].z, _1321));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1385 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1388 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1416 = frontier_phi_19_17_ladder;
        }
        float _1645;
        if (_1385 > 0.0)
        {
            _1645 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1645 = frontier_phi_28_24_ladder;
        }
        float _1902;
        if (_1388 > 0.0)
        {
            _1902 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1902 = frontier_phi_40_35_ladder;
        }
        float _1904 = isnan(_1645) ? _1416 : (isnan(_1416) ? _1645 : min(_1416, _1645));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1382) + _1371;
        float _1910 = (_1905 * _1385) + _1375;
        float _1911 = (_1905 * _1388) + _1379;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1912;
        float _1916 = _1912 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 > _1916) || ((_1910 < _1914) || ((_1909 < _1914) || (_1909 > _1916))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1911, cbModelParam._m0[9u].z, fma(_1910, cbModelParam._m0[9u].y, _1909 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1911, cbModelParam._m0[10u].z, fma(_1910, cbModelParam._m0[10u].y, _1909 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1911, cbModelParam._m0[11u].z, fma(_1910, cbModelParam._m0[11u].y, _1909 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_18_40_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_18_40_ladder_2;
        _1406 = frontier_phi_18_40_ladder_1;
        _1408 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _288);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1470 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1474 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1478 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1481 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1484 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1487 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1650;
        if (_1481 > 0.0)
        {
            _1650 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1650 = frontier_phi_30_26_ladder;
        }
        float _1929;
        if (_1484 > 0.0)
        {
            _1929 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1929 = frontier_phi_42_37_ladder;
        }
        float _2142;
        if (_1487 > 0.0)
        {
            _2142 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2142 = frontier_phi_51_48_ladder;
        }
        float _2144 = isnan(_1929) ? _1650 : (isnan(_1650) ? _1929 : min(_1650, _1929));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1481) + _1470;
        float _2150 = (_2145 * _1484) + _1474;
        float _2151 = (_2145 * _1487) + _1478;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2152;
        float _2155 = _2152 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2151 > _2155) || ((_2151 < _2153) || ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 < _2153) || (_2149 > _2155))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2151, cbModelParam._m0[17u].z, fma(_2150, cbModelParam._m0[17u].y, _2149 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2151, cbModelParam._m0[18u].z, fma(_2150, cbModelParam._m0[18u].y, _2149 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2151, cbModelParam._m0[19u].z, fma(_2150, cbModelParam._m0[19u].y, _2149 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_27_51_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1506 = frontier_phi_27_51_ladder_2;
        _1508 = frontier_phi_27_51_ladder_1;
        _1510 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1413);
        _1506 = _1490.x * cbModelParam._m0[1u].z;
        _1508 = _1490.y * cbModelParam._m0[1u].z;
        _1510 = _1490.z * cbModelParam._m0[1u].z;
    }
    float _1523 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1530 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, _1523 * cbSceneParam._m0[91u].x));
    vec4 _1544 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1546 = _1544.w;
    float _1558 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1546);
    float _1559 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1546);
    float _1560 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1546);
    uvec4 _1564 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1566 = _1564.x * 14u;
    uint _1567 = _1566 + 13u;
    float _1574 = _469 + (-1.0);
    float _1579 = (cbLight._m0[_1567].x * _1574) + 1.0;
    float _1580 = (cbLight._m0[_1567].y * _1574) + 1.0;
    float _1581 = (cbLight._m0[_1567].z * _1574) + 1.0;
    float _1582 = (cbLight._m0[_1567].w * _1574) + 1.0;
    uint _1583 = _1566 + 5u;
    float _1589 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1593 = _1566 + 4u;
    float _1603 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1607 = _1566 | 1u;
    float _1618 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_284, _285, _286));
    float _1621 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_284, _285, _286));
    float _3816 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _3827 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1626 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1628 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1635 = ((cbLight._m0[_1583].x * _1589) * _1628) + (((cbLight._m0[_1593].x * _1558) * _1603) * _1626);
    float _1636 = ((_1589 * cbLight._m0[_1583].y) * _1628) + (((cbLight._m0[_1593].y * _1559) * _1603) * _1626);
    float _1637 = ((_1589 * cbLight._m0[_1583].z) * _1628) + (((cbLight._m0[_1593].z * _1560) * _1603) * _1626);
    uvec4 _1642 = floatBitsToUint(cbLight._m0[_1566 + 12u]);
    bool _1644 = _1642.x == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1644)
    {
        _1655 = _1635;
        _1657 = _1636;
        _1659 = _1637;
    }
    else
    {
        uint _1663 = _1566 + 6u;
        float _1679 = (dot(vec3(cbLight._m0[_1566 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1680 = _1679 * _1679;
        float _3838 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1682 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1655 = (((cbLight._m0[_1663].x * 0.3183098733425140380859375) * _1681) * _1682) + _1635;
        _1657 = (((cbLight._m0[_1663].y * 0.3183098733425140380859375) * _1681) * _1682) + _1636;
        _1659 = (((cbLight._m0[_1663].z * 0.3183098733425140380859375) * _1681) * _1682) + _1637;
    }
    bool _1662 = _1642.y == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1662)
    {
        _1700 = _1655;
        _1702 = _1657;
        _1704 = _1659;
    }
    else
    {
        uint _1873 = _1566 + 7u;
        float _1889 = (dot(vec3(cbLight._m0[_1566 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3854 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1892 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1700 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1655;
        _1702 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1657;
        _1704 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1659;
    }
    uint _1707 = _1566 + 8u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _288) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1566].x + _367;
    float _1723 = cbLight._m0[_1566].y + _368;
    float _1724 = cbLight._m0[_1566].z + _369;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1566].xyz));
    float _3870 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1736 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1737 = dot(vec3(_284, _285, _286), vec3(_1729, _1730, _1731));
    float _3892 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1741 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1729, _1730, _1731));
    float _3903 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1745 = _1721 * _1721;
    float _1749 = ((_1740 * _1740) * (_1745 + (-1.0))) + 1.0;
    float _1757 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
    float _1758 = 0.959999978542327880859375 - _451;
    float _1760 = 0.959999978542327880859375 - _452;
    float _1761 = 0.959999978542327880859375 - _453;
    float _1768 = 1.0 - _1721;
    float _1779 = (0.5 / (((_1736 * ((_1735 * _1768) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1768) + _1721) * _1735))) * _1735;
    float _3914 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1781 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1745 / ((_1749 * _1749) * 3.141590118408203125));
    uint _1795 = _1566 + 9u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _288) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1607].x + _367;
    float _1809 = cbLight._m0[_1607].y + _368;
    float _1810 = cbLight._m0[_1607].z + _369;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1607].xyz));
    float _3925 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1822 = dot(vec3(_284, _285, _286), vec3(_1815, _1816, _1817));
    float _3936 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1815, _1816, _1817));
    float _3947 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1807 * _1807;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1841 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
    float _1848 = 1.0 - _1807;
    float _1858 = (0.5 / (((_1736 * ((_1821 * _1848) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1848) + _1807) * _1821))) * _1821;
    float _3958 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    float _1870 = (((((_1841 * _1758) + _454) * cbLight._m0[_1795].x) * _1860) * _1589) + ((((cbLight._m0[_1707].x * _1558) * ((_1757 * _1758) + _454)) * _1781) * _1603);
    float _1871 = (((((_1841 * _1760) + _456) * cbLight._m0[_1795].y) * _1860) * _1589) + ((((cbLight._m0[_1707].y * _1559) * ((_1757 * _1760) + _456)) * _1781) * _1603);
    float _1872 = (((((_1841 * _1761) + _457) * cbLight._m0[_1795].z) * _1860) * _1589) + ((((cbLight._m0[_1707].z * _1560) * ((_1757 * _1761) + _457)) * _1781) * _1603);
    float _1934;
    float _1936;
    float _1938;
    if (_1644)
    {
        _1934 = _1870;
        _1936 = _1871;
        _1938 = _1872;
    }
    else
    {
        uint _1940 = _1566 + 2u;
        uint _1944 = _1566 + 10u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _288) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _367;
        float _1961 = cbLight._m0[_1940].y + _368;
        float _1962 = cbLight._m0[_1940].z + _369;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1940].xyz));
        float _3969 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1974 = dot(vec3(_284, _285, _286), vec3(_1967, _1968, _1969));
        float _3980 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _3991 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
        float _2000 = 1.0 - _1959;
        float _2010 = (0.5 / (((_1736 * ((_1973 * _2000) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2000) + _1959) * _1973))) * _1973;
        float _4002 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1934 = (((((_1993 * _1758) + _454) * cbLight._m0[_1944].x) * _2012) * _2013) + _1870;
        _1936 = (((((_1993 * _1760) + _456) * cbLight._m0[_1944].y) * _2012) * _2013) + _1871;
        _1938 = (((((_1993 * _1761) + _457) * cbLight._m0[_1944].z) * _2012) * _2013) + _1872;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1662)
    {
        _2048 = _1934;
        _2050 = _1936;
        _2052 = _1938;
    }
    else
    {
        uint _2059 = _1566 + 3u;
        uint _2063 = _1566 + 11u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _288) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _367;
        float _2080 = cbLight._m0[_2059].y + _368;
        float _2081 = cbLight._m0[_2059].z + _369;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2059].xyz));
        float _4018 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2093 = dot(vec3(_284, _285, _286), vec3(_2086, _2087, _2088));
        float _4029 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _4040 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
        float _2119 = 1.0 - _2078;
        float _2129 = (0.5 / (((_1736 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2119) + _2078) * _2092))) * _2092;
        float _4051 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _2048 = (((((_2112 * _1758) + _454) * cbLight._m0[_2063].x) * _2131) * _2132) + _1934;
        _2050 = (((((_2112 * _1760) + _456) * cbLight._m0[_2063].y) * _2131) * _2132) + _1936;
        _2052 = (((((_2112 * _1761) + _457) * cbLight._m0[_2063].z) * _2131) * _2132) + _1938;
    }
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    if (_1564.y == 0u)
    {
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2207;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2207;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2207;
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.x;
        uint _2234 = uint((float(_2222.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2223))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2223)));
        float _2244 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2245 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        uint _2248 = uint(isnan(14.0) ? _2245 : (isnan(_2245) ? 14.0 : min(_2245, 14.0)));
        uvec4 _2253 = texelFetch(g_lightClusterGridBuffer, int(((_2248 << 2u) + (_2234 << 6u)) >> 2u));
        uint _2254 = _2253.x;
        uint _2255 = _2222.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2255 >> 4u) & 15u)) + 4294967295u) & _2254) == 0u) || ((_2255 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2527)
                {
                    frontier_phi_68_pred = _2513;
                    frontier_phi_68_pred_1 = _2516;
                    frontier_phi_68_pred_2 = _2515;
                    frontier_phi_68_pred_3 = _2514;
                    frontier_phi_68_pred_4 = _2512;
                    frontier_phi_68_pred_5 = _2511;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2526;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2517 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _2208;
                        float _2723 = _2682.y - _2209;
                        float _2724 = _2682.z - _2210;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_409, _412, _415), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _4077 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2732) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _2208;
                        float _2758 = (-0.0) - _2209;
                        float _2759 = (-0.0) - _2210;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _485;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_409, _412, _415), vec3(_2764, _2765, _2766));
                        float _4093 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2799 = dot(vec3(_409, _412, _415), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4104 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2742 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2732) + _2808;
                        float _4115 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4126 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) / ((_2806 * _2806) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2586 = (_2753 * _2701.x) + _2659;
                        _2587 = (_2753 * _2701.y) + _2660;
                        _2588 = (_2753 * _2701.z) + _2661;
                        _2583 = (_2834 * _2718.x) + _2656;
                        _2584 = (_2834 * _2718.y) + _2657;
                        _2585 = (_2834 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                _2364 = frontier_phi_68_pred;
                _2370 = frontier_phi_68_pred_1;
                _2368 = frontier_phi_68_pred_2;
                _2366 = frontier_phi_68_pred_3;
                _2362 = frontier_phi_68_pred_4;
                _2360 = frontier_phi_68_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2360;
                    _2512 = _2362;
                    _2513 = _2364;
                    _2514 = _2366;
                    _2515 = _2368;
                    _2516 = _2370;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2376) & _2254) == 0u)
        {
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _2505 = _2504 * _2208;
            float _2506 = _2504 * _2209;
            float _2507 = _2504 * _2210;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2639 = _2359;
                float _2640 = _2361;
                float _2641 = _2363;
                float _2642 = _2365;
                float _2643 = _2367;
                float _2644 = _2369;
                uint _2645 = _2376;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2655)
                    {
                        frontier_phi_79_pred = _2644;
                        frontier_phi_79_pred_1 = _2643;
                        frontier_phi_79_pred_2 = _2642;
                        frontier_phi_79_pred_3 = _2641;
                        frontier_phi_79_pred_4 = _2640;
                        frontier_phi_79_pred_5 = _2639;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        uint _2867 = _2654;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2937;
                        vec4 _2953;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2878 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2924 = (_2878 * 40u) + 16u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2878 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2878 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2878 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_2210, _2988.z, fma(_2209, _2988.y, _2988.x * _2208)) + _2988.w;
                            _3001 = !((fma(_2210, _2969.z, fma(_2209, _2969.y, _2969.x * _2208)) + _2969.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2893.x - _2208;
                                float _3029 = _2893.y - _2209;
                                float _3030 = _2893.z - _2210;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2894 * _2894));
                                float _4137 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3046 = sqrt(_3031) * _2909.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3052 = ((1.0 - _3049) * dot(vec3(_3035, _3036, _3037), vec3(_409, _412, _415))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_2210, _2937.z, fma(_2209, _2937.y, _2937.x * _2208)) + _2937.w) / _3000;
                                float _3060 = (fma(_2210, _2953.z, fma(_2209, _2953.y, _2953.x * _2208)) + _2953.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4153 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3078 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                                float _3079 = 1.0 - _485;
                                float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                                float _3087 = _3086 * _3086;
                                float _3088 = _3087 * _3087;
                                float _3089 = _3035 - _2505;
                                float _3090 = _3036 - _2506;
                                float _3091 = _3037 - _2507;
                                float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                                float _3099 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2505, (-0.0) - _2506, (-0.0) - _2507));
                                float _4164 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3103 = dot(vec3(_409, _412, _415), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                                float _4175 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                                float _3111 = _3048 * _3087;
                                float _3112 = _3111 * _3111;
                                float _3118 = ((1.0 - _3112) * dot(vec3(_409, _412, _415), vec3(_3035, _3036, _3037))) + _3112;
                                float _4186 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3120 = 1.0 - _3087;
                                float _3130 = (0.5 / (((_3119 * ((_3102 * _3120) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3087) * _3102))) * _3119;
                                float _4197 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3140 = (_3065 * _3042) * (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_3110 * _3110) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3066 * _2909.z;
                                frontier_phi_85_pred_1 = _3066 * _2909.y;
                                frontier_phi_85_pred_2 = _3066 * _2909.x;
                                frontier_phi_85_pred_3 = _3140 * _2921.z;
                                frontier_phi_85_pred_4 = _3140 * _2921.y;
                                frontier_phi_85_pred_5 = _3140 * _2921.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_85_pred;
                            _3148 = frontier_phi_85_pred_1;
                            _3147 = frontier_phi_85_pred_2;
                            _3146 = frontier_phi_85_pred_3;
                            _3145 = frontier_phi_85_pred_4;
                            _3144 = frontier_phi_85_pred_5;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2853;
                        frontier_phi_79_pred_1 = _2852;
                        frontier_phi_79_pred_2 = _2851;
                        frontier_phi_79_pred_3 = _2850;
                        frontier_phi_79_pred_4 = _2849;
                        frontier_phi_79_pred_5 = _2848;
                    }
                    _2490 = frontier_phi_79_pred;
                    _2488 = frontier_phi_79_pred_1;
                    _2486 = frontier_phi_79_pred_2;
                    _2484 = frontier_phi_79_pred_3;
                    _2482 = frontier_phi_79_pred_4;
                    _2480 = frontier_phi_79_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2480;
                        _2640 = _2482;
                        _2641 = _2484;
                        _2642 = _2486;
                        _2643 = _2488;
                        _2644 = _2490;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2486;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2484;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            else
            {
                frontier_phi_60_61_ladder = _2365;
                frontier_phi_60_61_ladder_1 = _2369;
                frontier_phi_60_61_ladder_2 = _2367;
                frontier_phi_60_61_ladder_3 = _2363;
                frontier_phi_60_61_ladder_4 = _2361;
                frontier_phi_60_61_ladder_5 = _2359;
            }
            _2479 = frontier_phi_60_61_ladder_5;
            _2481 = frontier_phi_60_61_ladder_4;
            _2483 = frontier_phi_60_61_ladder_3;
            _2485 = frontier_phi_60_61_ladder;
            _2487 = frontier_phi_60_61_ladder_2;
            _2489 = frontier_phi_60_61_ladder_1;
        }
        float _2494 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2266 = (_2494 * _2485) + _1700;
        _2268 = (_2494 * _2487) + _1702;
        _2270 = (_2494 * _2489) + _1704;
        _2272 = ((_2479 * _454) * _2494) + _2048;
        _2274 = ((_2481 * _456) * _2494) + _2050;
        _2276 = ((_2483 * _457) * _2494) + _2052;
    }
    else
    {
        _2266 = _1700;
        _2268 = _1702;
        _2270 = _1704;
        _2272 = _2048;
        _2274 = _2050;
        _2276 = _2052;
    }
    float _4213 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4224 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4235 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4246 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _2294 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2266 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _469))) + ((_2272 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2295 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2268 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _469))) + ((_2274 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2270 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _469))) + ((_2276 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1311)) * cbPerFrame._m0[3u].x);
    float _2297 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2304 = cbInstanceData._m0[_428 + 6u].w * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)));
    float _2309 = _388 / cbSceneParam._m0[86u].x;
    float _2310 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2385 = _2384 / _308;
        float _2396 = _2385 * _360;
        float _2397 = _361 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2399 = _2385 * _362;
        float _2401 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2402 = _2401 + cbSceneParam._m0[79u].w;
        float _2403 = cbSceneParam._m0[79u].w - _2397;
        float _2409 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2399 * _2399));
        float _2412 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2409;
        float _2417 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2419 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2398 - _2401) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2402 > 0.0) ? exp2(_2417 * _2402) : (2.0 - exp2(_2419 * _2402))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2412;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : max(_2402, _2403));
            float _2542 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : min(_2402, _2403));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2596 = ((abs(_2409 / _2398) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2417 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2417 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2419 * _2551) - exp2(_2419 * _2552)) * _2540))) + (_2412 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2329);
        _2421 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2423 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2425 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2427 = _2607 * _2329;
    }
    else
    {
        _2421 = _2326;
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
    }
    bool _2634;
    vec4 _2437;
    vec4 _2459;
    float _2461;
    float _2465;
    float _2466;
    float _2467;
    float _2468;
    bool _2478;
    for (;;)
    {
        _2437 = cbMatDynParam._m0[0u];
        float _2439 = roundEven(_2437.y);
        bool _2440 = _2439 == 3.0;
        float _2441 = log2(_2427);
        float _2448 = exp2(_2441 * cbSceneParam._m0[78u].x) * _2297;
        float _2449 = exp2(_2441 * cbSceneParam._m0[78u].y) * _2298;
        float _2450 = exp2(_2441 * cbSceneParam._m0[78u].z) * _2299;
        float _2457 = _376 + (-0.5);
        _2459 = cbMtdParam._m0[1u];
        _2461 = _2459.y * _2457;
        float _2464 = (_2439 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2465 = _2464 * (_2440 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
        _2466 = _2464 * (_2440 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
        _2467 = _2464 * (_2440 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2425)));
        _2468 = _2457 * 0.999000012874603271484375;
        _2478 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2478)
        {
            if ((cbInstanceData._m0[_428 + 7u].x + _2468) < 0.5)
            {
                _2634 = true;
                break;
            }
        }
        uint _2575 = _430 + uint(_2437.w);
        if ((cbInstanceData._m0[_2575].w < 1.0) && ((cbInstanceData._m0[_2575].w + _2468) < 0.5))
        {
            _2634 = true;
            break;
        }
        if ((_2461 + _236) < _2459.x)
        {
            _2634 = true;
            break;
        }
        _2634 = false;
        break;
    }
    float _2839;
    if (_2634)
    {
        discard_state = true;
        _2839 = 0.0;
    }
    else
    {
        _2839 = _2304;
    }
    SV_Target.x = _2465;
    SV_Target.y = _2466;
    SV_Target.z = _2467;
    SV_Target.w = _2839;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2304;
    discard_exit();
}


