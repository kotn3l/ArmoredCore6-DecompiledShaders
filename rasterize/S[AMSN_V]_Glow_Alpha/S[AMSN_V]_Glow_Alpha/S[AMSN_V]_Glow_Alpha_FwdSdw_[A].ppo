#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _875;
float _3554;
float _3555;
float _3556;
float _3557;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(S_AMSN_V_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3566 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    float _275 = fma(_272, _216, fma(_265, _208 * TANGENT.x, (_194 * _186) * _263));
    float _278 = fma(_272, _217, fma(_265, _208 * TANGENT.y, (_194 * _187) * _263));
    float _281 = fma(_272, _218, fma(_265, _208 * TANGENT.z, (_194 * _188) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3577 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _289 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _290 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3610 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3621 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3632 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _294 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _554 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _560 = (cbMatDynParam._m0[5u].x * _554) + cbMatDynParam._m0[5u].y;
        float _3643 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _561 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _565 = (cbMatDynParam._m0[5u].z * _554) + cbMatDynParam._m0[5u].w;
        float _3654 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) - _561)) + _561) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _414 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _417 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3665 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _445 = 1.0 - _294;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _294;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _294;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _294;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _471 = _468.x * TEXCOORD_1.w;
    float _472 = dot(vec3(_286, _287, _288), vec3(_369, _370, _371));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _286) - _369;
    float _480 = (_475 * _287) - _370;
    float _481 = (_475 * _288) - _371;
    float _485 = abs(dot(vec3(_369, _370, _371), vec3(_286, _287, _288)));
    float _3698 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_290);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _874;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _599 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _603 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _607 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _632 = _535 + _286;
        float _633 = _539 + _287;
        float _634 = _543 + _288;
        float _644 = fma(_634, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632)) - _599;
        float _645 = fma(_634, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632)) - _603;
        float _646 = fma(_634, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632)) - _607;
        float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
        float _663 = ((_650 * _644) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_599 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_650 * _645) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_603 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_650 * _646) / cbModelParam._m0[34u].z) + ((((((_607 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_668.x + (-0.5));
        float _704 = _702 * (_668.y + (-0.5));
        float _705 = _702 * (_668.z + (-0.5));
        float _712 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_675.x + (-0.5));
        float _714 = _712 * (_675.y + (-0.5));
        float _715 = _712 * (_675.z + (-0.5));
        float _722 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_682.x + (-0.5));
        float _724 = _722 * (_682.y + (-0.5));
        float _725 = _722 * (_682.z + (-0.5));
        float _732 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_689.x + (-0.5));
        float _734 = _732 * (_689.y + (-0.5));
        float _735 = _732 * (_689.z + (-0.5));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = _703 * 0.5;
        float _740 = _713 * 0.5;
        float _741 = _723 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _756 = (dot(vec3(_286, _287, _288), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _766 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3746 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_768 + 1.0))) + _773) * _736;
        float _783 = _704 * 0.5;
        float _784 = _714 * 0.5;
        float _785 = _724 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_286, _287, _288), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3779 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_810 + 1.0))) + _815) * _737;
        float _825 = _705 * 0.5;
        float _826 = _715 * 0.5;
        float _827 = _725 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_286, _287, _288), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3812 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_852 + 1.0))) + _857) * _738;
        _874 = _705;
        _876 = _704;
        _877 = _703;
        _878 = _715;
        _879 = _714;
        _880 = _713;
        _881 = _725;
        _882 = _724;
        _883 = _723;
        _884 = _738;
        _885 = _737;
        _886 = _736;
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
    }
    else
    {
        _874 = _875;
        _876 = _875;
        _877 = _875;
        _878 = _875;
        _879 = _875;
        _880 = _875;
        _881 = _875;
        _882 = _875;
        _883 = _875;
        _884 = _875;
        _885 = _875;
        _886 = _875;
        _887 = 0.0;
        _888 = 0.0;
        _889 = 0.0;
    }
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _918 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _922 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _926 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _949 = _535 + _286;
        float _950 = _539 + _287;
        float _951 = _543 + _288;
        float _961 = fma(_951, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949)) - _918;
        float _962 = fma(_951, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949)) - _922;
        float _963 = fma(_951, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949)) - _926;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_918 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_922 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[35u].z) + ((((((_926 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1017 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_984.x + (-0.5));
        float _1019 = _1017 * (_984.y + (-0.5));
        float _1020 = _1017 * (_984.z + (-0.5));
        float _1027 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_991.x + (-0.5));
        float _1029 = _1027 * (_991.y + (-0.5));
        float _1030 = _1027 * (_991.z + (-0.5));
        float _1037 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_998.x + (-0.5));
        float _1039 = _1037 * (_998.y + (-0.5));
        float _1040 = _1037 * (_998.z + (-0.5));
        float _1047 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1005.x + (-0.5));
        float _1049 = _1047 * (_1005.y + (-0.5));
        float _1050 = _1047 * (_1005.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = _1018 * 0.5;
        float _1055 = _1028 * 0.5;
        float _1056 = _1038 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_286, _287, _288), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3875 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1081 + 1.0))) + _1086) * _1051;
        float _1096 = _1019 * 0.5;
        float _1097 = _1029 * 0.5;
        float _1098 = _1039 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_286, _287, _288), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3908 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1123 + 1.0))) + _1128) * _1052;
        float _1138 = _1020 * 0.5;
        float _1139 = _1030 * 0.5;
        float _1140 = _1040 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_286, _287, _288), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3941 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1165 + 1.0))) + _1170) * _1053;
        _1187 = _1020;
        _1188 = _1019;
        _1189 = _1018;
        _1190 = _1030;
        _1191 = _1029;
        _1192 = _1028;
        _1193 = _1040;
        _1194 = _1039;
        _1195 = _1038;
        _1196 = _1053;
        _1197 = _1052;
        _1198 = _1051;
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _875;
        _1188 = _875;
        _1189 = _875;
        _1190 = _875;
        _1191 = _875;
        _1192 = _875;
        _1193 = _875;
        _1194 = _875;
        _1195 = _875;
        _1196 = _875;
        _1197 = _875;
        _1198 = _875;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _888)) + _888;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1234 = fma(_1213, cbSceneParam._m0[89u].z, fma(_1212, cbSceneParam._m0[89u].y, _1211 * cbSceneParam._m0[89u].x));
    float _1237 = fma(_1213, cbSceneParam._m0[90u].z, fma(_1212, cbSceneParam._m0[90u].y, _1211 * cbSceneParam._m0[90u].x));
    float _1240 = fma(_1213, cbSceneParam._m0[91u].z, fma(_1212, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1211));
    float _1255 = _479 * 0.5;
    float _1256 = _480 * 0.5;
    float _1257 = _481 * 0.5;
    float _1258 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1261 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1264 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1298;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1271 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_874, _878, _881, _884));
        float _1275 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_876, _879, _882, _885));
        float _1279 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_877, _880, _883, _886));
        float _1286 = dot(vec4(cbModelParam._m0[39u]), vec4(_1255, _1256, _1257, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1309;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1300 = dot(vec4(cbModelParam._m0[40u]), vec4(_1255, _1256, _1257, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1313 = (_1309 * cbModelParam._m0[1u].x) + (_1298 * (1.0 - cbModelParam._m0[1u].x));
    float _1323 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _290);
    float _1324 = isnan(_1323) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1323 : min(cbModelParam._m0[25u].z, _1323));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1373 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1377 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1381 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1384 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1387 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1390 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1418;
        if (_1384 > 0.0)
        {
            _1418 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1418 = frontier_phi_19_17_ladder;
        }
        float _1594;
        if (_1387 > 0.0)
        {
            _1594 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1594 = frontier_phi_28_24_ladder;
        }
        float _1890;
        if (_1390 > 0.0)
        {
            _1890 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1890 = frontier_phi_40_35_ladder;
        }
        float _1892 = isnan(_1594) ? _1418 : (isnan(_1418) ? _1594 : min(_1418, _1594));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1384) + _1373;
        float _1898 = (_1893 * _1387) + _1377;
        float _1899 = (_1893 * _1390) + _1381;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1324);
            frontier_phi_18_40_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1406 = frontier_phi_18_40_ladder_2;
        _1408 = frontier_phi_18_40_ladder_1;
        _1410 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1324);
        _1406 = _1394.x * cbModelParam._m0[1u].y;
        _1408 = _1394.y * cbModelParam._m0[1u].y;
        _1410 = _1394.z * cbModelParam._m0[1u].y;
    }
    float _1414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _290);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1414 : min(cbModelParam._m0[25u].w, _1414));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1472 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1476 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1480 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1483 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1486 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1489 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1599;
        if (_1483 > 0.0)
        {
            _1599 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1599 = frontier_phi_30_26_ladder;
        }
        float _1917;
        if (_1486 > 0.0)
        {
            _1917 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1917 = frontier_phi_42_37_ladder;
        }
        float _2255;
        if (_1489 > 0.0)
        {
            _2255 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2255 = frontier_phi_52_49_ladder;
        }
        float _2257 = isnan(_1917) ? _1599 : (isnan(_1599) ? _1917 : min(_1599, _1917));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1483) + _1472;
        float _2263 = (_2258 * _1486) + _1476;
        float _2264 = (_2258 * _1489) + _1480;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_27_52_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1508 = frontier_phi_27_52_ladder_2;
        _1510 = frontier_phi_27_52_ladder_1;
        _1512 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1415);
        _1508 = _1492.x * cbModelParam._m0[1u].z;
        _1510 = _1492.y * cbModelParam._m0[1u].z;
        _1512 = _1492.z * cbModelParam._m0[1u].z;
    }
    float _1525 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1532 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1525 * cbSceneParam._m0[91u].x));
    float _1573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1586 = _1573 / _1585;
    float _1587 = _1577 / _1585;
    float _1588 = _1581 / _1585;
    float _1735;
    float _1736;
    float _1737;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1615 = ((uint(_1588 > cbSceneParam._m0[59u].y) + uint(_1588 > cbSceneParam._m0[59u].x)) + uint(_1588 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1616 = _1615 + 43u;
        uint _1624 = _1615 + 44u;
        uint _1632 = _1615 + 45u;
        uint _1640 = _1615 + 46u;
        float _1651 = fma(_1585, cbSceneParam._m0[_1616].w, fma(_1581, cbSceneParam._m0[_1616].z, fma(_1577, cbSceneParam._m0[_1616].y, _1573 * cbSceneParam._m0[_1616].x)));
        float _1655 = fma(_1585, cbSceneParam._m0[_1624].w, fma(_1581, cbSceneParam._m0[_1624].z, fma(_1577, cbSceneParam._m0[_1624].y, _1573 * cbSceneParam._m0[_1624].x)));
        float _1663 = fma(_1585, cbSceneParam._m0[_1640].w, fma(_1581, cbSceneParam._m0[_1640].z, fma(_1577, cbSceneParam._m0[_1640].y, _1573 * cbSceneParam._m0[_1640].x)));
        float _1668 = cbSceneParam._m0[33u].z * _1663;
        float _1670 = cbSceneParam._m0[33u].w * _1663;
        float _1673 = fma(_1585, cbSceneParam._m0[_1632].w, fma(_1581, cbSceneParam._m0[_1632].z, fma(_1577, cbSceneParam._m0[_1632].y, _1573 * cbSceneParam._m0[_1632].x))) / _1663;
        float _1721 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
        float _4067 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1728 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 + _1651) / _1663, (_1670 + _1655) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1670 + _1651) / _1663, (_1655 - _1668) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1668) / _1663, (_1655 - _1670) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1670) / _1663, (_1668 + _1655) / _1663), _1673), 0.0)).x), vec4(0.25)));
        _1735 = 1.0 - (_1728 * cbSceneParam._m0[34u].x);
        _1736 = 1.0 - (_1728 * cbSceneParam._m0[34u].y);
        _1737 = 1.0 - (_1728 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1735 = 1.0;
        _1736 = 1.0;
        _1737 = 1.0;
    }
    float _1801;
    float _1803;
    float _1805;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1789 = fma(_1585, cbSceneParam._m0[63u].w, fma(_1581, cbSceneParam._m0[63u].z, fma(_1577, cbSceneParam._m0[63u].y, _1573 * cbSceneParam._m0[63u].x)));
        float _1790 = fma(_1585, cbSceneParam._m0[60u].w, fma(_1581, cbSceneParam._m0[60u].z, fma(_1577, cbSceneParam._m0[60u].y, _1573 * cbSceneParam._m0[60u].x))) / _1789;
        float _1791 = fma(_1585, cbSceneParam._m0[61u].w, fma(_1581, cbSceneParam._m0[61u].z, fma(_1577, cbSceneParam._m0[61u].y, _1573 * cbSceneParam._m0[61u].x))) / _1789;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1790 >= cbSceneParam._m0[64u].x) && (_1791 >= cbSceneParam._m0[64u].y)) && (_1790 <= cbSceneParam._m0[64u].z)) && (_1791 <= cbSceneParam._m0[64u].w))
        {
            float _1930 = fma(_1585, cbSceneParam._m0[62u].w, fma(_1581, cbSceneParam._m0[62u].z, fma(_1577, cbSceneParam._m0[62u].y, _1573 * cbSceneParam._m0[62u].x))) / _1789;
            float _1934 = isnan(cbSceneParam._m0[41u].w) ? _1930 : (isnan(_1930) ? cbSceneParam._m0[41u].w : max(_1930, cbSceneParam._m0[41u].w));
            float _1977 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
            float _4083 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
            float _1984 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1790, cbSceneParam._m0[33u].w + _1791), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1790, _1791 - cbSceneParam._m0[33u].z), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].z, _1791 - cbSceneParam._m0[33u].w), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1791), _1934), 0.0)).x), vec4(0.25)));
            float _1988 = 1.0 - (_1984 * cbSceneParam._m0[34u].x);
            float _1989 = 1.0 - (_1984 * cbSceneParam._m0[34u].y);
            float _1990 = 1.0 - (_1984 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1989) ? _1736 : (isnan(_1736) ? _1989 : min(_1736, _1989));
            frontier_phi_39_38_ladder_1 = isnan(_1988) ? _1735 : (isnan(_1735) ? _1988 : min(_1735, _1988));
            frontier_phi_39_38_ladder_2 = isnan(_1990) ? _1737 : (isnan(_1737) ? _1990 : min(_1737, _1990));
        }
        else
        {
            frontier_phi_39_38_ladder = _1736;
            frontier_phi_39_38_ladder_1 = _1735;
            frontier_phi_39_38_ladder_2 = _1737;
        }
        _1801 = frontier_phi_39_38_ladder_1;
        _1803 = frontier_phi_39_38_ladder;
        _1805 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1801 = _1735;
        _1803 = _1736;
        _1805 = _1737;
    }
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _471 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_286, _287, _288));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_286, _287, _288));
    float _4119 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4130 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1801) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1803) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1805) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1889)
    {
        _1991 = _1881;
        _1993 = _1882;
        _1995 = _1883;
    }
    else
    {
        uint _1999 = _1812 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4141 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2018 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1881;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1882;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1883;
    }
    bool _1998 = _1887.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_1998)
    {
        _2053 = _1991;
        _2055 = _1993;
        _2057 = _1995;
    }
    else
    {
        uint _2226 = _1812 + 7u;
        float _2242 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4157 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2245 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2053 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _1991;
        _2055 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _1993;
        _2057 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _1995;
    }
    uint _2060 = _1812 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _290) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1812].x + _369;
    float _2076 = cbLight._m0[_1812].y + _370;
    float _2077 = cbLight._m0[_1812].z + _371;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1812].xyz));
    float _4173 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _2089 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2090 = dot(vec3(_286, _287, _288), vec3(_2082, _2083, _2084));
    float _4195 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2082, _2083, _2084));
    float _4206 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _453;
    float _2113 = 0.959999978542327880859375 - _454;
    float _2114 = 0.959999978542327880859375 - _455;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4217 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2148 = _1812 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _290) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1853].x + _369;
    float _2162 = cbLight._m0[_1853].y + _370;
    float _2163 = cbLight._m0[_1853].z + _371;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1853].xyz));
    float _4228 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2175 = dot(vec3(_286, _287, _288), vec3(_2168, _2169, _2170));
    float _4239 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2168, _2169, _2170));
    float _4250 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2089 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2201) + _2160) * _2174))) * _2174;
    float _4261 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2111) + _456) * cbLight._m0[_2148].x) * _2213) * _1835) + ((((cbLight._m0[_2060].x * _1801) * ((_2110 * _2111) + _456)) * _2134) * _1849);
    float _2224 = (((((_2194 * _2113) + _458) * cbLight._m0[_2148].y) * _2213) * _1835) + ((((cbLight._m0[_2060].y * _1803) * ((_2110 * _2113) + _458)) * _2134) * _1849);
    float _2225 = (((((_2194 * _2114) + _459) * cbLight._m0[_2148].z) * _2213) * _1835) + ((((cbLight._m0[_2060].z * _1805) * ((_2110 * _2114) + _459)) * _2134) * _1849);
    float _2281;
    float _2283;
    float _2285;
    if (_1889)
    {
        _2281 = _2223;
        _2283 = _2224;
        _2285 = _2225;
    }
    else
    {
        uint _2287 = _1812 + 2u;
        uint _2291 = _1812 + 10u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _290) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _369;
        float _2308 = cbLight._m0[_2287].y + _370;
        float _2309 = cbLight._m0[_2287].z + _371;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2287].xyz));
        float _4272 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2321 = dot(vec3(_286, _287, _288), vec3(_2314, _2315, _2316));
        float _4283 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4294 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0);
        float _2347 = 1.0 - _2306;
        float _2357 = (0.5 / (((_2089 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2347) + _2306) * _2320))) * _2320;
        float _4305 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2281 = (((((_2340 * _2111) + _456) * cbLight._m0[_2291].x) * _2359) * _2360) + _2223;
        _2283 = (((((_2340 * _2113) + _458) * cbLight._m0[_2291].y) * _2359) * _2360) + _2224;
        _2285 = (((((_2340 * _2114) + _459) * cbLight._m0[_2291].z) * _2359) * _2360) + _2225;
    }
    float _2391;
    float _2393;
    float _2395;
    if (_1998)
    {
        _2391 = _2281;
        _2393 = _2283;
        _2395 = _2285;
    }
    else
    {
        uint _2402 = _1812 + 3u;
        uint _2406 = _1812 + 11u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _290) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _369;
        float _2423 = cbLight._m0[_2402].y + _370;
        float _2424 = cbLight._m0[_2402].z + _371;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2402].xyz));
        float _4321 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2436 = dot(vec3(_286, _287, _288), vec3(_2429, _2430, _2431));
        float _4332 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4343 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2089 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2462) + _2421) * _2435))) * _2435;
        float _4354 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2391 = (((((_2455 * _2111) + _456) * cbLight._m0[_2406].x) * _2474) * _2475) + _2281;
        _2393 = (((((_2455 * _2113) + _458) * cbLight._m0[_2406].y) * _2474) * _2475) + _2283;
        _2395 = (((((_2455 * _2114) + _459) * cbLight._m0[_2406].z) * _2474) * _2475) + _2285;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1810.y == 0u)
    {
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2497)));
        float _2518 = (log2(_1588 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
        }
        else
        {
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            uint _2770 = 0u;
            uint _2779;
            bool _2780;
            for (;;)
            {
                _2779 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                _2780 = _2779 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2780)
                {
                    frontier_phi_73_pred = _2769;
                    frontier_phi_73_pred_1 = _2768;
                    frontier_phi_73_pred_2 = _2767;
                    frontier_phi_73_pred_3 = _2766;
                    frontier_phi_73_pred_4 = _2765;
                    frontier_phi_73_pred_5 = _2764;
                }
                else
                {
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    uint _2915;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2779;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2919 = uint(findLSB(_2915)) + (_2770 << 5u);
                        uint _2916 = (_2915 + 4294967295u) & _2915;
                        uint _2921 = _2919 * 48u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2941 = (_2919 * 48u) + 4u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2960 = (_2919 * 48u) + 8u;
                        vec3 _2971 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x));
                        float _2975 = _2935.x - _1586;
                        float _2976 = _2935.y - _1587;
                        float _2977 = _2935.z - _1588;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_411, _414, _417), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2935.w);
                        float _4380 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _2992 = sqrt(_2978) * _2954.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2985) + _2996;
                        float _3002 = _2992 * _2992;
                        float _3006 = ((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2991) / ((_3002 * 0.699999988079071044921875) + 1.0);
                        float _3010 = (-0.0) - _1586;
                        float _3011 = (-0.0) - _1587;
                        float _3012 = (-0.0) - _1588;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3026 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _487;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3017 + _2982;
                        float _3038 = _3018 + _2983;
                        float _3039 = _3019 + _2984;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_411, _414, _417), vec3(_3017, _3018, _3019));
                        float _4396 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3051 = dot(vec3(_411, _414, _417), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4407 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2995 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2985) + _3060;
                        float _4418 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4429 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3058 * _3058) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2839 = (_3006 * _2954.x) + _2912;
                        _2840 = (_3006 * _2954.y) + _2913;
                        _2841 = (_3006 * _2954.z) + _2914;
                        _2836 = (_3086 * _2971.x) + _2909;
                        _2837 = (_3086 * _2971.y) + _2910;
                        _2838 = (_3086 * _2971.z) + _2911;
                        if (_2916 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2916;
                        }
                    }
                    frontier_phi_73_pred = _2841;
                    frontier_phi_73_pred_1 = _2840;
                    frontier_phi_73_pred_2 = _2839;
                    frontier_phi_73_pred_3 = _2838;
                    frontier_phi_73_pred_4 = _2837;
                    frontier_phi_73_pred_5 = _2836;
                }
                _2623 = frontier_phi_73_pred;
                _2621 = frontier_phi_73_pred_1;
                _2619 = frontier_phi_73_pred_2;
                _2617 = frontier_phi_73_pred_3;
                _2615 = frontier_phi_73_pred_4;
                _2613 = frontier_phi_73_pred_5;
                uint _2771 = _2770 + 1u;
                if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2764 = _2613;
                    _2765 = _2615;
                    _2766 = _2617;
                    _2767 = _2619;
                    _2768 = _2621;
                    _2769 = _2623;
                    _2770 = _2771;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
        }
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.z;
        uint _2629 = (_2627 >> 8u) & 15u;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((4294967295u << _2629) & _2528) == 0u)
        {
            _2732 = _2612;
            _2734 = _2614;
            _2736 = _2616;
            _2738 = _2618;
            _2740 = _2620;
            _2742 = _2622;
        }
        else
        {
            float _2757 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
            float _2758 = _2757 * _1586;
            float _2759 = _2757 * _1587;
            float _2760 = _2757 * _1588;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2629 < ((_2627 >> 12u) & 15u))
            {
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2892 = _2612;
                float _2893 = _2614;
                float _2894 = _2616;
                float _2895 = _2618;
                float _2896 = _2620;
                float _2897 = _2622;
                uint _2898 = _2629;
                uint _2907;
                bool _2908;
                for (;;)
                {
                    _2907 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                    _2908 = _2907 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2908)
                    {
                        frontier_phi_84_pred = _2896;
                        frontier_phi_84_pred_1 = _2895;
                        frontier_phi_84_pred_2 = _2894;
                        frontier_phi_84_pred_3 = _2893;
                        frontier_phi_84_pred_4 = _2892;
                        frontier_phi_84_pred_5 = _2897;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3113 = _2892;
                        float _3114 = _2893;
                        float _3115 = _2894;
                        float _3116 = _2895;
                        float _3117 = _2896;
                        float _3118 = _2897;
                        uint _3119 = _2907;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3189;
                        vec4 _3205;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3130 = ((_2898 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3176 = (_3130 * 40u) + 16u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3192 = (_3130 * 40u) + 20u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3208 = (_3130 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3130 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_1588, _3240.z, fma(_1587, _3240.y, _3240.x * _1586)) + _3240.w;
                            _3253 = !((fma(_1588, _3221.z, fma(_1587, _3221.y, _3221.x * _1586)) + _3221.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3145.x - _1586;
                                float _3281 = _3145.y - _1587;
                                float _3282 = _3145.z - _1588;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3146 * _3146));
                                float _4440 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3298 = sqrt(_3283) * _3161.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_411, _414, _417))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_1588, _3189.z, fma(_1587, _3189.y, _3189.x * _1586)) + _3189.w) / _3252;
                                float _3312 = (fma(_1588, _3205.z, fma(_1587, _3205.y, _3205.x * _1586)) + _3205.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4456 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _487;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2758;
                                float _3342 = _3288 - _2759;
                                float _3343 = _3289 - _2760;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2758, (-0.0) - _2759, (-0.0) - _2760));
                                float _4467 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3355 = dot(vec3(_411, _414, _417), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4478 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_411, _414, _417), vec3(_3287, _3288, _3289))) + _3364;
                                float _4489 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4500 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3318 * _3161.y;
                                frontier_phi_90_pred_1 = _3318 * _3161.x;
                                frontier_phi_90_pred_2 = _3392 * _3173.z;
                                frontier_phi_90_pred_3 = _3392 * _3173.y;
                                frontier_phi_90_pred_4 = _3392 * _3173.x;
                                frontier_phi_90_pred_5 = _3318 * _3161.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_90_pred;
                            _3399 = frontier_phi_90_pred_1;
                            _3398 = frontier_phi_90_pred_2;
                            _3397 = frontier_phi_90_pred_3;
                            _3396 = frontier_phi_90_pred_4;
                            _3401 = frontier_phi_90_pred_5;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            _3105 = _3401 + _3118;
                            _3100 = _3396 + _3113;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3104;
                        frontier_phi_84_pred_1 = _3103;
                        frontier_phi_84_pred_2 = _3102;
                        frontier_phi_84_pred_3 = _3101;
                        frontier_phi_84_pred_4 = _3100;
                        frontier_phi_84_pred_5 = _3105;
                    }
                    _2741 = frontier_phi_84_pred;
                    _2739 = frontier_phi_84_pred_1;
                    _2737 = frontier_phi_84_pred_2;
                    _2735 = frontier_phi_84_pred_3;
                    _2733 = frontier_phi_84_pred_4;
                    _2743 = frontier_phi_84_pred_5;
                    uint _2899 = _2898 + 1u;
                    if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2892 = _2733;
                        _2893 = _2735;
                        _2894 = _2737;
                        _2895 = _2739;
                        _2896 = _2741;
                        _2897 = _2743;
                        _2898 = _2899;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2743;
                frontier_phi_65_66_ladder_1 = _2739;
                frontier_phi_65_66_ladder_2 = _2741;
                frontier_phi_65_66_ladder_3 = _2735;
                frontier_phi_65_66_ladder_4 = _2733;
                frontier_phi_65_66_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_65_66_ladder = _2622;
                frontier_phi_65_66_ladder_1 = _2618;
                frontier_phi_65_66_ladder_2 = _2620;
                frontier_phi_65_66_ladder_3 = _2614;
                frontier_phi_65_66_ladder_4 = _2612;
                frontier_phi_65_66_ladder_5 = _2616;
            }
            _2732 = frontier_phi_65_66_ladder_4;
            _2734 = frontier_phi_65_66_ladder_3;
            _2736 = frontier_phi_65_66_ladder_5;
            _2738 = frontier_phi_65_66_ladder_1;
            _2740 = frontier_phi_65_66_ladder_2;
            _2742 = frontier_phi_65_66_ladder;
        }
        float _2747 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2540 = (_2747 * _2738) + _2053;
        _2542 = (_2747 * _2740) + _2055;
        _2544 = (_2747 * _2742) + _2057;
        _2546 = ((_2732 * _456) * _2747) + _2391;
        _2548 = ((_2734 * _458) * _2747) + _2393;
        _2550 = ((_2736 * _459) * _2747) + _2395;
    }
    else
    {
        _2540 = _2053;
        _2542 = _2055;
        _2544 = _2057;
        _2546 = _2391;
        _2548 = _2393;
        _2550 = _2395;
    }
    float _4516 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4527 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4538 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4549 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _2568 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2540 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _471))) + ((_2546 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2542 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _471))) + ((_2548 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2544 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _471))) + ((_2550 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2571 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2578 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)));
    float _2583 = _390 / cbSceneParam._m0[86u].x;
    float _2584 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2637 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2638 = _2637 / _310;
        float _2649 = _2638 * _362;
        float _2650 = _363 * _2638;
        float _2651 = (-0.0) - _2650;
        float _2652 = _2638 * _364;
        float _2654 = (cbSceneParam._m0[77u].w * _2651) / _2637;
        float _2655 = _2654 + cbSceneParam._m0[79u].w;
        float _2656 = cbSceneParam._m0[79u].w - _2650;
        float _2662 = sqrt(((_2649 * _2649) + (_2650 * _2650)) + (_2652 * _2652));
        float _2665 = (1.0 - (cbSceneParam._m0[77u].w / _2637)) * _2662;
        float _2670 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2672 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2651 - _2654) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2655 > 0.0) ? exp2(_2670 * _2655) : (2.0 - exp2(_2672 * _2655))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2665;
        }
        else
        {
            float _2793 = 1.0 / cbSceneParam._m0[80u].x;
            float _2794 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : max(_2655, _2656));
            float _2795 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : min(_2655, _2656));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            _2849 = ((abs(_2662 / _2651) * cbSceneParam._m0[80u].y) * ((((_2804 - _2805) * 2.0) - ((exp2(_2670 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)))) - exp2(_2670 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))))) * _2793)) - ((exp2(_2672 * _2804) - exp2(_2672 * _2805)) * _2793))) + (_2665 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2603);
        _2674 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2676 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2678 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2680 = _2860 * _2603;
    }
    else
    {
        _2674 = _2600;
        _2676 = _2601;
        _2678 = _2602;
        _2680 = _2603;
    }
    bool _2887;
    vec4 _2690;
    vec4 _2712;
    float _2714;
    float _2718;
    float _2719;
    float _2720;
    float _2721;
    bool _2731;
    for (;;)
    {
        _2690 = cbMatDynParam._m0[0u];
        float _2692 = roundEven(_2690.y);
        bool _2693 = _2692 == 3.0;
        float _2694 = log2(_2680);
        float _2701 = exp2(_2694 * cbSceneParam._m0[78u].x) * _2571;
        float _2702 = exp2(_2694 * cbSceneParam._m0[78u].y) * _2572;
        float _2703 = exp2(_2694 * cbSceneParam._m0[78u].z) * _2573;
        float _2710 = _378 + (-0.5);
        _2712 = cbMtdParam._m0[1u];
        _2714 = _2712.y * _2710;
        float _2717 = (_2692 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2718 = _2717 * (_2693 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2674)));
        _2719 = _2717 * (_2693 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2676)));
        _2720 = _2717 * (_2693 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2678)));
        _2721 = _2710 * 0.999000012874603271484375;
        _2731 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2731)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2721) < 0.5)
            {
                _2887 = true;
                break;
            }
        }
        uint _2828 = _432 + uint(_2690.w);
        if ((cbInstanceData._m0[_2828].w < 1.0) && ((cbInstanceData._m0[_2828].w + _2721) < 0.5))
        {
            _2887 = true;
            break;
        }
        if ((_2714 + _238) < _2712.x)
        {
            _2887 = true;
            break;
        }
        _2887 = false;
        break;
    }
    float _3091;
    if (_2887)
    {
        discard_state = true;
        _3091 = 0.0;
    }
    else
    {
        _3091 = _2578;
    }
    SV_Target.x = _2718;
    SV_Target.y = _2719;
    SV_Target.z = _2720;
    SV_Target.w = _3091;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2578;
    discard_exit();
}


