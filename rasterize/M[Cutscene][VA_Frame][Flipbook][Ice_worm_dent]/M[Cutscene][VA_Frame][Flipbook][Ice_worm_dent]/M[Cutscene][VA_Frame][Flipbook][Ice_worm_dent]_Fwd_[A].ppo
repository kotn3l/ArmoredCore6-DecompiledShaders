#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1495;
float _3912;
float _3913;
float _3914;
float _3915;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = cbMtdParam._m0[18u].z + TEXCOORD.x;
    float _263 = cbMtdParam._m0[18u].w + TEXCOORD.y;
    vec4 _276 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _262) + cbTextureTilingScale._m0[0u].z, (_263 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].y;
    float _283 = _276.y * cbMtdParam._m0[10u].z;
    float _284 = _276.z * cbMtdParam._m0[10u].w;
    float _296 = cbMtdParam._m0[21u].x + TEXCOORD.x;
    float _297 = cbMtdParam._m0[21u].y + TEXCOORD.y;
    vec4 _310 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (_297 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    uvec4 _322 = floatBitsToUint(cbMtdParam._m0[9u]);
    float _348 = exp2(log2(cbMtdParam._m0[15u].z * texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) * cbMtdParam._m0[15u].w);
    float _3924 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _376 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x * TEXCOORD_6.y) + TEXCOORD_6.y) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].z);
    float _3935 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _378 = (_322.w != 0u) ? (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) : (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[13u].y) - _282)) + _282;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[13u].z) - _283)) + _283;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[13u].w) - _284)) + _284;
    float _399 = cbMtdParam._m0[20u].z + TEXCOORD.x;
    float _400 = cbMtdParam._m0[20u].w + TEXCOORD.y;
    vec4 _413 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * _399) + cbTextureTilingScale._m0[11u].z, (_400 * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _451 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x * TEXCOORD_6.z) + TEXCOORD_6.z) * cbMtdParam._m0[16u].x) * cbMtdParam._m0[16u].y);
    float _3946 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    vec4 _469 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _471 = _469.x;
    float _480 = exp2(log2(((_322.z != 0u) ? (1.0 - _471) : _471) * cbMtdParam._m0[17u].w) * cbMtdParam._m0[18u].x);
    float _3957 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _488 = cbMtdParam._m0[19u].y * cbMtdParam._m0[19u].x;
    float _491 = (_488 + (-1.0)) * cbMtdParam._m0[17u].x;
    bool _493 = _322.y != 0u;
    float _505 = (cbMtdParam._m0[20u].x + cbMtdParam._m0[17u].y) + ((TEXCOORD.z - cbMtdParam._m0[20u].x) * cbMtdParam._m0[19u].z);
    float _507 = (cbMtdParam._m0[20u].y + cbMtdParam._m0[16u].w) + ((TEXCOORD.w - cbMtdParam._m0[20u].y) * cbMtdParam._m0[19u].w);
    float _3968 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3979 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    uint _513 = uint(int(floor(_491)));
    uint _515 = _513 + 1u;
    uint _516 = uint(int(_488));
    uint _517 = _516 * 3u;
    uint _518 = _513 - _517 * (_513 / _517);
    uint _519 = _515 - _517 * (_515 / _517);
    float _522 = float(int(_518 - _516 * (_518 / _516)));
    float _526 = float(int(_519 - _516 * (_519 / _516)));
    float _530 = 1.0 / cbMtdParam._m0[19u].x;
    float _531 = 1.0 / cbMtdParam._m0[19u].y;
    float _532 = fract(_493 ? _505 : (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))));
    float _533 = fract(_493 ? _507 : (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    vec4 _560 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_532 + (_522 - cbMtdParam._m0[19u].x * trunc(_522 / cbMtdParam._m0[19u].x))) * _530) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_533 + floor(_522 / cbMtdParam._m0[19u].x)) * _531) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w));
    float _562 = _560.x;
    float _565 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_532 + (_526 - cbMtdParam._m0[19u].x * trunc(_526 / cbMtdParam._m0[19u].x))) * _530) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_533 + floor(_526 / cbMtdParam._m0[19u].x)) * _531) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w)).x - _562) * fract(_491)) + _562;
    float _571 = exp2(log2(((_565 * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) + _565) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _3990 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = (floatBitsToUint(cbMtdParam._m0[10u]).x != 0u) ? (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) : (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)));
    float _580 = (_573 * ((_413.x * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _581 = (_573 * ((_413.y * cbMtdParam._m0[12u].z) - _386)) + _386;
    float _582 = (_573 * ((_413.z * cbMtdParam._m0[12u].w) - _387)) + _387;
    vec4 _592 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _594 = _592.x;
    bool _600 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _617 = ((_600 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _594)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _594))) - POSITION_1.w) / cbMtdParam._m0[16u].z;
    float _4001 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _638 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * _262) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _263) + cbTextureTilingScale._m0[8u].w)).x + cbMtdParam._m0[14u].y;
    float _659 = (((cbMtdParam._m0[18u].y - _638) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w)).x) * _378) + _638;
    float _680 = (((cbMtdParam._m0[17u].z - _659) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * _399) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _400) + cbTextureTilingScale._m0[12u].w)).x) * _573) + _659;
    vec4 _692 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _262) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _695 = _692.y;
    float _696 = _692.z;
    vec4 _708 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    float _719 = ((_708.x - _694) * _378) + _694;
    float _720 = ((_708.y - _695) * _378) + _695;
    float _721 = ((_708.z - _696) * _378) + _696;
    vec4 _733 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * _399) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _400) + cbTextureTilingScale._m0[13u].w));
    float _746 = ((_733.z - _721) * _573) + _721;
    float _750 = ((((_733.x - _719) * _573) + _719) * 2.0) + (-1.0);
    float _751 = ((((_733.y - _720) * _573) + _720) * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _4023 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _757 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    bool _762 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _781 = fma(_757, _239 * NORMAL.x, fma(_751, _246 * TANGENT.x, (_232 * _225) * _750));
    float _784 = fma(_757, _239 * NORMAL.y, fma(_751, _246 * TANGENT.y, (_232 * _226) * _750));
    float _787 = fma(_757, _239 * NORMAL.z, fma(_751, _246 * TANGENT.z, (_232 * _227) * _750));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _4034 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _795 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _796 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _797 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _798 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _799 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _800 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _805 = _600 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1174 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1180 = (cbMatDynParam._m0[5u].x * _1174) + cbMatDynParam._m0[5u].y;
        float _4100 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1185 = (cbMatDynParam._m0[5u].z * _1174) + cbMatDynParam._m0[5u].w;
        float _4111 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) - _1181)) + _1181) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _884 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _886 = _884.w;
    float _904 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _907 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _910 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    vec4 _912 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _914 = _912.x;
    float _926 = (((_912.y - _796) + (_912.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    vec4 _927 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _943 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_914 * _914)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _927.z;
    float _951 = (((cbMatDynParam._m0[15u].x - _800) * cbMatDynParam._m0[15u].w) * _943) + _800;
    float _959 = ((_943 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _926)) + _926;
    uint _983 = uint(roundEven(NORMAL.w)) * 13u;
    uint _984 = _983 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * _797) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * _798) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * _799) * cbInstanceData._m0[_985].z;
    float _4122 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    vec4 _997 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _1002 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _1013 = (((_1002.x - _951) + (_1002.w * _951)) * cbMtdParam._m0[3u].x) + _951;
    float _1026 = (cbMtdParam._m0[3u].x * (((_994 * _886) - _994) + _997.x)) + _994;
    float _1027 = (cbMtdParam._m0[3u].x * (((_995 * _886) - _995) + _997.y)) + _995;
    float _1028 = (cbMtdParam._m0[3u].x * (((_996 * _886) - _996) + _997.z)) + _996;
    float _1042 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_951 * (_797 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_951 * (_798 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_951 * (_799 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _1046 = _1042 * cbMatDynParam._m0[13u].w;
    float _1056 = (_1046 * (cbMatDynParam._m0[13u].x - _1026)) + _1026;
    float _1057 = (_1046 * (cbMatDynParam._m0[13u].y - _1027)) + _1027;
    float _1058 = (_1046 * (cbMatDynParam._m0[13u].z - _1028)) + _1028;
    float _1066 = ((_1042 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1013)) + _1013;
    float _1067 = 1.0 - _1066;
    float _1068 = _1067 * _1056;
    float _1069 = _1067 * _1057;
    float _1070 = _1067 * _1058;
    float _1074 = (_1056 + (-0.039999999105930328369140625)) * _1066;
    float _1075 = (_1057 + (-0.039999999105930328369140625)) * _1066;
    float _1076 = (_1058 + (-0.039999999105930328369140625)) * _1066;
    float _1077 = _1074 + 0.039999999105930328369140625;
    float _1078 = _1075 + 0.039999999105930328369140625;
    float _1079 = _1076 + 0.039999999105930328369140625;
    vec4 _1088 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _1091 = _1088.x * TEXCOORD_6.x;
    float _1092 = dot(vec3(_792, _793, _794), vec3(_862, _863, _864));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _792) - _862;
    float _1100 = (_1095 * _793) - _863;
    float _1101 = (_1095 * _794) - _864;
    float _1105 = abs(dot(vec3(_862, _863, _864), vec3(_792, _793, _794)));
    float _4155 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_959);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1126 = (1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1127 = _1120 * _1107;
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1494;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1219 = fma(_1163, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155));
        float _1223 = fma(_1163, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155));
        float _1227 = fma(_1163, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155));
        float _1252 = _1155 + _792;
        float _1253 = _1159 + _793;
        float _1254 = _1163 + _794;
        float _1264 = fma(_1254, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1252)) - _1219;
        float _1265 = fma(_1254, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1252)) - _1223;
        float _1266 = fma(_1254, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1252)) - _1227;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1219 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1223 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[34u].z) + ((((((_1227 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1322 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1288.x + (-0.5));
        float _1324 = _1322 * (_1288.y + (-0.5));
        float _1325 = _1322 * (_1288.z + (-0.5));
        float _1332 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1295.x + (-0.5));
        float _1334 = _1332 * (_1295.y + (-0.5));
        float _1335 = _1332 * (_1295.z + (-0.5));
        float _1342 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1302.x + (-0.5));
        float _1344 = _1342 * (_1302.y + (-0.5));
        float _1345 = _1342 * (_1302.z + (-0.5));
        float _1352 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1309.x + (-0.5));
        float _1354 = _1352 * (_1309.y + (-0.5));
        float _1355 = _1352 * (_1309.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1376 = (dot(vec3(_792, _793, _794), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1386 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4203 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1388 + 1.0))) + _1393) * _1356;
        float _1403 = _1324 * 0.5;
        float _1404 = _1334 * 0.5;
        float _1405 = _1344 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_792, _793, _794), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4236 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1430 + 1.0))) + _1435) * _1357;
        float _1445 = _1325 * 0.5;
        float _1446 = _1335 * 0.5;
        float _1447 = _1345 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_792, _793, _794), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4269 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1472 + 1.0))) + _1477) * _1358;
        _1494 = _1325;
        _1496 = _1324;
        _1497 = _1323;
        _1498 = _1335;
        _1499 = _1334;
        _1500 = _1333;
        _1501 = _1345;
        _1502 = _1344;
        _1503 = _1343;
        _1504 = _1358;
        _1505 = _1357;
        _1506 = _1356;
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1495;
        _1496 = _1495;
        _1497 = _1495;
        _1498 = _1495;
        _1499 = _1495;
        _1500 = _1495;
        _1501 = _1495;
        _1502 = _1495;
        _1503 = _1495;
        _1504 = _1495;
        _1505 = _1495;
        _1506 = _1495;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1163, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155));
        float _1542 = fma(_1163, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155));
        float _1546 = fma(_1163, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155));
        float _1569 = _1155 + _792;
        float _1570 = _1159 + _793;
        float _1571 = _1163 + _794;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_792, _793, _794), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4332 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_792, _793, _794), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4365 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_792, _793, _794), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4398 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1495;
        _1808 = _1495;
        _1809 = _1495;
        _1810 = _1495;
        _1811 = _1495;
        _1812 = _1495;
        _1813 = _1495;
        _1814 = _1495;
        _1815 = _1495;
        _1816 = _1495;
        _1817 = _1495;
        _1818 = _1495;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1507)) + _1507;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1508)) + _1508;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1509)) + _1509;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1099 * 0.5;
    float _1876 = _1100 * 0.5;
    float _1877 = _1101 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1915;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1494, _1498, _1501, _1504));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1926;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1917 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1930 = (_1926 * cbModelParam._m0[1u].x) + (_1915 * (1.0 - cbModelParam._m0[1u].x));
    float _1940 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _959);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1940 : min(cbModelParam._m0[25u].z, _1940));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1988 = fma(_1163, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155)) + cbModelParam._m0[13u].w;
        float _1992 = fma(_1163, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155)) + cbModelParam._m0[14u].w;
        float _1996 = fma(_1163, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155)) + cbModelParam._m0[15u].w;
        float _1999 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _2002 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _2005 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _2033;
        if (_1999 > 0.0)
        {
            _2033 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2033 = frontier_phi_17_15_ladder;
        }
        float _2235;
        if (_2002 > 0.0)
        {
            _2235 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2235 = frontier_phi_26_22_ladder;
        }
        float _2489;
        if (_2005 > 0.0)
        {
            _2489 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2489 = frontier_phi_38_33_ladder;
        }
        float _2491 = isnan(_2235) ? _2033 : (isnan(_2033) ? _2235 : min(_2033, _2235));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1999) + _1988;
        float _2497 = (_2492 * _2002) + _1992;
        float _2498 = (_2492 * _2005) + _1996;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2499;
        float _2503 = _2499 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 > _2503) || ((_2497 < _2501) || ((_2496 < _2501) || (_2496 > _2503))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2498, cbModelParam._m0[9u].z, fma(_2497, cbModelParam._m0[9u].y, _2496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2498, cbModelParam._m0[10u].z, fma(_2497, cbModelParam._m0[10u].y, _2496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2498, cbModelParam._m0[11u].z, fma(_2497, cbModelParam._m0[11u].y, _2496 * cbModelParam._m0[11u].x))), _1941);
            frontier_phi_16_38_ladder = _2626.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2626.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2626.x * cbModelParam._m0[1u].y;
        }
        _2021 = frontier_phi_16_38_ladder_2;
        _2023 = frontier_phi_16_38_ladder_1;
        _2025 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1941);
        _2021 = _2009.x * cbModelParam._m0[1u].y;
        _2023 = _2009.y * cbModelParam._m0[1u].y;
        _2025 = _2009.z * cbModelParam._m0[1u].y;
    }
    float _2029 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _959);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2029 : min(cbModelParam._m0[25u].w, _2029));
    float _2119;
    float _2121;
    float _2123;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2083 = fma(_1163, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155)) + cbModelParam._m0[21u].w;
        float _2087 = fma(_1163, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155)) + cbModelParam._m0[22u].w;
        float _2091 = fma(_1163, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155)) + cbModelParam._m0[23u].w;
        float _2094 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2097 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2100 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2240;
        if (_2094 > 0.0)
        {
            _2240 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2240 = frontier_phi_28_24_ladder;
        }
        float _2516;
        if (_2097 > 0.0)
        {
            _2516 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2516 = frontier_phi_40_35_ladder;
        }
        float _2729;
        if (_2100 > 0.0)
        {
            _2729 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2729 = frontier_phi_49_46_ladder;
        }
        float _2731 = isnan(_2516) ? _2240 : (isnan(_2240) ? _2516 : min(_2240, _2516));
        float _2732 = isnan(_2729) ? _2731 : (isnan(_2731) ? _2729 : min(_2731, _2729));
        float _2736 = (_2732 * _2094) + _2083;
        float _2737 = (_2732 * _2097) + _2087;
        float _2738 = (_2732 * _2100) + _2091;
        float _2739 = _2732 * 9.9999997473787516355514526367188e-05;
        float _2740 = (-1.0) - _2739;
        float _2742 = _2739 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2738 > _2742) || ((_2738 < _2740) || ((_2737 > _2742) || ((_2737 < _2740) || ((_2736 < _2740) || (_2736 > _2742))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2738, cbModelParam._m0[17u].z, fma(_2737, cbModelParam._m0[17u].y, _2736 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2738, cbModelParam._m0[18u].z, fma(_2737, cbModelParam._m0[18u].y, _2736 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2738, cbModelParam._m0[19u].z, fma(_2737, cbModelParam._m0[19u].y, _2736 * cbModelParam._m0[19u].x))), _2030);
            frontier_phi_25_49_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2119 = frontier_phi_25_49_ladder_2;
        _2121 = frontier_phi_25_49_ladder_1;
        _2123 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _2030);
        _2119 = _2103.x * cbModelParam._m0[1u].z;
        _2121 = _2103.y * cbModelParam._m0[1u].z;
        _2123 = _2103.z * cbModelParam._m0[1u].z;
    }
    float _2136 = (((_1126 * _1077) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2119 - _2021)) + _2021);
    float _2138 = (((_1126 * _1078) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2121 - _2023)) + _2023);
    float _2140 = (((_1126 * _1079) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2123 - _2025)) + _2025);
    float _2143 = fma(_2140, cbSceneParam._m0[89u].z, fma(_2138, cbSceneParam._m0[89u].y, _2136 * cbSceneParam._m0[89u].x));
    float _2146 = fma(_2140, cbSceneParam._m0[90u].z, fma(_2138, cbSceneParam._m0[90u].y, _2136 * cbSceneParam._m0[90u].x));
    float _2149 = fma(_2140, cbSceneParam._m0[91u].z, fma(_2138, cbSceneParam._m0[91u].y, _2136 * cbSceneParam._m0[91u].x));
    uvec4 _2159 = floatBitsToUint(cbInstanceData._m0[_983 + 5u]);
    uint _2161 = _2159.x * 14u;
    uint _2162 = _2161 + 13u;
    float _2169 = _1091 + (-1.0);
    float _2174 = (cbLight._m0[_2162].x * _2169) + 1.0;
    float _2175 = (cbLight._m0[_2162].y * _2169) + 1.0;
    float _2176 = (cbLight._m0[_2162].z * _2169) + 1.0;
    float _2177 = (cbLight._m0[_2162].w * _2169) + 1.0;
    uint _2178 = _2161 + 5u;
    float _2184 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2188 = _2161 + 4u;
    float _2194 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2198 = _2161 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_792, _793, _794));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_792, _793, _794));
    float _4534 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4545 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2178].x * _2184) * _2219) + ((cbLight._m0[_2188].x * _2194) * _2217);
    float _2227 = ((_2184 * cbLight._m0[_2178].y) * _2219) + ((_2194 * cbLight._m0[_2188].y) * _2217);
    float _2228 = ((_2184 * cbLight._m0[_2178].z) * _2219) + ((_2194 * cbLight._m0[_2188].z) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2161 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2234)
    {
        _2245 = _2226;
        _2247 = _2227;
        _2249 = _2228;
    }
    else
    {
        uint _2253 = _2161 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2161 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4556 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2272 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2226;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2227;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2228;
    }
    bool _2252 = _2232.y == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2252)
    {
        _2290 = _2245;
        _2292 = _2247;
        _2294 = _2249;
    }
    else
    {
        uint _2460 = _2161 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2161 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4572 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2479 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2290 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2245;
        _2292 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2247;
        _2294 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2249;
    }
    uint _2297 = _2161 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _959) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2161].x + _862;
    float _2313 = cbLight._m0[_2161].y + _863;
    float _2314 = cbLight._m0[_2161].z + _864;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2161].xyz));
    float _4588 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _4599 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2326 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2327 = dot(vec3(_792, _793, _794), vec3(_2319, _2320, _2321));
    float _4610 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2319, _2320, _2321));
    float _4621 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
    float _2348 = 0.959999978542327880859375 - _1074;
    float _2350 = 0.959999978542327880859375 - _1075;
    float _2351 = 0.959999978542327880859375 - _1076;
    float _2358 = 1.0 - _2311;
    float _2369 = (0.5 / (((_2326 * ((_2325 * _2358) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2358) + _2311) * _2325))) * _2325;
    float _4632 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2382 = _2161 + 9u;
    float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _959) * 0.949999988079071044921875);
    float _2394 = _2393 * _2393;
    float _2395 = cbLight._m0[_2198].x + _862;
    float _2396 = cbLight._m0[_2198].y + _863;
    float _2397 = cbLight._m0[_2198].z + _864;
    float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
    float _2402 = _2401 * _2395;
    float _2403 = _2401 * _2396;
    float _2404 = _2401 * _2397;
    float _2405 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2198].xyz));
    float _4643 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2409 = dot(vec3(_792, _793, _794), vec3(_2402, _2403, _2404));
    float _4654 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2402, _2403, _2404));
    float _4665 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2394 * _2394;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
    float _2435 = 1.0 - _2394;
    float _2445 = (0.5 / (((_2326 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2435) + _2394) * _2408))) * _2408;
    float _4676 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    float _2457 = (((((_2428 * _2348) + _1077) * cbLight._m0[_2382].x) * _2447) * _2184) + (((((_2347 * _2348) + _1077) * cbLight._m0[_2297].x) * _2371) * _2194);
    float _2458 = (((((_2428 * _2350) + _1078) * cbLight._m0[_2382].y) * _2447) * _2184) + (((((_2347 * _2350) + _1078) * cbLight._m0[_2297].y) * _2371) * _2194);
    float _2459 = (((((_2428 * _2351) + _1079) * cbLight._m0[_2382].z) * _2447) * _2184) + (((((_2347 * _2351) + _1079) * cbLight._m0[_2297].z) * _2371) * _2194);
    float _2521;
    float _2523;
    float _2525;
    if (_2234)
    {
        _2521 = _2457;
        _2523 = _2458;
        _2525 = _2459;
    }
    else
    {
        uint _2527 = _2161 + 2u;
        uint _2531 = _2161 + 10u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _959) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _862;
        float _2548 = cbLight._m0[_2527].y + _863;
        float _2549 = cbLight._m0[_2527].z + _864;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2527].xyz));
        float _4687 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2561 = dot(vec3(_792, _793, _794), vec3(_2554, _2555, _2556));
        float _4698 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4709 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2326 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2587) + _2546) * _2560))) * _2560;
        float _4720 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2521 = (((((_2580 * _2348) + _1077) * cbLight._m0[_2531].x) * _2599) * _2600) + _2457;
        _2523 = (((((_2580 * _2350) + _1078) * cbLight._m0[_2531].y) * _2599) * _2600) + _2458;
        _2525 = (((((_2580 * _2351) + _1079) * cbLight._m0[_2531].z) * _2599) * _2600) + _2459;
    }
    float _2635;
    float _2637;
    float _2639;
    if (_2252)
    {
        _2635 = _2521;
        _2637 = _2523;
        _2639 = _2525;
    }
    else
    {
        uint _2646 = _2161 + 3u;
        uint _2650 = _2161 + 11u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _959) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _862;
        float _2667 = cbLight._m0[_2646].y + _863;
        float _2668 = cbLight._m0[_2646].z + _864;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2646].xyz));
        float _4736 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2680 = dot(vec3(_792, _793, _794), vec3(_2673, _2674, _2675));
        float _4747 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4758 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
        float _2706 = 1.0 - _2665;
        float _2716 = (0.5 / (((_2326 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2706) + _2665) * _2679))) * _2679;
        float _4769 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2718 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2719 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2635 = (((((_2699 * _2348) + _1077) * cbLight._m0[_2650].x) * _2718) * _2719) + _2521;
        _2637 = (((((_2699 * _2350) + _1078) * cbLight._m0[_2650].y) * _2718) * _2719) + _2523;
        _2639 = (((((_2699 * _2351) + _1079) * cbLight._m0[_2650].z) * _2718) * _2719) + _2525;
    }
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_2159.y == 0u)
    {
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2794;
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2794;
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2794;
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2810)));
        float _2831 = (log2(_2797 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3150)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _2795;
                        float _3346 = _3305.y - _2796;
                        float _3347 = _3305.z - _2797;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_904, _907, _910), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4795 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _2795;
                        float _3381 = (-0.0) - _2796;
                        float _3382 = (-0.0) - _2797;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3397 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _1107;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_904, _907, _910), vec3(_3387, _3388, _3389));
                        float _4811 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3422 = dot(vec3(_904, _907, _910), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4822 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3365 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3355) + _3431;
                        float _4833 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4844 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3429 * _3429) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3457 * _3341.x) + _3279;
                        _3207 = (_3457 * _3341.y) + _3280;
                        _3208 = (_3457 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_66_pred = _3206;
                    frontier_phi_66_pred_1 = _3211;
                    frontier_phi_66_pred_2 = _3210;
                    frontier_phi_66_pred_3 = _3209;
                    frontier_phi_66_pred_4 = _3208;
                    frontier_phi_66_pred_5 = _3207;
                }
                _2974 = frontier_phi_66_pred;
                _2984 = frontier_phi_66_pred_1;
                _2982 = frontier_phi_66_pred_2;
                _2980 = frontier_phi_66_pred_3;
                _2978 = frontier_phi_66_pred_4;
                _2976 = frontier_phi_66_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2974;
                    _3135 = _2976;
                    _3136 = _2978;
                    _3137 = _2980;
                    _3138 = _2982;
                    _3139 = _2984;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2990) & _2841) == 0u)
        {
            _3102 = _2973;
            _3104 = _2975;
            _3106 = _2977;
            _3108 = _2979;
            _3110 = _2981;
            _3112 = _2983;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
            float _3128 = _3127 * _2795;
            float _3129 = _3127 * _2796;
            float _3130 = _3127 * _2797;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2973;
                float _3263 = _2975;
                float _3264 = _2977;
                float _3265 = _2979;
                float _3266 = _2981;
                float _3267 = _2983;
                uint _3268 = _2990;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3278)
                    {
                        frontier_phi_77_pred = _3267;
                        frontier_phi_77_pred_1 = _3266;
                        frontier_phi_77_pred_2 = _3265;
                        frontier_phi_77_pred_3 = _3264;
                        frontier_phi_77_pred_4 = _3263;
                        frontier_phi_77_pred_5 = _3262;
                    }
                    else
                    {
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        uint _3490 = _3277;
                        uint _3491;
                        vec4 _3516;
                        float _3517;
                        vec4 _3532;
                        vec3 _3544;
                        vec4 _3559;
                        vec4 _3574;
                        float _3621;
                        bool _3622;
                        for (;;)
                        {
                            uint _3501 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3490));
                            _3491 = (_3490 + 4294967295u) & _3490;
                            uint _3503 = _3501 * 40u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3517 = _3516.w;
                            uint _3519 = (_3501 * 40u) + 4u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3501 * 40u) + 8u;
                            _3544 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x));
                            uint _3546 = (_3501 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3501 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3577 = (_3501 * 40u) + 24u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3596 = (_3501 * 40u) + 28u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3621 = fma(_2797, _3609.z, fma(_2796, _3609.y, _3609.x * _2795)) + _3609.w;
                            _3622 = !((fma(_2797, _3590.z, fma(_2796, _3590.y, _3590.x * _2795)) + _3590.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3622)
                            {
                                float _3649 = _3516.x - _2795;
                                float _3650 = _3516.y - _2796;
                                float _3651 = _3516.z - _2797;
                                float _3652 = dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651));
                                float _3655 = inversesqrt(_3652);
                                float _3656 = _3655 * _3649;
                                float _3657 = _3655 * _3650;
                                float _3658 = _3655 * _3651;
                                float _3662 = 1.0 - (_3652 / (_3517 * _3517));
                                float _4855 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3667 = sqrt(_3652) * _3532.w;
                                float _3669 = 1.39999997615814208984375 / (_3667 + 1.39999997615814208984375);
                                float _3670 = _3669 * _3669;
                                float _3673 = ((1.0 - _3670) * dot(vec3(_3656, _3657, _3658), vec3(_904, _907, _910))) + _3670;
                                float _3676 = _3667 * _3667;
                                float _3680 = (fma(_2797, _3559.z, fma(_2796, _3559.y, _3559.x * _2795)) + _3559.w) / _3621;
                                float _3681 = (fma(_2797, _3574.z, fma(_2796, _3574.y, _3574.x * _2795)) + _3574.w) / _3621;
                                float _3685 = 1.0 - dot(vec2(_3680, _3681), vec2(_3680, _3681));
                                float _4871 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3687 = _3686 * (((isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0))) * _3663) / ((_3676 * 0.699999988079071044921875) + 1.0));
                                float _3699 = exp2(log2(1.0 / ((_3676 * 3.5) + 5.0)) * 0.25);
                                float _3700 = 1.0 - _1107;
                                float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                                float _3708 = _3707 * _3707;
                                float _3709 = _3708 * _3708;
                                float _3710 = _3656 - _3128;
                                float _3711 = _3657 - _3129;
                                float _3712 = _3658 - _3130;
                                float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                                float _3720 = dot(vec3(_904, _907, _910), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4882 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3724 = dot(vec3(_904, _907, _910), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                                float _4893 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                                float _3732 = _3669 * _3708;
                                float _3733 = _3732 * _3732;
                                float _3739 = ((1.0 - _3733) * dot(vec3(_904, _907, _910), vec3(_3656, _3657, _3658))) + _3733;
                                float _4904 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3741 = 1.0 - _3708;
                                float _3751 = (0.5 / (((_3740 * ((_3723 * _3741) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3740 * _3741) + _3708) * _3723))) * _3740;
                                float _4915 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3761 = (_3686 * _3663) * (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3731 * _3731) * ((_3676 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3687 * _3532.y;
                                frontier_phi_83_pred_1 = _3687 * _3532.x;
                                frontier_phi_83_pred_2 = _3761 * _3544.z;
                                frontier_phi_83_pred_3 = _3761 * _3544.y;
                                frontier_phi_83_pred_4 = _3761 * _3544.x;
                                frontier_phi_83_pred_5 = _3687 * _3532.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3769 = frontier_phi_83_pred;
                            _3768 = frontier_phi_83_pred_1;
                            _3767 = frontier_phi_83_pred_2;
                            _3766 = frontier_phi_83_pred_3;
                            _3765 = frontier_phi_83_pred_4;
                            _3770 = frontier_phi_83_pred_5;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            _3476 = _3770 + _3489;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            _3473 = _3767 + _3486;
                            if (_3491 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3491;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3476;
                        frontier_phi_77_pred_1 = _3475;
                        frontier_phi_77_pred_2 = _3474;
                        frontier_phi_77_pred_3 = _3473;
                        frontier_phi_77_pred_4 = _3472;
                        frontier_phi_77_pred_5 = _3471;
                    }
                    _3113 = frontier_phi_77_pred;
                    _3111 = frontier_phi_77_pred_1;
                    _3109 = frontier_phi_77_pred_2;
                    _3107 = frontier_phi_77_pred_3;
                    _3105 = frontier_phi_77_pred_4;
                    _3103 = frontier_phi_77_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3107;
                frontier_phi_58_59_ladder_1 = _3113;
                frontier_phi_58_59_ladder_2 = _3111;
                frontier_phi_58_59_ladder_3 = _3109;
                frontier_phi_58_59_ladder_4 = _3105;
                frontier_phi_58_59_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_58_59_ladder = _2977;
                frontier_phi_58_59_ladder_1 = _2983;
                frontier_phi_58_59_ladder_2 = _2981;
                frontier_phi_58_59_ladder_3 = _2979;
                frontier_phi_58_59_ladder_4 = _2975;
                frontier_phi_58_59_ladder_5 = _2973;
            }
            _3102 = frontier_phi_58_59_ladder_5;
            _3104 = frontier_phi_58_59_ladder_4;
            _3106 = frontier_phi_58_59_ladder;
            _3108 = frontier_phi_58_59_ladder_3;
            _3110 = frontier_phi_58_59_ladder_2;
            _3112 = frontier_phi_58_59_ladder_1;
        }
        float _3117 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2854 = (_3117 * _3108) + _2290;
        _2856 = (_3117 * _3110) + _2292;
        _2858 = (_3117 * _3112) + _2294;
        _2860 = ((_3102 * _1077) * _3117) + _2635;
        _2862 = ((_3104 * _1078) * _3117) + _2637;
        _2864 = ((_3106 * _1079) * _3117) + _2639;
    }
    else
    {
        _2854 = _2290;
        _2856 = _2292;
        _2858 = _2294;
        _2860 = _2635;
        _2862 = _2637;
        _2864 = _2639;
    }
    uint _2870 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _2876 = cbInstanceData._m0[_2870].x * (_762 ? cbMtdParam._m0[21u].z : cbMtdParam._m0[11u].y);
    float _2877 = cbInstanceData._m0[_2870].y * (_762 ? cbMtdParam._m0[21u].w : cbMtdParam._m0[11u].z);
    float _2878 = cbInstanceData._m0[_2870].z * (_762 ? cbMtdParam._m0[22u].x : cbMtdParam._m0[11u].w);
    float _4931 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4942 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4953 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4964 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2896 = (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2854 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1091))) + ((_2860 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1930)) * cbPerFrame._m0[3u].x)) + _2876;
    float _2898 = (_2877 + ((_2862 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1930)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2856 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1091)));
    float _2900 = (_2878 + ((_2864 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1930)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2858 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1091)));
    float _2901 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2902 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2903 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2909 = cbMtdParam._m0[2u].x * _2876;
    float _2910 = cbMtdParam._m0[2u].y * _2877;
    float _2911 = cbMtdParam._m0[2u].z * _2878;
    float _4990 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2913 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
    float _2918 = cbInstanceData._m0[_983 + 6u].w * (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)));
    float _2923 = _881 / cbSceneParam._m0[86u].x;
    float _2924 = _882 / cbSceneParam._m0[86u].y;
    vec4 _2938 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2940 = _2938.x;
    float _2941 = _2938.y;
    float _2942 = _2938.z;
    float _2943 = _2938.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2999 = _2998 / _805;
        float _3010 = _2999 * _855;
        float _3011 = _856 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3013 = _2999 * _857;
        float _3015 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3011;
        float _3023 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3012 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3165 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3023 / _3012) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3033 * _3174) - exp2(_3033 * _3175)) * _3163))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2943);
        _3035 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2940;
        _3037 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2941;
        _3039 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2942;
        _3041 = _3230 * _2943;
    }
    else
    {
        _3035 = _2940;
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
    }
    bool _3257;
    vec4 _3051;
    vec4 _3073;
    float _3075;
    float _3079;
    float _3080;
    float _3081;
    float _3084;
    float _3087;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3051 = cbMatDynParam._m0[0u];
        float _3053 = roundEven(_3051.y);
        bool _3054 = _3053 == 3.0;
        float _3055 = log2(_3041);
        float _3059 = exp2(_3055 * cbSceneParam._m0[78u].x);
        float _3060 = exp2(_3055 * cbSceneParam._m0[78u].y);
        float _3061 = exp2(_3055 * cbSceneParam._m0[78u].z);
        float _3062 = _3059 * _2901;
        float _3063 = _3060 * _2902;
        float _3064 = _3061 * _2903;
        float _3071 = _871 + (-0.5);
        _3073 = cbMtdParam._m0[1u];
        _3075 = _3073.y * _3071;
        float _3078 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3079 = _3078 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
        _3080 = _3078 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
        _3081 = _3078 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = ((_2909 * _2913) * _3059) * _3078;
        _3087 = ((_2910 * _2913) * _3060) * _3078;
        _3090 = ((_2911 * _2913) * _3061) * _3078;
        _3091 = _3071 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_983 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _984 + uint(_3051.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3075 + 1.0) < _3073.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3462;
    if (_3257)
    {
        discard_state = true;
        _3462 = 0.0;
    }
    else
    {
        _3462 = _2918;
    }
    SV_Target.x = _3079;
    SV_Target.y = _3080;
    SV_Target.z = _3081;
    SV_Target.w = _3462;
    SV_Target_1.x = _3084;
    SV_Target_1.y = _3087;
    SV_Target_1.z = _3090;
    SV_Target_1.w = _2918;
    discard_exit();
}


