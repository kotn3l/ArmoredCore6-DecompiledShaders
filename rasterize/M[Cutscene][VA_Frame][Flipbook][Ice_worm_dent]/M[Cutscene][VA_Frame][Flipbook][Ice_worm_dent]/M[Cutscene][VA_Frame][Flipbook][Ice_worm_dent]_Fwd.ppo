#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1450;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = cbMtdParam._m0[18u].z + TEXCOORD.x;
    float _259 = cbMtdParam._m0[18u].w + TEXCOORD.y;
    vec4 _272 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _258) + cbTextureTilingScale._m0[0u].z, (_259 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].y;
    float _279 = _272.y * cbMtdParam._m0[10u].z;
    float _280 = _272.z * cbMtdParam._m0[10u].w;
    float _292 = cbMtdParam._m0[21u].x + TEXCOORD.x;
    float _293 = cbMtdParam._m0[21u].y + TEXCOORD.y;
    vec4 _306 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (_293 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    uvec4 _318 = floatBitsToUint(cbMtdParam._m0[9u]);
    float _344 = exp2(log2(cbMtdParam._m0[15u].z * texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) * cbMtdParam._m0[15u].w);
    float _3813 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _372 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x * TEXCOORD_6.y) + TEXCOORD_6.y) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].z);
    float _3824 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = (_318.w != 0u) ? (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) : (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[13u].y) - _278)) + _278;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[13u].z) - _279)) + _279;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[13u].w) - _280)) + _280;
    float _395 = cbMtdParam._m0[20u].z + TEXCOORD.x;
    float _396 = cbMtdParam._m0[20u].w + TEXCOORD.y;
    vec4 _409 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * _395) + cbTextureTilingScale._m0[11u].z, (_396 * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _447 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x * TEXCOORD_6.z) + TEXCOORD_6.z) * cbMtdParam._m0[16u].x) * cbMtdParam._m0[16u].y);
    float _3835 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    vec4 _465 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _467 = _465.x;
    float _476 = exp2(log2(((_318.z != 0u) ? (1.0 - _467) : _467) * cbMtdParam._m0[17u].w) * cbMtdParam._m0[18u].x);
    float _3846 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _484 = cbMtdParam._m0[19u].y * cbMtdParam._m0[19u].x;
    float _487 = (_484 + (-1.0)) * cbMtdParam._m0[17u].x;
    bool _489 = _318.y != 0u;
    float _501 = (cbMtdParam._m0[20u].x + cbMtdParam._m0[17u].y) + ((TEXCOORD.z - cbMtdParam._m0[20u].x) * cbMtdParam._m0[19u].z);
    float _503 = (cbMtdParam._m0[20u].y + cbMtdParam._m0[16u].w) + ((TEXCOORD.w - cbMtdParam._m0[20u].y) * cbMtdParam._m0[19u].w);
    float _3857 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3868 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    uint _509 = uint(int(floor(_487)));
    uint _511 = _509 + 1u;
    uint _512 = uint(int(_484));
    uint _513 = _512 * 3u;
    uint _514 = _509 - _513 * (_509 / _513);
    uint _515 = _511 - _513 * (_511 / _513);
    float _518 = float(int(_514 - _512 * (_514 / _512)));
    float _522 = float(int(_515 - _512 * (_515 / _512)));
    float _526 = 1.0 / cbMtdParam._m0[19u].x;
    float _527 = 1.0 / cbMtdParam._m0[19u].y;
    float _528 = fract(_489 ? _501 : (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))));
    float _529 = fract(_489 ? _503 : (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))));
    vec4 _556 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_528 + (_518 - cbMtdParam._m0[19u].x * trunc(_518 / cbMtdParam._m0[19u].x))) * _526) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_529 + floor(_518 / cbMtdParam._m0[19u].x)) * _527) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w));
    float _558 = _556.x;
    float _561 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_528 + (_522 - cbMtdParam._m0[19u].x * trunc(_522 / cbMtdParam._m0[19u].x))) * _526) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_529 + floor(_522 / cbMtdParam._m0[19u].x)) * _527) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w)).x - _558) * fract(_487)) + _558;
    float _567 = exp2(log2(((_561 * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) + _561) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _3879 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _569 = (floatBitsToUint(cbMtdParam._m0[10u]).x != 0u) ? (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) : (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)));
    float _576 = (_569 * ((_409.x * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _577 = (_569 * ((_409.y * cbMtdParam._m0[12u].z) - _382)) + _382;
    float _578 = (_569 * ((_409.z * cbMtdParam._m0[12u].w) - _383)) + _383;
    vec4 _588 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _590 = _588.x;
    bool _596 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _613 = ((_596 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _590)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _590))) - POSITION_1.w) / cbMtdParam._m0[16u].z;
    float _3890 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _634 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * _258) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _259) + cbTextureTilingScale._m0[8u].w)).x + cbMtdParam._m0[14u].y;
    float _655 = (((cbMtdParam._m0[18u].y - _634) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w)).x) * _374) + _634;
    float _676 = (((cbMtdParam._m0[17u].z - _655) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * _395) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _396) + cbTextureTilingScale._m0[12u].w)).x) * _569) + _655;
    vec4 _688 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _258) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _691 = _688.y;
    float _692 = _688.z;
    vec4 _704 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    float _715 = ((_704.x - _690) * _374) + _690;
    float _716 = ((_704.y - _691) * _374) + _691;
    float _717 = ((_704.z - _692) * _374) + _692;
    vec4 _729 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * _395) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _396) + cbTextureTilingScale._m0[13u].w));
    float _742 = ((_729.z - _717) * _569) + _717;
    float _746 = ((((_729.x - _715) * _569) + _715) * 2.0) + (-1.0);
    float _747 = ((((_729.y - _716) * _569) + _716) * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3912 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))));
    bool _758 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _777 = fma(_753, _235 * NORMAL.x, fma(_747, _242 * TANGENT.x, (_228 * _221) * _746));
    float _780 = fma(_753, _235 * NORMAL.y, fma(_747, _242 * TANGENT.y, (_228 * _222) * _746));
    float _783 = fma(_753, _235 * NORMAL.z, fma(_747, _242 * TANGENT.z, (_228 * _223) * _746));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3923 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _791 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _792 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _793 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _794 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _795 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _796 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _801 = _596 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _868 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _870 = _868.w;
    float _888 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _891 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _894 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    vec4 _896 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _898 = _896.x;
    float _910 = (((_896.y - _792) + (_896.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    vec4 _911 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _927 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_898 * _898)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _911.z;
    float _935 = (((cbMatDynParam._m0[15u].x - _796) * cbMatDynParam._m0[15u].w) * _927) + _796;
    float _943 = ((_927 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _910)) + _910;
    uint _967 = uint(roundEven(NORMAL.w)) * 13u;
    uint _968 = _967 + 9u;
    uint _969 = _968 + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * _793) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * _794) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * _795) * cbInstanceData._m0[_969].z;
    float _3989 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    vec4 _981 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _986 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _997 = (((_986.x - _935) + (_986.w * _935)) * cbMtdParam._m0[3u].x) + _935;
    float _1010 = (cbMtdParam._m0[3u].x * (((_978 * _870) - _978) + _981.x)) + _978;
    float _1011 = (cbMtdParam._m0[3u].x * (((_979 * _870) - _979) + _981.y)) + _979;
    float _1012 = (cbMtdParam._m0[3u].x * (((_980 * _870) - _980) + _981.z)) + _980;
    float _1026 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_935 * (_793 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_935 * (_794 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_935 * (_795 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _1030 = _1026 * cbMatDynParam._m0[13u].w;
    float _1040 = (_1030 * (cbMatDynParam._m0[13u].x - _1010)) + _1010;
    float _1041 = (_1030 * (cbMatDynParam._m0[13u].y - _1011)) + _1011;
    float _1042 = (_1030 * (cbMatDynParam._m0[13u].z - _1012)) + _1012;
    float _1050 = ((_1026 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _997)) + _997;
    float _1051 = 1.0 - _1050;
    float _1052 = _1051 * _1040;
    float _1053 = _1051 * _1041;
    float _1054 = _1051 * _1042;
    float _1058 = (_1040 + (-0.039999999105930328369140625)) * _1050;
    float _1059 = (_1041 + (-0.039999999105930328369140625)) * _1050;
    float _1060 = (_1042 + (-0.039999999105930328369140625)) * _1050;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1062 = _1059 + 0.039999999105930328369140625;
    float _1063 = _1060 + 0.039999999105930328369140625;
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _1075 = _1072.x * TEXCOORD_6.x;
    float _1076 = dot(vec3(_788, _789, _790), vec3(_858, _859, _860));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _788) - _858;
    float _1084 = (_1079 * _789) - _859;
    float _1085 = (_1079 * _790) - _860;
    float _1089 = abs(dot(vec3(_858, _859, _860), vec3(_788, _789, _790)));
    float _4022 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_943);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1091;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1178 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1182 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1207 = _1139 + _788;
        float _1208 = _1143 + _789;
        float _1209 = _1147 + _790;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_788, _789, _790), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4070 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_788, _789, _790), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4103 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_788, _789, _790), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4136 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1494 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1498 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1521 = _1139 + _788;
        float _1522 = _1143 + _789;
        float _1523 = _1147 + _790;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_788, _789, _790), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4199 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_788, _789, _790), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4232 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_788, _789, _790), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4265 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1450;
        _1760 = _1450;
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = _1450;
        _1769 = _1450;
        _1770 = _1450;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1462)) + _1462;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1463)) + _1463;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1464)) + _1464;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1083 * 0.5;
    float _1828 = _1084 * 0.5;
    float _1829 = _1085 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _943);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1940 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1944 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1948 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1951 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1954 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1957 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _1985;
        if (_1951 > 0.0)
        {
            _1985 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1985 = frontier_phi_14_12_ladder;
        }
        float _2187;
        if (_1954 > 0.0)
        {
            _2187 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2187 = frontier_phi_23_19_ladder;
        }
        float _2441;
        if (_1957 > 0.0)
        {
            _2441 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2441 = frontier_phi_35_30_ladder;
        }
        float _2443 = isnan(_2187) ? _1985 : (isnan(_1985) ? _2187 : min(_1985, _2187));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1951) + _1940;
        float _2449 = (_2444 * _1954) + _1944;
        float _2450 = (_2444 * _1957) + _1948;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_13_35_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1973 = frontier_phi_13_35_ladder_2;
        _1975 = frontier_phi_13_35_ladder_1;
        _1977 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1893);
        _1973 = _1961.x * cbModelParam._m0[1u].y;
        _1975 = _1961.y * cbModelParam._m0[1u].y;
        _1977 = _1961.z * cbModelParam._m0[1u].y;
    }
    float _1981 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _943);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1981 : min(cbModelParam._m0[25u].w, _1981));
    float _2071;
    float _2073;
    float _2075;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2035 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2039 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2043 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2046 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2049 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2052 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2192;
        if (_2046 > 0.0)
        {
            _2192 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2192 = frontier_phi_25_21_ladder;
        }
        float _2468;
        if (_2049 > 0.0)
        {
            _2468 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2468 = frontier_phi_37_32_ladder;
        }
        float _2681;
        if (_2052 > 0.0)
        {
            _2681 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2681 = frontier_phi_46_43_ladder;
        }
        float _2683 = isnan(_2468) ? _2192 : (isnan(_2192) ? _2468 : min(_2192, _2468));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _2046) + _2035;
        float _2689 = (_2684 * _2049) + _2039;
        float _2690 = (_2684 * _2052) + _2043;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2692 = (-1.0) - _2691;
        float _2694 = _2691 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2690 > _2694) || ((_2690 < _2692) || ((_2689 > _2694) || ((_2689 < _2692) || ((_2688 < _2692) || (_2688 > _2694))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2690, cbModelParam._m0[17u].z, fma(_2689, cbModelParam._m0[17u].y, _2688 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2690, cbModelParam._m0[18u].z, fma(_2689, cbModelParam._m0[18u].y, _2688 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2690, cbModelParam._m0[19u].z, fma(_2689, cbModelParam._m0[19u].y, _2688 * cbModelParam._m0[19u].x))), _1982);
            frontier_phi_22_46_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2071 = frontier_phi_22_46_ladder_2;
        _2073 = frontier_phi_22_46_ladder_1;
        _2075 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _1982);
        _2071 = _2055.x * cbModelParam._m0[1u].z;
        _2073 = _2055.y * cbModelParam._m0[1u].z;
        _2075 = _2055.z * cbModelParam._m0[1u].z;
    }
    float _2088 = (((_1110 * _1061) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2090 = (((_1110 * _1062) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2092 = (((_1110 * _1063) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2095 = fma(_2092, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2088 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2092, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2088 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2092, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2088 * cbSceneParam._m0[91u].x));
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_967 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1075 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2146 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2150 = _2113 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_788, _789, _790));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_788, _789, _790));
    float _4401 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4412 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2130].x * _2136) * _2171) + ((cbLight._m0[_2140].x * _2146) * _2169);
    float _2179 = ((_2136 * cbLight._m0[_2130].y) * _2171) + ((_2146 * cbLight._m0[_2140].y) * _2169);
    float _2180 = ((_2136 * cbLight._m0[_2130].z) * _2171) + ((_2146 * cbLight._m0[_2140].z) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2113 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4423 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2224 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2412 = _2113 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4439 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2431 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2242 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2197;
        _2244 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2199;
        _2246 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2201;
    }
    uint _2249 = _2113 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _943) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2113].x + _858;
    float _2265 = cbLight._m0[_2113].y + _859;
    float _2266 = cbLight._m0[_2113].z + _860;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2113].xyz));
    float _4455 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2278 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2279 = dot(vec3(_788, _789, _790), vec3(_2271, _2272, _2273));
    float _4477 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2271, _2272, _2273));
    float _4488 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1058;
    float _2302 = 0.959999978542327880859375 - _1059;
    float _2303 = 0.959999978542327880859375 - _1060;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4499 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2334 = _2113 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _943) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2150].x + _858;
    float _2348 = cbLight._m0[_2150].y + _859;
    float _2349 = cbLight._m0[_2150].z + _860;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2150].xyz));
    float _4510 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2361 = dot(vec3(_788, _789, _790), vec3(_2354, _2355, _2356));
    float _4521 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2354, _2355, _2356));
    float _4532 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2387 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2278 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2387) + _2346) * _2360))) * _2360;
    float _4543 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2409 = (((((_2380 * _2300) + _1061) * cbLight._m0[_2334].x) * _2399) * _2136) + (((((_2299 * _2300) + _1061) * cbLight._m0[_2249].x) * _2323) * _2146);
    float _2410 = (((((_2380 * _2302) + _1062) * cbLight._m0[_2334].y) * _2399) * _2136) + (((((_2299 * _2302) + _1062) * cbLight._m0[_2249].y) * _2323) * _2146);
    float _2411 = (((((_2380 * _2303) + _1063) * cbLight._m0[_2334].z) * _2399) * _2136) + (((((_2299 * _2303) + _1063) * cbLight._m0[_2249].z) * _2323) * _2146);
    float _2473;
    float _2475;
    float _2477;
    if (_2186)
    {
        _2473 = _2409;
        _2475 = _2410;
        _2477 = _2411;
    }
    else
    {
        uint _2479 = _2113 + 2u;
        uint _2483 = _2113 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _943) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _858;
        float _2500 = cbLight._m0[_2479].y + _859;
        float _2501 = cbLight._m0[_2479].z + _860;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2479].xyz));
        float _4554 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2513 = dot(vec3(_788, _789, _790), vec3(_2506, _2507, _2508));
        float _4565 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4576 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2278 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2539) + _2498) * _2512))) * _2512;
        float _4587 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2473 = (((((_2532 * _2300) + _1061) * cbLight._m0[_2483].x) * _2551) * _2552) + _2409;
        _2475 = (((((_2532 * _2302) + _1062) * cbLight._m0[_2483].y) * _2551) * _2552) + _2410;
        _2477 = (((((_2532 * _2303) + _1063) * cbLight._m0[_2483].z) * _2551) * _2552) + _2411;
    }
    float _2587;
    float _2589;
    float _2591;
    if (_2204)
    {
        _2587 = _2473;
        _2589 = _2475;
        _2591 = _2477;
    }
    else
    {
        uint _2598 = _2113 + 3u;
        uint _2602 = _2113 + 11u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _943) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _858;
        float _2619 = cbLight._m0[_2598].y + _859;
        float _2620 = cbLight._m0[_2598].z + _860;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2598].xyz));
        float _4603 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2632 = dot(vec3(_788, _789, _790), vec3(_2625, _2626, _2627));
        float _4614 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4625 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2658 = 1.0 - _2617;
        float _2668 = (0.5 / (((_2278 * ((_2631 * _2658) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2658) + _2617) * _2631))) * _2631;
        float _4636 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2670 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2671 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2587 = (((((_2651 * _2300) + _1061) * cbLight._m0[_2602].x) * _2670) * _2671) + _2473;
        _2589 = (((((_2651 * _2302) + _1062) * cbLight._m0[_2602].y) * _2670) * _2671) + _2475;
        _2591 = (((((_2651 * _2303) + _1063) * cbLight._m0[_2602].z) * _2670) * _2671) + _2477;
    }
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_2111.y == 0u)
    {
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2746;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2746;
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2746;
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.x;
        uint _2773 = uint((float(_2761.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2762))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2762)));
        float _2783 = (log2(_2749 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2784 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        uint _2787 = uint(isnan(14.0) ? _2784 : (isnan(_2784) ? 14.0 : min(_2784, 14.0)));
        uvec4 _2792 = texelFetch(g_lightClusterGridBuffer, int(((_2787 << 2u) + (_2773 << 6u)) >> 2u));
        uint _2793 = _2792.x;
        uint _2794 = _2761.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2794 >> 4u) & 15u)) + 4294967295u) & _2793) == 0u) || ((_2794 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3094)
                {
                    frontier_phi_61_pred = _3078;
                    frontier_phi_61_pred_1 = _3083;
                    frontier_phi_61_pred_2 = _3082;
                    frontier_phi_61_pred_3 = _3081;
                    frontier_phi_61_pred_4 = _3080;
                    frontier_phi_61_pred_5 = _3079;
                }
                else
                {
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    uint _3208;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3093;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3212 = uint(findLSB(_3208)) + (_3084 << 5u);
                        uint _3209 = (_3208 + 4294967295u) & _3208;
                        uint _3214 = _3212 * 48u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3234 = (_3212 * 48u) + 4u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3253 = (_3212 * 48u) + 8u;
                        vec3 _3264 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x));
                        float _3268 = _3228.x - _2747;
                        float _3269 = _3228.y - _2748;
                        float _3270 = _3228.z - _2749;
                        float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                        float _3274 = inversesqrt(_3271);
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3278 = dot(vec3(_888, _891, _894), vec3(_3275, _3276, _3277));
                        float _3283 = 1.0 - (_3271 * _3228.w);
                        float _4662 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3285 = sqrt(_3271) * _3247.w;
                        float _3288 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3278) + _3289;
                        float _3295 = _3285 * _3285;
                        float _3299 = ((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3284) / ((_3295 * 0.699999988079071044921875) + 1.0);
                        float _3303 = (-0.0) - _2747;
                        float _3304 = (-0.0) - _2748;
                        float _3305 = (-0.0) - _2749;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3320 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                        float _3321 = 1.0 - _1091;
                        float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                        float _3329 = _3328 * _3328;
                        float _3330 = _3329 * _3329;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3341 = dot(vec3(_888, _891, _894), vec3(_3310, _3311, _3312));
                        float _4678 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3345 = dot(vec3(_888, _891, _894), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                        float _4689 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                        float _3353 = _3288 * _3329;
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3278) + _3354;
                        float _4700 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3359 = 1.0 - _3329;
                        float _3369 = (0.5 / (((_3358 * ((_3344 * _3359) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3329) * _3344))) * _3358;
                        float _4711 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3380 = (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3352 * _3352) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125))) * _3284;
                        _3137 = (_3299 * _3247.x) + _3205;
                        _3138 = (_3299 * _3247.y) + _3206;
                        _3139 = (_3299 * _3247.z) + _3207;
                        _3134 = (_3380 * _3264.x) + _3202;
                        _3135 = (_3380 * _3264.y) + _3203;
                        _3136 = (_3380 * _3264.z) + _3204;
                        if (_3209 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3209;
                        }
                    }
                    frontier_phi_61_pred = _3134;
                    frontier_phi_61_pred_1 = _3139;
                    frontier_phi_61_pred_2 = _3138;
                    frontier_phi_61_pred_3 = _3137;
                    frontier_phi_61_pred_4 = _3136;
                    frontier_phi_61_pred_5 = _3135;
                }
                _2926 = frontier_phi_61_pred;
                _2936 = frontier_phi_61_pred_1;
                _2934 = frontier_phi_61_pred_2;
                _2932 = frontier_phi_61_pred_3;
                _2930 = frontier_phi_61_pred_4;
                _2928 = frontier_phi_61_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2926;
                    _3079 = _2928;
                    _3080 = _2930;
                    _3081 = _2932;
                    _3082 = _2934;
                    _3083 = _2936;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2942) & _2793) == 0u)
        {
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
            float _3072 = _3071 * _2747;
            float _3073 = _3071 * _2748;
            float _3074 = _3071 * _2749;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3185 = _2925;
                float _3186 = _2927;
                float _3187 = _2929;
                float _3188 = _2931;
                float _3189 = _2933;
                float _3190 = _2935;
                uint _3191 = _2942;
                uint _3200;
                bool _3201;
                for (;;)
                {
                    _3200 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                    _3201 = _3200 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3201)
                    {
                        frontier_phi_67_pred = _3188;
                        frontier_phi_67_pred_1 = _3189;
                        frontier_phi_67_pred_2 = _3190;
                        frontier_phi_67_pred_3 = _3187;
                        frontier_phi_67_pred_4 = _3186;
                        frontier_phi_67_pred_5 = _3185;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        uint _3404 = _3200;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3535;
                        bool _3536;
                        for (;;)
                        {
                            uint _3415 = ((_3191 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3491 = (_3415 * 40u) + 24u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3510 = (_3415 * 40u) + 28u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3535 = fma(_2749, _3523.z, fma(_2748, _3523.y, _3523.x * _2747)) + _3523.w;
                            _3536 = !((fma(_2749, _3504.z, fma(_2748, _3504.y, _3504.x * _2747)) + _3504.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3536)
                            {
                                float _3563 = _3430.x - _2747;
                                float _3564 = _3430.y - _2748;
                                float _3565 = _3430.z - _2749;
                                float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                                float _3569 = inversesqrt(_3566);
                                float _3570 = _3569 * _3563;
                                float _3571 = _3569 * _3564;
                                float _3572 = _3569 * _3565;
                                float _3576 = 1.0 - (_3566 / (_3431 * _3431));
                                float _4722 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3581 = sqrt(_3566) * _3446.w;
                                float _3583 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                                float _3584 = _3583 * _3583;
                                float _3587 = ((1.0 - _3584) * dot(vec3(_3570, _3571, _3572), vec3(_888, _891, _894))) + _3584;
                                float _3590 = _3581 * _3581;
                                float _3594 = (fma(_2749, _3473.z, fma(_2748, _3473.y, _3473.x * _2747)) + _3473.w) / _3535;
                                float _3595 = (fma(_2749, _3488.z, fma(_2748, _3488.y, _3488.x * _2747)) + _3488.w) / _3535;
                                float _3599 = 1.0 - dot(vec2(_3594, _3595), vec2(_3594, _3595));
                                float _4738 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3601 = _3600 * (((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3577) / ((_3590 * 0.699999988079071044921875) + 1.0));
                                float _3613 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                                float _3614 = 1.0 - _1091;
                                float _3621 = sqrt(1.0 - ((1.0 - (_3614 * _3614)) * (1.0 - (_3613 * _3613))));
                                float _3622 = _3621 * _3621;
                                float _3623 = _3622 * _3622;
                                float _3624 = _3570 - _3072;
                                float _3625 = _3571 - _3073;
                                float _3626 = _3572 - _3074;
                                float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                                float _3634 = dot(vec3(_888, _891, _894), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4749 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3638 = dot(vec3(_888, _891, _894), vec3(_3630 * _3624, _3630 * _3625, _3630 * _3626));
                                float _4760 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3645 = ((_3641 * _3641) * (_3623 + (-1.0))) + 1.0;
                                float _3646 = _3583 * _3622;
                                float _3647 = _3646 * _3646;
                                float _3653 = ((1.0 - _3647) * dot(vec3(_888, _891, _894), vec3(_3570, _3571, _3572))) + _3647;
                                float _4771 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3655 = 1.0 - _3622;
                                float _3665 = (0.5 / (((_3654 * ((_3637 * _3655) + _3622)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3622) * _3637))) * _3654;
                                float _4782 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3675 = (_3600 * _3577) * (((_3623 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3645 * _3645) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3675 * _3458.x;
                                frontier_phi_73_pred_1 = _3675 * _3458.y;
                                frontier_phi_73_pred_2 = _3601 * _3446.z;
                                frontier_phi_73_pred_3 = _3601 * _3446.y;
                                frontier_phi_73_pred_4 = _3601 * _3446.x;
                                frontier_phi_73_pred_5 = _3675 * _3458.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3679 = frontier_phi_73_pred;
                            _3680 = frontier_phi_73_pred_1;
                            _3684 = frontier_phi_73_pred_2;
                            _3683 = frontier_phi_73_pred_3;
                            _3682 = frontier_phi_73_pred_4;
                            _3681 = frontier_phi_73_pred_5;
                            _3388 = _3682 + _3401;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3385 = _3679 + _3398;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3388;
                        frontier_phi_67_pred_1 = _3389;
                        frontier_phi_67_pred_2 = _3390;
                        frontier_phi_67_pred_3 = _3387;
                        frontier_phi_67_pred_4 = _3386;
                        frontier_phi_67_pred_5 = _3385;
                    }
                    _3053 = frontier_phi_67_pred;
                    _3055 = frontier_phi_67_pred_1;
                    _3057 = frontier_phi_67_pred_2;
                    _3051 = frontier_phi_67_pred_3;
                    _3049 = frontier_phi_67_pred_4;
                    _3047 = frontier_phi_67_pred_5;
                    uint _3192 = _3191 + 1u;
                    if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3185 = _3047;
                        _3186 = _3049;
                        _3187 = _3051;
                        _3188 = _3053;
                        _3189 = _3055;
                        _3190 = _3057;
                        _3191 = _3192;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3055;
                frontier_phi_55_56_ladder_1 = _3057;
                frontier_phi_55_56_ladder_2 = _3053;
                frontier_phi_55_56_ladder_3 = _3051;
                frontier_phi_55_56_ladder_4 = _3049;
                frontier_phi_55_56_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_55_56_ladder = _2933;
                frontier_phi_55_56_ladder_1 = _2935;
                frontier_phi_55_56_ladder_2 = _2931;
                frontier_phi_55_56_ladder_3 = _2929;
                frontier_phi_55_56_ladder_4 = _2927;
                frontier_phi_55_56_ladder_5 = _2925;
            }
            _3046 = frontier_phi_55_56_ladder_5;
            _3048 = frontier_phi_55_56_ladder_4;
            _3050 = frontier_phi_55_56_ladder_3;
            _3052 = frontier_phi_55_56_ladder_2;
            _3054 = frontier_phi_55_56_ladder;
            _3056 = frontier_phi_55_56_ladder_1;
        }
        float _3061 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2806 = (_3061 * _3052) + _2242;
        _2808 = (_3061 * _3054) + _2244;
        _2810 = (_3061 * _3056) + _2246;
        _2812 = ((_3046 * _1061) * _3061) + _2587;
        _2814 = ((_3048 * _1062) * _3061) + _2589;
        _2816 = ((_3050 * _1063) * _3061) + _2591;
    }
    else
    {
        _2806 = _2242;
        _2808 = _2244;
        _2810 = _2246;
        _2812 = _2587;
        _2814 = _2589;
        _2816 = _2591;
    }
    uint _2822 = _968 + uint(cbMatDynParam._m0[0u].w);
    float _2828 = cbInstanceData._m0[_2822].x * (_758 ? cbMtdParam._m0[21u].z : cbMtdParam._m0[11u].y);
    float _2829 = cbInstanceData._m0[_2822].y * (_758 ? cbMtdParam._m0[21u].w : cbMtdParam._m0[11u].z);
    float _2830 = cbInstanceData._m0[_2822].z * (_758 ? cbMtdParam._m0[22u].x : cbMtdParam._m0[11u].w);
    float _4798 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4809 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4820 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4831 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2848 = (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2806 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1075))) + ((_2812 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + _2828;
    float _2850 = (_2829 + ((_2814 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2808 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1075)));
    float _2852 = (_2830 + ((_2816 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2810 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1075)));
    float _4857 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2865 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _2870 = cbInstanceData._m0[_967 + 6u].w * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)));
    float _2875 = _865 / cbSceneParam._m0[86u].x;
    float _2876 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _2951 = _2950 / _801;
        float _2962 = _2951 * _851;
        float _2963 = _852 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2965 = _2951 * _853;
        float _2967 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2968 = _2967 + cbSceneParam._m0[79u].w;
        float _2969 = cbSceneParam._m0[79u].w - _2963;
        float _2975 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2965 * _2965));
        float _2978 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2975;
        float _2983 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2985 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2964 - _2967) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2968 > 0.0) ? exp2(_2983 * _2968) : (2.0 - exp2(_2985 * _2968))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2978;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : max(_2968, _2969));
            float _3109 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : min(_2968, _2969));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3147 = ((abs(_2975 / _2964) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2983 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2983 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2985 * _3118) - exp2(_2985 * _3119)) * _3107))) + (_2978 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2895);
        _2987 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2989 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2991 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2993 = _3158 * _2895;
    }
    else
    {
        _2987 = _2892;
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
    }
    float _3005 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3006 = _3005 == 3.0;
    float _3007 = log2(_2993);
    float _3011 = exp2(_3007 * cbSceneParam._m0[78u].x);
    float _3012 = exp2(_3007 * cbSceneParam._m0[78u].y);
    float _3013 = exp2(_3007 * cbSceneParam._m0[78u].z);
    float _3014 = _3011 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)));
    float _3015 = _3012 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)));
    float _3016 = _3013 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)));
    float _3025 = (_3005 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3025 * (_3006 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2987)));
    SV_Target.y = _3025 * (_3006 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.z = _3025 * (_3006 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2991)));
    SV_Target.w = _2870;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2828) * _2865) * _3011) * _3025;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2829) * _2865) * _3012) * _3025;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2830) * _2865) * _3013) * _3025;
    SV_Target_1.w = _2870;
}


