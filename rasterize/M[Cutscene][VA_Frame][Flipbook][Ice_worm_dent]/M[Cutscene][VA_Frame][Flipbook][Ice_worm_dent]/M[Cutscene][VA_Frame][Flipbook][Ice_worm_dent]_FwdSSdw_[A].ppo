#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _3938;
float _3939;
float _3940;
float _3941;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = cbMtdParam._m0[18u].z + TEXCOORD.x;
    float _265 = cbMtdParam._m0[18u].w + TEXCOORD.y;
    vec4 _278 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _264) + cbTextureTilingScale._m0[0u].z, (_265 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[10u].y;
    float _285 = _278.y * cbMtdParam._m0[10u].z;
    float _286 = _278.z * cbMtdParam._m0[10u].w;
    float _298 = cbMtdParam._m0[21u].x + TEXCOORD.x;
    float _299 = cbMtdParam._m0[21u].y + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (_299 * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    uvec4 _324 = floatBitsToUint(cbMtdParam._m0[9u]);
    float _350 = exp2(log2(cbMtdParam._m0[15u].z * texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) * cbMtdParam._m0[15u].w);
    float _3950 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _378 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x * TEXCOORD_6.y) + TEXCOORD_6.y) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].z);
    float _3961 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _380 = (_324.w != 0u) ? (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) : (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[13u].y) - _284)) + _284;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[13u].z) - _285)) + _285;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[13u].w) - _286)) + _286;
    float _401 = cbMtdParam._m0[20u].z + TEXCOORD.x;
    float _402 = cbMtdParam._m0[20u].w + TEXCOORD.y;
    vec4 _415 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * _401) + cbTextureTilingScale._m0[11u].z, (_402 * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _453 = exp2(log2(((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x * TEXCOORD_6.z) + TEXCOORD_6.z) * cbMtdParam._m0[16u].x) * cbMtdParam._m0[16u].y);
    float _3972 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    vec4 _471 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _473 = _471.x;
    float _482 = exp2(log2(((_324.z != 0u) ? (1.0 - _473) : _473) * cbMtdParam._m0[17u].w) * cbMtdParam._m0[18u].x);
    float _3983 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _490 = cbMtdParam._m0[19u].y * cbMtdParam._m0[19u].x;
    float _493 = (_490 + (-1.0)) * cbMtdParam._m0[17u].x;
    bool _495 = _324.y != 0u;
    float _507 = (cbMtdParam._m0[20u].x + cbMtdParam._m0[17u].y) + ((TEXCOORD.z - cbMtdParam._m0[20u].x) * cbMtdParam._m0[19u].z);
    float _509 = (cbMtdParam._m0[20u].y + cbMtdParam._m0[16u].w) + ((TEXCOORD.w - cbMtdParam._m0[20u].y) * cbMtdParam._m0[19u].w);
    float _3994 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4005 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    uint _515 = uint(int(floor(_493)));
    uint _517 = _515 + 1u;
    uint _518 = uint(int(_490));
    uint _519 = _518 * 3u;
    uint _520 = _515 - _519 * (_515 / _519);
    uint _521 = _517 - _519 * (_517 / _519);
    float _524 = float(int(_520 - _518 * (_520 / _518)));
    float _528 = float(int(_521 - _518 * (_521 / _518)));
    float _532 = 1.0 / cbMtdParam._m0[19u].x;
    float _533 = 1.0 / cbMtdParam._m0[19u].y;
    float _534 = fract(_495 ? _507 : (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    float _535 = fract(_495 ? _509 : (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))));
    vec4 _562 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_534 + (_524 - cbMtdParam._m0[19u].x * trunc(_524 / cbMtdParam._m0[19u].x))) * _532) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_535 + floor(_524 / cbMtdParam._m0[19u].x)) * _533) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w));
    float _564 = _562.x;
    float _567 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_534 + (_528 - cbMtdParam._m0[19u].x * trunc(_528 / cbMtdParam._m0[19u].x))) * _532) * cbTextureTilingScale._m0[14u].x) + cbTextureTilingScale._m0[14u].z, (((_535 + floor(_528 / cbMtdParam._m0[19u].x)) * _533) * cbTextureTilingScale._m0[14u].y) + cbTextureTilingScale._m0[14u].w)).x - _564) * fract(_493)) + _564;
    float _573 = exp2(log2(((_567 * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) + _567) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _4016 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = (floatBitsToUint(cbMtdParam._m0[10u]).x != 0u) ? (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) : (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)));
    float _582 = (_575 * ((_415.x * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _583 = (_575 * ((_415.y * cbMtdParam._m0[12u].z) - _388)) + _388;
    float _584 = (_575 * ((_415.z * cbMtdParam._m0[12u].w) - _389)) + _389;
    vec4 _594 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _596 = _594.x;
    bool _602 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _619 = ((_602 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _596)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _596))) - POSITION_1.w) / cbMtdParam._m0[16u].z;
    float _4027 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _640 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * _264) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _265) + cbTextureTilingScale._m0[8u].w)).x + cbMtdParam._m0[14u].y;
    float _661 = (((cbMtdParam._m0[18u].y - _640) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _298) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _299) + cbTextureTilingScale._m0[2u].w)).x) * _380) + _640;
    float _682 = (((cbMtdParam._m0[17u].z - _661) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * _401) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _402) + cbTextureTilingScale._m0[12u].w)).x) * _575) + _661;
    vec4 _694 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _264) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _696 = _694.x;
    float _697 = _694.y;
    float _698 = _694.z;
    vec4 _710 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _298) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _299) + cbTextureTilingScale._m0[3u].w));
    float _721 = ((_710.x - _696) * _380) + _696;
    float _722 = ((_710.y - _697) * _380) + _697;
    float _723 = ((_710.z - _698) * _380) + _698;
    vec4 _735 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_dent_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * _401) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _402) + cbTextureTilingScale._m0[13u].w));
    float _748 = ((_735.z - _723) * _575) + _723;
    float _752 = ((((_735.x - _721) * _575) + _721) * 2.0) + (-1.0);
    float _753 = ((((_735.y - _722) * _575) + _722) * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _4049 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _759 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    bool _764 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _783 = fma(_759, _241 * NORMAL.x, fma(_753, _248 * TANGENT.x, (_234 * _227) * _752));
    float _786 = fma(_759, _241 * NORMAL.y, fma(_753, _248 * TANGENT.y, (_234 * _228) * _752));
    float _789 = fma(_759, _241 * NORMAL.z, fma(_753, _248 * TANGENT.z, (_234 * _229) * _752));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _4060 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _797 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _798 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _799 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _800 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _801 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _802 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _807 = _602 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _857 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _847);
    float _858 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _847);
    float _859 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _847);
    float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
    float _864 = _857 * _863;
    float _865 = _858 * _863;
    float _866 = _859 * _863;
    vec4 _871 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _873 = _871.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1176 = sqrt(((_857 * _857) + (_858 * _858)) + (_859 * _859));
        float _1182 = (cbMatDynParam._m0[5u].x * _1176) + cbMatDynParam._m0[5u].y;
        float _4126 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1187 = (cbMatDynParam._m0[5u].z * _1176) + cbMatDynParam._m0[5u].w;
        float _4137 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) - _1183)) + _1183) < ((_873 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _886 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _888 = _886.w;
    float _906 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _909 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _912 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    vec4 _914 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _916 = _914.x;
    float _928 = (((_914.y - _798) + (_914.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    vec4 _929 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _945 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_916 * _916)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _929.z;
    float _953 = (((cbMatDynParam._m0[15u].x - _802) * cbMatDynParam._m0[15u].w) * _945) + _802;
    float _961 = ((_945 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _928)) + _928;
    uint _985 = uint(roundEven(NORMAL.w)) * 13u;
    uint _986 = _985 + 9u;
    uint _987 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _993 = (cbMtdParam._m0[0u].x * _799) * cbInstanceData._m0[_987].x;
    float _994 = (cbMtdParam._m0[0u].y * _800) * cbInstanceData._m0[_987].y;
    float _995 = (cbMtdParam._m0[0u].z * _801) * cbInstanceData._m0[_987].z;
    float _4148 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    vec4 _999 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _1004 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _1015 = (((_1004.x - _953) + (_1004.w * _953)) * cbMtdParam._m0[3u].x) + _953;
    float _1028 = (cbMtdParam._m0[3u].x * (((_996 * _888) - _996) + _999.x)) + _996;
    float _1029 = (cbMtdParam._m0[3u].x * (((_997 * _888) - _997) + _999.y)) + _997;
    float _1030 = (cbMtdParam._m0[3u].x * (((_998 * _888) - _998) + _999.z)) + _998;
    float _1044 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_953 * (_799 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_953 * (_800 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_953 * (_801 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _1048 = _1044 * cbMatDynParam._m0[13u].w;
    float _1058 = (_1048 * (cbMatDynParam._m0[13u].x - _1028)) + _1028;
    float _1059 = (_1048 * (cbMatDynParam._m0[13u].y - _1029)) + _1029;
    float _1060 = (_1048 * (cbMatDynParam._m0[13u].z - _1030)) + _1030;
    float _1068 = ((_1044 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1015)) + _1015;
    float _1069 = 1.0 - _1068;
    float _1070 = _1069 * _1058;
    float _1071 = _1069 * _1059;
    float _1072 = _1069 * _1060;
    float _1076 = (_1058 + (-0.039999999105930328369140625)) * _1068;
    float _1077 = (_1059 + (-0.039999999105930328369140625)) * _1068;
    float _1078 = (_1060 + (-0.039999999105930328369140625)) * _1068;
    float _1079 = _1076 + 0.039999999105930328369140625;
    float _1080 = _1077 + 0.039999999105930328369140625;
    float _1081 = _1078 + 0.039999999105930328369140625;
    vec4 _1090 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _1093 = _1090.x * TEXCOORD_6.x;
    float _1094 = dot(vec3(_794, _795, _796), vec3(_864, _865, _866));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _794) - _864;
    float _1102 = (_1097 * _795) - _865;
    float _1103 = (_1097 * _796) - _866;
    float _1107 = abs(dot(vec3(_864, _865, _866), vec3(_794, _795, _796)));
    float _4181 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_961);
    float _1122 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1128 = (1.0 - _1122) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1129 = _1122 * _1109;
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1165, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157));
        float _1225 = fma(_1165, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157));
        float _1229 = fma(_1165, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157));
        float _1254 = _1157 + _794;
        float _1255 = _1161 + _795;
        float _1256 = _1165 + _796;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_794, _795, _796), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4229 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_794, _795, _796), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4262 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_794, _795, _796), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4295 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1165, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157));
        float _1544 = fma(_1165, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157));
        float _1548 = fma(_1165, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157));
        float _1571 = _1157 + _794;
        float _1572 = _1161 + _795;
        float _1573 = _1165 + _796;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_794, _795, _796), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4358 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_794, _795, _796), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4391 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_794, _795, _796), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4424 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = _1497;
        _1819 = _1497;
        _1820 = _1497;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1509)) + _1509;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1510)) + _1510;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1511)) + _1511;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1101 * 0.5;
    float _1878 = _1102 * 0.5;
    float _1879 = _1103 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1917;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1928;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1919 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1932 = (_1928 * cbModelParam._m0[1u].x) + (_1917 * (1.0 - cbModelParam._m0[1u].x));
    float _1942 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _961);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1942 : min(cbModelParam._m0[25u].z, _1942));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1990 = fma(_1165, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157)) + cbModelParam._m0[13u].w;
        float _1994 = fma(_1165, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157)) + cbModelParam._m0[14u].w;
        float _1998 = fma(_1165, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157)) + cbModelParam._m0[15u].w;
        float _2001 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _2004 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _2007 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2035;
        if (_2001 > 0.0)
        {
            _2035 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2035 = frontier_phi_17_15_ladder;
        }
        float _2258;
        if (_2004 > 0.0)
        {
            _2258 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2258 = frontier_phi_26_22_ladder;
        }
        float _2515;
        if (_2007 > 0.0)
        {
            _2515 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2515 = frontier_phi_38_33_ladder;
        }
        float _2517 = isnan(_2258) ? _2035 : (isnan(_2035) ? _2258 : min(_2035, _2258));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _2001) + _1990;
        float _2523 = (_2518 * _2004) + _1994;
        float _2524 = (_2518 * _2007) + _1998;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2525;
        float _2529 = _2525 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 > _2529) || ((_2523 < _2527) || ((_2522 < _2527) || (_2522 > _2529))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2524, cbModelParam._m0[9u].z, fma(_2523, cbModelParam._m0[9u].y, _2522 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2524, cbModelParam._m0[10u].z, fma(_2523, cbModelParam._m0[10u].y, _2522 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2524, cbModelParam._m0[11u].z, fma(_2523, cbModelParam._m0[11u].y, _2522 * cbModelParam._m0[11u].x))), _1943);
            frontier_phi_16_38_ladder = _2652.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2652.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2652.x * cbModelParam._m0[1u].y;
        }
        _2023 = frontier_phi_16_38_ladder_2;
        _2025 = frontier_phi_16_38_ladder_1;
        _2027 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1943);
        _2023 = _2011.x * cbModelParam._m0[1u].y;
        _2025 = _2011.y * cbModelParam._m0[1u].y;
        _2027 = _2011.z * cbModelParam._m0[1u].y;
    }
    float _2031 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _961);
    float _2032 = isnan(_2031) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2031 : min(cbModelParam._m0[25u].w, _2031));
    float _2121;
    float _2123;
    float _2125;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2085 = fma(_1165, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157)) + cbModelParam._m0[21u].w;
        float _2089 = fma(_1165, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157)) + cbModelParam._m0[22u].w;
        float _2093 = fma(_1165, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157)) + cbModelParam._m0[23u].w;
        float _2096 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2099 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2102 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2263;
        if (_2096 > 0.0)
        {
            _2263 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2263 = frontier_phi_28_24_ladder;
        }
        float _2542;
        if (_2099 > 0.0)
        {
            _2542 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2542 = frontier_phi_40_35_ladder;
        }
        float _2755;
        if (_2102 > 0.0)
        {
            _2755 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2755 = frontier_phi_49_46_ladder;
        }
        float _2757 = isnan(_2542) ? _2263 : (isnan(_2263) ? _2542 : min(_2263, _2542));
        float _2758 = isnan(_2755) ? _2757 : (isnan(_2757) ? _2755 : min(_2757, _2755));
        float _2762 = (_2758 * _2096) + _2085;
        float _2763 = (_2758 * _2099) + _2089;
        float _2764 = (_2758 * _2102) + _2093;
        float _2765 = _2758 * 9.9999997473787516355514526367188e-05;
        float _2766 = (-1.0) - _2765;
        float _2768 = _2765 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2764 > _2768) || ((_2764 < _2766) || ((_2763 > _2768) || ((_2763 < _2766) || ((_2762 < _2766) || (_2762 > _2768))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2764, cbModelParam._m0[17u].z, fma(_2763, cbModelParam._m0[17u].y, _2762 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2764, cbModelParam._m0[18u].z, fma(_2763, cbModelParam._m0[18u].y, _2762 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2764, cbModelParam._m0[19u].z, fma(_2763, cbModelParam._m0[19u].y, _2762 * cbModelParam._m0[19u].x))), _2032);
            frontier_phi_25_49_ladder = _2994.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2994.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2994.x * cbModelParam._m0[1u].z;
        }
        _2121 = frontier_phi_25_49_ladder_2;
        _2123 = frontier_phi_25_49_ladder_1;
        _2125 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _2032);
        _2121 = _2105.x * cbModelParam._m0[1u].z;
        _2123 = _2105.y * cbModelParam._m0[1u].z;
        _2125 = _2105.z * cbModelParam._m0[1u].z;
    }
    float _2138 = (((_1128 * _1079) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2121 - _2023)) + _2023);
    float _2140 = (((_1128 * _1080) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2123 - _2025)) + _2025);
    float _2142 = (((_1128 * _1081) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2125 - _2027)) + _2027);
    float _2145 = fma(_2142, cbSceneParam._m0[89u].z, fma(_2140, cbSceneParam._m0[89u].y, _2138 * cbSceneParam._m0[89u].x));
    float _2148 = fma(_2142, cbSceneParam._m0[90u].z, fma(_2140, cbSceneParam._m0[90u].y, _2138 * cbSceneParam._m0[90u].x));
    float _2151 = fma(_2142, cbSceneParam._m0[91u].z, fma(_2140, cbSceneParam._m0[91u].y, _2138 * cbSceneParam._m0[91u].x));
    vec4 _2159 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_883, _884));
    float _2161 = _2159.w;
    float _2173 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2161);
    float _2174 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2161);
    float _2175 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2161);
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_985 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _1093 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2217 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2221 = _2181 | 1u;
    float _2232 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_794, _795, _796));
    float _2235 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_794, _795, _796));
    float _4560 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _4571 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2240 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2242 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2249 = ((cbLight._m0[_2198].x * _2204) * _2242) + (((cbLight._m0[_2208].x * _2173) * _2217) * _2240);
    float _2250 = ((_2204 * cbLight._m0[_2198].y) * _2242) + (((cbLight._m0[_2208].y * _2174) * _2217) * _2240);
    float _2251 = ((_2204 * cbLight._m0[_2198].z) * _2242) + (((cbLight._m0[_2208].z * _2175) * _2217) * _2240);
    uvec4 _2255 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2257 = _2255.x == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2257)
    {
        _2268 = _2249;
        _2270 = _2250;
        _2272 = _2251;
    }
    else
    {
        uint _2276 = _2181 + 6u;
        float _2292 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4582 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2295 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2268 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2249;
        _2270 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2250;
        _2272 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2251;
    }
    bool _2275 = _2255.y == 0u;
    float _2313;
    float _2315;
    float _2317;
    if (_2275)
    {
        _2313 = _2268;
        _2315 = _2270;
        _2317 = _2272;
    }
    else
    {
        uint _2486 = _2181 + 7u;
        float _2502 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2503 = _2502 * _2502;
        float _4598 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2504 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2505 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2313 = (((cbLight._m0[_2486].x * 0.3183098733425140380859375) * _2504) * _2505) + _2268;
        _2315 = (((cbLight._m0[_2486].y * 0.3183098733425140380859375) * _2504) * _2505) + _2270;
        _2317 = (((cbLight._m0[_2486].z * 0.3183098733425140380859375) * _2504) * _2505) + _2272;
    }
    uint _2320 = _2181 + 8u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _961) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2181].x + _864;
    float _2336 = cbLight._m0[_2181].y + _865;
    float _2337 = cbLight._m0[_2181].z + _866;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2181].xyz));
    float _4614 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _4625 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2349 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2350 = dot(vec3(_794, _795, _796), vec3(_2342, _2343, _2344));
    float _4636 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2354 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2342, _2343, _2344));
    float _4647 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = _2334 * _2334;
    float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
    float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
    float _2371 = 0.959999978542327880859375 - _1076;
    float _2373 = 0.959999978542327880859375 - _1077;
    float _2374 = 0.959999978542327880859375 - _1078;
    float _2381 = 1.0 - _2334;
    float _2392 = (0.5 / (((_2349 * ((_2348 * _2381) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2381) + _2334) * _2348))) * _2348;
    float _4658 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
    uint _2408 = _2181 + 9u;
    float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _961) * 0.949999988079071044921875);
    float _2420 = _2419 * _2419;
    float _2421 = cbLight._m0[_2221].x + _864;
    float _2422 = cbLight._m0[_2221].y + _865;
    float _2423 = cbLight._m0[_2221].z + _866;
    float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
    float _2428 = _2427 * _2421;
    float _2429 = _2427 * _2422;
    float _2430 = _2427 * _2423;
    float _2431 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2221].xyz));
    float _4669 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2435 = dot(vec3(_794, _795, _796), vec3(_2428, _2429, _2430));
    float _4680 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2428, _2429, _2430));
    float _4691 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2420 * _2420;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
    float _2461 = 1.0 - _2420;
    float _2471 = (0.5 / (((_2349 * ((_2434 * _2461) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2461) + _2420) * _2434))) * _2434;
    float _4702 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    float _2483 = (((((_2454 * _2371) + _1079) * cbLight._m0[_2408].x) * _2473) * _2204) + ((((cbLight._m0[_2320].x * _2173) * ((_2370 * _2371) + _1079)) * _2394) * _2217);
    float _2484 = (((((_2454 * _2373) + _1080) * cbLight._m0[_2408].y) * _2473) * _2204) + ((((cbLight._m0[_2320].y * _2174) * ((_2370 * _2373) + _1080)) * _2394) * _2217);
    float _2485 = (((((_2454 * _2374) + _1081) * cbLight._m0[_2408].z) * _2473) * _2204) + ((((cbLight._m0[_2320].z * _2175) * ((_2370 * _2374) + _1081)) * _2394) * _2217);
    float _2547;
    float _2549;
    float _2551;
    if (_2257)
    {
        _2547 = _2483;
        _2549 = _2484;
        _2551 = _2485;
    }
    else
    {
        uint _2553 = _2181 + 2u;
        uint _2557 = _2181 + 10u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _961) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _864;
        float _2574 = cbLight._m0[_2553].y + _865;
        float _2575 = cbLight._m0[_2553].z + _866;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2553].xyz));
        float _4713 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2587 = dot(vec3(_794, _795, _796), vec3(_2580, _2581, _2582));
        float _4724 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4735 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
        float _2613 = 1.0 - _2572;
        float _2623 = (0.5 / (((_2349 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2613) + _2572) * _2586))) * _2586;
        float _4746 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2547 = (((((_2606 * _2371) + _1079) * cbLight._m0[_2557].x) * _2625) * _2626) + _2483;
        _2549 = (((((_2606 * _2373) + _1080) * cbLight._m0[_2557].y) * _2625) * _2626) + _2484;
        _2551 = (((((_2606 * _2374) + _1081) * cbLight._m0[_2557].z) * _2625) * _2626) + _2485;
    }
    float _2661;
    float _2663;
    float _2665;
    if (_2275)
    {
        _2661 = _2547;
        _2663 = _2549;
        _2665 = _2551;
    }
    else
    {
        uint _2672 = _2181 + 3u;
        uint _2676 = _2181 + 11u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _961) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _864;
        float _2693 = cbLight._m0[_2672].y + _865;
        float _2694 = cbLight._m0[_2672].z + _866;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2672].xyz));
        float _4762 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2706 = dot(vec3(_794, _795, _796), vec3(_2699, _2700, _2701));
        float _4773 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4784 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2349 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2732) + _2691) * _2705))) * _2705;
        float _4795 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2661 = (((((_2725 * _2371) + _1079) * cbLight._m0[_2676].x) * _2744) * _2745) + _2547;
        _2663 = (((((_2725 * _2373) + _1080) * cbLight._m0[_2676].y) * _2744) * _2745) + _2549;
        _2665 = (((((_2725 * _2374) + _1081) * cbLight._m0[_2676].z) * _2744) * _2745) + _2551;
    }
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    if (_2179.y == 0u)
    {
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2820;
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2820;
        float _2823 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2820;
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.x;
        uint _2847 = uint((float(_2835.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2836))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2836)));
        float _2857 = (log2(_2823 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2858 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        uint _2861 = uint(isnan(14.0) ? _2858 : (isnan(_2858) ? 14.0 : min(_2858, 14.0)));
        uvec4 _2866 = texelFetch(g_lightClusterGridBuffer, int(((_2861 << 2u) + (_2847 << 6u)) >> 2u));
        uint _2867 = _2866.x;
        uint _2868 = _2835.z;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((((1u << ((_2868 >> 4u) & 15u)) + 4294967295u) & _2867) == 0u) || ((_2868 & 240u) == 0u))
        {
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
        }
        else
        {
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3176)
                {
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                else
                {
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    uint _3311;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3175;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3315 = uint(findLSB(_3311)) + (_3166 << 5u);
                        uint _3312 = (_3311 + 4294967295u) & _3311;
                        uint _3317 = _3315 * 48u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3337 = (_3315 * 48u) + 4u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 3u)).x));
                        uint _3356 = (_3315 * 48u) + 8u;
                        vec3 _3367 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x));
                        float _3371 = _3331.x - _2821;
                        float _3372 = _3331.y - _2822;
                        float _3373 = _3331.z - _2823;
                        float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                        float _3377 = inversesqrt(_3374);
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3381 = dot(vec3(_906, _909, _912), vec3(_3378, _3379, _3380));
                        float _3386 = 1.0 - (_3374 * _3331.w);
                        float _4821 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3388 = sqrt(_3374) * _3350.w;
                        float _3391 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3381) + _3392;
                        float _3398 = _3388 * _3388;
                        float _3402 = ((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3387) / ((_3398 * 0.699999988079071044921875) + 1.0);
                        float _3406 = (-0.0) - _2821;
                        float _3407 = (-0.0) - _2822;
                        float _3408 = (-0.0) - _2823;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3423 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _1109;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3413 + _3378;
                        float _3435 = _3414 + _3379;
                        float _3436 = _3415 + _3380;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_906, _909, _912), vec3(_3413, _3414, _3415));
                        float _4837 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3448 = dot(vec3(_906, _909, _912), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4848 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3391 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3381) + _3457;
                        float _4859 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4870 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3455 * _3455) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125))) * _3387;
                        _3235 = (_3402 * _3350.x) + _3308;
                        _3236 = (_3402 * _3350.y) + _3309;
                        _3237 = (_3402 * _3350.z) + _3310;
                        _3232 = (_3483 * _3367.x) + _3305;
                        _3233 = (_3483 * _3367.y) + _3306;
                        _3234 = (_3483 * _3367.z) + _3307;
                        if (_3312 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3312;
                        }
                    }
                    frontier_phi_66_pred = _3232;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                _3000 = frontier_phi_66_pred;
                _3010 = frontier_phi_66_pred_1;
                _3008 = frontier_phi_66_pred_2;
                _3006 = frontier_phi_66_pred_3;
                _3004 = frontier_phi_66_pred_4;
                _3002 = frontier_phi_66_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _3000;
                    _3161 = _3002;
                    _3162 = _3004;
                    _3163 = _3006;
                    _3164 = _3008;
                    _3165 = _3010;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
        }
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.z;
        uint _3016 = (_3014 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _3016) & _2867) == 0u)
        {
            _3128 = _2999;
            _3130 = _3001;
            _3132 = _3003;
            _3134 = _3005;
            _3136 = _3007;
            _3138 = _3009;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
            float _3154 = _3153 * _2821;
            float _3155 = _3153 * _2822;
            float _3156 = _3153 * _2823;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3016 < ((_3014 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3288 = _2999;
                float _3289 = _3001;
                float _3290 = _3003;
                float _3291 = _3005;
                float _3292 = _3007;
                float _3293 = _3009;
                uint _3294 = _3016;
                uint _3303;
                bool _3304;
                for (;;)
                {
                    _3303 = texelFetch(g_lightClassification, int((((_2861 << 5u) + (_2847 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                    _3304 = _3303 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3304)
                    {
                        frontier_phi_77_pred = _3293;
                        frontier_phi_77_pred_1 = _3292;
                        frontier_phi_77_pred_2 = _3291;
                        frontier_phi_77_pred_3 = _3290;
                        frontier_phi_77_pred_4 = _3289;
                        frontier_phi_77_pred_5 = _3288;
                    }
                    else
                    {
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        uint _3516 = _3303;
                        uint _3517;
                        vec4 _3542;
                        float _3543;
                        vec4 _3558;
                        vec3 _3570;
                        vec4 _3585;
                        vec4 _3600;
                        float _3647;
                        bool _3648;
                        for (;;)
                        {
                            uint _3527 = ((_3294 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3516));
                            _3517 = (_3516 + 4294967295u) & _3516;
                            uint _3529 = _3527 * 40u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3543 = _3542.w;
                            uint _3545 = (_3527 * 40u) + 4u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3527 * 40u) + 8u;
                            _3570 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x));
                            uint _3572 = (_3527 * 40u) + 16u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3527 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3603 = (_3527 * 40u) + 24u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3622 = (_3527 * 40u) + 28u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3647 = fma(_2823, _3635.z, fma(_2822, _3635.y, _3635.x * _2821)) + _3635.w;
                            _3648 = !((fma(_2823, _3616.z, fma(_2822, _3616.y, _3616.x * _2821)) + _3616.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3648)
                            {
                                float _3675 = _3542.x - _2821;
                                float _3676 = _3542.y - _2822;
                                float _3677 = _3542.z - _2823;
                                float _3678 = dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677));
                                float _3681 = inversesqrt(_3678);
                                float _3682 = _3681 * _3675;
                                float _3683 = _3681 * _3676;
                                float _3684 = _3681 * _3677;
                                float _3688 = 1.0 - (_3678 / (_3543 * _3543));
                                float _4881 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3693 = sqrt(_3678) * _3558.w;
                                float _3695 = 1.39999997615814208984375 / (_3693 + 1.39999997615814208984375);
                                float _3696 = _3695 * _3695;
                                float _3699 = ((1.0 - _3696) * dot(vec3(_3682, _3683, _3684), vec3(_906, _909, _912))) + _3696;
                                float _3702 = _3693 * _3693;
                                float _3706 = (fma(_2823, _3585.z, fma(_2822, _3585.y, _3585.x * _2821)) + _3585.w) / _3647;
                                float _3707 = (fma(_2823, _3600.z, fma(_2822, _3600.y, _3600.x * _2821)) + _3600.w) / _3647;
                                float _3711 = 1.0 - dot(vec2(_3706, _3707), vec2(_3706, _3707));
                                float _4897 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3713 = _3712 * (((isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0))) * _3689) / ((_3702 * 0.699999988079071044921875) + 1.0));
                                float _3725 = exp2(log2(1.0 / ((_3702 * 3.5) + 5.0)) * 0.25);
                                float _3726 = 1.0 - _1109;
                                float _3733 = sqrt(1.0 - ((1.0 - (_3726 * _3726)) * (1.0 - (_3725 * _3725))));
                                float _3734 = _3733 * _3733;
                                float _3735 = _3734 * _3734;
                                float _3736 = _3682 - _3154;
                                float _3737 = _3683 - _3155;
                                float _3738 = _3684 - _3156;
                                float _3742 = inversesqrt(dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738)));
                                float _3746 = dot(vec3(_906, _909, _912), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4908 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3750 = dot(vec3(_906, _909, _912), vec3(_3742 * _3736, _3742 * _3737, _3742 * _3738));
                                float _4919 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3757 = ((_3753 * _3753) * (_3735 + (-1.0))) + 1.0;
                                float _3758 = _3695 * _3734;
                                float _3759 = _3758 * _3758;
                                float _3765 = ((1.0 - _3759) * dot(vec3(_906, _909, _912), vec3(_3682, _3683, _3684))) + _3759;
                                float _4930 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3767 = 1.0 - _3734;
                                float _3777 = (0.5 / (((_3766 * ((_3749 * _3767) + _3734)) + 9.9999999392252902907785028219223e-09) + (((_3766 * _3767) + _3734) * _3749))) * _3766;
                                float _4941 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3787 = (_3712 * _3689) * (((_3735 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3757 * _3757) * ((_3702 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3713 * _3558.y;
                                frontier_phi_83_pred_1 = _3713 * _3558.x;
                                frontier_phi_83_pred_2 = _3787 * _3570.z;
                                frontier_phi_83_pred_3 = _3787 * _3570.y;
                                frontier_phi_83_pred_4 = _3787 * _3570.x;
                                frontier_phi_83_pred_5 = _3713 * _3558.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3795 = frontier_phi_83_pred;
                            _3794 = frontier_phi_83_pred_1;
                            _3793 = frontier_phi_83_pred_2;
                            _3792 = frontier_phi_83_pred_3;
                            _3791 = frontier_phi_83_pred_4;
                            _3796 = frontier_phi_83_pred_5;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            _3502 = _3796 + _3515;
                            _3497 = _3791 + _3510;
                            _3498 = _3792 + _3511;
                            _3499 = _3793 + _3512;
                            if (_3517 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3517;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3502;
                        frontier_phi_77_pred_1 = _3501;
                        frontier_phi_77_pred_2 = _3500;
                        frontier_phi_77_pred_3 = _3499;
                        frontier_phi_77_pred_4 = _3498;
                        frontier_phi_77_pred_5 = _3497;
                    }
                    _3139 = frontier_phi_77_pred;
                    _3137 = frontier_phi_77_pred_1;
                    _3135 = frontier_phi_77_pred_2;
                    _3133 = frontier_phi_77_pred_3;
                    _3131 = frontier_phi_77_pred_4;
                    _3129 = frontier_phi_77_pred_5;
                    uint _3295 = _3294 + 1u;
                    if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3288 = _3129;
                        _3289 = _3131;
                        _3290 = _3133;
                        _3291 = _3135;
                        _3292 = _3137;
                        _3293 = _3139;
                        _3294 = _3295;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3133;
                frontier_phi_58_59_ladder_1 = _3139;
                frontier_phi_58_59_ladder_2 = _3137;
                frontier_phi_58_59_ladder_3 = _3135;
                frontier_phi_58_59_ladder_4 = _3131;
                frontier_phi_58_59_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_58_59_ladder = _3003;
                frontier_phi_58_59_ladder_1 = _3009;
                frontier_phi_58_59_ladder_2 = _3007;
                frontier_phi_58_59_ladder_3 = _3005;
                frontier_phi_58_59_ladder_4 = _3001;
                frontier_phi_58_59_ladder_5 = _2999;
            }
            _3128 = frontier_phi_58_59_ladder_5;
            _3130 = frontier_phi_58_59_ladder_4;
            _3132 = frontier_phi_58_59_ladder;
            _3134 = frontier_phi_58_59_ladder_3;
            _3136 = frontier_phi_58_59_ladder_2;
            _3138 = frontier_phi_58_59_ladder_1;
        }
        float _3143 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _2880 = (_3143 * _3134) + _2313;
        _2882 = (_3143 * _3136) + _2315;
        _2884 = (_3143 * _3138) + _2317;
        _2886 = ((_3128 * _1079) * _3143) + _2661;
        _2888 = ((_3130 * _1080) * _3143) + _2663;
        _2890 = ((_3132 * _1081) * _3143) + _2665;
    }
    else
    {
        _2880 = _2313;
        _2882 = _2315;
        _2884 = _2317;
        _2886 = _2661;
        _2888 = _2663;
        _2890 = _2665;
    }
    uint _2896 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _2902 = cbInstanceData._m0[_2896].x * (_764 ? cbMtdParam._m0[21u].z : cbMtdParam._m0[11u].y);
    float _2903 = cbInstanceData._m0[_2896].y * (_764 ? cbMtdParam._m0[21u].w : cbMtdParam._m0[11u].z);
    float _2904 = cbInstanceData._m0[_2896].z * (_764 ? cbMtdParam._m0[22u].x : cbMtdParam._m0[11u].w);
    float _4957 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4968 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4979 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4990 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2922 = (((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2880 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1093))) + ((_2886 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1932)) * cbPerFrame._m0[3u].x)) + _2902;
    float _2924 = (_2903 + ((_2888 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1932)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2882 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1093)));
    float _2926 = (_2904 + ((_2890 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1932)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2884 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1093)));
    float _2927 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2928 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
    float _2929 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2935 = cbMtdParam._m0[2u].x * _2902;
    float _2936 = cbMtdParam._m0[2u].y * _2903;
    float _2937 = cbMtdParam._m0[2u].z * _2904;
    float _5016 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2939 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
    float _2944 = cbInstanceData._m0[_985 + 6u].w * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)));
    float _2949 = _883 / cbSceneParam._m0[86u].x;
    float _2950 = _884 / cbSceneParam._m0[86u].y;
    vec4 _2964 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2966 = _2964.x;
    float _2967 = _2964.y;
    float _2968 = _2964.z;
    float _2969 = _2964.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _3024 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _3025 = _3024 / _807;
        float _3036 = _3025 * _857;
        float _3037 = _858 * _3025;
        float _3038 = (-0.0) - _3037;
        float _3039 = _3025 * _859;
        float _3041 = (cbSceneParam._m0[77u].w * _3038) / _3024;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3037;
        float _3049 = sqrt(((_3036 * _3036) + (_3037 * _3037)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3024)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3038 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3191 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3245 = ((abs(_3049 / _3038) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3059 * _3200) - exp2(_3059 * _3201)) * _3189))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2949, _2950, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_2969);
        _3061 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2966;
        _3063 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2967;
        _3065 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _2968;
        _3067 = _3256 * _2969;
    }
    else
    {
        _3061 = _2966;
        _3063 = _2967;
        _3065 = _2968;
        _3067 = _2969;
    }
    bool _3283;
    vec4 _3077;
    vec4 _3099;
    float _3101;
    float _3105;
    float _3106;
    float _3107;
    float _3110;
    float _3113;
    float _3116;
    float _3117;
    bool _3127;
    for (;;)
    {
        _3077 = cbMatDynParam._m0[0u];
        float _3079 = roundEven(_3077.y);
        bool _3080 = _3079 == 3.0;
        float _3081 = log2(_3067);
        float _3085 = exp2(_3081 * cbSceneParam._m0[78u].x);
        float _3086 = exp2(_3081 * cbSceneParam._m0[78u].y);
        float _3087 = exp2(_3081 * cbSceneParam._m0[78u].z);
        float _3088 = _3085 * _2927;
        float _3089 = _3086 * _2928;
        float _3090 = _3087 * _2929;
        float _3097 = _873 + (-0.5);
        _3099 = cbMtdParam._m0[1u];
        _3101 = _3099.y * _3097;
        float _3104 = (_3079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3105 = _3104 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3061)));
        _3106 = _3104 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3063)));
        _3107 = _3104 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = ((_2935 * _2939) * _3085) * _3104;
        _3113 = ((_2936 * _2939) * _3086) * _3104;
        _3116 = ((_2937 * _2939) * _3087) * _3104;
        _3117 = _3097 * 0.999000012874603271484375;
        _3127 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3127)
        {
            if ((cbInstanceData._m0[_985 + 7u].x + _3117) < 0.5)
            {
                _3283 = true;
                break;
            }
        }
        uint _3224 = _986 + uint(_3077.w);
        if ((cbInstanceData._m0[_3224].w < 1.0) && ((cbInstanceData._m0[_3224].w + _3117) < 0.5))
        {
            _3283 = true;
            break;
        }
        if ((_3101 + 1.0) < _3099.x)
        {
            _3283 = true;
            break;
        }
        _3283 = false;
        break;
    }
    float _3488;
    if (_3283)
    {
        discard_state = true;
        _3488 = 0.0;
    }
    else
    {
        _3488 = _2944;
    }
    SV_Target.x = _3105;
    SV_Target.y = _3106;
    SV_Target.z = _3107;
    SV_Target.w = _3488;
    SV_Target_1.x = _3110;
    SV_Target_1.y = _3113;
    SV_Target_1.z = _3116;
    SV_Target_1.w = _2944;
    discard_exit();
}


