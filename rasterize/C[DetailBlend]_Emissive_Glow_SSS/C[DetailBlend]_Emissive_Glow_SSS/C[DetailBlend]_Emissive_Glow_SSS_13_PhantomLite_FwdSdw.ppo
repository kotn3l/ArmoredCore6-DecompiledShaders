#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1295;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _326 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[9u].x * _326.x;
    float _338 = cbMtdParam._m0[9u].y * _326.y;
    float _339 = cbMtdParam._m0[9u].z * _326.z;
    float _345 = exp2(log2(1.0 - _308.w) * 8.0);
    vec4 _357 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _399 = (((((cbMtdParam._m0[13u].x * _357.x) - _337) * _345) + _337) * 4.55000019073486328125) * _391.x;
    float _401 = (((((cbMtdParam._m0[13u].y * _357.y) - _338) * _345) + _338) * 4.55000019073486328125) * _391.y;
    float _403 = (((((cbMtdParam._m0[13u].z * _357.z) - _339) * _345) + _339) * 4.55000019073486328125) * _391.z;
    float _404 = _391.w * _326.w;
    float _428 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _431 = ((cbMtdParam._m0[15u].z - _428) * _345) + _428;
    vec4 _443 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _452 = cbMtdParam._m0[14u].x + _443.z;
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _477 = (_308.z * 2.0) * ((((_465.z - _452) + cbMtdParam._m0[15u].y) * _345) + _452);
    float _492 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3949 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _498 = (_493 * _493) * (3.0 - (_493 * 2.0));
    vec4 _511 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _519 = (_308.x * 2.0) + (-1.0);
    float _520 = (_308.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3960 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    float _539 = (cbMtdParam._m0[14u].z * (((((_465.x - _445) * _345) + _445) * 2.0) + (-1.0))) + _519;
    float _540 = (cbMtdParam._m0[14u].z * (((((_465.y - _446) * _345) + _446) * 2.0) + (-1.0))) + _520;
    float _543 = fma(_526, _237, fma(_540, _229 * TANGENT.x, (_215 * _207) * _539));
    float _546 = fma(_526, _238, fma(_540, _229 * TANGENT.y, (_215 * _208) * _539));
    float _549 = fma(_526, _239, fma(_540, _229 * TANGENT.z, (_215 * _209) * _539));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3971 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _557 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _558 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _559 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _560 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _561 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _562 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _570 = cbMatDynParam._m0[9u].x * _559;
    float _571 = cbMatDynParam._m0[9u].y * _560;
    float _572 = cbMatDynParam._m0[9u].z * _561;
    float _579 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _580 = _579 * _293;
    float _581 = _579 * _294;
    float _582 = _579 * _295;
    float _583 = dot(vec3(_554, _555, _556), vec3(_580, _581, _582));
    float _589 = abs(exp2(log2(_583) * cbMatDynParam._m0[12u].x));
    float _590 = isnan(0.100000001490116119384765625) ? _589 : (isnan(_589) ? 0.100000001490116119384765625 : max(_589, 0.100000001490116119384765625));
    float _596 = ((isnan(0.699999988079071044921875) ? _590 : (isnan(_590) ? 0.699999988079071044921875 : min(_590, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _618 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4047 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4058 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _625 = (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) - _622) * _596) + _622;
    float _644 = dot(vec3(_554, _555, _556), vec3(0.0, -1.0, 0.0));
    float _4069 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _654 = (_647 * _559) * cbMatDynParam._m0[11u].x;
    float _656 = (_647 * _560) * cbMatDynParam._m0[11u].y;
    float _658 = (_647 * _561) * cbMatDynParam._m0[11u].z;
    float _665 = dot(vec3(_580, _581, _582), vec3(_554, _555, _556));
    float _668 = _665 * 2.0;
    float _678 = dot(vec3((-0.0) - (_580 - (_668 * _554)), (-0.0) - (_581 - (_668 * _555)), (-0.0) - (_582 - (_668 * _556))), vec3(0.0, -1.0, 0.0));
    float _4080 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _685 = exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 4.0);
    float _711 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _720 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _722 = _720.w;
    float _741 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _744 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _747 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    vec4 _749 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = _749.x;
    float _763 = (((_749.y - _558) + (_749.w * _558)) * cbMtdParam._m0[3u].x) + _558;
    vec4 _764 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _780 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_751 * _751)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _764.z;
    float _788 = (((cbMatDynParam._m0[15u].x - _562) * cbMatDynParam._m0[15u].w) * _780) + _562;
    float _796 = ((_780 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _763)) + _763;
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * _570) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * _571) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * _572) * cbInstanceData._m0[_822].z;
    float _4091 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    vec4 _834 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _839 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _850 = (((_839.x - _788) + (_839.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    float _863 = (cbMtdParam._m0[3u].x * (((_831 * _722) - _831) + _834.x)) + _831;
    float _864 = (cbMtdParam._m0[3u].x * (((_832 * _722) - _832) + _834.y)) + _832;
    float _865 = (cbMtdParam._m0[3u].x * (((_833 * _722) - _833) + _834.z)) + _833;
    float _879 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_788 * (_570 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_788 * (_571 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_788 * (_572 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _883 = _879 * cbMatDynParam._m0[13u].w;
    float _893 = (_883 * (cbMatDynParam._m0[13u].x - _863)) + _863;
    float _894 = (_883 * (cbMatDynParam._m0[13u].y - _864)) + _864;
    float _895 = (_883 * (cbMatDynParam._m0[13u].z - _865)) + _865;
    float _903 = ((_879 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _850)) + _850;
    float _904 = 1.0 - _903;
    float _905 = _904 * _893;
    float _906 = _904 * _894;
    float _907 = _904 * _895;
    float _911 = (_893 + (-0.039999999105930328369140625)) * _903;
    float _912 = (_894 + (-0.039999999105930328369140625)) * _903;
    float _913 = (_895 + (-0.039999999105930328369140625)) * _903;
    float _914 = _911 + 0.039999999105930328369140625;
    float _915 = _912 + 0.039999999105930328369140625;
    float _916 = _913 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _928 = _925.x * TEXCOORD_4;
    float _929 = _583 * 2.0;
    float _933 = (_929 * _554) - _580;
    float _934 = (_929 * _555) - _581;
    float _935 = (_929 * _556) - _582;
    float _936 = abs(_665);
    float _4124 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_796);
    float _949 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _955 = (1.0 - _949) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _956 = _949 * _938;
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_992, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984));
        float _1023 = fma(_992, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984));
        float _1027 = fma(_992, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984));
        float _1052 = _984 + _554;
        float _1053 = _988 + _555;
        float _1054 = _992 + _556;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_554, _555, _556), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4172 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_554, _555, _556), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4205 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_554, _555, _556), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4238 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1335 = fma(_992, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984));
        float _1339 = fma(_992, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984));
        float _1343 = fma(_992, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984));
        float _1366 = _984 + _554;
        float _1367 = _988 + _555;
        float _1368 = _992 + _556;
        float _1378 = fma(_1368, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1366)) - _1335;
        float _1379 = fma(_1368, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1366)) - _1339;
        float _1380 = fma(_1368, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1366)) - _1343;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1335 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1339 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[35u].z) + ((((((_1343 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1434 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1401.x + (-0.5));
        float _1436 = _1434 * (_1401.y + (-0.5));
        float _1437 = _1434 * (_1401.z + (-0.5));
        float _1444 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1408.x + (-0.5));
        float _1446 = _1444 * (_1408.y + (-0.5));
        float _1447 = _1444 * (_1408.z + (-0.5));
        float _1454 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1415.x + (-0.5));
        float _1456 = _1454 * (_1415.y + (-0.5));
        float _1457 = _1454 * (_1415.z + (-0.5));
        float _1464 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1422.x + (-0.5));
        float _1466 = _1464 * (_1422.y + (-0.5));
        float _1467 = _1464 * (_1422.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_554, _555, _556), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4301 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1498 + 1.0))) + _1503) * _1468;
        float _1513 = _1436 * 0.5;
        float _1514 = _1446 * 0.5;
        float _1515 = _1456 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_554, _555, _556), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4334 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1540 + 1.0))) + _1545) * _1469;
        float _1555 = _1437 * 0.5;
        float _1556 = _1447 * 0.5;
        float _1557 = _1457 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_554, _555, _556), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4367 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1582 + 1.0))) + _1587) * _1470;
        _1604 = _1437;
        _1605 = _1436;
        _1606 = _1435;
        _1607 = _1447;
        _1608 = _1446;
        _1609 = _1445;
        _1610 = _1457;
        _1611 = _1456;
        _1612 = _1455;
        _1613 = _1470;
        _1614 = _1469;
        _1615 = _1468;
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1295;
        _1605 = _1295;
        _1606 = _1295;
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1307)) + _1307;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1308)) + _1308;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1309)) + _1309;
    float _1651 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1628));
    float _1672 = _933 * 0.5;
    float _1673 = _934 * 0.5;
    float _1674 = _935 * 0.5;
    float _1675 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1678 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1681 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1688 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1692 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1696 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1703 = dot(vec4(cbModelParam._m0[39u]), vec4(_1672, _1673, _1674, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1672, _1673, _1674, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_992, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_992, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_992, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1799 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1802 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1830 = frontier_phi_16_14_ladder;
        }
        float _2003;
        if (_1799 > 0.0)
        {
            _2003 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2298;
        if (_1802 > 0.0)
        {
            _2298 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2298 = frontier_phi_37_32_ladder;
        }
        float _2300 = isnan(_2003) ? _1830 : (isnan(_1830) ? _2003 : min(_1830, _2003));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1796) + _1785;
        float _2306 = (_2301 * _1799) + _1789;
        float _2307 = (_2301 * _1802) + _1793;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_15_37_ladder = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2452.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2452.z * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_15_37_ladder_1;
        _1820 = frontier_phi_15_37_ladder;
        _1822 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1738);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_992, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_992, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_992, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1896 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1899 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2008;
        if (_1893 > 0.0)
        {
            _2008 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2008 = frontier_phi_27_23_ladder;
        }
        float _2325;
        if (_1896 > 0.0)
        {
            _2325 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2325 = frontier_phi_39_34_ladder;
        }
        float _2663;
        if (_1899 > 0.0)
        {
            _2663 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2663 = frontier_phi_49_46_ladder;
        }
        float _2665 = isnan(_2325) ? _2008 : (isnan(_2008) ? _2325 : min(_2008, _2325));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1893) + _1882;
        float _2671 = (_2666 * _1896) + _1886;
        float _2672 = (_2666 * _1899) + _1890;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_24_49_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_24_49_ladder_2;
        _1920 = frontier_phi_24_49_ladder_1;
        _1922 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1827);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1935 = (((_955 * _914) + _956) * _928) * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1937 = (((_955 * _915) + _956) * _928) * ((cbModelParam._m0[1u].w * (_1920 - _1820)) + _1820);
    float _1939 = (((_955 * _916) + _956) * _928) * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1995 = _1982 / _1994;
    float _1996 = _1986 / _1994;
    float _1997 = _1990 / _1994;
    float _2144;
    float _2145;
    float _2146;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2024 = ((uint(_1997 > cbSceneParam._m0[59u].y) + uint(_1997 > cbSceneParam._m0[59u].x)) + uint(_1997 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2025 = _2024 + 43u;
        uint _2033 = _2024 + 44u;
        uint _2041 = _2024 + 45u;
        uint _2049 = _2024 + 46u;
        float _2060 = fma(_1994, cbSceneParam._m0[_2025].w, fma(_1990, cbSceneParam._m0[_2025].z, fma(_1986, cbSceneParam._m0[_2025].y, _1982 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1994, cbSceneParam._m0[_2033].w, fma(_1990, cbSceneParam._m0[_2033].z, fma(_1986, cbSceneParam._m0[_2033].y, _1982 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_1994, cbSceneParam._m0[_2049].w, fma(_1990, cbSceneParam._m0[_2049].z, fma(_1986, cbSceneParam._m0[_2049].y, _1982 * cbSceneParam._m0[_2049].x)));
        float _2077 = cbSceneParam._m0[33u].z * _2072;
        float _2079 = cbSceneParam._m0[33u].w * _2072;
        float _2082 = fma(_1994, cbSceneParam._m0[_2041].w, fma(_1990, cbSceneParam._m0[_2041].z, fma(_1986, cbSceneParam._m0[_2041].y, _1982 * cbSceneParam._m0[_2041].x))) / _2072;
        float _2130 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
        float _4493 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2137 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 + _2060) / _2072, (_2079 + _2064) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2060) / _2072, (_2064 - _2077) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2077) / _2072, (_2064 - _2079) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2079) / _2072, (_2077 + _2064) / _2072), _2082), 0.0)).x), vec4(0.25)));
        _2144 = 1.0 - (_2137 * cbSceneParam._m0[34u].x);
        _2145 = 1.0 - (_2137 * cbSceneParam._m0[34u].y);
        _2146 = 1.0 - (_2137 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2144 = 1.0;
        _2145 = 1.0;
        _2146 = 1.0;
    }
    float _2210;
    float _2212;
    float _2214;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2198 = fma(_1994, cbSceneParam._m0[63u].w, fma(_1990, cbSceneParam._m0[63u].z, fma(_1986, cbSceneParam._m0[63u].y, _1982 * cbSceneParam._m0[63u].x)));
        float _2199 = fma(_1994, cbSceneParam._m0[60u].w, fma(_1990, cbSceneParam._m0[60u].z, fma(_1986, cbSceneParam._m0[60u].y, _1982 * cbSceneParam._m0[60u].x))) / _2198;
        float _2200 = fma(_1994, cbSceneParam._m0[61u].w, fma(_1990, cbSceneParam._m0[61u].z, fma(_1986, cbSceneParam._m0[61u].y, _1982 * cbSceneParam._m0[61u].x))) / _2198;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2199 >= cbSceneParam._m0[64u].x) && (_2200 >= cbSceneParam._m0[64u].y)) && (_2199 <= cbSceneParam._m0[64u].z)) && (_2200 <= cbSceneParam._m0[64u].w))
        {
            float _2338 = fma(_1994, cbSceneParam._m0[62u].w, fma(_1990, cbSceneParam._m0[62u].z, fma(_1986, cbSceneParam._m0[62u].y, _1982 * cbSceneParam._m0[62u].x))) / _2198;
            float _2342 = isnan(cbSceneParam._m0[41u].w) ? _2338 : (isnan(_2338) ? cbSceneParam._m0[41u].w : max(_2338, cbSceneParam._m0[41u].w));
            float _2385 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
            float _4509 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
            float _2392 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2199, cbSceneParam._m0[33u].w + _2200), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2199, _2200 - cbSceneParam._m0[33u].z), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].z, _2200 - cbSceneParam._m0[33u].w), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2200), _2342), 0.0)).x), vec4(0.25)));
            float _2396 = 1.0 - (_2392 * cbSceneParam._m0[34u].x);
            float _2397 = 1.0 - (_2392 * cbSceneParam._m0[34u].y);
            float _2398 = 1.0 - (_2392 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
            frontier_phi_36_35_ladder_1 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
            frontier_phi_36_35_ladder_2 = isnan(_2396) ? _2144 : (isnan(_2144) ? _2396 : min(_2144, _2396));
        }
        else
        {
            frontier_phi_36_35_ladder = _2145;
            frontier_phi_36_35_ladder_1 = _2146;
            frontier_phi_36_35_ladder_2 = _2144;
        }
        _2210 = frontier_phi_36_35_ladder_2;
        _2212 = frontier_phi_36_35_ladder;
        _2214 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2210 = _2144;
        _2212 = _2145;
        _2214 = _2146;
    }
    uvec4 _2219 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _2221 = _2219.x * 14u;
    uint _2222 = _2221 + 13u;
    float _2229 = _928 + (-1.0);
    float _2234 = (cbLight._m0[_2222].x * _2229) + 1.0;
    float _2235 = (cbLight._m0[_2222].y * _2229) + 1.0;
    float _2236 = (cbLight._m0[_2222].z * _2229) + 1.0;
    float _2237 = (cbLight._m0[_2222].w * _2229) + 1.0;
    uint _2238 = _2221 + 5u;
    float _2244 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2248 = _2221 + 4u;
    float _2257 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2261 = _2221 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_554, _555, _556));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_554, _555, _556));
    float _4545 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4556 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2238].x * _2244) * _2282) + (((cbLight._m0[_2248].x * _2210) * _2257) * _2280);
    float _2290 = ((_2244 * cbLight._m0[_2238].y) * _2282) + (((cbLight._m0[_2248].y * _2212) * _2257) * _2280);
    float _2291 = ((_2244 * cbLight._m0[_2238].z) * _2282) + (((cbLight._m0[_2248].z * _2214) * _2257) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2221 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2297)
    {
        _2399 = _2289;
        _2401 = _2290;
        _2403 = _2291;
    }
    else
    {
        uint _2407 = _2221 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2221 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4567 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2426 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2289;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2290;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2291;
    }
    bool _2406 = _2295.y == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2406)
    {
        _2461 = _2399;
        _2463 = _2401;
        _2465 = _2403;
    }
    else
    {
        uint _2634 = _2221 + 7u;
        float _2650 = (dot(vec3(cbLight._m0[_2221 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4583 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2653 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2461 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2399;
        _2463 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2401;
        _2465 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2403;
    }
    uint _2468 = _2221 + 8u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _796) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2221].x + _580;
    float _2484 = cbLight._m0[_2221].y + _581;
    float _2485 = cbLight._m0[_2221].z + _582;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2221].xyz));
    float _4599 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _4610 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2497 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2498 = dot(vec3(_554, _555, _556), vec3(_2490, _2491, _2492));
    float _4621 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2490, _2491, _2492));
    float _4632 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2482 * _2482;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0);
    float _2519 = 0.959999978542327880859375 - _911;
    float _2521 = 0.959999978542327880859375 - _912;
    float _2522 = 0.959999978542327880859375 - _913;
    float _2529 = 1.0 - _2482;
    float _2540 = (0.5 / (((_2497 * ((_2496 * _2529) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2529) + _2482) * _2496))) * _2496;
    float _4643 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    uint _2556 = _2221 + 9u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _796) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2261].x + _580;
    float _2570 = cbLight._m0[_2261].y + _581;
    float _2571 = cbLight._m0[_2261].z + _582;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2261].xyz));
    float _4654 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2583 = dot(vec3(_554, _555, _556), vec3(_2576, _2577, _2578));
    float _4665 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2576, _2577, _2578));
    float _4676 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2568 * _2568;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0);
    float _2609 = 1.0 - _2568;
    float _2619 = (0.5 / (((_2497 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2609) + _2568) * _2582))) * _2582;
    float _4687 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2621 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    float _2631 = (((((_2602 * _2519) + _914) * cbLight._m0[_2556].x) * _2621) * _2244) + ((((cbLight._m0[_2468].x * _2210) * ((_2518 * _2519) + _914)) * _2542) * _2257);
    float _2632 = (((((_2602 * _2521) + _915) * cbLight._m0[_2556].y) * _2621) * _2244) + ((((cbLight._m0[_2468].y * _2212) * ((_2518 * _2521) + _915)) * _2542) * _2257);
    float _2633 = (((((_2602 * _2522) + _916) * cbLight._m0[_2556].z) * _2621) * _2244) + ((((cbLight._m0[_2468].z * _2214) * ((_2518 * _2522) + _916)) * _2542) * _2257);
    float _2689;
    float _2691;
    float _2693;
    if (_2297)
    {
        _2689 = _2631;
        _2691 = _2632;
        _2693 = _2633;
    }
    else
    {
        uint _2695 = _2221 + 2u;
        uint _2699 = _2221 + 10u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _796) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _580;
        float _2716 = cbLight._m0[_2695].y + _581;
        float _2717 = cbLight._m0[_2695].z + _582;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2695].xyz));
        float _4698 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2729 = dot(vec3(_554, _555, _556), vec3(_2722, _2723, _2724));
        float _4709 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4720 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
        float _2755 = 1.0 - _2714;
        float _2765 = (0.5 / (((_2497 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2755) + _2714) * _2728))) * _2728;
        float _4731 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2689 = (((((_2748 * _2519) + _914) * cbLight._m0[_2699].x) * _2767) * _2768) + _2631;
        _2691 = (((((_2748 * _2521) + _915) * cbLight._m0[_2699].y) * _2767) * _2768) + _2632;
        _2693 = (((((_2748 * _2522) + _916) * cbLight._m0[_2699].z) * _2767) * _2768) + _2633;
    }
    float _2799;
    float _2801;
    float _2803;
    if (_2406)
    {
        _2799 = _2689;
        _2801 = _2691;
        _2803 = _2693;
    }
    else
    {
        uint _2810 = _2221 + 3u;
        uint _2814 = _2221 + 11u;
        float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2810].w)) * _796) * 0.949999988079071044921875);
        float _2829 = _2828 * _2828;
        float _2830 = cbLight._m0[_2810].x + _580;
        float _2831 = cbLight._m0[_2810].y + _581;
        float _2832 = cbLight._m0[_2810].z + _582;
        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
        float _2837 = _2836 * _2830;
        float _2838 = _2836 * _2831;
        float _2839 = _2836 * _2832;
        float _2840 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2810].xyz));
        float _4747 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2844 = dot(vec3(_554, _555, _556), vec3(_2837, _2838, _2839));
        float _4758 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2848 = dot(vec3(cbLight._m0[_2810].xyz), vec3(_2837, _2838, _2839));
        float _4769 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2852 = _2829 * _2829;
        float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
        float _2863 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
        float _2870 = 1.0 - _2829;
        float _2880 = (0.5 / (((_2497 * ((_2843 * _2870) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2870) + _2829) * _2843))) * _2843;
        float _4780 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2882 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
        float _2883 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2799 = (((((_2863 * _2519) + _914) * cbLight._m0[_2814].x) * _2882) * _2883) + _2689;
        _2801 = (((((_2863 * _2521) + _915) * cbLight._m0[_2814].y) * _2882) * _2883) + _2691;
        _2803 = (((((_2863 * _2522) + _916) * cbLight._m0[_2814].z) * _2882) * _2883) + _2693;
    }
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_2219.y == 0u)
    {
        uvec4 _2904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2905 = _2904.x;
        uint _2916 = uint((float(_2904.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2905))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2905)));
        float _2926 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2927 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        uint _2930 = uint(isnan(14.0) ? _2927 : (isnan(_2927) ? 14.0 : min(_2927, 14.0)));
        uvec4 _2935 = texelFetch(g_lightClusterGridBuffer, int(((_2930 << 2u) + (_2916 << 6u)) >> 2u));
        uint _2936 = _2935.x;
        uint _2937 = _2904.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2937 >> 4u) & 15u)) + 4294967295u) & _2936) == 0u) || ((_2937 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            uint _3210 = 0u;
            uint _3219;
            bool _3220;
            for (;;)
            {
                _3219 = texelFetch(g_lightClassification, int((((_2930 << 5u) + (_2916 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                _3220 = _3219 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3220)
                {
                    frontier_phi_68_pred = _3209;
                    frontier_phi_68_pred_1 = _3208;
                    frontier_phi_68_pred_2 = _3207;
                    frontier_phi_68_pred_3 = _3205;
                    frontier_phi_68_pred_4 = _3204;
                    frontier_phi_68_pred_5 = _3206;
                }
                else
                {
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    uint _3334;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3219;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    for (;;)
                    {
                        uint _3338 = uint(findLSB(_3334)) + (_3210 << 5u);
                        uint _3335 = (_3334 + 4294967295u) & _3334;
                        uint _3340 = _3338 * 48u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3360 = (_3338 * 48u) + 4u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3379 = (_3338 * 48u) + 8u;
                        vec3 _3390 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x));
                        float _3394 = _3354.x - _1995;
                        float _3395 = _3354.y - _1996;
                        float _3396 = _3354.z - _1997;
                        float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                        float _3400 = inversesqrt(_3397);
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3404 = dot(vec3(_741, _744, _747), vec3(_3401, _3402, _3403));
                        float _3409 = 1.0 - (_3397 * _3354.w);
                        float _4806 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3411 = sqrt(_3397) * _3373.w;
                        float _3414 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3404) + _3415;
                        float _3421 = _3411 * _3411;
                        float _3424 = ((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3410) / ((_3421 * 0.699999988079071044921875) + 1.0);
                        float _3428 = (-0.0) - _1995;
                        float _3429 = (-0.0) - _1996;
                        float _3430 = (-0.0) - _1997;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _938;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3435 + _3401;
                        float _3456 = _3436 + _3402;
                        float _3457 = _3437 + _3403;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_741, _744, _747), vec3(_3435, _3436, _3437));
                        float _4822 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3469 = dot(vec3(_741, _744, _747), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4833 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3414 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3404) + _3478;
                        float _4844 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4855 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125))) * _3410;
                        _3263 = (_3424 * _3373.x) + _3331;
                        _3264 = (_3424 * _3373.y) + _3332;
                        _3265 = (_3424 * _3373.z) + _3333;
                        _3260 = (_3504 * _3390.x) + _3328;
                        _3261 = (_3504 * _3390.y) + _3329;
                        _3262 = (_3504 * _3390.z) + _3330;
                        if (_3335 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3335;
                        }
                    }
                    frontier_phi_68_pred = _3265;
                    frontier_phi_68_pred_1 = _3264;
                    frontier_phi_68_pred_2 = _3263;
                    frontier_phi_68_pred_3 = _3261;
                    frontier_phi_68_pred_4 = _3260;
                    frontier_phi_68_pred_5 = _3262;
                }
                _3062 = frontier_phi_68_pred;
                _3060 = frontier_phi_68_pred_1;
                _3058 = frontier_phi_68_pred_2;
                _3054 = frontier_phi_68_pred_3;
                _3052 = frontier_phi_68_pred_4;
                _3056 = frontier_phi_68_pred_5;
                uint _3211 = _3210 + 1u;
                if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3204 = _3052;
                    _3205 = _3054;
                    _3206 = _3056;
                    _3207 = _3058;
                    _3208 = _3060;
                    _3209 = _3062;
                    _3210 = _3211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((4294967295u << _3068) & _2936) == 0u)
        {
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
        }
        else
        {
            float _3197 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float _3198 = _3197 * _1995;
            float _3199 = _3197 * _1996;
            float _3200 = _3197 * _1997;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3311 = _3051;
                float _3312 = _3053;
                float _3313 = _3055;
                float _3314 = _3057;
                float _3315 = _3059;
                float _3316 = _3061;
                uint _3317 = _3068;
                uint _3326;
                bool _3327;
                for (;;)
                {
                    _3326 = texelFetch(g_lightClassification, int((((_2930 << 5u) + (_2916 << 9u)) + (_3317 << 2u)) >> 2u)).x;
                    _3327 = _3326 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3327)
                    {
                        frontier_phi_74_pred = _3313;
                        frontier_phi_74_pred_1 = _3312;
                        frontier_phi_74_pred_2 = _3311;
                        frontier_phi_74_pred_3 = _3316;
                        frontier_phi_74_pred_4 = _3315;
                        frontier_phi_74_pred_5 = _3314;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3522 = _3311;
                        float _3523 = _3312;
                        float _3524 = _3313;
                        float _3525 = _3314;
                        float _3526 = _3315;
                        float _3527 = _3316;
                        uint _3528 = _3326;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3613;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3539 = ((_3317 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3600 = (_3539 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3616 = (_3539 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3539 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_1997, _3648.z, fma(_1996, _3648.y, _3648.x * _1995)) + _3648.w;
                            _3661 = !((fma(_1997, _3629.z, fma(_1996, _3629.y, _3629.x * _1995)) + _3629.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3554.x - _1995;
                                float _3689 = _3554.y - _1996;
                                float _3690 = _3554.z - _1997;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3555 * _3555));
                                float _4866 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3706 = sqrt(_3691) * _3570.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_741, _744, _747))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_1997, _3597.z, fma(_1996, _3597.y, _3597.x * _1995)) + _3597.w) / _3660;
                                float _3720 = (fma(_1997, _3613.z, fma(_1996, _3613.y, _3613.x * _1995)) + _3613.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4882 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _938;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3198;
                                float _3750 = _3696 - _3199;
                                float _3751 = _3697 - _3200;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_741, _744, _747), vec3((-0.0) - _3198, (-0.0) - _3199, (-0.0) - _3200));
                                float _4893 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3763 = dot(vec3(_741, _744, _747), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4904 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_741, _744, _747), vec3(_3695, _3696, _3697))) + _3772;
                                float _4915 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _4926 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3800 * _3582.z;
                                frontier_phi_80_pred_1 = _3800 * _3582.y;
                                frontier_phi_80_pred_2 = _3800 * _3582.x;
                                frontier_phi_80_pred_3 = _3726 * _3570.z;
                                frontier_phi_80_pred_4 = _3726 * _3570.y;
                                frontier_phi_80_pred_5 = _3726 * _3570.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_80_pred;
                            _3805 = frontier_phi_80_pred_1;
                            _3804 = frontier_phi_80_pred_2;
                            _3809 = frontier_phi_80_pred_3;
                            _3808 = frontier_phi_80_pred_4;
                            _3807 = frontier_phi_80_pred_5;
                            _3512 = _3807 + _3525;
                            _3513 = _3808 + _3526;
                            _3514 = _3809 + _3527;
                            _3509 = _3804 + _3522;
                            _3510 = _3805 + _3523;
                            _3511 = _3806 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3511;
                        frontier_phi_74_pred_1 = _3510;
                        frontier_phi_74_pred_2 = _3509;
                        frontier_phi_74_pred_3 = _3514;
                        frontier_phi_74_pred_4 = _3513;
                        frontier_phi_74_pred_5 = _3512;
                    }
                    _3177 = frontier_phi_74_pred;
                    _3175 = frontier_phi_74_pred_1;
                    _3173 = frontier_phi_74_pred_2;
                    _3183 = frontier_phi_74_pred_3;
                    _3181 = frontier_phi_74_pred_4;
                    _3179 = frontier_phi_74_pred_5;
                    uint _3318 = _3317 + 1u;
                    if (_3318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3311 = _3173;
                        _3312 = _3175;
                        _3313 = _3177;
                        _3314 = _3179;
                        _3315 = _3181;
                        _3316 = _3183;
                        _3317 = _3318;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3181;
                frontier_phi_62_63_ladder_1 = _3179;
                frontier_phi_62_63_ladder_2 = _3177;
                frontier_phi_62_63_ladder_3 = _3183;
                frontier_phi_62_63_ladder_4 = _3175;
                frontier_phi_62_63_ladder_5 = _3173;
            }
            else
            {
                frontier_phi_62_63_ladder = _3059;
                frontier_phi_62_63_ladder_1 = _3057;
                frontier_phi_62_63_ladder_2 = _3055;
                frontier_phi_62_63_ladder_3 = _3061;
                frontier_phi_62_63_ladder_4 = _3053;
                frontier_phi_62_63_ladder_5 = _3051;
            }
            _3172 = frontier_phi_62_63_ladder_5;
            _3174 = frontier_phi_62_63_ladder_4;
            _3176 = frontier_phi_62_63_ladder_2;
            _3178 = frontier_phi_62_63_ladder_1;
            _3180 = frontier_phi_62_63_ladder;
            _3182 = frontier_phi_62_63_ladder_3;
        }
        float _3187 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2948 = (_3187 * _3178) + _2461;
        _2950 = (_3187 * _3180) + _2463;
        _2952 = (_3187 * _3182) + _2465;
        _2954 = ((_3172 * _914) * _3187) + _2799;
        _2956 = ((_3174 * _915) * _3187) + _2801;
        _2958 = ((_3176 * _916) * _3187) + _2803;
    }
    else
    {
        _2948 = _2461;
        _2950 = _2463;
        _2952 = _2465;
        _2954 = _2799;
        _2956 = _2801;
        _2958 = _2803;
    }
    uint _2964 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _2970 = cbInstanceData._m0[_2964].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _596) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.x) * _625)) + (((_654 - (_654 * _562)) + (cbMatDynParam._m0[11u].x * _685)) * cbMatDynParam._m0[9u].x));
    float _2971 = cbInstanceData._m0[_2964].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _596) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.y) * _625)) + (((_656 - (_656 * _562)) + (cbMatDynParam._m0[11u].y * _685)) * cbMatDynParam._m0[9u].y));
    float _2972 = cbInstanceData._m0[_2964].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _596) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.z) * _625)) + (((_658 - (_658 * _562)) + (cbMatDynParam._m0[11u].z * _685)) * cbMatDynParam._m0[9u].z));
    float _4942 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4953 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4964 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4975 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _2990 = (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2948 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _928))) + ((_2954 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1727)) * cbPerFrame._m0[3u].x)) + _2970;
    float _2992 = (_2971 + ((_2956 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1727)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2950 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _928)));
    float _2994 = (_2972 + ((_2958 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1727)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2952 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _928)));
    float _3012 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _625) + cbMatDynParam._m0[12u].y;
    float _3017 = cbInstanceData._m0[_820 + 6u].w * (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)));
    float _3022 = _717 / cbSceneParam._m0[86u].x;
    float _3023 = _718 / cbSceneParam._m0[86u].y;
    vec4 _3037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, (log2((isnan(cbSceneParam._m0[77u].w) ? _711 : (isnan(_711) ? cbSceneParam._m0[77u].w : min(_711, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3039 = _3037.x;
    float _3040 = _3037.y;
    float _3041 = _3037.z;
    float _3042 = _3037.w;
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    if (_711 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_711) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _711 : min(cbSceneParam._m0[80u].w, _711));
        float _3077 = _3076 / _711;
        float _3088 = _3077 * _293;
        float _3089 = _294 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3091 = _3077 * _295;
        float _3093 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3094 = _3093 + cbSceneParam._m0[79u].w;
        float _3095 = cbSceneParam._m0[79u].w - _3089;
        float _3101 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3091 * _3091));
        float _3104 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3101;
        float _3109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3273;
        if (abs((_3090 - _3093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3273 = ((((_3094 > 0.0) ? exp2(_3109 * _3094) : (2.0 - exp2(_3111 * _3094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3104;
        }
        else
        {
            float _3233 = 1.0 / cbSceneParam._m0[80u].x;
            float _3234 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : max(_3094, _3095));
            float _3235 = isnan(_3095) ? _3094 : (isnan(_3094) ? _3095 : min(_3094, _3095));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            _3273 = ((abs(_3101 / _3090) * cbSceneParam._m0[80u].y) * ((((_3244 - _3245) * 2.0) - ((exp2(_3109 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0)))) - exp2(_3109 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))))) * _3233)) - ((exp2(_3111 * _3244) - exp2(_3111 * _3245)) * _3233))) + (_3104 * cbSceneParam._m0[80u].z);
        }
        vec4 _3275 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, 1.0), 0.0);
        float _3284 = exp2((_3273 * (-1.44269502162933349609375)) * (1.0 - _3275.w));
        float _3285 = log2(_3284);
        float _3301 = log2(_3042);
        _3113 = (exp2(_3301 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].x)) * _3275.x) / cbSceneParam._m0[78u].x)) + _3039;
        _3115 = (exp2(_3301 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].y)) * _3275.y) / cbSceneParam._m0[78u].y)) + _3040;
        _3117 = (exp2(_3301 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3285 * cbSceneParam._m0[78u].z)) * _3275.z) / cbSceneParam._m0[78u].z)) + _3041;
        _3119 = _3284 * _3042;
    }
    else
    {
        _3113 = _3039;
        _3115 = _3040;
        _3117 = _3041;
        _3119 = _3042;
    }
    float _3131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3132 = _3131 == 3.0;
    float _3133 = log2(_3119);
    float _3137 = exp2(_3133 * cbSceneParam._m0[78u].x);
    float _3138 = exp2(_3133 * cbSceneParam._m0[78u].y);
    float _3139 = exp2(_3133 * cbSceneParam._m0[78u].z);
    float _3140 = _3137 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0)));
    float _3141 = _3138 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)));
    float _3142 = _3139 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0)));
    float _3151 = (_3131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3151 * (_3132 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.y = _3151 * (_3132 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.z = _3151 * (_3132 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.w = _3017;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2970) * _3012) * _3137) * _3151;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2971) * _3012) * _3138) * _3151;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2972) * _3012) * _3139) * _3151;
    SV_Target_1.w = _3017;
}


