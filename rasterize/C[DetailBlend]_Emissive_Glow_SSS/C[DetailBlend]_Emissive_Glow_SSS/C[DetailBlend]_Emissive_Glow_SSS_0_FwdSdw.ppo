#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1102;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _265 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _297 = ((_265.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _288.x;
    float _300 = ((_265.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _288.y;
    float _303 = ((_265.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _288.z;
    float _304 = _288.w * _265.w;
    float _324 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _349 = (_248.z * 2.0) * (cbMtdParam._m0[14u].x + _337.z);
    float _367 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3764 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _374 = (_369 * _369) * (3.0 - (_369 * 2.0));
    vec4 _387 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _395 = (_248.x * 2.0) + (-1.0);
    float _396 = (_248.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3775 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _402 = sqrt(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))));
    float _409 = (cbMtdParam._m0[14u].z * ((_337.x * 2.0) + (-1.0))) + _395;
    float _410 = (cbMtdParam._m0[14u].z * ((_337.y * 2.0) + (-1.0))) + _396;
    float _413 = fma(_402, _233, fma(_410, _225 * TANGENT.x, (_211 * _203) * _409));
    float _416 = fma(_402, _234, fma(_410, _225 * TANGENT.y, (_211 * _204) * _409));
    float _419 = fma(_402, _235, fma(_410, _225 * TANGENT.z, (_211 * _205) * _409));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3786 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _427 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _428 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _429 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _430 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _431 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _432 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _518 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _520 = _518.w;
    float _540 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _543 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _546 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    vec4 _548 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _550 = _548.x;
    float _562 = (((_548.y - _428) + (_548.w * _428)) * cbMtdParam._m0[3u].x) + _428;
    float _579 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_550 * _550)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _587 = (((cbMatDynParam._m0[15u].x - _432) * cbMatDynParam._m0[15u].w) * _579) + _432;
    float _595 = ((_579 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _562)) + _562;
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = _619 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * _429) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * _430) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * _431) * cbInstanceData._m0[_622].z;
    float _3852 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _634 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _639 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _650 = (((_639.x - _587) + (_639.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    float _663 = (cbMtdParam._m0[3u].x * (((_631 * _520) - _631) + _634.x)) + _631;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _520) - _632) + _634.y)) + _632;
    float _665 = (cbMtdParam._m0[3u].x * (((_633 * _520) - _633) + _634.z)) + _633;
    vec4 _666 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _679 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_587 * (_429 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_587 * (_430 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_587 * (_431 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _666.z;
    float _683 = _679 * cbMatDynParam._m0[13u].w;
    float _693 = (_683 * (cbMatDynParam._m0[13u].x - _663)) + _663;
    float _694 = (_683 * (cbMatDynParam._m0[13u].y - _664)) + _664;
    float _695 = (_683 * (cbMatDynParam._m0[13u].z - _665)) + _665;
    float _703 = ((_679 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _650)) + _650;
    float _704 = 1.0 - _703;
    float _705 = _704 * _693;
    float _706 = _704 * _694;
    float _707 = _704 * _695;
    float _711 = (_693 + (-0.039999999105930328369140625)) * _703;
    float _712 = (_694 + (-0.039999999105930328369140625)) * _703;
    float _713 = (_695 + (-0.039999999105930328369140625)) * _703;
    float _714 = _711 + 0.039999999105930328369140625;
    float _715 = _712 + 0.039999999105930328369140625;
    float _716 = _713 + 0.039999999105930328369140625;
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _728 = _725.x * TEXCOORD_4;
    float _729 = dot(vec3(_424, _425, _426), vec3(_507, _508, _509));
    float _732 = _729 * 2.0;
    float _736 = (_732 * _424) - _507;
    float _737 = (_732 * _425) - _508;
    float _738 = (_732 * _426) - _509;
    float _742 = abs(dot(vec3(_507, _508, _509), vec3(_424, _425, _426)));
    float _3885 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _744 = sqrt(_595);
    float _756 = exp2((_744 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _762 = (1.0 - _756) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _763 = _756 * _744;
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _830 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _834 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _859 = _791 + _424;
        float _860 = _795 + _425;
        float _861 = _799 + _426;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_424, _425, _426), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3933 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_424, _425, _426), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3966 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_424, _425, _426), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3999 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1142 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1146 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1150 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1173 = _791 + _424;
        float _1174 = _795 + _425;
        float _1175 = _799 + _426;
        float _1185 = fma(_1175, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173)) - _1142;
        float _1186 = fma(_1175, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173)) - _1146;
        float _1187 = fma(_1175, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173)) - _1150;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1142 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1146 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[35u].z) + ((((((_1150 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1241 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1208.x + (-0.5));
        float _1243 = _1241 * (_1208.y + (-0.5));
        float _1244 = _1241 * (_1208.z + (-0.5));
        float _1251 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1215.x + (-0.5));
        float _1253 = _1251 * (_1215.y + (-0.5));
        float _1254 = _1251 * (_1215.z + (-0.5));
        float _1261 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1222.x + (-0.5));
        float _1263 = _1261 * (_1222.y + (-0.5));
        float _1264 = _1261 * (_1222.z + (-0.5));
        float _1271 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1229.x + (-0.5));
        float _1273 = _1271 * (_1229.y + (-0.5));
        float _1274 = _1271 * (_1229.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_424, _425, _426), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4062 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1305 + 1.0))) + _1310) * _1275;
        float _1320 = _1243 * 0.5;
        float _1321 = _1253 * 0.5;
        float _1322 = _1263 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_424, _425, _426), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4095 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1347 + 1.0))) + _1352) * _1276;
        float _1362 = _1244 * 0.5;
        float _1363 = _1254 * 0.5;
        float _1364 = _1264 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_424, _425, _426), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4128 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1389 + 1.0))) + _1394) * _1277;
        _1411 = _1244;
        _1412 = _1243;
        _1413 = _1242;
        _1414 = _1254;
        _1415 = _1253;
        _1416 = _1252;
        _1417 = _1264;
        _1418 = _1263;
        _1419 = _1262;
        _1420 = _1277;
        _1421 = _1276;
        _1422 = _1275;
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1102;
        _1412 = _1102;
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1114)) + _1114;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1115)) + _1115;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1116)) + _1116;
    float _1458 = fma(_1437, cbSceneParam._m0[89u].z, fma(_1436, cbSceneParam._m0[89u].y, _1435 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1437, cbSceneParam._m0[90u].z, fma(_1436, cbSceneParam._m0[90u].y, _1435 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1437, cbSceneParam._m0[91u].z, fma(_1436, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1435));
    float _1479 = _736 * 0.5;
    float _1480 = _737 * 0.5;
    float _1481 = _738 * 0.5;
    float _1482 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1485 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1488 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1495 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1499 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1503 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1510 = dot(vec4(cbModelParam._m0[39u]), vec4(_1479, _1480, _1481, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1479, _1480, _1481, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_738, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736));
        float _1606 = fma(_738, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736));
        float _1609 = fma(_738, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1637 = frontier_phi_16_14_ladder;
        }
        float _1810;
        if (_1606 > 0.0)
        {
            _1810 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1810 = frontier_phi_25_21_ladder;
        }
        float _2105;
        if (_1609 > 0.0)
        {
            _2105 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2105 = frontier_phi_37_32_ladder;
        }
        float _2107 = isnan(_1810) ? _1637 : (isnan(_1637) ? _1810 : min(_1637, _1810));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1603) + _1592;
        float _2113 = (_2108 * _1606) + _1596;
        float _2114 = (_2108 * _1609) + _1600;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_15_37_ladder = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2259.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2259.z * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_15_37_ladder_1;
        _1627 = frontier_phi_15_37_ladder;
        _1629 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_736, _737, _738), _1545);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1689 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1693 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1697 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1700 = fma(_738, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736));
        float _1703 = fma(_738, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736));
        float _1706 = fma(_738, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736));
        float _1815;
        if (_1700 > 0.0)
        {
            _1815 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1815 = frontier_phi_27_23_ladder;
        }
        float _2132;
        if (_1703 > 0.0)
        {
            _2132 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2132 = frontier_phi_39_34_ladder;
        }
        float _2470;
        if (_1706 > 0.0)
        {
            _2470 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2470 = frontier_phi_49_46_ladder;
        }
        float _2472 = isnan(_2132) ? _1815 : (isnan(_1815) ? _2132 : min(_1815, _2132));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1700) + _1689;
        float _2478 = (_2473 * _1703) + _1693;
        float _2479 = (_2473 * _1706) + _1697;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_24_49_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1725 = frontier_phi_24_49_ladder_2;
        _1727 = frontier_phi_24_49_ladder_1;
        _1729 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_736, _737, _738), _1634);
        _1725 = _1709.x * cbModelParam._m0[1u].z;
        _1727 = _1709.y * cbModelParam._m0[1u].z;
        _1729 = _1709.z * cbModelParam._m0[1u].z;
    }
    float _1742 = (((_762 * _714) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1744 = (((_762 * _715) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1746 = (((_762 * _716) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1729 - _1629)) + _1629);
    float _1749 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1742 * cbSceneParam._m0[91u].x));
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1793 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1802 = _1789 / _1801;
    float _1803 = _1793 / _1801;
    float _1804 = _1797 / _1801;
    float _1951;
    float _1952;
    float _1953;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1831 = ((uint(_1804 > cbSceneParam._m0[59u].y) + uint(_1804 > cbSceneParam._m0[59u].x)) + uint(_1804 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1832 = _1831 + 43u;
        uint _1840 = _1831 + 44u;
        uint _1848 = _1831 + 45u;
        uint _1856 = _1831 + 46u;
        float _1867 = fma(_1801, cbSceneParam._m0[_1832].w, fma(_1797, cbSceneParam._m0[_1832].z, fma(_1793, cbSceneParam._m0[_1832].y, _1789 * cbSceneParam._m0[_1832].x)));
        float _1871 = fma(_1801, cbSceneParam._m0[_1840].w, fma(_1797, cbSceneParam._m0[_1840].z, fma(_1793, cbSceneParam._m0[_1840].y, _1789 * cbSceneParam._m0[_1840].x)));
        float _1879 = fma(_1801, cbSceneParam._m0[_1856].w, fma(_1797, cbSceneParam._m0[_1856].z, fma(_1793, cbSceneParam._m0[_1856].y, _1789 * cbSceneParam._m0[_1856].x)));
        float _1884 = cbSceneParam._m0[33u].z * _1879;
        float _1886 = cbSceneParam._m0[33u].w * _1879;
        float _1889 = fma(_1801, cbSceneParam._m0[_1848].w, fma(_1797, cbSceneParam._m0[_1848].z, fma(_1793, cbSceneParam._m0[_1848].y, _1789 * cbSceneParam._m0[_1848].x))) / _1879;
        float _1937 = (cbSceneParam._m0[33u].x - sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804))) * cbSceneParam._m0[33u].y;
        float _4254 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1944 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 + _1867) / _1879, (_1886 + _1871) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 + _1867) / _1879, (_1871 - _1884) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 - _1884) / _1879, (_1871 - _1886) / _1879), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 - _1886) / _1879, (_1884 + _1871) / _1879), _1889), 0.0)).x), vec4(0.25)));
        _1951 = 1.0 - (_1944 * cbSceneParam._m0[34u].x);
        _1952 = 1.0 - (_1944 * cbSceneParam._m0[34u].y);
        _1953 = 1.0 - (_1944 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1951 = 1.0;
        _1952 = 1.0;
        _1953 = 1.0;
    }
    float _2017;
    float _2019;
    float _2021;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2005 = fma(_1801, cbSceneParam._m0[63u].w, fma(_1797, cbSceneParam._m0[63u].z, fma(_1793, cbSceneParam._m0[63u].y, _1789 * cbSceneParam._m0[63u].x)));
        float _2006 = fma(_1801, cbSceneParam._m0[60u].w, fma(_1797, cbSceneParam._m0[60u].z, fma(_1793, cbSceneParam._m0[60u].y, _1789 * cbSceneParam._m0[60u].x))) / _2005;
        float _2007 = fma(_1801, cbSceneParam._m0[61u].w, fma(_1797, cbSceneParam._m0[61u].z, fma(_1793, cbSceneParam._m0[61u].y, _1789 * cbSceneParam._m0[61u].x))) / _2005;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2006 >= cbSceneParam._m0[64u].x) && (_2007 >= cbSceneParam._m0[64u].y)) && (_2006 <= cbSceneParam._m0[64u].z)) && (_2007 <= cbSceneParam._m0[64u].w))
        {
            float _2145 = fma(_1801, cbSceneParam._m0[62u].w, fma(_1797, cbSceneParam._m0[62u].z, fma(_1793, cbSceneParam._m0[62u].y, _1789 * cbSceneParam._m0[62u].x))) / _2005;
            float _2149 = isnan(cbSceneParam._m0[41u].w) ? _2145 : (isnan(_2145) ? cbSceneParam._m0[41u].w : max(_2145, cbSceneParam._m0[41u].w));
            float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804))) * cbSceneParam._m0[33u].y;
            float _4270 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
            float _2199 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2006, cbSceneParam._m0[33u].w + _2007), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2006, _2007 - cbSceneParam._m0[33u].z), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2006 - cbSceneParam._m0[33u].z, _2007 - cbSceneParam._m0[33u].w), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2006 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2007), _2149), 0.0)).x), vec4(0.25)));
            float _2203 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
            float _2204 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
            float _2205 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2204) ? _1952 : (isnan(_1952) ? _2204 : min(_1952, _2204));
            frontier_phi_36_35_ladder_1 = isnan(_2205) ? _1953 : (isnan(_1953) ? _2205 : min(_1953, _2205));
            frontier_phi_36_35_ladder_2 = isnan(_2203) ? _1951 : (isnan(_1951) ? _2203 : min(_1951, _2203));
        }
        else
        {
            frontier_phi_36_35_ladder = _1952;
            frontier_phi_36_35_ladder_1 = _1953;
            frontier_phi_36_35_ladder_2 = _1951;
        }
        _2017 = frontier_phi_36_35_ladder_2;
        _2019 = frontier_phi_36_35_ladder;
        _2021 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2017 = _1951;
        _2019 = _1952;
        _2021 = _1953;
    }
    uvec4 _2026 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _2028 = _2026.x * 14u;
    uint _2029 = _2028 + 13u;
    float _2036 = _728 + (-1.0);
    float _2041 = (cbLight._m0[_2029].x * _2036) + 1.0;
    float _2042 = (cbLight._m0[_2029].y * _2036) + 1.0;
    float _2043 = (cbLight._m0[_2029].z * _2036) + 1.0;
    float _2044 = (cbLight._m0[_2029].w * _2036) + 1.0;
    uint _2045 = _2028 + 5u;
    float _2051 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
    uint _2055 = _2028 + 4u;
    float _2064 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2068 = _2028 | 1u;
    float _2079 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_424, _425, _426));
    float _2082 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_424, _425, _426));
    float _4306 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _4317 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2087 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.3183098733425140380859375;
    float _2089 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * 0.3183098733425140380859375;
    float _2096 = ((cbLight._m0[_2045].x * _2051) * _2089) + (((cbLight._m0[_2055].x * _2017) * _2064) * _2087);
    float _2097 = ((_2051 * cbLight._m0[_2045].y) * _2089) + (((cbLight._m0[_2055].y * _2019) * _2064) * _2087);
    float _2098 = ((_2051 * cbLight._m0[_2045].z) * _2089) + (((cbLight._m0[_2055].z * _2021) * _2064) * _2087);
    uvec4 _2102 = floatBitsToUint(cbLight._m0[_2028 + 12u]);
    bool _2104 = _2102.x == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2104)
    {
        _2206 = _2096;
        _2208 = _2097;
        _2210 = _2098;
    }
    else
    {
        uint _2214 = _2028 + 6u;
        float _2230 = (dot(vec3(cbLight._m0[_2028 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4328 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2233 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2206 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2096;
        _2208 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2097;
        _2210 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2098;
    }
    bool _2213 = _2102.y == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2213)
    {
        _2268 = _2206;
        _2270 = _2208;
        _2272 = _2210;
    }
    else
    {
        uint _2441 = _2028 + 7u;
        float _2457 = (dot(vec3(cbLight._m0[_2028 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _2458 = _2457 * _2457;
        float _4344 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2459 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2460 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2268 = (((cbLight._m0[_2441].x * 0.3183098733425140380859375) * _2459) * _2460) + _2206;
        _2270 = (((cbLight._m0[_2441].y * 0.3183098733425140380859375) * _2459) * _2460) + _2208;
        _2272 = (((cbLight._m0[_2441].z * 0.3183098733425140380859375) * _2459) * _2460) + _2210;
    }
    uint _2275 = _2028 + 8u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _595) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2028].x + _507;
    float _2291 = cbLight._m0[_2028].y + _508;
    float _2292 = cbLight._m0[_2028].z + _509;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2028].xyz));
    float _4360 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _4371 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2304 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2305 = dot(vec3(_424, _425, _426), vec3(_2297, _2298, _2299));
    float _4382 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2297, _2298, _2299));
    float _4393 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2289 * _2289;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
    float _2326 = 0.959999978542327880859375 - _711;
    float _2328 = 0.959999978542327880859375 - _712;
    float _2329 = 0.959999978542327880859375 - _713;
    float _2336 = 1.0 - _2289;
    float _2347 = (0.5 / (((_2304 * ((_2303 * _2336) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2336) + _2289) * _2303))) * _2303;
    float _4404 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    uint _2363 = _2028 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _595) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2068].x + _507;
    float _2377 = cbLight._m0[_2068].y + _508;
    float _2378 = cbLight._m0[_2068].z + _509;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2068].xyz));
    float _4415 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2390 = dot(vec3(_424, _425, _426), vec3(_2383, _2384, _2385));
    float _4426 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2383, _2384, _2385));
    float _4437 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2409 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2416 = 1.0 - _2375;
    float _2426 = (0.5 / (((_2304 * ((_2389 * _2416) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2416) + _2375) * _2389))) * _2389;
    float _4448 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2438 = (((((_2409 * _2326) + _714) * cbLight._m0[_2363].x) * _2428) * _2051) + ((((cbLight._m0[_2275].x * _2017) * ((_2325 * _2326) + _714)) * _2349) * _2064);
    float _2439 = (((((_2409 * _2328) + _715) * cbLight._m0[_2363].y) * _2428) * _2051) + ((((cbLight._m0[_2275].y * _2019) * ((_2325 * _2328) + _715)) * _2349) * _2064);
    float _2440 = (((((_2409 * _2329) + _716) * cbLight._m0[_2363].z) * _2428) * _2051) + ((((cbLight._m0[_2275].z * _2021) * ((_2325 * _2329) + _716)) * _2349) * _2064);
    float _2496;
    float _2498;
    float _2500;
    if (_2104)
    {
        _2496 = _2438;
        _2498 = _2439;
        _2500 = _2440;
    }
    else
    {
        uint _2502 = _2028 + 2u;
        uint _2506 = _2028 + 10u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _595) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _507;
        float _2523 = cbLight._m0[_2502].y + _508;
        float _2524 = cbLight._m0[_2502].z + _509;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2502].xyz));
        float _4459 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2536 = dot(vec3(_424, _425, _426), vec3(_2529, _2530, _2531));
        float _4470 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4481 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
        float _2562 = 1.0 - _2521;
        float _2572 = (0.5 / (((_2304 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2562) + _2521) * _2535))) * _2535;
        float _4492 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2496 = (((((_2555 * _2326) + _714) * cbLight._m0[_2506].x) * _2574) * _2575) + _2438;
        _2498 = (((((_2555 * _2328) + _715) * cbLight._m0[_2506].y) * _2574) * _2575) + _2439;
        _2500 = (((((_2555 * _2329) + _716) * cbLight._m0[_2506].z) * _2574) * _2575) + _2440;
    }
    float _2606;
    float _2608;
    float _2610;
    if (_2213)
    {
        _2606 = _2496;
        _2608 = _2498;
        _2610 = _2500;
    }
    else
    {
        uint _2617 = _2028 + 3u;
        uint _2621 = _2028 + 11u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _595) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _507;
        float _2638 = cbLight._m0[_2617].y + _508;
        float _2639 = cbLight._m0[_2617].z + _509;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2617].xyz));
        float _4508 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2651 = dot(vec3(_424, _425, _426), vec3(_2644, _2645, _2646));
        float _4519 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4530 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
        float _2677 = 1.0 - _2636;
        float _2687 = (0.5 / (((_2304 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2304 * _2677) + _2636) * _2650))) * _2650;
        float _4541 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2606 = (((((_2670 * _2326) + _714) * cbLight._m0[_2621].x) * _2689) * _2690) + _2496;
        _2608 = (((((_2670 * _2328) + _715) * cbLight._m0[_2621].y) * _2689) * _2690) + _2498;
        _2610 = (((((_2670 * _2329) + _716) * cbLight._m0[_2621].z) * _2689) * _2690) + _2500;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2026.y == 0u)
    {
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2712)));
        float _2733 = (log2(_1804 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
        }
        else
        {
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            uint _3024 = 0u;
            uint _3033;
            bool _3034;
            for (;;)
            {
                _3033 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                _3034 = _3033 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3034)
                {
                    frontier_phi_68_pred = _3023;
                    frontier_phi_68_pred_1 = _3022;
                    frontier_phi_68_pred_2 = _3021;
                    frontier_phi_68_pred_3 = _3019;
                    frontier_phi_68_pred_4 = _3018;
                    frontier_phi_68_pred_5 = _3020;
                }
                else
                {
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    uint _3148;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3033;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3152 = uint(findLSB(_3148)) + (_3024 << 5u);
                        uint _3149 = (_3148 + 4294967295u) & _3148;
                        uint _3154 = _3152 * 48u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3174 = (_3152 * 48u) + 4u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3193 = (_3152 * 48u) + 8u;
                        vec3 _3204 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x));
                        float _3208 = _3168.x - _1802;
                        float _3209 = _3168.y - _1803;
                        float _3210 = _3168.z - _1804;
                        float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                        float _3214 = inversesqrt(_3211);
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3218 = dot(vec3(_540, _543, _546), vec3(_3215, _3216, _3217));
                        float _3223 = 1.0 - (_3211 * _3168.w);
                        float _4567 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3225 = sqrt(_3211) * _3187.w;
                        float _3228 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3218) + _3229;
                        float _3235 = _3225 * _3225;
                        float _3239 = ((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3224) / ((_3235 * 0.699999988079071044921875) + 1.0);
                        float _3243 = (-0.0) - _1802;
                        float _3244 = (-0.0) - _1803;
                        float _3245 = (-0.0) - _1804;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3259 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                        float _3260 = 1.0 - _744;
                        float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                        float _3268 = _3267 * _3267;
                        float _3269 = _3268 * _3268;
                        float _3270 = _3250 + _3215;
                        float _3271 = _3251 + _3216;
                        float _3272 = _3252 + _3217;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3280 = dot(vec3(_540, _543, _546), vec3(_3250, _3251, _3252));
                        float _4583 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3284 = dot(vec3(_540, _543, _546), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                        float _4594 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                        float _3292 = _3228 * _3268;
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3218) + _3293;
                        float _4605 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3298 = 1.0 - _3268;
                        float _3308 = (0.5 / (((_3297 * ((_3283 * _3298) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3268) * _3283))) * _3297;
                        float _4616 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3319 = (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3291 * _3291) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125))) * _3224;
                        _3077 = (_3239 * _3187.x) + _3145;
                        _3078 = (_3239 * _3187.y) + _3146;
                        _3079 = (_3239 * _3187.z) + _3147;
                        _3074 = (_3319 * _3204.x) + _3142;
                        _3075 = (_3319 * _3204.y) + _3143;
                        _3076 = (_3319 * _3204.z) + _3144;
                        if (_3149 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3149;
                        }
                    }
                    frontier_phi_68_pred = _3079;
                    frontier_phi_68_pred_1 = _3078;
                    frontier_phi_68_pred_2 = _3077;
                    frontier_phi_68_pred_3 = _3075;
                    frontier_phi_68_pred_4 = _3074;
                    frontier_phi_68_pred_5 = _3076;
                }
                _2876 = frontier_phi_68_pred;
                _2874 = frontier_phi_68_pred_1;
                _2872 = frontier_phi_68_pred_2;
                _2868 = frontier_phi_68_pred_3;
                _2866 = frontier_phi_68_pred_4;
                _2870 = frontier_phi_68_pred_5;
                uint _3025 = _3024 + 1u;
                if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3018 = _2866;
                    _3019 = _2868;
                    _3020 = _2870;
                    _3021 = _2872;
                    _3022 = _2874;
                    _3023 = _2876;
                    _3024 = _3025;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
        }
        uvec4 _2879 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2880 = _2879.z;
        uint _2882 = (_2880 >> 8u) & 15u;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((4294967295u << _2882) & _2743) == 0u)
        {
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
        }
        else
        {
            float _3011 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
            float _3012 = _3011 * _1802;
            float _3013 = _3011 * _1803;
            float _3014 = _3011 * _1804;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2882 < ((_2880 >> 12u) & 15u))
            {
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _3125 = _2865;
                float _3126 = _2867;
                float _3127 = _2869;
                float _3128 = _2871;
                float _3129 = _2873;
                float _3130 = _2875;
                uint _3131 = _2882;
                uint _3140;
                bool _3141;
                for (;;)
                {
                    _3140 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                    _3141 = _3140 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3141)
                    {
                        frontier_phi_74_pred = _3127;
                        frontier_phi_74_pred_1 = _3126;
                        frontier_phi_74_pred_2 = _3125;
                        frontier_phi_74_pred_3 = _3130;
                        frontier_phi_74_pred_4 = _3129;
                        frontier_phi_74_pred_5 = _3128;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3337 = _3125;
                        float _3338 = _3126;
                        float _3339 = _3127;
                        float _3340 = _3128;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        uint _3343 = _3140;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3428;
                        float _3475;
                        bool _3476;
                        for (;;)
                        {
                            uint _3354 = ((_3131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3415 = (_3354 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3431 = (_3354 * 40u) + 24u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3450 = (_3354 * 40u) + 28u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3475 = fma(_1804, _3463.z, fma(_1803, _3463.y, _3463.x * _1802)) + _3463.w;
                            _3476 = !((fma(_1804, _3444.z, fma(_1803, _3444.y, _3444.x * _1802)) + _3444.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3476)
                            {
                                float _3503 = _3369.x - _1802;
                                float _3504 = _3369.y - _1803;
                                float _3505 = _3369.z - _1804;
                                float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                                float _3509 = inversesqrt(_3506);
                                float _3510 = _3509 * _3503;
                                float _3511 = _3509 * _3504;
                                float _3512 = _3509 * _3505;
                                float _3516 = 1.0 - (_3506 / (_3370 * _3370));
                                float _4627 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3521 = sqrt(_3506) * _3385.w;
                                float _3523 = 1.39999997615814208984375 / (_3521 + 1.39999997615814208984375);
                                float _3524 = _3523 * _3523;
                                float _3527 = ((1.0 - _3524) * dot(vec3(_3510, _3511, _3512), vec3(_540, _543, _546))) + _3524;
                                float _3530 = _3521 * _3521;
                                float _3534 = (fma(_1804, _3412.z, fma(_1803, _3412.y, _3412.x * _1802)) + _3412.w) / _3475;
                                float _3535 = (fma(_1804, _3428.z, fma(_1803, _3428.y, _3428.x * _1802)) + _3428.w) / _3475;
                                float _3539 = 1.0 - dot(vec2(_3534, _3535), vec2(_3534, _3535));
                                float _4643 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3541 = _3540 * (((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3517) / ((_3530 * 0.699999988079071044921875) + 1.0));
                                float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                                float _3554 = 1.0 - _744;
                                float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                                float _3562 = _3561 * _3561;
                                float _3563 = _3562 * _3562;
                                float _3564 = _3510 - _3012;
                                float _3565 = _3511 - _3013;
                                float _3566 = _3512 - _3014;
                                float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                                float _3574 = dot(vec3(_540, _543, _546), vec3((-0.0) - _3012, (-0.0) - _3013, (-0.0) - _3014));
                                float _4654 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3578 = dot(vec3(_540, _543, _546), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                                float _4665 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                                float _3586 = _3523 * _3562;
                                float _3587 = _3586 * _3586;
                                float _3593 = ((1.0 - _3587) * dot(vec3(_540, _543, _546), vec3(_3510, _3511, _3512))) + _3587;
                                float _4676 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3595 = 1.0 - _3562;
                                float _3605 = (0.5 / (((_3594 * ((_3577 * _3595) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3562) * _3577))) * _3594;
                                float _4687 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3615 = (_3540 * _3517) * (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3615 * _3397.z;
                                frontier_phi_80_pred_1 = _3615 * _3397.y;
                                frontier_phi_80_pred_2 = _3615 * _3397.x;
                                frontier_phi_80_pred_3 = _3541 * _3385.z;
                                frontier_phi_80_pred_4 = _3541 * _3385.y;
                                frontier_phi_80_pred_5 = _3541 * _3385.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_80_pred;
                            _3620 = frontier_phi_80_pred_1;
                            _3619 = frontier_phi_80_pred_2;
                            _3624 = frontier_phi_80_pred_3;
                            _3623 = frontier_phi_80_pred_4;
                            _3622 = frontier_phi_80_pred_5;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            _3329 = _3624 + _3342;
                            _3324 = _3619 + _3337;
                            _3325 = _3620 + _3338;
                            _3326 = _3621 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3326;
                        frontier_phi_74_pred_1 = _3325;
                        frontier_phi_74_pred_2 = _3324;
                        frontier_phi_74_pred_3 = _3329;
                        frontier_phi_74_pred_4 = _3328;
                        frontier_phi_74_pred_5 = _3327;
                    }
                    _2991 = frontier_phi_74_pred;
                    _2989 = frontier_phi_74_pred_1;
                    _2987 = frontier_phi_74_pred_2;
                    _2997 = frontier_phi_74_pred_3;
                    _2995 = frontier_phi_74_pred_4;
                    _2993 = frontier_phi_74_pred_5;
                    uint _3132 = _3131 + 1u;
                    if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3125 = _2987;
                        _3126 = _2989;
                        _3127 = _2991;
                        _3128 = _2993;
                        _3129 = _2995;
                        _3130 = _2997;
                        _3131 = _3132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2995;
                frontier_phi_62_63_ladder_1 = _2993;
                frontier_phi_62_63_ladder_2 = _2991;
                frontier_phi_62_63_ladder_3 = _2997;
                frontier_phi_62_63_ladder_4 = _2989;
                frontier_phi_62_63_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_62_63_ladder = _2873;
                frontier_phi_62_63_ladder_1 = _2871;
                frontier_phi_62_63_ladder_2 = _2869;
                frontier_phi_62_63_ladder_3 = _2875;
                frontier_phi_62_63_ladder_4 = _2867;
                frontier_phi_62_63_ladder_5 = _2865;
            }
            _2986 = frontier_phi_62_63_ladder_5;
            _2988 = frontier_phi_62_63_ladder_4;
            _2990 = frontier_phi_62_63_ladder_2;
            _2992 = frontier_phi_62_63_ladder_1;
            _2994 = frontier_phi_62_63_ladder;
            _2996 = frontier_phi_62_63_ladder_3;
        }
        float _3001 = isnan(1.0) ? _728 : (isnan(_728) ? 1.0 : min(_728, 1.0));
        _2755 = (_3001 * _2992) + _2268;
        _2757 = (_3001 * _2994) + _2270;
        _2759 = (_3001 * _2996) + _2272;
        _2761 = ((_2986 * _714) * _3001) + _2606;
        _2763 = ((_2988 * _715) * _3001) + _2608;
        _2765 = ((_2990 * _716) * _3001) + _2610;
    }
    else
    {
        _2755 = _2268;
        _2757 = _2270;
        _2759 = _2272;
        _2761 = _2606;
        _2763 = _2608;
        _2765 = _2610;
    }
    uint _2771 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _2781 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.x) * cbInstanceData._m0[_2771].x;
    float _2786 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.y) * cbInstanceData._m0[_2771].y;
    float _2791 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _374) * _387.z) * cbInstanceData._m0[_2771].z;
    float _4703 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4714 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4725 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4736 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _2809 = (((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2755 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _728))) + ((_2761 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2811 = (_2786 + ((_2763 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2757 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _728)));
    float _2813 = (_2791 + ((_2765 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2759 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _728)));
    float _4762 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2826 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2831 = cbInstanceData._m0[_619 + 6u].w * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)));
    float _2836 = _515 / cbSceneParam._m0[86u].x;
    float _2837 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2890 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2891 = _2890 / _448;
        float _2902 = _2891 * _500;
        float _2903 = _501 * _2891;
        float _2904 = (-0.0) - _2903;
        float _2905 = _2891 * _502;
        float _2907 = (cbSceneParam._m0[77u].w * _2904) / _2890;
        float _2908 = _2907 + cbSceneParam._m0[79u].w;
        float _2909 = cbSceneParam._m0[79u].w - _2903;
        float _2915 = sqrt(((_2902 * _2902) + (_2903 * _2903)) + (_2905 * _2905));
        float _2918 = (1.0 - (cbSceneParam._m0[77u].w / _2890)) * _2915;
        float _2923 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2925 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2904 - _2907) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2908 > 0.0) ? exp2(_2923 * _2908) : (2.0 - exp2(_2925 * _2908))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2918;
        }
        else
        {
            float _3047 = 1.0 / cbSceneParam._m0[80u].x;
            float _3048 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : max(_2908, _2909));
            float _3049 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : min(_2908, _2909));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            _3087 = ((abs(_2915 / _2904) * cbSceneParam._m0[80u].y) * ((((_3058 - _3059) * 2.0) - ((exp2(_2923 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)))) - exp2(_2923 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))))) * _3047)) - ((exp2(_2925 * _3058) - exp2(_2925 * _3059)) * _3047))) + (_2918 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2856);
        _2927 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2929 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2931 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2933 = _3098 * _2856;
    }
    else
    {
        _2927 = _2853;
        _2929 = _2854;
        _2931 = _2855;
        _2933 = _2856;
    }
    float _2945 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2946 = _2945 == 3.0;
    float _2947 = log2(_2933);
    float _2951 = exp2(_2947 * cbSceneParam._m0[78u].x);
    float _2952 = exp2(_2947 * cbSceneParam._m0[78u].y);
    float _2953 = exp2(_2947 * cbSceneParam._m0[78u].z);
    float _2954 = _2951 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)));
    float _2955 = _2952 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)));
    float _2956 = _2953 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)));
    float _2965 = (_2945 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2965 * (_2946 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.y = _2965 * (_2946 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2929)));
    SV_Target.z = _2965 * (_2946 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2931)));
    SV_Target.w = _2831;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2781) * _2826) * _2951) * _2965;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2786) * _2826) * _2952) * _2965;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2791) * _2826) * _2953) * _2965;
    SV_Target_1.w = _2831;
}


