#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1407;
float _3832;
float _3833;
float _3834;
float _3835;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _318 = _312.w;
    vec4 _330 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = cbMtdParam._m0[9u].x * _330.x;
    float _342 = cbMtdParam._m0[9u].y * _330.y;
    float _343 = cbMtdParam._m0[9u].z * _330.z;
    float _349 = exp2(log2(1.0 - _318) * 8.0);
    vec4 _361 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _381 = (((cbMtdParam._m0[13u].x * _361.x) - _341) * _349) + _341;
    float _382 = (((cbMtdParam._m0[13u].y * _361.y) - _342) * _349) + _342;
    float _383 = (((cbMtdParam._m0[13u].z * _361.z) - _343) * _349) + _343;
    float _386 = exp2(log2(_318) * 8.0);
    vec4 _398 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _431 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _439 = (((((cbMtdParam._m0[11u].x * _398.x) - _381) * _386) + _381) * 4.55000019073486328125) * _431.x;
    float _441 = (((((cbMtdParam._m0[11u].y * _398.y) - _382) * _386) + _382) * 4.55000019073486328125) * _431.y;
    float _443 = (((((cbMtdParam._m0[11u].z * _398.z) - _383) * _386) + _383) * 4.55000019073486328125) * _431.z;
    float _444 = _431.w * _330.w;
    vec4 _461 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _468 = cbMtdParam._m0[16u].x + _461.x;
    float _471 = ((cbMtdParam._m0[15u].z - _468) * _349) + _468;
    float _475 = ((cbMtdParam._m0[16u].w - _471) * _386) + _471;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[14u].x + _487.z;
    vec4 _509 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _518 = (((_509.z - _496) + cbMtdParam._m0[15u].y) * _349) + _496;
    vec4 _531 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _543 = (_312.z * 2.0) * ((((_531.z - _518) + cbMtdParam._m0[14u].w) * _386) + _518);
    float _557 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3844 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _563 = (_558 * _558) * (3.0 - (_558 * 2.0));
    vec4 _576 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _584 = (_312.x * 2.0) + (-1.0);
    float _585 = (_312.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3855 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    float _596 = ((_509.x - _489) * _349) + _489;
    float _597 = ((_509.y - _490) * _349) + _490;
    float _610 = (cbMtdParam._m0[14u].z * (((((_531.x - _596) * _386) + _596) * 2.0) + (-1.0))) + _584;
    float _611 = (cbMtdParam._m0[14u].z * (((((_531.y - _597) * _386) + _597) * 2.0) + (-1.0))) + _585;
    float _614 = fma(_591, _241, fma(_611, _233 * TANGENT.x, (_219 * _211) * _610));
    float _617 = fma(_591, _242, fma(_611, _233 * TANGENT.y, (_219 * _212) * _610));
    float _620 = fma(_591, _243, fma(_611, _233 * TANGENT.z, (_219 * _213) * _610));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3866 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _628 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _629 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _630 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _631 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _632 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _633 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _641 = cbMatDynParam._m0[9u].x * _630;
    float _642 = cbMatDynParam._m0[9u].y * _631;
    float _643 = cbMatDynParam._m0[9u].z * _632;
    float _650 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _651 = _650 * _297;
    float _652 = _650 * _298;
    float _653 = _650 * _299;
    float _654 = dot(vec3(_625, _626, _627), vec3(_651, _652, _653));
    float _660 = abs(exp2(log2(_654) * cbMatDynParam._m0[12u].x));
    float _661 = isnan(0.100000001490116119384765625) ? _660 : (isnan(_660) ? 0.100000001490116119384765625 : max(_660, 0.100000001490116119384765625));
    float _667 = ((isnan(0.699999988079071044921875) ? _661 : (isnan(_661) ? 0.699999988079071044921875 : min(_661, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _689 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3942 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3953 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _696 = (((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) - _693) * _667) + _693;
    float _715 = dot(vec3(_625, _626, _627), vec3(0.0, -1.0, 0.0));
    float _3964 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _725 = (_718 * _630) * cbMatDynParam._m0[11u].x;
    float _727 = (_718 * _631) * cbMatDynParam._m0[11u].y;
    float _729 = (_718 * _632) * cbMatDynParam._m0[11u].z;
    float _736 = dot(vec3(_651, _652, _653), vec3(_625, _626, _627));
    float _739 = _736 * 2.0;
    float _749 = dot(vec3((-0.0) - (_651 - (_739 * _625)), (-0.0) - (_652 - (_739 * _626)), (-0.0) - (_653 - (_739 * _627))), vec3(0.0, -1.0, 0.0));
    float _3975 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _756 = exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 4.0);
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1086 = sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299));
        float _1092 = (cbMatDynParam._m0[5u].x * _1086) + cbMatDynParam._m0[5u].y;
        float _3986 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1097 = (cbMatDynParam._m0[5u].z * _1086) + cbMatDynParam._m0[5u].w;
        float _3997 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) - _1093)) + _1093) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _804 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _806 = _804.w;
    float _824 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _827 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _830 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    vec4 _832 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _834 = _832.x;
    float _846 = (((_832.y - _629) + (_832.w * _629)) * cbMtdParam._m0[3u].x) + _629;
    vec4 _847 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _863 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_834 * _834)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _847.z;
    float _871 = (((cbMatDynParam._m0[15u].x - _633) * cbMatDynParam._m0[15u].w) * _863) + _633;
    float _879 = ((_863 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _846)) + _846;
    uint _903 = uint(roundEven(NORMAL.w)) * 13u;
    uint _904 = _903 + 9u;
    uint _905 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * _641) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * _642) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * _643) * cbInstanceData._m0[_905].z;
    float _4008 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    vec4 _917 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.x - _871) + (_922.w * _871)) * cbMtdParam._m0[3u].x) + _871;
    float _946 = (cbMtdParam._m0[3u].x * (((_914 * _806) - _914) + _917.x)) + _914;
    float _947 = (cbMtdParam._m0[3u].x * (((_915 * _806) - _915) + _917.y)) + _915;
    float _948 = (cbMtdParam._m0[3u].x * (((_916 * _806) - _916) + _917.z)) + _916;
    vec4 _949 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _962 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_871 * (_641 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_642 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_643 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _949.z;
    float _966 = _962 * cbMatDynParam._m0[13u].w;
    float _976 = (_966 * (cbMatDynParam._m0[13u].x - _946)) + _946;
    float _977 = (_966 * (cbMatDynParam._m0[13u].y - _947)) + _947;
    float _978 = (_966 * (cbMatDynParam._m0[13u].z - _948)) + _948;
    float _986 = ((_962 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _933)) + _933;
    float _987 = 1.0 - _986;
    float _988 = _987 * _976;
    float _989 = _987 * _977;
    float _990 = _987 * _978;
    float _994 = (_976 + (-0.039999999105930328369140625)) * _986;
    float _995 = (_977 + (-0.039999999105930328369140625)) * _986;
    float _996 = (_978 + (-0.039999999105930328369140625)) * _986;
    float _997 = _994 + 0.039999999105930328369140625;
    float _998 = _995 + 0.039999999105930328369140625;
    float _999 = _996 + 0.039999999105930328369140625;
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _1011 = _1008.x * TEXCOORD_4;
    float _1012 = _654 * 2.0;
    float _1016 = (_1012 * _625) - _651;
    float _1017 = (_1012 * _626) - _652;
    float _1018 = (_1012 * _627) - _653;
    float _1019 = abs(_736);
    float _4041 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_879);
    float _1032 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1021;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1135 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1139 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1164 = _1067 + _625;
        float _1165 = _1071 + _626;
        float _1166 = _1075 + _627;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_625, _626, _627), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4089 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_625, _626, _627), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4122 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_625, _626, _627), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4155 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1454 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1458 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1481 = _1067 + _625;
        float _1482 = _1071 + _626;
        float _1483 = _1075 + _627;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_625, _626, _627), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4218 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_625, _626, _627), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4251 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_625, _626, _627), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4284 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = _1407;
        _1729 = _1407;
        _1730 = _1407;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1419)) + _1419;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1420)) + _1420;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1421)) + _1421;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1016 * 0.5;
    float _1788 = _1017 * 0.5;
    float _1789 = _1018 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1900 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1904 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1908 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1911 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1914 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1917 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1945;
        if (_1911 > 0.0)
        {
            _1945 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1945 = frontier_phi_19_17_ladder;
        }
        float _2149;
        if (_1914 > 0.0)
        {
            _2149 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2149 = frontier_phi_28_24_ladder;
        }
        float _2403;
        if (_1917 > 0.0)
        {
            _2403 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2403 = frontier_phi_40_35_ladder;
        }
        float _2405 = isnan(_2149) ? _1945 : (isnan(_1945) ? _2149 : min(_1945, _2149));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1911) + _1900;
        float _2411 = (_2406 * _1914) + _1904;
        float _2412 = (_2406 * _1917) + _1908;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_18_40_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1933 = frontier_phi_18_40_ladder_2;
        _1935 = frontier_phi_18_40_ladder_1;
        _1937 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1853);
        _1933 = _1921.x * cbModelParam._m0[1u].y;
        _1935 = _1921.y * cbModelParam._m0[1u].y;
        _1937 = _1921.z * cbModelParam._m0[1u].y;
    }
    float _1941 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1941 : min(cbModelParam._m0[25u].w, _1941));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2011 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2014 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2154;
        if (_2008 > 0.0)
        {
            _2154 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2154 = frontier_phi_30_26_ladder;
        }
        float _2430;
        if (_2011 > 0.0)
        {
            _2430 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2430 = frontier_phi_42_37_ladder;
        }
        float _2643;
        if (_2014 > 0.0)
        {
            _2643 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2643 = frontier_phi_51_48_ladder;
        }
        float _2645 = isnan(_2430) ? _2154 : (isnan(_2154) ? _2430 : min(_2154, _2430));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _2008) + _1997;
        float _2651 = (_2646 * _2011) + _2001;
        float _2652 = (_2646 * _2014) + _2005;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1942);
            frontier_phi_27_51_ladder = _2886.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2886.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2886.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_27_51_ladder_2;
        _2035 = frontier_phi_27_51_ladder_1;
        _2037 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1942);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2050 = (((_1038 * _997) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_2033 - _1933)) + _1933);
    float _2052 = (((_1038 * _998) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_2035 - _1935)) + _1935);
    float _2054 = (((_1038 * _999) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_2037 - _1937)) + _1937);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_903 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _1011 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2108 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2112 = _2075 | 1u;
    float _2123 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_625, _626, _627));
    float _2126 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_625, _626, _627));
    float _4420 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _4431 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.3183098733425140380859375;
    float _2133 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2140 = ((cbLight._m0[_2092].x * _2098) * _2133) + ((cbLight._m0[_2102].x * _2108) * _2131);
    float _2141 = ((_2098 * cbLight._m0[_2092].y) * _2133) + ((_2108 * cbLight._m0[_2102].y) * _2131);
    float _2142 = ((_2098 * cbLight._m0[_2092].z) * _2133) + ((_2108 * cbLight._m0[_2102].z) * _2131);
    uvec4 _2146 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2148 = _2146.x == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2148)
    {
        _2159 = _2140;
        _2161 = _2141;
        _2163 = _2142;
    }
    else
    {
        uint _2167 = _2075 + 6u;
        float _2183 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2184 = _2183 * _2183;
        float _4442 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2185 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2186 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2159 = (((cbLight._m0[_2167].x * 0.3183098733425140380859375) * _2185) * _2186) + _2140;
        _2161 = (((cbLight._m0[_2167].y * 0.3183098733425140380859375) * _2185) * _2186) + _2141;
        _2163 = (((cbLight._m0[_2167].z * 0.3183098733425140380859375) * _2185) * _2186) + _2142;
    }
    bool _2166 = _2146.y == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2166)
    {
        _2204 = _2159;
        _2206 = _2161;
        _2208 = _2163;
    }
    else
    {
        uint _2374 = _2075 + 7u;
        float _2390 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2391 = _2390 * _2390;
        float _4458 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2392 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2393 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2204 = (((cbLight._m0[_2374].x * 0.3183098733425140380859375) * _2392) * _2393) + _2159;
        _2206 = (((cbLight._m0[_2374].y * 0.3183098733425140380859375) * _2392) * _2393) + _2161;
        _2208 = (((cbLight._m0[_2374].z * 0.3183098733425140380859375) * _2392) * _2393) + _2163;
    }
    uint _2211 = _2075 + 8u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _879) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2075].x + _651;
    float _2227 = cbLight._m0[_2075].y + _652;
    float _2228 = cbLight._m0[_2075].z + _653;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2075].xyz));
    float _4474 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _4485 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2240 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2241 = dot(vec3(_625, _626, _627), vec3(_2233, _2234, _2235));
    float _4496 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2233, _2234, _2235));
    float _4507 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2225 * _2225;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
    float _2262 = 0.959999978542327880859375 - _994;
    float _2264 = 0.959999978542327880859375 - _995;
    float _2265 = 0.959999978542327880859375 - _996;
    float _2272 = 1.0 - _2225;
    float _2283 = (0.5 / (((_2240 * ((_2239 * _2272) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2272) + _2225) * _2239))) * _2239;
    float _4518 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    uint _2296 = _2075 + 9u;
    float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _879) * 0.949999988079071044921875);
    float _2308 = _2307 * _2307;
    float _2309 = cbLight._m0[_2112].x + _651;
    float _2310 = cbLight._m0[_2112].y + _652;
    float _2311 = cbLight._m0[_2112].z + _653;
    float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
    float _2316 = _2315 * _2309;
    float _2317 = _2315 * _2310;
    float _2318 = _2315 * _2311;
    float _2319 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2112].xyz));
    float _4529 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2323 = dot(vec3(_625, _626, _627), vec3(_2316, _2317, _2318));
    float _4540 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2327 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2316, _2317, _2318));
    float _4551 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2331 = _2308 * _2308;
    float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
    float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2349 = 1.0 - _2308;
    float _2359 = (0.5 / (((_2240 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2349) + _2308) * _2322))) * _2322;
    float _4562 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2361 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
    float _2371 = (((((_2342 * _2262) + _997) * cbLight._m0[_2296].x) * _2361) * _2098) + (((((_2261 * _2262) + _997) * cbLight._m0[_2211].x) * _2285) * _2108);
    float _2372 = (((((_2342 * _2264) + _998) * cbLight._m0[_2296].y) * _2361) * _2098) + (((((_2261 * _2264) + _998) * cbLight._m0[_2211].y) * _2285) * _2108);
    float _2373 = (((((_2342 * _2265) + _999) * cbLight._m0[_2296].z) * _2361) * _2098) + (((((_2261 * _2265) + _999) * cbLight._m0[_2211].z) * _2285) * _2108);
    float _2435;
    float _2437;
    float _2439;
    if (_2148)
    {
        _2435 = _2371;
        _2437 = _2372;
        _2439 = _2373;
    }
    else
    {
        uint _2441 = _2075 + 2u;
        uint _2445 = _2075 + 10u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _879) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _651;
        float _2462 = cbLight._m0[_2441].y + _652;
        float _2463 = cbLight._m0[_2441].z + _653;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2441].xyz));
        float _4573 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2475 = dot(vec3(_625, _626, _627), vec3(_2468, _2469, _2470));
        float _4584 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4595 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2240 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2501) + _2460) * _2474))) * _2474;
        float _4606 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2435 = (((((_2494 * _2262) + _997) * cbLight._m0[_2445].x) * _2513) * _2514) + _2371;
        _2437 = (((((_2494 * _2264) + _998) * cbLight._m0[_2445].y) * _2513) * _2514) + _2372;
        _2439 = (((((_2494 * _2265) + _999) * cbLight._m0[_2445].z) * _2513) * _2514) + _2373;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2166)
    {
        _2549 = _2435;
        _2551 = _2437;
        _2553 = _2439;
    }
    else
    {
        uint _2560 = _2075 + 3u;
        uint _2564 = _2075 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _879) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _651;
        float _2581 = cbLight._m0[_2560].y + _652;
        float _2582 = cbLight._m0[_2560].z + _653;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2560].xyz));
        float _4622 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2594 = dot(vec3(_625, _626, _627), vec3(_2587, _2588, _2589));
        float _4633 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4644 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2240 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2620) + _2579) * _2593))) * _2593;
        float _4655 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2549 = (((((_2613 * _2262) + _997) * cbLight._m0[_2564].x) * _2632) * _2633) + _2435;
        _2551 = (((((_2613 * _2264) + _998) * cbLight._m0[_2564].y) * _2632) * _2633) + _2437;
        _2553 = (((((_2613 * _2265) + _999) * cbLight._m0[_2564].z) * _2632) * _2633) + _2439;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2073.y == 0u)
    {
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2708;
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2708;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2708;
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.x;
        uint _2735 = uint((float(_2723.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2724))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2724)));
        float _2745 = (log2(_2711 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2746 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        uint _2749 = uint(isnan(14.0) ? _2746 : (isnan(_2746) ? 14.0 : min(_2746, 14.0)));
        uvec4 _2754 = texelFetch(g_lightClusterGridBuffer, int(((_2749 << 2u) + (_2735 << 6u)) >> 2u));
        uint _2755 = _2754.x;
        uint _2756 = _2723.z;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((((1u << ((_2756 >> 4u) & 15u)) + 4294967295u) & _2755) == 0u) || ((_2756 & 240u) == 0u))
        {
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
        }
        else
        {
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            uint _3058 = 0u;
            uint _3067;
            bool _3068;
            for (;;)
            {
                _3067 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                _3068 = _3067 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3068)
                {
                    frontier_phi_68_pred = _3054;
                    frontier_phi_68_pred_1 = _3057;
                    frontier_phi_68_pred_2 = _3056;
                    frontier_phi_68_pred_3 = _3055;
                    frontier_phi_68_pred_4 = _3053;
                    frontier_phi_68_pred_5 = _3052;
                }
                else
                {
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    uint _3203;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3067;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    for (;;)
                    {
                        uint _3207 = uint(findLSB(_3203)) + (_3058 << 5u);
                        uint _3204 = (_3203 + 4294967295u) & _3203;
                        uint _3209 = _3207 * 48u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3229 = (_3207 * 48u) + 4u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 3u)).x));
                        uint _3248 = (_3207 * 48u) + 8u;
                        vec3 _3259 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x));
                        float _3263 = _3223.x - _2709;
                        float _3264 = _3223.y - _2710;
                        float _3265 = _3223.z - _2711;
                        float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                        float _3269 = inversesqrt(_3266);
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3273 = dot(vec3(_824, _827, _830), vec3(_3270, _3271, _3272));
                        float _3278 = 1.0 - (_3266 * _3223.w);
                        float _4681 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3280 = sqrt(_3266) * _3242.w;
                        float _3283 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3273) + _3284;
                        float _3290 = _3280 * _3280;
                        float _3293 = ((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3279) / ((_3290 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _2709;
                        float _3298 = (-0.0) - _2710;
                        float _3299 = (-0.0) - _2711;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3314 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _1021;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3304 + _3270;
                        float _3326 = _3305 + _3271;
                        float _3327 = _3306 + _3272;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_824, _827, _830), vec3(_3304, _3305, _3306));
                        float _4697 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3339 = dot(vec3(_824, _827, _830), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4708 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3283 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3273) + _3348;
                        float _4719 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4730 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3346 * _3346) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125))) * _3279;
                        _3127 = (_3293 * _3242.x) + _3200;
                        _3128 = (_3293 * _3242.y) + _3201;
                        _3129 = (_3293 * _3242.z) + _3202;
                        _3124 = (_3374 * _3259.x) + _3197;
                        _3125 = (_3374 * _3259.y) + _3198;
                        _3126 = (_3374 * _3259.z) + _3199;
                        if (_3204 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3204;
                        }
                    }
                    frontier_phi_68_pred = _3126;
                    frontier_phi_68_pred_1 = _3129;
                    frontier_phi_68_pred_2 = _3128;
                    frontier_phi_68_pred_3 = _3127;
                    frontier_phi_68_pred_4 = _3125;
                    frontier_phi_68_pred_5 = _3124;
                }
                _2896 = frontier_phi_68_pred;
                _2902 = frontier_phi_68_pred_1;
                _2900 = frontier_phi_68_pred_2;
                _2898 = frontier_phi_68_pred_3;
                _2894 = frontier_phi_68_pred_4;
                _2892 = frontier_phi_68_pred_5;
                uint _3059 = _3058 + 1u;
                if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3052 = _2892;
                    _3053 = _2894;
                    _3054 = _2896;
                    _3055 = _2898;
                    _3056 = _2900;
                    _3057 = _2902;
                    _3058 = _3059;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
        }
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.z;
        uint _2908 = (_2906 >> 8u) & 15u;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((4294967295u << _2908) & _2755) == 0u)
        {
            _3020 = _2891;
            _3022 = _2893;
            _3024 = _2895;
            _3026 = _2897;
            _3028 = _2899;
            _3030 = _2901;
        }
        else
        {
            float _3045 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
            float _3046 = _3045 * _2709;
            float _3047 = _3045 * _2710;
            float _3048 = _3045 * _2711;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2908 < ((_2906 >> 12u) & 15u))
            {
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3180 = _2891;
                float _3181 = _2893;
                float _3182 = _2895;
                float _3183 = _2897;
                float _3184 = _2899;
                float _3185 = _2901;
                uint _3186 = _2908;
                uint _3195;
                bool _3196;
                for (;;)
                {
                    _3195 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                    _3196 = _3195 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3196)
                    {
                        frontier_phi_79_pred = _3185;
                        frontier_phi_79_pred_1 = _3184;
                        frontier_phi_79_pred_2 = _3183;
                        frontier_phi_79_pred_3 = _3182;
                        frontier_phi_79_pred_4 = _3181;
                        frontier_phi_79_pred_5 = _3180;
                    }
                    else
                    {
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        float _3404 = _3183;
                        float _3405 = _3184;
                        float _3406 = _3185;
                        uint _3407 = _3195;
                        uint _3408;
                        vec4 _3433;
                        float _3434;
                        vec4 _3449;
                        vec3 _3461;
                        vec4 _3476;
                        vec4 _3492;
                        float _3539;
                        bool _3540;
                        for (;;)
                        {
                            uint _3418 = ((_3186 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3407));
                            _3408 = (_3407 + 4294967295u) & _3407;
                            uint _3420 = _3418 * 40u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3434 = _3433.w;
                            uint _3436 = (_3418 * 40u) + 4u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3418 * 40u) + 8u;
                            _3461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x));
                            uint _3463 = (_3418 * 40u) + 16u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3479 = (_3418 * 40u) + 20u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3495 = (_3418 * 40u) + 24u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3514 = (_3418 * 40u) + 28u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            _3539 = fma(_2711, _3527.z, fma(_2710, _3527.y, _3527.x * _2709)) + _3527.w;
                            _3540 = !((fma(_2711, _3508.z, fma(_2710, _3508.y, _3508.x * _2709)) + _3508.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3540)
                            {
                                float _3567 = _3433.x - _2709;
                                float _3568 = _3433.y - _2710;
                                float _3569 = _3433.z - _2711;
                                float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                                float _3573 = inversesqrt(_3570);
                                float _3574 = _3573 * _3567;
                                float _3575 = _3573 * _3568;
                                float _3576 = _3573 * _3569;
                                float _3580 = 1.0 - (_3570 / (_3434 * _3434));
                                float _4741 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3585 = sqrt(_3570) * _3449.w;
                                float _3587 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                                float _3588 = _3587 * _3587;
                                float _3591 = ((1.0 - _3588) * dot(vec3(_3574, _3575, _3576), vec3(_824, _827, _830))) + _3588;
                                float _3594 = _3585 * _3585;
                                float _3598 = (fma(_2711, _3476.z, fma(_2710, _3476.y, _3476.x * _2709)) + _3476.w) / _3539;
                                float _3599 = (fma(_2711, _3492.z, fma(_2710, _3492.y, _3492.x * _2709)) + _3492.w) / _3539;
                                float _3603 = 1.0 - dot(vec2(_3598, _3599), vec2(_3598, _3599));
                                float _4757 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3605 = _3604 * (((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3581) / ((_3594 * 0.699999988079071044921875) + 1.0));
                                float _3617 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                                float _3618 = 1.0 - _1021;
                                float _3625 = sqrt(1.0 - ((1.0 - (_3618 * _3618)) * (1.0 - (_3617 * _3617))));
                                float _3626 = _3625 * _3625;
                                float _3627 = _3626 * _3626;
                                float _3628 = _3574 - _3046;
                                float _3629 = _3575 - _3047;
                                float _3630 = _3576 - _3048;
                                float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                                float _3638 = dot(vec3(_824, _827, _830), vec3((-0.0) - _3046, (-0.0) - _3047, (-0.0) - _3048));
                                float _4768 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3642 = dot(vec3(_824, _827, _830), vec3(_3634 * _3628, _3634 * _3629, _3634 * _3630));
                                float _4779 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3649 = ((_3645 * _3645) * (_3627 + (-1.0))) + 1.0;
                                float _3650 = _3587 * _3626;
                                float _3651 = _3650 * _3650;
                                float _3657 = ((1.0 - _3651) * dot(vec3(_824, _827, _830), vec3(_3574, _3575, _3576))) + _3651;
                                float _4790 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3659 = 1.0 - _3626;
                                float _3669 = (0.5 / (((_3658 * ((_3641 * _3659) + _3626)) + 9.9999999392252902907785028219223e-09) + (((_3658 * _3659) + _3626) * _3641))) * _3658;
                                float _4801 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3679 = (_3604 * _3581) * (((_3627 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3649 * _3649) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3605 * _3449.z;
                                frontier_phi_85_pred_1 = _3605 * _3449.y;
                                frontier_phi_85_pred_2 = _3605 * _3449.x;
                                frontier_phi_85_pred_3 = _3679 * _3461.z;
                                frontier_phi_85_pred_4 = _3679 * _3461.y;
                                frontier_phi_85_pred_5 = _3679 * _3461.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_85_pred;
                            _3687 = frontier_phi_85_pred_1;
                            _3686 = frontier_phi_85_pred_2;
                            _3685 = frontier_phi_85_pred_3;
                            _3684 = frontier_phi_85_pred_4;
                            _3683 = frontier_phi_85_pred_5;
                            _3391 = _3686 + _3404;
                            _3392 = _3687 + _3405;
                            _3393 = _3688 + _3406;
                            _3388 = _3683 + _3401;
                            _3389 = _3684 + _3402;
                            _3390 = _3685 + _3403;
                            if (_3408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3408;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3393;
                        frontier_phi_79_pred_1 = _3392;
                        frontier_phi_79_pred_2 = _3391;
                        frontier_phi_79_pred_3 = _3390;
                        frontier_phi_79_pred_4 = _3389;
                        frontier_phi_79_pred_5 = _3388;
                    }
                    _3031 = frontier_phi_79_pred;
                    _3029 = frontier_phi_79_pred_1;
                    _3027 = frontier_phi_79_pred_2;
                    _3025 = frontier_phi_79_pred_3;
                    _3023 = frontier_phi_79_pred_4;
                    _3021 = frontier_phi_79_pred_5;
                    uint _3187 = _3186 + 1u;
                    if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3180 = _3021;
                        _3181 = _3023;
                        _3182 = _3025;
                        _3183 = _3027;
                        _3184 = _3029;
                        _3185 = _3031;
                        _3186 = _3187;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3027;
                frontier_phi_60_61_ladder_1 = _3031;
                frontier_phi_60_61_ladder_2 = _3029;
                frontier_phi_60_61_ladder_3 = _3025;
                frontier_phi_60_61_ladder_4 = _3023;
                frontier_phi_60_61_ladder_5 = _3021;
            }
            else
            {
                frontier_phi_60_61_ladder = _2897;
                frontier_phi_60_61_ladder_1 = _2901;
                frontier_phi_60_61_ladder_2 = _2899;
                frontier_phi_60_61_ladder_3 = _2895;
                frontier_phi_60_61_ladder_4 = _2893;
                frontier_phi_60_61_ladder_5 = _2891;
            }
            _3020 = frontier_phi_60_61_ladder_5;
            _3022 = frontier_phi_60_61_ladder_4;
            _3024 = frontier_phi_60_61_ladder_3;
            _3026 = frontier_phi_60_61_ladder;
            _3028 = frontier_phi_60_61_ladder_2;
            _3030 = frontier_phi_60_61_ladder_1;
        }
        float _3035 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2767 = (_3035 * _3026) + _2204;
        _2769 = (_3035 * _3028) + _2206;
        _2771 = (_3035 * _3030) + _2208;
        _2773 = ((_3020 * _997) * _3035) + _2549;
        _2775 = ((_3022 * _998) * _3035) + _2551;
        _2777 = ((_3024 * _999) * _3035) + _2553;
    }
    else
    {
        _2767 = _2204;
        _2769 = _2206;
        _2771 = _2208;
        _2773 = _2549;
        _2775 = _2551;
        _2777 = _2553;
    }
    uint _2783 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _2789 = cbInstanceData._m0[_2783].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _667) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.x) * _696)) + (((_725 - (_725 * _633)) + (cbMatDynParam._m0[11u].x * _756)) * cbMatDynParam._m0[9u].x));
    float _2790 = cbInstanceData._m0[_2783].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _667) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.y) * _696)) + (((_727 - (_727 * _633)) + (cbMatDynParam._m0[11u].y * _756)) * cbMatDynParam._m0[9u].y));
    float _2791 = cbInstanceData._m0[_2783].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _667) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _563) * _576.z) * _696)) + (((_729 - (_729 * _633)) + (cbMatDynParam._m0[11u].z * _756)) * cbMatDynParam._m0[9u].z));
    float _4817 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4828 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4839 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4850 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _2809 = (((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2767 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1011))) + ((_2773 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + _2789;
    float _2811 = (_2790 + ((_2775 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2769 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1011)));
    float _2813 = (_2791 + ((_2777 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2771 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1011)));
    float _2814 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2815 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2816 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2822 = cbMtdParam._m0[2u].x * _2789;
    float _2823 = cbMtdParam._m0[2u].y * _2790;
    float _2824 = cbMtdParam._m0[2u].z * _2791;
    float _2831 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _696) + cbMatDynParam._m0[12u].y;
    float _2836 = cbInstanceData._m0[_903 + 6u].w * (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)));
    float _2841 = _801 / cbSceneParam._m0[86u].x;
    float _2842 = _802 / cbSceneParam._m0[86u].y;
    vec4 _2856 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2858 = _2856.x;
    float _2859 = _2856.y;
    float _2860 = _2856.z;
    float _2861 = _2856.w;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2916 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2917 = _2916 / _782;
        float _2928 = _2917 * _297;
        float _2929 = _298 * _2917;
        float _2930 = (-0.0) - _2929;
        float _2931 = _2917 * _299;
        float _2933 = (cbSceneParam._m0[77u].w * _2930) / _2916;
        float _2934 = _2933 + cbSceneParam._m0[79u].w;
        float _2935 = cbSceneParam._m0[79u].w - _2929;
        float _2941 = sqrt(((_2928 * _2928) + (_2929 * _2929)) + (_2931 * _2931));
        float _2944 = (1.0 - (cbSceneParam._m0[77u].w / _2916)) * _2941;
        float _2949 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2951 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3137;
        if (abs((_2930 - _2933) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3137 = ((((_2934 > 0.0) ? exp2(_2949 * _2934) : (2.0 - exp2(_2951 * _2934))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2944;
        }
        else
        {
            float _3081 = 1.0 / cbSceneParam._m0[80u].x;
            float _3082 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : max(_2934, _2935));
            float _3083 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : min(_2934, _2935));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            _3137 = ((abs(_2941 / _2930) * cbSceneParam._m0[80u].y) * ((((_3092 - _3093) * 2.0) - ((exp2(_2949 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)))) - exp2(_2949 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))))) * _3081)) - ((exp2(_2951 * _3092) - exp2(_2951 * _3093)) * _3081))) + (_2944 * cbSceneParam._m0[80u].z);
        }
        vec4 _3139 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, 1.0), 0.0);
        float _3148 = exp2((_3137 * (-1.44269502162933349609375)) * (1.0 - _3139.w));
        float _3149 = log2(_3148);
        float _3165 = log2(_2861);
        _2953 = (exp2(_3165 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].x)) * _3139.x) / cbSceneParam._m0[78u].x)) + _2858;
        _2955 = (exp2(_3165 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].y)) * _3139.y) / cbSceneParam._m0[78u].y)) + _2859;
        _2957 = (exp2(_3165 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].z)) * _3139.z) / cbSceneParam._m0[78u].z)) + _2860;
        _2959 = _3148 * _2861;
    }
    else
    {
        _2953 = _2858;
        _2955 = _2859;
        _2957 = _2860;
        _2959 = _2861;
    }
    bool _3175;
    vec4 _2969;
    vec4 _2991;
    float _2993;
    float _2997;
    float _2998;
    float _2999;
    float _3002;
    float _3005;
    float _3008;
    float _3009;
    bool _3019;
    for (;;)
    {
        _2969 = cbMatDynParam._m0[0u];
        float _2971 = roundEven(_2969.y);
        bool _2972 = _2971 == 3.0;
        float _2973 = log2(_2959);
        float _2977 = exp2(_2973 * cbSceneParam._m0[78u].x);
        float _2978 = exp2(_2973 * cbSceneParam._m0[78u].y);
        float _2979 = exp2(_2973 * cbSceneParam._m0[78u].z);
        float _2980 = _2977 * _2814;
        float _2981 = _2978 * _2815;
        float _2982 = _2979 * _2816;
        float _2989 = _789 + (-0.5);
        _2991 = cbMtdParam._m0[1u];
        _2993 = _2991.y * _2989;
        float _2996 = (_2971 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2997 = _2996 * (_2972 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2953)));
        _2998 = _2996 * (_2972 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2955)));
        _2999 = _2996 * (_2972 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2957)));
        _3002 = ((_2822 * _2831) * _2977) * _2996;
        _3005 = ((_2823 * _2831) * _2978) * _2996;
        _3008 = ((_2824 * _2831) * _2979) * _2996;
        _3009 = _2989 * 0.999000012874603271484375;
        _3019 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3019)
        {
            if ((cbInstanceData._m0[_903 + 7u].x + _3009) < 0.5)
            {
                _3175 = true;
                break;
            }
        }
        uint _3116 = _904 + uint(_2969.w);
        if ((cbInstanceData._m0[_3116].w < 1.0) && ((cbInstanceData._m0[_3116].w + _3009) < 0.5))
        {
            _3175 = true;
            break;
        }
        if ((_2993 + _444) < _2991.x)
        {
            _3175 = true;
            break;
        }
        _3175 = false;
        break;
    }
    float _3379;
    if (_3175)
    {
        discard_state = true;
        _3379 = 0.0;
    }
    else
    {
        _3379 = _2836;
    }
    SV_Target.x = _2997;
    SV_Target.y = _2998;
    SV_Target.z = _2999;
    SV_Target.w = _3379;
    SV_Target_1.x = _3002;
    SV_Target_1.y = _3005;
    SV_Target_1.z = _3008;
    SV_Target_1.w = _2836;
    discard_exit();
}


