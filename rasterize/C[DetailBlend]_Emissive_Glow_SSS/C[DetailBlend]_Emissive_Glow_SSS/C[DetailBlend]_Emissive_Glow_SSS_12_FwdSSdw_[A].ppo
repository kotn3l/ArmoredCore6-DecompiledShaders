#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3825;
float _3826;
float _3827;
float _3828;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _262.z;
    float _268 = _262.w;
    float _274 = exp2(log2(_267 * 22.0) * 260.0);
    float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _276 = isnan(1.0) ? _275 : (isnan(_275) ? 1.0 : min(_275, 1.0));
    vec4 _290 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _301 = cbMtdParam._m0[10u].x * _290.x;
    float _302 = cbMtdParam._m0[10u].y * _290.y;
    float _303 = cbMtdParam._m0[10u].z * _290.z;
    vec4 _315 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = exp2(log2(1.0 - _268) * 8.0);
    vec4 _343 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _359 = exp2(log2(_268) * 8.0);
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _397 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((((_315.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _397.x) - _301) * _276) + _301;
    float _420 = (((((_315.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _397.y) - _302) * _276) + _302;
    float _421 = (((((_315.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _397.z) - _303) * _276) + _303;
    float _428 = (((cbMtdParam._m0[13u].x * _343.x) - _419) * _331) + _419;
    float _429 = (((cbMtdParam._m0[13u].y * _343.y) - _420) * _331) + _420;
    float _430 = (((cbMtdParam._m0[13u].z * _343.z) - _421) * _331) + _421;
    float _437 = (((cbMtdParam._m0[11u].x * _372.x) - _428) * _359) + _428;
    float _438 = (((cbMtdParam._m0[11u].y * _372.y) - _429) * _359) + _429;
    float _439 = (((cbMtdParam._m0[11u].z * _372.z) - _430) * _359) + _430;
    float _440 = _397.w * _315.w;
    float _471 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _276) + cbMtdParam._m0[17u].x;
    float _474 = ((cbMtdParam._m0[15u].z - _471) * _331) + _471;
    float _477 = ((cbMtdParam._m0[16u].w - _474) * _359) + _474;
    vec4 _489 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _498 = cbMtdParam._m0[14u].y + _489.z;
    vec4 _510 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _529 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _547 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _558 = ((((_267 * 2.0) * (cbMtdParam._m0[14u].x + _510.z)) - _498) * _276) + _498;
    float _562 = (((_529.z - _558) + cbMtdParam._m0[15u].y) * _331) + _558;
    float _566 = (((_547.z - _562) + cbMtdParam._m0[14u].w) * _359) + _562;
    float _580 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3847 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _586 = (_581 * _581) * (3.0 - (_581 * 2.0));
    vec4 _599 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _607 = (_262.x * 2.0) + (-1.0);
    float _608 = (_262.y * 2.0) + (-1.0);
    float _609 = dot(vec2(_607, _608), vec2(_607, _608));
    float _3858 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _614 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    float _619 = ((_510.x - _491) * _276) + _491;
    float _620 = ((_510.y - _492) * _276) + _492;
    float _625 = ((_529.x - _619) * _331) + _619;
    float _626 = ((_529.y - _620) * _331) + _620;
    float _639 = (cbMtdParam._m0[14u].z * (((((_547.x - _625) * _359) + _625) * 2.0) + (-1.0))) + _607;
    float _640 = (cbMtdParam._m0[14u].z * (((((_547.y - _626) * _359) + _626) * 2.0) + (-1.0))) + _608;
    float _643 = fma(_614, _247, fma(_640, _239 * TANGENT.x, (_225 * _217) * _639));
    float _646 = fma(_614, _248, fma(_640, _239 * TANGENT.y, (_225 * _218) * _639));
    float _649 = fma(_614, _249, fma(_640, _239 * TANGENT.z, (_225 * _219) * _639));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3869 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _657 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _658 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _659 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _660 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _661 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _662 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    vec4 _742 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _744 = _742.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_728 * _728) + (_729 * _729)) + (_730 * _730));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1054)) + _1054) < ((_744 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _758 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _760 = _758.w;
    float _778 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _781 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _784 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    vec4 _786 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _788 = _786.x;
    float _800 = (((_786.y - _658) + (_786.w * _658)) * cbMtdParam._m0[3u].x) + _658;
    vec4 _801 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _817 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_788 * _788)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _801.z;
    float _825 = (((cbMatDynParam._m0[15u].x - _662) * cbMatDynParam._m0[15u].w) * _817) + _662;
    float _833 = ((_817 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _800)) + _800;
    uint _857 = uint(roundEven(NORMAL.w)) * 13u;
    uint _858 = _857 + 9u;
    uint _859 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * _659) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * _660) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * _661) * cbInstanceData._m0[_859].z;
    float _3957 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _871 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _876 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _887 = (((_876.x - _825) + (_876.w * _825)) * cbMtdParam._m0[3u].x) + _825;
    float _900 = (cbMtdParam._m0[3u].x * (((_868 * _760) - _868) + _871.x)) + _868;
    float _901 = (cbMtdParam._m0[3u].x * (((_869 * _760) - _869) + _871.y)) + _869;
    float _902 = (cbMtdParam._m0[3u].x * (((_870 * _760) - _870) + _871.z)) + _870;
    float _916 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_825 * (_659 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_825 * (_660 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_825 * (_661 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _920 = _916 * cbMatDynParam._m0[13u].w;
    float _930 = (_920 * (cbMatDynParam._m0[13u].x - _900)) + _900;
    float _931 = (_920 * (cbMatDynParam._m0[13u].y - _901)) + _901;
    float _932 = (_920 * (cbMatDynParam._m0[13u].z - _902)) + _902;
    float _940 = ((_916 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _887)) + _887;
    float _941 = 1.0 - _940;
    float _942 = _941 * _930;
    float _943 = _941 * _931;
    float _944 = _941 * _932;
    float _948 = (_930 + (-0.039999999105930328369140625)) * _940;
    float _949 = (_931 + (-0.039999999105930328369140625)) * _940;
    float _950 = (_932 + (-0.039999999105930328369140625)) * _940;
    float _951 = _948 + 0.039999999105930328369140625;
    float _952 = _949 + 0.039999999105930328369140625;
    float _953 = _950 + 0.039999999105930328369140625;
    vec4 _962 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _965 = _962.x * TEXCOORD_4;
    float _966 = dot(vec3(_654, _655, _656), vec3(_735, _736, _737));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _654) - _735;
    float _974 = (_969 * _655) - _736;
    float _975 = (_969 * _656) - _737;
    float _979 = abs(dot(vec3(_735, _736, _737), vec3(_654, _655, _656)));
    float _3990 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_833);
    float _993 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _999 = (1.0 - _993) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _981;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1096 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1100 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1125 = _1028 + _654;
        float _1126 = _1032 + _655;
        float _1127 = _1036 + _656;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_654, _655, _656), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4038 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_654, _655, _656), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4071 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_654, _655, _656), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4104 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1411 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1415 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1419 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1442 = _1028 + _654;
        float _1443 = _1032 + _655;
        float _1444 = _1036 + _656;
        float _1454 = fma(_1444, cbModelParam._m0[30u].z, fma(_1443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1442)) - _1411;
        float _1455 = fma(_1444, cbModelParam._m0[31u].z, fma(_1443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1442)) - _1415;
        float _1456 = fma(_1444, cbModelParam._m0[32u].z, fma(_1443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1442)) - _1419;
        float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
        float _1473 = ((_1460 * _1454) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1411 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1460 * _1455) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1415 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1460 * _1456) / cbModelParam._m0[35u].z) + ((((((_1419 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        float _1510 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1477.x + (-0.5));
        float _1512 = _1510 * (_1477.y + (-0.5));
        float _1513 = _1510 * (_1477.z + (-0.5));
        float _1520 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1484.x + (-0.5));
        float _1522 = _1520 * (_1484.y + (-0.5));
        float _1523 = _1520 * (_1484.z + (-0.5));
        float _1530 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1491.x + (-0.5));
        float _1532 = _1530 * (_1491.y + (-0.5));
        float _1533 = _1530 * (_1491.z + (-0.5));
        float _1540 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1498.x + (-0.5));
        float _1542 = _1540 * (_1498.y + (-0.5));
        float _1543 = _1540 * (_1498.z + (-0.5));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = _1511 * 0.5;
        float _1548 = _1521 * 0.5;
        float _1549 = _1531 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_654, _655, _656), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4167 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1574 + 1.0))) + _1579) * _1544;
        float _1589 = _1512 * 0.5;
        float _1590 = _1522 * 0.5;
        float _1591 = _1532 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_654, _655, _656), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4200 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1616 + 1.0))) + _1621) * _1545;
        float _1631 = _1513 * 0.5;
        float _1632 = _1523 * 0.5;
        float _1633 = _1533 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_654, _655, _656), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4233 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1658 + 1.0))) + _1663) * _1546;
        _1680 = _1513;
        _1681 = _1512;
        _1682 = _1511;
        _1683 = _1523;
        _1684 = _1522;
        _1685 = _1521;
        _1686 = _1533;
        _1687 = _1532;
        _1688 = _1531;
        _1689 = _1546;
        _1690 = _1545;
        _1691 = _1544;
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
    }
    else
    {
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = _1368;
        _1692 = 0.0;
        _1693 = 0.0;
        _1694 = 0.0;
    }
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1727 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1704));
    float _1748 = _973 * 0.5;
    float _1749 = _974 * 0.5;
    float _1750 = _975 * 0.5;
    float _1751 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1754 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1757 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1764 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1768 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1772 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1779 = dot(vec4(cbModelParam._m0[39u]), vec4(_1748, _1749, _1750, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1748, _1749, _1750, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _833);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1875 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1878 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1906 = frontier_phi_19_17_ladder;
        }
        float _2131;
        if (_1875 > 0.0)
        {
            _2131 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2131 = frontier_phi_28_24_ladder;
        }
        float _2388;
        if (_1878 > 0.0)
        {
            _2388 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2388 = frontier_phi_40_35_ladder;
        }
        float _2390 = isnan(_2131) ? _1906 : (isnan(_1906) ? _2131 : min(_1906, _2131));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1872) + _1861;
        float _2396 = (_2391 * _1875) + _1865;
        float _2397 = (_2391 * _1878) + _1869;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_18_40_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_18_40_ladder_2;
        _1896 = frontier_phi_18_40_ladder_1;
        _1898 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _833);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1972 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1975 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2136;
        if (_1969 > 0.0)
        {
            _2136 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2136 = frontier_phi_30_26_ladder;
        }
        float _2415;
        if (_1972 > 0.0)
        {
            _2415 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2415 = frontier_phi_42_37_ladder;
        }
        float _2628;
        if (_1975 > 0.0)
        {
            _2628 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2628 = frontier_phi_51_48_ladder;
        }
        float _2630 = isnan(_2415) ? _2136 : (isnan(_2136) ? _2415 : min(_2136, _2415));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _1969) + _1958;
        float _2636 = (_2631 * _1972) + _1962;
        float _2637 = (_2631 * _1975) + _1966;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2638;
        float _2641 = _2638 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2637 > _2641) || ((_2637 < _2639) || ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 < _2639) || (_2635 > _2641))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2637, cbModelParam._m0[17u].z, fma(_2636, cbModelParam._m0[17u].y, _2635 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2637, cbModelParam._m0[18u].z, fma(_2636, cbModelParam._m0[18u].y, _2635 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2637, cbModelParam._m0[19u].z, fma(_2636, cbModelParam._m0[19u].y, _2635 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_27_51_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_27_51_ladder_2;
        _1996 = frontier_phi_27_51_ladder_1;
        _1998 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1903);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_999 * _951) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_999 * _952) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_999 * _953) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    vec4 _2032 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_755, _756));
    float _2034 = _2032.w;
    float _2046 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2034);
    float _2047 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2034);
    float _2048 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2034);
    uvec4 _2052 = floatBitsToUint(cbInstanceData._m0[_857 + 5u]);
    uint _2054 = _2052.x * 14u;
    uint _2055 = _2054 + 13u;
    float _2062 = _965 + (-1.0);
    float _2067 = (cbLight._m0[_2055].x * _2062) + 1.0;
    float _2068 = (cbLight._m0[_2055].y * _2062) + 1.0;
    float _2069 = (cbLight._m0[_2055].z * _2062) + 1.0;
    float _2070 = (cbLight._m0[_2055].w * _2062) + 1.0;
    uint _2071 = _2054 + 5u;
    float _2077 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2081 = _2054 + 4u;
    float _2090 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2094 = _2054 | 1u;
    float _2105 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_654, _655, _656));
    float _2108 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_654, _655, _656));
    float _4369 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _4380 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2113 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2115 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2122 = ((cbLight._m0[_2071].x * _2077) * _2115) + (((cbLight._m0[_2081].x * _2046) * _2090) * _2113);
    float _2123 = ((_2077 * cbLight._m0[_2071].y) * _2115) + (((cbLight._m0[_2081].y * _2047) * _2090) * _2113);
    float _2124 = ((_2077 * cbLight._m0[_2071].z) * _2115) + (((cbLight._m0[_2081].z * _2048) * _2090) * _2113);
    uvec4 _2128 = floatBitsToUint(cbLight._m0[_2054 + 12u]);
    bool _2130 = _2128.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2130)
    {
        _2141 = _2122;
        _2143 = _2123;
        _2145 = _2124;
    }
    else
    {
        uint _2149 = _2054 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_2054 + 2u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4391 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2168 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2122;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2123;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2124;
    }
    bool _2148 = _2128.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2148)
    {
        _2186 = _2141;
        _2188 = _2143;
        _2190 = _2145;
    }
    else
    {
        uint _2359 = _2054 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_2054 + 3u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4407 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2378 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2186 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2141;
        _2188 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2143;
        _2190 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2145;
    }
    uint _2193 = _2054 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _833) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2054].x + _735;
    float _2209 = cbLight._m0[_2054].y + _736;
    float _2210 = cbLight._m0[_2054].z + _737;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2054].xyz));
    float _4423 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2222 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2223 = dot(vec3(_654, _655, _656), vec3(_2215, _2216, _2217));
    float _4445 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2215, _2216, _2217));
    float _4456 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2244 = 0.959999978542327880859375 - _948;
    float _2246 = 0.959999978542327880859375 - _949;
    float _2247 = 0.959999978542327880859375 - _950;
    float _2254 = 1.0 - _2207;
    float _2265 = (0.5 / (((_2222 * ((_2221 * _2254) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2254) + _2207) * _2221))) * _2221;
    float _4467 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2281 = _2054 + 9u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _833) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2094].x + _735;
    float _2295 = cbLight._m0[_2094].y + _736;
    float _2296 = cbLight._m0[_2094].z + _737;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2094].xyz));
    float _4478 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2308 = dot(vec3(_654, _655, _656), vec3(_2301, _2302, _2303));
    float _4489 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2301, _2302, _2303));
    float _4500 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2293 * _2293;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2334 = 1.0 - _2293;
    float _2344 = (0.5 / (((_2222 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2334) + _2293) * _2307))) * _2307;
    float _4511 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    float _2356 = (((((_2327 * _2244) + _951) * cbLight._m0[_2281].x) * _2346) * _2077) + ((((cbLight._m0[_2193].x * _2046) * ((_2243 * _2244) + _951)) * _2267) * _2090);
    float _2357 = (((((_2327 * _2246) + _952) * cbLight._m0[_2281].y) * _2346) * _2077) + ((((cbLight._m0[_2193].y * _2047) * ((_2243 * _2246) + _952)) * _2267) * _2090);
    float _2358 = (((((_2327 * _2247) + _953) * cbLight._m0[_2281].z) * _2346) * _2077) + ((((cbLight._m0[_2193].z * _2048) * ((_2243 * _2247) + _953)) * _2267) * _2090);
    float _2420;
    float _2422;
    float _2424;
    if (_2130)
    {
        _2420 = _2356;
        _2422 = _2357;
        _2424 = _2358;
    }
    else
    {
        uint _2426 = _2054 + 2u;
        uint _2430 = _2054 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _833) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _735;
        float _2447 = cbLight._m0[_2426].y + _736;
        float _2448 = cbLight._m0[_2426].z + _737;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2426].xyz));
        float _4522 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2460 = dot(vec3(_654, _655, _656), vec3(_2453, _2454, _2455));
        float _4533 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4544 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2222 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2486) + _2445) * _2459))) * _2459;
        float _4555 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2420 = (((((_2479 * _2244) + _951) * cbLight._m0[_2430].x) * _2498) * _2499) + _2356;
        _2422 = (((((_2479 * _2246) + _952) * cbLight._m0[_2430].y) * _2498) * _2499) + _2357;
        _2424 = (((((_2479 * _2247) + _953) * cbLight._m0[_2430].z) * _2498) * _2499) + _2358;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2148)
    {
        _2534 = _2420;
        _2536 = _2422;
        _2538 = _2424;
    }
    else
    {
        uint _2545 = _2054 + 3u;
        uint _2549 = _2054 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _833) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _735;
        float _2566 = cbLight._m0[_2545].y + _736;
        float _2567 = cbLight._m0[_2545].z + _737;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2545].xyz));
        float _4571 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2579 = dot(vec3(_654, _655, _656), vec3(_2572, _2573, _2574));
        float _4582 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2605 = 1.0 - _2564;
        float _2615 = (0.5 / (((_2222 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2605) + _2564) * _2578))) * _2578;
        float _4604 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2534 = (((((_2598 * _2244) + _951) * cbLight._m0[_2549].x) * _2617) * _2618) + _2420;
        _2536 = (((((_2598 * _2246) + _952) * cbLight._m0[_2549].y) * _2617) * _2618) + _2422;
        _2538 = (((((_2598 * _2247) + _953) * cbLight._m0[_2549].z) * _2617) * _2618) + _2424;
    }
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_2052.y == 0u)
    {
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2693;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2693;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2693;
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.x;
        uint _2720 = uint((float(_2708.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2709))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2709)));
        float _2730 = (log2(_2696 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2731 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        uint _2734 = uint(isnan(14.0) ? _2731 : (isnan(_2731) ? 14.0 : min(_2731, 14.0)));
        uvec4 _2739 = texelFetch(g_lightClusterGridBuffer, int(((_2734 << 2u) + (_2720 << 6u)) >> 2u));
        uint _2740 = _2739.x;
        uint _2741 = _2708.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2741 >> 4u) & 15u)) + 4294967295u) & _2740) == 0u) || ((_2741 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            uint _3050 = 0u;
            uint _3059;
            bool _3060;
            for (;;)
            {
                _3059 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                _3060 = _3059 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3060)
                {
                    frontier_phi_68_pred = _3046;
                    frontier_phi_68_pred_1 = _3049;
                    frontier_phi_68_pred_2 = _3048;
                    frontier_phi_68_pred_3 = _3047;
                    frontier_phi_68_pred_4 = _3045;
                    frontier_phi_68_pred_5 = _3044;
                }
                else
                {
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    uint _3195;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3059;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3199 = uint(findLSB(_3195)) + (_3050 << 5u);
                        uint _3196 = (_3195 + 4294967295u) & _3195;
                        uint _3201 = _3199 * 48u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3221 = (_3199 * 48u) + 4u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3240 = (_3199 * 48u) + 8u;
                        vec3 _3251 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x));
                        float _3255 = _3215.x - _2694;
                        float _3256 = _3215.y - _2695;
                        float _3257 = _3215.z - _2696;
                        float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                        float _3261 = inversesqrt(_3258);
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3265 = dot(vec3(_778, _781, _784), vec3(_3262, _3263, _3264));
                        float _3270 = 1.0 - (_3258 * _3215.w);
                        float _4630 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3272 = sqrt(_3258) * _3234.w;
                        float _3275 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3265) + _3276;
                        float _3282 = _3272 * _3272;
                        float _3286 = ((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3271) / ((_3282 * 0.699999988079071044921875) + 1.0);
                        float _3290 = (-0.0) - _2694;
                        float _3291 = (-0.0) - _2695;
                        float _3292 = (-0.0) - _2696;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3307 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _981;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3320 = _3299 + _3264;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_778, _781, _784), vec3(_3297, _3298, _3299));
                        float _4646 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3332 = dot(vec3(_778, _781, _784), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4657 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3275 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3265) + _3341;
                        float _4668 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4679 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3339 * _3339) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125))) * _3271;
                        _3119 = (_3286 * _3234.x) + _3192;
                        _3120 = (_3286 * _3234.y) + _3193;
                        _3121 = (_3286 * _3234.z) + _3194;
                        _3116 = (_3367 * _3251.x) + _3189;
                        _3117 = (_3367 * _3251.y) + _3190;
                        _3118 = (_3367 * _3251.z) + _3191;
                        if (_3196 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3196;
                        }
                    }
                    frontier_phi_68_pred = _3118;
                    frontier_phi_68_pred_1 = _3121;
                    frontier_phi_68_pred_2 = _3120;
                    frontier_phi_68_pred_3 = _3119;
                    frontier_phi_68_pred_4 = _3117;
                    frontier_phi_68_pred_5 = _3116;
                }
                _2888 = frontier_phi_68_pred;
                _2894 = frontier_phi_68_pred_1;
                _2892 = frontier_phi_68_pred_2;
                _2890 = frontier_phi_68_pred_3;
                _2886 = frontier_phi_68_pred_4;
                _2884 = frontier_phi_68_pred_5;
                uint _3051 = _3050 + 1u;
                if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3044 = _2884;
                    _3045 = _2886;
                    _3046 = _2888;
                    _3047 = _2890;
                    _3048 = _2892;
                    _3049 = _2894;
                    _3050 = _3051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((4294967295u << _2900) & _2740) == 0u)
        {
            _3012 = _2883;
            _3014 = _2885;
            _3016 = _2887;
            _3018 = _2889;
            _3020 = _2891;
            _3022 = _2893;
        }
        else
        {
            float _3037 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
            float _3038 = _3037 * _2694;
            float _3039 = _3037 * _2695;
            float _3040 = _3037 * _2696;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3172 = _2883;
                float _3173 = _2885;
                float _3174 = _2887;
                float _3175 = _2889;
                float _3176 = _2891;
                float _3177 = _2893;
                uint _3178 = _2900;
                uint _3187;
                bool _3188;
                for (;;)
                {
                    _3187 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                    _3188 = _3187 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3188)
                    {
                        frontier_phi_79_pred = _3177;
                        frontier_phi_79_pred_1 = _3176;
                        frontier_phi_79_pred_2 = _3175;
                        frontier_phi_79_pred_3 = _3174;
                        frontier_phi_79_pred_4 = _3173;
                        frontier_phi_79_pred_5 = _3172;
                    }
                    else
                    {
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        uint _3400 = _3187;
                        uint _3401;
                        vec4 _3426;
                        float _3427;
                        vec4 _3442;
                        vec3 _3454;
                        vec4 _3469;
                        vec4 _3485;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3411 = ((_3178 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3400));
                            _3401 = (_3400 + 4294967295u) & _3400;
                            uint _3413 = _3411 * 40u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3427 = _3426.w;
                            uint _3429 = (_3411 * 40u) + 4u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3411 * 40u) + 8u;
                            _3454 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x));
                            uint _3456 = (_3411 * 40u) + 16u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3472 = (_3411 * 40u) + 20u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3488 = (_3411 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3411 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2696, _3520.z, fma(_2695, _3520.y, _3520.x * _2694)) + _3520.w;
                            _3533 = !((fma(_2696, _3501.z, fma(_2695, _3501.y, _3501.x * _2694)) + _3501.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3426.x - _2694;
                                float _3561 = _3426.y - _2695;
                                float _3562 = _3426.z - _2696;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3427 * _3427));
                                float _4690 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3578 = sqrt(_3563) * _3442.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_778, _781, _784))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2696, _3469.z, fma(_2695, _3469.y, _3469.x * _2694)) + _3469.w) / _3532;
                                float _3592 = (fma(_2696, _3485.z, fma(_2695, _3485.y, _3485.x * _2694)) + _3485.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4706 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _981;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3038;
                                float _3622 = _3568 - _3039;
                                float _3623 = _3569 - _3040;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3038, (-0.0) - _3039, (-0.0) - _3040));
                                float _4717 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3635 = dot(vec3(_778, _781, _784), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4728 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_778, _781, _784), vec3(_3567, _3568, _3569))) + _3644;
                                float _4739 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4750 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3598 * _3442.z;
                                frontier_phi_85_pred_1 = _3598 * _3442.y;
                                frontier_phi_85_pred_2 = _3598 * _3442.x;
                                frontier_phi_85_pred_3 = _3672 * _3454.z;
                                frontier_phi_85_pred_4 = _3672 * _3454.y;
                                frontier_phi_85_pred_5 = _3672 * _3454.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3681 = frontier_phi_85_pred;
                            _3680 = frontier_phi_85_pred_1;
                            _3679 = frontier_phi_85_pred_2;
                            _3678 = frontier_phi_85_pred_3;
                            _3677 = frontier_phi_85_pred_4;
                            _3676 = frontier_phi_85_pred_5;
                            _3384 = _3679 + _3397;
                            _3385 = _3680 + _3398;
                            _3386 = _3681 + _3399;
                            _3381 = _3676 + _3394;
                            _3382 = _3677 + _3395;
                            _3383 = _3678 + _3396;
                            if (_3401 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3401;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3386;
                        frontier_phi_79_pred_1 = _3385;
                        frontier_phi_79_pred_2 = _3384;
                        frontier_phi_79_pred_3 = _3383;
                        frontier_phi_79_pred_4 = _3382;
                        frontier_phi_79_pred_5 = _3381;
                    }
                    _3023 = frontier_phi_79_pred;
                    _3021 = frontier_phi_79_pred_1;
                    _3019 = frontier_phi_79_pred_2;
                    _3017 = frontier_phi_79_pred_3;
                    _3015 = frontier_phi_79_pred_4;
                    _3013 = frontier_phi_79_pred_5;
                    uint _3179 = _3178 + 1u;
                    if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3172 = _3013;
                        _3173 = _3015;
                        _3174 = _3017;
                        _3175 = _3019;
                        _3176 = _3021;
                        _3177 = _3023;
                        _3178 = _3179;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3019;
                frontier_phi_60_61_ladder_1 = _3023;
                frontier_phi_60_61_ladder_2 = _3021;
                frontier_phi_60_61_ladder_3 = _3017;
                frontier_phi_60_61_ladder_4 = _3015;
                frontier_phi_60_61_ladder_5 = _3013;
            }
            else
            {
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2893;
                frontier_phi_60_61_ladder_2 = _2891;
                frontier_phi_60_61_ladder_3 = _2887;
                frontier_phi_60_61_ladder_4 = _2885;
                frontier_phi_60_61_ladder_5 = _2883;
            }
            _3012 = frontier_phi_60_61_ladder_5;
            _3014 = frontier_phi_60_61_ladder_4;
            _3016 = frontier_phi_60_61_ladder_3;
            _3018 = frontier_phi_60_61_ladder;
            _3020 = frontier_phi_60_61_ladder_2;
            _3022 = frontier_phi_60_61_ladder_1;
        }
        float _3027 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2752 = (_3027 * _3018) + _2186;
        _2754 = (_3027 * _3020) + _2188;
        _2756 = (_3027 * _3022) + _2190;
        _2758 = ((_3012 * _951) * _3027) + _2534;
        _2760 = ((_3014 * _952) * _3027) + _2536;
        _2762 = ((_3016 * _953) * _3027) + _2538;
    }
    else
    {
        _2752 = _2186;
        _2754 = _2188;
        _2756 = _2190;
        _2758 = _2534;
        _2760 = _2536;
        _2762 = _2538;
    }
    uint _2768 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _2778 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _586) * _599.x) * cbInstanceData._m0[_2768].x;
    float _2783 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _586) * _599.y) * cbInstanceData._m0[_2768].y;
    float _2788 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _586) * _599.z) * cbInstanceData._m0[_2768].z;
    float _4766 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4777 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4788 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4799 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2806 = (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2752 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _965))) + ((_2758 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1803)) * cbPerFrame._m0[3u].x)) + _2778;
    float _2808 = (_2783 + ((_2760 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1803)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2754 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _965)));
    float _2810 = (_2788 + ((_2762 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1803)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2756 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _965)));
    float _2811 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2812 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2813 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2819 = cbMtdParam._m0[2u].x * _2778;
    float _2820 = cbMtdParam._m0[2u].y * _2783;
    float _2821 = cbMtdParam._m0[2u].z * _2788;
    float _4825 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2823 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2828 = cbInstanceData._m0[_857 + 6u].w * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)));
    float _2833 = _755 / cbSceneParam._m0[86u].x;
    float _2834 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2909 = _2908 / _678;
        float _2920 = _2909 * _728;
        float _2921 = _729 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2923 = _2909 * _730;
        float _2925 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2921;
        float _2933 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2922 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3073 = 1.0 / cbSceneParam._m0[80u].x;
            float _3074 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3075 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            _3129 = ((abs(_2933 / _2922) * cbSceneParam._m0[80u].y) * ((((_3084 - _3085) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))))) * _3073)) - ((exp2(_2943 * _3084) - exp2(_2943 * _3085)) * _3073))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2853);
        _2945 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2947 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2949 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2951 = _3140 * _2853;
    }
    else
    {
        _2945 = _2850;
        _2947 = _2851;
        _2949 = _2852;
        _2951 = _2853;
    }
    bool _3167;
    vec4 _2961;
    vec4 _2983;
    float _2985;
    float _2989;
    float _2990;
    float _2991;
    float _2994;
    float _2997;
    float _3000;
    float _3001;
    bool _3011;
    for (;;)
    {
        _2961 = cbMatDynParam._m0[0u];
        float _2963 = roundEven(_2961.y);
        bool _2964 = _2963 == 3.0;
        float _2965 = log2(_2951);
        float _2969 = exp2(_2965 * cbSceneParam._m0[78u].x);
        float _2970 = exp2(_2965 * cbSceneParam._m0[78u].y);
        float _2971 = exp2(_2965 * cbSceneParam._m0[78u].z);
        float _2972 = _2969 * _2811;
        float _2973 = _2970 * _2812;
        float _2974 = _2971 * _2813;
        float _2981 = _744 + (-0.5);
        _2983 = cbMtdParam._m0[1u];
        _2985 = _2983.y * _2981;
        float _2988 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2989 = _2988 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
        _2990 = _2988 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
        _2991 = _2988 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
        _2994 = ((_2819 * _2823) * _2969) * _2988;
        _2997 = ((_2820 * _2823) * _2970) * _2988;
        _3000 = ((_2821 * _2823) * _2971) * _2988;
        _3001 = _2981 * 0.999000012874603271484375;
        _3011 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3011)
        {
            if ((cbInstanceData._m0[_857 + 7u].x + _3001) < 0.5)
            {
                _3167 = true;
                break;
            }
        }
        uint _3108 = _858 + uint(_2961.w);
        if ((cbInstanceData._m0[_3108].w < 1.0) && ((cbInstanceData._m0[_3108].w + _3001) < 0.5))
        {
            _3167 = true;
            break;
        }
        if ((_2985 + _440) < _2983.x)
        {
            _3167 = true;
            break;
        }
        _3167 = false;
        break;
    }
    float _3372;
    if (_3167)
    {
        discard_state = true;
        _3372 = 0.0;
    }
    else
    {
        _3372 = _2828;
    }
    SV_Target.x = _2989;
    SV_Target.y = _2990;
    SV_Target.z = _2991;
    SV_Target.w = _3372;
    SV_Target_1.x = _2994;
    SV_Target_1.y = _2997;
    SV_Target_1.z = _3000;
    SV_Target_1.w = _2828;
    discard_exit();
}


