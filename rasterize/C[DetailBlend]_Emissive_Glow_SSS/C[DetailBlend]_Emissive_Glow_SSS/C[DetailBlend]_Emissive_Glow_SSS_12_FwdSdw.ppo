#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1325;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _260.z;
    float _266 = _260.w;
    float _272 = exp2(log2(_265 * 22.0) * 260.0);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _299 = cbMtdParam._m0[10u].x * _288.x;
    float _300 = cbMtdParam._m0[10u].y * _288.y;
    float _301 = cbMtdParam._m0[10u].z * _288.z;
    vec4 _313 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = exp2(log2(1.0 - _266) * 8.0);
    vec4 _341 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _357 = exp2(log2(_266) * 8.0);
    vec4 _370 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _417 = (((((_313.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _395.x) - _299) * _274) + _299;
    float _418 = (((((_313.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _395.y) - _300) * _274) + _300;
    float _419 = (((((_313.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _395.z) - _301) * _274) + _301;
    float _426 = (((cbMtdParam._m0[13u].x * _341.x) - _417) * _329) + _417;
    float _427 = (((cbMtdParam._m0[13u].y * _341.y) - _418) * _329) + _418;
    float _428 = (((cbMtdParam._m0[13u].z * _341.z) - _419) * _329) + _419;
    float _435 = (((cbMtdParam._m0[11u].x * _370.x) - _426) * _357) + _426;
    float _436 = (((cbMtdParam._m0[11u].y * _370.y) - _427) * _357) + _427;
    float _437 = (((cbMtdParam._m0[11u].z * _370.z) - _428) * _357) + _428;
    float _438 = _395.w * _313.w;
    float _469 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _274) + cbMtdParam._m0[17u].x;
    float _472 = ((cbMtdParam._m0[15u].z - _469) * _329) + _469;
    float _475 = ((cbMtdParam._m0[16u].w - _472) * _357) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[14u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _527 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _545 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _556 = ((((_265 * 2.0) * (cbMtdParam._m0[14u].x + _508.z)) - _496) * _274) + _496;
    float _560 = (((_527.z - _556) + cbMtdParam._m0[15u].y) * _329) + _556;
    float _564 = (((_545.z - _560) + cbMtdParam._m0[14u].w) * _357) + _560;
    float _578 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3997 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _584 = (_579 * _579) * (3.0 - (_579 * 2.0));
    vec4 _597 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _605 = (_260.x * 2.0) + (-1.0);
    float _606 = (_260.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _4008 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _617 = ((_508.x - _489) * _274) + _489;
    float _618 = ((_508.y - _490) * _274) + _490;
    float _623 = ((_527.x - _617) * _329) + _617;
    float _624 = ((_527.y - _618) * _329) + _618;
    float _637 = (cbMtdParam._m0[14u].z * (((((_545.x - _623) * _357) + _623) * 2.0) + (-1.0))) + _605;
    float _638 = (cbMtdParam._m0[14u].z * (((((_545.y - _624) * _357) + _624) * 2.0) + (-1.0))) + _606;
    float _641 = fma(_612, _245, fma(_638, _237 * TANGENT.x, (_223 * _215) * _637));
    float _644 = fma(_612, _246, fma(_638, _237 * TANGENT.y, (_223 * _216) * _637));
    float _647 = fma(_612, _247, fma(_638, _237 * TANGENT.z, (_223 * _217) * _637));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _4019 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _655 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _656 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _657 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _658 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _659 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _660 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _744 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _746 = _744.w;
    float _764 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _767 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _770 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    vec4 _772 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _774 = _772.x;
    float _786 = (((_772.y - _656) + (_772.w * _656)) * cbMtdParam._m0[3u].x) + _656;
    vec4 _787 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _803 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_774 * _774)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _787.z;
    float _811 = (((cbMatDynParam._m0[15u].x - _660) * cbMatDynParam._m0[15u].w) * _803) + _660;
    float _819 = ((_803 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _786)) + _786;
    uint _843 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = _843 + 9u;
    uint _845 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * _657) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * _658) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * _659) * cbInstanceData._m0[_845].z;
    float _4085 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _857 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _862 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _873 = (((_862.x - _811) + (_862.w * _811)) * cbMtdParam._m0[3u].x) + _811;
    float _886 = (cbMtdParam._m0[3u].x * (((_854 * _746) - _854) + _857.x)) + _854;
    float _887 = (cbMtdParam._m0[3u].x * (((_855 * _746) - _855) + _857.y)) + _855;
    float _888 = (cbMtdParam._m0[3u].x * (((_856 * _746) - _856) + _857.z)) + _856;
    float _902 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_811 * (_657 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_811 * (_658 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_811 * (_659 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _906 = _902 * cbMatDynParam._m0[13u].w;
    float _916 = (_906 * (cbMatDynParam._m0[13u].x - _886)) + _886;
    float _917 = (_906 * (cbMatDynParam._m0[13u].y - _887)) + _887;
    float _918 = (_906 * (cbMatDynParam._m0[13u].z - _888)) + _888;
    float _926 = ((_902 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _873)) + _873;
    float _927 = 1.0 - _926;
    float _928 = _927 * _916;
    float _929 = _927 * _917;
    float _930 = _927 * _918;
    float _934 = (_916 + (-0.039999999105930328369140625)) * _926;
    float _935 = (_917 + (-0.039999999105930328369140625)) * _926;
    float _936 = (_918 + (-0.039999999105930328369140625)) * _926;
    float _937 = _934 + 0.039999999105930328369140625;
    float _938 = _935 + 0.039999999105930328369140625;
    float _939 = _936 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _951 = _948.x * TEXCOORD_4;
    float _952 = dot(vec3(_652, _653, _654), vec3(_733, _734, _735));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _652) - _733;
    float _960 = (_955 * _653) - _734;
    float _961 = (_955 * _654) - _735;
    float _965 = abs(dot(vec3(_733, _734, _735), vec3(_652, _653, _654)));
    float _4118 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_819);
    float _979 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _985 = (1.0 - _979) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _986 = _979 * _967;
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_1022, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014));
        float _1053 = fma(_1022, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014));
        float _1057 = fma(_1022, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014));
        float _1082 = _1014 + _652;
        float _1083 = _1018 + _653;
        float _1084 = _1022 + _654;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_652, _653, _654), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4166 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_652, _653, _654), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4199 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_652, _653, _654), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4232 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_1022, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014));
        float _1369 = fma(_1022, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014));
        float _1373 = fma(_1022, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014));
        float _1396 = _1014 + _652;
        float _1397 = _1018 + _653;
        float _1398 = _1022 + _654;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_652, _653, _654), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4295 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_652, _653, _654), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4328 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_652, _653, _654), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4361 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1325;
        _1635 = _1325;
        _1636 = _1325;
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = _1325;
        _1645 = _1325;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1337)) + _1337;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1338)) + _1338;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _959 * 0.5;
    float _1703 = _960 * 0.5;
    float _1704 = _961 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_1022, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_1022, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_1022, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1829 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1832 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1860 = frontier_phi_16_14_ladder;
        }
        float _2033;
        if (_1829 > 0.0)
        {
            _2033 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2033 = frontier_phi_25_21_ladder;
        }
        float _2328;
        if (_1832 > 0.0)
        {
            _2328 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2328 = frontier_phi_37_32_ladder;
        }
        float _2330 = isnan(_2033) ? _1860 : (isnan(_1860) ? _2033 : min(_1860, _2033));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1826) + _1815;
        float _2336 = (_2331 * _1829) + _1819;
        float _2337 = (_2331 * _1832) + _1823;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_15_37_ladder = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2482.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2482.z * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_15_37_ladder_1;
        _1850 = frontier_phi_15_37_ladder;
        _1852 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1768);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_1022, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_1022, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_1022, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1926 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1929 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2038;
        if (_1923 > 0.0)
        {
            _2038 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2038 = frontier_phi_27_23_ladder;
        }
        float _2355;
        if (_1926 > 0.0)
        {
            _2355 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2355 = frontier_phi_39_34_ladder;
        }
        float _2693;
        if (_1929 > 0.0)
        {
            _2693 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2693 = frontier_phi_49_46_ladder;
        }
        float _2695 = isnan(_2355) ? _2038 : (isnan(_2038) ? _2355 : min(_2038, _2355));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1923) + _1912;
        float _2701 = (_2696 * _1926) + _1916;
        float _2702 = (_2696 * _1929) + _1920;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_24_49_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_24_49_ladder_2;
        _1950 = frontier_phi_24_49_ladder_1;
        _1952 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1857);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1965 = (((_985 * _937) + _986) * _951) * ((cbModelParam._m0[1u].w * (_1948 - _1848)) + _1848);
    float _1967 = (((_985 * _938) + _986) * _951) * ((cbModelParam._m0[1u].w * (_1950 - _1850)) + _1850);
    float _1969 = (((_985 * _939) + _986) * _951) * ((cbModelParam._m0[1u].w * (_1952 - _1852)) + _1852);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2025 = _2012 / _2024;
    float _2026 = _2016 / _2024;
    float _2027 = _2020 / _2024;
    float _2174;
    float _2175;
    float _2176;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2054 = ((uint(_2027 > cbSceneParam._m0[59u].y) + uint(_2027 > cbSceneParam._m0[59u].x)) + uint(_2027 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2055 = _2054 + 43u;
        uint _2063 = _2054 + 44u;
        uint _2071 = _2054 + 45u;
        uint _2079 = _2054 + 46u;
        float _2090 = fma(_2024, cbSceneParam._m0[_2055].w, fma(_2020, cbSceneParam._m0[_2055].z, fma(_2016, cbSceneParam._m0[_2055].y, _2012 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2024, cbSceneParam._m0[_2063].w, fma(_2020, cbSceneParam._m0[_2063].z, fma(_2016, cbSceneParam._m0[_2063].y, _2012 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2024, cbSceneParam._m0[_2079].w, fma(_2020, cbSceneParam._m0[_2079].z, fma(_2016, cbSceneParam._m0[_2079].y, _2012 * cbSceneParam._m0[_2079].x)));
        float _2107 = cbSceneParam._m0[33u].z * _2102;
        float _2109 = cbSceneParam._m0[33u].w * _2102;
        float _2112 = fma(_2024, cbSceneParam._m0[_2071].w, fma(_2020, cbSceneParam._m0[_2071].z, fma(_2016, cbSceneParam._m0[_2071].y, _2012 * cbSceneParam._m0[_2071].x))) / _2102;
        float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 + _2090) / _2102, (_2109 + _2094) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2090) / _2102, (_2094 - _2107) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2107) / _2102, (_2094 - _2109) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2109) / _2102, (_2107 + _2094) / _2102), _2112), 0.0)).x), vec4(0.25)));
        _2174 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
        _2175 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
        _2176 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2174 = 1.0;
        _2175 = 1.0;
        _2176 = 1.0;
    }
    float _2240;
    float _2242;
    float _2244;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2228 = fma(_2024, cbSceneParam._m0[63u].w, fma(_2020, cbSceneParam._m0[63u].z, fma(_2016, cbSceneParam._m0[63u].y, _2012 * cbSceneParam._m0[63u].x)));
        float _2229 = fma(_2024, cbSceneParam._m0[60u].w, fma(_2020, cbSceneParam._m0[60u].z, fma(_2016, cbSceneParam._m0[60u].y, _2012 * cbSceneParam._m0[60u].x))) / _2228;
        float _2230 = fma(_2024, cbSceneParam._m0[61u].w, fma(_2020, cbSceneParam._m0[61u].z, fma(_2016, cbSceneParam._m0[61u].y, _2012 * cbSceneParam._m0[61u].x))) / _2228;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2229 >= cbSceneParam._m0[64u].x) && (_2230 >= cbSceneParam._m0[64u].y)) && (_2229 <= cbSceneParam._m0[64u].z)) && (_2230 <= cbSceneParam._m0[64u].w))
        {
            float _2368 = fma(_2024, cbSceneParam._m0[62u].w, fma(_2020, cbSceneParam._m0[62u].z, fma(_2016, cbSceneParam._m0[62u].y, _2012 * cbSceneParam._m0[62u].x))) / _2228;
            float _2372 = isnan(cbSceneParam._m0[41u].w) ? _2368 : (isnan(_2368) ? cbSceneParam._m0[41u].w : max(_2368, cbSceneParam._m0[41u].w));
            float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
            float _2422 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2229, cbSceneParam._m0[33u].w + _2230), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2229, _2230 - cbSceneParam._m0[33u].z), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].z, _2230 - cbSceneParam._m0[33u].w), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2230), _2372), 0.0)).x), vec4(0.25)));
            float _2426 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
            float _2427 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
            float _2428 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_36_35_ladder_1 = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_36_35_ladder_2 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
        }
        else
        {
            frontier_phi_36_35_ladder = _2175;
            frontier_phi_36_35_ladder_1 = _2176;
            frontier_phi_36_35_ladder_2 = _2174;
        }
        _2240 = frontier_phi_36_35_ladder_2;
        _2242 = frontier_phi_36_35_ladder;
        _2244 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2240 = _2174;
        _2242 = _2175;
        _2244 = _2176;
    }
    uvec4 _2249 = floatBitsToUint(cbInstanceData._m0[_843 + 5u]);
    uint _2251 = _2249.x * 14u;
    uint _2252 = _2251 + 13u;
    float _2259 = _951 + (-1.0);
    float _2264 = (cbLight._m0[_2252].x * _2259) + 1.0;
    float _2265 = (cbLight._m0[_2252].y * _2259) + 1.0;
    float _2266 = (cbLight._m0[_2252].z * _2259) + 1.0;
    float _2267 = (cbLight._m0[_2252].w * _2259) + 1.0;
    uint _2268 = _2251 + 5u;
    float _2274 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2278 = _2251 + 4u;
    float _2287 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2291 = _2251 | 1u;
    float _2302 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_652, _653, _654));
    float _2305 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_652, _653, _654));
    float _4539 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _4550 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2310 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2312 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2319 = ((cbLight._m0[_2268].x * _2274) * _2312) + (((cbLight._m0[_2278].x * _2240) * _2287) * _2310);
    float _2320 = ((_2274 * cbLight._m0[_2268].y) * _2312) + (((cbLight._m0[_2278].y * _2242) * _2287) * _2310);
    float _2321 = ((_2274 * cbLight._m0[_2268].z) * _2312) + (((cbLight._m0[_2278].z * _2244) * _2287) * _2310);
    uvec4 _2325 = floatBitsToUint(cbLight._m0[_2251 + 12u]);
    bool _2327 = _2325.x == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2327)
    {
        _2429 = _2319;
        _2431 = _2320;
        _2433 = _2321;
    }
    else
    {
        uint _2437 = _2251 + 6u;
        float _2453 = (dot(vec3(cbLight._m0[_2251 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4561 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2456 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2429 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2319;
        _2431 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2320;
        _2433 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2321;
    }
    bool _2436 = _2325.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2436)
    {
        _2491 = _2429;
        _2493 = _2431;
        _2495 = _2433;
    }
    else
    {
        uint _2664 = _2251 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2251 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4577 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2683 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2491 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2429;
        _2493 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2431;
        _2495 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2433;
    }
    uint _2498 = _2251 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _819) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2251].x + _733;
    float _2514 = cbLight._m0[_2251].y + _734;
    float _2515 = cbLight._m0[_2251].z + _735;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2251].xyz));
    float _4593 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2527 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2528 = dot(vec3(_652, _653, _654), vec3(_2520, _2521, _2522));
    float _4615 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2520, _2521, _2522));
    float _4626 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2549 = 0.959999978542327880859375 - _934;
    float _2551 = 0.959999978542327880859375 - _935;
    float _2552 = 0.959999978542327880859375 - _936;
    float _2559 = 1.0 - _2512;
    float _2570 = (0.5 / (((_2527 * ((_2526 * _2559) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2559) + _2512) * _2526))) * _2526;
    float _4637 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2586 = _2251 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _819) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2291].x + _733;
    float _2600 = cbLight._m0[_2291].y + _734;
    float _2601 = cbLight._m0[_2291].z + _735;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2291].xyz));
    float _4648 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2613 = dot(vec3(_652, _653, _654), vec3(_2606, _2607, _2608));
    float _4659 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2606, _2607, _2608));
    float _4670 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2639 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2527 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2639) + _2598) * _2612))) * _2612;
    float _4681 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2661 = (((((_2632 * _2549) + _937) * cbLight._m0[_2586].x) * _2651) * _2274) + ((((cbLight._m0[_2498].x * _2240) * ((_2548 * _2549) + _937)) * _2572) * _2287);
    float _2662 = (((((_2632 * _2551) + _938) * cbLight._m0[_2586].y) * _2651) * _2274) + ((((cbLight._m0[_2498].y * _2242) * ((_2548 * _2551) + _938)) * _2572) * _2287);
    float _2663 = (((((_2632 * _2552) + _939) * cbLight._m0[_2586].z) * _2651) * _2274) + ((((cbLight._m0[_2498].z * _2244) * ((_2548 * _2552) + _939)) * _2572) * _2287);
    float _2719;
    float _2721;
    float _2723;
    if (_2327)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2251 + 2u;
        uint _2729 = _2251 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _819) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _733;
        float _2746 = cbLight._m0[_2725].y + _734;
        float _2747 = cbLight._m0[_2725].z + _735;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2725].xyz));
        float _4692 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2759 = dot(vec3(_652, _653, _654), vec3(_2752, _2753, _2754));
        float _4703 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4714 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2527 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2785) + _2744) * _2758))) * _2758;
        float _4725 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2719 = (((((_2778 * _2549) + _937) * cbLight._m0[_2729].x) * _2797) * _2798) + _2661;
        _2721 = (((((_2778 * _2551) + _938) * cbLight._m0[_2729].y) * _2797) * _2798) + _2662;
        _2723 = (((((_2778 * _2552) + _939) * cbLight._m0[_2729].z) * _2797) * _2798) + _2663;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2436)
    {
        _2829 = _2719;
        _2831 = _2721;
        _2833 = _2723;
    }
    else
    {
        uint _2840 = _2251 + 3u;
        uint _2844 = _2251 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _819) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _733;
        float _2861 = cbLight._m0[_2840].y + _734;
        float _2862 = cbLight._m0[_2840].z + _735;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2840].xyz));
        float _4741 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2874 = dot(vec3(_652, _653, _654), vec3(_2867, _2868, _2869));
        float _4752 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4763 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2900 = 1.0 - _2859;
        float _2910 = (0.5 / (((_2527 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2900) + _2859) * _2873))) * _2873;
        float _4774 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2829 = (((((_2893 * _2549) + _937) * cbLight._m0[_2844].x) * _2912) * _2913) + _2719;
        _2831 = (((((_2893 * _2551) + _938) * cbLight._m0[_2844].y) * _2912) * _2913) + _2721;
        _2833 = (((((_2893 * _2552) + _939) * cbLight._m0[_2844].z) * _2912) * _2913) + _2723;
    }
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_2249.y == 0u)
    {
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2935)));
        float _2956 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
        }
        else
        {
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            uint _3247 = 0u;
            uint _3256;
            bool _3257;
            for (;;)
            {
                _3256 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                _3257 = _3256 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3257)
                {
                    frontier_phi_68_pred = _3246;
                    frontier_phi_68_pred_1 = _3245;
                    frontier_phi_68_pred_2 = _3244;
                    frontier_phi_68_pred_3 = _3242;
                    frontier_phi_68_pred_4 = _3241;
                    frontier_phi_68_pred_5 = _3243;
                }
                else
                {
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    uint _3371;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3256;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3375 = uint(findLSB(_3371)) + (_3247 << 5u);
                        uint _3372 = (_3371 + 4294967295u) & _3371;
                        uint _3377 = _3375 * 48u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3397 = (_3375 * 48u) + 4u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3416 = (_3375 * 48u) + 8u;
                        vec3 _3427 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x));
                        float _3431 = _3391.x - _2025;
                        float _3432 = _3391.y - _2026;
                        float _3433 = _3391.z - _2027;
                        float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                        float _3437 = inversesqrt(_3434);
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3441 = dot(vec3(_764, _767, _770), vec3(_3438, _3439, _3440));
                        float _3446 = 1.0 - (_3434 * _3391.w);
                        float _4800 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3448 = sqrt(_3434) * _3410.w;
                        float _3451 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3441) + _3452;
                        float _3458 = _3448 * _3448;
                        float _3462 = ((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3447) / ((_3458 * 0.699999988079071044921875) + 1.0);
                        float _3466 = (-0.0) - _2025;
                        float _3467 = (-0.0) - _2026;
                        float _3468 = (-0.0) - _2027;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3482 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                        float _3483 = 1.0 - _967;
                        float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                        float _3491 = _3490 * _3490;
                        float _3492 = _3491 * _3491;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3495 = _3475 + _3440;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3503 = dot(vec3(_764, _767, _770), vec3(_3473, _3474, _3475));
                        float _4816 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3507 = dot(vec3(_764, _767, _770), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                        float _4827 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                        float _3515 = _3451 * _3491;
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3441) + _3516;
                        float _4838 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3520 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3521 = 1.0 - _3491;
                        float _3531 = (0.5 / (((_3520 * ((_3506 * _3521) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3491) * _3506))) * _3520;
                        float _4849 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3542 = (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3514 * _3514) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125))) * _3447;
                        _3300 = (_3462 * _3410.x) + _3368;
                        _3301 = (_3462 * _3410.y) + _3369;
                        _3302 = (_3462 * _3410.z) + _3370;
                        _3297 = (_3542 * _3427.x) + _3365;
                        _3298 = (_3542 * _3427.y) + _3366;
                        _3299 = (_3542 * _3427.z) + _3367;
                        if (_3372 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3372;
                        }
                    }
                    frontier_phi_68_pred = _3302;
                    frontier_phi_68_pred_1 = _3301;
                    frontier_phi_68_pred_2 = _3300;
                    frontier_phi_68_pred_3 = _3298;
                    frontier_phi_68_pred_4 = _3297;
                    frontier_phi_68_pred_5 = _3299;
                }
                _3099 = frontier_phi_68_pred;
                _3097 = frontier_phi_68_pred_1;
                _3095 = frontier_phi_68_pred_2;
                _3091 = frontier_phi_68_pred_3;
                _3089 = frontier_phi_68_pred_4;
                _3093 = frontier_phi_68_pred_5;
                uint _3248 = _3247 + 1u;
                if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3241 = _3089;
                    _3242 = _3091;
                    _3243 = _3093;
                    _3244 = _3095;
                    _3245 = _3097;
                    _3246 = _3099;
                    _3247 = _3248;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
        }
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.z;
        uint _3105 = (_3103 >> 8u) & 15u;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((4294967295u << _3105) & _2966) == 0u)
        {
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
            _3217 = _3096;
            _3219 = _3098;
        }
        else
        {
            float _3234 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _3235 = _3234 * _2025;
            float _3236 = _3234 * _2026;
            float _3237 = _3234 * _2027;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3105 < ((_3103 >> 12u) & 15u))
            {
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3348 = _3088;
                float _3349 = _3090;
                float _3350 = _3092;
                float _3351 = _3094;
                float _3352 = _3096;
                float _3353 = _3098;
                uint _3354 = _3105;
                uint _3363;
                bool _3364;
                for (;;)
                {
                    _3363 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                    _3364 = _3363 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3364)
                    {
                        frontier_phi_74_pred = _3350;
                        frontier_phi_74_pred_1 = _3349;
                        frontier_phi_74_pred_2 = _3348;
                        frontier_phi_74_pred_3 = _3353;
                        frontier_phi_74_pred_4 = _3352;
                        frontier_phi_74_pred_5 = _3351;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3560 = _3348;
                        float _3561 = _3349;
                        float _3562 = _3350;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        float _3565 = _3353;
                        uint _3566 = _3363;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3651;
                        float _3698;
                        bool _3699;
                        for (;;)
                        {
                            uint _3577 = ((_3354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3638 = (_3577 * 40u) + 20u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3654 = (_3577 * 40u) + 24u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3673 = (_3577 * 40u) + 28u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            _3698 = fma(_2027, _3686.z, fma(_2026, _3686.y, _3686.x * _2025)) + _3686.w;
                            _3699 = !((fma(_2027, _3667.z, fma(_2026, _3667.y, _3667.x * _2025)) + _3667.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3699)
                            {
                                float _3726 = _3592.x - _2025;
                                float _3727 = _3592.y - _2026;
                                float _3728 = _3592.z - _2027;
                                float _3729 = dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728));
                                float _3732 = inversesqrt(_3729);
                                float _3733 = _3732 * _3726;
                                float _3734 = _3732 * _3727;
                                float _3735 = _3732 * _3728;
                                float _3739 = 1.0 - (_3729 / (_3593 * _3593));
                                float _4860 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3744 = sqrt(_3729) * _3608.w;
                                float _3746 = 1.39999997615814208984375 / (_3744 + 1.39999997615814208984375);
                                float _3747 = _3746 * _3746;
                                float _3750 = ((1.0 - _3747) * dot(vec3(_3733, _3734, _3735), vec3(_764, _767, _770))) + _3747;
                                float _3753 = _3744 * _3744;
                                float _3757 = (fma(_2027, _3635.z, fma(_2026, _3635.y, _3635.x * _2025)) + _3635.w) / _3698;
                                float _3758 = (fma(_2027, _3651.z, fma(_2026, _3651.y, _3651.x * _2025)) + _3651.w) / _3698;
                                float _3762 = 1.0 - dot(vec2(_3757, _3758), vec2(_3757, _3758));
                                float _4876 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3764 = _3763 * (((isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0))) * _3740) / ((_3753 * 0.699999988079071044921875) + 1.0));
                                float _3776 = exp2(log2(1.0 / ((_3753 * 3.5) + 5.0)) * 0.25);
                                float _3777 = 1.0 - _967;
                                float _3784 = sqrt(1.0 - ((1.0 - (_3777 * _3777)) * (1.0 - (_3776 * _3776))));
                                float _3785 = _3784 * _3784;
                                float _3786 = _3785 * _3785;
                                float _3787 = _3733 - _3235;
                                float _3788 = _3734 - _3236;
                                float _3789 = _3735 - _3237;
                                float _3793 = inversesqrt(dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789)));
                                float _3797 = dot(vec3(_764, _767, _770), vec3((-0.0) - _3235, (-0.0) - _3236, (-0.0) - _3237));
                                float _4887 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3801 = dot(vec3(_764, _767, _770), vec3(_3793 * _3787, _3793 * _3788, _3793 * _3789));
                                float _4898 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3808 = ((_3804 * _3804) * (_3786 + (-1.0))) + 1.0;
                                float _3809 = _3746 * _3785;
                                float _3810 = _3809 * _3809;
                                float _3816 = ((1.0 - _3810) * dot(vec3(_764, _767, _770), vec3(_3733, _3734, _3735))) + _3810;
                                float _4909 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3818 = 1.0 - _3785;
                                float _3828 = (0.5 / (((_3817 * ((_3800 * _3818) + _3785)) + 9.9999999392252902907785028219223e-09) + (((_3817 * _3818) + _3785) * _3800))) * _3817;
                                float _4920 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3838 = (_3763 * _3740) * (((_3786 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3808 * _3808) * ((_3753 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3838 * _3620.z;
                                frontier_phi_80_pred_1 = _3838 * _3620.y;
                                frontier_phi_80_pred_2 = _3838 * _3620.x;
                                frontier_phi_80_pred_3 = _3764 * _3608.z;
                                frontier_phi_80_pred_4 = _3764 * _3608.y;
                                frontier_phi_80_pred_5 = _3764 * _3608.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3844 = frontier_phi_80_pred;
                            _3843 = frontier_phi_80_pred_1;
                            _3842 = frontier_phi_80_pred_2;
                            _3847 = frontier_phi_80_pred_3;
                            _3846 = frontier_phi_80_pred_4;
                            _3845 = frontier_phi_80_pred_5;
                            _3550 = _3845 + _3563;
                            _3551 = _3846 + _3564;
                            _3552 = _3847 + _3565;
                            _3547 = _3842 + _3560;
                            _3548 = _3843 + _3561;
                            _3549 = _3844 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3549;
                        frontier_phi_74_pred_1 = _3548;
                        frontier_phi_74_pred_2 = _3547;
                        frontier_phi_74_pred_3 = _3552;
                        frontier_phi_74_pred_4 = _3551;
                        frontier_phi_74_pred_5 = _3550;
                    }
                    _3214 = frontier_phi_74_pred;
                    _3212 = frontier_phi_74_pred_1;
                    _3210 = frontier_phi_74_pred_2;
                    _3220 = frontier_phi_74_pred_3;
                    _3218 = frontier_phi_74_pred_4;
                    _3216 = frontier_phi_74_pred_5;
                    uint _3355 = _3354 + 1u;
                    if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3348 = _3210;
                        _3349 = _3212;
                        _3350 = _3214;
                        _3351 = _3216;
                        _3352 = _3218;
                        _3353 = _3220;
                        _3354 = _3355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3218;
                frontier_phi_62_63_ladder_1 = _3216;
                frontier_phi_62_63_ladder_2 = _3214;
                frontier_phi_62_63_ladder_3 = _3220;
                frontier_phi_62_63_ladder_4 = _3212;
                frontier_phi_62_63_ladder_5 = _3210;
            }
            else
            {
                frontier_phi_62_63_ladder = _3096;
                frontier_phi_62_63_ladder_1 = _3094;
                frontier_phi_62_63_ladder_2 = _3092;
                frontier_phi_62_63_ladder_3 = _3098;
                frontier_phi_62_63_ladder_4 = _3090;
                frontier_phi_62_63_ladder_5 = _3088;
            }
            _3209 = frontier_phi_62_63_ladder_5;
            _3211 = frontier_phi_62_63_ladder_4;
            _3213 = frontier_phi_62_63_ladder_2;
            _3215 = frontier_phi_62_63_ladder_1;
            _3217 = frontier_phi_62_63_ladder;
            _3219 = frontier_phi_62_63_ladder_3;
        }
        float _3224 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2978 = (_3224 * _3215) + _2491;
        _2980 = (_3224 * _3217) + _2493;
        _2982 = (_3224 * _3219) + _2495;
        _2984 = ((_3209 * _937) * _3224) + _2829;
        _2986 = ((_3211 * _938) * _3224) + _2831;
        _2988 = ((_3213 * _939) * _3224) + _2833;
    }
    else
    {
        _2978 = _2491;
        _2980 = _2493;
        _2982 = _2495;
        _2984 = _2829;
        _2986 = _2831;
        _2988 = _2833;
    }
    uint _2994 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _3004 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.x) * cbInstanceData._m0[_2994].x;
    float _3009 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.y) * cbInstanceData._m0[_2994].y;
    float _3014 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _584) * _597.z) * cbInstanceData._m0[_2994].z;
    float _4936 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4947 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4958 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4969 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3032 = (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2978 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _951))) + ((_2984 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + _3004;
    float _3034 = (_3009 + ((_2986 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2980 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _951)));
    float _3036 = (_3014 + ((_2988 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1757)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2982 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _951)));
    float _4995 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3049 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
    float _3054 = cbInstanceData._m0[_843 + 6u].w * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)));
    float _3059 = _741 / cbSceneParam._m0[86u].x;
    float _3060 = _742 / cbSceneParam._m0[86u].y;
    vec4 _3074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3076 = _3074.x;
    float _3077 = _3074.y;
    float _3078 = _3074.z;
    float _3079 = _3074.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _3113 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _3114 = _3113 / _676;
        float _3125 = _3114 * _726;
        float _3126 = _727 * _3114;
        float _3127 = (-0.0) - _3126;
        float _3128 = _3114 * _728;
        float _3130 = (cbSceneParam._m0[77u].w * _3127) / _3113;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3126;
        float _3138 = sqrt(((_3125 * _3125) + (_3126 * _3126)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3113)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3127 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3270 = 1.0 / cbSceneParam._m0[80u].x;
            float _3271 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3272 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            _3310 = ((abs(_3138 / _3127) * cbSceneParam._m0[80u].y) * ((((_3281 - _3282) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))))) * _3270)) - ((exp2(_3148 * _3281) - exp2(_3148 * _3282)) * _3270))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3079);
        _3150 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3076;
        _3152 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3077;
        _3154 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3078;
        _3156 = _3321 * _3079;
    }
    else
    {
        _3150 = _3076;
        _3152 = _3077;
        _3154 = _3078;
        _3156 = _3079;
    }
    float _3168 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3169 = _3168 == 3.0;
    float _3170 = log2(_3156);
    float _3174 = exp2(_3170 * cbSceneParam._m0[78u].x);
    float _3175 = exp2(_3170 * cbSceneParam._m0[78u].y);
    float _3176 = exp2(_3170 * cbSceneParam._m0[78u].z);
    float _3177 = _3174 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)));
    float _3178 = _3175 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)));
    float _3179 = _3176 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)));
    float _3188 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3188 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.y = _3188 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
    SV_Target.z = _3188 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
    SV_Target.w = _3054;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3004) * _3049) * _3174) * _3188;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3009) * _3049) * _3175) * _3188;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3014) * _3049) * _3176) * _3188;
    SV_Target_1.w = _3054;
}


