#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1183;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _252.z;
    float _263 = exp2(log2(_257 * 22.0) * 260.0);
    float _264 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _265 = isnan(1.0) ? _264 : (isnan(_264) ? 1.0 : min(_264, 1.0));
    vec4 _279 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _290 = cbMtdParam._m0[10u].x * _279.x;
    float _291 = cbMtdParam._m0[10u].y * _279.y;
    float _292 = cbMtdParam._m0[10u].z * _279.z;
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _339 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _347 = (((((cbMtdParam._m0[9u].x * _304.x) - _290) * _265) + _290) * 4.55000019073486328125) * _339.x;
    float _349 = (((((cbMtdParam._m0[9u].y * _304.y) - _291) * _265) + _291) * 4.55000019073486328125) * _339.y;
    float _351 = (((((cbMtdParam._m0[9u].z * _304.z) - _292) * _265) + _292) * 4.55000019073486328125) * _339.z;
    float _352 = _339.w * _304.w;
    float _378 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _265) + cbMtdParam._m0[17u].x;
    vec4 _390 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _399 = cbMtdParam._m0[14u].y + _390.z;
    vec4 _411 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _428 = (((_265 * (_257 + (-0.5))) + 0.5) * 2.0) * ((((_411.z - _399) + cbMtdParam._m0[14u].x) * _265) + _399);
    float _446 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3855 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _452 = (_447 * _447) * (3.0 - (_447 * 2.0));
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _473 = (_252.x * 2.0) + (-1.0);
    float _474 = (_252.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3866 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))));
    float _493 = (cbMtdParam._m0[14u].z * (((((_411.x - _392) * _265) + _392) * 2.0) + (-1.0))) + _473;
    float _494 = (cbMtdParam._m0[14u].z * (((((_411.y - _393) * _265) + _393) * 2.0) + (-1.0))) + _474;
    float _497 = fma(_480, _237, fma(_494, _229 * TANGENT.x, (_215 * _207) * _493));
    float _500 = fma(_480, _238, fma(_494, _229 * TANGENT.y, (_215 * _208) * _493));
    float _503 = fma(_480, _239, fma(_494, _229 * TANGENT.z, (_215 * _209) * _493));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3877 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _511 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _512 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _513 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _514 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _515 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _516 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _532 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _602 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _604 = _602.w;
    float _623 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _626 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _629 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    vec4 _631 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _633 = _631.x;
    float _645 = (((_631.y - _512) + (_631.w * _512)) * cbMtdParam._m0[3u].x) + _512;
    float _662 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_633 * _633)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _670 = (((cbMatDynParam._m0[15u].x - _516) * cbMatDynParam._m0[15u].w) * _662) + _516;
    float _678 = ((_662 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _645)) + _645;
    uint _702 = uint(roundEven(NORMAL.w)) * 13u;
    uint _704 = _702 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * _513) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * _514) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * _515) * cbInstanceData._m0[_705].z;
    float _3943 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    vec4 _717 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _722 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = (((_722.x - _670) + (_722.w * _670)) * cbMtdParam._m0[3u].x) + _670;
    float _746 = (cbMtdParam._m0[3u].x * (((_714 * _604) - _714) + _717.x)) + _714;
    float _747 = (cbMtdParam._m0[3u].x * (((_715 * _604) - _715) + _717.y)) + _715;
    float _748 = (cbMtdParam._m0[3u].x * (((_716 * _604) - _716) + _717.z)) + _716;
    vec4 _749 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _762 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_670 * (_513 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_670 * (_514 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_670 * (_515 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _749.z;
    float _766 = _762 * cbMatDynParam._m0[13u].w;
    float _776 = (_766 * (cbMatDynParam._m0[13u].x - _746)) + _746;
    float _777 = (_766 * (cbMatDynParam._m0[13u].y - _747)) + _747;
    float _778 = (_766 * (cbMatDynParam._m0[13u].z - _748)) + _748;
    float _786 = ((_762 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _733)) + _733;
    float _787 = 1.0 - _786;
    float _788 = _787 * _776;
    float _789 = _787 * _777;
    float _790 = _787 * _778;
    float _794 = (_776 + (-0.039999999105930328369140625)) * _786;
    float _795 = (_777 + (-0.039999999105930328369140625)) * _786;
    float _796 = (_778 + (-0.039999999105930328369140625)) * _786;
    float _797 = _794 + 0.039999999105930328369140625;
    float _798 = _795 + 0.039999999105930328369140625;
    float _799 = _796 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _811 = _808.x * TEXCOORD_4;
    float _812 = dot(vec3(_508, _509, _510), vec3(_591, _592, _593));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _508) - _591;
    float _820 = (_815 * _509) - _592;
    float _821 = (_815 * _510) - _593;
    float _825 = abs(dot(vec3(_591, _592, _593), vec3(_508, _509, _510)));
    float _3976 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_678);
    float _839 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _845 = (1.0 - _839) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _846 = _839 * _827;
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_882, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874));
        float _913 = fma(_882, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874));
        float _917 = fma(_882, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874));
        float _940 = _874 + _508;
        float _941 = _878 + _509;
        float _942 = _882 + _510;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_508, _509, _510), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _4024 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_508, _509, _510), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _4057 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_508, _509, _510), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4090 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_882, cbModelParam._m0[30u].z, fma(_878, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874));
        float _1227 = fma(_882, cbModelParam._m0[31u].z, fma(_878, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874));
        float _1231 = fma(_882, cbModelParam._m0[32u].z, fma(_878, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874));
        float _1254 = _874 + _508;
        float _1255 = _878 + _509;
        float _1256 = _882 + _510;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_508, _509, _510), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4153 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_508, _509, _510), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4186 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_508, _509, _510), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4219 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1183;
        _1493 = _1183;
        _1494 = _1183;
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = _1183;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1195)) + _1195;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1196)) + _1196;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1197)) + _1197;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _819 * 0.5;
    float _1561 = _820 * 0.5;
    float _1562 = _821 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1673 = fma(_882, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874)) + cbModelParam._m0[13u].w;
        float _1677 = fma(_882, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874)) + cbModelParam._m0[14u].w;
        float _1681 = fma(_882, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874)) + cbModelParam._m0[15u].w;
        float _1684 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1687 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1690 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1718;
        if (_1684 > 0.0)
        {
            _1718 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1718 = frontier_phi_16_14_ladder;
        }
        float _1891;
        if (_1687 > 0.0)
        {
            _1891 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1891 = frontier_phi_25_21_ladder;
        }
        float _2186;
        if (_1690 > 0.0)
        {
            _2186 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2186 = frontier_phi_37_32_ladder;
        }
        float _2188 = isnan(_1891) ? _1718 : (isnan(_1718) ? _1891 : min(_1718, _1891));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1684) + _1673;
        float _2194 = (_2189 * _1687) + _1677;
        float _2195 = (_2189 * _1690) + _1681;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_15_37_ladder = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2340.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2340.z * cbModelParam._m0[1u].y;
        }
        _1706 = frontier_phi_15_37_ladder_1;
        _1708 = frontier_phi_15_37_ladder;
        _1710 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1626);
        _1706 = _1694.x * cbModelParam._m0[1u].y;
        _1708 = _1694.y * cbModelParam._m0[1u].y;
        _1710 = _1694.z * cbModelParam._m0[1u].y;
    }
    float _1714 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1714 : min(cbModelParam._m0[25u].w, _1714));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1770 = fma(_882, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874)) + cbModelParam._m0[21u].w;
        float _1774 = fma(_882, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874)) + cbModelParam._m0[22u].w;
        float _1778 = fma(_882, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874)) + cbModelParam._m0[23u].w;
        float _1781 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1784 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1787 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1896;
        if (_1781 > 0.0)
        {
            _1896 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1896 = frontier_phi_27_23_ladder;
        }
        float _2213;
        if (_1784 > 0.0)
        {
            _2213 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2213 = frontier_phi_39_34_ladder;
        }
        float _2551;
        if (_1787 > 0.0)
        {
            _2551 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2551 = frontier_phi_49_46_ladder;
        }
        float _2553 = isnan(_2213) ? _1896 : (isnan(_1896) ? _2213 : min(_1896, _2213));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1781) + _1770;
        float _2559 = (_2554 * _1784) + _1774;
        float _2560 = (_2554 * _1787) + _1778;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1715);
            frontier_phi_24_49_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1806 = frontier_phi_24_49_ladder_2;
        _1808 = frontier_phi_24_49_ladder_1;
        _1810 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1715);
        _1806 = _1790.x * cbModelParam._m0[1u].z;
        _1808 = _1790.y * cbModelParam._m0[1u].z;
        _1810 = _1790.z * cbModelParam._m0[1u].z;
    }
    float _1823 = (((_845 * _797) + _846) * _811) * ((cbModelParam._m0[1u].w * (_1806 - _1706)) + _1706);
    float _1825 = (((_845 * _798) + _846) * _811) * ((cbModelParam._m0[1u].w * (_1808 - _1708)) + _1708);
    float _1827 = (((_845 * _799) + _846) * _811) * ((cbModelParam._m0[1u].w * (_1810 - _1710)) + _1710);
    float _1830 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, _1823 * cbSceneParam._m0[91u].x));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1883 = _1870 / _1882;
    float _1884 = _1874 / _1882;
    float _1885 = _1878 / _1882;
    float _2032;
    float _2033;
    float _2034;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1912 = ((uint(_1885 > cbSceneParam._m0[59u].y) + uint(_1885 > cbSceneParam._m0[59u].x)) + uint(_1885 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1913 = _1912 + 43u;
        uint _1921 = _1912 + 44u;
        uint _1929 = _1912 + 45u;
        uint _1937 = _1912 + 46u;
        float _1948 = fma(_1882, cbSceneParam._m0[_1913].w, fma(_1878, cbSceneParam._m0[_1913].z, fma(_1874, cbSceneParam._m0[_1913].y, _1870 * cbSceneParam._m0[_1913].x)));
        float _1952 = fma(_1882, cbSceneParam._m0[_1921].w, fma(_1878, cbSceneParam._m0[_1921].z, fma(_1874, cbSceneParam._m0[_1921].y, _1870 * cbSceneParam._m0[_1921].x)));
        float _1960 = fma(_1882, cbSceneParam._m0[_1937].w, fma(_1878, cbSceneParam._m0[_1937].z, fma(_1874, cbSceneParam._m0[_1937].y, _1870 * cbSceneParam._m0[_1937].x)));
        float _1965 = cbSceneParam._m0[33u].z * _1960;
        float _1967 = cbSceneParam._m0[33u].w * _1960;
        float _1970 = fma(_1882, cbSceneParam._m0[_1929].w, fma(_1878, cbSceneParam._m0[_1929].z, fma(_1874, cbSceneParam._m0[_1929].y, _1870 * cbSceneParam._m0[_1929].x))) / _1960;
        float _2018 = (cbSceneParam._m0[33u].x - sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885))) * cbSceneParam._m0[33u].y;
        float _4345 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2025 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 + _1948) / _1960, (_1967 + _1952) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 + _1948) / _1960, (_1952 - _1965) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 - _1965) / _1960, (_1952 - _1967) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 - _1967) / _1960, (_1965 + _1952) / _1960), _1970), 0.0)).x), vec4(0.25)));
        _2032 = 1.0 - (_2025 * cbSceneParam._m0[34u].x);
        _2033 = 1.0 - (_2025 * cbSceneParam._m0[34u].y);
        _2034 = 1.0 - (_2025 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2032 = 1.0;
        _2033 = 1.0;
        _2034 = 1.0;
    }
    float _2098;
    float _2100;
    float _2102;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2086 = fma(_1882, cbSceneParam._m0[63u].w, fma(_1878, cbSceneParam._m0[63u].z, fma(_1874, cbSceneParam._m0[63u].y, _1870 * cbSceneParam._m0[63u].x)));
        float _2087 = fma(_1882, cbSceneParam._m0[60u].w, fma(_1878, cbSceneParam._m0[60u].z, fma(_1874, cbSceneParam._m0[60u].y, _1870 * cbSceneParam._m0[60u].x))) / _2086;
        float _2088 = fma(_1882, cbSceneParam._m0[61u].w, fma(_1878, cbSceneParam._m0[61u].z, fma(_1874, cbSceneParam._m0[61u].y, _1870 * cbSceneParam._m0[61u].x))) / _2086;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2087 >= cbSceneParam._m0[64u].x) && (_2088 >= cbSceneParam._m0[64u].y)) && (_2087 <= cbSceneParam._m0[64u].z)) && (_2088 <= cbSceneParam._m0[64u].w))
        {
            float _2226 = fma(_1882, cbSceneParam._m0[62u].w, fma(_1878, cbSceneParam._m0[62u].z, fma(_1874, cbSceneParam._m0[62u].y, _1870 * cbSceneParam._m0[62u].x))) / _2086;
            float _2230 = isnan(cbSceneParam._m0[41u].w) ? _2226 : (isnan(_2226) ? cbSceneParam._m0[41u].w : max(_2226, cbSceneParam._m0[41u].w));
            float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885))) * cbSceneParam._m0[33u].y;
            float _4361 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
            float _2280 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2087, cbSceneParam._m0[33u].w + _2088), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2087, _2088 - cbSceneParam._m0[33u].z), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2087 - cbSceneParam._m0[33u].z, _2088 - cbSceneParam._m0[33u].w), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2087 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2088), _2230), 0.0)).x), vec4(0.25)));
            float _2284 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
            float _2285 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
            float _2286 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
            frontier_phi_36_35_ladder_1 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
            frontier_phi_36_35_ladder_2 = isnan(_2284) ? _2032 : (isnan(_2032) ? _2284 : min(_2032, _2284));
        }
        else
        {
            frontier_phi_36_35_ladder = _2033;
            frontier_phi_36_35_ladder_1 = _2034;
            frontier_phi_36_35_ladder_2 = _2032;
        }
        _2098 = frontier_phi_36_35_ladder_2;
        _2100 = frontier_phi_36_35_ladder;
        _2102 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2098 = _2032;
        _2100 = _2033;
        _2102 = _2034;
    }
    uvec4 _2107 = floatBitsToUint(cbInstanceData._m0[_702 + 5u]);
    uint _2109 = _2107.x * 14u;
    uint _2110 = _2109 + 13u;
    float _2117 = _811 + (-1.0);
    float _2122 = (cbLight._m0[_2110].x * _2117) + 1.0;
    float _2123 = (cbLight._m0[_2110].y * _2117) + 1.0;
    float _2124 = (cbLight._m0[_2110].z * _2117) + 1.0;
    float _2125 = (cbLight._m0[_2110].w * _2117) + 1.0;
    uint _2126 = _2109 + 5u;
    float _2132 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2136 = _2109 + 4u;
    float _2145 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2149 = _2109 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_508, _509, _510));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_508, _509, _510));
    float _4397 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4408 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2126].x * _2132) * _2170) + (((cbLight._m0[_2136].x * _2098) * _2145) * _2168);
    float _2178 = ((_2132 * cbLight._m0[_2126].y) * _2170) + (((cbLight._m0[_2136].y * _2100) * _2145) * _2168);
    float _2179 = ((_2132 * cbLight._m0[_2126].z) * _2170) + (((cbLight._m0[_2136].z * _2102) * _2145) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2109 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2185)
    {
        _2287 = _2177;
        _2289 = _2178;
        _2291 = _2179;
    }
    else
    {
        uint _2295 = _2109 + 6u;
        float _2311 = (dot(vec3(cbLight._m0[_2109 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4419 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2314 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2287 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2177;
        _2289 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2178;
        _2291 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2179;
    }
    bool _2294 = _2183.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2294)
    {
        _2349 = _2287;
        _2351 = _2289;
        _2353 = _2291;
    }
    else
    {
        uint _2522 = _2109 + 7u;
        float _2538 = (dot(vec3(cbLight._m0[_2109 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4435 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2541 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2349 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2287;
        _2351 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2289;
        _2353 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2291;
    }
    uint _2356 = _2109 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _678) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2109].x + _591;
    float _2372 = cbLight._m0[_2109].y + _592;
    float _2373 = cbLight._m0[_2109].z + _593;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2109].xyz));
    float _4451 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _4462 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2385 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2386 = dot(vec3(_508, _509, _510), vec3(_2378, _2379, _2380));
    float _4473 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2378, _2379, _2380));
    float _4484 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2407 = 0.959999978542327880859375 - _794;
    float _2409 = 0.959999978542327880859375 - _795;
    float _2410 = 0.959999978542327880859375 - _796;
    float _2417 = 1.0 - _2370;
    float _2428 = (0.5 / (((_2385 * ((_2384 * _2417) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2417) + _2370) * _2384))) * _2384;
    float _4495 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2444 = _2109 + 9u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _678) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2149].x + _591;
    float _2458 = cbLight._m0[_2149].y + _592;
    float _2459 = cbLight._m0[_2149].z + _593;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2149].xyz));
    float _4506 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2471 = dot(vec3(_508, _509, _510), vec3(_2464, _2465, _2466));
    float _4517 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2464, _2465, _2466));
    float _4528 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2456 * _2456;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2497 = 1.0 - _2456;
    float _2507 = (0.5 / (((_2385 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2497) + _2456) * _2470))) * _2470;
    float _4539 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    float _2519 = (((((_2490 * _2407) + _797) * cbLight._m0[_2444].x) * _2509) * _2132) + ((((cbLight._m0[_2356].x * _2098) * ((_2406 * _2407) + _797)) * _2430) * _2145);
    float _2520 = (((((_2490 * _2409) + _798) * cbLight._m0[_2444].y) * _2509) * _2132) + ((((cbLight._m0[_2356].y * _2100) * ((_2406 * _2409) + _798)) * _2430) * _2145);
    float _2521 = (((((_2490 * _2410) + _799) * cbLight._m0[_2444].z) * _2509) * _2132) + ((((cbLight._m0[_2356].z * _2102) * ((_2406 * _2410) + _799)) * _2430) * _2145);
    float _2577;
    float _2579;
    float _2581;
    if (_2185)
    {
        _2577 = _2519;
        _2579 = _2520;
        _2581 = _2521;
    }
    else
    {
        uint _2583 = _2109 + 2u;
        uint _2587 = _2109 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _678) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _591;
        float _2604 = cbLight._m0[_2583].y + _592;
        float _2605 = cbLight._m0[_2583].z + _593;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2583].xyz));
        float _4550 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2617 = dot(vec3(_508, _509, _510), vec3(_2610, _2611, _2612));
        float _4561 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4572 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2643 = 1.0 - _2602;
        float _2653 = (0.5 / (((_2385 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2643) + _2602) * _2616))) * _2616;
        float _4583 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2577 = (((((_2636 * _2407) + _797) * cbLight._m0[_2587].x) * _2655) * _2656) + _2519;
        _2579 = (((((_2636 * _2409) + _798) * cbLight._m0[_2587].y) * _2655) * _2656) + _2520;
        _2581 = (((((_2636 * _2410) + _799) * cbLight._m0[_2587].z) * _2655) * _2656) + _2521;
    }
    float _2687;
    float _2689;
    float _2691;
    if (_2294)
    {
        _2687 = _2577;
        _2689 = _2579;
        _2691 = _2581;
    }
    else
    {
        uint _2698 = _2109 + 3u;
        uint _2702 = _2109 + 11u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _678) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _591;
        float _2719 = cbLight._m0[_2698].y + _592;
        float _2720 = cbLight._m0[_2698].z + _593;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2698].xyz));
        float _4599 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2732 = dot(vec3(_508, _509, _510), vec3(_2725, _2726, _2727));
        float _4610 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4621 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
        float _2758 = 1.0 - _2717;
        float _2768 = (0.5 / (((_2385 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2758) + _2717) * _2731))) * _2731;
        float _4632 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2687 = (((((_2751 * _2407) + _797) * cbLight._m0[_2702].x) * _2770) * _2771) + _2577;
        _2689 = (((((_2751 * _2409) + _798) * cbLight._m0[_2702].y) * _2770) * _2771) + _2579;
        _2691 = (((((_2751 * _2410) + _799) * cbLight._m0[_2702].z) * _2770) * _2771) + _2581;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2107.y == 0u)
    {
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2793)));
        float _2814 = (log2(_1885 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
        }
        else
        {
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            uint _3105 = 0u;
            uint _3114;
            bool _3115;
            for (;;)
            {
                _3114 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                _3115 = _3114 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3115)
                {
                    frontier_phi_68_pred = _3104;
                    frontier_phi_68_pred_1 = _3103;
                    frontier_phi_68_pred_2 = _3102;
                    frontier_phi_68_pred_3 = _3100;
                    frontier_phi_68_pred_4 = _3099;
                    frontier_phi_68_pred_5 = _3101;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3114;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3105 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _1883;
                        float _3290 = _3249.y - _1884;
                        float _3291 = _3249.z - _1885;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_623, _626, _629), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4658 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _1883;
                        float _3325 = (-0.0) - _1884;
                        float _3326 = (-0.0) - _1885;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3340 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _827;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_623, _626, _629), vec3(_3331, _3332, _3333));
                        float _4674 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3365 = dot(vec3(_623, _626, _629), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4685 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3309 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3299) + _3374;
                        float _4696 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4707 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3372 * _3372) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3158 = (_3320 * _3268.x) + _3226;
                        _3159 = (_3320 * _3268.y) + _3227;
                        _3160 = (_3320 * _3268.z) + _3228;
                        _3155 = (_3400 * _3285.x) + _3223;
                        _3156 = (_3400 * _3285.y) + _3224;
                        _3157 = (_3400 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_68_pred = _3160;
                    frontier_phi_68_pred_1 = _3159;
                    frontier_phi_68_pred_2 = _3158;
                    frontier_phi_68_pred_3 = _3156;
                    frontier_phi_68_pred_4 = _3155;
                    frontier_phi_68_pred_5 = _3157;
                }
                _2957 = frontier_phi_68_pred;
                _2955 = frontier_phi_68_pred_1;
                _2953 = frontier_phi_68_pred_2;
                _2949 = frontier_phi_68_pred_3;
                _2947 = frontier_phi_68_pred_4;
                _2951 = frontier_phi_68_pred_5;
                uint _3106 = _3105 + 1u;
                if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3099 = _2947;
                    _3100 = _2949;
                    _3101 = _2951;
                    _3102 = _2953;
                    _3103 = _2955;
                    _3104 = _2957;
                    _3105 = _3106;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
        }
        uvec4 _2960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2961 = _2960.z;
        uint _2963 = (_2961 >> 8u) & 15u;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((4294967295u << _2963) & _2824) == 0u)
        {
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
        }
        else
        {
            float _3092 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
            float _3093 = _3092 * _1883;
            float _3094 = _3092 * _1884;
            float _3095 = _3092 * _1885;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2963 < ((_2961 >> 12u) & 15u))
            {
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3206 = _2946;
                float _3207 = _2948;
                float _3208 = _2950;
                float _3209 = _2952;
                float _3210 = _2954;
                float _3211 = _2956;
                uint _3212 = _2963;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3222)
                    {
                        frontier_phi_74_pred = _3208;
                        frontier_phi_74_pred_1 = _3207;
                        frontier_phi_74_pred_2 = _3206;
                        frontier_phi_74_pred_3 = _3211;
                        frontier_phi_74_pred_4 = _3210;
                        frontier_phi_74_pred_5 = _3209;
                    }
                    else
                    {
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        uint _3424 = _3221;
                        uint _3425;
                        vec4 _3450;
                        float _3451;
                        vec4 _3466;
                        vec3 _3478;
                        vec4 _3493;
                        vec4 _3509;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3435 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3424));
                            _3425 = (_3424 + 4294967295u) & _3424;
                            uint _3437 = _3435 * 40u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3451 = _3450.w;
                            uint _3453 = (_3435 * 40u) + 4u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3435 * 40u) + 8u;
                            _3478 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x));
                            uint _3480 = (_3435 * 40u) + 16u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3496 = (_3435 * 40u) + 20u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3512 = (_3435 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3435 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_1885, _3544.z, fma(_1884, _3544.y, _3544.x * _1883)) + _3544.w;
                            _3557 = !((fma(_1885, _3525.z, fma(_1884, _3525.y, _3525.x * _1883)) + _3525.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3450.x - _1883;
                                float _3585 = _3450.y - _1884;
                                float _3586 = _3450.z - _1885;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3451 * _3451));
                                float _4718 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3602 = sqrt(_3587) * _3466.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_623, _626, _629))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_1885, _3493.z, fma(_1884, _3493.y, _3493.x * _1883)) + _3493.w) / _3556;
                                float _3616 = (fma(_1885, _3509.z, fma(_1884, _3509.y, _3509.x * _1883)) + _3509.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4734 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _827;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3093;
                                float _3646 = _3592 - _3094;
                                float _3647 = _3593 - _3095;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_623, _626, _629), vec3((-0.0) - _3093, (-0.0) - _3094, (-0.0) - _3095));
                                float _4745 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3659 = dot(vec3(_623, _626, _629), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4756 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_623, _626, _629), vec3(_3591, _3592, _3593))) + _3668;
                                float _4767 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4778 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3696 * _3478.z;
                                frontier_phi_80_pred_1 = _3696 * _3478.y;
                                frontier_phi_80_pred_2 = _3696 * _3478.x;
                                frontier_phi_80_pred_3 = _3622 * _3466.z;
                                frontier_phi_80_pred_4 = _3622 * _3466.y;
                                frontier_phi_80_pred_5 = _3622 * _3466.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_80_pred;
                            _3701 = frontier_phi_80_pred_1;
                            _3700 = frontier_phi_80_pred_2;
                            _3705 = frontier_phi_80_pred_3;
                            _3704 = frontier_phi_80_pred_4;
                            _3703 = frontier_phi_80_pred_5;
                            _3408 = _3703 + _3421;
                            _3409 = _3704 + _3422;
                            _3410 = _3705 + _3423;
                            _3405 = _3700 + _3418;
                            _3406 = _3701 + _3419;
                            _3407 = _3702 + _3420;
                            if (_3425 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3425;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3407;
                        frontier_phi_74_pred_1 = _3406;
                        frontier_phi_74_pred_2 = _3405;
                        frontier_phi_74_pred_3 = _3410;
                        frontier_phi_74_pred_4 = _3409;
                        frontier_phi_74_pred_5 = _3408;
                    }
                    _3072 = frontier_phi_74_pred;
                    _3070 = frontier_phi_74_pred_1;
                    _3068 = frontier_phi_74_pred_2;
                    _3078 = frontier_phi_74_pred_3;
                    _3076 = frontier_phi_74_pred_4;
                    _3074 = frontier_phi_74_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3068;
                        _3207 = _3070;
                        _3208 = _3072;
                        _3209 = _3074;
                        _3210 = _3076;
                        _3211 = _3078;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3076;
                frontier_phi_62_63_ladder_1 = _3074;
                frontier_phi_62_63_ladder_2 = _3072;
                frontier_phi_62_63_ladder_3 = _3078;
                frontier_phi_62_63_ladder_4 = _3070;
                frontier_phi_62_63_ladder_5 = _3068;
            }
            else
            {
                frontier_phi_62_63_ladder = _2954;
                frontier_phi_62_63_ladder_1 = _2952;
                frontier_phi_62_63_ladder_2 = _2950;
                frontier_phi_62_63_ladder_3 = _2956;
                frontier_phi_62_63_ladder_4 = _2948;
                frontier_phi_62_63_ladder_5 = _2946;
            }
            _3067 = frontier_phi_62_63_ladder_5;
            _3069 = frontier_phi_62_63_ladder_4;
            _3071 = frontier_phi_62_63_ladder_2;
            _3073 = frontier_phi_62_63_ladder_1;
            _3075 = frontier_phi_62_63_ladder;
            _3077 = frontier_phi_62_63_ladder_3;
        }
        float _3082 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2836 = (_3082 * _3073) + _2349;
        _2838 = (_3082 * _3075) + _2351;
        _2840 = (_3082 * _3077) + _2353;
        _2842 = ((_3067 * _797) * _3082) + _2687;
        _2844 = ((_3069 * _798) * _3082) + _2689;
        _2846 = ((_3071 * _799) * _3082) + _2691;
    }
    else
    {
        _2836 = _2349;
        _2838 = _2351;
        _2840 = _2353;
        _2842 = _2687;
        _2844 = _2689;
        _2846 = _2691;
    }
    uint _2852 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _2862 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _452) * _465.x) * cbInstanceData._m0[_2852].x;
    float _2867 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _452) * _465.y) * cbInstanceData._m0[_2852].y;
    float _2872 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _452) * _465.z) * cbInstanceData._m0[_2852].z;
    float _4794 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4805 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4816 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4827 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2890 = (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2836 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _811))) + ((_2842 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1615)) * cbPerFrame._m0[3u].x)) + _2862;
    float _2892 = (_2867 + ((_2844 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1615)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2838 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _811)));
    float _2894 = (_2872 + ((_2846 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1615)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2840 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _811)));
    float _4853 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2907 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _2912 = cbInstanceData._m0[_702 + 6u].w * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)));
    float _2917 = _599 / cbSceneParam._m0[86u].x;
    float _2918 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2932 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, (log2((isnan(cbSceneParam._m0[77u].w) ? _532 : (isnan(_532) ? cbSceneParam._m0[77u].w : min(_532, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2934 = _2932.x;
    float _2935 = _2932.y;
    float _2936 = _2932.z;
    float _2937 = _2932.w;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_532 > cbSceneParam._m0[78u].w)
    {
        float _2971 = isnan(_532) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _532 : min(cbSceneParam._m0[80u].w, _532));
        float _2972 = _2971 / _532;
        float _2983 = _2972 * _584;
        float _2984 = _585 * _2972;
        float _2985 = (-0.0) - _2984;
        float _2986 = _2972 * _586;
        float _2988 = (cbSceneParam._m0[77u].w * _2985) / _2971;
        float _2989 = _2988 + cbSceneParam._m0[79u].w;
        float _2990 = cbSceneParam._m0[79u].w - _2984;
        float _2996 = sqrt(((_2983 * _2983) + (_2984 * _2984)) + (_2986 * _2986));
        float _2999 = (1.0 - (cbSceneParam._m0[77u].w / _2971)) * _2996;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3006 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2985 - _2988) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2989 > 0.0) ? exp2(_3004 * _2989) : (2.0 - exp2(_3006 * _2989))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2999;
        }
        else
        {
            float _3128 = 1.0 / cbSceneParam._m0[80u].x;
            float _3129 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : max(_2989, _2990));
            float _3130 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : min(_2989, _2990));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            _3168 = ((abs(_2996 / _2985) * cbSceneParam._m0[80u].y) * ((((_3139 - _3140) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))))) * _3128)) - ((exp2(_3006 * _3139) - exp2(_3006 * _3140)) * _3128))) + (_2999 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2937);
        _3008 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2934;
        _3010 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2935;
        _3012 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2936;
        _3014 = _3179 * _2937;
    }
    else
    {
        _3008 = _2934;
        _3010 = _2935;
        _3012 = _2936;
        _3014 = _2937;
    }
    float _3026 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3027 = _3026 == 3.0;
    float _3028 = log2(_3014);
    float _3032 = exp2(_3028 * cbSceneParam._m0[78u].x);
    float _3033 = exp2(_3028 * cbSceneParam._m0[78u].y);
    float _3034 = exp2(_3028 * cbSceneParam._m0[78u].z);
    float _3035 = _3032 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)));
    float _3036 = _3033 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)));
    float _3037 = _3034 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)));
    float _3046 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3046 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.y = _3046 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.z = _3046 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3012)));
    SV_Target.w = _2912;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2862) * _2907) * _3032) * _3046;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2867) * _2907) * _3033) * _3046;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2872) * _2907) * _3034) * _3046;
    SV_Target_1.w = _2912;
}


