#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1176;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _270 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = cbMtdParam._m0[9u].x * _270.x;
    float _283 = cbMtdParam._m0[9u].y * _270.y;
    float _284 = cbMtdParam._m0[9u].z * _270.z;
    float _290 = exp2(log2(1.0 - _252.w) * 8.0);
    vec4 _302 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _336 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _344 = (((((cbMtdParam._m0[13u].x * _302.x) - _282) * _290) + _282) * 4.55000019073486328125) * _336.x;
    float _346 = (((((cbMtdParam._m0[13u].y * _302.y) - _283) * _290) + _283) * 4.55000019073486328125) * _336.y;
    float _348 = (((((cbMtdParam._m0[13u].z * _302.z) - _284) * _290) + _284) * 4.55000019073486328125) * _336.z;
    float _349 = _336.w * _270.w;
    float _373 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _376 = ((cbMtdParam._m0[15u].z - _373) * _290) + _373;
    vec4 _389 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _391 = _389.x;
    float _392 = _389.y;
    float _398 = cbMtdParam._m0[14u].x + _389.z;
    vec4 _411 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _423 = (_252.z * 2.0) * ((((_411.z - _398) + cbMtdParam._m0[15u].y) * _290) + _398);
    float _438 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3838 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _444 = (_439 * _439) * (3.0 - (_439 * 2.0));
    vec4 _457 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _465 = (_252.x * 2.0) + (-1.0);
    float _466 = (_252.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3849 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    float _485 = (cbMtdParam._m0[14u].z * (((((_411.x - _391) * _290) + _391) * 2.0) + (-1.0))) + _465;
    float _486 = (cbMtdParam._m0[14u].z * (((((_411.y - _392) * _290) + _392) * 2.0) + (-1.0))) + _466;
    float _489 = fma(_472, _237, fma(_486, _229 * TANGENT.x, (_215 * _207) * _485));
    float _492 = fma(_472, _238, fma(_486, _229 * TANGENT.y, (_215 * _208) * _485));
    float _495 = fma(_472, _239, fma(_486, _229 * TANGENT.z, (_215 * _209) * _485));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3860 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _503 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _504 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _505 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _506 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _507 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _508 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _594 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _596 = _594.w;
    float _615 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _618 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _621 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    vec4 _623 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _625 = _623.x;
    float _637 = (((_623.y - _504) + (_623.w * _504)) * cbMtdParam._m0[3u].x) + _504;
    vec4 _638 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _654 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_625 * _625)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _638.z;
    float _662 = (((cbMatDynParam._m0[15u].x - _508) * cbMatDynParam._m0[15u].w) * _654) + _508;
    float _670 = ((_654 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _637)) + _637;
    uint _694 = uint(roundEven(NORMAL.w)) * 13u;
    uint _695 = _694 + 9u;
    uint _696 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * _505) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * _506) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * _507) * cbInstanceData._m0[_696].z;
    float _3926 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    vec4 _708 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _724 = (((_713.x - _662) + (_713.w * _662)) * cbMtdParam._m0[3u].x) + _662;
    float _737 = (cbMtdParam._m0[3u].x * (((_705 * _596) - _705) + _708.x)) + _705;
    float _738 = (cbMtdParam._m0[3u].x * (((_706 * _596) - _706) + _708.y)) + _706;
    float _739 = (cbMtdParam._m0[3u].x * (((_707 * _596) - _707) + _708.z)) + _707;
    float _753 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_662 * (_505 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_662 * (_506 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_662 * (_507 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _757 = _753 * cbMatDynParam._m0[13u].w;
    float _767 = (_757 * (cbMatDynParam._m0[13u].x - _737)) + _737;
    float _768 = (_757 * (cbMatDynParam._m0[13u].y - _738)) + _738;
    float _769 = (_757 * (cbMatDynParam._m0[13u].z - _739)) + _739;
    float _777 = ((_753 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _724)) + _724;
    float _778 = 1.0 - _777;
    float _779 = _778 * _767;
    float _780 = _778 * _768;
    float _781 = _778 * _769;
    float _785 = (_767 + (-0.039999999105930328369140625)) * _777;
    float _786 = (_768 + (-0.039999999105930328369140625)) * _777;
    float _787 = (_769 + (-0.039999999105930328369140625)) * _777;
    float _788 = _785 + 0.039999999105930328369140625;
    float _789 = _786 + 0.039999999105930328369140625;
    float _790 = _787 + 0.039999999105930328369140625;
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _802 = _799.x * TEXCOORD_4;
    float _803 = dot(vec3(_500, _501, _502), vec3(_583, _584, _585));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _500) - _583;
    float _811 = (_806 * _501) - _584;
    float _812 = (_806 * _502) - _585;
    float _816 = abs(dot(vec3(_583, _584, _585), vec3(_500, _501, _502)));
    float _3959 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_670);
    float _830 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _836 = (1.0 - _830) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _837 = _830 * _818;
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _904 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _908 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _933 = _865 + _500;
        float _934 = _869 + _501;
        float _935 = _873 + _502;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_500, _501, _502), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4007 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_500, _501, _502), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4040 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_500, _501, _502), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4073 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1220 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1224 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1247 = _865 + _500;
        float _1248 = _869 + _501;
        float _1249 = _873 + _502;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_500, _501, _502), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4136 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_500, _501, _502), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4169 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_500, _501, _502), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4202 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1176;
        _1486 = _1176;
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1190)) + _1190;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _810 * 0.5;
    float _1554 = _811 * 0.5;
    float _1555 = _812 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1680 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1683 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1711 = frontier_phi_16_14_ladder;
        }
        float _1884;
        if (_1680 > 0.0)
        {
            _1884 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1884 = frontier_phi_25_21_ladder;
        }
        float _2179;
        if (_1683 > 0.0)
        {
            _2179 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2179 = frontier_phi_37_32_ladder;
        }
        float _2181 = isnan(_1884) ? _1711 : (isnan(_1711) ? _1884 : min(_1711, _1884));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1677) + _1666;
        float _2187 = (_2182 * _1680) + _1670;
        float _2188 = (_2182 * _1683) + _1674;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2189;
        float _2193 = _2189 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 > _2193) || ((_2187 < _2191) || ((_2186 < _2191) || (_2186 > _2193))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2188, cbModelParam._m0[9u].z, fma(_2187, cbModelParam._m0[9u].y, _2186 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2188, cbModelParam._m0[10u].z, fma(_2187, cbModelParam._m0[10u].y, _2186 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2188, cbModelParam._m0[11u].z, fma(_2187, cbModelParam._m0[11u].y, _2186 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_15_37_ladder = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2333.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2333.z * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_15_37_ladder_1;
        _1701 = frontier_phi_15_37_ladder;
        _1703 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1619);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1777 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1780 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1889;
        if (_1774 > 0.0)
        {
            _1889 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1889 = frontier_phi_27_23_ladder;
        }
        float _2206;
        if (_1777 > 0.0)
        {
            _2206 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2206 = frontier_phi_39_34_ladder;
        }
        float _2544;
        if (_1780 > 0.0)
        {
            _2544 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2544 = frontier_phi_49_46_ladder;
        }
        float _2546 = isnan(_2206) ? _1889 : (isnan(_1889) ? _2206 : min(_1889, _2206));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1774) + _1763;
        float _2552 = (_2547 * _1777) + _1767;
        float _2553 = (_2547 * _1780) + _1771;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_24_49_ladder = _2675.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2675.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2675.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_24_49_ladder_2;
        _1801 = frontier_phi_24_49_ladder_1;
        _1803 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1708);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1816 = (((_836 * _788) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1818 = (((_836 * _789) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1820 = (((_836 * _790) + _837) * _802) * ((cbModelParam._m0[1u].w * (_1803 - _1703)) + _1703);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1876 = _1863 / _1875;
    float _1877 = _1867 / _1875;
    float _1878 = _1871 / _1875;
    float _2025;
    float _2026;
    float _2027;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1905 = ((uint(_1878 > cbSceneParam._m0[59u].y) + uint(_1878 > cbSceneParam._m0[59u].x)) + uint(_1878 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1906 = _1905 + 43u;
        uint _1914 = _1905 + 44u;
        uint _1922 = _1905 + 45u;
        uint _1930 = _1905 + 46u;
        float _1941 = fma(_1875, cbSceneParam._m0[_1906].w, fma(_1871, cbSceneParam._m0[_1906].z, fma(_1867, cbSceneParam._m0[_1906].y, _1863 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1875, cbSceneParam._m0[_1914].w, fma(_1871, cbSceneParam._m0[_1914].z, fma(_1867, cbSceneParam._m0[_1914].y, _1863 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1875, cbSceneParam._m0[_1930].w, fma(_1871, cbSceneParam._m0[_1930].z, fma(_1867, cbSceneParam._m0[_1930].y, _1863 * cbSceneParam._m0[_1930].x)));
        float _1958 = cbSceneParam._m0[33u].z * _1953;
        float _1960 = cbSceneParam._m0[33u].w * _1953;
        float _1963 = fma(_1875, cbSceneParam._m0[_1922].w, fma(_1871, cbSceneParam._m0[_1922].z, fma(_1867, cbSceneParam._m0[_1922].y, _1863 * cbSceneParam._m0[_1922].x))) / _1953;
        float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
        float _4328 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2018 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1941) / _1953, (_1960 + _1945) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1941) / _1953, (_1945 - _1958) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1958) / _1953, (_1945 - _1960) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1960) / _1953, (_1958 + _1945) / _1953), _1963), 0.0)).x), vec4(0.25)));
        _2025 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
        _2026 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
        _2027 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2025 = 1.0;
        _2026 = 1.0;
        _2027 = 1.0;
    }
    float _2091;
    float _2093;
    float _2095;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2079 = fma(_1875, cbSceneParam._m0[63u].w, fma(_1871, cbSceneParam._m0[63u].z, fma(_1867, cbSceneParam._m0[63u].y, _1863 * cbSceneParam._m0[63u].x)));
        float _2080 = fma(_1875, cbSceneParam._m0[60u].w, fma(_1871, cbSceneParam._m0[60u].z, fma(_1867, cbSceneParam._m0[60u].y, _1863 * cbSceneParam._m0[60u].x))) / _2079;
        float _2081 = fma(_1875, cbSceneParam._m0[61u].w, fma(_1871, cbSceneParam._m0[61u].z, fma(_1867, cbSceneParam._m0[61u].y, _1863 * cbSceneParam._m0[61u].x))) / _2079;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2080 >= cbSceneParam._m0[64u].x) && (_2081 >= cbSceneParam._m0[64u].y)) && (_2080 <= cbSceneParam._m0[64u].z)) && (_2081 <= cbSceneParam._m0[64u].w))
        {
            float _2219 = fma(_1875, cbSceneParam._m0[62u].w, fma(_1871, cbSceneParam._m0[62u].z, fma(_1867, cbSceneParam._m0[62u].y, _1863 * cbSceneParam._m0[62u].x))) / _2079;
            float _2223 = isnan(cbSceneParam._m0[41u].w) ? _2219 : (isnan(_2219) ? cbSceneParam._m0[41u].w : max(_2219, cbSceneParam._m0[41u].w));
            float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
            float _4344 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
            float _2273 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2080, cbSceneParam._m0[33u].w + _2081), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2080, _2081 - cbSceneParam._m0[33u].z), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].z, _2081 - cbSceneParam._m0[33u].w), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2081), _2223), 0.0)).x), vec4(0.25)));
            float _2277 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
            float _2278 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
            float _2279 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
            frontier_phi_36_35_ladder_1 = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
            frontier_phi_36_35_ladder_2 = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
        }
        else
        {
            frontier_phi_36_35_ladder = _2026;
            frontier_phi_36_35_ladder_1 = _2027;
            frontier_phi_36_35_ladder_2 = _2025;
        }
        _2091 = frontier_phi_36_35_ladder_2;
        _2093 = frontier_phi_36_35_ladder;
        _2095 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2091 = _2025;
        _2093 = _2026;
        _2095 = _2027;
    }
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_694 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _802 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2138 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2142 = _2102 | 1u;
    float _2153 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_500, _501, _502));
    float _2156 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_500, _501, _502));
    float _4380 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _4391 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2161 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2163 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2170 = ((cbLight._m0[_2119].x * _2125) * _2163) + (((cbLight._m0[_2129].x * _2091) * _2138) * _2161);
    float _2171 = ((_2125 * cbLight._m0[_2119].y) * _2163) + (((cbLight._m0[_2129].y * _2093) * _2138) * _2161);
    float _2172 = ((_2125 * cbLight._m0[_2119].z) * _2163) + (((cbLight._m0[_2129].z * _2095) * _2138) * _2161);
    uvec4 _2176 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2178 = _2176.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2178)
    {
        _2280 = _2170;
        _2282 = _2171;
        _2284 = _2172;
    }
    else
    {
        uint _2288 = _2102 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4402 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2307 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2170;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2171;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2172;
    }
    bool _2287 = _2176.y == 0u;
    float _2342;
    float _2344;
    float _2346;
    if (_2287)
    {
        _2342 = _2280;
        _2344 = _2282;
        _2346 = _2284;
    }
    else
    {
        uint _2515 = _2102 + 7u;
        float _2531 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4418 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2534 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2342 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2280;
        _2344 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2282;
        _2346 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2284;
    }
    uint _2349 = _2102 + 8u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _670) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2102].x + _583;
    float _2365 = cbLight._m0[_2102].y + _584;
    float _2366 = cbLight._m0[_2102].z + _585;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2102].xyz));
    float _4434 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2378 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2379 = dot(vec3(_500, _501, _502), vec3(_2371, _2372, _2373));
    float _4456 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2371, _2372, _2373));
    float _4467 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2363 * _2363;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2400 = 0.959999978542327880859375 - _785;
    float _2402 = 0.959999978542327880859375 - _786;
    float _2403 = 0.959999978542327880859375 - _787;
    float _2410 = 1.0 - _2363;
    float _2421 = (0.5 / (((_2378 * ((_2377 * _2410) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2410) + _2363) * _2377))) * _2377;
    float _4478 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    uint _2437 = _2102 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _670) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2142].x + _583;
    float _2451 = cbLight._m0[_2142].y + _584;
    float _2452 = cbLight._m0[_2142].z + _585;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2142].xyz));
    float _4489 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2464 = dot(vec3(_500, _501, _502), vec3(_2457, _2458, _2459));
    float _4500 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2457, _2458, _2459));
    float _4511 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2490 = 1.0 - _2449;
    float _2500 = (0.5 / (((_2378 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2490) + _2449) * _2463))) * _2463;
    float _4522 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2512 = (((((_2483 * _2400) + _788) * cbLight._m0[_2437].x) * _2502) * _2125) + ((((cbLight._m0[_2349].x * _2091) * ((_2399 * _2400) + _788)) * _2423) * _2138);
    float _2513 = (((((_2483 * _2402) + _789) * cbLight._m0[_2437].y) * _2502) * _2125) + ((((cbLight._m0[_2349].y * _2093) * ((_2399 * _2402) + _789)) * _2423) * _2138);
    float _2514 = (((((_2483 * _2403) + _790) * cbLight._m0[_2437].z) * _2502) * _2125) + ((((cbLight._m0[_2349].z * _2095) * ((_2399 * _2403) + _790)) * _2423) * _2138);
    float _2570;
    float _2572;
    float _2574;
    if (_2178)
    {
        _2570 = _2512;
        _2572 = _2513;
        _2574 = _2514;
    }
    else
    {
        uint _2576 = _2102 + 2u;
        uint _2580 = _2102 + 10u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _670) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _583;
        float _2597 = cbLight._m0[_2576].y + _584;
        float _2598 = cbLight._m0[_2576].z + _585;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2576].xyz));
        float _4533 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2610 = dot(vec3(_500, _501, _502), vec3(_2603, _2604, _2605));
        float _4544 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4555 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2378 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2636) + _2595) * _2609))) * _2609;
        float _4566 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2570 = (((((_2629 * _2400) + _788) * cbLight._m0[_2580].x) * _2648) * _2649) + _2512;
        _2572 = (((((_2629 * _2402) + _789) * cbLight._m0[_2580].y) * _2648) * _2649) + _2513;
        _2574 = (((((_2629 * _2403) + _790) * cbLight._m0[_2580].z) * _2648) * _2649) + _2514;
    }
    float _2680;
    float _2682;
    float _2684;
    if (_2287)
    {
        _2680 = _2570;
        _2682 = _2572;
        _2684 = _2574;
    }
    else
    {
        uint _2691 = _2102 + 3u;
        uint _2695 = _2102 + 11u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _670) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _583;
        float _2712 = cbLight._m0[_2691].y + _584;
        float _2713 = cbLight._m0[_2691].z + _585;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2691].xyz));
        float _4582 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2725 = dot(vec3(_500, _501, _502), vec3(_2718, _2719, _2720));
        float _4593 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4604 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2378 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2751) + _2710) * _2724))) * _2724;
        float _4615 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2680 = (((((_2744 * _2400) + _788) * cbLight._m0[_2695].x) * _2763) * _2764) + _2570;
        _2682 = (((((_2744 * _2402) + _789) * cbLight._m0[_2695].y) * _2763) * _2764) + _2572;
        _2684 = (((((_2744 * _2403) + _790) * cbLight._m0[_2695].z) * _2763) * _2764) + _2574;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2100.y == 0u)
    {
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2786)));
        float _2807 = (log2(_1878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
        }
        else
        {
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            uint _3098 = 0u;
            uint _3107;
            bool _3108;
            for (;;)
            {
                _3107 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                _3108 = _3107 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3108)
                {
                    frontier_phi_68_pred = _3097;
                    frontier_phi_68_pred_1 = _3096;
                    frontier_phi_68_pred_2 = _3095;
                    frontier_phi_68_pred_3 = _3093;
                    frontier_phi_68_pred_4 = _3092;
                    frontier_phi_68_pred_5 = _3094;
                }
                else
                {
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    uint _3222;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3107;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    for (;;)
                    {
                        uint _3226 = uint(findLSB(_3222)) + (_3098 << 5u);
                        uint _3223 = (_3222 + 4294967295u) & _3222;
                        uint _3228 = _3226 * 48u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3248 = (_3226 * 48u) + 4u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3267 = (_3226 * 48u) + 8u;
                        vec3 _3278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x));
                        float _3282 = _3242.x - _1876;
                        float _3283 = _3242.y - _1877;
                        float _3284 = _3242.z - _1878;
                        float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                        float _3288 = inversesqrt(_3285);
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3292 = dot(vec3(_615, _618, _621), vec3(_3289, _3290, _3291));
                        float _3297 = 1.0 - (_3285 * _3242.w);
                        float _4641 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3299 = sqrt(_3285) * _3261.w;
                        float _3302 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3292) + _3303;
                        float _3309 = _3299 * _3299;
                        float _3313 = ((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3298) / ((_3309 * 0.699999988079071044921875) + 1.0);
                        float _3317 = (-0.0) - _1876;
                        float _3318 = (-0.0) - _1877;
                        float _3319 = (-0.0) - _1878;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3333 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                        float _3334 = 1.0 - _818;
                        float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                        float _3342 = _3341 * _3341;
                        float _3343 = _3342 * _3342;
                        float _3344 = _3324 + _3289;
                        float _3345 = _3325 + _3290;
                        float _3346 = _3326 + _3291;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3354 = dot(vec3(_615, _618, _621), vec3(_3324, _3325, _3326));
                        float _4657 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3358 = dot(vec3(_615, _618, _621), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                        float _4668 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                        float _3366 = _3302 * _3342;
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3292) + _3367;
                        float _4679 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3372 = 1.0 - _3342;
                        float _3382 = (0.5 / (((_3371 * ((_3357 * _3372) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3342) * _3357))) * _3371;
                        float _4690 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3393 = (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3365 * _3365) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125))) * _3298;
                        _3151 = (_3313 * _3261.x) + _3219;
                        _3152 = (_3313 * _3261.y) + _3220;
                        _3153 = (_3313 * _3261.z) + _3221;
                        _3148 = (_3393 * _3278.x) + _3216;
                        _3149 = (_3393 * _3278.y) + _3217;
                        _3150 = (_3393 * _3278.z) + _3218;
                        if (_3223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3223;
                        }
                    }
                    frontier_phi_68_pred = _3153;
                    frontier_phi_68_pred_1 = _3152;
                    frontier_phi_68_pred_2 = _3151;
                    frontier_phi_68_pred_3 = _3149;
                    frontier_phi_68_pred_4 = _3148;
                    frontier_phi_68_pred_5 = _3150;
                }
                _2950 = frontier_phi_68_pred;
                _2948 = frontier_phi_68_pred_1;
                _2946 = frontier_phi_68_pred_2;
                _2942 = frontier_phi_68_pred_3;
                _2940 = frontier_phi_68_pred_4;
                _2944 = frontier_phi_68_pred_5;
                uint _3099 = _3098 + 1u;
                if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3092 = _2940;
                    _3093 = _2942;
                    _3094 = _2944;
                    _3095 = _2946;
                    _3096 = _2948;
                    _3097 = _2950;
                    _3098 = _3099;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
        }
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.z;
        uint _2956 = (_2954 >> 8u) & 15u;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((4294967295u << _2956) & _2817) == 0u)
        {
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
        }
        else
        {
            float _3085 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
            float _3086 = _3085 * _1876;
            float _3087 = _3085 * _1877;
            float _3088 = _3085 * _1878;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2956 < ((_2954 >> 12u) & 15u))
            {
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3199 = _2939;
                float _3200 = _2941;
                float _3201 = _2943;
                float _3202 = _2945;
                float _3203 = _2947;
                float _3204 = _2949;
                uint _3205 = _2956;
                uint _3214;
                bool _3215;
                for (;;)
                {
                    _3214 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                    _3215 = _3214 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3215)
                    {
                        frontier_phi_74_pred = _3201;
                        frontier_phi_74_pred_1 = _3200;
                        frontier_phi_74_pred_2 = _3199;
                        frontier_phi_74_pred_3 = _3204;
                        frontier_phi_74_pred_4 = _3203;
                        frontier_phi_74_pred_5 = _3202;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3411 = _3199;
                        float _3412 = _3200;
                        float _3413 = _3201;
                        float _3414 = _3202;
                        float _3415 = _3203;
                        float _3416 = _3204;
                        uint _3417 = _3214;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3502;
                        float _3549;
                        bool _3550;
                        for (;;)
                        {
                            uint _3428 = ((_3205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3489 = (_3428 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3505 = (_3428 * 40u) + 24u;
                            vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3524 = (_3428 * 40u) + 28u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3549 = fma(_1878, _3537.z, fma(_1877, _3537.y, _3537.x * _1876)) + _3537.w;
                            _3550 = !((fma(_1878, _3518.z, fma(_1877, _3518.y, _3518.x * _1876)) + _3518.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3550)
                            {
                                float _3577 = _3443.x - _1876;
                                float _3578 = _3443.y - _1877;
                                float _3579 = _3443.z - _1878;
                                float _3580 = dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579));
                                float _3583 = inversesqrt(_3580);
                                float _3584 = _3583 * _3577;
                                float _3585 = _3583 * _3578;
                                float _3586 = _3583 * _3579;
                                float _3590 = 1.0 - (_3580 / (_3444 * _3444));
                                float _4701 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3595 = sqrt(_3580) * _3459.w;
                                float _3597 = 1.39999997615814208984375 / (_3595 + 1.39999997615814208984375);
                                float _3598 = _3597 * _3597;
                                float _3601 = ((1.0 - _3598) * dot(vec3(_3584, _3585, _3586), vec3(_615, _618, _621))) + _3598;
                                float _3604 = _3595 * _3595;
                                float _3608 = (fma(_1878, _3486.z, fma(_1877, _3486.y, _3486.x * _1876)) + _3486.w) / _3549;
                                float _3609 = (fma(_1878, _3502.z, fma(_1877, _3502.y, _3502.x * _1876)) + _3502.w) / _3549;
                                float _3613 = 1.0 - dot(vec2(_3608, _3609), vec2(_3608, _3609));
                                float _4717 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3615 = _3614 * (((isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0))) * _3591) / ((_3604 * 0.699999988079071044921875) + 1.0));
                                float _3627 = exp2(log2(1.0 / ((_3604 * 3.5) + 5.0)) * 0.25);
                                float _3628 = 1.0 - _818;
                                float _3635 = sqrt(1.0 - ((1.0 - (_3628 * _3628)) * (1.0 - (_3627 * _3627))));
                                float _3636 = _3635 * _3635;
                                float _3637 = _3636 * _3636;
                                float _3638 = _3584 - _3086;
                                float _3639 = _3585 - _3087;
                                float _3640 = _3586 - _3088;
                                float _3644 = inversesqrt(dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640)));
                                float _3648 = dot(vec3(_615, _618, _621), vec3((-0.0) - _3086, (-0.0) - _3087, (-0.0) - _3088));
                                float _4728 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3651 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3652 = dot(vec3(_615, _618, _621), vec3(_3644 * _3638, _3644 * _3639, _3644 * _3640));
                                float _4739 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3659 = ((_3655 * _3655) * (_3637 + (-1.0))) + 1.0;
                                float _3660 = _3597 * _3636;
                                float _3661 = _3660 * _3660;
                                float _3667 = ((1.0 - _3661) * dot(vec3(_615, _618, _621), vec3(_3584, _3585, _3586))) + _3661;
                                float _4750 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3669 = 1.0 - _3636;
                                float _3679 = (0.5 / (((_3668 * ((_3651 * _3669) + _3636)) + 9.9999999392252902907785028219223e-09) + (((_3668 * _3669) + _3636) * _3651))) * _3668;
                                float _4761 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3689 = (_3614 * _3591) * (((_3637 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3659 * _3659) * ((_3604 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3689 * _3471.z;
                                frontier_phi_80_pred_1 = _3689 * _3471.y;
                                frontier_phi_80_pred_2 = _3689 * _3471.x;
                                frontier_phi_80_pred_3 = _3615 * _3459.z;
                                frontier_phi_80_pred_4 = _3615 * _3459.y;
                                frontier_phi_80_pred_5 = _3615 * _3459.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3695 = frontier_phi_80_pred;
                            _3694 = frontier_phi_80_pred_1;
                            _3693 = frontier_phi_80_pred_2;
                            _3698 = frontier_phi_80_pred_3;
                            _3697 = frontier_phi_80_pred_4;
                            _3696 = frontier_phi_80_pred_5;
                            _3401 = _3696 + _3414;
                            _3402 = _3697 + _3415;
                            _3403 = _3698 + _3416;
                            _3398 = _3693 + _3411;
                            _3399 = _3694 + _3412;
                            _3400 = _3695 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3400;
                        frontier_phi_74_pred_1 = _3399;
                        frontier_phi_74_pred_2 = _3398;
                        frontier_phi_74_pred_3 = _3403;
                        frontier_phi_74_pred_4 = _3402;
                        frontier_phi_74_pred_5 = _3401;
                    }
                    _3065 = frontier_phi_74_pred;
                    _3063 = frontier_phi_74_pred_1;
                    _3061 = frontier_phi_74_pred_2;
                    _3071 = frontier_phi_74_pred_3;
                    _3069 = frontier_phi_74_pred_4;
                    _3067 = frontier_phi_74_pred_5;
                    uint _3206 = _3205 + 1u;
                    if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3199 = _3061;
                        _3200 = _3063;
                        _3201 = _3065;
                        _3202 = _3067;
                        _3203 = _3069;
                        _3204 = _3071;
                        _3205 = _3206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3069;
                frontier_phi_62_63_ladder_1 = _3067;
                frontier_phi_62_63_ladder_2 = _3065;
                frontier_phi_62_63_ladder_3 = _3071;
                frontier_phi_62_63_ladder_4 = _3063;
                frontier_phi_62_63_ladder_5 = _3061;
            }
            else
            {
                frontier_phi_62_63_ladder = _2947;
                frontier_phi_62_63_ladder_1 = _2945;
                frontier_phi_62_63_ladder_2 = _2943;
                frontier_phi_62_63_ladder_3 = _2949;
                frontier_phi_62_63_ladder_4 = _2941;
                frontier_phi_62_63_ladder_5 = _2939;
            }
            _3060 = frontier_phi_62_63_ladder_5;
            _3062 = frontier_phi_62_63_ladder_4;
            _3064 = frontier_phi_62_63_ladder_2;
            _3066 = frontier_phi_62_63_ladder_1;
            _3068 = frontier_phi_62_63_ladder;
            _3070 = frontier_phi_62_63_ladder_3;
        }
        float _3075 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2829 = (_3075 * _3066) + _2342;
        _2831 = (_3075 * _3068) + _2344;
        _2833 = (_3075 * _3070) + _2346;
        _2835 = ((_3060 * _788) * _3075) + _2680;
        _2837 = ((_3062 * _789) * _3075) + _2682;
        _2839 = ((_3064 * _790) * _3075) + _2684;
    }
    else
    {
        _2829 = _2342;
        _2831 = _2344;
        _2833 = _2346;
        _2835 = _2680;
        _2837 = _2682;
        _2839 = _2684;
    }
    uint _2845 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _2855 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _444) * _457.x) * cbInstanceData._m0[_2845].x;
    float _2860 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _444) * _457.y) * cbInstanceData._m0[_2845].y;
    float _2865 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _444) * _457.z) * cbInstanceData._m0[_2845].z;
    float _4777 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4788 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4799 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4810 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2883 = (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2829 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _802))) + ((_2835 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + _2855;
    float _2885 = (_2860 + ((_2837 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2831 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _802)));
    float _2887 = (_2865 + ((_2839 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1608)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2833 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _802)));
    float _4836 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2900 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2905 = cbInstanceData._m0[_694 + 6u].w * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)));
    float _2910 = _591 / cbSceneParam._m0[86u].x;
    float _2911 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2925 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2927 = _2925.x;
    float _2928 = _2925.y;
    float _2929 = _2925.z;
    float _2930 = _2925.w;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2964 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2965 = _2964 / _524;
        float _2976 = _2965 * _576;
        float _2977 = _577 * _2965;
        float _2978 = (-0.0) - _2977;
        float _2979 = _2965 * _578;
        float _2981 = (cbSceneParam._m0[77u].w * _2978) / _2964;
        float _2982 = _2981 + cbSceneParam._m0[79u].w;
        float _2983 = cbSceneParam._m0[79u].w - _2977;
        float _2989 = sqrt(((_2976 * _2976) + (_2977 * _2977)) + (_2979 * _2979));
        float _2992 = (1.0 - (cbSceneParam._m0[77u].w / _2964)) * _2989;
        float _2997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3161;
        if (abs((_2978 - _2981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3161 = ((((_2982 > 0.0) ? exp2(_2997 * _2982) : (2.0 - exp2(_2999 * _2982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2992;
        }
        else
        {
            float _3121 = 1.0 / cbSceneParam._m0[80u].x;
            float _3122 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : max(_2982, _2983));
            float _3123 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : min(_2982, _2983));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            _3161 = ((abs(_2989 / _2978) * cbSceneParam._m0[80u].y) * ((((_3132 - _3133) * 2.0) - ((exp2(_2997 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0)))) - exp2(_2997 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))))) * _3121)) - ((exp2(_2999 * _3132) - exp2(_2999 * _3133)) * _3121))) + (_2992 * cbSceneParam._m0[80u].z);
        }
        vec4 _3163 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, 1.0), 0.0);
        float _3172 = exp2((_3161 * (-1.44269502162933349609375)) * (1.0 - _3163.w));
        float _3173 = log2(_3172);
        float _3189 = log2(_2930);
        _3001 = (exp2(_3189 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].x)) * _3163.x) / cbSceneParam._m0[78u].x)) + _2927;
        _3003 = (exp2(_3189 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].y)) * _3163.y) / cbSceneParam._m0[78u].y)) + _2928;
        _3005 = (exp2(_3189 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].z)) * _3163.z) / cbSceneParam._m0[78u].z)) + _2929;
        _3007 = _3172 * _2930;
    }
    else
    {
        _3001 = _2927;
        _3003 = _2928;
        _3005 = _2929;
        _3007 = _2930;
    }
    float _3019 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3020 = _3019 == 3.0;
    float _3021 = log2(_3007);
    float _3025 = exp2(_3021 * cbSceneParam._m0[78u].x);
    float _3026 = exp2(_3021 * cbSceneParam._m0[78u].y);
    float _3027 = exp2(_3021 * cbSceneParam._m0[78u].z);
    float _3028 = _3025 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)));
    float _3029 = _3026 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)));
    float _3030 = _3027 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)));
    float _3039 = (_3019 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3039 * (_3020 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.y = _3039 * (_3020 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.z = _3039 * (_3020 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.w = _2905;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2855) * _2900) * _3025) * _3039;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2860) * _2900) * _3026) * _3039;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2865) * _2900) * _3027) * _3039;
    SV_Target_1.w = _2905;
}


