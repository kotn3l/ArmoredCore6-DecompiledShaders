#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1553;
float _4261;
float _4262;
float _4263;
float _4264;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    vec4 _320 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = _320.z;
    float _326 = _320.w;
    float _332 = exp2(log2(_325 * 22.0) * 260.0);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _348 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _358 = cbMtdParam._m0[10u].x * _348.x;
    float _359 = cbMtdParam._m0[10u].y * _348.y;
    float _360 = cbMtdParam._m0[10u].z * _348.z;
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _387 = exp2(log2(1.0 - _326) * 8.0);
    vec4 _399 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _415 = exp2(log2(_326) * 8.0);
    vec4 _427 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _451 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _473 = (((((_372.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _451.x) - _358) * _334) + _358;
    float _474 = (((((_372.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _451.y) - _359) * _334) + _359;
    float _475 = (((((_372.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _451.z) - _360) * _334) + _360;
    float _482 = (((cbMtdParam._m0[13u].x * _399.x) - _473) * _387) + _473;
    float _483 = (((cbMtdParam._m0[13u].y * _399.y) - _474) * _387) + _474;
    float _484 = (((cbMtdParam._m0[13u].z * _399.z) - _475) * _387) + _475;
    float _491 = (((cbMtdParam._m0[11u].x * _427.x) - _482) * _415) + _482;
    float _492 = (((cbMtdParam._m0[11u].y * _427.y) - _483) * _415) + _483;
    float _493 = (((cbMtdParam._m0[11u].z * _427.z) - _484) * _415) + _484;
    float _494 = _451.w * _372.w;
    float _525 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _334) + cbMtdParam._m0[17u].x;
    float _528 = ((cbMtdParam._m0[15u].z - _525) * _387) + _525;
    float _531 = ((cbMtdParam._m0[16u].w - _528) * _415) + _528;
    vec4 _543 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _552 = cbMtdParam._m0[14u].y + _543.z;
    vec4 _564 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _583 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _601 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _612 = ((((_325 * 2.0) * (cbMtdParam._m0[14u].x + _564.z)) - _552) * _334) + _552;
    float _616 = (((_583.z - _612) + cbMtdParam._m0[15u].y) * _387) + _612;
    float _620 = (((_601.z - _616) + cbMtdParam._m0[14u].w) * _415) + _616;
    float _634 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4283 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _640 = (_635 * _635) * (3.0 - (_635 * 2.0));
    vec4 _653 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _661 = (_320.x * 2.0) + (-1.0);
    float _662 = (_320.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _4294 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _668 = sqrt(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))));
    float _673 = ((_564.x - _545) * _334) + _545;
    float _674 = ((_564.y - _546) * _334) + _546;
    float _679 = ((_583.x - _673) * _387) + _673;
    float _680 = ((_583.y - _674) * _387) + _674;
    float _693 = (cbMtdParam._m0[14u].z * (((((_601.x - _679) * _415) + _679) * 2.0) + (-1.0))) + _661;
    float _694 = (cbMtdParam._m0[14u].z * (((((_601.y - _680) * _415) + _680) * 2.0) + (-1.0))) + _662;
    float _697 = fma(_668, _249, fma(_694, _241 * TANGENT.x, (_227 * _219) * _693));
    float _700 = fma(_668, _250, fma(_694, _241 * TANGENT.y, (_227 * _220) * _693));
    float _703 = fma(_668, _251, fma(_694, _241 * TANGENT.z, (_227 * _221) * _693));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _4305 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _711 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _712 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _713 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _714 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _4349 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _715 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _716 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _724 = cbMatDynParam._m0[9u].x * _713;
    float _725 = cbMatDynParam._m0[9u].y * _714;
    float _726 = cbMatDynParam._m0[9u].z * _715;
    float _733 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _734 = _733 * _305;
    float _735 = _733 * _306;
    float _736 = _733 * _307;
    float _743 = abs(exp2(log2(dot(vec3(_708, _709, _710), vec3(_734, _735, _736))) * cbMatDynParam._m0[12u].x));
    float _744 = isnan(0.100000001490116119384765625) ? _743 : (isnan(_743) ? 0.100000001490116119384765625 : max(_743, 0.100000001490116119384765625));
    float _750 = ((isnan(0.699999988079071044921875) ? _744 : (isnan(_744) ? 0.699999988079071044921875 : min(_744, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _772 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4381 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4392 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _779 = (((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) - _776) * _750) + _776;
    float _798 = dot(vec3(_708, _709, _710), vec3(0.0, -1.0, 0.0));
    float _4403 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _808 = (_801 * _713) * cbMatDynParam._m0[11u].x;
    float _810 = (_801 * _714) * cbMatDynParam._m0[11u].y;
    float _812 = (_801 * _715) * cbMatDynParam._m0[11u].z;
    float _822 = dot(vec3(_734, _735, _736), vec3(_708, _709, _710)) * 2.0;
    float _832 = dot(vec3((-0.0) - (_734 - (_822 * _708)), (-0.0) - (_735 - (_822 * _709)), (-0.0) - (_736 - (_822 * _710))), vec3(0.0, -1.0, 0.0));
    float _4414 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _839 = exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 4.0);
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    vec4 _928 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _930 = _928.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1232 = sqrt(((_914 * _914) + (_915 * _915)) + (_916 * _916));
        float _1238 = (cbMatDynParam._m0[5u].x * _1232) + cbMatDynParam._m0[5u].y;
        float _4425 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1243 = (cbMatDynParam._m0[5u].z * _1232) + cbMatDynParam._m0[5u].w;
        float _4436 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) - _1239)) + _1239) < ((_930 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _941 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _942 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _944 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _946 = _944.w;
    float _964 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _967 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _970 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    vec4 _972 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _974 = _972.x;
    float _986 = (((_972.y - _712) + (_972.w * _712)) * cbMtdParam._m0[3u].x) + _712;
    vec4 _987 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1003 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_974 * _974)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _987.z;
    float _1011 = (((cbMatDynParam._m0[15u].x - _716) * cbMatDynParam._m0[15u].w) * _1003) + _716;
    float _1019 = ((_1003 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _986)) + _986;
    uint _1043 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1044 = _1043 + 9u;
    uint _1045 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * _724) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * _725) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * _726) * cbInstanceData._m0[_1045].z;
    float _4447 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _4469 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    vec4 _1057 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1062 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1073 = (((_1062.x - _1011) + (_1062.w * _1011)) * cbMtdParam._m0[3u].x) + _1011;
    float _1086 = (cbMtdParam._m0[3u].x * (((_1054 * _946) - _1054) + _1057.x)) + _1054;
    float _1087 = (cbMtdParam._m0[3u].x * (((_1055 * _946) - _1055) + _1057.y)) + _1055;
    float _1088 = (cbMtdParam._m0[3u].x * (((_1056 * _946) - _1056) + _1057.z)) + _1056;
    float _1102 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_1011 * (_724 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1011 * (_725 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1011 * (_726 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _1106 = _1102 * cbMatDynParam._m0[13u].w;
    float _1116 = (_1106 * (cbMatDynParam._m0[13u].x - _1086)) + _1086;
    float _1117 = (_1106 * (cbMatDynParam._m0[13u].y - _1087)) + _1087;
    float _1118 = (_1106 * (cbMatDynParam._m0[13u].z - _1088)) + _1088;
    float _1126 = ((_1102 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1073)) + _1073;
    float _1127 = 1.0 - _1126;
    float _1128 = _1127 * _1116;
    float _1129 = _1127 * _1117;
    float _1130 = _1127 * _1118;
    float _1134 = (_1116 + (-0.039999999105930328369140625)) * _1126;
    float _1135 = (_1117 + (-0.039999999105930328369140625)) * _1126;
    float _1136 = (_1118 + (-0.039999999105930328369140625)) * _1126;
    float _1137 = _1134 + 0.039999999105930328369140625;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1139 = _1136 + 0.039999999105930328369140625;
    vec4 _1148 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _941, cbSceneParam._m0[86u].y * _942));
    float _1151 = _1148.x * TEXCOORD_4;
    float _1152 = dot(vec3(_708, _709, _710), vec3(_921, _922, _923));
    float _1155 = _1152 * 2.0;
    float _1159 = (_1155 * _708) - _921;
    float _1160 = (_1155 * _709) - _922;
    float _1161 = (_1155 * _710) - _923;
    float _1165 = abs(dot(vec3(_921, _922, _923), vec3(_708, _709, _710)));
    float _4480 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1167 = sqrt(_1019);
    float _1178 = exp2((_1167 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1167 * 3.0));
    float _1184 = (1.0 - _1178) * ((_1167 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1185 = _1178 * _1167;
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1552;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1277 = fma(_1221, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213));
        float _1281 = fma(_1221, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213));
        float _1285 = fma(_1221, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213));
        float _1310 = _1213 + _708;
        float _1311 = _1217 + _709;
        float _1312 = _1221 + _710;
        float _1322 = fma(_1312, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1310)) - _1277;
        float _1323 = fma(_1312, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1310)) - _1281;
        float _1324 = fma(_1312, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1310)) - _1285;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1277 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1281 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[34u].z) + ((((((_1285 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1380 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1346.x + (-0.5));
        float _1382 = _1380 * (_1346.y + (-0.5));
        float _1383 = _1380 * (_1346.z + (-0.5));
        float _1390 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1353.x + (-0.5));
        float _1392 = _1390 * (_1353.y + (-0.5));
        float _1393 = _1390 * (_1353.z + (-0.5));
        float _1400 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1360.x + (-0.5));
        float _1402 = _1400 * (_1360.y + (-0.5));
        float _1403 = _1400 * (_1360.z + (-0.5));
        float _1410 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1367.x + (-0.5));
        float _1412 = _1410 * (_1367.y + (-0.5));
        float _1413 = _1410 * (_1367.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1434 = (dot(vec3(_708, _709, _710), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4506 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1444 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4517 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4528 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_1446 + 1.0))) + _1451) * _1414;
        float _1461 = _1382 * 0.5;
        float _1462 = _1392 * 0.5;
        float _1463 = _1402 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_708, _709, _710), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4561 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1488 + 1.0))) + _1493) * _1415;
        float _1503 = _1383 * 0.5;
        float _1504 = _1393 * 0.5;
        float _1505 = _1403 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_708, _709, _710), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4594 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1530 + 1.0))) + _1535) * _1416;
        _1552 = _1383;
        _1554 = _1382;
        _1555 = _1381;
        _1556 = _1393;
        _1557 = _1392;
        _1558 = _1391;
        _1559 = _1403;
        _1560 = _1402;
        _1561 = _1401;
        _1562 = _1416;
        _1563 = _1415;
        _1564 = _1414;
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1553;
        _1554 = _1553;
        _1555 = _1553;
        _1556 = _1553;
        _1557 = _1553;
        _1558 = _1553;
        _1559 = _1553;
        _1560 = _1553;
        _1561 = _1553;
        _1562 = _1553;
        _1563 = _1553;
        _1564 = _1553;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1596 = fma(_1221, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213));
        float _1600 = fma(_1221, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213));
        float _1604 = fma(_1221, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213));
        float _1627 = _1213 + _708;
        float _1628 = _1217 + _709;
        float _1629 = _1221 + _710;
        float _1639 = fma(_1629, cbModelParam._m0[30u].z, fma(_1628, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1627)) - _1596;
        float _1640 = fma(_1629, cbModelParam._m0[31u].z, fma(_1628, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1627)) - _1600;
        float _1641 = fma(_1629, cbModelParam._m0[32u].z, fma(_1628, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1627)) - _1604;
        float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
        float _1658 = ((_1645 * _1639) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1596 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1645 * _1640) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1600 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1645 * _1641) / cbModelParam._m0[35u].z) + ((((((_1604 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1676 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        vec4 _1683 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1658, _1659, _1660), 0.0);
        float _1695 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1662.x + (-0.5));
        float _1697 = _1695 * (_1662.y + (-0.5));
        float _1698 = _1695 * (_1662.z + (-0.5));
        float _1705 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1669.x + (-0.5));
        float _1707 = _1705 * (_1669.y + (-0.5));
        float _1708 = _1705 * (_1669.z + (-0.5));
        float _1715 = exp2((_1676.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1676.x + (-0.5));
        float _1717 = _1715 * (_1676.y + (-0.5));
        float _1718 = _1715 * (_1676.z + (-0.5));
        float _1725 = exp2((_1683.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1683.x + (-0.5));
        float _1727 = _1725 * (_1683.y + (-0.5));
        float _1728 = _1725 * (_1683.z + (-0.5));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = _1696 * 0.5;
        float _1733 = _1706 * 0.5;
        float _1734 = _1716 * 0.5;
        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
        float _1740 = (_1735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1735);
        float _1748 = (dot(vec3(_708, _709, _710), vec3(_1740 * _1732, _1740 * _1733, _1740 * _1734)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1759 = _1758 * 2.0;
        float _1763 = (1.0 - _1758) / (_1758 + 1.0);
        float _4657 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _1773 = ((((1.0 - _1764) * (_1759 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_1759 + 1.0))) + _1764) * _1729;
        float _1774 = _1697 * 0.5;
        float _1775 = _1707 * 0.5;
        float _1776 = _1717 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_708, _709, _710), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4668 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4679 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4690 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_1801 + 1.0))) + _1806) * _1730;
        float _1816 = _1698 * 0.5;
        float _1817 = _1708 * 0.5;
        float _1818 = _1718 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_708, _709, _710), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4723 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_1843 + 1.0))) + _1848) * _1731;
        _1865 = _1698;
        _1866 = _1697;
        _1867 = _1696;
        _1868 = _1708;
        _1869 = _1707;
        _1870 = _1706;
        _1871 = _1718;
        _1872 = _1717;
        _1873 = _1716;
        _1874 = _1731;
        _1875 = _1730;
        _1876 = _1729;
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
    }
    else
    {
        _1865 = _1553;
        _1866 = _1553;
        _1867 = _1553;
        _1868 = _1553;
        _1869 = _1553;
        _1870 = _1553;
        _1871 = _1553;
        _1872 = _1553;
        _1873 = _1553;
        _1874 = _1553;
        _1875 = _1553;
        _1876 = _1553;
        _1877 = 0.0;
        _1878 = 0.0;
        _1879 = 0.0;
    }
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1565)) + _1565;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1566)) + _1566;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1567)) + _1567;
    float _1912 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1889));
    float _1933 = _1159 * 0.5;
    float _1934 = _1160 * 0.5;
    float _1935 = _1161 * 0.5;
    float _1936 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1939 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1942 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1973;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1949 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1552, _1556, _1559, _1562));
        float _1953 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1957 = dot(vec4(_1933, _1934, _1935, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1964 = dot(vec4(cbModelParam._m0[39u]), vec4(_1933, _1934, _1935, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1984;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1975 = dot(vec4(cbModelParam._m0[40u]), vec4(_1933, _1934, _1935, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1975) ? 0.0 : (isnan(0.0) ? _1975 : max(0.0, _1975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1988 = (_1984 * cbModelParam._m0[1u].x) + (_1973 * (1.0 - cbModelParam._m0[1u].x));
    float _1998 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1019);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1998 : min(cbModelParam._m0[25u].z, _1998));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2046 = fma(_1221, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213)) + cbModelParam._m0[13u].w;
        float _2050 = fma(_1221, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213)) + cbModelParam._m0[14u].w;
        float _2054 = fma(_1221, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213)) + cbModelParam._m0[15u].w;
        float _2057 = fma(_1161, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159));
        float _2060 = fma(_1161, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159));
        float _2063 = fma(_1161, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159));
        float _2091;
        if (_2057 > 0.0)
        {
            _2091 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2091 = frontier_phi_19_17_ladder;
        }
        float _2264;
        if (_2060 > 0.0)
        {
            _2264 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2264 = frontier_phi_28_24_ladder;
        }
        float _2559;
        if (_2063 > 0.0)
        {
            _2559 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2559 = frontier_phi_40_35_ladder;
        }
        float _2561 = isnan(_2264) ? _2091 : (isnan(_2091) ? _2264 : min(_2091, _2264));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _2057) + _2046;
        float _2567 = (_2562 * _2060) + _2050;
        float _2568 = (_2562 * _2063) + _2054;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2569;
        float _2573 = _2569 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 > _2573) || ((_2567 < _2571) || ((_2566 < _2571) || (_2566 > _2573))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2568, cbModelParam._m0[9u].z, fma(_2567, cbModelParam._m0[9u].y, _2566 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2568, cbModelParam._m0[10u].z, fma(_2567, cbModelParam._m0[10u].y, _2566 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2568, cbModelParam._m0[11u].z, fma(_2567, cbModelParam._m0[11u].y, _2566 * cbModelParam._m0[11u].x))), _1999);
            frontier_phi_18_40_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _2079 = frontier_phi_18_40_ladder_2;
        _2081 = frontier_phi_18_40_ladder_1;
        _2083 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1159, _1160, _1161), _1999);
        _2079 = _2067.x * cbModelParam._m0[1u].y;
        _2081 = _2067.y * cbModelParam._m0[1u].y;
        _2083 = _2067.z * cbModelParam._m0[1u].y;
    }
    float _2087 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1019);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2087 : min(cbModelParam._m0[25u].w, _2087));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2143 = fma(_1221, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213)) + cbModelParam._m0[21u].w;
        float _2147 = fma(_1221, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213)) + cbModelParam._m0[22u].w;
        float _2151 = fma(_1221, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213)) + cbModelParam._m0[23u].w;
        float _2154 = fma(_1161, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159));
        float _2157 = fma(_1161, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159));
        float _2160 = fma(_1161, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159));
        float _2269;
        if (_2154 > 0.0)
        {
            _2269 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2269 = frontier_phi_30_26_ladder;
        }
        float _2586;
        if (_2157 > 0.0)
        {
            _2586 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2586 = frontier_phi_42_37_ladder;
        }
        float _2924;
        if (_2160 > 0.0)
        {
            _2924 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2924 = frontier_phi_52_49_ladder;
        }
        float _2926 = isnan(_2586) ? _2269 : (isnan(_2269) ? _2586 : min(_2269, _2586));
        float _2927 = isnan(_2924) ? _2926 : (isnan(_2926) ? _2924 : min(_2926, _2924));
        float _2931 = (_2927 * _2154) + _2143;
        float _2932 = (_2927 * _2157) + _2147;
        float _2933 = (_2927 * _2160) + _2151;
        float _2934 = _2927 * 9.9999997473787516355514526367188e-05;
        float _2935 = (-1.0) - _2934;
        float _2937 = _2934 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2933 > _2937) || ((_2933 < _2935) || ((_2932 > _2937) || ((_2932 < _2935) || ((_2931 < _2935) || (_2931 > _2937))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2933, cbModelParam._m0[17u].z, fma(_2932, cbModelParam._m0[17u].y, _2931 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2933, cbModelParam._m0[18u].z, fma(_2932, cbModelParam._m0[18u].y, _2931 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2933, cbModelParam._m0[19u].z, fma(_2932, cbModelParam._m0[19u].y, _2931 * cbModelParam._m0[19u].x))), _2088);
            frontier_phi_27_52_ladder = _3055.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3055.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3055.x * cbModelParam._m0[1u].z;
        }
        _2179 = frontier_phi_27_52_ladder_2;
        _2181 = frontier_phi_27_52_ladder_1;
        _2183 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1159, _1160, _1161), _2088);
        _2179 = _2163.x * cbModelParam._m0[1u].z;
        _2181 = _2163.y * cbModelParam._m0[1u].z;
        _2183 = _2163.z * cbModelParam._m0[1u].z;
    }
    float _2196 = (((_1184 * _1137) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2179 - _2079)) + _2079);
    float _2198 = (((_1184 * _1138) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2181 - _2081)) + _2081);
    float _2200 = (((_1184 * _1139) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2183 - _2083)) + _2083);
    float _2203 = fma(_2200, cbSceneParam._m0[89u].z, fma(_2198, cbSceneParam._m0[89u].y, _2196 * cbSceneParam._m0[89u].x));
    float _2206 = fma(_2200, cbSceneParam._m0[90u].z, fma(_2198, cbSceneParam._m0[90u].y, _2196 * cbSceneParam._m0[90u].x));
    float _2209 = fma(_2200, cbSceneParam._m0[91u].z, fma(_2198, cbSceneParam._m0[91u].y, _2196 * cbSceneParam._m0[91u].x));
    float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2247 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2255 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2256 = _2243 / _2255;
    float _2257 = _2247 / _2255;
    float _2258 = _2251 / _2255;
    float _2405;
    float _2406;
    float _2407;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2285 = ((uint(_2258 > cbSceneParam._m0[59u].y) + uint(_2258 > cbSceneParam._m0[59u].x)) + uint(_2258 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2286 = _2285 + 43u;
        uint _2294 = _2285 + 44u;
        uint _2302 = _2285 + 45u;
        uint _2310 = _2285 + 46u;
        float _2321 = fma(_2255, cbSceneParam._m0[_2286].w, fma(_2251, cbSceneParam._m0[_2286].z, fma(_2247, cbSceneParam._m0[_2286].y, _2243 * cbSceneParam._m0[_2286].x)));
        float _2325 = fma(_2255, cbSceneParam._m0[_2294].w, fma(_2251, cbSceneParam._m0[_2294].z, fma(_2247, cbSceneParam._m0[_2294].y, _2243 * cbSceneParam._m0[_2294].x)));
        float _2333 = fma(_2255, cbSceneParam._m0[_2310].w, fma(_2251, cbSceneParam._m0[_2310].z, fma(_2247, cbSceneParam._m0[_2310].y, _2243 * cbSceneParam._m0[_2310].x)));
        float _2338 = cbSceneParam._m0[33u].z * _2333;
        float _2340 = cbSceneParam._m0[33u].w * _2333;
        float _2343 = fma(_2255, cbSceneParam._m0[_2302].w, fma(_2251, cbSceneParam._m0[_2302].z, fma(_2247, cbSceneParam._m0[_2302].y, _2243 * cbSceneParam._m0[_2302].x))) / _2333;
        float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2257 * _2257) + (_2256 * _2256)) + (_2258 * _2258))) * cbSceneParam._m0[33u].y;
        float _4849 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2398 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2338 + _2321) / _2333, (_2340 + _2325) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2340 + _2321) / _2333, (_2325 - _2338) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2321 - _2338) / _2333, (_2325 - _2340) / _2333), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2321 - _2340) / _2333, (_2338 + _2325) / _2333), _2343), 0.0)).x), vec4(0.25)));
        _2405 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
        _2406 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
        _2407 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2405 = 1.0;
        _2406 = 1.0;
        _2407 = 1.0;
    }
    float _2471;
    float _2473;
    float _2475;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2459 = fma(_2255, cbSceneParam._m0[63u].w, fma(_2251, cbSceneParam._m0[63u].z, fma(_2247, cbSceneParam._m0[63u].y, _2243 * cbSceneParam._m0[63u].x)));
        float _2460 = fma(_2255, cbSceneParam._m0[60u].w, fma(_2251, cbSceneParam._m0[60u].z, fma(_2247, cbSceneParam._m0[60u].y, _2243 * cbSceneParam._m0[60u].x))) / _2459;
        float _2461 = fma(_2255, cbSceneParam._m0[61u].w, fma(_2251, cbSceneParam._m0[61u].z, fma(_2247, cbSceneParam._m0[61u].y, _2243 * cbSceneParam._m0[61u].x))) / _2459;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2460 >= cbSceneParam._m0[64u].x) && (_2461 >= cbSceneParam._m0[64u].y)) && (_2460 <= cbSceneParam._m0[64u].z)) && (_2461 <= cbSceneParam._m0[64u].w))
        {
            float _2599 = fma(_2255, cbSceneParam._m0[62u].w, fma(_2251, cbSceneParam._m0[62u].z, fma(_2247, cbSceneParam._m0[62u].y, _2243 * cbSceneParam._m0[62u].x))) / _2459;
            float _2603 = isnan(cbSceneParam._m0[41u].w) ? _2599 : (isnan(_2599) ? cbSceneParam._m0[41u].w : max(_2599, cbSceneParam._m0[41u].w));
            float _2646 = (cbSceneParam._m0[33u].x - sqrt(((_2257 * _2257) + (_2256 * _2256)) + (_2258 * _2258))) * cbSceneParam._m0[33u].y;
            float _4865 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
            float _2653 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2460, cbSceneParam._m0[33u].w + _2461), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2460, _2461 - cbSceneParam._m0[33u].z), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2460 - cbSceneParam._m0[33u].z, _2461 - cbSceneParam._m0[33u].w), _2603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2460 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2461), _2603), 0.0)).x), vec4(0.25)));
            float _2657 = 1.0 - (_2653 * cbSceneParam._m0[34u].x);
            float _2658 = 1.0 - (_2653 * cbSceneParam._m0[34u].y);
            float _2659 = 1.0 - (_2653 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2658) ? _2406 : (isnan(_2406) ? _2658 : min(_2406, _2658));
            frontier_phi_39_38_ladder_1 = isnan(_2657) ? _2405 : (isnan(_2405) ? _2657 : min(_2405, _2657));
            frontier_phi_39_38_ladder_2 = isnan(_2659) ? _2407 : (isnan(_2407) ? _2659 : min(_2407, _2659));
        }
        else
        {
            frontier_phi_39_38_ladder = _2406;
            frontier_phi_39_38_ladder_1 = _2405;
            frontier_phi_39_38_ladder_2 = _2407;
        }
        _2471 = frontier_phi_39_38_ladder_1;
        _2473 = frontier_phi_39_38_ladder;
        _2475 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2471 = _2405;
        _2473 = _2406;
        _2475 = _2407;
    }
    uvec4 _2480 = floatBitsToUint(cbInstanceData._m0[_1043 + 5u]);
    uint _2482 = _2480.x * 14u;
    uint _2483 = _2482 + 13u;
    float _2490 = _1151 + (-1.0);
    float _2495 = (cbLight._m0[_2483].x * _2490) + 1.0;
    float _2496 = (cbLight._m0[_2483].y * _2490) + 1.0;
    float _2497 = (cbLight._m0[_2483].z * _2490) + 1.0;
    float _2498 = (cbLight._m0[_2483].w * _2490) + 1.0;
    uint _2499 = _2482 + 5u;
    float _2505 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
    uint _2509 = _2482 + 4u;
    float _2518 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2522 = _2482 | 1u;
    float _2533 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_708, _709, _710));
    float _2536 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_708, _709, _710));
    float _4901 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _4912 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2541 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * 0.3183098733425140380859375;
    float _2543 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * 0.3183098733425140380859375;
    float _2550 = ((cbLight._m0[_2499].x * _2505) * _2543) + (((cbLight._m0[_2509].x * _2471) * _2518) * _2541);
    float _2551 = ((_2505 * cbLight._m0[_2499].y) * _2543) + (((cbLight._m0[_2509].y * _2473) * _2518) * _2541);
    float _2552 = ((_2505 * cbLight._m0[_2499].z) * _2543) + (((cbLight._m0[_2509].z * _2475) * _2518) * _2541);
    uvec4 _2556 = floatBitsToUint(cbLight._m0[_2482 + 12u]);
    bool _2558 = _2556.x == 0u;
    float _2660;
    float _2662;
    float _2664;
    if (_2558)
    {
        _2660 = _2550;
        _2662 = _2551;
        _2664 = _2552;
    }
    else
    {
        uint _2668 = _2482 + 6u;
        float _2684 = (dot(vec3(cbLight._m0[_2482 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2685 = _2684 * _2684;
        float _4923 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2686 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2687 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2660 = (((cbLight._m0[_2668].x * 0.3183098733425140380859375) * _2686) * _2687) + _2550;
        _2662 = (((cbLight._m0[_2668].y * 0.3183098733425140380859375) * _2686) * _2687) + _2551;
        _2664 = (((cbLight._m0[_2668].z * 0.3183098733425140380859375) * _2686) * _2687) + _2552;
    }
    bool _2667 = _2556.y == 0u;
    float _2722;
    float _2724;
    float _2726;
    if (_2667)
    {
        _2722 = _2660;
        _2724 = _2662;
        _2726 = _2664;
    }
    else
    {
        uint _2895 = _2482 + 7u;
        float _2911 = (dot(vec3(cbLight._m0[_2482 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2912 = _2911 * _2911;
        float _4939 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2913 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2914 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2722 = (((cbLight._m0[_2895].x * 0.3183098733425140380859375) * _2913) * _2914) + _2660;
        _2724 = (((cbLight._m0[_2895].y * 0.3183098733425140380859375) * _2913) * _2914) + _2662;
        _2726 = (((cbLight._m0[_2895].z * 0.3183098733425140380859375) * _2913) * _2914) + _2664;
    }
    uint _2729 = _2482 + 8u;
    float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _1019) * 0.949999988079071044921875);
    float _2743 = _2742 * _2742;
    float _2744 = cbLight._m0[_2482].x + _921;
    float _2745 = cbLight._m0[_2482].y + _922;
    float _2746 = cbLight._m0[_2482].z + _923;
    float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
    float _2751 = _2750 * _2744;
    float _2752 = _2750 * _2745;
    float _2753 = _2750 * _2746;
    float _2754 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2482].xyz));
    float _4955 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
    float _4966 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2758 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    float _2759 = dot(vec3(_708, _709, _710), vec3(_2751, _2752, _2753));
    float _4977 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2762 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
    float _2763 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2751, _2752, _2753));
    float _4988 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2767 = _2743 * _2743;
    float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
    float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) * 5.0);
    float _2780 = 0.959999978542327880859375 - _1134;
    float _2782 = 0.959999978542327880859375 - _1135;
    float _2783 = 0.959999978542327880859375 - _1136;
    float _2790 = 1.0 - _2743;
    float _2801 = (0.5 / (((_2758 * ((_2757 * _2790) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2790) + _2743) * _2757))) * _2757;
    float _4999 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2803 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
    uint _2817 = _2482 + 9u;
    float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _1019) * 0.949999988079071044921875);
    float _2829 = _2828 * _2828;
    float _2830 = cbLight._m0[_2522].x + _921;
    float _2831 = cbLight._m0[_2522].y + _922;
    float _2832 = cbLight._m0[_2522].z + _923;
    float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
    float _2837 = _2836 * _2830;
    float _2838 = _2836 * _2831;
    float _2839 = _2836 * _2832;
    float _2840 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2522].xyz));
    float _5010 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2843 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    float _2844 = dot(vec3(_708, _709, _710), vec3(_2837, _2838, _2839));
    float _5021 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2847 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
    float _2848 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2837, _2838, _2839));
    float _5032 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
    float _2852 = _2829 * _2829;
    float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
    float _2863 = exp2(log2(1.0 - (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) * 5.0);
    float _2870 = 1.0 - _2829;
    float _2880 = (0.5 / (((_2758 * ((_2843 * _2870) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2870) + _2829) * _2843))) * _2843;
    float _5043 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
    float _2882 = (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
    float _2892 = (((((_2863 * _2780) + _1137) * cbLight._m0[_2817].x) * _2882) * _2505) + ((((cbLight._m0[_2729].x * _2471) * ((_2779 * _2780) + _1137)) * _2803) * _2518);
    float _2893 = (((((_2863 * _2782) + _1138) * cbLight._m0[_2817].y) * _2882) * _2505) + ((((cbLight._m0[_2729].y * _2473) * ((_2779 * _2782) + _1138)) * _2803) * _2518);
    float _2894 = (((((_2863 * _2783) + _1139) * cbLight._m0[_2817].z) * _2882) * _2505) + ((((cbLight._m0[_2729].z * _2475) * ((_2779 * _2783) + _1139)) * _2803) * _2518);
    float _2950;
    float _2952;
    float _2954;
    if (_2558)
    {
        _2950 = _2892;
        _2952 = _2893;
        _2954 = _2894;
    }
    else
    {
        uint _2956 = _2482 + 2u;
        uint _2960 = _2482 + 10u;
        float _2974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2956].w)) * _1019) * 0.949999988079071044921875);
        float _2975 = _2974 * _2974;
        float _2976 = cbLight._m0[_2956].x + _921;
        float _2977 = cbLight._m0[_2956].y + _922;
        float _2978 = cbLight._m0[_2956].z + _923;
        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
        float _2983 = _2982 * _2976;
        float _2984 = _2982 * _2977;
        float _2985 = _2982 * _2978;
        float _2986 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2956].xyz));
        float _5054 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2989 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
        float _2990 = dot(vec3(_708, _709, _710), vec3(_2983, _2984, _2985));
        float _5065 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2993 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
        float _2994 = dot(vec3(cbLight._m0[_2956].xyz), vec3(_2983, _2984, _2985));
        float _5076 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2998 = _2975 * _2975;
        float _3002 = ((_2993 * _2993) * (_2998 + (-1.0))) + 1.0;
        float _3009 = exp2(log2(1.0 - (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) * 5.0);
        float _3016 = 1.0 - _2975;
        float _3026 = (0.5 / (((_2758 * ((_2989 * _3016) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _3016) + _2975) * _2989))) * _2989;
        float _5087 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        float _3028 = (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_2998 / ((_3002 * _3002) * 3.141590118408203125));
        float _3029 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2950 = (((((_3009 * _2780) + _1137) * cbLight._m0[_2960].x) * _3028) * _3029) + _2892;
        _2952 = (((((_3009 * _2782) + _1138) * cbLight._m0[_2960].y) * _3028) * _3029) + _2893;
        _2954 = (((((_3009 * _2783) + _1139) * cbLight._m0[_2960].z) * _3028) * _3029) + _2894;
    }
    float _3060;
    float _3062;
    float _3064;
    if (_2667)
    {
        _3060 = _2950;
        _3062 = _2952;
        _3064 = _2954;
    }
    else
    {
        uint _3071 = _2482 + 3u;
        uint _3075 = _2482 + 11u;
        float _3089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3071].w)) * _1019) * 0.949999988079071044921875);
        float _3090 = _3089 * _3089;
        float _3091 = cbLight._m0[_3071].x + _921;
        float _3092 = cbLight._m0[_3071].y + _922;
        float _3093 = cbLight._m0[_3071].z + _923;
        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
        float _3098 = _3097 * _3091;
        float _3099 = _3097 * _3092;
        float _3100 = _3097 * _3093;
        float _3101 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_3071].xyz));
        float _5103 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3104 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
        float _3105 = dot(vec3(_708, _709, _710), vec3(_3098, _3099, _3100));
        float _5114 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        float _3108 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
        float _3109 = dot(vec3(cbLight._m0[_3071].xyz), vec3(_3098, _3099, _3100));
        float _5125 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3113 = _3090 * _3090;
        float _3117 = ((_3108 * _3108) * (_3113 + (-1.0))) + 1.0;
        float _3124 = exp2(log2(1.0 - (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0)))) * 5.0);
        float _3131 = 1.0 - _3090;
        float _3141 = (0.5 / (((_2758 * ((_3104 * _3131) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _3131) + _3090) * _3104))) * _3104;
        float _5136 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
        float _3143 = (isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0))) * (_3113 / ((_3117 * _3117) * 3.141590118408203125));
        float _3144 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _3060 = (((((_3124 * _2780) + _1137) * cbLight._m0[_3075].x) * _3143) * _3144) + _2950;
        _3062 = (((((_3124 * _2782) + _1138) * cbLight._m0[_3075].y) * _3143) * _3144) + _2952;
        _3064 = (((((_3124 * _2783) + _1139) * cbLight._m0[_3075].z) * _3143) * _3144) + _2954;
    }
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    if (_2480.y == 0u)
    {
        uvec4 _3165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3166 = _3165.x;
        uint _3177 = uint((float(_3165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _942) / _3166))) + floor(float(uint(cbSceneParam._m0[85u].x * _941) / _3166)));
        float _3187 = (log2(_2258 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3188 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
        uint _3191 = uint(isnan(14.0) ? _3188 : (isnan(_3188) ? 14.0 : min(_3188, 14.0)));
        uvec4 _3196 = texelFetch(g_lightClusterGridBuffer, int(((_3191 << 2u) + (_3177 << 6u)) >> 2u));
        uint _3197 = _3196.x;
        uint _3198 = _3165.z;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        float _3320;
        float _3322;
        if (((((1u << ((_3198 >> 4u) & 15u)) + 4294967295u) & _3197) == 0u) || ((_3198 & 240u) == 0u))
        {
            _3312 = 0.0;
            _3314 = 0.0;
            _3316 = 0.0;
            _3318 = 0.0;
            _3320 = 0.0;
            _3322 = 0.0;
        }
        else
        {
            float _3313;
            float _3315;
            float _3317;
            float _3319;
            float _3321;
            float _3323;
            float _3473 = 0.0;
            float _3474 = 0.0;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            uint _3479 = 0u;
            uint _3488;
            bool _3489;
            for (;;)
            {
                _3488 = texelFetch(g_lightClassification, int((((_3191 << 5u) + (_3177 << 9u)) + (_3479 << 2u)) >> 2u)).x;
                _3489 = _3488 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3489)
                {
                    frontier_phi_73_pred = _3478;
                    frontier_phi_73_pred_1 = _3477;
                    frontier_phi_73_pred_2 = _3476;
                    frontier_phi_73_pred_3 = _3475;
                    frontier_phi_73_pred_4 = _3474;
                    frontier_phi_73_pred_5 = _3473;
                }
                else
                {
                    float _3618;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    uint _3624;
                    _3618 = _3473;
                    _3619 = _3474;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3488;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    for (;;)
                    {
                        uint _3628 = uint(findLSB(_3624)) + (_3479 << 5u);
                        uint _3625 = (_3624 + 4294967295u) & _3624;
                        uint _3630 = _3628 * 48u;
                        vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3630)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 3u)).x));
                        uint _3650 = (_3628 * 48u) + 4u;
                        vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3650)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 3u)).x));
                        uint _3669 = (_3628 * 48u) + 8u;
                        vec3 _3680 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3669)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 2u)).x));
                        float _3684 = _3644.x - _2256;
                        float _3685 = _3644.y - _2257;
                        float _3686 = _3644.z - _2258;
                        float _3687 = dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686));
                        float _3690 = inversesqrt(_3687);
                        float _3691 = _3690 * _3684;
                        float _3692 = _3690 * _3685;
                        float _3693 = _3690 * _3686;
                        float _3694 = dot(vec3(_964, _967, _970), vec3(_3691, _3692, _3693));
                        float _3699 = 1.0 - (_3687 * _3644.w);
                        float _5162 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                        float _3700 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                        float _3701 = sqrt(_3687) * _3663.w;
                        float _3704 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                        float _3705 = _3704 * _3704;
                        float _3708 = ((1.0 - _3705) * _3694) + _3705;
                        float _3711 = _3701 * _3701;
                        float _3714 = ((isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0))) * _3700) / ((_3711 * 0.699999988079071044921875) + 1.0);
                        float _3718 = (-0.0) - _2256;
                        float _3719 = (-0.0) - _2257;
                        float _3720 = (-0.0) - _2258;
                        float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                        float _3725 = _3724 * _3718;
                        float _3726 = _3724 * _3719;
                        float _3727 = _3724 * _3720;
                        float _3734 = exp2(log2(1.0 / ((_3711 * 3.5) + 5.0)) * 0.25);
                        float _3735 = 1.0 - _1167;
                        float _3742 = sqrt(1.0 - ((1.0 - (_3735 * _3735)) * (1.0 - (_3734 * _3734))));
                        float _3743 = _3742 * _3742;
                        float _3744 = _3743 * _3743;
                        float _3745 = _3725 + _3691;
                        float _3746 = _3726 + _3692;
                        float _3747 = _3727 + _3693;
                        float _3751 = inversesqrt(dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747)));
                        float _3755 = dot(vec3(_964, _967, _970), vec3(_3725, _3726, _3727));
                        float _5178 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3758 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                        float _3759 = dot(vec3(_964, _967, _970), vec3(_3751 * _3745, _3751 * _3746, _3751 * _3747));
                        float _5189 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                        float _3762 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                        float _3766 = ((_3762 * _3762) * (_3744 + (-1.0))) + 1.0;
                        float _3767 = _3704 * _3743;
                        float _3768 = _3767 * _3767;
                        float _3771 = ((1.0 - _3768) * _3694) + _3768;
                        float _5200 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                        float _3772 = isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0));
                        float _3773 = 1.0 - _3743;
                        float _3783 = (0.5 / (((_3772 * ((_3758 * _3773) + _3743)) + 9.9999999392252902907785028219223e-09) + (((_3772 * _3773) + _3743) * _3758))) * _3772;
                        float _5211 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3794 = (((_3744 * 3.1415927410125732421875) * (isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0)))) / ((_3766 * _3766) * ((_3711 * 2.1991131305694580078125) + 3.141590118408203125))) * _3700;
                        _3548 = (_3714 * _3663.x) + _3621;
                        _3549 = (_3714 * _3663.y) + _3622;
                        _3550 = (_3714 * _3663.z) + _3623;
                        _3545 = (_3794 * _3680.x) + _3618;
                        _3546 = (_3794 * _3680.y) + _3619;
                        _3547 = (_3794 * _3680.z) + _3620;
                        if (_3625 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3618 = _3545;
                            _3619 = _3546;
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3625;
                        }
                    }
                    frontier_phi_73_pred = _3550;
                    frontier_phi_73_pred_1 = _3549;
                    frontier_phi_73_pred_2 = _3548;
                    frontier_phi_73_pred_3 = _3547;
                    frontier_phi_73_pred_4 = _3546;
                    frontier_phi_73_pred_5 = _3545;
                }
                _3323 = frontier_phi_73_pred;
                _3321 = frontier_phi_73_pred_1;
                _3319 = frontier_phi_73_pred_2;
                _3317 = frontier_phi_73_pred_3;
                _3315 = frontier_phi_73_pred_4;
                _3313 = frontier_phi_73_pred_5;
                uint _3480 = _3479 + 1u;
                if (_3480 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3473 = _3313;
                    _3474 = _3315;
                    _3475 = _3317;
                    _3476 = _3319;
                    _3477 = _3321;
                    _3478 = _3323;
                    _3479 = _3480;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3312 = _3313;
            _3314 = _3315;
            _3316 = _3317;
            _3318 = _3319;
            _3320 = _3321;
            _3322 = _3323;
        }
        uvec4 _3326 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3327 = _3326.z;
        uint _3329 = (_3327 >> 8u) & 15u;
        float _3441;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        if (((4294967295u << _3329) & _3197) == 0u)
        {
            _3441 = _3312;
            _3443 = _3314;
            _3445 = _3316;
            _3447 = _3318;
            _3449 = _3320;
            _3451 = _3322;
        }
        else
        {
            float _3466 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
            float _3467 = _3466 * _2256;
            float _3468 = _3466 * _2257;
            float _3469 = _3466 * _2258;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3329 < ((_3327 >> 12u) & 15u))
            {
                float _3442;
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3601 = _3312;
                float _3602 = _3314;
                float _3603 = _3316;
                float _3604 = _3318;
                float _3605 = _3320;
                float _3606 = _3322;
                uint _3607 = _3329;
                uint _3616;
                bool _3617;
                for (;;)
                {
                    _3616 = texelFetch(g_lightClassification, int((((_3191 << 5u) + (_3177 << 9u)) + (_3607 << 2u)) >> 2u)).x;
                    _3617 = _3616 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3617)
                    {
                        frontier_phi_84_pred = _3605;
                        frontier_phi_84_pred_1 = _3604;
                        frontier_phi_84_pred_2 = _3603;
                        frontier_phi_84_pred_3 = _3602;
                        frontier_phi_84_pred_4 = _3601;
                        frontier_phi_84_pred_5 = _3606;
                    }
                    else
                    {
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _4103;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _3821 = _3601;
                        float _3822 = _3602;
                        float _3823 = _3603;
                        float _3824 = _3604;
                        float _3825 = _3605;
                        float _3826 = _3606;
                        uint _3827 = _3616;
                        uint _3828;
                        vec4 _3853;
                        float _3854;
                        vec4 _3869;
                        vec3 _3881;
                        vec4 _3896;
                        vec4 _3912;
                        float _3959;
                        bool _3960;
                        for (;;)
                        {
                            uint _3838 = ((_3607 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3827));
                            _3828 = (_3827 + 4294967295u) & _3827;
                            uint _3840 = _3838 * 40u;
                            _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            _3854 = _3853.w;
                            uint _3856 = (_3838 * 40u) + 4u;
                            _3869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 3u)).x));
                            uint _3871 = (_3838 * 40u) + 8u;
                            _3881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x));
                            uint _3883 = (_3838 * 40u) + 16u;
                            _3896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 3u)).x));
                            uint _3899 = (_3838 * 40u) + 20u;
                            _3912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 3u)).x));
                            uint _3915 = (_3838 * 40u) + 24u;
                            vec4 _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            uint _3934 = (_3838 * 40u) + 28u;
                            vec4 _3947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 3u)).x));
                            _3959 = fma(_2258, _3947.z, fma(_2257, _3947.y, _3947.x * _2256)) + _3947.w;
                            _3960 = !((fma(_2258, _3928.z, fma(_2257, _3928.y, _3928.x * _2256)) + _3928.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3960)
                            {
                                float _3987 = _3853.x - _2256;
                                float _3988 = _3853.y - _2257;
                                float _3989 = _3853.z - _2258;
                                float _3990 = dot(vec3(_3987, _3988, _3989), vec3(_3987, _3988, _3989));
                                float _3993 = inversesqrt(_3990);
                                float _3994 = _3993 * _3987;
                                float _3995 = _3993 * _3988;
                                float _3996 = _3993 * _3989;
                                float _4000 = 1.0 - (_3990 / (_3854 * _3854));
                                float _5222 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4001 = isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0));
                                float _4005 = sqrt(_3990) * _3869.w;
                                float _4007 = 1.39999997615814208984375 / (_4005 + 1.39999997615814208984375);
                                float _4008 = _4007 * _4007;
                                float _4011 = ((1.0 - _4008) * dot(vec3(_3994, _3995, _3996), vec3(_964, _967, _970))) + _4008;
                                float _4014 = _4005 * _4005;
                                float _4018 = (fma(_2258, _3896.z, fma(_2257, _3896.y, _3896.x * _2256)) + _3896.w) / _3959;
                                float _4019 = (fma(_2258, _3912.z, fma(_2257, _3912.y, _3912.x * _2256)) + _3912.w) / _3959;
                                float _4023 = 1.0 - dot(vec2(_4018, _4019), vec2(_4018, _4019));
                                float _5238 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4024 = isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0));
                                float _4025 = _4024 * (((isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0))) * _4001) / ((_4014 * 0.699999988079071044921875) + 1.0));
                                float _4037 = exp2(log2(1.0 / ((_4014 * 3.5) + 5.0)) * 0.25);
                                float _4038 = 1.0 - _1167;
                                float _4045 = sqrt(1.0 - ((1.0 - (_4038 * _4038)) * (1.0 - (_4037 * _4037))));
                                float _4046 = _4045 * _4045;
                                float _4047 = _4046 * _4046;
                                float _4048 = _3994 - _3467;
                                float _4049 = _3995 - _3468;
                                float _4050 = _3996 - _3469;
                                float _4054 = inversesqrt(dot(vec3(_4048, _4049, _4050), vec3(_4048, _4049, _4050)));
                                float _4058 = dot(vec3(_964, _967, _970), vec3((-0.0) - _3467, (-0.0) - _3468, (-0.0) - _3469));
                                float _5249 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4061 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                                float _4062 = dot(vec3(_964, _967, _970), vec3(_4054 * _4048, _4054 * _4049, _4054 * _4050));
                                float _5260 = isnan(0.0) ? _4062 : (isnan(_4062) ? 0.0 : max(_4062, 0.0));
                                float _4065 = isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0));
                                float _4069 = ((_4065 * _4065) * (_4047 + (-1.0))) + 1.0;
                                float _4070 = _4007 * _4046;
                                float _4071 = _4070 * _4070;
                                float _4077 = ((1.0 - _4071) * dot(vec3(_964, _967, _970), vec3(_3994, _3995, _3996))) + _4071;
                                float _5271 = isnan(0.0) ? _4077 : (isnan(_4077) ? 0.0 : max(_4077, 0.0));
                                float _4078 = isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0));
                                float _4079 = 1.0 - _4046;
                                float _4089 = (0.5 / (((_4078 * ((_4061 * _4079) + _4046)) + 9.9999999392252902907785028219223e-09) + (((_4078 * _4079) + _4046) * _4061))) * _4078;
                                float _5282 = isnan(0.0) ? _4089 : (isnan(_4089) ? 0.0 : max(_4089, 0.0));
                                float _4099 = (_4024 * _4001) * (((_4047 * 3.1415927410125732421875) * (isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0)))) / ((_4069 * _4069) * ((_4014 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4025 * _3869.y;
                                frontier_phi_90_pred_1 = _4025 * _3869.x;
                                frontier_phi_90_pred_2 = _4099 * _3881.z;
                                frontier_phi_90_pred_3 = _4099 * _3881.y;
                                frontier_phi_90_pred_4 = _4099 * _3881.x;
                                frontier_phi_90_pred_5 = _4025 * _3869.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4107 = frontier_phi_90_pred;
                            _4106 = frontier_phi_90_pred_1;
                            _4105 = frontier_phi_90_pred_2;
                            _4104 = frontier_phi_90_pred_3;
                            _4103 = frontier_phi_90_pred_4;
                            _4108 = frontier_phi_90_pred_5;
                            _3811 = _4106 + _3824;
                            _3812 = _4107 + _3825;
                            _3813 = _4108 + _3826;
                            _3808 = _4103 + _3821;
                            _3809 = _4104 + _3822;
                            _3810 = _4105 + _3823;
                            if (_3828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3821 = _3808;
                                _3822 = _3809;
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3828;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3812;
                        frontier_phi_84_pred_1 = _3811;
                        frontier_phi_84_pred_2 = _3810;
                        frontier_phi_84_pred_3 = _3809;
                        frontier_phi_84_pred_4 = _3808;
                        frontier_phi_84_pred_5 = _3813;
                    }
                    _3450 = frontier_phi_84_pred;
                    _3448 = frontier_phi_84_pred_1;
                    _3446 = frontier_phi_84_pred_2;
                    _3444 = frontier_phi_84_pred_3;
                    _3442 = frontier_phi_84_pred_4;
                    _3452 = frontier_phi_84_pred_5;
                    uint _3608 = _3607 + 1u;
                    if (_3608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3601 = _3442;
                        _3602 = _3444;
                        _3603 = _3446;
                        _3604 = _3448;
                        _3605 = _3450;
                        _3606 = _3452;
                        _3607 = _3608;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3452;
                frontier_phi_65_66_ladder_1 = _3448;
                frontier_phi_65_66_ladder_2 = _3450;
                frontier_phi_65_66_ladder_3 = _3444;
                frontier_phi_65_66_ladder_4 = _3442;
                frontier_phi_65_66_ladder_5 = _3446;
            }
            else
            {
                frontier_phi_65_66_ladder = _3322;
                frontier_phi_65_66_ladder_1 = _3318;
                frontier_phi_65_66_ladder_2 = _3320;
                frontier_phi_65_66_ladder_3 = _3314;
                frontier_phi_65_66_ladder_4 = _3312;
                frontier_phi_65_66_ladder_5 = _3316;
            }
            _3441 = frontier_phi_65_66_ladder_4;
            _3443 = frontier_phi_65_66_ladder_3;
            _3445 = frontier_phi_65_66_ladder_5;
            _3447 = frontier_phi_65_66_ladder_1;
            _3449 = frontier_phi_65_66_ladder_2;
            _3451 = frontier_phi_65_66_ladder;
        }
        float _3456 = isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0));
        _3209 = (_3456 * _3447) + _2722;
        _3211 = (_3456 * _3449) + _2724;
        _3213 = (_3456 * _3451) + _2726;
        _3215 = ((_3441 * _1137) * _3456) + _3060;
        _3217 = ((_3443 * _1138) * _3456) + _3062;
        _3219 = ((_3445 * _1139) * _3456) + _3064;
    }
    else
    {
        _3209 = _2722;
        _3211 = _2724;
        _3213 = _2726;
        _3215 = _3060;
        _3217 = _3062;
        _3219 = _3064;
    }
    uint _3225 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _3231 = cbInstanceData._m0[_3225].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _750) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _640) * _653.x) * _779)) + (((_808 - (_808 * _716)) + (cbMatDynParam._m0[11u].x * _839)) * cbMatDynParam._m0[9u].x));
    float _3232 = cbInstanceData._m0[_3225].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _750) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _640) * _653.y) * _779)) + (((_810 - (_810 * _716)) + (cbMatDynParam._m0[11u].y * _839)) * cbMatDynParam._m0[9u].y));
    float _3233 = cbInstanceData._m0[_3225].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _750) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _640) * _653.z) * _779)) + (((_812 - (_812 * _716)) + (cbMatDynParam._m0[11u].z * _839)) * cbMatDynParam._m0[9u].z));
    float _5298 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _5309 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _5320 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _5331 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3251 = (((isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0))) * (_3209 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1151))) + ((_3215 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1988)) * cbPerFrame._m0[3u].x)) + _3231;
    float _3253 = (_3232 + ((_3217 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1988)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0))) * (_3211 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1151)));
    float _3255 = (_3233 + ((_3219 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1988)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5320 : (isnan(_5320) ? 1.0 : min(_5320, 1.0))) * (_3213 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1151)));
    float _3256 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
    float _3257 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
    float _3258 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
    float _3264 = cbMtdParam._m0[2u].x * _3231;
    float _3265 = cbMtdParam._m0[2u].y * _3232;
    float _3266 = cbMtdParam._m0[2u].z * _3233;
    float _3273 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _779) + cbMatDynParam._m0[12u].y;
    float _3278 = cbInstanceData._m0[_1043 + 6u].w * (isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0)));
    float _3283 = _941 / cbSceneParam._m0[86u].x;
    float _3284 = _942 / cbSceneParam._m0[86u].y;
    vec4 _3298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3283, _3284, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3300 = _3298.x;
    float _3301 = _3298.y;
    float _3302 = _3298.z;
    float _3303 = _3298.w;
    float _3374;
    float _3376;
    float _3378;
    float _3380;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _3337 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _3338 = _3337 / _865;
        float _3349 = _3338 * _914;
        float _3350 = _915 * _3338;
        float _3351 = (-0.0) - _3350;
        float _3352 = _3338 * _916;
        float _3354 = (cbSceneParam._m0[77u].w * _3351) / _3337;
        float _3355 = _3354 + cbSceneParam._m0[79u].w;
        float _3356 = cbSceneParam._m0[79u].w - _3350;
        float _3362 = sqrt(((_3349 * _3349) + (_3350 * _3350)) + (_3352 * _3352));
        float _3365 = (1.0 - (cbSceneParam._m0[77u].w / _3337)) * _3362;
        float _3370 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3372 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3558;
        if (abs((_3351 - _3354) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3558 = ((((_3355 > 0.0) ? exp2(_3370 * _3355) : (2.0 - exp2(_3372 * _3355))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3365;
        }
        else
        {
            float _3502 = 1.0 / cbSceneParam._m0[80u].x;
            float _3503 = isnan(_3356) ? _3355 : (isnan(_3355) ? _3356 : max(_3355, _3356));
            float _3504 = isnan(_3356) ? _3355 : (isnan(_3355) ? _3356 : min(_3355, _3356));
            float _3513 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : min(_3503, 0.0));
            float _3514 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : min(_3504, 0.0));
            _3558 = ((abs(_3362 / _3351) * cbSceneParam._m0[80u].y) * ((((_3513 - _3514) * 2.0) - ((exp2(_3370 * (isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0)))) - exp2(_3370 * (isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))))) * _3502)) - ((exp2(_3372 * _3513) - exp2(_3372 * _3514)) * _3502))) + (_3365 * cbSceneParam._m0[80u].z);
        }
        vec4 _3560 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3283, _3284, 1.0), 0.0);
        float _3569 = exp2((_3558 * (-1.44269502162933349609375)) * (1.0 - _3560.w));
        float _3570 = log2(_3569);
        float _3586 = log2(_3303);
        _3374 = (exp2(_3586 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].x)) * _3560.x) / cbSceneParam._m0[78u].x)) + _3300;
        _3376 = (exp2(_3586 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].y)) * _3560.y) / cbSceneParam._m0[78u].y)) + _3301;
        _3378 = (exp2(_3586 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].z)) * _3560.z) / cbSceneParam._m0[78u].z)) + _3302;
        _3380 = _3569 * _3303;
    }
    else
    {
        _3374 = _3300;
        _3376 = _3301;
        _3378 = _3302;
        _3380 = _3303;
    }
    bool _3596;
    vec4 _3390;
    vec4 _3412;
    float _3414;
    float _3418;
    float _3419;
    float _3420;
    float _3423;
    float _3426;
    float _3429;
    float _3430;
    bool _3440;
    for (;;)
    {
        _3390 = cbMatDynParam._m0[0u];
        float _3392 = roundEven(_3390.y);
        bool _3393 = _3392 == 3.0;
        float _3394 = log2(_3380);
        float _3398 = exp2(_3394 * cbSceneParam._m0[78u].x);
        float _3399 = exp2(_3394 * cbSceneParam._m0[78u].y);
        float _3400 = exp2(_3394 * cbSceneParam._m0[78u].z);
        float _3401 = _3398 * _3256;
        float _3402 = _3399 * _3257;
        float _3403 = _3400 * _3258;
        float _3410 = _930 + (-0.5);
        _3412 = cbMtdParam._m0[1u];
        _3414 = _3412.y * _3410;
        float _3417 = (_3392 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3418 = _3417 * (_3393 ? _3401 : (_3401 + (cbSceneParam._m0[72u].w * _3374)));
        _3419 = _3417 * (_3393 ? _3402 : (_3402 + (cbSceneParam._m0[72u].w * _3376)));
        _3420 = _3417 * (_3393 ? _3403 : (_3403 + (cbSceneParam._m0[72u].w * _3378)));
        _3423 = ((_3264 * _3273) * _3398) * _3417;
        _3426 = ((_3265 * _3273) * _3399) * _3417;
        _3429 = ((_3266 * _3273) * _3400) * _3417;
        _3430 = _3410 * 0.999000012874603271484375;
        _3440 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3440)
        {
            if ((cbInstanceData._m0[_1043 + 7u].x + _3430) < 0.5)
            {
                _3596 = true;
                break;
            }
        }
        uint _3537 = _1044 + uint(_3390.w);
        if ((cbInstanceData._m0[_3537].w < 1.0) && ((cbInstanceData._m0[_3537].w + _3430) < 0.5))
        {
            _3596 = true;
            break;
        }
        if ((_3414 + _494) < _3412.x)
        {
            _3596 = true;
            break;
        }
        _3596 = false;
        break;
    }
    float _3799;
    if (_3596)
    {
        discard_state = true;
        _3799 = 0.0;
    }
    else
    {
        _3799 = _3278;
    }
    SV_Target.x = _3418;
    SV_Target.y = _3419;
    SV_Target.z = _3420;
    SV_Target.w = _3799;
    SV_Target_1.x = _3423;
    SV_Target_1.y = _3426;
    SV_Target_1.z = _3429;
    SV_Target_1.w = _3278;
    discard_exit();
}


