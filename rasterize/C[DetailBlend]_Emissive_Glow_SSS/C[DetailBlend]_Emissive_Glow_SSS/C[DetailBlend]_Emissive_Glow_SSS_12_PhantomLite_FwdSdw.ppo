#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1508;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    vec4 _316 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = _316.z;
    float _322 = _316.w;
    float _328 = exp2(log2(_321 * 22.0) * 260.0);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _354 = cbMtdParam._m0[10u].x * _344.x;
    float _355 = cbMtdParam._m0[10u].y * _344.y;
    float _356 = cbMtdParam._m0[10u].z * _344.z;
    vec4 _368 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _383 = exp2(log2(1.0 - _322) * 8.0);
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _411 = exp2(log2(_322) * 8.0);
    vec4 _423 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _447 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _469 = (((((_368.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _447.x) - _354) * _330) + _354;
    float _470 = (((((_368.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _447.y) - _355) * _330) + _355;
    float _471 = (((((_368.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _447.z) - _356) * _330) + _356;
    float _478 = (((cbMtdParam._m0[13u].x * _395.x) - _469) * _383) + _469;
    float _479 = (((cbMtdParam._m0[13u].y * _395.y) - _470) * _383) + _470;
    float _480 = (((cbMtdParam._m0[13u].z * _395.z) - _471) * _383) + _471;
    float _487 = (((cbMtdParam._m0[11u].x * _423.x) - _478) * _411) + _478;
    float _488 = (((cbMtdParam._m0[11u].y * _423.y) - _479) * _411) + _479;
    float _489 = (((cbMtdParam._m0[11u].z * _423.z) - _480) * _411) + _480;
    float _490 = _447.w * _368.w;
    float _521 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _330) + cbMtdParam._m0[17u].x;
    float _524 = ((cbMtdParam._m0[15u].z - _521) * _383) + _521;
    float _527 = ((cbMtdParam._m0[16u].w - _524) * _411) + _524;
    vec4 _539 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _548 = cbMtdParam._m0[14u].y + _539.z;
    vec4 _560 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _579 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _597 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _608 = ((((_321 * 2.0) * (cbMtdParam._m0[14u].x + _560.z)) - _548) * _330) + _548;
    float _612 = (((_579.z - _608) + cbMtdParam._m0[15u].y) * _383) + _608;
    float _616 = (((_597.z - _612) + cbMtdParam._m0[14u].w) * _411) + _612;
    float _630 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4172 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _636 = (_631 * _631) * (3.0 - (_631 * 2.0));
    vec4 _649 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _657 = (_316.x * 2.0) + (-1.0);
    float _658 = (_316.y * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _4183 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))));
    float _669 = ((_560.x - _541) * _330) + _541;
    float _670 = ((_560.y - _542) * _330) + _542;
    float _675 = ((_579.x - _669) * _383) + _669;
    float _676 = ((_579.y - _670) * _383) + _670;
    float _689 = (cbMtdParam._m0[14u].z * (((((_597.x - _675) * _411) + _675) * 2.0) + (-1.0))) + _657;
    float _690 = (cbMtdParam._m0[14u].z * (((((_597.y - _676) * _411) + _676) * 2.0) + (-1.0))) + _658;
    float _693 = fma(_664, _245, fma(_690, _237 * TANGENT.x, (_223 * _215) * _689));
    float _696 = fma(_664, _246, fma(_690, _237 * TANGENT.y, (_223 * _216) * _689));
    float _699 = fma(_664, _247, fma(_690, _237 * TANGENT.z, (_223 * _217) * _689));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _4194 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _707 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _708 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _709 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _710 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _711 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _712 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _720 = cbMatDynParam._m0[9u].x * _709;
    float _721 = cbMatDynParam._m0[9u].y * _710;
    float _722 = cbMatDynParam._m0[9u].z * _711;
    float _729 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _730 = _729 * _301;
    float _731 = _729 * _302;
    float _732 = _729 * _303;
    float _739 = abs(exp2(log2(dot(vec3(_704, _705, _706), vec3(_730, _731, _732))) * cbMatDynParam._m0[12u].x));
    float _740 = isnan(0.100000001490116119384765625) ? _739 : (isnan(_739) ? 0.100000001490116119384765625 : max(_739, 0.100000001490116119384765625));
    float _746 = ((isnan(0.699999988079071044921875) ? _740 : (isnan(_740) ? 0.699999988079071044921875 : min(_740, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _768 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4270 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4281 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _775 = (((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) - _772) * _746) + _772;
    float _794 = dot(vec3(_704, _705, _706), vec3(0.0, -1.0, 0.0));
    float _4292 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _804 = (_797 * _709) * cbMatDynParam._m0[11u].x;
    float _806 = (_797 * _710) * cbMatDynParam._m0[11u].y;
    float _808 = (_797 * _711) * cbMatDynParam._m0[11u].z;
    float _818 = dot(vec3(_730, _731, _732), vec3(_704, _705, _706)) * 2.0;
    float _828 = dot(vec3((-0.0) - (_730 - (_818 * _704)), (-0.0) - (_731 - (_818 * _705)), (-0.0) - (_732 - (_818 * _706))), vec3(0.0, -1.0, 0.0));
    float _4303 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _835 = exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 4.0);
    float _861 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _910 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _911 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
    float _917 = _910 * _916;
    float _918 = _911 * _916;
    float _919 = _912 * _916;
    float _925 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _926 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _928 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _930 = _928.w;
    float _948 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _951 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _954 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    vec4 _956 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _958 = _956.x;
    float _970 = (((_956.y - _708) + (_956.w * _708)) * cbMtdParam._m0[3u].x) + _708;
    vec4 _971 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _987 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_958 * _958)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _971.z;
    float _995 = (((cbMatDynParam._m0[15u].x - _712) * cbMatDynParam._m0[15u].w) * _987) + _712;
    float _1003 = ((_987 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _970)) + _970;
    uint _1027 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1028 = _1027 + 9u;
    uint _1029 = _1028 + uint(cbMatDynParam._m0[0u].w);
    float _1035 = (cbMtdParam._m0[0u].x * _720) * cbInstanceData._m0[_1029].x;
    float _1036 = (cbMtdParam._m0[0u].y * _721) * cbInstanceData._m0[_1029].y;
    float _1037 = (cbMtdParam._m0[0u].z * _722) * cbInstanceData._m0[_1029].z;
    float _4314 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    vec4 _1041 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1046 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1057 = (((_1046.x - _995) + (_1046.w * _995)) * cbMtdParam._m0[3u].x) + _995;
    float _1070 = (cbMtdParam._m0[3u].x * (((_1038 * _930) - _1038) + _1041.x)) + _1038;
    float _1071 = (cbMtdParam._m0[3u].x * (((_1039 * _930) - _1039) + _1041.y)) + _1039;
    float _1072 = (cbMtdParam._m0[3u].x * (((_1040 * _930) - _1040) + _1041.z)) + _1040;
    float _1086 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_995 * (_720 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_995 * (_721 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_995 * (_722 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _1090 = _1086 * cbMatDynParam._m0[13u].w;
    float _1100 = (_1090 * (cbMatDynParam._m0[13u].x - _1070)) + _1070;
    float _1101 = (_1090 * (cbMatDynParam._m0[13u].y - _1071)) + _1071;
    float _1102 = (_1090 * (cbMatDynParam._m0[13u].z - _1072)) + _1072;
    float _1110 = ((_1086 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1057)) + _1057;
    float _1111 = 1.0 - _1110;
    float _1112 = _1111 * _1100;
    float _1113 = _1111 * _1101;
    float _1114 = _1111 * _1102;
    float _1118 = (_1100 + (-0.039999999105930328369140625)) * _1110;
    float _1119 = (_1101 + (-0.039999999105930328369140625)) * _1110;
    float _1120 = (_1102 + (-0.039999999105930328369140625)) * _1110;
    float _1121 = _1118 + 0.039999999105930328369140625;
    float _1122 = _1119 + 0.039999999105930328369140625;
    float _1123 = _1120 + 0.039999999105930328369140625;
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _925, cbSceneParam._m0[86u].y * _926));
    float _1135 = _1132.x * TEXCOORD_4;
    float _1136 = dot(vec3(_704, _705, _706), vec3(_917, _918, _919));
    float _1139 = _1136 * 2.0;
    float _1143 = (_1139 * _704) - _917;
    float _1144 = (_1139 * _705) - _918;
    float _1145 = (_1139 * _706) - _919;
    float _1149 = abs(dot(vec3(_917, _918, _919), vec3(_704, _705, _706)));
    float _4347 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1151 = sqrt(_1003);
    float _1162 = exp2((_1151 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1151 * 3.0));
    float _1168 = (1.0 - _1162) * ((_1151 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1169 = _1162 * _1151;
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1205, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197));
        float _1236 = fma(_1205, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197));
        float _1240 = fma(_1205, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197));
        float _1265 = _1197 + _704;
        float _1266 = _1201 + _705;
        float _1267 = _1205 + _706;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_704, _705, _706), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4395 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_704, _705, _706), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4428 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_704, _705, _706), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4461 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1205, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197));
        float _1552 = fma(_1205, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197));
        float _1556 = fma(_1205, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197));
        float _1579 = _1197 + _704;
        float _1580 = _1201 + _705;
        float _1581 = _1205 + _706;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_704, _705, _706), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4524 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_704, _705, _706), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4557 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_704, _705, _706), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4590 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1508;
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = _1508;
        _1828 = _1508;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1520)) + _1520;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1143 * 0.5;
    float _1886 = _1144 * 0.5;
    float _1887 = _1145 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1003);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1205, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1205, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1205, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1145, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143));
        float _2012 = fma(_1145, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143));
        float _2015 = fma(_1145, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2043 = frontier_phi_16_14_ladder;
        }
        float _2216;
        if (_2012 > 0.0)
        {
            _2216 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2216 = frontier_phi_25_21_ladder;
        }
        float _2511;
        if (_2015 > 0.0)
        {
            _2511 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2511 = frontier_phi_37_32_ladder;
        }
        float _2513 = isnan(_2216) ? _2043 : (isnan(_2043) ? _2216 : min(_2043, _2216));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _2009) + _1998;
        float _2519 = (_2514 * _2012) + _2002;
        float _2520 = (_2514 * _2015) + _2006;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2521;
        float _2525 = _2521 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 > _2525) || ((_2519 < _2523) || ((_2518 < _2523) || (_2518 > _2525))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2520, cbModelParam._m0[9u].z, fma(_2519, cbModelParam._m0[9u].y, _2518 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2520, cbModelParam._m0[10u].z, fma(_2519, cbModelParam._m0[10u].y, _2518 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2520, cbModelParam._m0[11u].z, fma(_2519, cbModelParam._m0[11u].y, _2518 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_15_37_ladder = _2665.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2665.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2665.z * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_15_37_ladder_1;
        _2033 = frontier_phi_15_37_ladder;
        _2035 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1143, _1144, _1145), _1951);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1003);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1205, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1205, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1205, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1145, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143));
        float _2109 = fma(_1145, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143));
        float _2112 = fma(_1145, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143));
        float _2221;
        if (_2106 > 0.0)
        {
            _2221 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2221 = frontier_phi_27_23_ladder;
        }
        float _2538;
        if (_2109 > 0.0)
        {
            _2538 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2538 = frontier_phi_39_34_ladder;
        }
        float _2876;
        if (_2112 > 0.0)
        {
            _2876 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2876 = frontier_phi_49_46_ladder;
        }
        float _2878 = isnan(_2538) ? _2221 : (isnan(_2221) ? _2538 : min(_2221, _2538));
        float _2879 = isnan(_2876) ? _2878 : (isnan(_2878) ? _2876 : min(_2878, _2876));
        float _2883 = (_2879 * _2106) + _2095;
        float _2884 = (_2879 * _2109) + _2099;
        float _2885 = (_2879 * _2112) + _2103;
        float _2886 = _2879 * 9.9999997473787516355514526367188e-05;
        float _2887 = (-1.0) - _2886;
        float _2889 = _2886 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2885 > _2889) || ((_2885 < _2887) || ((_2884 > _2889) || ((_2884 < _2887) || ((_2883 < _2887) || (_2883 > _2889))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2885, cbModelParam._m0[17u].z, fma(_2884, cbModelParam._m0[17u].y, _2883 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2885, cbModelParam._m0[18u].z, fma(_2884, cbModelParam._m0[18u].y, _2883 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2885, cbModelParam._m0[19u].z, fma(_2884, cbModelParam._m0[19u].y, _2883 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_24_49_ladder = _3007.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _3007.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _3007.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_24_49_ladder_2;
        _2133 = frontier_phi_24_49_ladder_1;
        _2135 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1143, _1144, _1145), _2040);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2148 = (((_1168 * _1121) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2131 - _2031)) + _2031);
    float _2150 = (((_1168 * _1122) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2133 - _2033)) + _2033);
    float _2152 = (((_1168 * _1123) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2135 - _2035)) + _2035);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2199 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2208 = _2195 / _2207;
    float _2209 = _2199 / _2207;
    float _2210 = _2203 / _2207;
    float _2357;
    float _2358;
    float _2359;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2237 = ((uint(_2210 > cbSceneParam._m0[59u].y) + uint(_2210 > cbSceneParam._m0[59u].x)) + uint(_2210 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2238 = _2237 + 43u;
        uint _2246 = _2237 + 44u;
        uint _2254 = _2237 + 45u;
        uint _2262 = _2237 + 46u;
        float _2273 = fma(_2207, cbSceneParam._m0[_2238].w, fma(_2203, cbSceneParam._m0[_2238].z, fma(_2199, cbSceneParam._m0[_2238].y, _2195 * cbSceneParam._m0[_2238].x)));
        float _2277 = fma(_2207, cbSceneParam._m0[_2246].w, fma(_2203, cbSceneParam._m0[_2246].z, fma(_2199, cbSceneParam._m0[_2246].y, _2195 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2207, cbSceneParam._m0[_2262].w, fma(_2203, cbSceneParam._m0[_2262].z, fma(_2199, cbSceneParam._m0[_2262].y, _2195 * cbSceneParam._m0[_2262].x)));
        float _2290 = cbSceneParam._m0[33u].z * _2285;
        float _2292 = cbSceneParam._m0[33u].w * _2285;
        float _2295 = fma(_2207, cbSceneParam._m0[_2254].w, fma(_2203, cbSceneParam._m0[_2254].z, fma(_2199, cbSceneParam._m0[_2254].y, _2195 * cbSceneParam._m0[_2254].x))) / _2285;
        float _2343 = (cbSceneParam._m0[33u].x - sqrt(((_2209 * _2209) + (_2208 * _2208)) + (_2210 * _2210))) * cbSceneParam._m0[33u].y;
        float _4716 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2350 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2290 + _2273) / _2285, (_2292 + _2277) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 + _2273) / _2285, (_2277 - _2290) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 - _2290) / _2285, (_2277 - _2292) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 - _2292) / _2285, (_2290 + _2277) / _2285), _2295), 0.0)).x), vec4(0.25)));
        _2357 = 1.0 - (_2350 * cbSceneParam._m0[34u].x);
        _2358 = 1.0 - (_2350 * cbSceneParam._m0[34u].y);
        _2359 = 1.0 - (_2350 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2357 = 1.0;
        _2358 = 1.0;
        _2359 = 1.0;
    }
    float _2423;
    float _2425;
    float _2427;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2411 = fma(_2207, cbSceneParam._m0[63u].w, fma(_2203, cbSceneParam._m0[63u].z, fma(_2199, cbSceneParam._m0[63u].y, _2195 * cbSceneParam._m0[63u].x)));
        float _2412 = fma(_2207, cbSceneParam._m0[60u].w, fma(_2203, cbSceneParam._m0[60u].z, fma(_2199, cbSceneParam._m0[60u].y, _2195 * cbSceneParam._m0[60u].x))) / _2411;
        float _2413 = fma(_2207, cbSceneParam._m0[61u].w, fma(_2203, cbSceneParam._m0[61u].z, fma(_2199, cbSceneParam._m0[61u].y, _2195 * cbSceneParam._m0[61u].x))) / _2411;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2412 >= cbSceneParam._m0[64u].x) && (_2413 >= cbSceneParam._m0[64u].y)) && (_2412 <= cbSceneParam._m0[64u].z)) && (_2413 <= cbSceneParam._m0[64u].w))
        {
            float _2551 = fma(_2207, cbSceneParam._m0[62u].w, fma(_2203, cbSceneParam._m0[62u].z, fma(_2199, cbSceneParam._m0[62u].y, _2195 * cbSceneParam._m0[62u].x))) / _2411;
            float _2555 = isnan(cbSceneParam._m0[41u].w) ? _2551 : (isnan(_2551) ? cbSceneParam._m0[41u].w : max(_2551, cbSceneParam._m0[41u].w));
            float _2598 = (cbSceneParam._m0[33u].x - sqrt(((_2209 * _2209) + (_2208 * _2208)) + (_2210 * _2210))) * cbSceneParam._m0[33u].y;
            float _4732 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
            float _2605 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2412, cbSceneParam._m0[33u].w + _2413), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2412, _2413 - cbSceneParam._m0[33u].z), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2412 - cbSceneParam._m0[33u].z, _2413 - cbSceneParam._m0[33u].w), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2412 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2413), _2555), 0.0)).x), vec4(0.25)));
            float _2609 = 1.0 - (_2605 * cbSceneParam._m0[34u].x);
            float _2610 = 1.0 - (_2605 * cbSceneParam._m0[34u].y);
            float _2611 = 1.0 - (_2605 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
            frontier_phi_36_35_ladder_1 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_36_35_ladder_2 = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
        }
        else
        {
            frontier_phi_36_35_ladder = _2358;
            frontier_phi_36_35_ladder_1 = _2359;
            frontier_phi_36_35_ladder_2 = _2357;
        }
        _2423 = frontier_phi_36_35_ladder_2;
        _2425 = frontier_phi_36_35_ladder;
        _2427 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2423 = _2357;
        _2425 = _2358;
        _2427 = _2359;
    }
    uvec4 _2432 = floatBitsToUint(cbInstanceData._m0[_1027 + 5u]);
    uint _2434 = _2432.x * 14u;
    uint _2435 = _2434 + 13u;
    float _2442 = _1135 + (-1.0);
    float _2447 = (cbLight._m0[_2435].x * _2442) + 1.0;
    float _2448 = (cbLight._m0[_2435].y * _2442) + 1.0;
    float _2449 = (cbLight._m0[_2435].z * _2442) + 1.0;
    float _2450 = (cbLight._m0[_2435].w * _2442) + 1.0;
    uint _2451 = _2434 + 5u;
    float _2457 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2461 = _2434 + 4u;
    float _2470 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2474 = _2434 | 1u;
    float _2485 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_704, _705, _706));
    float _2488 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_704, _705, _706));
    float _4768 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _4779 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2493 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * 0.3183098733425140380859375;
    float _2495 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * 0.3183098733425140380859375;
    float _2502 = ((cbLight._m0[_2451].x * _2457) * _2495) + (((cbLight._m0[_2461].x * _2423) * _2470) * _2493);
    float _2503 = ((_2457 * cbLight._m0[_2451].y) * _2495) + (((cbLight._m0[_2461].y * _2425) * _2470) * _2493);
    float _2504 = ((_2457 * cbLight._m0[_2451].z) * _2495) + (((cbLight._m0[_2461].z * _2427) * _2470) * _2493);
    uvec4 _2508 = floatBitsToUint(cbLight._m0[_2434 + 12u]);
    bool _2510 = _2508.x == 0u;
    float _2612;
    float _2614;
    float _2616;
    if (_2510)
    {
        _2612 = _2502;
        _2614 = _2503;
        _2616 = _2504;
    }
    else
    {
        uint _2620 = _2434 + 6u;
        float _2636 = (dot(vec3(cbLight._m0[_2434 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4790 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2639 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2612 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2502;
        _2614 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2503;
        _2616 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2504;
    }
    bool _2619 = _2508.y == 0u;
    float _2674;
    float _2676;
    float _2678;
    if (_2619)
    {
        _2674 = _2612;
        _2676 = _2614;
        _2678 = _2616;
    }
    else
    {
        uint _2847 = _2434 + 7u;
        float _2863 = (dot(vec3(cbLight._m0[_2434 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2864 = _2863 * _2863;
        float _4806 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2865 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2866 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2674 = (((cbLight._m0[_2847].x * 0.3183098733425140380859375) * _2865) * _2866) + _2612;
        _2676 = (((cbLight._m0[_2847].y * 0.3183098733425140380859375) * _2865) * _2866) + _2614;
        _2678 = (((cbLight._m0[_2847].z * 0.3183098733425140380859375) * _2865) * _2866) + _2616;
    }
    uint _2681 = _2434 + 8u;
    float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _1003) * 0.949999988079071044921875);
    float _2695 = _2694 * _2694;
    float _2696 = cbLight._m0[_2434].x + _917;
    float _2697 = cbLight._m0[_2434].y + _918;
    float _2698 = cbLight._m0[_2434].z + _919;
    float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
    float _2703 = _2702 * _2696;
    float _2704 = _2702 * _2697;
    float _2705 = _2702 * _2698;
    float _2706 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2434].xyz));
    float _4822 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
    float _4833 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _2710 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    float _2711 = dot(vec3(_704, _705, _706), vec3(_2703, _2704, _2705));
    float _4844 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2703, _2704, _2705));
    float _4855 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2695 * _2695;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
    float _2732 = 0.959999978542327880859375 - _1118;
    float _2734 = 0.959999978542327880859375 - _1119;
    float _2735 = 0.959999978542327880859375 - _1120;
    float _2742 = 1.0 - _2695;
    float _2753 = (0.5 / (((_2710 * ((_2709 * _2742) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2742) + _2695) * _2709))) * _2709;
    float _4866 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2755 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    uint _2769 = _2434 + 9u;
    float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _1003) * 0.949999988079071044921875);
    float _2781 = _2780 * _2780;
    float _2782 = cbLight._m0[_2474].x + _917;
    float _2783 = cbLight._m0[_2474].y + _918;
    float _2784 = cbLight._m0[_2474].z + _919;
    float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
    float _2789 = _2788 * _2782;
    float _2790 = _2788 * _2783;
    float _2791 = _2788 * _2784;
    float _2792 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2474].xyz));
    float _4877 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2796 = dot(vec3(_704, _705, _706), vec3(_2789, _2790, _2791));
    float _4888 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2799 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2800 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2789, _2790, _2791));
    float _4899 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2804 = _2781 * _2781;
    float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
    float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
    float _2822 = 1.0 - _2781;
    float _2832 = (0.5 / (((_2710 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2822) + _2781) * _2795))) * _2795;
    float _4910 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2834 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
    float _2844 = (((((_2815 * _2732) + _1121) * cbLight._m0[_2769].x) * _2834) * _2457) + ((((cbLight._m0[_2681].x * _2423) * ((_2731 * _2732) + _1121)) * _2755) * _2470);
    float _2845 = (((((_2815 * _2734) + _1122) * cbLight._m0[_2769].y) * _2834) * _2457) + ((((cbLight._m0[_2681].y * _2425) * ((_2731 * _2734) + _1122)) * _2755) * _2470);
    float _2846 = (((((_2815 * _2735) + _1123) * cbLight._m0[_2769].z) * _2834) * _2457) + ((((cbLight._m0[_2681].z * _2427) * ((_2731 * _2735) + _1123)) * _2755) * _2470);
    float _2902;
    float _2904;
    float _2906;
    if (_2510)
    {
        _2902 = _2844;
        _2904 = _2845;
        _2906 = _2846;
    }
    else
    {
        uint _2908 = _2434 + 2u;
        uint _2912 = _2434 + 10u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _1003) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _917;
        float _2929 = cbLight._m0[_2908].y + _918;
        float _2930 = cbLight._m0[_2908].z + _919;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2908].xyz));
        float _4921 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2942 = dot(vec3(_704, _705, _706), vec3(_2935, _2936, _2937));
        float _4932 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4943 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2961 = exp2(log2(1.0 - (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) * 5.0);
        float _2968 = 1.0 - _2927;
        float _2978 = (0.5 / (((_2710 * ((_2941 * _2968) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2968) + _2927) * _2941))) * _2941;
        float _4954 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2980 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2981 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2902 = (((((_2961 * _2732) + _1121) * cbLight._m0[_2912].x) * _2980) * _2981) + _2844;
        _2904 = (((((_2961 * _2734) + _1122) * cbLight._m0[_2912].y) * _2980) * _2981) + _2845;
        _2906 = (((((_2961 * _2735) + _1123) * cbLight._m0[_2912].z) * _2980) * _2981) + _2846;
    }
    float _3012;
    float _3014;
    float _3016;
    if (_2619)
    {
        _3012 = _2902;
        _3014 = _2904;
        _3016 = _2906;
    }
    else
    {
        uint _3023 = _2434 + 3u;
        uint _3027 = _2434 + 11u;
        float _3041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3023].w)) * _1003) * 0.949999988079071044921875);
        float _3042 = _3041 * _3041;
        float _3043 = cbLight._m0[_3023].x + _917;
        float _3044 = cbLight._m0[_3023].y + _918;
        float _3045 = cbLight._m0[_3023].z + _919;
        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
        float _3050 = _3049 * _3043;
        float _3051 = _3049 * _3044;
        float _3052 = _3049 * _3045;
        float _3053 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_3023].xyz));
        float _4970 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _3057 = dot(vec3(_704, _705, _706), vec3(_3050, _3051, _3052));
        float _4981 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3060 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _3061 = dot(vec3(cbLight._m0[_3023].xyz), vec3(_3050, _3051, _3052));
        float _4992 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3065 = _3042 * _3042;
        float _3069 = ((_3060 * _3060) * (_3065 + (-1.0))) + 1.0;
        float _3076 = exp2(log2(1.0 - (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) * 5.0);
        float _3083 = 1.0 - _3042;
        float _3093 = (0.5 / (((_2710 * ((_3056 * _3083) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _3083) + _3042) * _3056))) * _3056;
        float _5003 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3095 = (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_3065 / ((_3069 * _3069) * 3.141590118408203125));
        float _3096 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _3012 = (((((_3076 * _2732) + _1121) * cbLight._m0[_3027].x) * _3095) * _3096) + _2902;
        _3014 = (((((_3076 * _2734) + _1122) * cbLight._m0[_3027].y) * _3095) * _3096) + _2904;
        _3016 = (((((_3076 * _2735) + _1123) * cbLight._m0[_3027].z) * _3095) * _3096) + _2906;
    }
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_2432.y == 0u)
    {
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.x;
        uint _3129 = uint((float(_3117.y) * floor(float(uint(cbSceneParam._m0[85u].y * _926) / _3118))) + floor(float(uint(cbSceneParam._m0[85u].x * _925) / _3118)));
        float _3139 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3140 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        uint _3143 = uint(isnan(14.0) ? _3140 : (isnan(_3140) ? 14.0 : min(_3140, 14.0)));
        uvec4 _3148 = texelFetch(g_lightClusterGridBuffer, int(((_3143 << 2u) + (_3129 << 6u)) >> 2u));
        uint _3149 = _3148.x;
        uint _3150 = _3117.z;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        if (((((1u << ((_3150 >> 4u) & 15u)) + 4294967295u) & _3149) == 0u) || ((_3150 & 240u) == 0u))
        {
            _3264 = 0.0;
            _3266 = 0.0;
            _3268 = 0.0;
            _3270 = 0.0;
            _3272 = 0.0;
            _3274 = 0.0;
        }
        else
        {
            float _3265;
            float _3267;
            float _3269;
            float _3271;
            float _3273;
            float _3275;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            uint _3423 = 0u;
            uint _3432;
            bool _3433;
            for (;;)
            {
                _3432 = texelFetch(g_lightClassification, int((((_3143 << 5u) + (_3129 << 9u)) + (_3423 << 2u)) >> 2u)).x;
                _3433 = _3432 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3433)
                {
                    frontier_phi_68_pred = _3422;
                    frontier_phi_68_pred_1 = _3421;
                    frontier_phi_68_pred_2 = _3420;
                    frontier_phi_68_pred_3 = _3418;
                    frontier_phi_68_pred_4 = _3417;
                    frontier_phi_68_pred_5 = _3419;
                }
                else
                {
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    uint _3547;
                    _3541 = _3417;
                    _3542 = _3418;
                    _3543 = _3419;
                    _3544 = _3420;
                    _3545 = _3421;
                    _3546 = _3422;
                    _3547 = _3432;
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    for (;;)
                    {
                        uint _3551 = uint(findLSB(_3547)) + (_3423 << 5u);
                        uint _3548 = (_3547 + 4294967295u) & _3547;
                        uint _3553 = _3551 * 48u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3573 = (_3551 * 48u) + 4u;
                        vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 3u)).x));
                        uint _3592 = (_3551 * 48u) + 8u;
                        vec3 _3603 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3592)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 2u)).x));
                        float _3607 = _3567.x - _2208;
                        float _3608 = _3567.y - _2209;
                        float _3609 = _3567.z - _2210;
                        float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                        float _3613 = inversesqrt(_3610);
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3617 = dot(vec3(_948, _951, _954), vec3(_3614, _3615, _3616));
                        float _3622 = 1.0 - (_3610 * _3567.w);
                        float _5029 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3623 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                        float _3624 = sqrt(_3610) * _3586.w;
                        float _3627 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3617) + _3628;
                        float _3634 = _3624 * _3624;
                        float _3637 = ((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3623) / ((_3634 * 0.699999988079071044921875) + 1.0);
                        float _3641 = (-0.0) - _2208;
                        float _3642 = (-0.0) - _2209;
                        float _3643 = (-0.0) - _2210;
                        float _3647 = inversesqrt(dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643)));
                        float _3648 = _3647 * _3641;
                        float _3649 = _3647 * _3642;
                        float _3650 = _3647 * _3643;
                        float _3657 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                        float _3658 = 1.0 - _1151;
                        float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                        float _3666 = _3665 * _3665;
                        float _3667 = _3666 * _3666;
                        float _3668 = _3648 + _3614;
                        float _3669 = _3649 + _3615;
                        float _3670 = _3650 + _3616;
                        float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                        float _3678 = dot(vec3(_948, _951, _954), vec3(_3648, _3649, _3650));
                        float _5045 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3681 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                        float _3682 = dot(vec3(_948, _951, _954), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                        float _5056 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3685 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                        float _3690 = _3627 * _3666;
                        float _3691 = _3690 * _3690;
                        float _3694 = ((1.0 - _3691) * _3617) + _3691;
                        float _5067 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3695 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3696 = 1.0 - _3666;
                        float _3706 = (0.5 / (((_3695 * ((_3681 * _3696) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3666) * _3681))) * _3695;
                        float _5078 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3717 = (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) / ((_3689 * _3689) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125))) * _3623;
                        _3476 = (_3637 * _3586.x) + _3544;
                        _3477 = (_3637 * _3586.y) + _3545;
                        _3478 = (_3637 * _3586.z) + _3546;
                        _3473 = (_3717 * _3603.x) + _3541;
                        _3474 = (_3717 * _3603.y) + _3542;
                        _3475 = (_3717 * _3603.z) + _3543;
                        if (_3548 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3541 = _3473;
                            _3542 = _3474;
                            _3543 = _3475;
                            _3544 = _3476;
                            _3545 = _3477;
                            _3546 = _3478;
                            _3547 = _3548;
                        }
                    }
                    frontier_phi_68_pred = _3478;
                    frontier_phi_68_pred_1 = _3477;
                    frontier_phi_68_pred_2 = _3476;
                    frontier_phi_68_pred_3 = _3474;
                    frontier_phi_68_pred_4 = _3473;
                    frontier_phi_68_pred_5 = _3475;
                }
                _3275 = frontier_phi_68_pred;
                _3273 = frontier_phi_68_pred_1;
                _3271 = frontier_phi_68_pred_2;
                _3267 = frontier_phi_68_pred_3;
                _3265 = frontier_phi_68_pred_4;
                _3269 = frontier_phi_68_pred_5;
                uint _3424 = _3423 + 1u;
                if (_3424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3417 = _3265;
                    _3418 = _3267;
                    _3419 = _3269;
                    _3420 = _3271;
                    _3421 = _3273;
                    _3422 = _3275;
                    _3423 = _3424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3264 = _3265;
            _3266 = _3267;
            _3268 = _3269;
            _3270 = _3271;
            _3272 = _3273;
            _3274 = _3275;
        }
        uvec4 _3278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3279 = _3278.z;
        uint _3281 = (_3279 >> 8u) & 15u;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        float _3393;
        float _3395;
        if (((4294967295u << _3281) & _3149) == 0u)
        {
            _3385 = _3264;
            _3387 = _3266;
            _3389 = _3268;
            _3391 = _3270;
            _3393 = _3272;
            _3395 = _3274;
        }
        else
        {
            float _3410 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _3411 = _3410 * _2208;
            float _3412 = _3410 * _2209;
            float _3413 = _3410 * _2210;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3281 < ((_3279 >> 12u) & 15u))
            {
                float _3386;
                float _3388;
                float _3390;
                float _3392;
                float _3394;
                float _3396;
                float _3524 = _3264;
                float _3525 = _3266;
                float _3526 = _3268;
                float _3527 = _3270;
                float _3528 = _3272;
                float _3529 = _3274;
                uint _3530 = _3281;
                uint _3539;
                bool _3540;
                for (;;)
                {
                    _3539 = texelFetch(g_lightClassification, int((((_3143 << 5u) + (_3129 << 9u)) + (_3530 << 2u)) >> 2u)).x;
                    _3540 = _3539 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3540)
                    {
                        frontier_phi_74_pred = _3526;
                        frontier_phi_74_pred_1 = _3525;
                        frontier_phi_74_pred_2 = _3524;
                        frontier_phi_74_pred_3 = _3529;
                        frontier_phi_74_pred_4 = _3528;
                        frontier_phi_74_pred_5 = _3527;
                    }
                    else
                    {
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _3735 = _3524;
                        float _3736 = _3525;
                        float _3737 = _3526;
                        float _3738 = _3527;
                        float _3739 = _3528;
                        float _3740 = _3529;
                        uint _3741 = _3539;
                        uint _3742;
                        vec4 _3767;
                        float _3768;
                        vec4 _3783;
                        vec3 _3795;
                        vec4 _3810;
                        vec4 _3826;
                        float _3873;
                        bool _3874;
                        for (;;)
                        {
                            uint _3752 = ((_3530 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3741));
                            _3742 = (_3741 + 4294967295u) & _3741;
                            uint _3754 = _3752 * 40u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            _3768 = _3767.w;
                            uint _3770 = (_3752 * 40u) + 4u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3752 * 40u) + 8u;
                            _3795 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x));
                            uint _3797 = (_3752 * 40u) + 16u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3813 = (_3752 * 40u) + 20u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3829 = (_3752 * 40u) + 24u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3848 = (_3752 * 40u) + 28u;
                            vec4 _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            _3873 = fma(_2210, _3861.z, fma(_2209, _3861.y, _3861.x * _2208)) + _3861.w;
                            _3874 = !((fma(_2210, _3842.z, fma(_2209, _3842.y, _3842.x * _2208)) + _3842.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3874)
                            {
                                float _3901 = _3767.x - _2208;
                                float _3902 = _3767.y - _2209;
                                float _3903 = _3767.z - _2210;
                                float _3904 = dot(vec3(_3901, _3902, _3903), vec3(_3901, _3902, _3903));
                                float _3907 = inversesqrt(_3904);
                                float _3908 = _3907 * _3901;
                                float _3909 = _3907 * _3902;
                                float _3910 = _3907 * _3903;
                                float _3914 = 1.0 - (_3904 / (_3768 * _3768));
                                float _5089 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3915 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                                float _3919 = sqrt(_3904) * _3783.w;
                                float _3921 = 1.39999997615814208984375 / (_3919 + 1.39999997615814208984375);
                                float _3922 = _3921 * _3921;
                                float _3925 = ((1.0 - _3922) * dot(vec3(_3908, _3909, _3910), vec3(_948, _951, _954))) + _3922;
                                float _3928 = _3919 * _3919;
                                float _3932 = (fma(_2210, _3810.z, fma(_2209, _3810.y, _3810.x * _2208)) + _3810.w) / _3873;
                                float _3933 = (fma(_2210, _3826.z, fma(_2209, _3826.y, _3826.x * _2208)) + _3826.w) / _3873;
                                float _3937 = 1.0 - dot(vec2(_3932, _3933), vec2(_3932, _3933));
                                float _5105 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                                float _3939 = _3938 * (((isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0))) * _3915) / ((_3928 * 0.699999988079071044921875) + 1.0));
                                float _3951 = exp2(log2(1.0 / ((_3928 * 3.5) + 5.0)) * 0.25);
                                float _3952 = 1.0 - _1151;
                                float _3959 = sqrt(1.0 - ((1.0 - (_3952 * _3952)) * (1.0 - (_3951 * _3951))));
                                float _3960 = _3959 * _3959;
                                float _3961 = _3960 * _3960;
                                float _3962 = _3908 - _3411;
                                float _3963 = _3909 - _3412;
                                float _3964 = _3910 - _3413;
                                float _3968 = inversesqrt(dot(vec3(_3962, _3963, _3964), vec3(_3962, _3963, _3964)));
                                float _3972 = dot(vec3(_948, _951, _954), vec3((-0.0) - _3411, (-0.0) - _3412, (-0.0) - _3413));
                                float _5116 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3976 = dot(vec3(_948, _951, _954), vec3(_3968 * _3962, _3968 * _3963, _3968 * _3964));
                                float _5127 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3979 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3983 = ((_3979 * _3979) * (_3961 + (-1.0))) + 1.0;
                                float _3984 = _3921 * _3960;
                                float _3985 = _3984 * _3984;
                                float _3991 = ((1.0 - _3985) * dot(vec3(_948, _951, _954), vec3(_3908, _3909, _3910))) + _3985;
                                float _5138 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3992 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3993 = 1.0 - _3960;
                                float _4003 = (0.5 / (((_3992 * ((_3975 * _3993) + _3960)) + 9.9999999392252902907785028219223e-09) + (((_3992 * _3993) + _3960) * _3975))) * _3992;
                                float _5149 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4013 = (_3938 * _3915) * (((_3961 * 3.1415927410125732421875) * (isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0)))) / ((_3983 * _3983) * ((_3928 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4013 * _3795.z;
                                frontier_phi_80_pred_1 = _4013 * _3795.y;
                                frontier_phi_80_pred_2 = _4013 * _3795.x;
                                frontier_phi_80_pred_3 = _3939 * _3783.z;
                                frontier_phi_80_pred_4 = _3939 * _3783.y;
                                frontier_phi_80_pred_5 = _3939 * _3783.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4019 = frontier_phi_80_pred;
                            _4018 = frontier_phi_80_pred_1;
                            _4017 = frontier_phi_80_pred_2;
                            _4022 = frontier_phi_80_pred_3;
                            _4021 = frontier_phi_80_pred_4;
                            _4020 = frontier_phi_80_pred_5;
                            _3725 = _4020 + _3738;
                            _3726 = _4021 + _3739;
                            _3727 = _4022 + _3740;
                            _3722 = _4017 + _3735;
                            _3723 = _4018 + _3736;
                            _3724 = _4019 + _3737;
                            if (_3742 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3742;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3724;
                        frontier_phi_74_pred_1 = _3723;
                        frontier_phi_74_pred_2 = _3722;
                        frontier_phi_74_pred_3 = _3727;
                        frontier_phi_74_pred_4 = _3726;
                        frontier_phi_74_pred_5 = _3725;
                    }
                    _3390 = frontier_phi_74_pred;
                    _3388 = frontier_phi_74_pred_1;
                    _3386 = frontier_phi_74_pred_2;
                    _3396 = frontier_phi_74_pred_3;
                    _3394 = frontier_phi_74_pred_4;
                    _3392 = frontier_phi_74_pred_5;
                    uint _3531 = _3530 + 1u;
                    if (_3531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3524 = _3386;
                        _3525 = _3388;
                        _3526 = _3390;
                        _3527 = _3392;
                        _3528 = _3394;
                        _3529 = _3396;
                        _3530 = _3531;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3394;
                frontier_phi_62_63_ladder_1 = _3392;
                frontier_phi_62_63_ladder_2 = _3390;
                frontier_phi_62_63_ladder_3 = _3396;
                frontier_phi_62_63_ladder_4 = _3388;
                frontier_phi_62_63_ladder_5 = _3386;
            }
            else
            {
                frontier_phi_62_63_ladder = _3272;
                frontier_phi_62_63_ladder_1 = _3270;
                frontier_phi_62_63_ladder_2 = _3268;
                frontier_phi_62_63_ladder_3 = _3274;
                frontier_phi_62_63_ladder_4 = _3266;
                frontier_phi_62_63_ladder_5 = _3264;
            }
            _3385 = frontier_phi_62_63_ladder_5;
            _3387 = frontier_phi_62_63_ladder_4;
            _3389 = frontier_phi_62_63_ladder_2;
            _3391 = frontier_phi_62_63_ladder_1;
            _3393 = frontier_phi_62_63_ladder;
            _3395 = frontier_phi_62_63_ladder_3;
        }
        float _3400 = isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0));
        _3161 = (_3400 * _3391) + _2674;
        _3163 = (_3400 * _3393) + _2676;
        _3165 = (_3400 * _3395) + _2678;
        _3167 = ((_3385 * _1121) * _3400) + _3012;
        _3169 = ((_3387 * _1122) * _3400) + _3014;
        _3171 = ((_3389 * _1123) * _3400) + _3016;
    }
    else
    {
        _3161 = _2674;
        _3163 = _2676;
        _3165 = _2678;
        _3167 = _3012;
        _3169 = _3014;
        _3171 = _3016;
    }
    uint _3177 = _1028 + uint(cbMatDynParam._m0[0u].w);
    float _3183 = cbInstanceData._m0[_3177].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _746) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.x) * _775)) + (((_804 - (_804 * _712)) + (cbMatDynParam._m0[11u].x * _835)) * cbMatDynParam._m0[9u].x));
    float _3184 = cbInstanceData._m0[_3177].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _746) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.y) * _775)) + (((_806 - (_806 * _712)) + (cbMatDynParam._m0[11u].y * _835)) * cbMatDynParam._m0[9u].y));
    float _3185 = cbInstanceData._m0[_3177].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _746) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.z) * _775)) + (((_808 - (_808 * _712)) + (cbMatDynParam._m0[11u].z * _835)) * cbMatDynParam._m0[9u].z));
    float _5165 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _5176 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _5187 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _5198 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3203 = (((isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0))) * (_3161 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1135))) + ((_3167 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1940)) * cbPerFrame._m0[3u].x)) + _3183;
    float _3205 = (_3184 + ((_3169 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1940)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0))) * (_3163 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1135)));
    float _3207 = (_3185 + ((_3171 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1940)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3165 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1135)));
    float _3225 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _775) + cbMatDynParam._m0[12u].y;
    float _3230 = cbInstanceData._m0[_1027 + 6u].w * (isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0)));
    float _3235 = _925 / cbSceneParam._m0[86u].x;
    float _3236 = _926 / cbSceneParam._m0[86u].y;
    vec4 _3250 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3235, _3236, (log2((isnan(cbSceneParam._m0[77u].w) ? _861 : (isnan(_861) ? cbSceneParam._m0[77u].w : min(_861, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3252 = _3250.x;
    float _3253 = _3250.y;
    float _3254 = _3250.z;
    float _3255 = _3250.w;
    float _3326;
    float _3328;
    float _3330;
    float _3332;
    if (_861 > cbSceneParam._m0[78u].w)
    {
        float _3289 = isnan(_861) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _861 : min(cbSceneParam._m0[80u].w, _861));
        float _3290 = _3289 / _861;
        float _3301 = _3290 * _910;
        float _3302 = _911 * _3290;
        float _3303 = (-0.0) - _3302;
        float _3304 = _3290 * _912;
        float _3306 = (cbSceneParam._m0[77u].w * _3303) / _3289;
        float _3307 = _3306 + cbSceneParam._m0[79u].w;
        float _3308 = cbSceneParam._m0[79u].w - _3302;
        float _3314 = sqrt(((_3301 * _3301) + (_3302 * _3302)) + (_3304 * _3304));
        float _3317 = (1.0 - (cbSceneParam._m0[77u].w / _3289)) * _3314;
        float _3322 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3324 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3486;
        if (abs((_3303 - _3306) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3486 = ((((_3307 > 0.0) ? exp2(_3322 * _3307) : (2.0 - exp2(_3324 * _3307))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3317;
        }
        else
        {
            float _3446 = 1.0 / cbSceneParam._m0[80u].x;
            float _3447 = isnan(_3308) ? _3307 : (isnan(_3307) ? _3308 : max(_3307, _3308));
            float _3448 = isnan(_3308) ? _3307 : (isnan(_3307) ? _3308 : min(_3307, _3308));
            float _3457 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : min(_3447, 0.0));
            float _3458 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : min(_3448, 0.0));
            _3486 = ((abs(_3314 / _3303) * cbSceneParam._m0[80u].y) * ((((_3457 - _3458) * 2.0) - ((exp2(_3322 * (isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0)))) - exp2(_3322 * (isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))))) * _3446)) - ((exp2(_3324 * _3457) - exp2(_3324 * _3458)) * _3446))) + (_3317 * cbSceneParam._m0[80u].z);
        }
        vec4 _3488 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3235, _3236, 1.0), 0.0);
        float _3497 = exp2((_3486 * (-1.44269502162933349609375)) * (1.0 - _3488.w));
        float _3498 = log2(_3497);
        float _3514 = log2(_3255);
        _3326 = (exp2(_3514 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].x)) * _3488.x) / cbSceneParam._m0[78u].x)) + _3252;
        _3328 = (exp2(_3514 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].y)) * _3488.y) / cbSceneParam._m0[78u].y)) + _3253;
        _3330 = (exp2(_3514 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].z)) * _3488.z) / cbSceneParam._m0[78u].z)) + _3254;
        _3332 = _3497 * _3255;
    }
    else
    {
        _3326 = _3252;
        _3328 = _3253;
        _3330 = _3254;
        _3332 = _3255;
    }
    float _3344 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3345 = _3344 == 3.0;
    float _3346 = log2(_3332);
    float _3350 = exp2(_3346 * cbSceneParam._m0[78u].x);
    float _3351 = exp2(_3346 * cbSceneParam._m0[78u].y);
    float _3352 = exp2(_3346 * cbSceneParam._m0[78u].z);
    float _3353 = _3350 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)));
    float _3354 = _3351 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)));
    float _3355 = _3352 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0)));
    float _3364 = (_3344 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3364 * (_3345 ? _3353 : (_3353 + (cbSceneParam._m0[72u].w * _3326)));
    SV_Target.y = _3364 * (_3345 ? _3354 : (_3354 + (cbSceneParam._m0[72u].w * _3328)));
    SV_Target.z = _3364 * (_3345 ? _3355 : (_3355 + (cbSceneParam._m0[72u].w * _3330)));
    SV_Target.w = _3230;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3183) * _3225) * _3350) * _3364;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3184) * _3225) * _3351) * _3364;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3185) * _3225) * _3352) * _3364;
    SV_Target_1.w = _3230;
}


