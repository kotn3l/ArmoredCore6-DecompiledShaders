#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1223;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _265 = exp2(log2(_259 * 22.0) * 260.0);
    float _266 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _267 = isnan(1.0) ? _266 : (isnan(_266) ? 1.0 : min(_266, 1.0));
    vec4 _281 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _292 = cbMtdParam._m0[10u].x * _281.x;
    float _293 = cbMtdParam._m0[10u].y * _281.y;
    float _294 = cbMtdParam._m0[10u].z * _281.z;
    vec4 _306 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _329 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _351 = (((((_306.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _329.x) - _292) * _267) + _292;
    float _352 = (((((_306.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _329.y) - _293) * _267) + _293;
    float _353 = (((((_306.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _329.z) - _294) * _267) + _294;
    float _354 = _329.w * _306.w;
    vec4 _370 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = (((_370.x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _267) + cbMtdParam._m0[17u].x;
    vec4 _392 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _394 = _392.x;
    float _395 = _392.y;
    float _401 = cbMtdParam._m0[14u].y + _392.z;
    vec4 _413 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _425 = ((((_259 * 2.0) * (cbMtdParam._m0[14u].x + _413.z)) - _401) * _267) + _401;
    float _443 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3702 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _449 = (_444 * _444) * (3.0 - (_444 * 2.0));
    vec4 _462 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _470 = (_254.x * 2.0) + (-1.0);
    float _471 = (_254.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3713 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _490 = (cbMtdParam._m0[14u].z * (((((_413.x - _394) * _267) + _394) * 2.0) + (-1.0))) + _470;
    float _491 = (cbMtdParam._m0[14u].z * (((((_413.y - _395) * _267) + _395) * 2.0) + (-1.0))) + _471;
    float _494 = fma(_477, _239, fma(_491, _231 * TANGENT.x, (_217 * _209) * _490));
    float _497 = fma(_477, _240, fma(_491, _231 * TANGENT.y, (_217 * _210) * _490));
    float _500 = fma(_477, _241, fma(_491, _231 * TANGENT.z, (_217 * _211) * _490));
    float _504 = inversesqrt(dot(vec3(_494, _497, _500), vec3(_494, _497, _500)));
    float _505 = _504 * _494;
    float _506 = _504 * _497;
    float _507 = _504 * _500;
    float _3724 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _508 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _509 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _510 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _511 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _512 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _513 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _529 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _581 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _571);
    float _582 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _571);
    float _583 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _571);
    float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
    float _588 = _581 * _587;
    float _589 = _582 * _587;
    float _590 = _583 * _587;
    vec4 _595 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _597 = _595.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _902 = sqrt(((_581 * _581) + (_582 * _582)) + (_583 * _583));
        float _908 = (cbMatDynParam._m0[5u].x * _902) + cbMatDynParam._m0[5u].y;
        float _3790 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _913 = (cbMatDynParam._m0[5u].z * _902) + cbMatDynParam._m0[5u].w;
        float _3801 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) - _909)) + _909) < ((_597 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _611 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = _611.w;
    float _632 = fma(_507, cbSceneParam._m0[5u].z, fma(_506, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _505));
    float _635 = fma(_507, cbSceneParam._m0[6u].z, fma(_506, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _505));
    float _638 = fma(_507, cbSceneParam._m0[7u].z, fma(_506, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _505));
    vec4 _640 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _642 = _640.x;
    float _654 = (((_640.y - _509) + (_640.w * _509)) * cbMtdParam._m0[3u].x) + _509;
    vec4 _655 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_642 * _642)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _655.z;
    float _679 = (((cbMatDynParam._m0[15u].x - _513) * cbMatDynParam._m0[15u].w) * _671) + _513;
    float _687 = ((_671 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _654)) + _654;
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = _711 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * _510) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * _511) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * _512) * cbInstanceData._m0[_714].z;
    float _3812 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _726 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _731 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _742 = (((_731.x - _679) + (_731.w * _679)) * cbMtdParam._m0[3u].x) + _679;
    float _755 = (cbMtdParam._m0[3u].x * (((_723 * _613) - _723) + _726.x)) + _723;
    float _756 = (cbMtdParam._m0[3u].x * (((_724 * _613) - _724) + _726.y)) + _724;
    float _757 = (cbMtdParam._m0[3u].x * (((_725 * _613) - _725) + _726.z)) + _725;
    vec4 _758 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _771 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_679 * (_510 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_679 * (_511 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_679 * (_512 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _758.z;
    float _775 = _771 * cbMatDynParam._m0[13u].w;
    float _785 = (_775 * (cbMatDynParam._m0[13u].x - _755)) + _755;
    float _786 = (_775 * (cbMatDynParam._m0[13u].y - _756)) + _756;
    float _787 = (_775 * (cbMatDynParam._m0[13u].z - _757)) + _757;
    float _795 = ((_771 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _742)) + _742;
    float _796 = 1.0 - _795;
    float _797 = _796 * _785;
    float _798 = _796 * _786;
    float _799 = _796 * _787;
    float _803 = (_785 + (-0.039999999105930328369140625)) * _795;
    float _804 = (_786 + (-0.039999999105930328369140625)) * _795;
    float _805 = (_787 + (-0.039999999105930328369140625)) * _795;
    float _806 = _803 + 0.039999999105930328369140625;
    float _807 = _804 + 0.039999999105930328369140625;
    float _808 = _805 + 0.039999999105930328369140625;
    vec4 _817 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _820 = _817.x * TEXCOORD_4;
    float _821 = dot(vec3(_505, _506, _507), vec3(_588, _589, _590));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _505) - _588;
    float _829 = (_824 * _506) - _589;
    float _830 = (_824 * _507) - _590;
    float _834 = abs(dot(vec3(_588, _589, _590), vec3(_505, _506, _507)));
    float _3845 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_687);
    float _848 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _854 = (1.0 - _848) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _836;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1222;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _947 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _951 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _955 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _980 = _883 + _505;
        float _981 = _887 + _506;
        float _982 = _891 + _507;
        float _992 = fma(_982, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980)) - _947;
        float _993 = fma(_982, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980)) - _951;
        float _994 = fma(_982, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980)) - _955;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_947 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_951 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[34u].z) + ((((((_955 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1050 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1016.x + (-0.5));
        float _1052 = _1050 * (_1016.y + (-0.5));
        float _1053 = _1050 * (_1016.z + (-0.5));
        float _1060 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1023.x + (-0.5));
        float _1062 = _1060 * (_1023.y + (-0.5));
        float _1063 = _1060 * (_1023.z + (-0.5));
        float _1070 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1030.x + (-0.5));
        float _1072 = _1070 * (_1030.y + (-0.5));
        float _1073 = _1070 * (_1030.z + (-0.5));
        float _1080 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1037.x + (-0.5));
        float _1082 = _1080 * (_1037.y + (-0.5));
        float _1083 = _1080 * (_1037.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1104 = (dot(vec3(_505, _506, _507), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1114 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3893 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1116 + 1.0))) + _1121) * _1084;
        float _1131 = _1052 * 0.5;
        float _1132 = _1062 * 0.5;
        float _1133 = _1072 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_505, _506, _507), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3926 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1158 + 1.0))) + _1163) * _1085;
        float _1173 = _1053 * 0.5;
        float _1174 = _1063 * 0.5;
        float _1175 = _1073 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_505, _506, _507), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3959 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1200 + 1.0))) + _1205) * _1086;
        _1222 = _1053;
        _1224 = _1052;
        _1225 = _1051;
        _1226 = _1063;
        _1227 = _1062;
        _1228 = _1061;
        _1229 = _1073;
        _1230 = _1072;
        _1231 = _1071;
        _1232 = _1086;
        _1233 = _1085;
        _1234 = _1084;
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _1223;
        _1224 = _1223;
        _1225 = _1223;
        _1226 = _1223;
        _1227 = _1223;
        _1228 = _1223;
        _1229 = _1223;
        _1230 = _1223;
        _1231 = _1223;
        _1232 = _1223;
        _1233 = _1223;
        _1234 = _1223;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1266 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1270 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1274 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1297 = _883 + _505;
        float _1298 = _887 + _506;
        float _1299 = _891 + _507;
        float _1309 = fma(_1299, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1266 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1270 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[35u].z) + ((((((_1274 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1365 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1332.x + (-0.5));
        float _1367 = _1365 * (_1332.y + (-0.5));
        float _1368 = _1365 * (_1332.z + (-0.5));
        float _1375 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1339.x + (-0.5));
        float _1377 = _1375 * (_1339.y + (-0.5));
        float _1378 = _1375 * (_1339.z + (-0.5));
        float _1385 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1346.x + (-0.5));
        float _1387 = _1385 * (_1346.y + (-0.5));
        float _1388 = _1385 * (_1346.z + (-0.5));
        float _1395 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1353.x + (-0.5));
        float _1397 = _1395 * (_1353.y + (-0.5));
        float _1398 = _1395 * (_1353.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_505, _506, _507), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4022 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1429 + 1.0))) + _1434) * _1399;
        float _1444 = _1367 * 0.5;
        float _1445 = _1377 * 0.5;
        float _1446 = _1387 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_505, _506, _507), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4055 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1471 + 1.0))) + _1476) * _1400;
        float _1486 = _1368 * 0.5;
        float _1487 = _1378 * 0.5;
        float _1488 = _1388 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_505, _506, _507), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4088 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1513 + 1.0))) + _1518) * _1401;
        _1535 = _1368;
        _1536 = _1367;
        _1537 = _1366;
        _1538 = _1378;
        _1539 = _1377;
        _1540 = _1376;
        _1541 = _1388;
        _1542 = _1387;
        _1543 = _1386;
        _1544 = _1401;
        _1545 = _1400;
        _1546 = _1399;
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1223;
        _1536 = _1223;
        _1537 = _1223;
        _1538 = _1223;
        _1539 = _1223;
        _1540 = _1223;
        _1541 = _1223;
        _1542 = _1223;
        _1543 = _1223;
        _1544 = _1223;
        _1545 = _1223;
        _1546 = _1223;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1236)) + _1236;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1237)) + _1237;
    float _1582 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1559));
    float _1603 = _828 * 0.5;
    float _1604 = _829 * 0.5;
    float _1605 = _830 * 0.5;
    float _1606 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1609 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1612 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1619 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1222, _1226, _1229, _1232));
        float _1623 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1627 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1634 = dot(vec4(cbModelParam._m0[39u]), vec4(_1603, _1604, _1605, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1603, _1604, _1605, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1716 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1720 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1724 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1727 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1730 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1733 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1761;
        if (_1727 > 0.0)
        {
            _1761 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1761 = frontier_phi_19_17_ladder;
        }
        float _1986;
        if (_1730 > 0.0)
        {
            _1986 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1986 = frontier_phi_28_24_ladder;
        }
        float _2243;
        if (_1733 > 0.0)
        {
            _2243 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2243 = frontier_phi_40_35_ladder;
        }
        float _2245 = isnan(_1986) ? _1761 : (isnan(_1761) ? _1986 : min(_1761, _1986));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1727) + _1716;
        float _2251 = (_2246 * _1730) + _1720;
        float _2252 = (_2246 * _1733) + _1724;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_18_40_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1749 = frontier_phi_18_40_ladder_2;
        _1751 = frontier_phi_18_40_ladder_1;
        _1753 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1669);
        _1749 = _1737.x * cbModelParam._m0[1u].y;
        _1751 = _1737.y * cbModelParam._m0[1u].y;
        _1753 = _1737.z * cbModelParam._m0[1u].y;
    }
    float _1757 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1757 : min(cbModelParam._m0[25u].w, _1757));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1827 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1830 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1991;
        if (_1824 > 0.0)
        {
            _1991 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1991 = frontier_phi_30_26_ladder;
        }
        float _2270;
        if (_1827 > 0.0)
        {
            _2270 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2270 = frontier_phi_42_37_ladder;
        }
        float _2483;
        if (_1830 > 0.0)
        {
            _2483 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2483 = frontier_phi_51_48_ladder;
        }
        float _2485 = isnan(_2270) ? _1991 : (isnan(_1991) ? _2270 : min(_1991, _2270));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1824) + _1813;
        float _2491 = (_2486 * _1827) + _1817;
        float _2492 = (_2486 * _1830) + _1821;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2493;
        float _2496 = _2493 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2492 > _2496) || ((_2492 < _2494) || ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 < _2494) || (_2490 > _2496))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2492, cbModelParam._m0[17u].z, fma(_2491, cbModelParam._m0[17u].y, _2490 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2492, cbModelParam._m0[18u].z, fma(_2491, cbModelParam._m0[18u].y, _2490 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2492, cbModelParam._m0[19u].z, fma(_2491, cbModelParam._m0[19u].y, _2490 * cbModelParam._m0[19u].x))), _1758);
            frontier_phi_27_51_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_27_51_ladder_2;
        _1851 = frontier_phi_27_51_ladder_1;
        _1853 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1758);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1866 = (((_854 * _806) + _855) * _820) * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1868 = (((_854 * _807) + _855) * _820) * ((cbModelParam._m0[1u].w * (_1851 - _1751)) + _1751);
    float _1870 = (((_854 * _808) + _855) * _820) * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    vec4 _1887 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_608, _609));
    float _1889 = _1887.w;
    float _1901 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1889);
    float _1902 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1889);
    float _1903 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1889);
    uvec4 _1907 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1909 = _1907.x * 14u;
    uint _1910 = _1909 + 13u;
    float _1917 = _820 + (-1.0);
    float _1922 = (cbLight._m0[_1910].x * _1917) + 1.0;
    float _1923 = (cbLight._m0[_1910].y * _1917) + 1.0;
    float _1924 = (cbLight._m0[_1910].z * _1917) + 1.0;
    float _1925 = (cbLight._m0[_1910].w * _1917) + 1.0;
    uint _1926 = _1909 + 5u;
    float _1932 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1936 = _1909 + 4u;
    float _1945 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1949 = _1909 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_505, _506, _507));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_505, _506, _507));
    float _4224 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4235 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1926].x * _1932) * _1970) + (((cbLight._m0[_1936].x * _1901) * _1945) * _1968);
    float _1978 = ((_1932 * cbLight._m0[_1926].y) * _1970) + (((cbLight._m0[_1936].y * _1902) * _1945) * _1968);
    float _1979 = ((_1932 * cbLight._m0[_1926].z) * _1970) + (((cbLight._m0[_1936].z * _1903) * _1945) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1909 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1985)
    {
        _1996 = _1977;
        _1998 = _1978;
        _2000 = _1979;
    }
    else
    {
        uint _2004 = _1909 + 6u;
        float _2020 = (dot(vec3(cbLight._m0[_1909 + 2u].xyz), vec3(_505, _506, _507)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _4246 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2023 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _1996 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1977;
        _1998 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1978;
        _2000 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1979;
    }
    bool _2003 = _1983.y == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2003)
    {
        _2041 = _1996;
        _2043 = _1998;
        _2045 = _2000;
    }
    else
    {
        uint _2214 = _1909 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1909 + 3u].xyz), vec3(_505, _506, _507)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4262 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2233 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2041 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _1996;
        _2043 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _1998;
        _2045 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2000;
    }
    uint _2048 = _1909 + 8u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _687) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1909].x + _588;
    float _2064 = cbLight._m0[_1909].y + _589;
    float _2065 = cbLight._m0[_1909].z + _590;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_1909].xyz));
    float _4278 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2077 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2078 = dot(vec3(_505, _506, _507), vec3(_2070, _2071, _2072));
    float _4300 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2070, _2071, _2072));
    float _4311 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2062 * _2062;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2099 = 0.959999978542327880859375 - _803;
    float _2101 = 0.959999978542327880859375 - _804;
    float _2102 = 0.959999978542327880859375 - _805;
    float _2109 = 1.0 - _2062;
    float _2120 = (0.5 / (((_2077 * ((_2076 * _2109) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2109) + _2062) * _2076))) * _2076;
    float _4322 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    uint _2136 = _1909 + 9u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _687) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1949].x + _588;
    float _2150 = cbLight._m0[_1949].y + _589;
    float _2151 = cbLight._m0[_1949].z + _590;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_1949].xyz));
    float _4333 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2163 = dot(vec3(_505, _506, _507), vec3(_2156, _2157, _2158));
    float _4344 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2156, _2157, _2158));
    float _4355 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2148 * _2148;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2189 = 1.0 - _2148;
    float _2199 = (0.5 / (((_2077 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2189) + _2148) * _2162))) * _2162;
    float _4366 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2211 = (((((_2182 * _2099) + _806) * cbLight._m0[_2136].x) * _2201) * _1932) + ((((cbLight._m0[_2048].x * _1901) * ((_2098 * _2099) + _806)) * _2122) * _1945);
    float _2212 = (((((_2182 * _2101) + _807) * cbLight._m0[_2136].y) * _2201) * _1932) + ((((cbLight._m0[_2048].y * _1902) * ((_2098 * _2101) + _807)) * _2122) * _1945);
    float _2213 = (((((_2182 * _2102) + _808) * cbLight._m0[_2136].z) * _2201) * _1932) + ((((cbLight._m0[_2048].z * _1903) * ((_2098 * _2102) + _808)) * _2122) * _1945);
    float _2275;
    float _2277;
    float _2279;
    if (_1985)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1909 + 2u;
        uint _2285 = _1909 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _687) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _588;
        float _2302 = cbLight._m0[_2281].y + _589;
        float _2303 = cbLight._m0[_2281].z + _590;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_2281].xyz));
        float _4377 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2315 = dot(vec3(_505, _506, _507), vec3(_2308, _2309, _2310));
        float _4388 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4399 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_2077 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2341) + _2300) * _2314))) * _2314;
        float _4410 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2275 = (((((_2334 * _2099) + _806) * cbLight._m0[_2285].x) * _2353) * _2354) + _2211;
        _2277 = (((((_2334 * _2101) + _807) * cbLight._m0[_2285].y) * _2353) * _2354) + _2212;
        _2279 = (((((_2334 * _2102) + _808) * cbLight._m0[_2285].z) * _2353) * _2354) + _2213;
    }
    float _2389;
    float _2391;
    float _2393;
    if (_2003)
    {
        _2389 = _2275;
        _2391 = _2277;
        _2393 = _2279;
    }
    else
    {
        uint _2400 = _1909 + 3u;
        uint _2404 = _1909 + 11u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _687) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _588;
        float _2421 = cbLight._m0[_2400].y + _589;
        float _2422 = cbLight._m0[_2400].z + _590;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_2400].xyz));
        float _4426 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2434 = dot(vec3(_505, _506, _507), vec3(_2427, _2428, _2429));
        float _4437 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2460 = 1.0 - _2419;
        float _2470 = (0.5 / (((_2077 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2460) + _2419) * _2433))) * _2433;
        float _4459 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2389 = (((((_2453 * _2099) + _806) * cbLight._m0[_2404].x) * _2472) * _2473) + _2275;
        _2391 = (((((_2453 * _2101) + _807) * cbLight._m0[_2404].y) * _2472) * _2473) + _2277;
        _2393 = (((((_2453 * _2102) + _808) * cbLight._m0[_2404].z) * _2472) * _2473) + _2279;
    }
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_1907.y == 0u)
    {
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2548;
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2548;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2548;
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2564)));
        float _2585 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
        }
        else
        {
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            uint _2905 = 0u;
            uint _2914;
            bool _2915;
            for (;;)
            {
                _2914 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                _2915 = _2914 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2915)
                {
                    frontier_phi_68_pred = _2901;
                    frontier_phi_68_pred_1 = _2904;
                    frontier_phi_68_pred_2 = _2903;
                    frontier_phi_68_pred_3 = _2902;
                    frontier_phi_68_pred_4 = _2900;
                    frontier_phi_68_pred_5 = _2899;
                }
                else
                {
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    uint _3050;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2914;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    for (;;)
                    {
                        uint _3054 = uint(findLSB(_3050)) + (_2905 << 5u);
                        uint _3051 = (_3050 + 4294967295u) & _3050;
                        uint _3056 = _3054 * 48u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3076 = (_3054 * 48u) + 4u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3095 = (_3054 * 48u) + 8u;
                        vec3 _3106 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x));
                        float _3110 = _3070.x - _2549;
                        float _3111 = _3070.y - _2550;
                        float _3112 = _3070.z - _2551;
                        float _3113 = dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112));
                        float _3116 = inversesqrt(_3113);
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3120 = dot(vec3(_632, _635, _638), vec3(_3117, _3118, _3119));
                        float _3125 = 1.0 - (_3113 * _3070.w);
                        float _4485 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3127 = sqrt(_3113) * _3089.w;
                        float _3130 = 1.39999997615814208984375 / (_3127 + 1.39999997615814208984375);
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3120) + _3131;
                        float _3137 = _3127 * _3127;
                        float _3141 = ((isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))) * _3126) / ((_3137 * 0.699999988079071044921875) + 1.0);
                        float _3145 = (-0.0) - _2549;
                        float _3146 = (-0.0) - _2550;
                        float _3147 = (-0.0) - _2551;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3162 = exp2(log2(1.0 / ((_3137 * 3.5) + 5.0)) * 0.25);
                        float _3163 = 1.0 - _836;
                        float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                        float _3171 = _3170 * _3170;
                        float _3172 = _3171 * _3171;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3183 = dot(vec3(_632, _635, _638), vec3(_3152, _3153, _3154));
                        float _4501 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3187 = dot(vec3(_632, _635, _638), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                        float _4512 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                        float _3195 = _3130 * _3171;
                        float _3196 = _3195 * _3195;
                        float _3199 = ((1.0 - _3196) * _3120) + _3196;
                        float _4523 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3201 = 1.0 - _3171;
                        float _3211 = (0.5 / (((_3200 * ((_3186 * _3201) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3200 * _3201) + _3171) * _3186))) * _3200;
                        float _4534 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3222 = (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3194 * _3194) * ((_3137 * 2.1991131305694580078125) + 3.141590118408203125))) * _3126;
                        _2974 = (_3141 * _3089.x) + _3047;
                        _2975 = (_3141 * _3089.y) + _3048;
                        _2976 = (_3141 * _3089.z) + _3049;
                        _2971 = (_3222 * _3106.x) + _3044;
                        _2972 = (_3222 * _3106.y) + _3045;
                        _2973 = (_3222 * _3106.z) + _3046;
                        if (_3051 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _3051;
                        }
                    }
                    frontier_phi_68_pred = _2973;
                    frontier_phi_68_pred_1 = _2976;
                    frontier_phi_68_pred_2 = _2975;
                    frontier_phi_68_pred_3 = _2974;
                    frontier_phi_68_pred_4 = _2972;
                    frontier_phi_68_pred_5 = _2971;
                }
                _2743 = frontier_phi_68_pred;
                _2749 = frontier_phi_68_pred_1;
                _2747 = frontier_phi_68_pred_2;
                _2745 = frontier_phi_68_pred_3;
                _2741 = frontier_phi_68_pred_4;
                _2739 = frontier_phi_68_pred_5;
                uint _2906 = _2905 + 1u;
                if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2899 = _2739;
                    _2900 = _2741;
                    _2901 = _2743;
                    _2902 = _2745;
                    _2903 = _2747;
                    _2904 = _2749;
                    _2905 = _2906;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
        }
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.z;
        uint _2755 = (_2753 >> 8u) & 15u;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((4294967295u << _2755) & _2595) == 0u)
        {
            _2867 = _2738;
            _2869 = _2740;
            _2871 = _2742;
            _2873 = _2744;
            _2875 = _2746;
            _2877 = _2748;
        }
        else
        {
            float _2892 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _2893 = _2892 * _2549;
            float _2894 = _2892 * _2550;
            float _2895 = _2892 * _2551;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2755 < ((_2753 >> 12u) & 15u))
            {
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _3027 = _2738;
                float _3028 = _2740;
                float _3029 = _2742;
                float _3030 = _2744;
                float _3031 = _2746;
                float _3032 = _2748;
                uint _3033 = _2755;
                uint _3042;
                bool _3043;
                for (;;)
                {
                    _3042 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                    _3043 = _3042 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3043)
                    {
                        frontier_phi_79_pred = _3032;
                        frontier_phi_79_pred_1 = _3031;
                        frontier_phi_79_pred_2 = _3030;
                        frontier_phi_79_pred_3 = _3029;
                        frontier_phi_79_pred_4 = _3028;
                        frontier_phi_79_pred_5 = _3027;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        uint _3255 = _3042;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3266 = ((_3033 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3266 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3266 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_2551, _3375.z, fma(_2550, _3375.y, _3375.x * _2549)) + _3375.w;
                            _3388 = !((fma(_2551, _3356.z, fma(_2550, _3356.y, _3356.x * _2549)) + _3356.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3281.x - _2549;
                                float _3416 = _3281.y - _2550;
                                float _3417 = _3281.z - _2551;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3282 * _3282));
                                float _4545 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3433 = sqrt(_3418) * _3297.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_632, _635, _638))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_2551, _3324.z, fma(_2550, _3324.y, _3324.x * _2549)) + _3324.w) / _3387;
                                float _3447 = (fma(_2551, _3340.z, fma(_2550, _3340.y, _3340.x * _2549)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4561 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _836;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2893;
                                float _3477 = _3423 - _2894;
                                float _3478 = _3424 - _2895;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2893, (-0.0) - _2894, (-0.0) - _2895));
                                float _4572 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3490 = dot(vec3(_632, _635, _638), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4583 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_632, _635, _638), vec3(_3422, _3423, _3424))) + _3499;
                                float _4594 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4605 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3453 * _3297.z;
                                frontier_phi_85_pred_1 = _3453 * _3297.y;
                                frontier_phi_85_pred_2 = _3453 * _3297.x;
                                frontier_phi_85_pred_3 = _3527 * _3309.z;
                                frontier_phi_85_pred_4 = _3527 * _3309.y;
                                frontier_phi_85_pred_5 = _3527 * _3309.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_85_pred;
                            _3535 = frontier_phi_85_pred_1;
                            _3534 = frontier_phi_85_pred_2;
                            _3533 = frontier_phi_85_pred_3;
                            _3532 = frontier_phi_85_pred_4;
                            _3531 = frontier_phi_85_pred_5;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3241;
                        frontier_phi_79_pred_1 = _3240;
                        frontier_phi_79_pred_2 = _3239;
                        frontier_phi_79_pred_3 = _3238;
                        frontier_phi_79_pred_4 = _3237;
                        frontier_phi_79_pred_5 = _3236;
                    }
                    _2878 = frontier_phi_79_pred;
                    _2876 = frontier_phi_79_pred_1;
                    _2874 = frontier_phi_79_pred_2;
                    _2872 = frontier_phi_79_pred_3;
                    _2870 = frontier_phi_79_pred_4;
                    _2868 = frontier_phi_79_pred_5;
                    uint _3034 = _3033 + 1u;
                    if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3027 = _2868;
                        _3028 = _2870;
                        _3029 = _2872;
                        _3030 = _2874;
                        _3031 = _2876;
                        _3032 = _2878;
                        _3033 = _3034;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2874;
                frontier_phi_60_61_ladder_1 = _2878;
                frontier_phi_60_61_ladder_2 = _2876;
                frontier_phi_60_61_ladder_3 = _2872;
                frontier_phi_60_61_ladder_4 = _2870;
                frontier_phi_60_61_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_60_61_ladder = _2744;
                frontier_phi_60_61_ladder_1 = _2748;
                frontier_phi_60_61_ladder_2 = _2746;
                frontier_phi_60_61_ladder_3 = _2742;
                frontier_phi_60_61_ladder_4 = _2740;
                frontier_phi_60_61_ladder_5 = _2738;
            }
            _2867 = frontier_phi_60_61_ladder_5;
            _2869 = frontier_phi_60_61_ladder_4;
            _2871 = frontier_phi_60_61_ladder_3;
            _2873 = frontier_phi_60_61_ladder;
            _2875 = frontier_phi_60_61_ladder_2;
            _2877 = frontier_phi_60_61_ladder_1;
        }
        float _2882 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2607 = (_2882 * _2873) + _2041;
        _2609 = (_2882 * _2875) + _2043;
        _2611 = (_2882 * _2877) + _2045;
        _2613 = ((_2867 * _806) * _2882) + _2389;
        _2615 = ((_2869 * _807) * _2882) + _2391;
        _2617 = ((_2871 * _808) * _2882) + _2393;
    }
    else
    {
        _2607 = _2041;
        _2609 = _2043;
        _2611 = _2045;
        _2613 = _2389;
        _2615 = _2391;
        _2617 = _2393;
    }
    uint _2623 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _2633 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _449) * _462.x) * cbInstanceData._m0[_2623].x;
    float _2638 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _449) * _462.y) * cbInstanceData._m0[_2623].y;
    float _2643 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _449) * _462.z) * cbInstanceData._m0[_2623].z;
    float _4621 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4632 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4643 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4654 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _2661 = (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2607 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _820))) + ((_2613 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + _2633;
    float _2663 = (_2638 + ((_2615 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2609 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _820)));
    float _2665 = (_2643 + ((_2617 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1658)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2611 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _820)));
    float _2666 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2667 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2668 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2674 = cbMtdParam._m0[2u].x * _2633;
    float _2675 = cbMtdParam._m0[2u].y * _2638;
    float _2676 = cbMtdParam._m0[2u].z * _2643;
    float _4680 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2678 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2683 = cbInstanceData._m0[_711 + 6u].w * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)));
    float _2688 = _608 / cbSceneParam._m0[86u].x;
    float _2689 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2703 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2705 = _2703.x;
    float _2706 = _2703.y;
    float _2707 = _2703.z;
    float _2708 = _2703.w;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _2763 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _2764 = _2763 / _529;
        float _2775 = _2764 * _581;
        float _2776 = _582 * _2764;
        float _2777 = (-0.0) - _2776;
        float _2778 = _2764 * _583;
        float _2780 = (cbSceneParam._m0[77u].w * _2777) / _2763;
        float _2781 = _2780 + cbSceneParam._m0[79u].w;
        float _2782 = cbSceneParam._m0[79u].w - _2776;
        float _2788 = sqrt(((_2775 * _2775) + (_2776 * _2776)) + (_2778 * _2778));
        float _2791 = (1.0 - (cbSceneParam._m0[77u].w / _2763)) * _2788;
        float _2796 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2798 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2984;
        if (abs((_2777 - _2780) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2984 = ((((_2781 > 0.0) ? exp2(_2796 * _2781) : (2.0 - exp2(_2798 * _2781))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2791;
        }
        else
        {
            float _2928 = 1.0 / cbSceneParam._m0[80u].x;
            float _2929 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : max(_2781, _2782));
            float _2930 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : min(_2781, _2782));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            _2984 = ((abs(_2788 / _2777) * cbSceneParam._m0[80u].y) * ((((_2939 - _2940) * 2.0) - ((exp2(_2796 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)))) - exp2(_2796 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))))) * _2928)) - ((exp2(_2798 * _2939) - exp2(_2798 * _2940)) * _2928))) + (_2791 * cbSceneParam._m0[80u].z);
        }
        vec4 _2986 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, 1.0), 0.0);
        float _2995 = exp2((_2984 * (-1.44269502162933349609375)) * (1.0 - _2986.w));
        float _2996 = log2(_2995);
        float _3012 = log2(_2708);
        _2800 = (exp2(_3012 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].x)) * _2986.x) / cbSceneParam._m0[78u].x)) + _2705;
        _2802 = (exp2(_3012 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].y)) * _2986.y) / cbSceneParam._m0[78u].y)) + _2706;
        _2804 = (exp2(_3012 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].z)) * _2986.z) / cbSceneParam._m0[78u].z)) + _2707;
        _2806 = _2995 * _2708;
    }
    else
    {
        _2800 = _2705;
        _2802 = _2706;
        _2804 = _2707;
        _2806 = _2708;
    }
    bool _3022;
    vec4 _2816;
    vec4 _2838;
    float _2840;
    float _2844;
    float _2845;
    float _2846;
    float _2849;
    float _2852;
    float _2855;
    float _2856;
    bool _2866;
    for (;;)
    {
        _2816 = cbMatDynParam._m0[0u];
        float _2818 = roundEven(_2816.y);
        bool _2819 = _2818 == 3.0;
        float _2820 = log2(_2806);
        float _2824 = exp2(_2820 * cbSceneParam._m0[78u].x);
        float _2825 = exp2(_2820 * cbSceneParam._m0[78u].y);
        float _2826 = exp2(_2820 * cbSceneParam._m0[78u].z);
        float _2827 = _2824 * _2666;
        float _2828 = _2825 * _2667;
        float _2829 = _2826 * _2668;
        float _2836 = _597 + (-0.5);
        _2838 = cbMtdParam._m0[1u];
        _2840 = _2838.y * _2836;
        float _2843 = (_2818 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2844 = _2843 * (_2819 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2800)));
        _2845 = _2843 * (_2819 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2802)));
        _2846 = _2843 * (_2819 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = ((_2674 * _2678) * _2824) * _2843;
        _2852 = ((_2675 * _2678) * _2825) * _2843;
        _2855 = ((_2676 * _2678) * _2826) * _2843;
        _2856 = _2836 * 0.999000012874603271484375;
        _2866 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2866)
        {
            if ((cbInstanceData._m0[_711 + 7u].x + _2856) < 0.5)
            {
                _3022 = true;
                break;
            }
        }
        uint _2963 = _713 + uint(_2816.w);
        if ((cbInstanceData._m0[_2963].w < 1.0) && ((cbInstanceData._m0[_2963].w + _2856) < 0.5))
        {
            _3022 = true;
            break;
        }
        if ((_2840 + _354) < _2838.x)
        {
            _3022 = true;
            break;
        }
        _3022 = false;
        break;
    }
    float _3227;
    if (_3022)
    {
        discard_state = true;
        _3227 = 0.0;
    }
    else
    {
        _3227 = _2683;
    }
    SV_Target.x = _2844;
    SV_Target.y = _2845;
    SV_Target.z = _2846;
    SV_Target.w = _3227;
    SV_Target_1.x = _2849;
    SV_Target_1.y = _2852;
    SV_Target_1.z = _2855;
    SV_Target_1.w = _2683;
    discard_exit();
}


