#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _4015;
float _4016;
float _4017;
float _4018;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _260.z;
    float _272 = exp2(log2(_265 * 22.0) * 260.0);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _299 = cbMtdParam._m0[10u].x * _288.x;
    float _300 = cbMtdParam._m0[10u].y * _288.y;
    float _301 = cbMtdParam._m0[10u].z * _288.z;
    vec4 _313 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = exp2(log2(1.0 - _260.w) * 8.0);
    vec4 _341 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _366 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = (((((_313.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _366.x) - _299) * _274) + _299;
    float _389 = (((((_313.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _366.y) - _300) * _274) + _300;
    float _390 = (((((_313.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _366.z) - _301) * _274) + _301;
    float _397 = (((cbMtdParam._m0[13u].x * _341.x) - _388) * _329) + _388;
    float _398 = (((cbMtdParam._m0[13u].y * _341.y) - _389) * _329) + _389;
    float _399 = (((cbMtdParam._m0[13u].z * _341.z) - _390) * _329) + _390;
    float _400 = _366.w * _313.w;
    float _430 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _274) + cbMtdParam._m0[17u].x;
    float _433 = ((cbMtdParam._m0[15u].z - _430) * _329) + _430;
    vec4 _445 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _454 = cbMtdParam._m0[14u].y + _445.z;
    vec4 _466 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _485 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _496 = ((((_265 * 2.0) * (cbMtdParam._m0[14u].x + _466.z)) - _454) * _274) + _454;
    float _500 = (((_485.z - _496) + cbMtdParam._m0[15u].y) * _329) + _496;
    float _515 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4037 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _521 = (_516 * _516) * (3.0 - (_516 * 2.0));
    vec4 _534 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _542 = (_260.x * 2.0) + (-1.0);
    float _543 = (_260.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _4048 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))));
    float _554 = ((_466.x - _447) * _274) + _447;
    float _555 = ((_466.y - _448) * _274) + _448;
    float _568 = (cbMtdParam._m0[14u].z * (((((_485.x - _554) * _329) + _554) * 2.0) + (-1.0))) + _542;
    float _569 = (cbMtdParam._m0[14u].z * (((((_485.y - _555) * _329) + _555) * 2.0) + (-1.0))) + _543;
    float _572 = fma(_549, _245, fma(_569, _237 * TANGENT.x, (_223 * _215) * _568));
    float _575 = fma(_549, _246, fma(_569, _237 * TANGENT.y, (_223 * _216) * _568));
    float _578 = fma(_549, _247, fma(_569, _237 * TANGENT.z, (_223 * _217) * _568));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _4059 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _586 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _587 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _588 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _589 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _590 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _591 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _659 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _649);
    float _660 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _649);
    float _661 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _649);
    float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
    float _666 = _659 * _665;
    float _667 = _660 * _665;
    float _668 = _661 * _665;
    vec4 _673 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _675 = _673.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_659 * _659) + (_660 * _660)) + (_661 * _661));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _4125 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _4136 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) - _985)) + _985) < ((_675 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _689 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _691 = _689.w;
    float _709 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _712 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _715 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    vec4 _717 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _719 = _717.x;
    float _731 = (((_717.y - _587) + (_717.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    vec4 _732 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _748 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_719 * _719)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _732.z;
    float _756 = (((cbMatDynParam._m0[15u].x - _591) * cbMatDynParam._m0[15u].w) * _748) + _591;
    float _764 = ((_748 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _731)) + _731;
    uint _788 = uint(roundEven(NORMAL.w)) * 13u;
    uint _789 = _788 + 9u;
    uint _790 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * _588) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * _589) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * _590) * cbInstanceData._m0[_790].z;
    float _4147 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    vec4 _802 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _807 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _818 = (((_807.x - _756) + (_807.w * _756)) * cbMtdParam._m0[3u].x) + _756;
    float _831 = (cbMtdParam._m0[3u].x * (((_799 * _691) - _799) + _802.x)) + _799;
    float _832 = (cbMtdParam._m0[3u].x * (((_800 * _691) - _800) + _802.y)) + _800;
    float _833 = (cbMtdParam._m0[3u].x * (((_801 * _691) - _801) + _802.z)) + _801;
    vec4 _834 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _847 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_756 * (_588 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_756 * (_589 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_756 * (_590 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _834.z;
    float _851 = _847 * cbMatDynParam._m0[13u].w;
    float _861 = (_851 * (cbMatDynParam._m0[13u].x - _831)) + _831;
    float _862 = (_851 * (cbMatDynParam._m0[13u].y - _832)) + _832;
    float _863 = (_851 * (cbMatDynParam._m0[13u].z - _833)) + _833;
    float _871 = ((_847 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _818)) + _818;
    float _872 = 1.0 - _871;
    float _873 = _872 * _861;
    float _874 = _872 * _862;
    float _875 = _872 * _863;
    float _879 = (_861 + (-0.039999999105930328369140625)) * _871;
    float _880 = (_862 + (-0.039999999105930328369140625)) * _871;
    float _881 = (_863 + (-0.039999999105930328369140625)) * _871;
    float _882 = _879 + 0.039999999105930328369140625;
    float _883 = _880 + 0.039999999105930328369140625;
    float _884 = _881 + 0.039999999105930328369140625;
    vec4 _893 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _896 = _893.x * TEXCOORD_4;
    float _897 = dot(vec3(_583, _584, _585), vec3(_666, _667, _668));
    float _900 = _897 * 2.0;
    float _904 = (_900 * _583) - _666;
    float _905 = (_900 * _584) - _667;
    float _906 = (_900 * _585) - _668;
    float _910 = abs(dot(vec3(_666, _667, _668), vec3(_583, _584, _585)));
    float _4180 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _912 = sqrt(_764);
    float _924 = exp2((_912 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_912 * 3.0));
    float _930 = (1.0 - _924) * ((_912 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _931 = _924 * _912;
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1027 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1031 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1056 = _959 + _583;
        float _1057 = _963 + _584;
        float _1058 = _967 + _585;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_583, _584, _585), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4228 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_583, _584, _585), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4261 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_583, _584, _585), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4294 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1346 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1350 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1373 = _959 + _583;
        float _1374 = _963 + _584;
        float _1375 = _967 + _585;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_583, _584, _585), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4357 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_583, _584, _585), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4390 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_583, _584, _585), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4423 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = _1299;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _904 * 0.5;
    float _1680 = _905 * 0.5;
    float _1681 = _906 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_906, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904));
        float _1806 = fma(_906, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904));
        float _1809 = fma(_906, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1837 = frontier_phi_19_17_ladder;
        }
        float _2010;
        if (_1806 > 0.0)
        {
            _2010 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2305;
        if (_1809 > 0.0)
        {
            _2305 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2305 = frontier_phi_40_35_ladder;
        }
        float _2307 = isnan(_2010) ? _1837 : (isnan(_1837) ? _2010 : min(_1837, _2010));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1803) + _1792;
        float _2313 = (_2308 * _1806) + _1796;
        float _2314 = (_2308 * _1809) + _1800;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_18_40_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_18_40_ladder_2;
        _1827 = frontier_phi_18_40_ladder_1;
        _1829 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_904, _905, _906), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_906, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904));
        float _1903 = fma(_906, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904));
        float _1906 = fma(_906, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904));
        float _2015;
        if (_1900 > 0.0)
        {
            _2015 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2015 = frontier_phi_30_26_ladder;
        }
        float _2332;
        if (_1903 > 0.0)
        {
            _2332 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2332 = frontier_phi_42_37_ladder;
        }
        float _2670;
        if (_1906 > 0.0)
        {
            _2670 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2670 = frontier_phi_52_49_ladder;
        }
        float _2672 = isnan(_2332) ? _2015 : (isnan(_2015) ? _2332 : min(_2015, _2332));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _1900) + _1889;
        float _2678 = (_2673 * _1903) + _1893;
        float _2679 = (_2673 * _1906) + _1897;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_27_52_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_27_52_ladder_2;
        _1927 = frontier_phi_27_52_ladder_1;
        _1929 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_904, _905, _906), _1834);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1942 = (((_930 * _882) + _931) * _896) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1944 = (((_930 * _883) + _931) * _896) * ((cbModelParam._m0[1u].w * (_1927 - _1827)) + _1827);
    float _1946 = (((_930 * _884) + _931) * _896) * ((cbModelParam._m0[1u].w * (_1929 - _1829)) + _1829);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2002 = _1989 / _2001;
    float _2003 = _1993 / _2001;
    float _2004 = _1997 / _2001;
    float _2151;
    float _2152;
    float _2153;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2031 = ((uint(_2004 > cbSceneParam._m0[59u].y) + uint(_2004 > cbSceneParam._m0[59u].x)) + uint(_2004 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2032 = _2031 + 43u;
        uint _2040 = _2031 + 44u;
        uint _2048 = _2031 + 45u;
        uint _2056 = _2031 + 46u;
        float _2067 = fma(_2001, cbSceneParam._m0[_2032].w, fma(_1997, cbSceneParam._m0[_2032].z, fma(_1993, cbSceneParam._m0[_2032].y, _1989 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_2001, cbSceneParam._m0[_2040].w, fma(_1997, cbSceneParam._m0[_2040].z, fma(_1993, cbSceneParam._m0[_2040].y, _1989 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2001, cbSceneParam._m0[_2056].w, fma(_1997, cbSceneParam._m0[_2056].z, fma(_1993, cbSceneParam._m0[_2056].y, _1989 * cbSceneParam._m0[_2056].x)));
        float _2084 = cbSceneParam._m0[33u].z * _2079;
        float _2086 = cbSceneParam._m0[33u].w * _2079;
        float _2089 = fma(_2001, cbSceneParam._m0[_2048].w, fma(_1997, cbSceneParam._m0[_2048].z, fma(_1993, cbSceneParam._m0[_2048].y, _1989 * cbSceneParam._m0[_2048].x))) / _2079;
        float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
        float _4549 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2144 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2067) / _2079, (_2086 + _2071) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2067) / _2079, (_2071 - _2084) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2084) / _2079, (_2071 - _2086) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2086) / _2079, (_2084 + _2071) / _2079), _2089), 0.0)).x), vec4(0.25)));
        _2151 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
        _2152 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
        _2153 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2151 = 1.0;
        _2152 = 1.0;
        _2153 = 1.0;
    }
    float _2217;
    float _2219;
    float _2221;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2205 = fma(_2001, cbSceneParam._m0[63u].w, fma(_1997, cbSceneParam._m0[63u].z, fma(_1993, cbSceneParam._m0[63u].y, _1989 * cbSceneParam._m0[63u].x)));
        float _2206 = fma(_2001, cbSceneParam._m0[60u].w, fma(_1997, cbSceneParam._m0[60u].z, fma(_1993, cbSceneParam._m0[60u].y, _1989 * cbSceneParam._m0[60u].x))) / _2205;
        float _2207 = fma(_2001, cbSceneParam._m0[61u].w, fma(_1997, cbSceneParam._m0[61u].z, fma(_1993, cbSceneParam._m0[61u].y, _1989 * cbSceneParam._m0[61u].x))) / _2205;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2206 >= cbSceneParam._m0[64u].x) && (_2207 >= cbSceneParam._m0[64u].y)) && (_2206 <= cbSceneParam._m0[64u].z)) && (_2207 <= cbSceneParam._m0[64u].w))
        {
            float _2345 = fma(_2001, cbSceneParam._m0[62u].w, fma(_1997, cbSceneParam._m0[62u].z, fma(_1993, cbSceneParam._m0[62u].y, _1989 * cbSceneParam._m0[62u].x))) / _2205;
            float _2349 = isnan(cbSceneParam._m0[41u].w) ? _2345 : (isnan(_2345) ? cbSceneParam._m0[41u].w : max(_2345, cbSceneParam._m0[41u].w));
            float _2392 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
            float _4565 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
            float _2399 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2206, cbSceneParam._m0[33u].w + _2207), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2206, _2207 - cbSceneParam._m0[33u].z), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].z, _2207 - cbSceneParam._m0[33u].w), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2207), _2349), 0.0)).x), vec4(0.25)));
            float _2403 = 1.0 - (_2399 * cbSceneParam._m0[34u].x);
            float _2404 = 1.0 - (_2399 * cbSceneParam._m0[34u].y);
            float _2405 = 1.0 - (_2399 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_39_38_ladder_1 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
            frontier_phi_39_38_ladder_2 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
        }
        else
        {
            frontier_phi_39_38_ladder = _2152;
            frontier_phi_39_38_ladder_1 = _2151;
            frontier_phi_39_38_ladder_2 = _2153;
        }
        _2217 = frontier_phi_39_38_ladder_1;
        _2219 = frontier_phi_39_38_ladder;
        _2221 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2217 = _2151;
        _2219 = _2152;
        _2221 = _2153;
    }
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_788 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _896 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2264 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2268 = _2228 | 1u;
    float _2279 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_583, _584, _585));
    float _2282 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_583, _584, _585));
    float _4601 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _4612 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2287 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2289 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2296 = ((cbLight._m0[_2245].x * _2251) * _2289) + (((cbLight._m0[_2255].x * _2217) * _2264) * _2287);
    float _2297 = ((_2251 * cbLight._m0[_2245].y) * _2289) + (((cbLight._m0[_2255].y * _2219) * _2264) * _2287);
    float _2298 = ((_2251 * cbLight._m0[_2245].z) * _2289) + (((cbLight._m0[_2255].z * _2221) * _2264) * _2287);
    uvec4 _2302 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2304 = _2302.x == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2304)
    {
        _2406 = _2296;
        _2408 = _2297;
        _2410 = _2298;
    }
    else
    {
        uint _2414 = _2228 + 6u;
        float _2430 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4623 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2433 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2406 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2296;
        _2408 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2297;
        _2410 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2298;
    }
    bool _2413 = _2302.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2413)
    {
        _2468 = _2406;
        _2470 = _2408;
        _2472 = _2410;
    }
    else
    {
        uint _2641 = _2228 + 7u;
        float _2657 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2658 = _2657 * _2657;
        float _4639 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2659 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2660 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2468 = (((cbLight._m0[_2641].x * 0.3183098733425140380859375) * _2659) * _2660) + _2406;
        _2470 = (((cbLight._m0[_2641].y * 0.3183098733425140380859375) * _2659) * _2660) + _2408;
        _2472 = (((cbLight._m0[_2641].z * 0.3183098733425140380859375) * _2659) * _2660) + _2410;
    }
    uint _2475 = _2228 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _764) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2228].x + _666;
    float _2491 = cbLight._m0[_2228].y + _667;
    float _2492 = cbLight._m0[_2228].z + _668;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2228].xyz));
    float _4655 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2504 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2505 = dot(vec3(_583, _584, _585), vec3(_2497, _2498, _2499));
    float _4677 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2497, _2498, _2499));
    float _4688 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
    float _2526 = 0.959999978542327880859375 - _879;
    float _2528 = 0.959999978542327880859375 - _880;
    float _2529 = 0.959999978542327880859375 - _881;
    float _2536 = 1.0 - _2489;
    float _2547 = (0.5 / (((_2504 * ((_2503 * _2536) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2536) + _2489) * _2503))) * _2503;
    float _4699 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2563 = _2228 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _764) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2268].x + _666;
    float _2577 = cbLight._m0[_2268].y + _667;
    float _2578 = cbLight._m0[_2268].z + _668;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2268].xyz));
    float _4710 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2590 = dot(vec3(_583, _584, _585), vec3(_2583, _2584, _2585));
    float _4721 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2583, _2584, _2585));
    float _4732 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
    float _2616 = 1.0 - _2575;
    float _2626 = (0.5 / (((_2504 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2616) + _2575) * _2589))) * _2589;
    float _4743 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2638 = (((((_2609 * _2526) + _882) * cbLight._m0[_2563].x) * _2628) * _2251) + ((((cbLight._m0[_2475].x * _2217) * ((_2525 * _2526) + _882)) * _2549) * _2264);
    float _2639 = (((((_2609 * _2528) + _883) * cbLight._m0[_2563].y) * _2628) * _2251) + ((((cbLight._m0[_2475].y * _2219) * ((_2525 * _2528) + _883)) * _2549) * _2264);
    float _2640 = (((((_2609 * _2529) + _884) * cbLight._m0[_2563].z) * _2628) * _2251) + ((((cbLight._m0[_2475].z * _2221) * ((_2525 * _2529) + _884)) * _2549) * _2264);
    float _2696;
    float _2698;
    float _2700;
    if (_2304)
    {
        _2696 = _2638;
        _2698 = _2639;
        _2700 = _2640;
    }
    else
    {
        uint _2702 = _2228 + 2u;
        uint _2706 = _2228 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _764) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _666;
        float _2723 = cbLight._m0[_2702].y + _667;
        float _2724 = cbLight._m0[_2702].z + _668;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2702].xyz));
        float _4754 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2736 = dot(vec3(_583, _584, _585), vec3(_2729, _2730, _2731));
        float _4765 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4776 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2504 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2762) + _2721) * _2735))) * _2735;
        float _4787 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2696 = (((((_2755 * _2526) + _882) * cbLight._m0[_2706].x) * _2774) * _2775) + _2638;
        _2698 = (((((_2755 * _2528) + _883) * cbLight._m0[_2706].y) * _2774) * _2775) + _2639;
        _2700 = (((((_2755 * _2529) + _884) * cbLight._m0[_2706].z) * _2774) * _2775) + _2640;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2413)
    {
        _2806 = _2696;
        _2808 = _2698;
        _2810 = _2700;
    }
    else
    {
        uint _2817 = _2228 + 3u;
        uint _2821 = _2228 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _764) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _666;
        float _2838 = cbLight._m0[_2817].y + _667;
        float _2839 = cbLight._m0[_2817].z + _668;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2817].xyz));
        float _4803 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2851 = dot(vec3(_583, _584, _585), vec3(_2844, _2845, _2846));
        float _4814 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4825 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2504 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2877) + _2836) * _2850))) * _2850;
        float _4836 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2806 = (((((_2870 * _2526) + _882) * cbLight._m0[_2821].x) * _2889) * _2890) + _2696;
        _2808 = (((((_2870 * _2528) + _883) * cbLight._m0[_2821].y) * _2889) * _2890) + _2698;
        _2810 = (((((_2870 * _2529) + _884) * cbLight._m0[_2821].z) * _2889) * _2890) + _2700;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2226.y == 0u)
    {
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2912)));
        float _2933 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            uint _3232 = 0u;
            uint _3241;
            bool _3242;
            for (;;)
            {
                _3241 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                _3242 = _3241 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3242)
                {
                    frontier_phi_73_pred = _3231;
                    frontier_phi_73_pred_1 = _3230;
                    frontier_phi_73_pred_2 = _3229;
                    frontier_phi_73_pred_3 = _3228;
                    frontier_phi_73_pred_4 = _3227;
                    frontier_phi_73_pred_5 = _3226;
                }
                else
                {
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    uint _3377;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3241;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    for (;;)
                    {
                        uint _3381 = uint(findLSB(_3377)) + (_3232 << 5u);
                        uint _3378 = (_3377 + 4294967295u) & _3377;
                        uint _3383 = _3381 * 48u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 3u)).x));
                        uint _3403 = (_3381 * 48u) + 4u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3422 = (_3381 * 48u) + 8u;
                        vec3 _3433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x));
                        float _3437 = _3397.x - _2002;
                        float _3438 = _3397.y - _2003;
                        float _3439 = _3397.z - _2004;
                        float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                        float _3443 = inversesqrt(_3440);
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3447 = dot(vec3(_709, _712, _715), vec3(_3444, _3445, _3446));
                        float _3452 = 1.0 - (_3440 * _3397.w);
                        float _4862 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3454 = sqrt(_3440) * _3416.w;
                        float _3457 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3447) + _3458;
                        float _3464 = _3454 * _3454;
                        float _3468 = ((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3453) / ((_3464 * 0.699999988079071044921875) + 1.0);
                        float _3472 = (-0.0) - _2002;
                        float _3473 = (-0.0) - _2003;
                        float _3474 = (-0.0) - _2004;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3488 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _912;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3501 = _3481 + _3446;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_709, _712, _715), vec3(_3479, _3480, _3481));
                        float _4878 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3513 = dot(vec3(_709, _712, _715), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4889 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3457 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3447) + _3522;
                        float _4900 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4911 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3520 * _3520) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125))) * _3453;
                        _3301 = (_3468 * _3416.x) + _3374;
                        _3302 = (_3468 * _3416.y) + _3375;
                        _3303 = (_3468 * _3416.z) + _3376;
                        _3298 = (_3548 * _3433.x) + _3371;
                        _3299 = (_3548 * _3433.y) + _3372;
                        _3300 = (_3548 * _3433.z) + _3373;
                        if (_3378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3378;
                        }
                    }
                    frontier_phi_73_pred = _3303;
                    frontier_phi_73_pred_1 = _3302;
                    frontier_phi_73_pred_2 = _3301;
                    frontier_phi_73_pred_3 = _3300;
                    frontier_phi_73_pred_4 = _3299;
                    frontier_phi_73_pred_5 = _3298;
                }
                _3076 = frontier_phi_73_pred;
                _3074 = frontier_phi_73_pred_1;
                _3072 = frontier_phi_73_pred_2;
                _3070 = frontier_phi_73_pred_3;
                _3068 = frontier_phi_73_pred_4;
                _3066 = frontier_phi_73_pred_5;
                uint _3233 = _3232 + 1u;
                if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3226 = _3066;
                    _3227 = _3068;
                    _3228 = _3070;
                    _3229 = _3072;
                    _3230 = _3074;
                    _3231 = _3076;
                    _3232 = _3233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((4294967295u << _3082) & _2943) == 0u)
        {
            _3194 = _3065;
            _3196 = _3067;
            _3198 = _3069;
            _3200 = _3071;
            _3202 = _3073;
            _3204 = _3075;
        }
        else
        {
            float _3219 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float _3220 = _3219 * _2002;
            float _3221 = _3219 * _2003;
            float _3222 = _3219 * _2004;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3354 = _3065;
                float _3355 = _3067;
                float _3356 = _3069;
                float _3357 = _3071;
                float _3358 = _3073;
                float _3359 = _3075;
                uint _3360 = _3082;
                uint _3369;
                bool _3370;
                for (;;)
                {
                    _3369 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                    _3370 = _3369 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3370)
                    {
                        frontier_phi_84_pred = _3358;
                        frontier_phi_84_pred_1 = _3357;
                        frontier_phi_84_pred_2 = _3356;
                        frontier_phi_84_pred_3 = _3355;
                        frontier_phi_84_pred_4 = _3354;
                        frontier_phi_84_pred_5 = _3359;
                    }
                    else
                    {
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        float _3577 = _3356;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        uint _3581 = _3369;
                        uint _3582;
                        vec4 _3607;
                        float _3608;
                        vec4 _3623;
                        vec3 _3635;
                        vec4 _3650;
                        vec4 _3666;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3592 = ((_3360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3581));
                            _3582 = (_3581 + 4294967295u) & _3581;
                            uint _3594 = _3592 * 40u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3608 = _3607.w;
                            uint _3610 = (_3592 * 40u) + 4u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3592 * 40u) + 8u;
                            _3635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x));
                            uint _3637 = (_3592 * 40u) + 16u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3653 = (_3592 * 40u) + 20u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3669 = (_3592 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3592 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2004, _3701.z, fma(_2003, _3701.y, _3701.x * _2002)) + _3701.w;
                            _3714 = !((fma(_2004, _3682.z, fma(_2003, _3682.y, _3682.x * _2002)) + _3682.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3607.x - _2002;
                                float _3742 = _3607.y - _2003;
                                float _3743 = _3607.z - _2004;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3608 * _3608));
                                float _4922 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3759 = sqrt(_3744) * _3623.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_709, _712, _715))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2004, _3650.z, fma(_2003, _3650.y, _3650.x * _2002)) + _3650.w) / _3713;
                                float _3773 = (fma(_2004, _3666.z, fma(_2003, _3666.y, _3666.x * _2002)) + _3666.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4938 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _912;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3220;
                                float _3803 = _3749 - _3221;
                                float _3804 = _3750 - _3222;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_709, _712, _715), vec3((-0.0) - _3220, (-0.0) - _3221, (-0.0) - _3222));
                                float _4949 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3816 = dot(vec3(_709, _712, _715), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _4960 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_709, _712, _715), vec3(_3748, _3749, _3750))) + _3825;
                                float _4971 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _4982 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3779 * _3623.y;
                                frontier_phi_90_pred_1 = _3779 * _3623.x;
                                frontier_phi_90_pred_2 = _3853 * _3635.z;
                                frontier_phi_90_pred_3 = _3853 * _3635.y;
                                frontier_phi_90_pred_4 = _3853 * _3635.x;
                                frontier_phi_90_pred_5 = _3779 * _3623.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_90_pred;
                            _3860 = frontier_phi_90_pred_1;
                            _3859 = frontier_phi_90_pred_2;
                            _3858 = frontier_phi_90_pred_3;
                            _3857 = frontier_phi_90_pred_4;
                            _3862 = frontier_phi_90_pred_5;
                            _3565 = _3860 + _3578;
                            _3566 = _3861 + _3579;
                            _3567 = _3862 + _3580;
                            _3562 = _3857 + _3575;
                            _3563 = _3858 + _3576;
                            _3564 = _3859 + _3577;
                            if (_3582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3582;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3566;
                        frontier_phi_84_pred_1 = _3565;
                        frontier_phi_84_pred_2 = _3564;
                        frontier_phi_84_pred_3 = _3563;
                        frontier_phi_84_pred_4 = _3562;
                        frontier_phi_84_pred_5 = _3567;
                    }
                    _3203 = frontier_phi_84_pred;
                    _3201 = frontier_phi_84_pred_1;
                    _3199 = frontier_phi_84_pred_2;
                    _3197 = frontier_phi_84_pred_3;
                    _3195 = frontier_phi_84_pred_4;
                    _3205 = frontier_phi_84_pred_5;
                    uint _3361 = _3360 + 1u;
                    if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3354 = _3195;
                        _3355 = _3197;
                        _3356 = _3199;
                        _3357 = _3201;
                        _3358 = _3203;
                        _3359 = _3205;
                        _3360 = _3361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3205;
                frontier_phi_65_66_ladder_1 = _3201;
                frontier_phi_65_66_ladder_2 = _3203;
                frontier_phi_65_66_ladder_3 = _3197;
                frontier_phi_65_66_ladder_4 = _3195;
                frontier_phi_65_66_ladder_5 = _3199;
            }
            else
            {
                frontier_phi_65_66_ladder = _3075;
                frontier_phi_65_66_ladder_1 = _3071;
                frontier_phi_65_66_ladder_2 = _3073;
                frontier_phi_65_66_ladder_3 = _3067;
                frontier_phi_65_66_ladder_4 = _3065;
                frontier_phi_65_66_ladder_5 = _3069;
            }
            _3194 = frontier_phi_65_66_ladder_4;
            _3196 = frontier_phi_65_66_ladder_3;
            _3198 = frontier_phi_65_66_ladder_5;
            _3200 = frontier_phi_65_66_ladder_1;
            _3202 = frontier_phi_65_66_ladder_2;
            _3204 = frontier_phi_65_66_ladder;
        }
        float _3209 = isnan(1.0) ? _896 : (isnan(_896) ? 1.0 : min(_896, 1.0));
        _2955 = (_3209 * _3200) + _2468;
        _2957 = (_3209 * _3202) + _2470;
        _2959 = (_3209 * _3204) + _2472;
        _2961 = ((_3194 * _882) * _3209) + _2806;
        _2963 = ((_3196 * _883) * _3209) + _2808;
        _2965 = ((_3198 * _884) * _3209) + _2810;
    }
    else
    {
        _2955 = _2468;
        _2957 = _2470;
        _2959 = _2472;
        _2961 = _2806;
        _2963 = _2808;
        _2965 = _2810;
    }
    uint _2971 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _2981 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _521) * _534.x) * cbInstanceData._m0[_2971].x;
    float _2986 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _521) * _534.y) * cbInstanceData._m0[_2971].y;
    float _2991 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _521) * _534.z) * cbInstanceData._m0[_2971].z;
    float _4998 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _5009 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _5020 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _5031 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3009 = (((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2955 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _896))) + ((_2961 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + _2981;
    float _3011 = (_2986 + ((_2963 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2957 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _896)));
    float _3013 = (_2991 + ((_2965 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2959 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _896)));
    float _3014 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
    float _3015 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
    float _3016 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
    float _3022 = cbMtdParam._m0[2u].x * _2981;
    float _3023 = cbMtdParam._m0[2u].y * _2986;
    float _3024 = cbMtdParam._m0[2u].z * _2991;
    float _5057 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3026 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
    float _3031 = cbInstanceData._m0[_788 + 6u].w * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)));
    float _3036 = _686 / cbSceneParam._m0[86u].x;
    float _3037 = _687 / cbSceneParam._m0[86u].y;
    vec4 _3051 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3053 = _3051.x;
    float _3054 = _3051.y;
    float _3055 = _3051.z;
    float _3056 = _3051.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _3091 = _3090 / _607;
        float _3102 = _3091 * _659;
        float _3103 = _660 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3105 = _3091 * _661;
        float _3107 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3103;
        float _3115 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3311;
        if (abs((_3104 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3311 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3255 = 1.0 / cbSceneParam._m0[80u].x;
            float _3256 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3257 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            _3311 = ((abs(_3115 / _3104) * cbSceneParam._m0[80u].y) * ((((_3266 - _3267) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))))) * _3255)) - ((exp2(_3125 * _3266) - exp2(_3125 * _3267)) * _3255))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3313 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, 1.0), 0.0);
        float _3322 = exp2((_3311 * (-1.44269502162933349609375)) * (1.0 - _3313.w));
        float _3323 = log2(_3322);
        float _3339 = log2(_3056);
        _3127 = (exp2(_3339 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].x)) * _3313.x) / cbSceneParam._m0[78u].x)) + _3053;
        _3129 = (exp2(_3339 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].y)) * _3313.y) / cbSceneParam._m0[78u].y)) + _3054;
        _3131 = (exp2(_3339 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3323 * cbSceneParam._m0[78u].z)) * _3313.z) / cbSceneParam._m0[78u].z)) + _3055;
        _3133 = _3322 * _3056;
    }
    else
    {
        _3127 = _3053;
        _3129 = _3054;
        _3131 = _3055;
        _3133 = _3056;
    }
    bool _3349;
    vec4 _3143;
    vec4 _3165;
    float _3167;
    float _3171;
    float _3172;
    float _3173;
    float _3176;
    float _3179;
    float _3182;
    float _3183;
    bool _3193;
    for (;;)
    {
        _3143 = cbMatDynParam._m0[0u];
        float _3145 = roundEven(_3143.y);
        bool _3146 = _3145 == 3.0;
        float _3147 = log2(_3133);
        float _3151 = exp2(_3147 * cbSceneParam._m0[78u].x);
        float _3152 = exp2(_3147 * cbSceneParam._m0[78u].y);
        float _3153 = exp2(_3147 * cbSceneParam._m0[78u].z);
        float _3154 = _3151 * _3014;
        float _3155 = _3152 * _3015;
        float _3156 = _3153 * _3016;
        float _3163 = _675 + (-0.5);
        _3165 = cbMtdParam._m0[1u];
        _3167 = _3165.y * _3163;
        float _3170 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3171 = _3170 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
        _3172 = _3170 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
        _3173 = _3170 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
        _3176 = ((_3022 * _3026) * _3151) * _3170;
        _3179 = ((_3023 * _3026) * _3152) * _3170;
        _3182 = ((_3024 * _3026) * _3153) * _3170;
        _3183 = _3163 * 0.999000012874603271484375;
        _3193 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3193)
        {
            if ((cbInstanceData._m0[_788 + 7u].x + _3183) < 0.5)
            {
                _3349 = true;
                break;
            }
        }
        uint _3290 = _789 + uint(_3143.w);
        if ((cbInstanceData._m0[_3290].w < 1.0) && ((cbInstanceData._m0[_3290].w + _3183) < 0.5))
        {
            _3349 = true;
            break;
        }
        if ((_3167 + _400) < _3165.x)
        {
            _3349 = true;
            break;
        }
        _3349 = false;
        break;
    }
    float _3553;
    if (_3349)
    {
        discard_state = true;
        _3553 = 0.0;
    }
    else
    {
        _3553 = _3031;
    }
    SV_Target.x = _3171;
    SV_Target.y = _3172;
    SV_Target.z = _3173;
    SV_Target.w = _3553;
    SV_Target_1.x = _3176;
    SV_Target_1.y = _3179;
    SV_Target_1.z = _3182;
    SV_Target_1.w = _3031;
    discard_exit();
}


