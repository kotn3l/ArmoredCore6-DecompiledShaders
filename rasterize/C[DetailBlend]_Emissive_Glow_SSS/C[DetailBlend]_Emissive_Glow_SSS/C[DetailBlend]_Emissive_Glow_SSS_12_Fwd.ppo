#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1321;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _262 = _256.w;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = exp2(log2(1.0 - _262) * 8.0);
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _353 = exp2(log2(_262) * 8.0);
    vec4 _366 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _413 = (((((_309.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _391.x) - _295) * _270) + _295;
    float _414 = (((((_309.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _391.y) - _296) * _270) + _296;
    float _415 = (((((_309.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _391.z) - _297) * _270) + _297;
    float _422 = (((cbMtdParam._m0[13u].x * _337.x) - _413) * _325) + _413;
    float _423 = (((cbMtdParam._m0[13u].y * _337.y) - _414) * _325) + _414;
    float _424 = (((cbMtdParam._m0[13u].z * _337.z) - _415) * _325) + _415;
    float _431 = (((cbMtdParam._m0[11u].x * _366.x) - _422) * _353) + _422;
    float _432 = (((cbMtdParam._m0[11u].y * _366.y) - _423) * _353) + _423;
    float _433 = (((cbMtdParam._m0[11u].z * _366.z) - _424) * _353) + _424;
    float _434 = _391.w * _309.w;
    float _465 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _270) + cbMtdParam._m0[17u].x;
    float _468 = ((cbMtdParam._m0[15u].z - _465) * _325) + _465;
    float _471 = ((cbMtdParam._m0[16u].w - _468) * _353) + _468;
    vec4 _483 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _492 = cbMtdParam._m0[14u].y + _483.z;
    vec4 _504 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _523 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _541 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _552 = ((((_261 * 2.0) * (cbMtdParam._m0[14u].x + _504.z)) - _492) * _270) + _492;
    float _556 = (((_523.z - _552) + cbMtdParam._m0[15u].y) * _325) + _552;
    float _560 = (((_541.z - _556) + cbMtdParam._m0[14u].w) * _353) + _556;
    float _574 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3710 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _580 = (_575 * _575) * (3.0 - (_575 * 2.0));
    vec4 _593 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _601 = (_256.x * 2.0) + (-1.0);
    float _602 = (_256.y * 2.0) + (-1.0);
    float _603 = dot(vec2(_601, _602), vec2(_601, _602));
    float _3721 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    float _613 = ((_504.x - _485) * _270) + _485;
    float _614 = ((_504.y - _486) * _270) + _486;
    float _619 = ((_523.x - _613) * _325) + _613;
    float _620 = ((_523.y - _614) * _325) + _614;
    float _633 = (cbMtdParam._m0[14u].z * (((((_541.x - _619) * _353) + _619) * 2.0) + (-1.0))) + _601;
    float _634 = (cbMtdParam._m0[14u].z * (((((_541.y - _620) * _353) + _620) * 2.0) + (-1.0))) + _602;
    float _637 = fma(_608, _241, fma(_634, _233 * TANGENT.x, (_219 * _211) * _633));
    float _640 = fma(_608, _242, fma(_634, _233 * TANGENT.y, (_219 * _212) * _633));
    float _643 = fma(_608, _243, fma(_634, _233 * TANGENT.z, (_219 * _213) * _633));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3732 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _651 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _652 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _653 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _654 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _655 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _656 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _672 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _740 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _742 = _740.w;
    float _760 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _763 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _766 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    vec4 _768 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _770 = _768.x;
    float _782 = (((_768.y - _652) + (_768.w * _652)) * cbMtdParam._m0[3u].x) + _652;
    vec4 _783 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _799 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_770 * _770)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _783.z;
    float _807 = (((cbMatDynParam._m0[15u].x - _656) * cbMatDynParam._m0[15u].w) * _799) + _656;
    float _815 = ((_799 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _782)) + _782;
    uint _839 = uint(roundEven(NORMAL.w)) * 13u;
    uint _840 = _839 + 9u;
    uint _841 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * _653) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * _654) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * _655) * cbInstanceData._m0[_841].z;
    float _3798 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _853 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _858 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _869 = (((_858.x - _807) + (_858.w * _807)) * cbMtdParam._m0[3u].x) + _807;
    float _882 = (cbMtdParam._m0[3u].x * (((_850 * _742) - _850) + _853.x)) + _850;
    float _883 = (cbMtdParam._m0[3u].x * (((_851 * _742) - _851) + _853.y)) + _851;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _742) - _852) + _853.z)) + _852;
    float _898 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_807 * (_653 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_807 * (_654 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_807 * (_655 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _902 = _898 * cbMatDynParam._m0[13u].w;
    float _912 = (_902 * (cbMatDynParam._m0[13u].x - _882)) + _882;
    float _913 = (_902 * (cbMatDynParam._m0[13u].y - _883)) + _883;
    float _914 = (_902 * (cbMatDynParam._m0[13u].z - _884)) + _884;
    float _922 = ((_898 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _869)) + _869;
    float _923 = 1.0 - _922;
    float _924 = _923 * _912;
    float _925 = _923 * _913;
    float _926 = _923 * _914;
    float _930 = (_912 + (-0.039999999105930328369140625)) * _922;
    float _931 = (_913 + (-0.039999999105930328369140625)) * _922;
    float _932 = (_914 + (-0.039999999105930328369140625)) * _922;
    float _933 = _930 + 0.039999999105930328369140625;
    float _934 = _931 + 0.039999999105930328369140625;
    float _935 = _932 + 0.039999999105930328369140625;
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _947 = _944.x * TEXCOORD_4;
    float _948 = dot(vec3(_648, _649, _650), vec3(_729, _730, _731));
    float _951 = _948 * 2.0;
    float _955 = (_951 * _648) - _729;
    float _956 = (_951 * _649) - _730;
    float _957 = (_951 * _650) - _731;
    float _961 = abs(dot(vec3(_729, _730, _731), vec3(_648, _649, _650)));
    float _3831 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_815);
    float _975 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _981 = (1.0 - _975) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _982 = _975 * _963;
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_1018, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010));
        float _1049 = fma(_1018, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010));
        float _1053 = fma(_1018, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010));
        float _1078 = _1010 + _648;
        float _1079 = _1014 + _649;
        float _1080 = _1018 + _650;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_648, _649, _650), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3879 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_648, _649, _650), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3912 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_648, _649, _650), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3945 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_1018, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010));
        float _1365 = fma(_1018, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010));
        float _1369 = fma(_1018, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010));
        float _1392 = _1010 + _648;
        float _1393 = _1014 + _649;
        float _1394 = _1018 + _650;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_648, _649, _650), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4008 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_648, _649, _650), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4041 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_648, _649, _650), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4074 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1321;
        _1631 = _1321;
        _1632 = _1321;
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = _1321;
        _1640 = _1321;
        _1641 = _1321;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1333)) + _1333;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1334)) + _1334;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1335)) + _1335;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _955 * 0.5;
    float _1699 = _956 * 0.5;
    float _1700 = _957 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_1018, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_1018, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_1018, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_957, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955));
        float _1825 = fma(_957, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955));
        float _1828 = fma(_957, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1856 = frontier_phi_16_14_ladder;
        }
        float _2060;
        if (_1825 > 0.0)
        {
            _2060 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2060 = frontier_phi_25_21_ladder;
        }
        float _2314;
        if (_1828 > 0.0)
        {
            _2314 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2314 = frontier_phi_37_32_ladder;
        }
        float _2316 = isnan(_2060) ? _1856 : (isnan(_1856) ? _2060 : min(_1856, _2060));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1822) + _1811;
        float _2322 = (_2317 * _1825) + _1815;
        float _2323 = (_2317 * _1828) + _1819;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_15_37_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_15_37_ladder_2;
        _1846 = frontier_phi_15_37_ladder_1;
        _1848 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_955, _956, _957), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_1018, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_1018, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_1018, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_957, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955));
        float _1922 = fma(_957, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955));
        float _1925 = fma(_957, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955));
        float _2065;
        if (_1919 > 0.0)
        {
            _2065 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2065 = frontier_phi_27_23_ladder;
        }
        float _2341;
        if (_1922 > 0.0)
        {
            _2341 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2341 = frontier_phi_39_34_ladder;
        }
        float _2554;
        if (_1925 > 0.0)
        {
            _2554 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2554 = frontier_phi_48_45_ladder;
        }
        float _2556 = isnan(_2341) ? _2065 : (isnan(_2065) ? _2341 : min(_2065, _2341));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1919) + _1908;
        float _2562 = (_2557 * _1922) + _1912;
        float _2563 = (_2557 * _1925) + _1916;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2563, cbModelParam._m0[17u].z, fma(_2562, cbModelParam._m0[17u].y, _2561 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2563, cbModelParam._m0[18u].z, fma(_2562, cbModelParam._m0[18u].y, _2561 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2563, cbModelParam._m0[19u].z, fma(_2562, cbModelParam._m0[19u].y, _2561 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_24_48_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_24_48_ladder_2;
        _1946 = frontier_phi_24_48_ladder_1;
        _1948 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_955, _956, _957), _1853);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1961 = (((_981 * _933) + _982) * _947) * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1963 = (((_981 * _934) + _982) * _947) * ((cbModelParam._m0[1u].w * (_1946 - _1846)) + _1846);
    float _1965 = (((_981 * _935) + _982) * _947) * ((cbModelParam._m0[1u].w * (_1948 - _1848)) + _1848);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_839 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1994 = _947 + (-1.0);
    float _1999 = (cbLight._m0[_1987].x * _1994) + 1.0;
    float _2000 = (cbLight._m0[_1987].y * _1994) + 1.0;
    float _2001 = (cbLight._m0[_1987].z * _1994) + 1.0;
    float _2002 = (cbLight._m0[_1987].w * _1994) + 1.0;
    uint _2003 = _1986 + 5u;
    float _2009 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2013 = _1986 + 4u;
    float _2019 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2023 = _1986 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_648, _649, _650));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_648, _649, _650));
    float _4210 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4221 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2003].x * _2009) * _2044) + ((cbLight._m0[_2013].x * _2019) * _2042);
    float _2052 = ((_2009 * cbLight._m0[_2003].y) * _2044) + ((_2019 * cbLight._m0[_2013].y) * _2042);
    float _2053 = ((_2009 * cbLight._m0[_2003].z) * _2044) + ((_2019 * cbLight._m0[_2013].z) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1986 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2059)
    {
        _2070 = _2051;
        _2072 = _2052;
        _2074 = _2053;
    }
    else
    {
        uint _2078 = _1986 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1986 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4232 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2097 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _2051;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _2052;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _2053;
    }
    bool _2077 = _2057.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2077)
    {
        _2115 = _2070;
        _2117 = _2072;
        _2119 = _2074;
    }
    else
    {
        uint _2285 = _1986 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1986 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4248 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2304 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2115 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2070;
        _2117 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2072;
        _2119 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2074;
    }
    uint _2122 = _1986 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _815) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1986].x + _729;
    float _2138 = cbLight._m0[_1986].y + _730;
    float _2139 = cbLight._m0[_1986].z + _731;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_1986].xyz));
    float _4264 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2151 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2152 = dot(vec3(_648, _649, _650), vec3(_2144, _2145, _2146));
    float _4286 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2144, _2145, _2146));
    float _4297 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _930;
    float _2175 = 0.959999978542327880859375 - _931;
    float _2176 = 0.959999978542327880859375 - _932;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4308 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2207 = _1986 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _815) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2023].x + _729;
    float _2221 = cbLight._m0[_2023].y + _730;
    float _2222 = cbLight._m0[_2023].z + _731;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2023].xyz));
    float _4319 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2234 = dot(vec3(_648, _649, _650), vec3(_2227, _2228, _2229));
    float _4330 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2227, _2228, _2229));
    float _4341 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2260 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2151 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2260) + _2219) * _2233))) * _2233;
    float _4352 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2282 = (((((_2253 * _2173) + _933) * cbLight._m0[_2207].x) * _2272) * _2009) + (((((_2172 * _2173) + _933) * cbLight._m0[_2122].x) * _2196) * _2019);
    float _2283 = (((((_2253 * _2175) + _934) * cbLight._m0[_2207].y) * _2272) * _2009) + (((((_2172 * _2175) + _934) * cbLight._m0[_2122].y) * _2196) * _2019);
    float _2284 = (((((_2253 * _2176) + _935) * cbLight._m0[_2207].z) * _2272) * _2009) + (((((_2172 * _2176) + _935) * cbLight._m0[_2122].z) * _2196) * _2019);
    float _2346;
    float _2348;
    float _2350;
    if (_2059)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1986 + 2u;
        uint _2356 = _1986 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _815) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _729;
        float _2373 = cbLight._m0[_2352].y + _730;
        float _2374 = cbLight._m0[_2352].z + _731;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2352].xyz));
        float _4363 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2386 = dot(vec3(_648, _649, _650), vec3(_2379, _2380, _2381));
        float _4374 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4385 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2412 = 1.0 - _2371;
        float _2422 = (0.5 / (((_2151 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2412) + _2371) * _2385))) * _2385;
        float _4396 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2346 = (((((_2405 * _2173) + _933) * cbLight._m0[_2356].x) * _2424) * _2425) + _2282;
        _2348 = (((((_2405 * _2175) + _934) * cbLight._m0[_2356].y) * _2424) * _2425) + _2283;
        _2350 = (((((_2405 * _2176) + _935) * cbLight._m0[_2356].z) * _2424) * _2425) + _2284;
    }
    float _2460;
    float _2462;
    float _2464;
    if (_2077)
    {
        _2460 = _2346;
        _2462 = _2348;
        _2464 = _2350;
    }
    else
    {
        uint _2471 = _1986 + 3u;
        uint _2475 = _1986 + 11u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _815) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _729;
        float _2492 = cbLight._m0[_2471].y + _730;
        float _2493 = cbLight._m0[_2471].z + _731;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2471].xyz));
        float _4412 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2505 = dot(vec3(_648, _649, _650), vec3(_2498, _2499, _2500));
        float _4423 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4434 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2151 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2531) + _2490) * _2504))) * _2504;
        float _4445 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2460 = (((((_2524 * _2173) + _933) * cbLight._m0[_2475].x) * _2543) * _2544) + _2346;
        _2462 = (((((_2524 * _2175) + _934) * cbLight._m0[_2475].y) * _2543) * _2544) + _2348;
        _2464 = (((((_2524 * _2176) + _935) * cbLight._m0[_2475].z) * _2543) * _2544) + _2350;
    }
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_1984.y == 0u)
    {
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2619;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2619;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2619;
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.x;
        uint _2646 = uint((float(_2634.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2635))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2635)));
        float _2656 = (log2(_2622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2657 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        uint _2660 = uint(isnan(14.0) ? _2657 : (isnan(_2657) ? 14.0 : min(_2657, 14.0)));
        uvec4 _2665 = texelFetch(g_lightClusterGridBuffer, int(((_2660 << 2u) + (_2646 << 6u)) >> 2u));
        uint _2666 = _2665.x;
        uint _2667 = _2634.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2667 >> 4u) & 15u)) + 4294967295u) & _2666) == 0u) || ((_2667 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            uint _2968 = 0u;
            uint _2977;
            bool _2978;
            for (;;)
            {
                _2977 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                _2978 = _2977 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2978)
                {
                    frontier_phi_63_pred = _2967;
                    frontier_phi_63_pred_1 = _2966;
                    frontier_phi_63_pred_2 = _2965;
                    frontier_phi_63_pred_3 = _2964;
                    frontier_phi_63_pred_4 = _2963;
                    frontier_phi_63_pred_5 = _2962;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2977;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2968 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _2620;
                        float _3153 = _3112.y - _2621;
                        float _3154 = _3112.z - _2622;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_760, _763, _766), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4471 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _2620;
                        float _3188 = (-0.0) - _2621;
                        float _3189 = (-0.0) - _2622;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3204 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _963;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_760, _763, _766), vec3(_3194, _3195, _3196));
                        float _4487 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3229 = dot(vec3(_760, _763, _766), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4498 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3172 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3162) + _3238;
                        float _4509 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4520 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3236 * _3236) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3021 = (_3183 * _3131.x) + _3089;
                        _3022 = (_3183 * _3131.y) + _3090;
                        _3023 = (_3183 * _3131.z) + _3091;
                        _3018 = (_3264 * _3148.x) + _3086;
                        _3019 = (_3264 * _3148.y) + _3087;
                        _3020 = (_3264 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_63_pred = _3023;
                    frontier_phi_63_pred_1 = _3022;
                    frontier_phi_63_pred_2 = _3021;
                    frontier_phi_63_pred_3 = _3020;
                    frontier_phi_63_pred_4 = _3019;
                    frontier_phi_63_pred_5 = _3018;
                }
                _2820 = frontier_phi_63_pred;
                _2818 = frontier_phi_63_pred_1;
                _2816 = frontier_phi_63_pred_2;
                _2814 = frontier_phi_63_pred_3;
                _2812 = frontier_phi_63_pred_4;
                _2810 = frontier_phi_63_pred_5;
                uint _2969 = _2968 + 1u;
                if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2962 = _2810;
                    _2963 = _2812;
                    _2964 = _2814;
                    _2965 = _2816;
                    _2966 = _2818;
                    _2967 = _2820;
                    _2968 = _2969;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((4294967295u << _2826) & _2666) == 0u)
        {
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
        }
        else
        {
            float _2955 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
            float _2956 = _2955 * _2620;
            float _2957 = _2955 * _2621;
            float _2958 = _2955 * _2622;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _3069 = _2809;
                float _3070 = _2811;
                float _3071 = _2813;
                float _3072 = _2815;
                float _3073 = _2817;
                float _3074 = _2819;
                uint _3075 = _2826;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3085)
                    {
                        frontier_phi_69_pred = _3074;
                        frontier_phi_69_pred_1 = _3073;
                        frontier_phi_69_pred_2 = _3072;
                        frontier_phi_69_pred_3 = _3071;
                        frontier_phi_69_pred_4 = _3070;
                        frontier_phi_69_pred_5 = _3069;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        float _3284 = _3071;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        uint _3288 = _3084;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3373;
                        float _3420;
                        bool _3421;
                        for (;;)
                        {
                            uint _3299 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3360 = (_3299 * 40u) + 20u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3376 = (_3299 * 40u) + 24u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3395 = (_3299 * 40u) + 28u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3420 = fma(_2622, _3408.z, fma(_2621, _3408.y, _3408.x * _2620)) + _3408.w;
                            _3421 = !((fma(_2622, _3389.z, fma(_2621, _3389.y, _3389.x * _2620)) + _3389.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3421)
                            {
                                float _3448 = _3314.x - _2620;
                                float _3449 = _3314.y - _2621;
                                float _3450 = _3314.z - _2622;
                                float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                                float _3454 = inversesqrt(_3451);
                                float _3455 = _3454 * _3448;
                                float _3456 = _3454 * _3449;
                                float _3457 = _3454 * _3450;
                                float _3461 = 1.0 - (_3451 / (_3315 * _3315));
                                float _4531 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3466 = sqrt(_3451) * _3330.w;
                                float _3468 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                                float _3469 = _3468 * _3468;
                                float _3472 = ((1.0 - _3469) * dot(vec3(_3455, _3456, _3457), vec3(_760, _763, _766))) + _3469;
                                float _3475 = _3466 * _3466;
                                float _3479 = (fma(_2622, _3357.z, fma(_2621, _3357.y, _3357.x * _2620)) + _3357.w) / _3420;
                                float _3480 = (fma(_2622, _3373.z, fma(_2621, _3373.y, _3373.x * _2620)) + _3373.w) / _3420;
                                float _3484 = 1.0 - dot(vec2(_3479, _3480), vec2(_3479, _3480));
                                float _4547 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3486 = _3485 * (((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3462) / ((_3475 * 0.699999988079071044921875) + 1.0));
                                float _3498 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                                float _3499 = 1.0 - _963;
                                float _3506 = sqrt(1.0 - ((1.0 - (_3499 * _3499)) * (1.0 - (_3498 * _3498))));
                                float _3507 = _3506 * _3506;
                                float _3508 = _3507 * _3507;
                                float _3509 = _3455 - _2956;
                                float _3510 = _3456 - _2957;
                                float _3511 = _3457 - _2958;
                                float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                                float _3519 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2956, (-0.0) - _2957, (-0.0) - _2958));
                                float _4558 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3523 = dot(vec3(_760, _763, _766), vec3(_3515 * _3509, _3515 * _3510, _3515 * _3511));
                                float _4569 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3530 = ((_3526 * _3526) * (_3508 + (-1.0))) + 1.0;
                                float _3531 = _3468 * _3507;
                                float _3532 = _3531 * _3531;
                                float _3538 = ((1.0 - _3532) * dot(vec3(_760, _763, _766), vec3(_3455, _3456, _3457))) + _3532;
                                float _4580 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3540 = 1.0 - _3507;
                                float _3550 = (0.5 / (((_3539 * ((_3522 * _3540) + _3507)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3507) * _3522))) * _3539;
                                float _4591 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3560 = (_3485 * _3462) * (((_3508 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3530 * _3530) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3486 * _3330.z;
                                frontier_phi_75_pred_1 = _3486 * _3330.y;
                                frontier_phi_75_pred_2 = _3486 * _3330.x;
                                frontier_phi_75_pred_3 = _3560 * _3342.z;
                                frontier_phi_75_pred_4 = _3560 * _3342.y;
                                frontier_phi_75_pred_5 = _3560 * _3342.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_75_pred;
                            _3568 = frontier_phi_75_pred_1;
                            _3567 = frontier_phi_75_pred_2;
                            _3566 = frontier_phi_75_pred_3;
                            _3565 = frontier_phi_75_pred_4;
                            _3564 = frontier_phi_75_pred_5;
                            _3272 = _3567 + _3285;
                            _3273 = _3568 + _3286;
                            _3274 = _3569 + _3287;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3274;
                        frontier_phi_69_pred_1 = _3273;
                        frontier_phi_69_pred_2 = _3272;
                        frontier_phi_69_pred_3 = _3271;
                        frontier_phi_69_pred_4 = _3270;
                        frontier_phi_69_pred_5 = _3269;
                    }
                    _2941 = frontier_phi_69_pred;
                    _2939 = frontier_phi_69_pred_1;
                    _2937 = frontier_phi_69_pred_2;
                    _2935 = frontier_phi_69_pred_3;
                    _2933 = frontier_phi_69_pred_4;
                    _2931 = frontier_phi_69_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2931;
                        _3070 = _2933;
                        _3071 = _2935;
                        _3072 = _2937;
                        _3073 = _2939;
                        _3074 = _2941;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2941;
                frontier_phi_57_58_ladder_1 = _2939;
                frontier_phi_57_58_ladder_2 = _2937;
                frontier_phi_57_58_ladder_3 = _2935;
                frontier_phi_57_58_ladder_4 = _2933;
                frontier_phi_57_58_ladder_5 = _2931;
            }
            else
            {
                frontier_phi_57_58_ladder = _2819;
                frontier_phi_57_58_ladder_1 = _2817;
                frontier_phi_57_58_ladder_2 = _2815;
                frontier_phi_57_58_ladder_3 = _2813;
                frontier_phi_57_58_ladder_4 = _2811;
                frontier_phi_57_58_ladder_5 = _2809;
            }
            _2930 = frontier_phi_57_58_ladder_5;
            _2932 = frontier_phi_57_58_ladder_4;
            _2934 = frontier_phi_57_58_ladder_3;
            _2936 = frontier_phi_57_58_ladder_2;
            _2938 = frontier_phi_57_58_ladder_1;
            _2940 = frontier_phi_57_58_ladder;
        }
        float _2945 = isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0));
        _2678 = (_2945 * _2936) + _2115;
        _2680 = (_2945 * _2938) + _2117;
        _2682 = (_2945 * _2940) + _2119;
        _2684 = ((_2930 * _933) * _2945) + _2460;
        _2686 = ((_2932 * _934) * _2945) + _2462;
        _2688 = ((_2934 * _935) * _2945) + _2464;
    }
    else
    {
        _2678 = _2115;
        _2680 = _2117;
        _2682 = _2119;
        _2684 = _2460;
        _2686 = _2462;
        _2688 = _2464;
    }
    uint _2694 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _2704 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _580) * _593.x) * cbInstanceData._m0[_2694].x;
    float _2709 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _580) * _593.y) * cbInstanceData._m0[_2694].y;
    float _2714 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _580) * _593.z) * cbInstanceData._m0[_2694].z;
    float _4607 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4618 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4629 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4640 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2732 = (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2678 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _947))) + ((_2684 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + _2704;
    float _2734 = (_2709 + ((_2686 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2680 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _947)));
    float _2736 = (_2714 + ((_2688 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2682 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _947)));
    float _4666 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2749 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2754 = cbInstanceData._m0[_839 + 6u].w * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)));
    float _2759 = _737 / cbSceneParam._m0[86u].x;
    float _2760 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _672 : (isnan(_672) ? cbSceneParam._m0[77u].w : min(_672, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_672 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_672) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _672 : min(cbSceneParam._m0[80u].w, _672));
        float _2835 = _2834 / _672;
        float _2846 = _2835 * _722;
        float _2847 = _723 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2849 = _2835 * _724;
        float _2851 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2847;
        float _2859 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2848 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2991 = 1.0 / cbSceneParam._m0[80u].x;
            float _2992 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2993 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            _3031 = ((abs(_2859 / _2848) * cbSceneParam._m0[80u].y) * ((((_3002 - _3003) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))))) * _2991)) - ((exp2(_2869 * _3002) - exp2(_2869 * _3003)) * _2991))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2779);
        _2871 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2873 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2875 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2877 = _3042 * _2779;
    }
    else
    {
        _2871 = _2776;
        _2873 = _2777;
        _2875 = _2778;
        _2877 = _2779;
    }
    float _2889 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2890 = _2889 == 3.0;
    float _2891 = log2(_2877);
    float _2895 = exp2(_2891 * cbSceneParam._m0[78u].x);
    float _2896 = exp2(_2891 * cbSceneParam._m0[78u].y);
    float _2897 = exp2(_2891 * cbSceneParam._m0[78u].z);
    float _2898 = _2895 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0)));
    float _2899 = _2896 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0)));
    float _2900 = _2897 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0)));
    float _2909 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2909 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.y = _2909 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.z = _2909 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.w = _2754;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2704) * _2749) * _2895) * _2909;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2709) * _2749) * _2896) * _2909;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2714) * _2749) * _2897) * _2909;
    SV_Target_1.w = _2754;
}


