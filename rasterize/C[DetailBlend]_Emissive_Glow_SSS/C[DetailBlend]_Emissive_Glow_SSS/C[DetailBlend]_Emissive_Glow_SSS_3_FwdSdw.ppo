#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1257;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = (((cbMtdParam._m0[9u].x * _309.x) - _295) * _270) + _295;
    float _331 = (((cbMtdParam._m0[9u].y * _309.y) - _296) * _270) + _296;
    float _332 = (((cbMtdParam._m0[9u].z * _309.z) - _297) * _270) + _297;
    float _337 = exp2(log2(1.0 - _256.w) * 8.0);
    vec4 _349 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _383 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _391 = (((((cbMtdParam._m0[13u].x * _349.x) - _330) * _337) + _330) * 4.55000019073486328125) * _383.x;
    float _393 = (((((cbMtdParam._m0[13u].y * _349.y) - _331) * _337) + _331) * 4.55000019073486328125) * _383.y;
    float _395 = (((((cbMtdParam._m0[13u].z * _349.z) - _332) * _337) + _332) * 4.55000019073486328125) * _383.z;
    float _396 = _383.w * _309.w;
    float _426 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _270) + cbMtdParam._m0[17u].x;
    float _429 = ((cbMtdParam._m0[15u].z - _426) * _337) + _426;
    vec4 _441 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _450 = cbMtdParam._m0[14u].y + _441.z;
    vec4 _462 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _471 = (((_462.z - _450) + cbMtdParam._m0[14u].x) * _270) + _450;
    vec4 _484 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _501 = (((_270 * (_261 + (-0.5))) + 0.5) * 2.0) * ((((_484.z - _471) + cbMtdParam._m0[15u].y) * _337) + _471);
    float _516 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3929 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _522 = (_517 * _517) * (3.0 - (_517 * 2.0));
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _543 = (_256.x * 2.0) + (-1.0);
    float _544 = (_256.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3940 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
    float _555 = ((_462.x - _443) * _270) + _443;
    float _556 = ((_462.y - _444) * _270) + _444;
    float _569 = (cbMtdParam._m0[14u].z * (((((_484.x - _555) * _337) + _555) * 2.0) + (-1.0))) + _543;
    float _570 = (cbMtdParam._m0[14u].z * (((((_484.y - _556) * _337) + _556) * 2.0) + (-1.0))) + _544;
    float _573 = fma(_550, _241, fma(_570, _233 * TANGENT.x, (_219 * _211) * _569));
    float _576 = fma(_550, _242, fma(_570, _233 * TANGENT.y, (_219 * _212) * _569));
    float _579 = fma(_550, _243, fma(_570, _233 * TANGENT.z, (_219 * _213) * _569));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3951 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _587 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _588 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _589 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _590 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _591 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _592 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _678 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _680 = _678.w;
    float _698 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _701 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _704 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    vec4 _706 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = _706.x;
    float _720 = (((_706.y - _588) + (_706.w * _588)) * cbMtdParam._m0[3u].x) + _588;
    vec4 _721 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _737 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_708 * _708)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _721.z;
    float _745 = (((cbMatDynParam._m0[15u].x - _592) * cbMatDynParam._m0[15u].w) * _737) + _592;
    float _753 = ((_737 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _720)) + _720;
    uint _777 = uint(roundEven(NORMAL.w)) * 13u;
    uint _778 = _777 + 9u;
    uint _779 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * _589) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * _590) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * _591) * cbInstanceData._m0[_779].z;
    float _4017 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    vec4 _791 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _796 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _807 = (((_796.x - _745) + (_796.w * _745)) * cbMtdParam._m0[3u].x) + _745;
    float _820 = (cbMtdParam._m0[3u].x * (((_788 * _680) - _788) + _791.x)) + _788;
    float _821 = (cbMtdParam._m0[3u].x * (((_789 * _680) - _789) + _791.y)) + _789;
    float _822 = (cbMtdParam._m0[3u].x * (((_790 * _680) - _790) + _791.z)) + _790;
    float _836 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_745 * (_589 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_590 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_591 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _840 = _836 * cbMatDynParam._m0[13u].w;
    float _850 = (_840 * (cbMatDynParam._m0[13u].x - _820)) + _820;
    float _851 = (_840 * (cbMatDynParam._m0[13u].y - _821)) + _821;
    float _852 = (_840 * (cbMatDynParam._m0[13u].z - _822)) + _822;
    float _860 = ((_836 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _807)) + _807;
    float _861 = 1.0 - _860;
    float _862 = _861 * _850;
    float _863 = _861 * _851;
    float _864 = _861 * _852;
    float _868 = (_850 + (-0.039999999105930328369140625)) * _860;
    float _869 = (_851 + (-0.039999999105930328369140625)) * _860;
    float _870 = (_852 + (-0.039999999105930328369140625)) * _860;
    float _871 = _868 + 0.039999999105930328369140625;
    float _872 = _869 + 0.039999999105930328369140625;
    float _873 = _870 + 0.039999999105930328369140625;
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _885 = _882.x * TEXCOORD_4;
    float _886 = dot(vec3(_584, _585, _586), vec3(_667, _668, _669));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _584) - _667;
    float _894 = (_889 * _585) - _668;
    float _895 = (_889 * _586) - _669;
    float _899 = abs(dot(vec3(_667, _668, _669), vec3(_584, _585, _586)));
    float _4050 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_753);
    float _913 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _919 = (1.0 - _913) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _920 = _913 * _901;
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_956, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948));
        float _987 = fma(_956, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948));
        float _991 = fma(_956, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948));
        float _1014 = _948 + _584;
        float _1015 = _952 + _585;
        float _1016 = _956 + _586;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_584, _585, _586), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4098 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_584, _585, _586), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4131 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_584, _585, _586), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4164 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_956, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948));
        float _1301 = fma(_956, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948));
        float _1305 = fma(_956, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948));
        float _1328 = _948 + _584;
        float _1329 = _952 + _585;
        float _1330 = _956 + _586;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_584, _585, _586), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4227 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_584, _585, _586), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4260 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_584, _585, _586), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4293 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1257;
        _1567 = _1257;
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _893 * 0.5;
    float _1635 = _894 * 0.5;
    float _1636 = _895 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1674;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1685;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1676 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1689 = (_1685 * cbModelParam._m0[1u].x) + (_1674 * (1.0 - cbModelParam._m0[1u].x));
    float _1699 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1699 : min(cbModelParam._m0[25u].z, _1699));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1747 = fma(_956, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948)) + cbModelParam._m0[13u].w;
        float _1751 = fma(_956, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948)) + cbModelParam._m0[14u].w;
        float _1755 = fma(_956, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948)) + cbModelParam._m0[15u].w;
        float _1758 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1761 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1764 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1792;
        if (_1758 > 0.0)
        {
            _1792 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1792 = frontier_phi_16_14_ladder;
        }
        float _1965;
        if (_1761 > 0.0)
        {
            _1965 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1965 = frontier_phi_25_21_ladder;
        }
        float _2260;
        if (_1764 > 0.0)
        {
            _2260 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2260 = frontier_phi_37_32_ladder;
        }
        float _2262 = isnan(_1965) ? _1792 : (isnan(_1792) ? _1965 : min(_1792, _1965));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1758) + _1747;
        float _2268 = (_2263 * _1761) + _1751;
        float _2269 = (_2263 * _1764) + _1755;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1700);
            frontier_phi_15_37_ladder = _2414.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2414.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2414.z * cbModelParam._m0[1u].y;
        }
        _1780 = frontier_phi_15_37_ladder_1;
        _1782 = frontier_phi_15_37_ladder;
        _1784 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1700);
        _1780 = _1768.x * cbModelParam._m0[1u].y;
        _1782 = _1768.y * cbModelParam._m0[1u].y;
        _1784 = _1768.z * cbModelParam._m0[1u].y;
    }
    float _1788 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1788 : min(cbModelParam._m0[25u].w, _1788));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_956, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_956, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_956, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1858 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1861 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _1970;
        if (_1855 > 0.0)
        {
            _1970 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1970 = frontier_phi_27_23_ladder;
        }
        float _2287;
        if (_1858 > 0.0)
        {
            _2287 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2287 = frontier_phi_39_34_ladder;
        }
        float _2625;
        if (_1861 > 0.0)
        {
            _2625 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2625 = frontier_phi_49_46_ladder;
        }
        float _2627 = isnan(_2287) ? _1970 : (isnan(_1970) ? _2287 : min(_1970, _2287));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1855) + _1844;
        float _2633 = (_2628 * _1858) + _1848;
        float _2634 = (_2628 * _1861) + _1852;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1789);
            frontier_phi_24_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_24_49_ladder_2;
        _1882 = frontier_phi_24_49_ladder_1;
        _1884 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1789);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1897 = (((_919 * _871) + _920) * _885) * ((cbModelParam._m0[1u].w * (_1880 - _1780)) + _1780);
    float _1899 = (((_919 * _872) + _920) * _885) * ((cbModelParam._m0[1u].w * (_1882 - _1782)) + _1782);
    float _1901 = (((_919 * _873) + _920) * _885) * ((cbModelParam._m0[1u].w * (_1884 - _1784)) + _1784);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1957 = _1944 / _1956;
    float _1958 = _1948 / _1956;
    float _1959 = _1952 / _1956;
    float _2106;
    float _2107;
    float _2108;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1986 = ((uint(_1959 > cbSceneParam._m0[59u].y) + uint(_1959 > cbSceneParam._m0[59u].x)) + uint(_1959 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1987 = _1986 + 43u;
        uint _1995 = _1986 + 44u;
        uint _2003 = _1986 + 45u;
        uint _2011 = _1986 + 46u;
        float _2022 = fma(_1956, cbSceneParam._m0[_1987].w, fma(_1952, cbSceneParam._m0[_1987].z, fma(_1948, cbSceneParam._m0[_1987].y, _1944 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1956, cbSceneParam._m0[_1995].w, fma(_1952, cbSceneParam._m0[_1995].z, fma(_1948, cbSceneParam._m0[_1995].y, _1944 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1956, cbSceneParam._m0[_2011].w, fma(_1952, cbSceneParam._m0[_2011].z, fma(_1948, cbSceneParam._m0[_2011].y, _1944 * cbSceneParam._m0[_2011].x)));
        float _2039 = cbSceneParam._m0[33u].z * _2034;
        float _2041 = cbSceneParam._m0[33u].w * _2034;
        float _2044 = fma(_1956, cbSceneParam._m0[_2003].w, fma(_1952, cbSceneParam._m0[_2003].z, fma(_1948, cbSceneParam._m0[_2003].y, _1944 * cbSceneParam._m0[_2003].x))) / _2034;
        float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
        float _4419 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2099 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2022) / _2034, (_2041 + _2026) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2022) / _2034, (_2026 - _2039) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2039) / _2034, (_2026 - _2041) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2041) / _2034, (_2039 + _2026) / _2034), _2044), 0.0)).x), vec4(0.25)));
        _2106 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
        _2107 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
        _2108 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2106 = 1.0;
        _2107 = 1.0;
        _2108 = 1.0;
    }
    float _2172;
    float _2174;
    float _2176;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2160 = fma(_1956, cbSceneParam._m0[63u].w, fma(_1952, cbSceneParam._m0[63u].z, fma(_1948, cbSceneParam._m0[63u].y, _1944 * cbSceneParam._m0[63u].x)));
        float _2161 = fma(_1956, cbSceneParam._m0[60u].w, fma(_1952, cbSceneParam._m0[60u].z, fma(_1948, cbSceneParam._m0[60u].y, _1944 * cbSceneParam._m0[60u].x))) / _2160;
        float _2162 = fma(_1956, cbSceneParam._m0[61u].w, fma(_1952, cbSceneParam._m0[61u].z, fma(_1948, cbSceneParam._m0[61u].y, _1944 * cbSceneParam._m0[61u].x))) / _2160;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2161 >= cbSceneParam._m0[64u].x) && (_2162 >= cbSceneParam._m0[64u].y)) && (_2161 <= cbSceneParam._m0[64u].z)) && (_2162 <= cbSceneParam._m0[64u].w))
        {
            float _2300 = fma(_1956, cbSceneParam._m0[62u].w, fma(_1952, cbSceneParam._m0[62u].z, fma(_1948, cbSceneParam._m0[62u].y, _1944 * cbSceneParam._m0[62u].x))) / _2160;
            float _2304 = isnan(cbSceneParam._m0[41u].w) ? _2300 : (isnan(_2300) ? cbSceneParam._m0[41u].w : max(_2300, cbSceneParam._m0[41u].w));
            float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
            float _4435 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
            float _2354 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2161, cbSceneParam._m0[33u].w + _2162), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2161, _2162 - cbSceneParam._m0[33u].z), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].z, _2162 - cbSceneParam._m0[33u].w), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2162), _2304), 0.0)).x), vec4(0.25)));
            float _2358 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
            float _2359 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
            float _2360 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2359) ? _2107 : (isnan(_2107) ? _2359 : min(_2107, _2359));
            frontier_phi_36_35_ladder_1 = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
            frontier_phi_36_35_ladder_2 = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
        }
        else
        {
            frontier_phi_36_35_ladder = _2107;
            frontier_phi_36_35_ladder_1 = _2108;
            frontier_phi_36_35_ladder_2 = _2106;
        }
        _2172 = frontier_phi_36_35_ladder_2;
        _2174 = frontier_phi_36_35_ladder;
        _2176 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2172 = _2106;
        _2174 = _2107;
        _2176 = _2108;
    }
    uvec4 _2181 = floatBitsToUint(cbInstanceData._m0[_777 + 5u]);
    uint _2183 = _2181.x * 14u;
    uint _2184 = _2183 + 13u;
    float _2191 = _885 + (-1.0);
    float _2196 = (cbLight._m0[_2184].x * _2191) + 1.0;
    float _2197 = (cbLight._m0[_2184].y * _2191) + 1.0;
    float _2198 = (cbLight._m0[_2184].z * _2191) + 1.0;
    float _2199 = (cbLight._m0[_2184].w * _2191) + 1.0;
    uint _2200 = _2183 + 5u;
    float _2206 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2210 = _2183 + 4u;
    float _2219 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2223 = _2183 | 1u;
    float _2234 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_584, _585, _586));
    float _2237 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_584, _585, _586));
    float _4471 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _4482 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2242 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2244 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2200].x * _2206) * _2244) + (((cbLight._m0[_2210].x * _2172) * _2219) * _2242);
    float _2252 = ((_2206 * cbLight._m0[_2200].y) * _2244) + (((cbLight._m0[_2210].y * _2174) * _2219) * _2242);
    float _2253 = ((_2206 * cbLight._m0[_2200].z) * _2244) + (((cbLight._m0[_2210].z * _2176) * _2219) * _2242);
    uvec4 _2257 = floatBitsToUint(cbLight._m0[_2183 + 12u]);
    bool _2259 = _2257.x == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2259)
    {
        _2361 = _2251;
        _2363 = _2252;
        _2365 = _2253;
    }
    else
    {
        uint _2369 = _2183 + 6u;
        float _2385 = (dot(vec3(cbLight._m0[_2183 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4493 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2388 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2361 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2251;
        _2363 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2252;
        _2365 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2253;
    }
    bool _2368 = _2257.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2368)
    {
        _2423 = _2361;
        _2425 = _2363;
        _2427 = _2365;
    }
    else
    {
        uint _2596 = _2183 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2183 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4509 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2615 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2361;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2363;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2365;
    }
    uint _2430 = _2183 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _753) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2183].x + _667;
    float _2446 = cbLight._m0[_2183].y + _668;
    float _2447 = cbLight._m0[_2183].z + _669;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2183].xyz));
    float _4525 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2459 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2460 = dot(vec3(_584, _585, _586), vec3(_2452, _2453, _2454));
    float _4547 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2452, _2453, _2454));
    float _4558 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _868;
    float _2483 = 0.959999978542327880859375 - _869;
    float _2484 = 0.959999978542327880859375 - _870;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4569 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2183 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _753) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2223].x + _667;
    float _2532 = cbLight._m0[_2223].y + _668;
    float _2533 = cbLight._m0[_2223].z + _669;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2223].xyz));
    float _4580 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2545 = dot(vec3(_584, _585, _586), vec3(_2538, _2539, _2540));
    float _4591 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2538, _2539, _2540));
    float _4602 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4613 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _871) * cbLight._m0[_2518].x) * _2583) * _2206) + ((((cbLight._m0[_2430].x * _2172) * ((_2480 * _2481) + _871)) * _2504) * _2219);
    float _2594 = (((((_2564 * _2483) + _872) * cbLight._m0[_2518].y) * _2583) * _2206) + ((((cbLight._m0[_2430].y * _2174) * ((_2480 * _2483) + _872)) * _2504) * _2219);
    float _2595 = (((((_2564 * _2484) + _873) * cbLight._m0[_2518].z) * _2583) * _2206) + ((((cbLight._m0[_2430].z * _2176) * ((_2480 * _2484) + _873)) * _2504) * _2219);
    float _2651;
    float _2653;
    float _2655;
    if (_2259)
    {
        _2651 = _2593;
        _2653 = _2594;
        _2655 = _2595;
    }
    else
    {
        uint _2657 = _2183 + 2u;
        uint _2661 = _2183 + 10u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _753) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _667;
        float _2678 = cbLight._m0[_2657].y + _668;
        float _2679 = cbLight._m0[_2657].z + _669;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2657].xyz));
        float _4624 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2691 = dot(vec3(_584, _585, _586), vec3(_2684, _2685, _2686));
        float _4635 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4646 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
        float _2717 = 1.0 - _2676;
        float _2727 = (0.5 / (((_2459 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2717) + _2676) * _2690))) * _2690;
        float _4657 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2651 = (((((_2710 * _2481) + _871) * cbLight._m0[_2661].x) * _2729) * _2730) + _2593;
        _2653 = (((((_2710 * _2483) + _872) * cbLight._m0[_2661].y) * _2729) * _2730) + _2594;
        _2655 = (((((_2710 * _2484) + _873) * cbLight._m0[_2661].z) * _2729) * _2730) + _2595;
    }
    float _2761;
    float _2763;
    float _2765;
    if (_2368)
    {
        _2761 = _2651;
        _2763 = _2653;
        _2765 = _2655;
    }
    else
    {
        uint _2772 = _2183 + 3u;
        uint _2776 = _2183 + 11u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _753) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _667;
        float _2793 = cbLight._m0[_2772].y + _668;
        float _2794 = cbLight._m0[_2772].z + _669;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2772].xyz));
        float _4673 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2806 = dot(vec3(_584, _585, _586), vec3(_2799, _2800, _2801));
        float _4684 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4695 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2832 = 1.0 - _2791;
        float _2842 = (0.5 / (((_2459 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2832) + _2791) * _2805))) * _2805;
        float _4706 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2761 = (((((_2825 * _2481) + _871) * cbLight._m0[_2776].x) * _2844) * _2845) + _2651;
        _2763 = (((((_2825 * _2483) + _872) * cbLight._m0[_2776].y) * _2844) * _2845) + _2653;
        _2765 = (((((_2825 * _2484) + _873) * cbLight._m0[_2776].z) * _2844) * _2845) + _2655;
    }
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_2181.y == 0u)
    {
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.x;
        uint _2878 = uint((float(_2866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2867))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2867)));
        float _2888 = (log2(_1959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2889 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        uint _2892 = uint(isnan(14.0) ? _2889 : (isnan(_2889) ? 14.0 : min(_2889, 14.0)));
        uvec4 _2897 = texelFetch(g_lightClusterGridBuffer, int(((_2892 << 2u) + (_2878 << 6u)) >> 2u));
        uint _2898 = _2897.x;
        uint _2899 = _2866.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2899 >> 4u) & 15u)) + 4294967295u) & _2898) == 0u) || ((_2899 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            uint _3179 = 0u;
            uint _3188;
            bool _3189;
            for (;;)
            {
                _3188 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                _3189 = _3188 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3189)
                {
                    frontier_phi_68_pred = _3178;
                    frontier_phi_68_pred_1 = _3177;
                    frontier_phi_68_pred_2 = _3176;
                    frontier_phi_68_pred_3 = _3174;
                    frontier_phi_68_pred_4 = _3173;
                    frontier_phi_68_pred_5 = _3175;
                }
                else
                {
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    uint _3303;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3188;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3307 = uint(findLSB(_3303)) + (_3179 << 5u);
                        uint _3304 = (_3303 + 4294967295u) & _3303;
                        uint _3309 = _3307 * 48u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3329 = (_3307 * 48u) + 4u;
                        vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3348 = (_3307 * 48u) + 8u;
                        vec3 _3359 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x));
                        float _3363 = _3323.x - _1957;
                        float _3364 = _3323.y - _1958;
                        float _3365 = _3323.z - _1959;
                        float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                        float _3369 = inversesqrt(_3366);
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3373 = dot(vec3(_698, _701, _704), vec3(_3370, _3371, _3372));
                        float _3378 = 1.0 - (_3366 * _3323.w);
                        float _4732 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3380 = sqrt(_3366) * _3342.w;
                        float _3383 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3373) + _3384;
                        float _3390 = _3380 * _3380;
                        float _3394 = ((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3379) / ((_3390 * 0.699999988079071044921875) + 1.0);
                        float _3398 = (-0.0) - _1957;
                        float _3399 = (-0.0) - _1958;
                        float _3400 = (-0.0) - _1959;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3414 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                        float _3415 = 1.0 - _901;
                        float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                        float _3423 = _3422 * _3422;
                        float _3424 = _3423 * _3423;
                        float _3425 = _3405 + _3370;
                        float _3426 = _3406 + _3371;
                        float _3427 = _3407 + _3372;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3435 = dot(vec3(_698, _701, _704), vec3(_3405, _3406, _3407));
                        float _4748 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3439 = dot(vec3(_698, _701, _704), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                        float _4759 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                        float _3447 = _3383 * _3423;
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3373) + _3448;
                        float _4770 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3453 = 1.0 - _3423;
                        float _3463 = (0.5 / (((_3452 * ((_3438 * _3453) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3423) * _3438))) * _3452;
                        float _4781 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3474 = (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3446 * _3446) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125))) * _3379;
                        _3232 = (_3394 * _3342.x) + _3300;
                        _3233 = (_3394 * _3342.y) + _3301;
                        _3234 = (_3394 * _3342.z) + _3302;
                        _3229 = (_3474 * _3359.x) + _3297;
                        _3230 = (_3474 * _3359.y) + _3298;
                        _3231 = (_3474 * _3359.z) + _3299;
                        if (_3304 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3304;
                        }
                    }
                    frontier_phi_68_pred = _3234;
                    frontier_phi_68_pred_1 = _3233;
                    frontier_phi_68_pred_2 = _3232;
                    frontier_phi_68_pred_3 = _3230;
                    frontier_phi_68_pred_4 = _3229;
                    frontier_phi_68_pred_5 = _3231;
                }
                _3031 = frontier_phi_68_pred;
                _3029 = frontier_phi_68_pred_1;
                _3027 = frontier_phi_68_pred_2;
                _3023 = frontier_phi_68_pred_3;
                _3021 = frontier_phi_68_pred_4;
                _3025 = frontier_phi_68_pred_5;
                uint _3180 = _3179 + 1u;
                if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3173 = _3021;
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3180;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((4294967295u << _3037) & _2898) == 0u)
        {
            _3141 = _3020;
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
        }
        else
        {
            float _3166 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
            float _3167 = _3166 * _1957;
            float _3168 = _3166 * _1958;
            float _3169 = _3166 * _1959;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3280 = _3020;
                float _3281 = _3022;
                float _3282 = _3024;
                float _3283 = _3026;
                float _3284 = _3028;
                float _3285 = _3030;
                uint _3286 = _3037;
                uint _3295;
                bool _3296;
                for (;;)
                {
                    _3295 = texelFetch(g_lightClassification, int((((_2892 << 5u) + (_2878 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                    _3296 = _3295 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3296)
                    {
                        frontier_phi_74_pred = _3282;
                        frontier_phi_74_pred_1 = _3281;
                        frontier_phi_74_pred_2 = _3280;
                        frontier_phi_74_pred_3 = _3285;
                        frontier_phi_74_pred_4 = _3284;
                        frontier_phi_74_pred_5 = _3283;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3492 = _3280;
                        float _3493 = _3281;
                        float _3494 = _3282;
                        float _3495 = _3283;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        uint _3498 = _3295;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3583;
                        float _3630;
                        bool _3631;
                        for (;;)
                        {
                            uint _3509 = ((_3286 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3570 = (_3509 * 40u) + 20u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3586 = (_3509 * 40u) + 24u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3605 = (_3509 * 40u) + 28u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3630 = fma(_1959, _3618.z, fma(_1958, _3618.y, _3618.x * _1957)) + _3618.w;
                            _3631 = !((fma(_1959, _3599.z, fma(_1958, _3599.y, _3599.x * _1957)) + _3599.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3631)
                            {
                                float _3658 = _3524.x - _1957;
                                float _3659 = _3524.y - _1958;
                                float _3660 = _3524.z - _1959;
                                float _3661 = dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660));
                                float _3664 = inversesqrt(_3661);
                                float _3665 = _3664 * _3658;
                                float _3666 = _3664 * _3659;
                                float _3667 = _3664 * _3660;
                                float _3671 = 1.0 - (_3661 / (_3525 * _3525));
                                float _4792 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3676 = sqrt(_3661) * _3540.w;
                                float _3678 = 1.39999997615814208984375 / (_3676 + 1.39999997615814208984375);
                                float _3679 = _3678 * _3678;
                                float _3682 = ((1.0 - _3679) * dot(vec3(_3665, _3666, _3667), vec3(_698, _701, _704))) + _3679;
                                float _3685 = _3676 * _3676;
                                float _3689 = (fma(_1959, _3567.z, fma(_1958, _3567.y, _3567.x * _1957)) + _3567.w) / _3630;
                                float _3690 = (fma(_1959, _3583.z, fma(_1958, _3583.y, _3583.x * _1957)) + _3583.w) / _3630;
                                float _3694 = 1.0 - dot(vec2(_3689, _3690), vec2(_3689, _3690));
                                float _4808 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3696 = _3695 * (((isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0))) * _3672) / ((_3685 * 0.699999988079071044921875) + 1.0));
                                float _3708 = exp2(log2(1.0 / ((_3685 * 3.5) + 5.0)) * 0.25);
                                float _3709 = 1.0 - _901;
                                float _3716 = sqrt(1.0 - ((1.0 - (_3709 * _3709)) * (1.0 - (_3708 * _3708))));
                                float _3717 = _3716 * _3716;
                                float _3718 = _3717 * _3717;
                                float _3719 = _3665 - _3167;
                                float _3720 = _3666 - _3168;
                                float _3721 = _3667 - _3169;
                                float _3725 = inversesqrt(dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721)));
                                float _3729 = dot(vec3(_698, _701, _704), vec3((-0.0) - _3167, (-0.0) - _3168, (-0.0) - _3169));
                                float _4819 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3733 = dot(vec3(_698, _701, _704), vec3(_3725 * _3719, _3725 * _3720, _3725 * _3721));
                                float _4830 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3740 = ((_3736 * _3736) * (_3718 + (-1.0))) + 1.0;
                                float _3741 = _3678 * _3717;
                                float _3742 = _3741 * _3741;
                                float _3748 = ((1.0 - _3742) * dot(vec3(_698, _701, _704), vec3(_3665, _3666, _3667))) + _3742;
                                float _4841 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3750 = 1.0 - _3717;
                                float _3760 = (0.5 / (((_3749 * ((_3732 * _3750) + _3717)) + 9.9999999392252902907785028219223e-09) + (((_3749 * _3750) + _3717) * _3732))) * _3749;
                                float _4852 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3770 = (_3695 * _3672) * (((_3718 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3740 * _3740) * ((_3685 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3770 * _3552.z;
                                frontier_phi_80_pred_1 = _3770 * _3552.y;
                                frontier_phi_80_pred_2 = _3770 * _3552.x;
                                frontier_phi_80_pred_3 = _3696 * _3540.z;
                                frontier_phi_80_pred_4 = _3696 * _3540.y;
                                frontier_phi_80_pred_5 = _3696 * _3540.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_80_pred;
                            _3775 = frontier_phi_80_pred_1;
                            _3774 = frontier_phi_80_pred_2;
                            _3779 = frontier_phi_80_pred_3;
                            _3778 = frontier_phi_80_pred_4;
                            _3777 = frontier_phi_80_pred_5;
                            _3482 = _3777 + _3495;
                            _3483 = _3778 + _3496;
                            _3484 = _3779 + _3497;
                            _3479 = _3774 + _3492;
                            _3480 = _3775 + _3493;
                            _3481 = _3776 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3481;
                        frontier_phi_74_pred_1 = _3480;
                        frontier_phi_74_pred_2 = _3479;
                        frontier_phi_74_pred_3 = _3484;
                        frontier_phi_74_pred_4 = _3483;
                        frontier_phi_74_pred_5 = _3482;
                    }
                    _3146 = frontier_phi_74_pred;
                    _3144 = frontier_phi_74_pred_1;
                    _3142 = frontier_phi_74_pred_2;
                    _3152 = frontier_phi_74_pred_3;
                    _3150 = frontier_phi_74_pred_4;
                    _3148 = frontier_phi_74_pred_5;
                    uint _3287 = _3286 + 1u;
                    if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3280 = _3142;
                        _3281 = _3144;
                        _3282 = _3146;
                        _3283 = _3148;
                        _3284 = _3150;
                        _3285 = _3152;
                        _3286 = _3287;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3150;
                frontier_phi_62_63_ladder_1 = _3148;
                frontier_phi_62_63_ladder_2 = _3146;
                frontier_phi_62_63_ladder_3 = _3152;
                frontier_phi_62_63_ladder_4 = _3144;
                frontier_phi_62_63_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_62_63_ladder = _3028;
                frontier_phi_62_63_ladder_1 = _3026;
                frontier_phi_62_63_ladder_2 = _3024;
                frontier_phi_62_63_ladder_3 = _3030;
                frontier_phi_62_63_ladder_4 = _3022;
                frontier_phi_62_63_ladder_5 = _3020;
            }
            _3141 = frontier_phi_62_63_ladder_5;
            _3143 = frontier_phi_62_63_ladder_4;
            _3145 = frontier_phi_62_63_ladder_2;
            _3147 = frontier_phi_62_63_ladder_1;
            _3149 = frontier_phi_62_63_ladder;
            _3151 = frontier_phi_62_63_ladder_3;
        }
        float _3156 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2910 = (_3156 * _3147) + _2423;
        _2912 = (_3156 * _3149) + _2425;
        _2914 = (_3156 * _3151) + _2427;
        _2916 = ((_3141 * _871) * _3156) + _2761;
        _2918 = ((_3143 * _872) * _3156) + _2763;
        _2920 = ((_3145 * _873) * _3156) + _2765;
    }
    else
    {
        _2910 = _2423;
        _2912 = _2425;
        _2914 = _2427;
        _2916 = _2761;
        _2918 = _2763;
        _2920 = _2765;
    }
    uint _2926 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _2936 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.x) * cbInstanceData._m0[_2926].x;
    float _2941 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.y) * cbInstanceData._m0[_2926].y;
    float _2946 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.z) * cbInstanceData._m0[_2926].z;
    float _4868 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4879 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4890 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4901 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2964 = (((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2910 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _885))) + ((_2916 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + _2936;
    float _2966 = (_2941 + ((_2918 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2912 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _885)));
    float _2968 = (_2946 + ((_2920 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2914 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _885)));
    float _4927 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2981 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2986 = cbInstanceData._m0[_777 + 6u].w * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)));
    float _2991 = _675 / cbSceneParam._m0[86u].x;
    float _2992 = _676 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _3046 = _3045 / _608;
        float _3057 = _3046 * _660;
        float _3058 = _661 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3060 = _3046 * _662;
        float _3062 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3058;
        float _3070 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3059 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3202 = 1.0 / cbSceneParam._m0[80u].x;
            float _3203 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3204 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            _3242 = ((abs(_3070 / _3059) * cbSceneParam._m0[80u].y) * ((((_3213 - _3214) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))))) * _3202)) - ((exp2(_3080 * _3213) - exp2(_3080 * _3214)) * _3202))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_3011);
        _3082 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3084 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3086 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3088 = _3253 * _3011;
    }
    else
    {
        _3082 = _3008;
        _3084 = _3009;
        _3086 = _3010;
        _3088 = _3011;
    }
    float _3100 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3101 = _3100 == 3.0;
    float _3102 = log2(_3088);
    float _3106 = exp2(_3102 * cbSceneParam._m0[78u].x);
    float _3107 = exp2(_3102 * cbSceneParam._m0[78u].y);
    float _3108 = exp2(_3102 * cbSceneParam._m0[78u].z);
    float _3109 = _3106 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)));
    float _3110 = _3107 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)));
    float _3111 = _3108 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)));
    float _3120 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3120 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.y = _3120 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.z = _3120 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.w = _2986;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2936) * _2981) * _3106) * _3120;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2941) * _2981) * _3107) * _3120;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2946) * _2981) * _3108) * _3120;
    SV_Target_1.w = _2986;
}


