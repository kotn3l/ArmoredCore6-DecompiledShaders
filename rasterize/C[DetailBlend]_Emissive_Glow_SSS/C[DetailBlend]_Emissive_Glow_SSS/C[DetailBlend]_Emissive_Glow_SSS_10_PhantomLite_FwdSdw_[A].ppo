#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1556;
float _4264;
float _4265;
float _4266;
float _4267;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    vec4 _320 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = _320.z;
    float _326 = _320.w;
    float _332 = exp2(log2(_325 * 22.0) * 260.0);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _348 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _358 = cbMtdParam._m0[10u].x * _348.x;
    float _359 = cbMtdParam._m0[10u].y * _348.y;
    float _360 = cbMtdParam._m0[10u].z * _348.z;
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _392 = (((cbMtdParam._m0[9u].x * _372.x) - _358) * _334) + _358;
    float _393 = (((cbMtdParam._m0[9u].y * _372.y) - _359) * _334) + _359;
    float _394 = (((cbMtdParam._m0[9u].z * _372.z) - _360) * _334) + _360;
    float _399 = exp2(log2(1.0 - _326) * 8.0);
    vec4 _411 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = exp2(log2(_326) * 8.0);
    vec4 _448 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _472 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _480 = (((((cbMtdParam._m0[13u].x * _411.x) - _392) * _399) + _392) * 4.55000019073486328125) * _472.x;
    float _482 = (((((cbMtdParam._m0[13u].y * _411.y) - _393) * _399) + _393) * 4.55000019073486328125) * _472.y;
    float _484 = (((((cbMtdParam._m0[13u].z * _411.z) - _394) * _399) + _394) * 4.55000019073486328125) * _472.z;
    float _491 = (((cbMtdParam._m0[11u].x * _448.x) - _480) * _436) + _480;
    float _492 = (((cbMtdParam._m0[11u].y * _448.y) - _482) * _436) + _482;
    float _493 = (((cbMtdParam._m0[11u].z * _448.z) - _484) * _436) + _484;
    float _494 = _472.w * _372.w;
    float _524 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _334) + cbMtdParam._m0[17u].x;
    float _527 = ((cbMtdParam._m0[15u].z - _524) * _399) + _524;
    float _531 = ((cbMtdParam._m0[16u].w - _527) * _436) + _527;
    vec4 _543 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _552 = cbMtdParam._m0[14u].y + _543.z;
    vec4 _564 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _573 = (((_564.z - _552) + cbMtdParam._m0[14u].x) * _334) + _552;
    vec4 _586 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _608 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _621 = (((_334 * (_325 + (-0.5))) + 0.5) * 2.0) * ((((_586.z - _573) + cbMtdParam._m0[15u].y) * _399) + _573);
    float _625 = (((_608.z - _621) + cbMtdParam._m0[14u].w) * _436) + _621;
    float _639 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4286 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _645 = (_640 * _640) * (3.0 - (_640 * 2.0));
    vec4 _658 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _666 = (_320.x * 2.0) + (-1.0);
    float _667 = (_320.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _4297 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _673 = sqrt(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))));
    float _678 = ((_564.x - _545) * _334) + _545;
    float _679 = ((_564.y - _546) * _334) + _546;
    float _684 = ((_586.x - _678) * _399) + _678;
    float _685 = ((_586.y - _679) * _399) + _679;
    float _698 = (cbMtdParam._m0[14u].z * (((((_608.x - _684) * _436) + _684) * 2.0) + (-1.0))) + _666;
    float _699 = (cbMtdParam._m0[14u].z * (((((_608.y - _685) * _436) + _685) * 2.0) + (-1.0))) + _667;
    float _702 = fma(_673, _249, fma(_699, _241 * TANGENT.x, (_227 * _219) * _698));
    float _705 = fma(_673, _250, fma(_699, _241 * TANGENT.y, (_227 * _220) * _698));
    float _708 = fma(_673, _251, fma(_699, _241 * TANGENT.z, (_227 * _221) * _698));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _4308 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _716 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _717 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _718 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _4341 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _719 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _720 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _721 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _729 = cbMatDynParam._m0[9u].x * _718;
    float _730 = cbMatDynParam._m0[9u].y * _719;
    float _731 = cbMatDynParam._m0[9u].z * _720;
    float _738 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _739 = _738 * _305;
    float _740 = _738 * _306;
    float _741 = _738 * _307;
    float _748 = abs(exp2(log2(dot(vec3(_713, _714, _715), vec3(_739, _740, _741))) * cbMatDynParam._m0[12u].x));
    float _749 = isnan(0.100000001490116119384765625) ? _748 : (isnan(_748) ? 0.100000001490116119384765625 : max(_748, 0.100000001490116119384765625));
    float _755 = ((isnan(0.699999988079071044921875) ? _749 : (isnan(_749) ? 0.699999988079071044921875 : min(_749, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _777 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4384 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4395 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _784 = (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) - _781) * _755) + _781;
    float _803 = dot(vec3(_713, _714, _715), vec3(0.0, -1.0, 0.0));
    float _4406 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _813 = (_806 * _718) * cbMatDynParam._m0[11u].x;
    float _815 = (_806 * _719) * cbMatDynParam._m0[11u].y;
    float _817 = (_806 * _720) * cbMatDynParam._m0[11u].z;
    float _827 = dot(vec3(_739, _740, _741), vec3(_713, _714, _715)) * 2.0;
    float _837 = dot(vec3((-0.0) - (_739 - (_827 * _713)), (-0.0) - (_740 - (_827 * _714)), (-0.0) - (_741 - (_827 * _715))), vec3(0.0, -1.0, 0.0));
    float _4417 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _844 = exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 4.0);
    float _870 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _910);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _910);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    vec4 _933 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _935 = _933.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1237 = sqrt(((_919 * _919) + (_920 * _920)) + (_921 * _921));
        float _1243 = (cbMatDynParam._m0[5u].x * _1237) + cbMatDynParam._m0[5u].y;
        float _4428 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1248 = (cbMatDynParam._m0[5u].z * _1237) + cbMatDynParam._m0[5u].w;
        float _4439 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) - _1244)) + _1244) < ((_935 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _949 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _951 = _949.w;
    float _969 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _972 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _975 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    vec4 _977 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _979 = _977.x;
    float _991 = (((_977.y - _717) + (_977.w * _717)) * cbMtdParam._m0[3u].x) + _717;
    vec4 _992 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1008 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_979 * _979)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _992.z;
    float _1016 = (((cbMatDynParam._m0[15u].x - _721) * cbMatDynParam._m0[15u].w) * _1008) + _721;
    float _1024 = ((_1008 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _991)) + _991;
    uint _1048 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1049 = _1048 + 9u;
    uint _1050 = _1049 + uint(cbMatDynParam._m0[0u].w);
    float _1056 = (cbMtdParam._m0[0u].x * _729) * cbInstanceData._m0[_1050].x;
    float _1057 = (cbMtdParam._m0[0u].y * _730) * cbInstanceData._m0[_1050].y;
    float _1058 = (cbMtdParam._m0[0u].z * _731) * cbInstanceData._m0[_1050].z;
    float _4450 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _4461 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _4472 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    vec4 _1062 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1067 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1078 = (((_1067.x - _1016) + (_1067.w * _1016)) * cbMtdParam._m0[3u].x) + _1016;
    float _1091 = (cbMtdParam._m0[3u].x * (((_1059 * _951) - _1059) + _1062.x)) + _1059;
    float _1092 = (cbMtdParam._m0[3u].x * (((_1060 * _951) - _1060) + _1062.y)) + _1060;
    float _1093 = (cbMtdParam._m0[3u].x * (((_1061 * _951) - _1061) + _1062.z)) + _1061;
    vec4 _1094 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1107 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_1016 * (_729 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1016 * (_730 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1016 * (_731 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _1094.z;
    float _1111 = _1107 * cbMatDynParam._m0[13u].w;
    float _1121 = (_1111 * (cbMatDynParam._m0[13u].x - _1091)) + _1091;
    float _1122 = (_1111 * (cbMatDynParam._m0[13u].y - _1092)) + _1092;
    float _1123 = (_1111 * (cbMatDynParam._m0[13u].z - _1093)) + _1093;
    float _1131 = ((_1107 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1078)) + _1078;
    float _1132 = 1.0 - _1131;
    float _1133 = _1132 * _1121;
    float _1134 = _1132 * _1122;
    float _1135 = _1132 * _1123;
    float _1139 = (_1121 + (-0.039999999105930328369140625)) * _1131;
    float _1140 = (_1122 + (-0.039999999105930328369140625)) * _1131;
    float _1141 = (_1123 + (-0.039999999105930328369140625)) * _1131;
    float _1142 = _1139 + 0.039999999105930328369140625;
    float _1143 = _1140 + 0.039999999105930328369140625;
    float _1144 = _1141 + 0.039999999105930328369140625;
    vec4 _1153 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1156 = _1153.x * TEXCOORD_4;
    float _1157 = dot(vec3(_713, _714, _715), vec3(_926, _927, _928));
    float _1160 = _1157 * 2.0;
    float _1164 = (_1160 * _713) - _926;
    float _1165 = (_1160 * _714) - _927;
    float _1166 = (_1160 * _715) - _928;
    float _1170 = abs(dot(vec3(_926, _927, _928), vec3(_713, _714, _715)));
    float _4483 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1172 = sqrt(_1024);
    float _1183 = exp2((_1172 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1172 * 3.0));
    float _1189 = (1.0 - _1183) * ((_1172 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1190 = _1183 * _1172;
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1555;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1282 = fma(_1226, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218));
        float _1286 = fma(_1226, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218));
        float _1290 = fma(_1226, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218));
        float _1313 = _1218 + _713;
        float _1314 = _1222 + _714;
        float _1315 = _1226 + _715;
        float _1325 = fma(_1315, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1282 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1286 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[34u].z) + ((((((_1290 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1383 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1349.x + (-0.5));
        float _1385 = _1383 * (_1349.y + (-0.5));
        float _1386 = _1383 * (_1349.z + (-0.5));
        float _1393 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1356.x + (-0.5));
        float _1395 = _1393 * (_1356.y + (-0.5));
        float _1396 = _1393 * (_1356.z + (-0.5));
        float _1403 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1363.x + (-0.5));
        float _1405 = _1403 * (_1363.y + (-0.5));
        float _1406 = _1403 * (_1363.z + (-0.5));
        float _1413 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1370.x + (-0.5));
        float _1415 = _1413 * (_1370.y + (-0.5));
        float _1416 = _1413 * (_1370.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1437 = (dot(vec3(_713, _714, _715), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1447 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4531 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1449 + 1.0))) + _1454) * _1417;
        float _1464 = _1385 * 0.5;
        float _1465 = _1395 * 0.5;
        float _1466 = _1405 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_713, _714, _715), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4542 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4553 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4564 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_1491 + 1.0))) + _1496) * _1418;
        float _1506 = _1386 * 0.5;
        float _1507 = _1396 * 0.5;
        float _1508 = _1406 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_713, _714, _715), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4575 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4586 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4597 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_1533 + 1.0))) + _1538) * _1419;
        _1555 = _1386;
        _1557 = _1385;
        _1558 = _1384;
        _1559 = _1396;
        _1560 = _1395;
        _1561 = _1394;
        _1562 = _1406;
        _1563 = _1405;
        _1564 = _1404;
        _1565 = _1419;
        _1566 = _1418;
        _1567 = _1417;
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1556;
        _1557 = _1556;
        _1558 = _1556;
        _1559 = _1556;
        _1560 = _1556;
        _1561 = _1556;
        _1562 = _1556;
        _1563 = _1556;
        _1564 = _1556;
        _1565 = _1556;
        _1566 = _1556;
        _1567 = _1556;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1599 = fma(_1226, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218));
        float _1603 = fma(_1226, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218));
        float _1607 = fma(_1226, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218));
        float _1630 = _1218 + _713;
        float _1631 = _1222 + _714;
        float _1632 = _1226 + _715;
        float _1642 = fma(_1632, cbModelParam._m0[30u].z, fma(_1631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1630)) - _1599;
        float _1643 = fma(_1632, cbModelParam._m0[31u].z, fma(_1631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1630)) - _1603;
        float _1644 = fma(_1632, cbModelParam._m0[32u].z, fma(_1631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1630)) - _1607;
        float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
        float _1661 = ((_1648 * _1642) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1599 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1648 * _1643) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1603 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1648 * _1644) / cbModelParam._m0[35u].z) + ((((((_1607 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1661, _1662, _1663), 0.0);
        float _1698 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1665.x + (-0.5));
        float _1700 = _1698 * (_1665.y + (-0.5));
        float _1701 = _1698 * (_1665.z + (-0.5));
        float _1708 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1672.x + (-0.5));
        float _1710 = _1708 * (_1672.y + (-0.5));
        float _1711 = _1708 * (_1672.z + (-0.5));
        float _1718 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1679.x + (-0.5));
        float _1720 = _1718 * (_1679.y + (-0.5));
        float _1721 = _1718 * (_1679.z + (-0.5));
        float _1728 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1686.x + (-0.5));
        float _1730 = _1728 * (_1686.y + (-0.5));
        float _1731 = _1728 * (_1686.z + (-0.5));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = _1699 * 0.5;
        float _1736 = _1709 * 0.5;
        float _1737 = _1719 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_713, _714, _715), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4638 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4649 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4660 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_1762 + 1.0))) + _1767) * _1732;
        float _1777 = _1700 * 0.5;
        float _1778 = _1710 * 0.5;
        float _1779 = _1720 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_713, _714, _715), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4671 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4682 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4693 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_1804 + 1.0))) + _1809) * _1733;
        float _1819 = _1701 * 0.5;
        float _1820 = _1711 * 0.5;
        float _1821 = _1721 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_713, _714, _715), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4704 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4715 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4726 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_1846 + 1.0))) + _1851) * _1734;
        _1868 = _1701;
        _1869 = _1700;
        _1870 = _1699;
        _1871 = _1711;
        _1872 = _1710;
        _1873 = _1709;
        _1874 = _1721;
        _1875 = _1720;
        _1876 = _1719;
        _1877 = _1734;
        _1878 = _1733;
        _1879 = _1732;
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
    }
    else
    {
        _1868 = _1556;
        _1869 = _1556;
        _1870 = _1556;
        _1871 = _1556;
        _1872 = _1556;
        _1873 = _1556;
        _1874 = _1556;
        _1875 = _1556;
        _1876 = _1556;
        _1877 = _1556;
        _1878 = _1556;
        _1879 = _1556;
        _1880 = 0.0;
        _1881 = 0.0;
        _1882 = 0.0;
    }
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1568)) + _1568;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1569)) + _1569;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1570)) + _1570;
    float _1915 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1892));
    float _1936 = _1164 * 0.5;
    float _1937 = _1165 * 0.5;
    float _1938 = _1166 * 0.5;
    float _1939 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1942 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1945 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1976;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1952 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1555, _1559, _1562, _1565));
        float _1956 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1960 = dot(vec4(_1936, _1937, _1938, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1967 = dot(vec4(cbModelParam._m0[39u]), vec4(_1936, _1937, _1938, 1.0));
        _1976 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1967) ? 0.0 : (isnan(0.0) ? _1967 : max(0.0, _1967))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1976 = 1.0;
    }
    float _1987;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1978 = dot(vec4(cbModelParam._m0[40u]), vec4(_1936, _1937, _1938, 1.0));
        _1987 = dot(vec3(isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1978) ? 0.0 : (isnan(0.0) ? _1978 : max(0.0, _1978))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1987 = 1.0;
    }
    float _1991 = (_1987 * cbModelParam._m0[1u].x) + (_1976 * (1.0 - cbModelParam._m0[1u].x));
    float _2001 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1024);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2001 : min(cbModelParam._m0[25u].z, _2001));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2049 = fma(_1226, cbModelParam._m0[13u].z, fma(_1222, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218)) + cbModelParam._m0[13u].w;
        float _2053 = fma(_1226, cbModelParam._m0[14u].z, fma(_1222, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218)) + cbModelParam._m0[14u].w;
        float _2057 = fma(_1226, cbModelParam._m0[15u].z, fma(_1222, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218)) + cbModelParam._m0[15u].w;
        float _2060 = fma(_1166, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164));
        float _2063 = fma(_1166, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164));
        float _2066 = fma(_1166, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164));
        float _2094;
        if (_2060 > 0.0)
        {
            _2094 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2094 = frontier_phi_19_17_ladder;
        }
        float _2267;
        if (_2063 > 0.0)
        {
            _2267 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2267 = frontier_phi_28_24_ladder;
        }
        float _2562;
        if (_2066 > 0.0)
        {
            _2562 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2562 = frontier_phi_40_35_ladder;
        }
        float _2564 = isnan(_2267) ? _2094 : (isnan(_2094) ? _2267 : min(_2094, _2267));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _2060) + _2049;
        float _2570 = (_2565 * _2063) + _2053;
        float _2571 = (_2565 * _2066) + _2057;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2572;
        float _2576 = _2572 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 > _2576) || ((_2570 < _2574) || ((_2569 < _2574) || (_2569 > _2576))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2571, cbModelParam._m0[9u].z, fma(_2570, cbModelParam._m0[9u].y, _2569 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2571, cbModelParam._m0[10u].z, fma(_2570, cbModelParam._m0[10u].y, _2569 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2571, cbModelParam._m0[11u].z, fma(_2570, cbModelParam._m0[11u].y, _2569 * cbModelParam._m0[11u].x))), _2002);
            frontier_phi_18_40_ladder = _2716.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2716.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2716.x * cbModelParam._m0[1u].y;
        }
        _2082 = frontier_phi_18_40_ladder_2;
        _2084 = frontier_phi_18_40_ladder_1;
        _2086 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1164, _1165, _1166), _2002);
        _2082 = _2070.x * cbModelParam._m0[1u].y;
        _2084 = _2070.y * cbModelParam._m0[1u].y;
        _2086 = _2070.z * cbModelParam._m0[1u].y;
    }
    float _2090 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1024);
    float _2091 = isnan(_2090) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2090 : min(cbModelParam._m0[25u].w, _2090));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1226, cbModelParam._m0[21u].z, fma(_1222, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1226, cbModelParam._m0[22u].z, fma(_1222, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1226, cbModelParam._m0[23u].z, fma(_1222, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1166, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164));
        float _2160 = fma(_1166, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164));
        float _2163 = fma(_1166, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164));
        float _2272;
        if (_2157 > 0.0)
        {
            _2272 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2272 = frontier_phi_30_26_ladder;
        }
        float _2589;
        if (_2160 > 0.0)
        {
            _2589 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2589 = frontier_phi_42_37_ladder;
        }
        float _2927;
        if (_2163 > 0.0)
        {
            _2927 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2927 = frontier_phi_52_49_ladder;
        }
        float _2929 = isnan(_2589) ? _2272 : (isnan(_2272) ? _2589 : min(_2272, _2589));
        float _2930 = isnan(_2927) ? _2929 : (isnan(_2929) ? _2927 : min(_2929, _2927));
        float _2934 = (_2930 * _2157) + _2146;
        float _2935 = (_2930 * _2160) + _2150;
        float _2936 = (_2930 * _2163) + _2154;
        float _2937 = _2930 * 9.9999997473787516355514526367188e-05;
        float _2938 = (-1.0) - _2937;
        float _2940 = _2937 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2936 > _2940) || ((_2936 < _2938) || ((_2935 > _2940) || ((_2935 < _2938) || ((_2934 < _2938) || (_2934 > _2940))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2936, cbModelParam._m0[17u].z, fma(_2935, cbModelParam._m0[17u].y, _2934 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2936, cbModelParam._m0[18u].z, fma(_2935, cbModelParam._m0[18u].y, _2934 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2936, cbModelParam._m0[19u].z, fma(_2935, cbModelParam._m0[19u].y, _2934 * cbModelParam._m0[19u].x))), _2091);
            frontier_phi_27_52_ladder = _3058.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3058.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3058.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_27_52_ladder_2;
        _2184 = frontier_phi_27_52_ladder_1;
        _2186 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1164, _1165, _1166), _2091);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1189 * _1142) + _1190) * _1156) * ((cbModelParam._m0[1u].w * (_2182 - _2082)) + _2082);
    float _2201 = (((_1189 * _1143) + _1190) * _1156) * ((cbModelParam._m0[1u].w * (_2184 - _2084)) + _2084);
    float _2203 = (((_1189 * _1144) + _1190) * _1156) * ((cbModelParam._m0[1u].w * (_2186 - _2086)) + _2086);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    float _2246 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2259 = _2246 / _2258;
    float _2260 = _2250 / _2258;
    float _2261 = _2254 / _2258;
    float _2408;
    float _2409;
    float _2410;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2288 = ((uint(_2261 > cbSceneParam._m0[59u].y) + uint(_2261 > cbSceneParam._m0[59u].x)) + uint(_2261 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2289 = _2288 + 43u;
        uint _2297 = _2288 + 44u;
        uint _2305 = _2288 + 45u;
        uint _2313 = _2288 + 46u;
        float _2324 = fma(_2258, cbSceneParam._m0[_2289].w, fma(_2254, cbSceneParam._m0[_2289].z, fma(_2250, cbSceneParam._m0[_2289].y, _2246 * cbSceneParam._m0[_2289].x)));
        float _2328 = fma(_2258, cbSceneParam._m0[_2297].w, fma(_2254, cbSceneParam._m0[_2297].z, fma(_2250, cbSceneParam._m0[_2297].y, _2246 * cbSceneParam._m0[_2297].x)));
        float _2336 = fma(_2258, cbSceneParam._m0[_2313].w, fma(_2254, cbSceneParam._m0[_2313].z, fma(_2250, cbSceneParam._m0[_2313].y, _2246 * cbSceneParam._m0[_2313].x)));
        float _2341 = cbSceneParam._m0[33u].z * _2336;
        float _2343 = cbSceneParam._m0[33u].w * _2336;
        float _2346 = fma(_2258, cbSceneParam._m0[_2305].w, fma(_2254, cbSceneParam._m0[_2305].z, fma(_2250, cbSceneParam._m0[_2305].y, _2246 * cbSceneParam._m0[_2305].x))) / _2336;
        float _2394 = (cbSceneParam._m0[33u].x - sqrt(((_2260 * _2260) + (_2259 * _2259)) + (_2261 * _2261))) * cbSceneParam._m0[33u].y;
        float _4852 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2401 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 + _2324) / _2336, (_2343 + _2328) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 + _2324) / _2336, (_2328 - _2341) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 - _2341) / _2336, (_2328 - _2343) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 - _2343) / _2336, (_2341 + _2328) / _2336), _2346), 0.0)).x), vec4(0.25)));
        _2408 = 1.0 - (_2401 * cbSceneParam._m0[34u].x);
        _2409 = 1.0 - (_2401 * cbSceneParam._m0[34u].y);
        _2410 = 1.0 - (_2401 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2408 = 1.0;
        _2409 = 1.0;
        _2410 = 1.0;
    }
    float _2474;
    float _2476;
    float _2478;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2462 = fma(_2258, cbSceneParam._m0[63u].w, fma(_2254, cbSceneParam._m0[63u].z, fma(_2250, cbSceneParam._m0[63u].y, _2246 * cbSceneParam._m0[63u].x)));
        float _2463 = fma(_2258, cbSceneParam._m0[60u].w, fma(_2254, cbSceneParam._m0[60u].z, fma(_2250, cbSceneParam._m0[60u].y, _2246 * cbSceneParam._m0[60u].x))) / _2462;
        float _2464 = fma(_2258, cbSceneParam._m0[61u].w, fma(_2254, cbSceneParam._m0[61u].z, fma(_2250, cbSceneParam._m0[61u].y, _2246 * cbSceneParam._m0[61u].x))) / _2462;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2463 >= cbSceneParam._m0[64u].x) && (_2464 >= cbSceneParam._m0[64u].y)) && (_2463 <= cbSceneParam._m0[64u].z)) && (_2464 <= cbSceneParam._m0[64u].w))
        {
            float _2602 = fma(_2258, cbSceneParam._m0[62u].w, fma(_2254, cbSceneParam._m0[62u].z, fma(_2250, cbSceneParam._m0[62u].y, _2246 * cbSceneParam._m0[62u].x))) / _2462;
            float _2606 = isnan(cbSceneParam._m0[41u].w) ? _2602 : (isnan(_2602) ? cbSceneParam._m0[41u].w : max(_2602, cbSceneParam._m0[41u].w));
            float _2649 = (cbSceneParam._m0[33u].x - sqrt(((_2260 * _2260) + (_2259 * _2259)) + (_2261 * _2261))) * cbSceneParam._m0[33u].y;
            float _4868 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
            float _2656 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2463, cbSceneParam._m0[33u].w + _2464), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2463, _2464 - cbSceneParam._m0[33u].z), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2463 - cbSceneParam._m0[33u].z, _2464 - cbSceneParam._m0[33u].w), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2463 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2464), _2606), 0.0)).x), vec4(0.25)));
            float _2660 = 1.0 - (_2656 * cbSceneParam._m0[34u].x);
            float _2661 = 1.0 - (_2656 * cbSceneParam._m0[34u].y);
            float _2662 = 1.0 - (_2656 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2661) ? _2409 : (isnan(_2409) ? _2661 : min(_2409, _2661));
            frontier_phi_39_38_ladder_1 = isnan(_2660) ? _2408 : (isnan(_2408) ? _2660 : min(_2408, _2660));
            frontier_phi_39_38_ladder_2 = isnan(_2662) ? _2410 : (isnan(_2410) ? _2662 : min(_2410, _2662));
        }
        else
        {
            frontier_phi_39_38_ladder = _2409;
            frontier_phi_39_38_ladder_1 = _2408;
            frontier_phi_39_38_ladder_2 = _2410;
        }
        _2474 = frontier_phi_39_38_ladder_1;
        _2476 = frontier_phi_39_38_ladder;
        _2478 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2474 = _2408;
        _2476 = _2409;
        _2478 = _2410;
    }
    uvec4 _2483 = floatBitsToUint(cbInstanceData._m0[_1048 + 5u]);
    uint _2485 = _2483.x * 14u;
    uint _2486 = _2485 + 13u;
    float _2493 = _1156 + (-1.0);
    float _2498 = (cbLight._m0[_2486].x * _2493) + 1.0;
    float _2499 = (cbLight._m0[_2486].y * _2493) + 1.0;
    float _2500 = (cbLight._m0[_2486].z * _2493) + 1.0;
    float _2501 = (cbLight._m0[_2486].w * _2493) + 1.0;
    uint _2502 = _2485 + 5u;
    float _2508 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
    uint _2512 = _2485 + 4u;
    float _2521 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
    uint _2525 = _2485 | 1u;
    float _2536 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_713, _714, _715));
    float _2539 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_713, _714, _715));
    float _4904 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _4915 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2544 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * 0.3183098733425140380859375;
    float _2546 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * 0.3183098733425140380859375;
    float _2553 = ((cbLight._m0[_2502].x * _2508) * _2546) + (((cbLight._m0[_2512].x * _2474) * _2521) * _2544);
    float _2554 = ((_2508 * cbLight._m0[_2502].y) * _2546) + (((cbLight._m0[_2512].y * _2476) * _2521) * _2544);
    float _2555 = ((_2508 * cbLight._m0[_2502].z) * _2546) + (((cbLight._m0[_2512].z * _2478) * _2521) * _2544);
    uvec4 _2559 = floatBitsToUint(cbLight._m0[_2485 + 12u]);
    bool _2561 = _2559.x == 0u;
    float _2663;
    float _2665;
    float _2667;
    if (_2561)
    {
        _2663 = _2553;
        _2665 = _2554;
        _2667 = _2555;
    }
    else
    {
        uint _2671 = _2485 + 6u;
        float _2687 = (dot(vec3(cbLight._m0[_2485 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4926 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _2690 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _2663 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2553;
        _2665 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2554;
        _2667 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2555;
    }
    bool _2670 = _2559.y == 0u;
    float _2725;
    float _2727;
    float _2729;
    if (_2670)
    {
        _2725 = _2663;
        _2727 = _2665;
        _2729 = _2667;
    }
    else
    {
        uint _2898 = _2485 + 7u;
        float _2914 = (dot(vec3(cbLight._m0[_2485 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2915 = _2914 * _2914;
        float _4942 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2916 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2917 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
        _2725 = (((cbLight._m0[_2898].x * 0.3183098733425140380859375) * _2916) * _2917) + _2663;
        _2727 = (((cbLight._m0[_2898].y * 0.3183098733425140380859375) * _2916) * _2917) + _2665;
        _2729 = (((cbLight._m0[_2898].z * 0.3183098733425140380859375) * _2916) * _2917) + _2667;
    }
    uint _2732 = _2485 + 8u;
    float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _1024) * 0.949999988079071044921875);
    float _2746 = _2745 * _2745;
    float _2747 = cbLight._m0[_2485].x + _926;
    float _2748 = cbLight._m0[_2485].y + _927;
    float _2749 = cbLight._m0[_2485].z + _928;
    float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
    float _2754 = _2753 * _2747;
    float _2755 = _2753 * _2748;
    float _2756 = _2753 * _2749;
    float _2757 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2485].xyz));
    float _4958 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2760 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
    float _4969 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _2761 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
    float _2762 = dot(vec3(_713, _714, _715), vec3(_2754, _2755, _2756));
    float _4980 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
    float _2766 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2754, _2755, _2756));
    float _4991 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2770 = _2746 * _2746;
    float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
    float _2782 = exp2(log2(1.0 - (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) * 5.0);
    float _2783 = 0.959999978542327880859375 - _1139;
    float _2785 = 0.959999978542327880859375 - _1140;
    float _2786 = 0.959999978542327880859375 - _1141;
    float _2793 = 1.0 - _2746;
    float _2804 = (0.5 / (((_2761 * ((_2760 * _2793) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2793) + _2746) * _2760))) * _2760;
    float _5002 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2806 = (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
    uint _2820 = _2485 + 9u;
    float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _1024) * 0.949999988079071044921875);
    float _2832 = _2831 * _2831;
    float _2833 = cbLight._m0[_2525].x + _926;
    float _2834 = cbLight._m0[_2525].y + _927;
    float _2835 = cbLight._m0[_2525].z + _928;
    float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
    float _2840 = _2839 * _2833;
    float _2841 = _2839 * _2834;
    float _2842 = _2839 * _2835;
    float _2843 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2525].xyz));
    float _5013 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2846 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
    float _2847 = dot(vec3(_713, _714, _715), vec3(_2840, _2841, _2842));
    float _5024 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
    float _2851 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2840, _2841, _2842));
    float _5035 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2855 = _2832 * _2832;
    float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
    float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) * 5.0);
    float _2873 = 1.0 - _2832;
    float _2883 = (0.5 / (((_2761 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2873) + _2832) * _2846))) * _2846;
    float _5046 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2885 = (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
    float _2895 = (((((_2866 * _2783) + _1142) * cbLight._m0[_2820].x) * _2885) * _2508) + ((((cbLight._m0[_2732].x * _2474) * ((_2782 * _2783) + _1142)) * _2806) * _2521);
    float _2896 = (((((_2866 * _2785) + _1143) * cbLight._m0[_2820].y) * _2885) * _2508) + ((((cbLight._m0[_2732].y * _2476) * ((_2782 * _2785) + _1143)) * _2806) * _2521);
    float _2897 = (((((_2866 * _2786) + _1144) * cbLight._m0[_2820].z) * _2885) * _2508) + ((((cbLight._m0[_2732].z * _2478) * ((_2782 * _2786) + _1144)) * _2806) * _2521);
    float _2953;
    float _2955;
    float _2957;
    if (_2561)
    {
        _2953 = _2895;
        _2955 = _2896;
        _2957 = _2897;
    }
    else
    {
        uint _2959 = _2485 + 2u;
        uint _2963 = _2485 + 10u;
        float _2977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2959].w)) * _1024) * 0.949999988079071044921875);
        float _2978 = _2977 * _2977;
        float _2979 = cbLight._m0[_2959].x + _926;
        float _2980 = cbLight._m0[_2959].y + _927;
        float _2981 = cbLight._m0[_2959].z + _928;
        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
        float _2986 = _2985 * _2979;
        float _2987 = _2985 * _2980;
        float _2988 = _2985 * _2981;
        float _2989 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2959].xyz));
        float _5057 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
        float _2993 = dot(vec3(_713, _714, _715), vec3(_2986, _2987, _2988));
        float _5068 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
        float _2997 = dot(vec3(cbLight._m0[_2959].xyz), vec3(_2986, _2987, _2988));
        float _5079 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3001 = _2978 * _2978;
        float _3005 = ((_2996 * _2996) * (_3001 + (-1.0))) + 1.0;
        float _3012 = exp2(log2(1.0 - (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) * 5.0);
        float _3019 = 1.0 - _2978;
        float _3029 = (0.5 / (((_2761 * ((_2992 * _3019) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _3019) + _2978) * _2992))) * _2992;
        float _5090 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3031 = (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3001 / ((_3005 * _3005) * 3.141590118408203125));
        float _3032 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _2953 = (((((_3012 * _2783) + _1142) * cbLight._m0[_2963].x) * _3031) * _3032) + _2895;
        _2955 = (((((_3012 * _2785) + _1143) * cbLight._m0[_2963].y) * _3031) * _3032) + _2896;
        _2957 = (((((_3012 * _2786) + _1144) * cbLight._m0[_2963].z) * _3031) * _3032) + _2897;
    }
    float _3063;
    float _3065;
    float _3067;
    if (_2670)
    {
        _3063 = _2953;
        _3065 = _2955;
        _3067 = _2957;
    }
    else
    {
        uint _3074 = _2485 + 3u;
        uint _3078 = _2485 + 11u;
        float _3092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3074].w)) * _1024) * 0.949999988079071044921875);
        float _3093 = _3092 * _3092;
        float _3094 = cbLight._m0[_3074].x + _926;
        float _3095 = cbLight._m0[_3074].y + _927;
        float _3096 = cbLight._m0[_3074].z + _928;
        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
        float _3101 = _3100 * _3094;
        float _3102 = _3100 * _3095;
        float _3103 = _3100 * _3096;
        float _3104 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_3074].xyz));
        float _5106 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3107 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
        float _3108 = dot(vec3(_713, _714, _715), vec3(_3101, _3102, _3103));
        float _5117 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3111 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
        float _3112 = dot(vec3(cbLight._m0[_3074].xyz), vec3(_3101, _3102, _3103));
        float _5128 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3116 = _3093 * _3093;
        float _3120 = ((_3111 * _3111) * (_3116 + (-1.0))) + 1.0;
        float _3127 = exp2(log2(1.0 - (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0)))) * 5.0);
        float _3134 = 1.0 - _3093;
        float _3144 = (0.5 / (((_2761 * ((_3107 * _3134) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _3134) + _3093) * _3107))) * _3107;
        float _5139 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        float _3146 = (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3116 / ((_3120 * _3120) * 3.141590118408203125));
        float _3147 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
        _3063 = (((((_3127 * _2783) + _1142) * cbLight._m0[_3078].x) * _3146) * _3147) + _2953;
        _3065 = (((((_3127 * _2785) + _1143) * cbLight._m0[_3078].y) * _3146) * _3147) + _2955;
        _3067 = (((((_3127 * _2786) + _1144) * cbLight._m0[_3078].z) * _3146) * _3147) + _2957;
    }
    float _3212;
    float _3214;
    float _3216;
    float _3218;
    float _3220;
    float _3222;
    if (_2483.y == 0u)
    {
        uvec4 _3168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3169 = _3168.x;
        uint _3180 = uint((float(_3168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _3169))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _3169)));
        float _3190 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3191 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
        uint _3194 = uint(isnan(14.0) ? _3191 : (isnan(_3191) ? 14.0 : min(_3191, 14.0)));
        uvec4 _3199 = texelFetch(g_lightClusterGridBuffer, int(((_3194 << 2u) + (_3180 << 6u)) >> 2u));
        uint _3200 = _3199.x;
        uint _3201 = _3168.z;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        if (((((1u << ((_3201 >> 4u) & 15u)) + 4294967295u) & _3200) == 0u) || ((_3201 & 240u) == 0u))
        {
            _3315 = 0.0;
            _3317 = 0.0;
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
        }
        else
        {
            float _3316;
            float _3318;
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            float _3481 = 0.0;
            uint _3482 = 0u;
            uint _3491;
            bool _3492;
            for (;;)
            {
                _3491 = texelFetch(g_lightClassification, int((((_3194 << 5u) + (_3180 << 9u)) + (_3482 << 2u)) >> 2u)).x;
                _3492 = _3491 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3492)
                {
                    frontier_phi_73_pred = _3481;
                    frontier_phi_73_pred_1 = _3480;
                    frontier_phi_73_pred_2 = _3479;
                    frontier_phi_73_pred_3 = _3478;
                    frontier_phi_73_pred_4 = _3477;
                    frontier_phi_73_pred_5 = _3476;
                }
                else
                {
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    float _3626;
                    uint _3627;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3481;
                    _3627 = _3491;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    float _3553;
                    for (;;)
                    {
                        uint _3631 = uint(findLSB(_3627)) + (_3482 << 5u);
                        uint _3628 = (_3627 + 4294967295u) & _3627;
                        uint _3633 = _3631 * 48u;
                        vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3633)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 3u)).x));
                        uint _3653 = (_3631 * 48u) + 4u;
                        vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3653)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 3u)).x));
                        uint _3672 = (_3631 * 48u) + 8u;
                        vec3 _3683 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3672)).x, texelFetch(g_PointLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3672 + 2u)).x));
                        float _3687 = _3647.x - _2259;
                        float _3688 = _3647.y - _2260;
                        float _3689 = _3647.z - _2261;
                        float _3690 = dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689));
                        float _3693 = inversesqrt(_3690);
                        float _3694 = _3693 * _3687;
                        float _3695 = _3693 * _3688;
                        float _3696 = _3693 * _3689;
                        float _3697 = dot(vec3(_969, _972, _975), vec3(_3694, _3695, _3696));
                        float _3702 = 1.0 - (_3690 * _3647.w);
                        float _5165 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                        float _3703 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                        float _3704 = sqrt(_3690) * _3666.w;
                        float _3707 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                        float _3708 = _3707 * _3707;
                        float _3711 = ((1.0 - _3708) * _3697) + _3708;
                        float _3714 = _3704 * _3704;
                        float _3717 = ((isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0))) * _3703) / ((_3714 * 0.699999988079071044921875) + 1.0);
                        float _3721 = (-0.0) - _2259;
                        float _3722 = (-0.0) - _2260;
                        float _3723 = (-0.0) - _2261;
                        float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                        float _3728 = _3727 * _3721;
                        float _3729 = _3727 * _3722;
                        float _3730 = _3727 * _3723;
                        float _3737 = exp2(log2(1.0 / ((_3714 * 3.5) + 5.0)) * 0.25);
                        float _3738 = 1.0 - _1172;
                        float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                        float _3746 = _3745 * _3745;
                        float _3747 = _3746 * _3746;
                        float _3748 = _3728 + _3694;
                        float _3749 = _3729 + _3695;
                        float _3750 = _3730 + _3696;
                        float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                        float _3758 = dot(vec3(_969, _972, _975), vec3(_3728, _3729, _3730));
                        float _5181 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                        float _3761 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                        float _3762 = dot(vec3(_969, _972, _975), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                        float _5192 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3765 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                        float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                        float _3770 = _3707 * _3746;
                        float _3771 = _3770 * _3770;
                        float _3774 = ((1.0 - _3771) * _3697) + _3771;
                        float _5203 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                        float _3775 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                        float _3776 = 1.0 - _3746;
                        float _3786 = (0.5 / (((_3775 * ((_3761 * _3776) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3775 * _3776) + _3746) * _3761))) * _3775;
                        float _5214 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                        float _3797 = (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0)))) / ((_3769 * _3769) * ((_3714 * 2.1991131305694580078125) + 3.141590118408203125))) * _3703;
                        _3551 = (_3717 * _3666.x) + _3624;
                        _3552 = (_3717 * _3666.y) + _3625;
                        _3553 = (_3717 * _3666.z) + _3626;
                        _3548 = (_3797 * _3683.x) + _3621;
                        _3549 = (_3797 * _3683.y) + _3622;
                        _3550 = (_3797 * _3683.z) + _3623;
                        if (_3628 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3553;
                            _3627 = _3628;
                        }
                    }
                    frontier_phi_73_pred = _3553;
                    frontier_phi_73_pred_1 = _3552;
                    frontier_phi_73_pred_2 = _3551;
                    frontier_phi_73_pred_3 = _3550;
                    frontier_phi_73_pred_4 = _3549;
                    frontier_phi_73_pred_5 = _3548;
                }
                _3326 = frontier_phi_73_pred;
                _3324 = frontier_phi_73_pred_1;
                _3322 = frontier_phi_73_pred_2;
                _3320 = frontier_phi_73_pred_3;
                _3318 = frontier_phi_73_pred_4;
                _3316 = frontier_phi_73_pred_5;
                uint _3483 = _3482 + 1u;
                if (_3483 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3476 = _3316;
                    _3477 = _3318;
                    _3478 = _3320;
                    _3479 = _3322;
                    _3480 = _3324;
                    _3481 = _3326;
                    _3482 = _3483;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3315 = _3316;
            _3317 = _3318;
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
        }
        uvec4 _3329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3330 = _3329.z;
        uint _3332 = (_3330 >> 8u) & 15u;
        float _3444;
        float _3446;
        float _3448;
        float _3450;
        float _3452;
        float _3454;
        if (((4294967295u << _3332) & _3200) == 0u)
        {
            _3444 = _3315;
            _3446 = _3317;
            _3448 = _3319;
            _3450 = _3321;
            _3452 = _3323;
            _3454 = _3325;
        }
        else
        {
            float _3469 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _3470 = _3469 * _2259;
            float _3471 = _3469 * _2260;
            float _3472 = _3469 * _2261;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3332 < ((_3330 >> 12u) & 15u))
            {
                float _3445;
                float _3447;
                float _3449;
                float _3451;
                float _3453;
                float _3455;
                float _3604 = _3315;
                float _3605 = _3317;
                float _3606 = _3319;
                float _3607 = _3321;
                float _3608 = _3323;
                float _3609 = _3325;
                uint _3610 = _3332;
                uint _3619;
                bool _3620;
                for (;;)
                {
                    _3619 = texelFetch(g_lightClassification, int((((_3194 << 5u) + (_3180 << 9u)) + (_3610 << 2u)) >> 2u)).x;
                    _3620 = _3619 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3620)
                    {
                        frontier_phi_84_pred = _3608;
                        frontier_phi_84_pred_1 = _3607;
                        frontier_phi_84_pred_2 = _3606;
                        frontier_phi_84_pred_3 = _3605;
                        frontier_phi_84_pred_4 = _3604;
                        frontier_phi_84_pred_5 = _3609;
                    }
                    else
                    {
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _4109;
                        float _4110;
                        float _4111;
                        float _3824 = _3604;
                        float _3825 = _3605;
                        float _3826 = _3606;
                        float _3827 = _3607;
                        float _3828 = _3608;
                        float _3829 = _3609;
                        uint _3830 = _3619;
                        uint _3831;
                        vec4 _3856;
                        float _3857;
                        vec4 _3872;
                        vec3 _3884;
                        vec4 _3899;
                        vec4 _3915;
                        float _3962;
                        bool _3963;
                        for (;;)
                        {
                            uint _3841 = ((_3610 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3830));
                            _3831 = (_3830 + 4294967295u) & _3830;
                            uint _3843 = _3841 * 40u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3857 = _3856.w;
                            uint _3859 = (_3841 * 40u) + 4u;
                            _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            uint _3874 = (_3841 * 40u) + 8u;
                            _3884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x));
                            uint _3886 = (_3841 * 40u) + 16u;
                            _3899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 3u)).x));
                            uint _3902 = (_3841 * 40u) + 20u;
                            _3915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 3u)).x));
                            uint _3918 = (_3841 * 40u) + 24u;
                            vec4 _3931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 3u)).x));
                            uint _3937 = (_3841 * 40u) + 28u;
                            vec4 _3950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 3u)).x));
                            _3962 = fma(_2261, _3950.z, fma(_2260, _3950.y, _3950.x * _2259)) + _3950.w;
                            _3963 = !((fma(_2261, _3931.z, fma(_2260, _3931.y, _3931.x * _2259)) + _3931.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3963)
                            {
                                float _3990 = _3856.x - _2259;
                                float _3991 = _3856.y - _2260;
                                float _3992 = _3856.z - _2261;
                                float _3993 = dot(vec3(_3990, _3991, _3992), vec3(_3990, _3991, _3992));
                                float _3996 = inversesqrt(_3993);
                                float _3997 = _3996 * _3990;
                                float _3998 = _3996 * _3991;
                                float _3999 = _3996 * _3992;
                                float _4003 = 1.0 - (_3993 / (_3857 * _3857));
                                float _5225 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4004 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                                float _4008 = sqrt(_3993) * _3872.w;
                                float _4010 = 1.39999997615814208984375 / (_4008 + 1.39999997615814208984375);
                                float _4011 = _4010 * _4010;
                                float _4014 = ((1.0 - _4011) * dot(vec3(_3997, _3998, _3999), vec3(_969, _972, _975))) + _4011;
                                float _4017 = _4008 * _4008;
                                float _4021 = (fma(_2261, _3899.z, fma(_2260, _3899.y, _3899.x * _2259)) + _3899.w) / _3962;
                                float _4022 = (fma(_2261, _3915.z, fma(_2260, _3915.y, _3915.x * _2259)) + _3915.w) / _3962;
                                float _4026 = 1.0 - dot(vec2(_4021, _4022), vec2(_4021, _4022));
                                float _5241 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4027 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                                float _4028 = _4027 * (((isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0))) * _4004) / ((_4017 * 0.699999988079071044921875) + 1.0));
                                float _4040 = exp2(log2(1.0 / ((_4017 * 3.5) + 5.0)) * 0.25);
                                float _4041 = 1.0 - _1172;
                                float _4048 = sqrt(1.0 - ((1.0 - (_4041 * _4041)) * (1.0 - (_4040 * _4040))));
                                float _4049 = _4048 * _4048;
                                float _4050 = _4049 * _4049;
                                float _4051 = _3997 - _3470;
                                float _4052 = _3998 - _3471;
                                float _4053 = _3999 - _3472;
                                float _4057 = inversesqrt(dot(vec3(_4051, _4052, _4053), vec3(_4051, _4052, _4053)));
                                float _4061 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3470, (-0.0) - _3471, (-0.0) - _3472));
                                float _5252 = isnan(0.0) ? _4061 : (isnan(_4061) ? 0.0 : max(_4061, 0.0));
                                float _4064 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                                float _4065 = dot(vec3(_969, _972, _975), vec3(_4057 * _4051, _4057 * _4052, _4057 * _4053));
                                float _5263 = isnan(0.0) ? _4065 : (isnan(_4065) ? 0.0 : max(_4065, 0.0));
                                float _4068 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                                float _4072 = ((_4068 * _4068) * (_4050 + (-1.0))) + 1.0;
                                float _4073 = _4010 * _4049;
                                float _4074 = _4073 * _4073;
                                float _4080 = ((1.0 - _4074) * dot(vec3(_969, _972, _975), vec3(_3997, _3998, _3999))) + _4074;
                                float _5274 = isnan(0.0) ? _4080 : (isnan(_4080) ? 0.0 : max(_4080, 0.0));
                                float _4081 = isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0));
                                float _4082 = 1.0 - _4049;
                                float _4092 = (0.5 / (((_4081 * ((_4064 * _4082) + _4049)) + 9.9999999392252902907785028219223e-09) + (((_4081 * _4082) + _4049) * _4064))) * _4081;
                                float _5285 = isnan(0.0) ? _4092 : (isnan(_4092) ? 0.0 : max(_4092, 0.0));
                                float _4102 = (_4027 * _4004) * (((_4050 * 3.1415927410125732421875) * (isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0)))) / ((_4072 * _4072) * ((_4017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4028 * _3872.y;
                                frontier_phi_90_pred_1 = _4028 * _3872.x;
                                frontier_phi_90_pred_2 = _4102 * _3884.z;
                                frontier_phi_90_pred_3 = _4102 * _3884.y;
                                frontier_phi_90_pred_4 = _4102 * _3884.x;
                                frontier_phi_90_pred_5 = _4028 * _3872.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4110 = frontier_phi_90_pred;
                            _4109 = frontier_phi_90_pred_1;
                            _4108 = frontier_phi_90_pred_2;
                            _4107 = frontier_phi_90_pred_3;
                            _4106 = frontier_phi_90_pred_4;
                            _4111 = frontier_phi_90_pred_5;
                            _3814 = _4109 + _3827;
                            _3815 = _4110 + _3828;
                            _3816 = _4111 + _3829;
                            _3811 = _4106 + _3824;
                            _3812 = _4107 + _3825;
                            _3813 = _4108 + _3826;
                            if (_3831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3831;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3815;
                        frontier_phi_84_pred_1 = _3814;
                        frontier_phi_84_pred_2 = _3813;
                        frontier_phi_84_pred_3 = _3812;
                        frontier_phi_84_pred_4 = _3811;
                        frontier_phi_84_pred_5 = _3816;
                    }
                    _3453 = frontier_phi_84_pred;
                    _3451 = frontier_phi_84_pred_1;
                    _3449 = frontier_phi_84_pred_2;
                    _3447 = frontier_phi_84_pred_3;
                    _3445 = frontier_phi_84_pred_4;
                    _3455 = frontier_phi_84_pred_5;
                    uint _3611 = _3610 + 1u;
                    if (_3611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3604 = _3445;
                        _3605 = _3447;
                        _3606 = _3449;
                        _3607 = _3451;
                        _3608 = _3453;
                        _3609 = _3455;
                        _3610 = _3611;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3455;
                frontier_phi_65_66_ladder_1 = _3451;
                frontier_phi_65_66_ladder_2 = _3453;
                frontier_phi_65_66_ladder_3 = _3447;
                frontier_phi_65_66_ladder_4 = _3445;
                frontier_phi_65_66_ladder_5 = _3449;
            }
            else
            {
                frontier_phi_65_66_ladder = _3325;
                frontier_phi_65_66_ladder_1 = _3321;
                frontier_phi_65_66_ladder_2 = _3323;
                frontier_phi_65_66_ladder_3 = _3317;
                frontier_phi_65_66_ladder_4 = _3315;
                frontier_phi_65_66_ladder_5 = _3319;
            }
            _3444 = frontier_phi_65_66_ladder_4;
            _3446 = frontier_phi_65_66_ladder_3;
            _3448 = frontier_phi_65_66_ladder_5;
            _3450 = frontier_phi_65_66_ladder_1;
            _3452 = frontier_phi_65_66_ladder_2;
            _3454 = frontier_phi_65_66_ladder;
        }
        float _3459 = isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0));
        _3212 = (_3459 * _3450) + _2725;
        _3214 = (_3459 * _3452) + _2727;
        _3216 = (_3459 * _3454) + _2729;
        _3218 = ((_3444 * _1142) * _3459) + _3063;
        _3220 = ((_3446 * _1143) * _3459) + _3065;
        _3222 = ((_3448 * _1144) * _3459) + _3067;
    }
    else
    {
        _3212 = _2725;
        _3214 = _2727;
        _3216 = _2729;
        _3218 = _3063;
        _3220 = _3065;
        _3222 = _3067;
    }
    uint _3228 = _1049 + uint(cbMatDynParam._m0[0u].w);
    float _3234 = cbInstanceData._m0[_3228].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _755) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _645) * _658.x) * _784)) + (((_813 - (_813 * _721)) + (cbMatDynParam._m0[11u].x * _844)) * cbMatDynParam._m0[9u].x));
    float _3235 = cbInstanceData._m0[_3228].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _755) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _645) * _658.y) * _784)) + (((_815 - (_815 * _721)) + (cbMatDynParam._m0[11u].y * _844)) * cbMatDynParam._m0[9u].y));
    float _3236 = cbInstanceData._m0[_3228].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _755) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _645) * _658.z) * _784)) + (((_817 - (_817 * _721)) + (cbMatDynParam._m0[11u].z * _844)) * cbMatDynParam._m0[9u].z));
    float _5301 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _5312 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _5323 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _5334 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3254 = (((isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0))) * (_3212 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1156))) + ((_3218 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1991)) * cbPerFrame._m0[3u].x)) + _3234;
    float _3256 = (_3235 + ((_3220 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1991)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0))) * (_3214 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1156)));
    float _3258 = (_3236 + ((_3222 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1991)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0))) * (_3216 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1156)));
    float _3259 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
    float _3260 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
    float _3261 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
    float _3267 = cbMtdParam._m0[2u].x * _3234;
    float _3268 = cbMtdParam._m0[2u].y * _3235;
    float _3269 = cbMtdParam._m0[2u].z * _3236;
    float _3276 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _784) + cbMatDynParam._m0[12u].y;
    float _3281 = cbInstanceData._m0[_1048 + 6u].w * (isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0)));
    float _3286 = _946 / cbSceneParam._m0[86u].x;
    float _3287 = _947 / cbSceneParam._m0[86u].y;
    vec4 _3301 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, (log2((isnan(cbSceneParam._m0[77u].w) ? _870 : (isnan(_870) ? cbSceneParam._m0[77u].w : min(_870, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3303 = _3301.x;
    float _3304 = _3301.y;
    float _3305 = _3301.z;
    float _3306 = _3301.w;
    float _3377;
    float _3379;
    float _3381;
    float _3383;
    if (_870 > cbSceneParam._m0[78u].w)
    {
        float _3340 = isnan(_870) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _870 : min(cbSceneParam._m0[80u].w, _870));
        float _3341 = _3340 / _870;
        float _3352 = _3341 * _919;
        float _3353 = _920 * _3341;
        float _3354 = (-0.0) - _3353;
        float _3355 = _3341 * _921;
        float _3357 = (cbSceneParam._m0[77u].w * _3354) / _3340;
        float _3358 = _3357 + cbSceneParam._m0[79u].w;
        float _3359 = cbSceneParam._m0[79u].w - _3353;
        float _3365 = sqrt(((_3352 * _3352) + (_3353 * _3353)) + (_3355 * _3355));
        float _3368 = (1.0 - (cbSceneParam._m0[77u].w / _3340)) * _3365;
        float _3373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3375 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3561;
        if (abs((_3354 - _3357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3561 = ((((_3358 > 0.0) ? exp2(_3373 * _3358) : (2.0 - exp2(_3375 * _3358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3368;
        }
        else
        {
            float _3505 = 1.0 / cbSceneParam._m0[80u].x;
            float _3506 = isnan(_3359) ? _3358 : (isnan(_3358) ? _3359 : max(_3358, _3359));
            float _3507 = isnan(_3359) ? _3358 : (isnan(_3358) ? _3359 : min(_3358, _3359));
            float _3516 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : min(_3506, 0.0));
            float _3517 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : min(_3507, 0.0));
            _3561 = ((abs(_3365 / _3354) * cbSceneParam._m0[80u].y) * ((((_3516 - _3517) * 2.0) - ((exp2(_3373 * (isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0)))) - exp2(_3373 * (isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0))))) * _3505)) - ((exp2(_3375 * _3516) - exp2(_3375 * _3517)) * _3505))) + (_3368 * cbSceneParam._m0[80u].z);
        }
        vec4 _3563 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, 1.0), 0.0);
        float _3572 = exp2((_3561 * (-1.44269502162933349609375)) * (1.0 - _3563.w));
        float _3573 = log2(_3572);
        float _3589 = log2(_3306);
        _3377 = (exp2(_3589 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3573 * cbSceneParam._m0[78u].x)) * _3563.x) / cbSceneParam._m0[78u].x)) + _3303;
        _3379 = (exp2(_3589 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3573 * cbSceneParam._m0[78u].y)) * _3563.y) / cbSceneParam._m0[78u].y)) + _3304;
        _3381 = (exp2(_3589 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3573 * cbSceneParam._m0[78u].z)) * _3563.z) / cbSceneParam._m0[78u].z)) + _3305;
        _3383 = _3572 * _3306;
    }
    else
    {
        _3377 = _3303;
        _3379 = _3304;
        _3381 = _3305;
        _3383 = _3306;
    }
    bool _3599;
    vec4 _3393;
    vec4 _3415;
    float _3417;
    float _3421;
    float _3422;
    float _3423;
    float _3426;
    float _3429;
    float _3432;
    float _3433;
    bool _3443;
    for (;;)
    {
        _3393 = cbMatDynParam._m0[0u];
        float _3395 = roundEven(_3393.y);
        bool _3396 = _3395 == 3.0;
        float _3397 = log2(_3383);
        float _3401 = exp2(_3397 * cbSceneParam._m0[78u].x);
        float _3402 = exp2(_3397 * cbSceneParam._m0[78u].y);
        float _3403 = exp2(_3397 * cbSceneParam._m0[78u].z);
        float _3404 = _3401 * _3259;
        float _3405 = _3402 * _3260;
        float _3406 = _3403 * _3261;
        float _3413 = _935 + (-0.5);
        _3415 = cbMtdParam._m0[1u];
        _3417 = _3415.y * _3413;
        float _3420 = (_3395 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3421 = _3420 * (_3396 ? _3404 : (_3404 + (cbSceneParam._m0[72u].w * _3377)));
        _3422 = _3420 * (_3396 ? _3405 : (_3405 + (cbSceneParam._m0[72u].w * _3379)));
        _3423 = _3420 * (_3396 ? _3406 : (_3406 + (cbSceneParam._m0[72u].w * _3381)));
        _3426 = ((_3267 * _3276) * _3401) * _3420;
        _3429 = ((_3268 * _3276) * _3402) * _3420;
        _3432 = ((_3269 * _3276) * _3403) * _3420;
        _3433 = _3413 * 0.999000012874603271484375;
        _3443 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3443)
        {
            if ((cbInstanceData._m0[_1048 + 7u].x + _3433) < 0.5)
            {
                _3599 = true;
                break;
            }
        }
        uint _3540 = _1049 + uint(_3393.w);
        if ((cbInstanceData._m0[_3540].w < 1.0) && ((cbInstanceData._m0[_3540].w + _3433) < 0.5))
        {
            _3599 = true;
            break;
        }
        if ((_3417 + _494) < _3415.x)
        {
            _3599 = true;
            break;
        }
        _3599 = false;
        break;
    }
    float _3802;
    if (_3599)
    {
        discard_state = true;
        _3802 = 0.0;
    }
    else
    {
        _3802 = _3281;
    }
    SV_Target.x = _3421;
    SV_Target.y = _3422;
    SV_Target.z = _3423;
    SV_Target.w = _3802;
    SV_Target_1.x = _3426;
    SV_Target_1.y = _3429;
    SV_Target_1.z = _3432;
    SV_Target_1.w = _3281;
    discard_exit();
}


