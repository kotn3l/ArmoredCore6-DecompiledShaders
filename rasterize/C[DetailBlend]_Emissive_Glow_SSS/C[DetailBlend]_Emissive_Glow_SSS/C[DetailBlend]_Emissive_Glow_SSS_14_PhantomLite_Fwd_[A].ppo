#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _3761;
float _3762;
float _3763;
float _3764;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _326 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = exp2(log2(1.0 - _308.w) * 8.0);
    vec4 _354 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _379 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _388 = ((_326.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _379.x;
    float _391 = ((_326.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _379.y;
    float _394 = ((_326.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _379.z;
    float _401 = (((cbMtdParam._m0[13u].x * _354.x) - _388) * _342) + _388;
    float _402 = (((cbMtdParam._m0[13u].y * _354.y) - _391) * _342) + _391;
    float _403 = (((cbMtdParam._m0[13u].z * _354.z) - _394) * _342) + _394;
    float _404 = _379.w * _326.w;
    vec4 _421 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _428 = cbMtdParam._m0[16u].x + _421.x;
    float _431 = ((cbMtdParam._m0[15u].z - _428) * _342) + _428;
    vec4 _443 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _473 = (_308.z * 2.0) * (cbMtdParam._m0[14u].x + _443.z);
    float _477 = (((_465.z - _473) + cbMtdParam._m0[15u].y) * _342) + _473;
    float _492 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3773 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _498 = (_493 * _493) * (3.0 - (_493 * 2.0));
    vec4 _511 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _519 = (_308.x * 2.0) + (-1.0);
    float _520 = (_308.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3784 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))));
    float _539 = (cbMtdParam._m0[14u].z * (((((_465.x - _445) * _342) + _445) * 2.0) + (-1.0))) + _519;
    float _540 = (cbMtdParam._m0[14u].z * (((((_465.y - _446) * _342) + _446) * 2.0) + (-1.0))) + _520;
    float _543 = fma(_526, _237, fma(_540, _229 * TANGENT.x, (_215 * _207) * _539));
    float _546 = fma(_526, _238, fma(_540, _229 * TANGENT.y, (_215 * _208) * _539));
    float _549 = fma(_526, _239, fma(_540, _229 * TANGENT.z, (_215 * _209) * _539));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3795 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _557 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _558 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _559 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _560 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _561 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _562 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _570 = cbMatDynParam._m0[9u].x * _559;
    float _571 = cbMatDynParam._m0[9u].y * _560;
    float _572 = cbMatDynParam._m0[9u].z * _561;
    float _579 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _580 = _579 * _293;
    float _581 = _579 * _294;
    float _582 = _579 * _295;
    float _583 = dot(vec3(_554, _555, _556), vec3(_580, _581, _582));
    float _589 = abs(exp2(log2(_583) * cbMatDynParam._m0[12u].x));
    float _590 = isnan(0.100000001490116119384765625) ? _589 : (isnan(_589) ? 0.100000001490116119384765625 : max(_589, 0.100000001490116119384765625));
    float _596 = ((isnan(0.699999988079071044921875) ? _590 : (isnan(_590) ? 0.699999988079071044921875 : min(_590, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _618 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3871 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3882 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _625 = (((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) - _622) * _596) + _622;
    float _644 = dot(vec3(_554, _555, _556), vec3(0.0, -1.0, 0.0));
    float _3893 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _654 = (_647 * _559) * cbMatDynParam._m0[11u].x;
    float _656 = (_647 * _560) * cbMatDynParam._m0[11u].y;
    float _658 = (_647 * _561) * cbMatDynParam._m0[11u].z;
    float _665 = dot(vec3(_580, _581, _582), vec3(_554, _555, _556));
    float _668 = _665 * 2.0;
    float _678 = dot(vec3((-0.0) - (_580 - (_668 * _554)), (-0.0) - (_581 - (_668 * _555)), (-0.0) - (_582 - (_668 * _556))), vec3(0.0, -1.0, 0.0));
    float _3904 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _685 = exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 4.0);
    float _711 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _716 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _718 = _716.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1015 = sqrt(((_293 * _293) + (_294 * _294)) + (_295 * _295));
        float _1021 = (cbMatDynParam._m0[5u].x * _1015) + cbMatDynParam._m0[5u].y;
        float _3915 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1026 = (cbMatDynParam._m0[5u].z * _1015) + cbMatDynParam._m0[5u].w;
        float _3926 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) - _1022)) + _1022) < ((_718 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = _733.w;
    float _753 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _756 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _759 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    vec4 _761 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _763 = _761.x;
    float _775 = (((_761.y - _558) + (_761.w * _558)) * cbMtdParam._m0[3u].x) + _558;
    vec4 _776 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_763 * _763)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _776.z;
    float _800 = (((cbMatDynParam._m0[15u].x - _562) * cbMatDynParam._m0[15u].w) * _792) + _562;
    float _808 = ((_792 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _775)) + _775;
    uint _832 = uint(roundEven(NORMAL.w)) * 13u;
    uint _833 = _832 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * _570) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * _571) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * _572) * cbInstanceData._m0[_834].z;
    float _3937 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    vec4 _846 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _851 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _862 = (((_851.x - _800) + (_851.w * _800)) * cbMtdParam._m0[3u].x) + _800;
    float _875 = (cbMtdParam._m0[3u].x * (((_843 * _735) - _843) + _846.x)) + _843;
    float _876 = (cbMtdParam._m0[3u].x * (((_844 * _735) - _844) + _846.y)) + _844;
    float _877 = (cbMtdParam._m0[3u].x * (((_845 * _735) - _845) + _846.z)) + _845;
    float _891 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_800 * (_570 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_800 * (_571 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_800 * (_572 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _895 = _891 * cbMatDynParam._m0[13u].w;
    float _905 = (_895 * (cbMatDynParam._m0[13u].x - _875)) + _875;
    float _906 = (_895 * (cbMatDynParam._m0[13u].y - _876)) + _876;
    float _907 = (_895 * (cbMatDynParam._m0[13u].z - _877)) + _877;
    float _915 = ((_891 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _862)) + _862;
    float _916 = 1.0 - _915;
    float _917 = _916 * _905;
    float _918 = _916 * _906;
    float _919 = _916 * _907;
    float _923 = (_905 + (-0.039999999105930328369140625)) * _915;
    float _924 = (_906 + (-0.039999999105930328369140625)) * _915;
    float _925 = (_907 + (-0.039999999105930328369140625)) * _915;
    float _926 = _923 + 0.039999999105930328369140625;
    float _927 = _924 + 0.039999999105930328369140625;
    float _928 = _925 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _940 = _937.x * TEXCOORD_4;
    float _941 = _583 * 2.0;
    float _945 = (_941 * _554) - _580;
    float _946 = (_941 * _555) - _581;
    float _947 = (_941 * _556) - _582;
    float _948 = abs(_665);
    float _3970 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_808);
    float _961 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _967 = (1.0 - _961) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _950;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1064 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1068 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1093 = _996 + _554;
        float _1094 = _1000 + _555;
        float _1095 = _1004 + _556;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_554, _555, _556), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4018 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_554, _555, _556), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4051 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_554, _555, _556), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4084 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1383 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1387 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1410 = _996 + _554;
        float _1411 = _1000 + _555;
        float _1412 = _1004 + _556;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_554, _555, _556), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4147 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_554, _555, _556), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4180 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_554, _555, _556), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4213 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = _1336;
        _1659 = _1336;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1348)) + _1348;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1349)) + _1349;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1350)) + _1350;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _945 * 0.5;
    float _1717 = _946 * 0.5;
    float _1718 = _947 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1843 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1846 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1874 = frontier_phi_19_17_ladder;
        }
        float _2078;
        if (_1843 > 0.0)
        {
            _2078 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2332;
        if (_1846 > 0.0)
        {
            _2332 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2332 = frontier_phi_40_35_ladder;
        }
        float _2334 = isnan(_2078) ? _1874 : (isnan(_1874) ? _2078 : min(_1874, _2078));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1840) + _1829;
        float _2340 = (_2335 * _1843) + _1833;
        float _2341 = (_2335 * _1846) + _1837;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2342;
        float _2346 = _2342 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 > _2346) || ((_2340 < _2344) || ((_2339 < _2344) || (_2339 > _2346))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2341, cbModelParam._m0[9u].z, fma(_2340, cbModelParam._m0[9u].y, _2339 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2341, cbModelParam._m0[10u].z, fma(_2340, cbModelParam._m0[10u].y, _2339 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2341, cbModelParam._m0[11u].z, fma(_2340, cbModelParam._m0[11u].y, _2339 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_18_40_ladder = _2469.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2469.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2469.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_18_40_ladder_2;
        _1864 = frontier_phi_18_40_ladder_1;
        _1866 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1940 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1943 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2083;
        if (_1937 > 0.0)
        {
            _2083 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2083 = frontier_phi_30_26_ladder;
        }
        float _2359;
        if (_1940 > 0.0)
        {
            _2359 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2359 = frontier_phi_42_37_ladder;
        }
        float _2572;
        if (_1943 > 0.0)
        {
            _2572 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2572 = frontier_phi_51_48_ladder;
        }
        float _2574 = isnan(_2359) ? _2083 : (isnan(_2083) ? _2359 : min(_2083, _2359));
        float _2575 = isnan(_2572) ? _2574 : (isnan(_2574) ? _2572 : min(_2574, _2572));
        float _2579 = (_2575 * _1937) + _1926;
        float _2580 = (_2575 * _1940) + _1930;
        float _2581 = (_2575 * _1943) + _1934;
        float _2582 = _2575 * 9.9999997473787516355514526367188e-05;
        float _2583 = (-1.0) - _2582;
        float _2585 = _2582 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2581 > _2585) || ((_2581 < _2583) || ((_2580 > _2585) || ((_2580 < _2583) || ((_2579 < _2583) || (_2579 > _2585))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2581, cbModelParam._m0[17u].z, fma(_2580, cbModelParam._m0[17u].y, _2579 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2581, cbModelParam._m0[18u].z, fma(_2580, cbModelParam._m0[18u].y, _2579 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2581, cbModelParam._m0[19u].z, fma(_2580, cbModelParam._m0[19u].y, _2579 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_27_51_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_27_51_ladder_2;
        _1964 = frontier_phi_27_51_ladder_1;
        _1966 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1871);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_967 * _926) + _968) * _940) * ((cbModelParam._m0[1u].w * (_1962 - _1862)) + _1862);
    float _1981 = (((_967 * _927) + _968) * _940) * ((cbModelParam._m0[1u].w * (_1964 - _1864)) + _1864);
    float _1983 = (((_967 * _928) + _968) * _940) * ((cbModelParam._m0[1u].w * (_1966 - _1866)) + _1866);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_832 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2012 = _940 + (-1.0);
    float _2017 = (cbLight._m0[_2005].x * _2012) + 1.0;
    float _2018 = (cbLight._m0[_2005].y * _2012) + 1.0;
    float _2019 = (cbLight._m0[_2005].z * _2012) + 1.0;
    float _2020 = (cbLight._m0[_2005].w * _2012) + 1.0;
    uint _2021 = _2004 + 5u;
    float _2027 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2031 = _2004 + 4u;
    float _2037 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2041 = _2004 | 1u;
    float _2052 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_554, _555, _556));
    float _2055 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_554, _555, _556));
    float _4349 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _4360 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2062 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2069 = ((cbLight._m0[_2021].x * _2027) * _2062) + ((cbLight._m0[_2031].x * _2037) * _2060);
    float _2070 = ((_2027 * cbLight._m0[_2021].y) * _2062) + ((_2037 * cbLight._m0[_2031].y) * _2060);
    float _2071 = ((_2027 * cbLight._m0[_2021].z) * _2062) + ((_2037 * cbLight._m0[_2031].z) * _2060);
    uvec4 _2075 = floatBitsToUint(cbLight._m0[_2004 + 12u]);
    bool _2077 = _2075.x == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2077)
    {
        _2088 = _2069;
        _2090 = _2070;
        _2092 = _2071;
    }
    else
    {
        uint _2096 = _2004 + 6u;
        float _2112 = (dot(vec3(cbLight._m0[_2004 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4371 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2115 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2088 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _2069;
        _2090 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _2070;
        _2092 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _2071;
    }
    bool _2095 = _2075.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2095)
    {
        _2133 = _2088;
        _2135 = _2090;
        _2137 = _2092;
    }
    else
    {
        uint _2303 = _2004 + 7u;
        float _2319 = (dot(vec3(cbLight._m0[_2004 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4387 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2322 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2133 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2088;
        _2135 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2090;
        _2137 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2092;
    }
    uint _2140 = _2004 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _808) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_2004].x + _580;
    float _2156 = cbLight._m0[_2004].y + _581;
    float _2157 = cbLight._m0[_2004].z + _582;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2004].xyz));
    float _4403 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2169 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2170 = dot(vec3(_554, _555, _556), vec3(_2162, _2163, _2164));
    float _4425 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2162, _2163, _2164));
    float _4436 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2191 = 0.959999978542327880859375 - _923;
    float _2193 = 0.959999978542327880859375 - _924;
    float _2194 = 0.959999978542327880859375 - _925;
    float _2201 = 1.0 - _2154;
    float _2212 = (0.5 / (((_2169 * ((_2168 * _2201) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2201) + _2154) * _2168))) * _2168;
    float _4447 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2225 = _2004 + 9u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _808) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_2041].x + _580;
    float _2239 = cbLight._m0[_2041].y + _581;
    float _2240 = cbLight._m0[_2041].z + _582;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2041].xyz));
    float _4458 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2252 = dot(vec3(_554, _555, _556), vec3(_2245, _2246, _2247));
    float _4469 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2245, _2246, _2247));
    float _4480 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2237 * _2237;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2278 = 1.0 - _2237;
    float _2288 = (0.5 / (((_2169 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2278) + _2237) * _2251))) * _2251;
    float _4491 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    float _2300 = (((((_2271 * _2191) + _926) * cbLight._m0[_2225].x) * _2290) * _2027) + (((((_2190 * _2191) + _926) * cbLight._m0[_2140].x) * _2214) * _2037);
    float _2301 = (((((_2271 * _2193) + _927) * cbLight._m0[_2225].y) * _2290) * _2027) + (((((_2190 * _2193) + _927) * cbLight._m0[_2140].y) * _2214) * _2037);
    float _2302 = (((((_2271 * _2194) + _928) * cbLight._m0[_2225].z) * _2290) * _2027) + (((((_2190 * _2194) + _928) * cbLight._m0[_2140].z) * _2214) * _2037);
    float _2364;
    float _2366;
    float _2368;
    if (_2077)
    {
        _2364 = _2300;
        _2366 = _2301;
        _2368 = _2302;
    }
    else
    {
        uint _2370 = _2004 + 2u;
        uint _2374 = _2004 + 10u;
        float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _808) * 0.949999988079071044921875);
        float _2389 = _2388 * _2388;
        float _2390 = cbLight._m0[_2370].x + _580;
        float _2391 = cbLight._m0[_2370].y + _581;
        float _2392 = cbLight._m0[_2370].z + _582;
        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
        float _2397 = _2396 * _2390;
        float _2398 = _2396 * _2391;
        float _2399 = _2396 * _2392;
        float _2400 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2370].xyz));
        float _4502 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2404 = dot(vec3(_554, _555, _556), vec3(_2397, _2398, _2399));
        float _4513 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2408 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2397, _2398, _2399));
        float _4524 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2412 = _2389 * _2389;
        float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
        float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2430 = 1.0 - _2389;
        float _2440 = (0.5 / (((_2169 * ((_2403 * _2430) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2430) + _2389) * _2403))) * _2403;
        float _4535 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2442 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
        float _2443 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2364 = (((((_2423 * _2191) + _926) * cbLight._m0[_2374].x) * _2442) * _2443) + _2300;
        _2366 = (((((_2423 * _2193) + _927) * cbLight._m0[_2374].y) * _2442) * _2443) + _2301;
        _2368 = (((((_2423 * _2194) + _928) * cbLight._m0[_2374].z) * _2442) * _2443) + _2302;
    }
    float _2478;
    float _2480;
    float _2482;
    if (_2095)
    {
        _2478 = _2364;
        _2480 = _2366;
        _2482 = _2368;
    }
    else
    {
        uint _2489 = _2004 + 3u;
        uint _2493 = _2004 + 11u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _808) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _580;
        float _2510 = cbLight._m0[_2489].y + _581;
        float _2511 = cbLight._m0[_2489].z + _582;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2489].xyz));
        float _4551 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2523 = dot(vec3(_554, _555, _556), vec3(_2516, _2517, _2518));
        float _4562 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4573 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2549 = 1.0 - _2508;
        float _2559 = (0.5 / (((_2169 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2549) + _2508) * _2522))) * _2522;
        float _4584 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2478 = (((((_2542 * _2191) + _926) * cbLight._m0[_2493].x) * _2561) * _2562) + _2364;
        _2480 = (((((_2542 * _2193) + _927) * cbLight._m0[_2493].y) * _2561) * _2562) + _2366;
        _2482 = (((((_2542 * _2194) + _928) * cbLight._m0[_2493].z) * _2561) * _2562) + _2368;
    }
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_2002.y == 0u)
    {
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2637;
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2637;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2637;
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.x;
        uint _2664 = uint((float(_2652.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2653))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2653)));
        float _2674 = (log2(_2640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2675 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        uint _2678 = uint(isnan(14.0) ? _2675 : (isnan(_2675) ? 14.0 : min(_2675, 14.0)));
        uvec4 _2683 = texelFetch(g_lightClusterGridBuffer, int(((_2678 << 2u) + (_2664 << 6u)) >> 2u));
        uint _2684 = _2683.x;
        uint _2685 = _2652.z;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((((1u << ((_2685 >> 4u) & 15u)) + 4294967295u) & _2684) == 0u) || ((_2685 & 240u) == 0u))
        {
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
        }
        else
        {
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            uint _2987 = 0u;
            uint _2996;
            bool _2997;
            for (;;)
            {
                _2996 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                _2997 = _2996 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2997)
                {
                    frontier_phi_68_pred = _2983;
                    frontier_phi_68_pred_1 = _2986;
                    frontier_phi_68_pred_2 = _2985;
                    frontier_phi_68_pred_3 = _2984;
                    frontier_phi_68_pred_4 = _2982;
                    frontier_phi_68_pred_5 = _2981;
                }
                else
                {
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    uint _3132;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2996;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    for (;;)
                    {
                        uint _3136 = uint(findLSB(_3132)) + (_2987 << 5u);
                        uint _3133 = (_3132 + 4294967295u) & _3132;
                        uint _3138 = _3136 * 48u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3158 = (_3136 * 48u) + 4u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3177 = (_3136 * 48u) + 8u;
                        vec3 _3188 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x));
                        float _3192 = _3152.x - _2638;
                        float _3193 = _3152.y - _2639;
                        float _3194 = _3152.z - _2640;
                        float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                        float _3198 = inversesqrt(_3195);
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3202 = dot(vec3(_753, _756, _759), vec3(_3199, _3200, _3201));
                        float _3207 = 1.0 - (_3195 * _3152.w);
                        float _4610 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3209 = sqrt(_3195) * _3171.w;
                        float _3212 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3202) + _3213;
                        float _3219 = _3209 * _3209;
                        float _3222 = ((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3208) / ((_3219 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _2638;
                        float _3227 = (-0.0) - _2639;
                        float _3228 = (-0.0) - _2640;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3243 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _950;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3233 + _3199;
                        float _3255 = _3234 + _3200;
                        float _3256 = _3235 + _3201;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_753, _756, _759), vec3(_3233, _3234, _3235));
                        float _4626 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3268 = dot(vec3(_753, _756, _759), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4637 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3212 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3202) + _3277;
                        float _4648 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4659 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3275 * _3275) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125))) * _3208;
                        _3056 = (_3222 * _3171.x) + _3129;
                        _3057 = (_3222 * _3171.y) + _3130;
                        _3058 = (_3222 * _3171.z) + _3131;
                        _3053 = (_3303 * _3188.x) + _3126;
                        _3054 = (_3303 * _3188.y) + _3127;
                        _3055 = (_3303 * _3188.z) + _3128;
                        if (_3133 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3133;
                        }
                    }
                    frontier_phi_68_pred = _3055;
                    frontier_phi_68_pred_1 = _3058;
                    frontier_phi_68_pred_2 = _3057;
                    frontier_phi_68_pred_3 = _3056;
                    frontier_phi_68_pred_4 = _3054;
                    frontier_phi_68_pred_5 = _3053;
                }
                _2825 = frontier_phi_68_pred;
                _2831 = frontier_phi_68_pred_1;
                _2829 = frontier_phi_68_pred_2;
                _2827 = frontier_phi_68_pred_3;
                _2823 = frontier_phi_68_pred_4;
                _2821 = frontier_phi_68_pred_5;
                uint _2988 = _2987 + 1u;
                if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2981 = _2821;
                    _2982 = _2823;
                    _2983 = _2825;
                    _2984 = _2827;
                    _2985 = _2829;
                    _2986 = _2831;
                    _2987 = _2988;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
        }
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.z;
        uint _2837 = (_2835 >> 8u) & 15u;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((4294967295u << _2837) & _2684) == 0u)
        {
            _2949 = _2820;
            _2951 = _2822;
            _2953 = _2824;
            _2955 = _2826;
            _2957 = _2828;
            _2959 = _2830;
        }
        else
        {
            float _2974 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
            float _2975 = _2974 * _2638;
            float _2976 = _2974 * _2639;
            float _2977 = _2974 * _2640;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2837 < ((_2835 >> 12u) & 15u))
            {
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _3109 = _2820;
                float _3110 = _2822;
                float _3111 = _2824;
                float _3112 = _2826;
                float _3113 = _2828;
                float _3114 = _2830;
                uint _3115 = _2837;
                uint _3124;
                bool _3125;
                for (;;)
                {
                    _3124 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                    _3125 = _3124 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3125)
                    {
                        frontier_phi_79_pred = _3114;
                        frontier_phi_79_pred_1 = _3113;
                        frontier_phi_79_pred_2 = _3112;
                        frontier_phi_79_pred_3 = _3111;
                        frontier_phi_79_pred_4 = _3110;
                        frontier_phi_79_pred_5 = _3109;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3330 = _3109;
                        float _3331 = _3110;
                        float _3332 = _3111;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        uint _3336 = _3124;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3405;
                        vec4 _3421;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3347 = ((_3115 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3392 = (_3347 * 40u) + 16u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3408 = (_3347 * 40u) + 20u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3424 = (_3347 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3347 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_2640, _3456.z, fma(_2639, _3456.y, _3456.x * _2638)) + _3456.w;
                            _3469 = !((fma(_2640, _3437.z, fma(_2639, _3437.y, _3437.x * _2638)) + _3437.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3362.x - _2638;
                                float _3497 = _3362.y - _2639;
                                float _3498 = _3362.z - _2640;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3363 * _3363));
                                float _4670 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3514 = sqrt(_3499) * _3378.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_753, _756, _759))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_2640, _3405.z, fma(_2639, _3405.y, _3405.x * _2638)) + _3405.w) / _3468;
                                float _3528 = (fma(_2640, _3421.z, fma(_2639, _3421.y, _3421.x * _2638)) + _3421.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4686 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _950;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _2975;
                                float _3558 = _3504 - _2976;
                                float _3559 = _3505 - _2977;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2975, (-0.0) - _2976, (-0.0) - _2977));
                                float _4697 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3571 = dot(vec3(_753, _756, _759), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4708 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_753, _756, _759), vec3(_3503, _3504, _3505))) + _3580;
                                float _4719 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4730 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3534 * _3378.z;
                                frontier_phi_85_pred_1 = _3534 * _3378.y;
                                frontier_phi_85_pred_2 = _3534 * _3378.x;
                                frontier_phi_85_pred_3 = _3608 * _3390.z;
                                frontier_phi_85_pred_4 = _3608 * _3390.y;
                                frontier_phi_85_pred_5 = _3608 * _3390.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3617 = frontier_phi_85_pred;
                            _3616 = frontier_phi_85_pred_1;
                            _3615 = frontier_phi_85_pred_2;
                            _3614 = frontier_phi_85_pred_3;
                            _3613 = frontier_phi_85_pred_4;
                            _3612 = frontier_phi_85_pred_5;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            _3322 = _3617 + _3335;
                            _3317 = _3612 + _3330;
                            _3318 = _3613 + _3331;
                            _3319 = _3614 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3322;
                        frontier_phi_79_pred_1 = _3321;
                        frontier_phi_79_pred_2 = _3320;
                        frontier_phi_79_pred_3 = _3319;
                        frontier_phi_79_pred_4 = _3318;
                        frontier_phi_79_pred_5 = _3317;
                    }
                    _2960 = frontier_phi_79_pred;
                    _2958 = frontier_phi_79_pred_1;
                    _2956 = frontier_phi_79_pred_2;
                    _2954 = frontier_phi_79_pred_3;
                    _2952 = frontier_phi_79_pred_4;
                    _2950 = frontier_phi_79_pred_5;
                    uint _3116 = _3115 + 1u;
                    if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3109 = _2950;
                        _3110 = _2952;
                        _3111 = _2954;
                        _3112 = _2956;
                        _3113 = _2958;
                        _3114 = _2960;
                        _3115 = _3116;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2956;
                frontier_phi_60_61_ladder_1 = _2960;
                frontier_phi_60_61_ladder_2 = _2958;
                frontier_phi_60_61_ladder_3 = _2954;
                frontier_phi_60_61_ladder_4 = _2952;
                frontier_phi_60_61_ladder_5 = _2950;
            }
            else
            {
                frontier_phi_60_61_ladder = _2826;
                frontier_phi_60_61_ladder_1 = _2830;
                frontier_phi_60_61_ladder_2 = _2828;
                frontier_phi_60_61_ladder_3 = _2824;
                frontier_phi_60_61_ladder_4 = _2822;
                frontier_phi_60_61_ladder_5 = _2820;
            }
            _2949 = frontier_phi_60_61_ladder_5;
            _2951 = frontier_phi_60_61_ladder_4;
            _2953 = frontier_phi_60_61_ladder_3;
            _2955 = frontier_phi_60_61_ladder;
            _2957 = frontier_phi_60_61_ladder_2;
            _2959 = frontier_phi_60_61_ladder_1;
        }
        float _2964 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2696 = (_2964 * _2955) + _2133;
        _2698 = (_2964 * _2957) + _2135;
        _2700 = (_2964 * _2959) + _2137;
        _2702 = ((_2949 * _926) * _2964) + _2478;
        _2704 = ((_2951 * _927) * _2964) + _2480;
        _2706 = ((_2953 * _928) * _2964) + _2482;
    }
    else
    {
        _2696 = _2133;
        _2698 = _2135;
        _2700 = _2137;
        _2702 = _2478;
        _2704 = _2480;
        _2706 = _2482;
    }
    uint _2712 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _2718 = cbInstanceData._m0[_2712].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _596) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.x) * _625)) + (((_654 - (_654 * _562)) + (cbMatDynParam._m0[11u].x * _685)) * cbMatDynParam._m0[9u].x));
    float _2719 = cbInstanceData._m0[_2712].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _596) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.y) * _625)) + (((_656 - (_656 * _562)) + (cbMatDynParam._m0[11u].y * _685)) * cbMatDynParam._m0[9u].y));
    float _2720 = cbInstanceData._m0[_2712].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _596) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _498) * _511.z) * _625)) + (((_658 - (_658 * _562)) + (cbMatDynParam._m0[11u].z * _685)) * cbMatDynParam._m0[9u].z));
    float _4746 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4757 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4768 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4779 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _2738 = (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2696 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _940))) + ((_2702 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + _2718;
    float _2740 = (_2719 + ((_2704 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2698 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _940)));
    float _2742 = (_2720 + ((_2706 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2700 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _940)));
    float _2743 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2744 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2745 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2751 = cbMtdParam._m0[2u].x * _2718;
    float _2752 = cbMtdParam._m0[2u].y * _2719;
    float _2753 = cbMtdParam._m0[2u].z * _2720;
    float _2760 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _625) + cbMatDynParam._m0[12u].y;
    float _2765 = cbInstanceData._m0[_832 + 6u].w * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)));
    float _2770 = _730 / cbSceneParam._m0[86u].x;
    float _2771 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _711 : (isnan(_711) ? cbSceneParam._m0[77u].w : min(_711, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_711 > cbSceneParam._m0[78u].w)
    {
        float _2845 = isnan(_711) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _711 : min(cbSceneParam._m0[80u].w, _711));
        float _2846 = _2845 / _711;
        float _2857 = _2846 * _293;
        float _2858 = _294 * _2846;
        float _2859 = (-0.0) - _2858;
        float _2860 = _2846 * _295;
        float _2862 = (cbSceneParam._m0[77u].w * _2859) / _2845;
        float _2863 = _2862 + cbSceneParam._m0[79u].w;
        float _2864 = cbSceneParam._m0[79u].w - _2858;
        float _2870 = sqrt(((_2857 * _2857) + (_2858 * _2858)) + (_2860 * _2860));
        float _2873 = (1.0 - (cbSceneParam._m0[77u].w / _2845)) * _2870;
        float _2878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3066;
        if (abs((_2859 - _2862) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3066 = ((((_2863 > 0.0) ? exp2(_2878 * _2863) : (2.0 - exp2(_2880 * _2863))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2873;
        }
        else
        {
            float _3010 = 1.0 / cbSceneParam._m0[80u].x;
            float _3011 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : max(_2863, _2864));
            float _3012 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : min(_2863, _2864));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            _3066 = ((abs(_2870 / _2859) * cbSceneParam._m0[80u].y) * ((((_3021 - _3022) * 2.0) - ((exp2(_2878 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)))) - exp2(_2878 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))))) * _3010)) - ((exp2(_2880 * _3021) - exp2(_2880 * _3022)) * _3010))) + (_2873 * cbSceneParam._m0[80u].z);
        }
        vec4 _3068 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3077 = exp2((_3066 * (-1.44269502162933349609375)) * (1.0 - _3068.w));
        float _3078 = log2(_3077);
        float _3094 = log2(_2790);
        _2882 = (exp2(_3094 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3078 * cbSceneParam._m0[78u].x)) * _3068.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2884 = (exp2(_3094 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3078 * cbSceneParam._m0[78u].y)) * _3068.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2886 = (exp2(_3094 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3078 * cbSceneParam._m0[78u].z)) * _3068.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2888 = _3077 * _2790;
    }
    else
    {
        _2882 = _2787;
        _2884 = _2788;
        _2886 = _2789;
        _2888 = _2790;
    }
    bool _3104;
    vec4 _2898;
    vec4 _2920;
    float _2922;
    float _2926;
    float _2927;
    float _2928;
    float _2931;
    float _2934;
    float _2937;
    float _2938;
    bool _2948;
    for (;;)
    {
        _2898 = cbMatDynParam._m0[0u];
        float _2900 = roundEven(_2898.y);
        bool _2901 = _2900 == 3.0;
        float _2902 = log2(_2888);
        float _2906 = exp2(_2902 * cbSceneParam._m0[78u].x);
        float _2907 = exp2(_2902 * cbSceneParam._m0[78u].y);
        float _2908 = exp2(_2902 * cbSceneParam._m0[78u].z);
        float _2909 = _2906 * _2743;
        float _2910 = _2907 * _2744;
        float _2911 = _2908 * _2745;
        float _2918 = _718 + (-0.5);
        _2920 = cbMtdParam._m0[1u];
        _2922 = _2920.y * _2918;
        float _2925 = (_2900 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2926 = _2925 * (_2901 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2882)));
        _2927 = _2925 * (_2901 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2884)));
        _2928 = _2925 * (_2901 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2886)));
        _2931 = ((_2751 * _2760) * _2906) * _2925;
        _2934 = ((_2752 * _2760) * _2907) * _2925;
        _2937 = ((_2753 * _2760) * _2908) * _2925;
        _2938 = _2918 * 0.999000012874603271484375;
        _2948 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2948)
        {
            if ((cbInstanceData._m0[_832 + 7u].x + _2938) < 0.5)
            {
                _3104 = true;
                break;
            }
        }
        uint _3045 = _833 + uint(_2898.w);
        if ((cbInstanceData._m0[_3045].w < 1.0) && ((cbInstanceData._m0[_3045].w + _2938) < 0.5))
        {
            _3104 = true;
            break;
        }
        if ((_2922 + _404) < _2920.x)
        {
            _3104 = true;
            break;
        }
        _3104 = false;
        break;
    }
    float _3308;
    if (_3104)
    {
        discard_state = true;
        _3308 = 0.0;
    }
    else
    {
        _3308 = _2765;
    }
    SV_Target.x = _2926;
    SV_Target.y = _2927;
    SV_Target.z = _2928;
    SV_Target.w = _3308;
    SV_Target_1.x = _2931;
    SV_Target_1.y = _2934;
    SV_Target_1.z = _2937;
    SV_Target_1.w = _2765;
    discard_exit();
}


