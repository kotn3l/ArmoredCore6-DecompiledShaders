#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1181;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _250.z;
    float _261 = exp2(log2(_255 * 22.0) * 260.0);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _288 = cbMtdParam._m0[10u].x * _277.x;
    float _289 = cbMtdParam._m0[10u].y * _277.y;
    float _290 = cbMtdParam._m0[10u].z * _277.z;
    vec4 _302 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _345 = (((((cbMtdParam._m0[9u].x * _302.x) - _288) * _263) + _288) * 4.55000019073486328125) * _337.x;
    float _347 = (((((cbMtdParam._m0[9u].y * _302.y) - _289) * _263) + _289) * 4.55000019073486328125) * _337.y;
    float _349 = (((((cbMtdParam._m0[9u].z * _302.z) - _290) * _263) + _290) * 4.55000019073486328125) * _337.z;
    float _350 = _337.w * _302.w;
    float _376 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _263) + cbMtdParam._m0[17u].x;
    vec4 _388 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _390 = _388.x;
    float _391 = _388.y;
    float _397 = cbMtdParam._m0[14u].y + _388.z;
    vec4 _409 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _426 = (((_263 * (_255 + (-0.5))) + 0.5) * 2.0) * ((((_409.z - _397) + cbMtdParam._m0[14u].x) * _263) + _397);
    float _444 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3594 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _450 = (_445 * _445) * (3.0 - (_445 * 2.0));
    vec4 _463 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _471 = (_250.x * 2.0) + (-1.0);
    float _472 = (_250.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3605 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    float _491 = (cbMtdParam._m0[14u].z * (((((_409.x - _390) * _263) + _390) * 2.0) + (-1.0))) + _471;
    float _492 = (cbMtdParam._m0[14u].z * (((((_409.y - _391) * _263) + _391) * 2.0) + (-1.0))) + _472;
    float _495 = fma(_478, _235, fma(_492, _227 * TANGENT.x, (_213 * _205) * _491));
    float _498 = fma(_478, _236, fma(_492, _227 * TANGENT.y, (_213 * _206) * _491));
    float _501 = fma(_478, _237, fma(_492, _227 * TANGENT.z, (_213 * _207) * _491));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3616 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _509 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _510 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _511 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _512 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _513 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _514 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _530 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _582 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _572);
    float _583 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _572);
    float _584 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _572);
    float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
    float _589 = _582 * _588;
    float _590 = _583 * _588;
    float _591 = _584 * _588;
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _600 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _602 = _600.w;
    float _621 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _624 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _627 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    vec4 _629 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _631 = _629.x;
    float _643 = (((_629.y - _510) + (_629.w * _510)) * cbMtdParam._m0[3u].x) + _510;
    float _660 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_631 * _631)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _668 = (((cbMatDynParam._m0[15u].x - _514) * cbMatDynParam._m0[15u].w) * _660) + _514;
    float _676 = ((_660 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _643)) + _643;
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _702 = _700 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * _511) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * _512) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * _513) * cbInstanceData._m0[_703].z;
    float _3682 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _715 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _720 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _731 = (((_720.x - _668) + (_720.w * _668)) * cbMtdParam._m0[3u].x) + _668;
    float _744 = (cbMtdParam._m0[3u].x * (((_712 * _602) - _712) + _715.x)) + _712;
    float _745 = (cbMtdParam._m0[3u].x * (((_713 * _602) - _713) + _715.y)) + _713;
    float _746 = (cbMtdParam._m0[3u].x * (((_714 * _602) - _714) + _715.z)) + _714;
    vec4 _747 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _760 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_668 * (_511 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_668 * (_512 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_668 * (_513 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _747.z;
    float _764 = _760 * cbMatDynParam._m0[13u].w;
    float _774 = (_764 * (cbMatDynParam._m0[13u].x - _744)) + _744;
    float _775 = (_764 * (cbMatDynParam._m0[13u].y - _745)) + _745;
    float _776 = (_764 * (cbMatDynParam._m0[13u].z - _746)) + _746;
    float _784 = ((_760 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _731)) + _731;
    float _785 = 1.0 - _784;
    float _786 = _785 * _774;
    float _787 = _785 * _775;
    float _788 = _785 * _776;
    float _792 = (_774 + (-0.039999999105930328369140625)) * _784;
    float _793 = (_775 + (-0.039999999105930328369140625)) * _784;
    float _794 = (_776 + (-0.039999999105930328369140625)) * _784;
    float _795 = _792 + 0.039999999105930328369140625;
    float _796 = _793 + 0.039999999105930328369140625;
    float _797 = _794 + 0.039999999105930328369140625;
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _809 = _806.x * TEXCOORD_4;
    float _810 = dot(vec3(_506, _507, _508), vec3(_589, _590, _591));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _506) - _589;
    float _818 = (_813 * _507) - _590;
    float _819 = (_813 * _508) - _591;
    float _823 = abs(dot(vec3(_589, _590, _591), vec3(_506, _507, _508)));
    float _3715 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_676);
    float _837 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _843 = (1.0 - _837) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _844 = _837 * _825;
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1180;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _911 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _915 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _938 = _872 + _506;
        float _939 = _876 + _507;
        float _940 = _880 + _508;
        float _950 = fma(_940, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1008 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_974.x + (-0.5));
        float _1010 = _1008 * (_974.y + (-0.5));
        float _1011 = _1008 * (_974.z + (-0.5));
        float _1018 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_981.x + (-0.5));
        float _1020 = _1018 * (_981.y + (-0.5));
        float _1021 = _1018 * (_981.z + (-0.5));
        float _1028 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_988.x + (-0.5));
        float _1030 = _1028 * (_988.y + (-0.5));
        float _1031 = _1028 * (_988.z + (-0.5));
        float _1038 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_995.x + (-0.5));
        float _1040 = _1038 * (_995.y + (-0.5));
        float _1041 = _1038 * (_995.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1062 = (dot(vec3(_506, _507, _508), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1072 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3763 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1074 + 1.0))) + _1079) * _1042;
        float _1089 = _1010 * 0.5;
        float _1090 = _1020 * 0.5;
        float _1091 = _1030 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_506, _507, _508), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3796 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1116 + 1.0))) + _1121) * _1043;
        float _1131 = _1011 * 0.5;
        float _1132 = _1021 * 0.5;
        float _1133 = _1031 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_506, _507, _508), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3829 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1158 + 1.0))) + _1163) * _1044;
        _1180 = _1011;
        _1182 = _1010;
        _1183 = _1009;
        _1184 = _1021;
        _1185 = _1020;
        _1186 = _1019;
        _1187 = _1031;
        _1188 = _1030;
        _1189 = _1029;
        _1190 = _1044;
        _1191 = _1043;
        _1192 = _1042;
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _1181;
        _1182 = _1181;
        _1183 = _1181;
        _1184 = _1181;
        _1185 = _1181;
        _1186 = _1181;
        _1187 = _1181;
        _1188 = _1181;
        _1189 = _1181;
        _1190 = _1181;
        _1191 = _1181;
        _1192 = _1181;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1225 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1229 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1252 = _872 + _506;
        float _1253 = _876 + _507;
        float _1254 = _880 + _508;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_506, _507, _508), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3892 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_506, _507, _508), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3925 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_506, _507, _508), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3958 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1181;
        _1491 = _1181;
        _1492 = _1181;
        _1493 = _1181;
        _1494 = _1181;
        _1495 = _1181;
        _1496 = _1181;
        _1497 = _1181;
        _1498 = _1181;
        _1499 = _1181;
        _1500 = _1181;
        _1501 = _1181;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1193)) + _1193;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1194)) + _1194;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1195)) + _1195;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _817 * 0.5;
    float _1559 = _818 * 0.5;
    float _1560 = _819 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1180, _1184, _1187, _1190));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1685 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1688 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1716 = frontier_phi_16_14_ladder;
        }
        float _1941;
        if (_1685 > 0.0)
        {
            _1941 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1941 = frontier_phi_25_21_ladder;
        }
        float _2198;
        if (_1688 > 0.0)
        {
            _2198 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2198 = frontier_phi_37_32_ladder;
        }
        float _2200 = isnan(_1941) ? _1716 : (isnan(_1716) ? _1941 : min(_1716, _1941));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1682) + _1671;
        float _2206 = (_2201 * _1685) + _1675;
        float _2207 = (_2201 * _1688) + _1679;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_15_37_ladder = _2335.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2335.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2335.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_15_37_ladder_2;
        _1706 = frontier_phi_15_37_ladder_1;
        _1708 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1624);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1768 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1772 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1776 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1779 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1782 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1785 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1946;
        if (_1779 > 0.0)
        {
            _1946 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1946 = frontier_phi_27_23_ladder;
        }
        float _2225;
        if (_1782 > 0.0)
        {
            _2225 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2225 = frontier_phi_39_34_ladder;
        }
        float _2438;
        if (_1785 > 0.0)
        {
            _2438 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2438 = frontier_phi_48_45_ladder;
        }
        float _2440 = isnan(_2225) ? _1946 : (isnan(_1946) ? _2225 : min(_1946, _2225));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1779) + _1768;
        float _2446 = (_2441 * _1782) + _1772;
        float _2447 = (_2441 * _1785) + _1776;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_24_48_ladder = _2688.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2688.x * cbModelParam._m0[1u].z;
        }
        _1804 = frontier_phi_24_48_ladder_2;
        _1806 = frontier_phi_24_48_ladder_1;
        _1808 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1713);
        _1804 = _1788.x * cbModelParam._m0[1u].z;
        _1806 = _1788.y * cbModelParam._m0[1u].z;
        _1808 = _1788.z * cbModelParam._m0[1u].z;
    }
    float _1821 = (((_843 * _795) + _844) * _809) * ((cbModelParam._m0[1u].w * (_1804 - _1704)) + _1704);
    float _1823 = (((_843 * _796) + _844) * _809) * ((cbModelParam._m0[1u].w * (_1806 - _1706)) + _1706);
    float _1825 = (((_843 * _797) + _844) * _809) * ((cbModelParam._m0[1u].w * (_1808 - _1708)) + _1708);
    float _1828 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1821 * cbSceneParam._m0[91u].x));
    vec4 _1842 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1844 = _1842.w;
    float _1856 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1844);
    float _1857 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1844);
    float _1858 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1844);
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _809 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1900 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1904 = _1864 | 1u;
    float _1915 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_506, _507, _508));
    float _1918 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_506, _507, _508));
    float _4094 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _4105 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1923 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1925 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1932 = ((cbLight._m0[_1881].x * _1887) * _1925) + (((cbLight._m0[_1891].x * _1856) * _1900) * _1923);
    float _1933 = ((_1887 * cbLight._m0[_1881].y) * _1925) + (((cbLight._m0[_1891].y * _1857) * _1900) * _1923);
    float _1934 = ((_1887 * cbLight._m0[_1881].z) * _1925) + (((cbLight._m0[_1891].z * _1858) * _1900) * _1923);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1932;
        _1953 = _1933;
        _1955 = _1934;
    }
    else
    {
        uint _1959 = _1864 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4116 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1978 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1934;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2169 = _1864 + 7u;
        float _2185 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4132 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2188 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1996 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _1951;
        _1998 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _1953;
        _2000 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _1955;
    }
    uint _2003 = _1864 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _676) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1864].x + _589;
    float _2019 = cbLight._m0[_1864].y + _590;
    float _2020 = cbLight._m0[_1864].z + _591;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1864].xyz));
    float _4148 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2032 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2033 = dot(vec3(_506, _507, _508), vec3(_2025, _2026, _2027));
    float _4170 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2025, _2026, _2027));
    float _4181 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2053 = exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0);
    float _2054 = 0.959999978542327880859375 - _792;
    float _2056 = 0.959999978542327880859375 - _793;
    float _2057 = 0.959999978542327880859375 - _794;
    float _2064 = 1.0 - _2017;
    float _2075 = (0.5 / (((_2032 * ((_2031 * _2064) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2064) + _2017) * _2031))) * _2031;
    float _4192 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2091 = _1864 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _676) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1904].x + _589;
    float _2105 = cbLight._m0[_1904].y + _590;
    float _2106 = cbLight._m0[_1904].z + _591;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1904].xyz));
    float _4203 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2118 = dot(vec3(_506, _507, _508), vec3(_2111, _2112, _2113));
    float _4214 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2111, _2112, _2113));
    float _4225 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
    float _2144 = 1.0 - _2103;
    float _2154 = (0.5 / (((_2032 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2144) + _2103) * _2117))) * _2117;
    float _4236 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2166 = (((((_2137 * _2054) + _795) * cbLight._m0[_2091].x) * _2156) * _1887) + ((((cbLight._m0[_2003].x * _1856) * ((_2053 * _2054) + _795)) * _2077) * _1900);
    float _2167 = (((((_2137 * _2056) + _796) * cbLight._m0[_2091].y) * _2156) * _1887) + ((((cbLight._m0[_2003].y * _1857) * ((_2053 * _2056) + _796)) * _2077) * _1900);
    float _2168 = (((((_2137 * _2057) + _797) * cbLight._m0[_2091].z) * _2156) * _1887) + ((((cbLight._m0[_2003].z * _1858) * ((_2053 * _2057) + _797)) * _2077) * _1900);
    float _2230;
    float _2232;
    float _2234;
    if (_1940)
    {
        _2230 = _2166;
        _2232 = _2167;
        _2234 = _2168;
    }
    else
    {
        uint _2236 = _1864 + 2u;
        uint _2240 = _1864 + 10u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _676) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _589;
        float _2257 = cbLight._m0[_2236].y + _590;
        float _2258 = cbLight._m0[_2236].z + _591;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2236].xyz));
        float _4247 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2270 = dot(vec3(_506, _507, _508), vec3(_2263, _2264, _2265));
        float _4258 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4269 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
        float _2296 = 1.0 - _2255;
        float _2306 = (0.5 / (((_2032 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2296) + _2255) * _2269))) * _2269;
        float _4280 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2230 = (((((_2289 * _2054) + _795) * cbLight._m0[_2240].x) * _2308) * _2309) + _2166;
        _2232 = (((((_2289 * _2056) + _796) * cbLight._m0[_2240].y) * _2308) * _2309) + _2167;
        _2234 = (((((_2289 * _2057) + _797) * cbLight._m0[_2240].z) * _2308) * _2309) + _2168;
    }
    float _2344;
    float _2346;
    float _2348;
    if (_1958)
    {
        _2344 = _2230;
        _2346 = _2232;
        _2348 = _2234;
    }
    else
    {
        uint _2355 = _1864 + 3u;
        uint _2359 = _1864 + 11u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _676) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _589;
        float _2376 = cbLight._m0[_2355].y + _590;
        float _2377 = cbLight._m0[_2355].z + _591;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2355].xyz));
        float _4296 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2389 = dot(vec3(_506, _507, _508), vec3(_2382, _2383, _2384));
        float _4307 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4318 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2032 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2415) + _2374) * _2388))) * _2388;
        float _4329 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2344 = (((((_2408 * _2054) + _795) * cbLight._m0[_2359].x) * _2427) * _2428) + _2230;
        _2346 = (((((_2408 * _2056) + _796) * cbLight._m0[_2359].y) * _2427) * _2428) + _2232;
        _2348 = (((((_2408 * _2057) + _797) * cbLight._m0[_2359].z) * _2427) * _2428) + _2234;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1862.y == 0u)
    {
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2503;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2503;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2503;
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2519)));
        float _2540 = (log2(_2506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
        }
        else
        {
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            uint _2852 = 0u;
            uint _2861;
            bool _2862;
            for (;;)
            {
                _2861 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                _2862 = _2861 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2862)
                {
                    frontier_phi_63_pred = _2851;
                    frontier_phi_63_pred_1 = _2850;
                    frontier_phi_63_pred_2 = _2849;
                    frontier_phi_63_pred_3 = _2848;
                    frontier_phi_63_pred_4 = _2847;
                    frontier_phi_63_pred_5 = _2846;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2861;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2852 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _2504;
                        float _3037 = _2996.y - _2505;
                        float _3038 = _2996.z - _2506;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_621, _624, _627), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4355 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _2504;
                        float _3072 = (-0.0) - _2505;
                        float _3073 = (-0.0) - _2506;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3088 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _825;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_621, _624, _627), vec3(_3078, _3079, _3080));
                        float _4371 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3113 = dot(vec3(_621, _624, _627), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4382 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3056 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3046) + _3122;
                        float _4393 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4404 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3120 * _3120) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2905 = (_3067 * _3015.x) + _2973;
                        _2906 = (_3067 * _3015.y) + _2974;
                        _2907 = (_3067 * _3015.z) + _2975;
                        _2902 = (_3148 * _3032.x) + _2970;
                        _2903 = (_3148 * _3032.y) + _2971;
                        _2904 = (_3148 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_63_pred = _2907;
                    frontier_phi_63_pred_1 = _2906;
                    frontier_phi_63_pred_2 = _2905;
                    frontier_phi_63_pred_3 = _2904;
                    frontier_phi_63_pred_4 = _2903;
                    frontier_phi_63_pred_5 = _2902;
                }
                _2704 = frontier_phi_63_pred;
                _2702 = frontier_phi_63_pred_1;
                _2700 = frontier_phi_63_pred_2;
                _2698 = frontier_phi_63_pred_3;
                _2696 = frontier_phi_63_pred_4;
                _2694 = frontier_phi_63_pred_5;
                uint _2853 = _2852 + 1u;
                if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2846 = _2694;
                    _2847 = _2696;
                    _2848 = _2698;
                    _2849 = _2700;
                    _2850 = _2702;
                    _2851 = _2704;
                    _2852 = _2853;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
        }
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.z;
        uint _2710 = (_2708 >> 8u) & 15u;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((4294967295u << _2710) & _2550) == 0u)
        {
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
        }
        else
        {
            float _2839 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
            float _2840 = _2839 * _2504;
            float _2841 = _2839 * _2505;
            float _2842 = _2839 * _2506;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2710 < ((_2708 >> 12u) & 15u))
            {
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2953 = _2693;
                float _2954 = _2695;
                float _2955 = _2697;
                float _2956 = _2699;
                float _2957 = _2701;
                float _2958 = _2703;
                uint _2959 = _2710;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2969)
                    {
                        frontier_phi_69_pred = _2958;
                        frontier_phi_69_pred_1 = _2957;
                        frontier_phi_69_pred_2 = _2956;
                        frontier_phi_69_pred_3 = _2955;
                        frontier_phi_69_pred_4 = _2954;
                        frontier_phi_69_pred_5 = _2953;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        uint _3172 = _2968;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3241;
                        vec4 _3257;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3183 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3228 = (_3183 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3244 = (_3183 * 40u) + 20u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3260 = (_3183 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3183 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2506, _3292.z, fma(_2505, _3292.y, _3292.x * _2504)) + _3292.w;
                            _3305 = !((fma(_2506, _3273.z, fma(_2505, _3273.y, _3273.x * _2504)) + _3273.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3198.x - _2504;
                                float _3333 = _3198.y - _2505;
                                float _3334 = _3198.z - _2506;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3199 * _3199));
                                float _4415 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3350 = sqrt(_3335) * _3214.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_621, _624, _627))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2506, _3241.z, fma(_2505, _3241.y, _3241.x * _2504)) + _3241.w) / _3304;
                                float _3364 = (fma(_2506, _3257.z, fma(_2505, _3257.y, _3257.x * _2504)) + _3257.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4431 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _825;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2840;
                                float _3394 = _3340 - _2841;
                                float _3395 = _3341 - _2842;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2840, (-0.0) - _2841, (-0.0) - _2842));
                                float _4442 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3407 = dot(vec3(_621, _624, _627), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4453 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_621, _624, _627), vec3(_3339, _3340, _3341))) + _3416;
                                float _4464 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4475 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3370 * _3214.z;
                                frontier_phi_75_pred_1 = _3370 * _3214.y;
                                frontier_phi_75_pred_2 = _3370 * _3214.x;
                                frontier_phi_75_pred_3 = _3444 * _3226.z;
                                frontier_phi_75_pred_4 = _3444 * _3226.y;
                                frontier_phi_75_pred_5 = _3444 * _3226.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3453 = frontier_phi_75_pred;
                            _3452 = frontier_phi_75_pred_1;
                            _3451 = frontier_phi_75_pred_2;
                            _3450 = frontier_phi_75_pred_3;
                            _3449 = frontier_phi_75_pred_4;
                            _3448 = frontier_phi_75_pred_5;
                            _3156 = _3451 + _3169;
                            _3157 = _3452 + _3170;
                            _3158 = _3453 + _3171;
                            _3153 = _3448 + _3166;
                            _3154 = _3449 + _3167;
                            _3155 = _3450 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3158;
                        frontier_phi_69_pred_1 = _3157;
                        frontier_phi_69_pred_2 = _3156;
                        frontier_phi_69_pred_3 = _3155;
                        frontier_phi_69_pred_4 = _3154;
                        frontier_phi_69_pred_5 = _3153;
                    }
                    _2825 = frontier_phi_69_pred;
                    _2823 = frontier_phi_69_pred_1;
                    _2821 = frontier_phi_69_pred_2;
                    _2819 = frontier_phi_69_pred_3;
                    _2817 = frontier_phi_69_pred_4;
                    _2815 = frontier_phi_69_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2815;
                        _2954 = _2817;
                        _2955 = _2819;
                        _2956 = _2821;
                        _2957 = _2823;
                        _2958 = _2825;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2825;
                frontier_phi_57_58_ladder_1 = _2823;
                frontier_phi_57_58_ladder_2 = _2821;
                frontier_phi_57_58_ladder_3 = _2819;
                frontier_phi_57_58_ladder_4 = _2817;
                frontier_phi_57_58_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_57_58_ladder = _2703;
                frontier_phi_57_58_ladder_1 = _2701;
                frontier_phi_57_58_ladder_2 = _2699;
                frontier_phi_57_58_ladder_3 = _2697;
                frontier_phi_57_58_ladder_4 = _2695;
                frontier_phi_57_58_ladder_5 = _2693;
            }
            _2814 = frontier_phi_57_58_ladder_5;
            _2816 = frontier_phi_57_58_ladder_4;
            _2818 = frontier_phi_57_58_ladder_3;
            _2820 = frontier_phi_57_58_ladder_2;
            _2822 = frontier_phi_57_58_ladder_1;
            _2824 = frontier_phi_57_58_ladder;
        }
        float _2829 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2562 = (_2829 * _2820) + _1996;
        _2564 = (_2829 * _2822) + _1998;
        _2566 = (_2829 * _2824) + _2000;
        _2568 = ((_2814 * _795) * _2829) + _2344;
        _2570 = ((_2816 * _796) * _2829) + _2346;
        _2572 = ((_2818 * _797) * _2829) + _2348;
    }
    else
    {
        _2562 = _1996;
        _2564 = _1998;
        _2566 = _2000;
        _2568 = _2344;
        _2570 = _2346;
        _2572 = _2348;
    }
    uint _2578 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _2588 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _450) * _463.x) * cbInstanceData._m0[_2578].x;
    float _2593 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _450) * _463.y) * cbInstanceData._m0[_2578].y;
    float _2598 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _450) * _463.z) * cbInstanceData._m0[_2578].z;
    float _4491 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4502 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4513 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4524 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2616 = (((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2562 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _809))) + ((_2568 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1613)) * cbPerFrame._m0[3u].x)) + _2588;
    float _2618 = (_2593 + ((_2570 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1613)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2564 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _809)));
    float _2620 = (_2598 + ((_2572 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1613)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2566 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _809)));
    float _4550 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2633 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2638 = cbInstanceData._m0[_700 + 6u].w * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)));
    float _2643 = _597 / cbSceneParam._m0[86u].x;
    float _2644 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2658 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, (log2((isnan(cbSceneParam._m0[77u].w) ? _530 : (isnan(_530) ? cbSceneParam._m0[77u].w : min(_530, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2660 = _2658.x;
    float _2661 = _2658.y;
    float _2662 = _2658.z;
    float _2663 = _2658.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_530 > cbSceneParam._m0[78u].w)
    {
        float _2718 = isnan(_530) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _530 : min(cbSceneParam._m0[80u].w, _530));
        float _2719 = _2718 / _530;
        float _2730 = _2719 * _582;
        float _2731 = _583 * _2719;
        float _2732 = (-0.0) - _2731;
        float _2733 = _2719 * _584;
        float _2735 = (cbSceneParam._m0[77u].w * _2732) / _2718;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2731;
        float _2743 = sqrt(((_2730 * _2730) + (_2731 * _2731)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2718)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2732 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2875 = 1.0 / cbSceneParam._m0[80u].x;
            float _2876 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2877 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            _2915 = ((abs(_2743 / _2732) * cbSceneParam._m0[80u].y) * ((((_2886 - _2887) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))))) * _2875)) - ((exp2(_2753 * _2886) - exp2(_2753 * _2887)) * _2875))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2663);
        _2755 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2660;
        _2757 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2661;
        _2759 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2662;
        _2761 = _2926 * _2663;
    }
    else
    {
        _2755 = _2660;
        _2757 = _2661;
        _2759 = _2662;
        _2761 = _2663;
    }
    float _2773 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2774 = _2773 == 3.0;
    float _2775 = log2(_2761);
    float _2779 = exp2(_2775 * cbSceneParam._m0[78u].x);
    float _2780 = exp2(_2775 * cbSceneParam._m0[78u].y);
    float _2781 = exp2(_2775 * cbSceneParam._m0[78u].z);
    float _2782 = _2779 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0)));
    float _2783 = _2780 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)));
    float _2784 = _2781 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)));
    float _2793 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2793 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.y = _2793 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.z = _2793 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.w = _2638;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2588) * _2633) * _2779) * _2793;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2593) * _2633) * _2780) * _2793;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2598) * _2633) * _2781) * _2793;
    SV_Target_1.w = _2638;
}


