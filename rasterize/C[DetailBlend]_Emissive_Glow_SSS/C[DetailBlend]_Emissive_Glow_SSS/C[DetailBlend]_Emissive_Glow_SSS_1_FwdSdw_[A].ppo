#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3944;
float _3945;
float _3946;
float _3947;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _267 = exp2(log2(_261 * 22.0) * 260.0);
    float _268 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _269 = isnan(1.0) ? _268 : (isnan(_268) ? 1.0 : min(_268, 1.0));
    vec4 _283 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _294 = cbMtdParam._m0[10u].x * _283.x;
    float _295 = cbMtdParam._m0[10u].y * _283.y;
    float _296 = cbMtdParam._m0[10u].z * _283.z;
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _351 = (((((cbMtdParam._m0[9u].x * _308.x) - _294) * _269) + _294) * 4.55000019073486328125) * _343.x;
    float _353 = (((((cbMtdParam._m0[9u].y * _308.y) - _295) * _269) + _295) * 4.55000019073486328125) * _343.y;
    float _355 = (((((cbMtdParam._m0[9u].z * _308.z) - _296) * _269) + _296) * 4.55000019073486328125) * _343.z;
    float _356 = _343.w * _308.w;
    vec4 _372 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = (((_372.x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _269) + cbMtdParam._m0[17u].x;
    vec4 _394 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _396 = _394.x;
    float _397 = _394.y;
    float _403 = cbMtdParam._m0[14u].y + _394.z;
    vec4 _415 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _432 = (((_269 * (_261 + (-0.5))) + 0.5) * 2.0) * ((((_415.z - _403) + cbMtdParam._m0[14u].x) * _269) + _403);
    float _450 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3966 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _456 = (_451 * _451) * (3.0 - (_451 * 2.0));
    vec4 _469 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _477 = (_256.x * 2.0) + (-1.0);
    float _478 = (_256.y * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3977 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    float _497 = (cbMtdParam._m0[14u].z * (((((_415.x - _396) * _269) + _396) * 2.0) + (-1.0))) + _477;
    float _498 = (cbMtdParam._m0[14u].z * (((((_415.y - _397) * _269) + _397) * 2.0) + (-1.0))) + _478;
    float _501 = fma(_484, _241, fma(_498, _233 * TANGENT.x, (_219 * _211) * _497));
    float _504 = fma(_484, _242, fma(_498, _233 * TANGENT.y, (_219 * _212) * _497));
    float _507 = fma(_484, _243, fma(_498, _233 * TANGENT.z, (_219 * _213) * _497));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3988 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _515 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _516 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _517 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _518 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _519 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _520 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    vec4 _602 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _604 = _602.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_588 * _588) + (_589 * _589)) + (_590 * _590));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _4054 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _4065 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) - _916)) + _916) < ((_604 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _618 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _620 = _618.w;
    float _639 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _642 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _645 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    vec4 _647 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _649 = _647.x;
    float _661 = (((_647.y - _516) + (_647.w * _516)) * cbMtdParam._m0[3u].x) + _516;
    float _678 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_649 * _649)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _686 = (((cbMatDynParam._m0[15u].x - _520) * cbMatDynParam._m0[15u].w) * _678) + _520;
    float _694 = ((_678 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _661)) + _661;
    uint _718 = uint(roundEven(NORMAL.w)) * 13u;
    uint _720 = _718 + 9u;
    uint _721 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * _517) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * _518) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * _519) * cbInstanceData._m0[_721].z;
    float _4076 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _738 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = (((_738.x - _686) + (_738.w * _686)) * cbMtdParam._m0[3u].x) + _686;
    float _762 = (cbMtdParam._m0[3u].x * (((_730 * _620) - _730) + _733.x)) + _730;
    float _763 = (cbMtdParam._m0[3u].x * (((_731 * _620) - _731) + _733.y)) + _731;
    float _764 = (cbMtdParam._m0[3u].x * (((_732 * _620) - _732) + _733.z)) + _732;
    vec4 _765 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _778 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_686 * (_517 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_686 * (_518 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_686 * (_519 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _765.z;
    float _782 = _778 * cbMatDynParam._m0[13u].w;
    float _792 = (_782 * (cbMatDynParam._m0[13u].x - _762)) + _762;
    float _793 = (_782 * (cbMatDynParam._m0[13u].y - _763)) + _763;
    float _794 = (_782 * (cbMatDynParam._m0[13u].z - _764)) + _764;
    float _802 = ((_778 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _749)) + _749;
    float _803 = 1.0 - _802;
    float _804 = _803 * _792;
    float _805 = _803 * _793;
    float _806 = _803 * _794;
    float _810 = (_792 + (-0.039999999105930328369140625)) * _802;
    float _811 = (_793 + (-0.039999999105930328369140625)) * _802;
    float _812 = (_794 + (-0.039999999105930328369140625)) * _802;
    float _813 = _810 + 0.039999999105930328369140625;
    float _814 = _811 + 0.039999999105930328369140625;
    float _815 = _812 + 0.039999999105930328369140625;
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _827 = _824.x * TEXCOORD_4;
    float _828 = dot(vec3(_512, _513, _514), vec3(_595, _596, _597));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _512) - _595;
    float _836 = (_831 * _513) - _596;
    float _837 = (_831 * _514) - _597;
    float _841 = abs(dot(vec3(_595, _596, _597), vec3(_512, _513, _514)));
    float _4109 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_694);
    float _855 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _861 = (1.0 - _855) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _862 = _855 * _843;
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _958 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _962 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _985 = _890 + _512;
        float _986 = _894 + _513;
        float _987 = _898 + _514;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _954;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _958;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _962;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_512, _513, _514), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _4157 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_512, _513, _514), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4190 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_512, _513, _514), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _4223 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1275 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1279 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1302 = _890 + _512;
        float _1303 = _894 + _513;
        float _1304 = _898 + _514;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_512, _513, _514), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4286 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_512, _513, _514), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4319 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_512, _513, _514), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4352 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = _1228;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1240)) + _1240;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1241)) + _1241;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _835 * 0.5;
    float _1609 = _836 * 0.5;
    float _1610 = _837 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1648;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1659;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1650 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1663 = (_1659 * cbModelParam._m0[1u].x) + (_1648 * (1.0 - cbModelParam._m0[1u].x));
    float _1673 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1673 : min(cbModelParam._m0[25u].z, _1673));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1735 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1738 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1766 = frontier_phi_19_17_ladder;
        }
        float _1939;
        if (_1735 > 0.0)
        {
            _1939 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1939 = frontier_phi_28_24_ladder;
        }
        float _2234;
        if (_1738 > 0.0)
        {
            _2234 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2234 = frontier_phi_40_35_ladder;
        }
        float _2236 = isnan(_1939) ? _1766 : (isnan(_1766) ? _1939 : min(_1766, _1939));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1732) + _1721;
        float _2242 = (_2237 * _1735) + _1725;
        float _2243 = (_2237 * _1738) + _1729;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1674);
            frontier_phi_18_40_ladder = _2388.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2388.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2388.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_18_40_ladder_2;
        _1756 = frontier_phi_18_40_ladder_1;
        _1758 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1674);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1818 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1822 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1826 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1829 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1832 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1835 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1944;
        if (_1829 > 0.0)
        {
            _1944 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1944 = frontier_phi_30_26_ladder;
        }
        float _2261;
        if (_1832 > 0.0)
        {
            _2261 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2261 = frontier_phi_42_37_ladder;
        }
        float _2599;
        if (_1835 > 0.0)
        {
            _2599 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2599 = frontier_phi_52_49_ladder;
        }
        float _2601 = isnan(_2261) ? _1944 : (isnan(_1944) ? _2261 : min(_1944, _2261));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1829) + _1818;
        float _2607 = (_2602 * _1832) + _1822;
        float _2608 = (_2602 * _1835) + _1826;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_27_52_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1854 = frontier_phi_27_52_ladder_2;
        _1856 = frontier_phi_27_52_ladder_1;
        _1858 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1763);
        _1854 = _1838.x * cbModelParam._m0[1u].z;
        _1856 = _1838.y * cbModelParam._m0[1u].z;
        _1858 = _1838.z * cbModelParam._m0[1u].z;
    }
    float _1871 = (((_861 * _813) + _862) * _827) * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1873 = (((_861 * _814) + _862) * _827) * ((cbModelParam._m0[1u].w * (_1856 - _1756)) + _1756);
    float _1875 = (((_861 * _815) + _862) * _827) * ((cbModelParam._m0[1u].w * (_1858 - _1758)) + _1758);
    float _1878 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1871 * cbSceneParam._m0[91u].x));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1931 = _1918 / _1930;
    float _1932 = _1922 / _1930;
    float _1933 = _1926 / _1930;
    float _2080;
    float _2081;
    float _2082;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1960 = ((uint(_1933 > cbSceneParam._m0[59u].y) + uint(_1933 > cbSceneParam._m0[59u].x)) + uint(_1933 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1961 = _1960 + 43u;
        uint _1969 = _1960 + 44u;
        uint _1977 = _1960 + 45u;
        uint _1985 = _1960 + 46u;
        float _1996 = fma(_1930, cbSceneParam._m0[_1961].w, fma(_1926, cbSceneParam._m0[_1961].z, fma(_1922, cbSceneParam._m0[_1961].y, _1918 * cbSceneParam._m0[_1961].x)));
        float _2000 = fma(_1930, cbSceneParam._m0[_1969].w, fma(_1926, cbSceneParam._m0[_1969].z, fma(_1922, cbSceneParam._m0[_1969].y, _1918 * cbSceneParam._m0[_1969].x)));
        float _2008 = fma(_1930, cbSceneParam._m0[_1985].w, fma(_1926, cbSceneParam._m0[_1985].z, fma(_1922, cbSceneParam._m0[_1985].y, _1918 * cbSceneParam._m0[_1985].x)));
        float _2013 = cbSceneParam._m0[33u].z * _2008;
        float _2015 = cbSceneParam._m0[33u].w * _2008;
        float _2018 = fma(_1930, cbSceneParam._m0[_1977].w, fma(_1926, cbSceneParam._m0[_1977].z, fma(_1922, cbSceneParam._m0[_1977].y, _1918 * cbSceneParam._m0[_1977].x))) / _2008;
        float _2066 = (cbSceneParam._m0[33u].x - sqrt(((_1932 * _1932) + (_1931 * _1931)) + (_1933 * _1933))) * cbSceneParam._m0[33u].y;
        float _4478 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2073 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 + _1996) / _2008, (_2015 + _2000) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2015 + _1996) / _2008, (_2000 - _2013) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 - _2013) / _2008, (_2000 - _2015) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 - _2015) / _2008, (_2013 + _2000) / _2008), _2018), 0.0)).x), vec4(0.25)));
        _2080 = 1.0 - (_2073 * cbSceneParam._m0[34u].x);
        _2081 = 1.0 - (_2073 * cbSceneParam._m0[34u].y);
        _2082 = 1.0 - (_2073 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2080 = 1.0;
        _2081 = 1.0;
        _2082 = 1.0;
    }
    float _2146;
    float _2148;
    float _2150;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2134 = fma(_1930, cbSceneParam._m0[63u].w, fma(_1926, cbSceneParam._m0[63u].z, fma(_1922, cbSceneParam._m0[63u].y, _1918 * cbSceneParam._m0[63u].x)));
        float _2135 = fma(_1930, cbSceneParam._m0[60u].w, fma(_1926, cbSceneParam._m0[60u].z, fma(_1922, cbSceneParam._m0[60u].y, _1918 * cbSceneParam._m0[60u].x))) / _2134;
        float _2136 = fma(_1930, cbSceneParam._m0[61u].w, fma(_1926, cbSceneParam._m0[61u].z, fma(_1922, cbSceneParam._m0[61u].y, _1918 * cbSceneParam._m0[61u].x))) / _2134;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2135 >= cbSceneParam._m0[64u].x) && (_2136 >= cbSceneParam._m0[64u].y)) && (_2135 <= cbSceneParam._m0[64u].z)) && (_2136 <= cbSceneParam._m0[64u].w))
        {
            float _2274 = fma(_1930, cbSceneParam._m0[62u].w, fma(_1926, cbSceneParam._m0[62u].z, fma(_1922, cbSceneParam._m0[62u].y, _1918 * cbSceneParam._m0[62u].x))) / _2134;
            float _2278 = isnan(cbSceneParam._m0[41u].w) ? _2274 : (isnan(_2274) ? cbSceneParam._m0[41u].w : max(_2274, cbSceneParam._m0[41u].w));
            float _2321 = (cbSceneParam._m0[33u].x - sqrt(((_1932 * _1932) + (_1931 * _1931)) + (_1933 * _1933))) * cbSceneParam._m0[33u].y;
            float _4494 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
            float _2328 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2135, cbSceneParam._m0[33u].w + _2136), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2135, _2136 - cbSceneParam._m0[33u].z), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2135 - cbSceneParam._m0[33u].z, _2136 - cbSceneParam._m0[33u].w), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2135 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2136), _2278), 0.0)).x), vec4(0.25)));
            float _2332 = 1.0 - (_2328 * cbSceneParam._m0[34u].x);
            float _2333 = 1.0 - (_2328 * cbSceneParam._m0[34u].y);
            float _2334 = 1.0 - (_2328 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
            frontier_phi_39_38_ladder_1 = isnan(_2332) ? _2080 : (isnan(_2080) ? _2332 : min(_2080, _2332));
            frontier_phi_39_38_ladder_2 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
        }
        else
        {
            frontier_phi_39_38_ladder = _2081;
            frontier_phi_39_38_ladder_1 = _2080;
            frontier_phi_39_38_ladder_2 = _2082;
        }
        _2146 = frontier_phi_39_38_ladder_1;
        _2148 = frontier_phi_39_38_ladder;
        _2150 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2146 = _2080;
        _2148 = _2081;
        _2150 = _2082;
    }
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_718 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2165 = _827 + (-1.0);
    float _2170 = (cbLight._m0[_2158].x * _2165) + 1.0;
    float _2171 = (cbLight._m0[_2158].y * _2165) + 1.0;
    float _2172 = (cbLight._m0[_2158].z * _2165) + 1.0;
    float _2173 = (cbLight._m0[_2158].w * _2165) + 1.0;
    uint _2174 = _2157 + 5u;
    float _2180 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2184 = _2157 + 4u;
    float _2193 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2197 = _2157 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_512, _513, _514));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_512, _513, _514));
    float _4530 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4541 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2174].x * _2180) * _2218) + (((cbLight._m0[_2184].x * _2146) * _2193) * _2216);
    float _2226 = ((_2180 * cbLight._m0[_2174].y) * _2218) + (((cbLight._m0[_2184].y * _2148) * _2193) * _2216);
    float _2227 = ((_2180 * cbLight._m0[_2174].z) * _2218) + (((cbLight._m0[_2184].z * _2150) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2157 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2233)
    {
        _2335 = _2225;
        _2337 = _2226;
        _2339 = _2227;
    }
    else
    {
        uint _2343 = _2157 + 6u;
        float _2359 = (dot(vec3(cbLight._m0[_2157 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4552 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2362 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2335 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2225;
        _2337 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2226;
        _2339 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2227;
    }
    bool _2342 = _2231.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2342)
    {
        _2397 = _2335;
        _2399 = _2337;
        _2401 = _2339;
    }
    else
    {
        uint _2570 = _2157 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2157 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4568 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2589 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2397 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2335;
        _2399 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2337;
        _2401 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2339;
    }
    uint _2404 = _2157 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _694) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2157].x + _595;
    float _2420 = cbLight._m0[_2157].y + _596;
    float _2421 = cbLight._m0[_2157].z + _597;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2157].xyz));
    float _4584 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2433 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2434 = dot(vec3(_512, _513, _514), vec3(_2426, _2427, _2428));
    float _4606 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2426, _2427, _2428));
    float _4617 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _810;
    float _2457 = 0.959999978542327880859375 - _811;
    float _2458 = 0.959999978542327880859375 - _812;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4628 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2492 = _2157 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _694) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2197].x + _595;
    float _2506 = cbLight._m0[_2197].y + _596;
    float _2507 = cbLight._m0[_2197].z + _597;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2197].xyz));
    float _4639 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2519 = dot(vec3(_512, _513, _514), vec3(_2512, _2513, _2514));
    float _4650 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2512, _2513, _2514));
    float _4661 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2433 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2545) + _2504) * _2518))) * _2518;
    float _4672 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2455) + _813) * cbLight._m0[_2492].x) * _2557) * _2180) + ((((cbLight._m0[_2404].x * _2146) * ((_2454 * _2455) + _813)) * _2478) * _2193);
    float _2568 = (((((_2538 * _2457) + _814) * cbLight._m0[_2492].y) * _2557) * _2180) + ((((cbLight._m0[_2404].y * _2148) * ((_2454 * _2457) + _814)) * _2478) * _2193);
    float _2569 = (((((_2538 * _2458) + _815) * cbLight._m0[_2492].z) * _2557) * _2180) + ((((cbLight._m0[_2404].z * _2150) * ((_2454 * _2458) + _815)) * _2478) * _2193);
    float _2625;
    float _2627;
    float _2629;
    if (_2233)
    {
        _2625 = _2567;
        _2627 = _2568;
        _2629 = _2569;
    }
    else
    {
        uint _2631 = _2157 + 2u;
        uint _2635 = _2157 + 10u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _694) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _595;
        float _2652 = cbLight._m0[_2631].y + _596;
        float _2653 = cbLight._m0[_2631].z + _597;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2631].xyz));
        float _4683 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2665 = dot(vec3(_512, _513, _514), vec3(_2658, _2659, _2660));
        float _4694 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4705 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2691 = 1.0 - _2650;
        float _2701 = (0.5 / (((_2433 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2691) + _2650) * _2664))) * _2664;
        float _4716 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2625 = (((((_2684 * _2455) + _813) * cbLight._m0[_2635].x) * _2703) * _2704) + _2567;
        _2627 = (((((_2684 * _2457) + _814) * cbLight._m0[_2635].y) * _2703) * _2704) + _2568;
        _2629 = (((((_2684 * _2458) + _815) * cbLight._m0[_2635].z) * _2703) * _2704) + _2569;
    }
    float _2735;
    float _2737;
    float _2739;
    if (_2342)
    {
        _2735 = _2625;
        _2737 = _2627;
        _2739 = _2629;
    }
    else
    {
        uint _2746 = _2157 + 3u;
        uint _2750 = _2157 + 11u;
        float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2746].w)) * _694) * 0.949999988079071044921875);
        float _2765 = _2764 * _2764;
        float _2766 = cbLight._m0[_2746].x + _595;
        float _2767 = cbLight._m0[_2746].y + _596;
        float _2768 = cbLight._m0[_2746].z + _597;
        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
        float _2773 = _2772 * _2766;
        float _2774 = _2772 * _2767;
        float _2775 = _2772 * _2768;
        float _2776 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2746].xyz));
        float _4732 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2780 = dot(vec3(_512, _513, _514), vec3(_2773, _2774, _2775));
        float _4743 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2784 = dot(vec3(cbLight._m0[_2746].xyz), vec3(_2773, _2774, _2775));
        float _4754 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2788 = _2765 * _2765;
        float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
        float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2806 = 1.0 - _2765;
        float _2816 = (0.5 / (((_2433 * ((_2779 * _2806) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2806) + _2765) * _2779))) * _2779;
        float _4765 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2735 = (((((_2799 * _2455) + _813) * cbLight._m0[_2750].x) * _2818) * _2819) + _2625;
        _2737 = (((((_2799 * _2457) + _814) * cbLight._m0[_2750].y) * _2818) * _2819) + _2627;
        _2739 = (((((_2799 * _2458) + _815) * cbLight._m0[_2750].z) * _2818) * _2819) + _2629;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2155.y == 0u)
    {
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.x;
        uint _2852 = uint((float(_2840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2841))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2841)));
        float _2862 = (log2(_1933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2863 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        uint _2866 = uint(isnan(14.0) ? _2863 : (isnan(_2863) ? 14.0 : min(_2863, 14.0)));
        uvec4 _2871 = texelFetch(g_lightClusterGridBuffer, int(((_2866 << 2u) + (_2852 << 6u)) >> 2u));
        uint _2872 = _2871.x;
        uint _2873 = _2840.z;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((((1u << ((_2873 >> 4u) & 15u)) + 4294967295u) & _2872) == 0u) || ((_2873 & 240u) == 0u))
        {
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
        }
        else
        {
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3171)
                {
                    frontier_phi_73_pred = _3160;
                    frontier_phi_73_pred_1 = _3159;
                    frontier_phi_73_pred_2 = _3158;
                    frontier_phi_73_pred_3 = _3157;
                    frontier_phi_73_pred_4 = _3156;
                    frontier_phi_73_pred_5 = _3155;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3170;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3161 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _1931;
                        float _3367 = _3326.y - _1932;
                        float _3368 = _3326.z - _1933;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_639, _642, _645), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4791 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _1931;
                        float _3402 = (-0.0) - _1932;
                        float _3403 = (-0.0) - _1933;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3417 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3418 = 1.0 - _843;
                        float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                        float _3426 = _3425 * _3425;
                        float _3427 = _3426 * _3426;
                        float _3428 = _3408 + _3373;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3438 = dot(vec3(_639, _642, _645), vec3(_3408, _3409, _3410));
                        float _4807 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3442 = dot(vec3(_639, _642, _645), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                        float _4818 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                        float _3450 = _3386 * _3426;
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3376) + _3451;
                        float _4829 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3456 = 1.0 - _3426;
                        float _3466 = (0.5 / (((_3455 * ((_3441 * _3456) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3426) * _3441))) * _3455;
                        float _4840 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3477 = (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3449 * _3449) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3230 = (_3397 * _3345.x) + _3303;
                        _3231 = (_3397 * _3345.y) + _3304;
                        _3232 = (_3397 * _3345.z) + _3305;
                        _3227 = (_3477 * _3362.x) + _3300;
                        _3228 = (_3477 * _3362.y) + _3301;
                        _3229 = (_3477 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_73_pred = _3232;
                    frontier_phi_73_pred_1 = _3231;
                    frontier_phi_73_pred_2 = _3230;
                    frontier_phi_73_pred_3 = _3229;
                    frontier_phi_73_pred_4 = _3228;
                    frontier_phi_73_pred_5 = _3227;
                }
                _3005 = frontier_phi_73_pred;
                _3003 = frontier_phi_73_pred_1;
                _3001 = frontier_phi_73_pred_2;
                _2999 = frontier_phi_73_pred_3;
                _2997 = frontier_phi_73_pred_4;
                _2995 = frontier_phi_73_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _2995;
                    _3156 = _2997;
                    _3157 = _2999;
                    _3158 = _3001;
                    _3159 = _3003;
                    _3160 = _3005;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
        }
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.z;
        uint _3011 = (_3009 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3011) & _2872) == 0u)
        {
            _3123 = _2994;
            _3125 = _2996;
            _3127 = _2998;
            _3129 = _3000;
            _3131 = _3002;
            _3133 = _3004;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
            float _3149 = _3148 * _1931;
            float _3150 = _3148 * _1932;
            float _3151 = _3148 * _1933;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3011 < ((_3009 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3283 = _2994;
                float _3284 = _2996;
                float _3285 = _2998;
                float _3286 = _3000;
                float _3287 = _3002;
                float _3288 = _3004;
                uint _3289 = _3011;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3299)
                    {
                        frontier_phi_84_pred = _3287;
                        frontier_phi_84_pred_1 = _3286;
                        frontier_phi_84_pred_2 = _3285;
                        frontier_phi_84_pred_3 = _3284;
                        frontier_phi_84_pred_4 = _3283;
                        frontier_phi_84_pred_5 = _3288;
                    }
                    else
                    {
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        uint _3510 = _3298;
                        uint _3511;
                        vec4 _3536;
                        float _3537;
                        vec4 _3552;
                        vec3 _3564;
                        vec4 _3579;
                        vec4 _3595;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3521 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3510));
                            _3511 = (_3510 + 4294967295u) & _3510;
                            uint _3523 = _3521 * 40u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3537 = _3536.w;
                            uint _3539 = (_3521 * 40u) + 4u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3521 * 40u) + 8u;
                            _3564 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x));
                            uint _3566 = (_3521 * 40u) + 16u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3582 = (_3521 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3598 = (_3521 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3521 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_1933, _3630.z, fma(_1932, _3630.y, _3630.x * _1931)) + _3630.w;
                            _3643 = !((fma(_1933, _3611.z, fma(_1932, _3611.y, _3611.x * _1931)) + _3611.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3536.x - _1931;
                                float _3671 = _3536.y - _1932;
                                float _3672 = _3536.z - _1933;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3537 * _3537));
                                float _4851 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3688 = sqrt(_3673) * _3552.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_639, _642, _645))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_1933, _3579.z, fma(_1932, _3579.y, _3579.x * _1931)) + _3579.w) / _3642;
                                float _3702 = (fma(_1933, _3595.z, fma(_1932, _3595.y, _3595.x * _1931)) + _3595.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4867 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _843;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3149;
                                float _3732 = _3678 - _3150;
                                float _3733 = _3679 - _3151;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_639, _642, _645), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4878 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3745 = dot(vec3(_639, _642, _645), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4889 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_639, _642, _645), vec3(_3677, _3678, _3679))) + _3754;
                                float _4900 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4911 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3708 * _3552.y;
                                frontier_phi_90_pred_1 = _3708 * _3552.x;
                                frontier_phi_90_pred_2 = _3782 * _3564.z;
                                frontier_phi_90_pred_3 = _3782 * _3564.y;
                                frontier_phi_90_pred_4 = _3782 * _3564.x;
                                frontier_phi_90_pred_5 = _3708 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3790 = frontier_phi_90_pred;
                            _3789 = frontier_phi_90_pred_1;
                            _3788 = frontier_phi_90_pred_2;
                            _3787 = frontier_phi_90_pred_3;
                            _3786 = frontier_phi_90_pred_4;
                            _3791 = frontier_phi_90_pred_5;
                            _3494 = _3789 + _3507;
                            _3495 = _3790 + _3508;
                            _3496 = _3791 + _3509;
                            _3491 = _3786 + _3504;
                            _3492 = _3787 + _3505;
                            _3493 = _3788 + _3506;
                            if (_3511 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3511;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3495;
                        frontier_phi_84_pred_1 = _3494;
                        frontier_phi_84_pred_2 = _3493;
                        frontier_phi_84_pred_3 = _3492;
                        frontier_phi_84_pred_4 = _3491;
                        frontier_phi_84_pred_5 = _3496;
                    }
                    _3132 = frontier_phi_84_pred;
                    _3130 = frontier_phi_84_pred_1;
                    _3128 = frontier_phi_84_pred_2;
                    _3126 = frontier_phi_84_pred_3;
                    _3124 = frontier_phi_84_pred_4;
                    _3134 = frontier_phi_84_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3124;
                        _3284 = _3126;
                        _3285 = _3128;
                        _3286 = _3130;
                        _3287 = _3132;
                        _3288 = _3134;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3134;
                frontier_phi_65_66_ladder_1 = _3130;
                frontier_phi_65_66_ladder_2 = _3132;
                frontier_phi_65_66_ladder_3 = _3126;
                frontier_phi_65_66_ladder_4 = _3124;
                frontier_phi_65_66_ladder_5 = _3128;
            }
            else
            {
                frontier_phi_65_66_ladder = _3004;
                frontier_phi_65_66_ladder_1 = _3000;
                frontier_phi_65_66_ladder_2 = _3002;
                frontier_phi_65_66_ladder_3 = _2996;
                frontier_phi_65_66_ladder_4 = _2994;
                frontier_phi_65_66_ladder_5 = _2998;
            }
            _3123 = frontier_phi_65_66_ladder_4;
            _3125 = frontier_phi_65_66_ladder_3;
            _3127 = frontier_phi_65_66_ladder_5;
            _3129 = frontier_phi_65_66_ladder_1;
            _3131 = frontier_phi_65_66_ladder_2;
            _3133 = frontier_phi_65_66_ladder;
        }
        float _3138 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2884 = (_3138 * _3129) + _2397;
        _2886 = (_3138 * _3131) + _2399;
        _2888 = (_3138 * _3133) + _2401;
        _2890 = ((_3123 * _813) * _3138) + _2735;
        _2892 = ((_3125 * _814) * _3138) + _2737;
        _2894 = ((_3127 * _815) * _3138) + _2739;
    }
    else
    {
        _2884 = _2397;
        _2886 = _2399;
        _2888 = _2401;
        _2890 = _2735;
        _2892 = _2737;
        _2894 = _2739;
    }
    uint _2900 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _2910 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _456) * _469.x) * cbInstanceData._m0[_2900].x;
    float _2915 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _456) * _469.y) * cbInstanceData._m0[_2900].y;
    float _2920 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _456) * _469.z) * cbInstanceData._m0[_2900].z;
    float _4927 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4938 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4949 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4960 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2938 = (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2884 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _827))) + ((_2890 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1663)) * cbPerFrame._m0[3u].x)) + _2910;
    float _2940 = (_2915 + ((_2892 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1663)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2886 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _827)));
    float _2942 = (_2920 + ((_2894 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1663)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2888 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _827)));
    float _2943 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
    float _2944 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
    float _2945 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
    float _2951 = cbMtdParam._m0[2u].x * _2910;
    float _2952 = cbMtdParam._m0[2u].y * _2915;
    float _2953 = cbMtdParam._m0[2u].z * _2920;
    float _4986 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2955 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
    float _2960 = cbInstanceData._m0[_718 + 6u].w * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)));
    float _2965 = _615 / cbSceneParam._m0[86u].x;
    float _2966 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _3019 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _3020 = _3019 / _536;
        float _3031 = _3020 * _588;
        float _3032 = _589 * _3020;
        float _3033 = (-0.0) - _3032;
        float _3034 = _3020 * _590;
        float _3036 = (cbSceneParam._m0[77u].w * _3033) / _3019;
        float _3037 = _3036 + cbSceneParam._m0[79u].w;
        float _3038 = cbSceneParam._m0[79u].w - _3032;
        float _3044 = sqrt(((_3031 * _3031) + (_3032 * _3032)) + (_3034 * _3034));
        float _3047 = (1.0 - (cbSceneParam._m0[77u].w / _3019)) * _3044;
        float _3052 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3033 - _3036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3037 > 0.0) ? exp2(_3052 * _3037) : (2.0 - exp2(_3054 * _3037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3047;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : max(_3037, _3038));
            float _3186 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : min(_3037, _3038));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3240 = ((abs(_3044 / _3033) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3052 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3052 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3054 * _3195) - exp2(_3054 * _3196)) * _3184))) + (_3047 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2985);
        _3056 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3058 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3060 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3062 = _3251 * _2985;
    }
    else
    {
        _3056 = _2982;
        _3058 = _2983;
        _3060 = _2984;
        _3062 = _2985;
    }
    bool _3278;
    vec4 _3072;
    vec4 _3094;
    float _3096;
    float _3100;
    float _3101;
    float _3102;
    float _3105;
    float _3108;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        _3072 = cbMatDynParam._m0[0u];
        float _3074 = roundEven(_3072.y);
        bool _3075 = _3074 == 3.0;
        float _3076 = log2(_3062);
        float _3080 = exp2(_3076 * cbSceneParam._m0[78u].x);
        float _3081 = exp2(_3076 * cbSceneParam._m0[78u].y);
        float _3082 = exp2(_3076 * cbSceneParam._m0[78u].z);
        float _3083 = _3080 * _2943;
        float _3084 = _3081 * _2944;
        float _3085 = _3082 * _2945;
        float _3092 = _604 + (-0.5);
        _3094 = cbMtdParam._m0[1u];
        _3096 = _3094.y * _3092;
        float _3099 = (_3074 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3100 = _3099 * (_3075 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3056)));
        _3101 = _3099 * (_3075 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
        _3102 = _3099 * (_3075 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
        _3105 = ((_2951 * _2955) * _3080) * _3099;
        _3108 = ((_2952 * _2955) * _3081) * _3099;
        _3111 = ((_2953 * _2955) * _3082) * _3099;
        _3112 = _3092 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_718 + 7u].x + _3112) < 0.5)
            {
                _3278 = true;
                break;
            }
        }
        uint _3219 = _720 + uint(_3072.w);
        if ((cbInstanceData._m0[_3219].w < 1.0) && ((cbInstanceData._m0[_3219].w + _3112) < 0.5))
        {
            _3278 = true;
            break;
        }
        if ((_3096 + _356) < _3094.x)
        {
            _3278 = true;
            break;
        }
        _3278 = false;
        break;
    }
    float _3482;
    if (_3278)
    {
        discard_state = true;
        _3482 = 0.0;
    }
    else
    {
        _3482 = _2960;
    }
    SV_Target.x = _3100;
    SV_Target.y = _3101;
    SV_Target.z = _3102;
    SV_Target.w = _3482;
    SV_Target_1.x = _3105;
    SV_Target_1.y = _3108;
    SV_Target_1.z = _3111;
    SV_Target_1.w = _2960;
    discard_exit();
}


