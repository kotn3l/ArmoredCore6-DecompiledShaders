#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1253;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _252.z;
    float _264 = exp2(log2(_257 * 22.0) * 260.0);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    vec4 _280 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _291 = cbMtdParam._m0[10u].x * _280.x;
    float _292 = cbMtdParam._m0[10u].y * _280.y;
    float _293 = cbMtdParam._m0[10u].z * _280.z;
    vec4 _305 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = exp2(log2(1.0 - _252.w) * 8.0);
    vec4 _345 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _370 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _378 = (((((cbMtdParam._m0[9u].x * _305.x) - _291) * _266) + _291) * 4.55000019073486328125) * _370.x;
    float _380 = (((((cbMtdParam._m0[9u].y * _305.y) - _292) * _266) + _292) * 4.55000019073486328125) * _370.y;
    float _382 = (((((cbMtdParam._m0[9u].z * _305.z) - _293) * _266) + _293) * 4.55000019073486328125) * _370.z;
    float _389 = (((cbMtdParam._m0[13u].x * _345.x) - _378) * _333) + _378;
    float _390 = (((cbMtdParam._m0[13u].y * _345.y) - _380) * _333) + _380;
    float _391 = (((cbMtdParam._m0[13u].z * _345.z) - _382) * _333) + _382;
    float _392 = _370.w * _305.w;
    float _422 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _266) + cbMtdParam._m0[17u].x;
    float _425 = ((cbMtdParam._m0[15u].z - _422) * _333) + _422;
    vec4 _437 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _446 = cbMtdParam._m0[14u].y + _437.z;
    vec4 _458 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _480 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _493 = (((_266 * (_257 + (-0.5))) + 0.5) * 2.0) * ((((_458.z - _446) + cbMtdParam._m0[14u].x) * _266) + _446);
    float _497 = (((_480.z - _493) + cbMtdParam._m0[15u].y) * _333) + _493;
    float _512 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3642 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _518 = (_513 * _513) * (3.0 - (_513 * 2.0));
    vec4 _531 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _539 = (_252.x * 2.0) + (-1.0);
    float _540 = (_252.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3653 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _546 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    float _551 = ((_458.x - _439) * _266) + _439;
    float _552 = ((_458.y - _440) * _266) + _440;
    float _565 = (cbMtdParam._m0[14u].z * (((((_480.x - _551) * _333) + _551) * 2.0) + (-1.0))) + _539;
    float _566 = (cbMtdParam._m0[14u].z * (((((_480.y - _552) * _333) + _552) * 2.0) + (-1.0))) + _540;
    float _569 = fma(_546, _237, fma(_566, _229 * TANGENT.x, (_215 * _207) * _565));
    float _572 = fma(_546, _238, fma(_566, _229 * TANGENT.y, (_215 * _208) * _565));
    float _575 = fma(_546, _239, fma(_566, _229 * TANGENT.z, (_215 * _209) * _565));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3664 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _583 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _584 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _585 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _586 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _587 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _588 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _656 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _646);
    float _657 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _646);
    float _658 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _646);
    float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
    float _663 = _656 * _662;
    float _664 = _657 * _662;
    float _665 = _658 * _662;
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _674 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _676 = _674.w;
    float _694 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _697 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _700 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    vec4 _702 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _704 = _702.x;
    float _716 = (((_702.y - _584) + (_702.w * _584)) * cbMtdParam._m0[3u].x) + _584;
    vec4 _717 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_704 * _704)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _717.z;
    float _741 = (((cbMatDynParam._m0[15u].x - _588) * cbMatDynParam._m0[15u].w) * _733) + _588;
    float _749 = ((_733 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _716)) + _716;
    uint _773 = uint(roundEven(NORMAL.w)) * 13u;
    uint _774 = _773 + 9u;
    uint _775 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * _585) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * _586) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * _587) * cbInstanceData._m0[_775].z;
    float _3730 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    vec4 _787 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _792 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _803 = (((_792.x - _741) + (_792.w * _741)) * cbMtdParam._m0[3u].x) + _741;
    float _816 = (cbMtdParam._m0[3u].x * (((_784 * _676) - _784) + _787.x)) + _784;
    float _817 = (cbMtdParam._m0[3u].x * (((_785 * _676) - _785) + _787.y)) + _785;
    float _818 = (cbMtdParam._m0[3u].x * (((_786 * _676) - _786) + _787.z)) + _786;
    float _832 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_741 * (_585 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_741 * (_586 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_741 * (_587 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _836 = _832 * cbMatDynParam._m0[13u].w;
    float _846 = (_836 * (cbMatDynParam._m0[13u].x - _816)) + _816;
    float _847 = (_836 * (cbMatDynParam._m0[13u].y - _817)) + _817;
    float _848 = (_836 * (cbMatDynParam._m0[13u].z - _818)) + _818;
    float _856 = ((_832 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _803)) + _803;
    float _857 = 1.0 - _856;
    float _858 = _857 * _846;
    float _859 = _857 * _847;
    float _860 = _857 * _848;
    float _864 = (_846 + (-0.039999999105930328369140625)) * _856;
    float _865 = (_847 + (-0.039999999105930328369140625)) * _856;
    float _866 = (_848 + (-0.039999999105930328369140625)) * _856;
    float _867 = _864 + 0.039999999105930328369140625;
    float _868 = _865 + 0.039999999105930328369140625;
    float _869 = _866 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _881 = _878.x * TEXCOORD_4;
    float _882 = dot(vec3(_580, _581, _582), vec3(_663, _664, _665));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _580) - _663;
    float _890 = (_885 * _581) - _664;
    float _891 = (_885 * _582) - _665;
    float _895 = abs(dot(vec3(_663, _664, _665), vec3(_580, _581, _582)));
    float _3763 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_749);
    float _909 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _915 = (1.0 - _909) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _916 = _909 * _897;
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _979 = fma(_952, cbModelParam._m0[26u].z, fma(_948, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944));
        float _983 = fma(_952, cbModelParam._m0[27u].z, fma(_948, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944));
        float _987 = fma(_952, cbModelParam._m0[28u].z, fma(_948, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944));
        float _1010 = _944 + _580;
        float _1011 = _948 + _581;
        float _1012 = _952 + _582;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_979 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_983 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_987 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_580, _581, _582), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3811 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_580, _581, _582), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3844 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_580, _581, _582), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3877 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_952, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944));
        float _1297 = fma(_952, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944));
        float _1301 = fma(_952, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944));
        float _1324 = _944 + _580;
        float _1325 = _948 + _581;
        float _1326 = _952 + _582;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_580, _581, _582), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3940 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_580, _581, _582), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _3973 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_580, _581, _582), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4006 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1253;
        _1563 = _1253;
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _889 * 0.5;
    float _1631 = _890 * 0.5;
    float _1632 = _891 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1670;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1681;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1672 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1685 = (_1681 * cbModelParam._m0[1u].x) + (_1670 * (1.0 - cbModelParam._m0[1u].x));
    float _1695 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _749);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1695 : min(cbModelParam._m0[25u].z, _1695));
    float _1776;
    float _1778;
    float _1780;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1743 = fma(_952, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944)) + cbModelParam._m0[13u].w;
        float _1747 = fma(_952, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944)) + cbModelParam._m0[14u].w;
        float _1751 = fma(_952, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944)) + cbModelParam._m0[15u].w;
        float _1754 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1757 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1760 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1788;
        if (_1754 > 0.0)
        {
            _1788 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1788 = frontier_phi_16_14_ladder;
        }
        float _1992;
        if (_1757 > 0.0)
        {
            _1992 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2246;
        if (_1760 > 0.0)
        {
            _2246 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2246 = frontier_phi_37_32_ladder;
        }
        float _2248 = isnan(_1992) ? _1788 : (isnan(_1788) ? _1992 : min(_1788, _1992));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1754) + _1743;
        float _2254 = (_2249 * _1757) + _1747;
        float _2255 = (_2249 * _1760) + _1751;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1696);
            frontier_phi_15_37_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1776 = frontier_phi_15_37_ladder_2;
        _1778 = frontier_phi_15_37_ladder_1;
        _1780 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1696);
        _1776 = _1764.x * cbModelParam._m0[1u].y;
        _1778 = _1764.y * cbModelParam._m0[1u].y;
        _1780 = _1764.z * cbModelParam._m0[1u].y;
    }
    float _1784 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _749);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1784 : min(cbModelParam._m0[25u].w, _1784));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_952, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_952, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_952, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1854 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1857 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1997;
        if (_1851 > 0.0)
        {
            _1997 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1997 = frontier_phi_27_23_ladder;
        }
        float _2273;
        if (_1854 > 0.0)
        {
            _2273 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2273 = frontier_phi_39_34_ladder;
        }
        float _2486;
        if (_1857 > 0.0)
        {
            _2486 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2486 = frontier_phi_48_45_ladder;
        }
        float _2488 = isnan(_2273) ? _1997 : (isnan(_1997) ? _2273 : min(_1997, _2273));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1851) + _1840;
        float _2494 = (_2489 * _1854) + _1844;
        float _2495 = (_2489 * _1857) + _1848;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1785);
            frontier_phi_24_48_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_24_48_ladder_2;
        _1878 = frontier_phi_24_48_ladder_1;
        _1880 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1785);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1893 = (((_915 * _867) + _916) * _881) * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1895 = (((_915 * _868) + _916) * _881) * ((cbModelParam._m0[1u].w * (_1878 - _1778)) + _1778);
    float _1897 = (((_915 * _869) + _916) * _881) * ((cbModelParam._m0[1u].w * (_1880 - _1780)) + _1780);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_773 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _881 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1951 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1955 = _1918 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_580, _581, _582));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_580, _581, _582));
    float _4142 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4153 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1935].x * _1941) * _1976) + ((cbLight._m0[_1945].x * _1951) * _1974);
    float _1984 = ((_1941 * cbLight._m0[_1935].y) * _1976) + ((_1951 * cbLight._m0[_1945].y) * _1974);
    float _1985 = ((_1941 * cbLight._m0[_1935].z) * _1976) + ((_1951 * cbLight._m0[_1945].z) * _1974);
    uvec4 _1989 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1991 = _1989.x == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1991)
    {
        _2002 = _1983;
        _2004 = _1984;
        _2006 = _1985;
    }
    else
    {
        uint _2010 = _1918 + 6u;
        float _2026 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _4164 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2029 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2002 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1983;
        _2004 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1984;
        _2006 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1985;
    }
    bool _2009 = _1989.y == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2009)
    {
        _2047 = _2002;
        _2049 = _2004;
        _2051 = _2006;
    }
    else
    {
        uint _2217 = _1918 + 7u;
        float _2233 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4180 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2236 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2047 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2002;
        _2049 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2004;
        _2051 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2006;
    }
    uint _2054 = _1918 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _749) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1918].x + _663;
    float _2070 = cbLight._m0[_1918].y + _664;
    float _2071 = cbLight._m0[_1918].z + _665;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1918].xyz));
    float _4196 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2083 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2084 = dot(vec3(_580, _581, _582), vec3(_2076, _2077, _2078));
    float _4218 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2076, _2077, _2078));
    float _4229 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0);
    float _2105 = 0.959999978542327880859375 - _864;
    float _2107 = 0.959999978542327880859375 - _865;
    float _2108 = 0.959999978542327880859375 - _866;
    float _2115 = 1.0 - _2068;
    float _2126 = (0.5 / (((_2083 * ((_2082 * _2115) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2115) + _2068) * _2082))) * _2082;
    float _4240 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2139 = _1918 + 9u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _749) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1955].x + _663;
    float _2153 = cbLight._m0[_1955].y + _664;
    float _2154 = cbLight._m0[_1955].z + _665;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_1955].xyz));
    float _4251 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2166 = dot(vec3(_580, _581, _582), vec3(_2159, _2160, _2161));
    float _4262 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2159, _2160, _2161));
    float _4273 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2151 * _2151;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
    float _2192 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2083 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2192) + _2151) * _2165))) * _2165;
    float _4284 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    float _2214 = (((((_2185 * _2105) + _867) * cbLight._m0[_2139].x) * _2204) * _1941) + (((((_2104 * _2105) + _867) * cbLight._m0[_2054].x) * _2128) * _1951);
    float _2215 = (((((_2185 * _2107) + _868) * cbLight._m0[_2139].y) * _2204) * _1941) + (((((_2104 * _2107) + _868) * cbLight._m0[_2054].y) * _2128) * _1951);
    float _2216 = (((((_2185 * _2108) + _869) * cbLight._m0[_2139].z) * _2204) * _1941) + (((((_2104 * _2108) + _869) * cbLight._m0[_2054].z) * _2128) * _1951);
    float _2278;
    float _2280;
    float _2282;
    if (_1991)
    {
        _2278 = _2214;
        _2280 = _2215;
        _2282 = _2216;
    }
    else
    {
        uint _2284 = _1918 + 2u;
        uint _2288 = _1918 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _749) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _663;
        float _2305 = cbLight._m0[_2284].y + _664;
        float _2306 = cbLight._m0[_2284].z + _665;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2284].xyz));
        float _4295 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2318 = dot(vec3(_580, _581, _582), vec3(_2311, _2312, _2313));
        float _4306 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4317 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2083 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2344) + _2303) * _2317))) * _2317;
        float _4328 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2278 = (((((_2337 * _2105) + _867) * cbLight._m0[_2288].x) * _2356) * _2357) + _2214;
        _2280 = (((((_2337 * _2107) + _868) * cbLight._m0[_2288].y) * _2356) * _2357) + _2215;
        _2282 = (((((_2337 * _2108) + _869) * cbLight._m0[_2288].z) * _2356) * _2357) + _2216;
    }
    float _2392;
    float _2394;
    float _2396;
    if (_2009)
    {
        _2392 = _2278;
        _2394 = _2280;
        _2396 = _2282;
    }
    else
    {
        uint _2403 = _1918 + 3u;
        uint _2407 = _1918 + 11u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _749) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _663;
        float _2424 = cbLight._m0[_2403].y + _664;
        float _2425 = cbLight._m0[_2403].z + _665;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2403].xyz));
        float _4344 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2437 = dot(vec3(_580, _581, _582), vec3(_2430, _2431, _2432));
        float _4355 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4366 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2083 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2463) + _2422) * _2436))) * _2436;
        float _4377 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2392 = (((((_2456 * _2105) + _867) * cbLight._m0[_2407].x) * _2475) * _2476) + _2278;
        _2394 = (((((_2456 * _2107) + _868) * cbLight._m0[_2407].y) * _2475) * _2476) + _2280;
        _2396 = (((((_2456 * _2108) + _869) * cbLight._m0[_2407].z) * _2475) * _2476) + _2282;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1916.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
        }
        else
        {
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2910)
                {
                    frontier_phi_63_pred = _2899;
                    frontier_phi_63_pred_1 = _2898;
                    frontier_phi_63_pred_2 = _2897;
                    frontier_phi_63_pred_3 = _2896;
                    frontier_phi_63_pred_4 = _2895;
                    frontier_phi_63_pred_5 = _2894;
                }
                else
                {
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    uint _3024;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2909;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    for (;;)
                    {
                        uint _3028 = uint(findLSB(_3024)) + (_2900 << 5u);
                        uint _3025 = (_3024 + 4294967295u) & _3024;
                        uint _3030 = _3028 * 48u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3050 = (_3028 * 48u) + 4u;
                        vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3069 = (_3028 * 48u) + 8u;
                        vec3 _3080 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x));
                        float _3084 = _3044.x - _2552;
                        float _3085 = _3044.y - _2553;
                        float _3086 = _3044.z - _2554;
                        float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                        float _3090 = inversesqrt(_3087);
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3094 = dot(vec3(_694, _697, _700), vec3(_3091, _3092, _3093));
                        float _3099 = 1.0 - (_3087 * _3044.w);
                        float _4403 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3101 = sqrt(_3087) * _3063.w;
                        float _3104 = 1.39999997615814208984375 / (_3101 + 1.39999997615814208984375);
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3094) + _3105;
                        float _3111 = _3101 * _3101;
                        float _3115 = ((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3100) / ((_3111 * 0.699999988079071044921875) + 1.0);
                        float _3119 = (-0.0) - _2552;
                        float _3120 = (-0.0) - _2553;
                        float _3121 = (-0.0) - _2554;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3136 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                        float _3137 = 1.0 - _897;
                        float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                        float _3145 = _3144 * _3144;
                        float _3146 = _3145 * _3145;
                        float _3147 = _3126 + _3091;
                        float _3148 = _3127 + _3092;
                        float _3149 = _3128 + _3093;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3157 = dot(vec3(_694, _697, _700), vec3(_3126, _3127, _3128));
                        float _4419 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3161 = dot(vec3(_694, _697, _700), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                        float _4430 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                        float _3169 = _3104 * _3145;
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3094) + _3170;
                        float _4441 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3175 = 1.0 - _3145;
                        float _3185 = (0.5 / (((_3174 * ((_3160 * _3175) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3174 * _3175) + _3145) * _3160))) * _3174;
                        float _4452 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3196 = (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) / ((_3168 * _3168) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125))) * _3100;
                        _2953 = (_3115 * _3063.x) + _3021;
                        _2954 = (_3115 * _3063.y) + _3022;
                        _2955 = (_3115 * _3063.z) + _3023;
                        _2950 = (_3196 * _3080.x) + _3018;
                        _2951 = (_3196 * _3080.y) + _3019;
                        _2952 = (_3196 * _3080.z) + _3020;
                        if (_3025 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _3025;
                        }
                    }
                    frontier_phi_63_pred = _2955;
                    frontier_phi_63_pred_1 = _2954;
                    frontier_phi_63_pred_2 = _2953;
                    frontier_phi_63_pred_3 = _2952;
                    frontier_phi_63_pred_4 = _2951;
                    frontier_phi_63_pred_5 = _2950;
                }
                _2752 = frontier_phi_63_pred;
                _2750 = frontier_phi_63_pred_1;
                _2748 = frontier_phi_63_pred_2;
                _2746 = frontier_phi_63_pred_3;
                _2744 = frontier_phi_63_pred_4;
                _2742 = frontier_phi_63_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2742;
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
        }
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.z;
        uint _2758 = (_2756 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2758) & _2598) == 0u)
        {
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2888 = _2887 * _2552;
            float _2889 = _2887 * _2553;
            float _2890 = _2887 * _2554;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2758 < ((_2756 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3001 = _2741;
                float _3002 = _2743;
                float _3003 = _2745;
                float _3004 = _2747;
                float _3005 = _2749;
                float _3006 = _2751;
                uint _3007 = _2758;
                uint _3016;
                bool _3017;
                for (;;)
                {
                    _3016 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                    _3017 = _3016 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3017)
                    {
                        frontier_phi_69_pred = _3006;
                        frontier_phi_69_pred_1 = _3005;
                        frontier_phi_69_pred_2 = _3004;
                        frontier_phi_69_pred_3 = _3003;
                        frontier_phi_69_pred_4 = _3002;
                        frontier_phi_69_pred_5 = _3001;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        uint _3220 = _3016;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3289;
                        vec4 _3305;
                        float _3352;
                        bool _3353;
                        for (;;)
                        {
                            uint _3231 = ((_3007 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3276 = (_3231 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3292 = (_3231 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3231 * 40u) + 24u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3327 = (_3231 * 40u) + 28u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3352 = fma(_2554, _3340.z, fma(_2553, _3340.y, _3340.x * _2552)) + _3340.w;
                            _3353 = !((fma(_2554, _3321.z, fma(_2553, _3321.y, _3321.x * _2552)) + _3321.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3353)
                            {
                                float _3380 = _3246.x - _2552;
                                float _3381 = _3246.y - _2553;
                                float _3382 = _3246.z - _2554;
                                float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                                float _3386 = inversesqrt(_3383);
                                float _3387 = _3386 * _3380;
                                float _3388 = _3386 * _3381;
                                float _3389 = _3386 * _3382;
                                float _3393 = 1.0 - (_3383 / (_3247 * _3247));
                                float _4463 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3398 = sqrt(_3383) * _3262.w;
                                float _3400 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                                float _3401 = _3400 * _3400;
                                float _3404 = ((1.0 - _3401) * dot(vec3(_3387, _3388, _3389), vec3(_694, _697, _700))) + _3401;
                                float _3407 = _3398 * _3398;
                                float _3411 = (fma(_2554, _3289.z, fma(_2553, _3289.y, _3289.x * _2552)) + _3289.w) / _3352;
                                float _3412 = (fma(_2554, _3305.z, fma(_2553, _3305.y, _3305.x * _2552)) + _3305.w) / _3352;
                                float _3416 = 1.0 - dot(vec2(_3411, _3412), vec2(_3411, _3412));
                                float _4479 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3418 = _3417 * (((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3394) / ((_3407 * 0.699999988079071044921875) + 1.0));
                                float _3430 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                                float _3431 = 1.0 - _897;
                                float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                                float _3439 = _3438 * _3438;
                                float _3440 = _3439 * _3439;
                                float _3441 = _3387 - _2888;
                                float _3442 = _3388 - _2889;
                                float _3443 = _3389 - _2890;
                                float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                                float _3451 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4490 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3455 = dot(vec3(_694, _697, _700), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                                float _4501 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                                float _3463 = _3400 * _3439;
                                float _3464 = _3463 * _3463;
                                float _3470 = ((1.0 - _3464) * dot(vec3(_694, _697, _700), vec3(_3387, _3388, _3389))) + _3464;
                                float _4512 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3472 = 1.0 - _3439;
                                float _3482 = (0.5 / (((_3471 * ((_3454 * _3472) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3439) * _3454))) * _3471;
                                float _4523 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3492 = (_3417 * _3394) * (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3462 * _3462) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3418 * _3262.z;
                                frontier_phi_75_pred_1 = _3418 * _3262.y;
                                frontier_phi_75_pred_2 = _3418 * _3262.x;
                                frontier_phi_75_pred_3 = _3492 * _3274.z;
                                frontier_phi_75_pred_4 = _3492 * _3274.y;
                                frontier_phi_75_pred_5 = _3492 * _3274.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3501 = frontier_phi_75_pred;
                            _3500 = frontier_phi_75_pred_1;
                            _3499 = frontier_phi_75_pred_2;
                            _3498 = frontier_phi_75_pred_3;
                            _3497 = frontier_phi_75_pred_4;
                            _3496 = frontier_phi_75_pred_5;
                            _3204 = _3499 + _3217;
                            _3205 = _3500 + _3218;
                            _3206 = _3501 + _3219;
                            _3201 = _3496 + _3214;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3206;
                        frontier_phi_69_pred_1 = _3205;
                        frontier_phi_69_pred_2 = _3204;
                        frontier_phi_69_pred_3 = _3203;
                        frontier_phi_69_pred_4 = _3202;
                        frontier_phi_69_pred_5 = _3201;
                    }
                    _2873 = frontier_phi_69_pred;
                    _2871 = frontier_phi_69_pred_1;
                    _2869 = frontier_phi_69_pred_2;
                    _2867 = frontier_phi_69_pred_3;
                    _2865 = frontier_phi_69_pred_4;
                    _2863 = frontier_phi_69_pred_5;
                    uint _3008 = _3007 + 1u;
                    if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3001 = _2863;
                        _3002 = _2865;
                        _3003 = _2867;
                        _3004 = _2869;
                        _3005 = _2871;
                        _3006 = _2873;
                        _3007 = _3008;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2873;
                frontier_phi_57_58_ladder_1 = _2871;
                frontier_phi_57_58_ladder_2 = _2869;
                frontier_phi_57_58_ladder_3 = _2867;
                frontier_phi_57_58_ladder_4 = _2865;
                frontier_phi_57_58_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_57_58_ladder = _2751;
                frontier_phi_57_58_ladder_1 = _2749;
                frontier_phi_57_58_ladder_2 = _2747;
                frontier_phi_57_58_ladder_3 = _2745;
                frontier_phi_57_58_ladder_4 = _2743;
                frontier_phi_57_58_ladder_5 = _2741;
            }
            _2862 = frontier_phi_57_58_ladder_5;
            _2864 = frontier_phi_57_58_ladder_4;
            _2866 = frontier_phi_57_58_ladder_3;
            _2868 = frontier_phi_57_58_ladder_2;
            _2870 = frontier_phi_57_58_ladder_1;
            _2872 = frontier_phi_57_58_ladder;
        }
        float _2877 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2610 = (_2877 * _2868) + _2047;
        _2612 = (_2877 * _2870) + _2049;
        _2614 = (_2877 * _2872) + _2051;
        _2616 = ((_2862 * _867) * _2877) + _2392;
        _2618 = ((_2864 * _868) * _2877) + _2394;
        _2620 = ((_2866 * _869) * _2877) + _2396;
    }
    else
    {
        _2610 = _2047;
        _2612 = _2049;
        _2614 = _2051;
        _2616 = _2392;
        _2618 = _2394;
        _2620 = _2396;
    }
    uint _2626 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _2636 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _518) * _531.x) * cbInstanceData._m0[_2626].x;
    float _2641 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _518) * _531.y) * cbInstanceData._m0[_2626].y;
    float _2646 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _518) * _531.z) * cbInstanceData._m0[_2626].z;
    float _4539 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4550 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4561 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4572 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2664 = (((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2610 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _881))) + ((_2616 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1685)) * cbPerFrame._m0[3u].x)) + _2636;
    float _2666 = (_2641 + ((_2618 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1685)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2612 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _881)));
    float _2668 = (_2646 + ((_2620 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1685)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2614 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _881)));
    float _4598 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2681 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2686 = cbInstanceData._m0[_773 + 6u].w * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)));
    float _2691 = _671 / cbSceneParam._m0[86u].x;
    float _2692 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2706 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2708 = _2706.x;
    float _2709 = _2706.y;
    float _2710 = _2706.z;
    float _2711 = _2706.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2766 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2767 = _2766 / _604;
        float _2778 = _2767 * _656;
        float _2779 = _657 * _2767;
        float _2780 = (-0.0) - _2779;
        float _2781 = _2767 * _658;
        float _2783 = (cbSceneParam._m0[77u].w * _2780) / _2766;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2779;
        float _2791 = sqrt(((_2778 * _2778) + (_2779 * _2779)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2766)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2963;
        if (abs((_2780 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2963 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2925 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2963 = ((abs(_2791 / _2780) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2801 * _2934) - exp2(_2801 * _2935)) * _2923))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2965 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, 1.0), 0.0);
        float _2974 = exp2((_2963 * (-1.44269502162933349609375)) * (1.0 - _2965.w));
        float _2975 = log2(_2974);
        float _2991 = log2(_2711);
        _2803 = (exp2(_2991 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].x)) * _2965.x) / cbSceneParam._m0[78u].x)) + _2708;
        _2805 = (exp2(_2991 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].y)) * _2965.y) / cbSceneParam._m0[78u].y)) + _2709;
        _2807 = (exp2(_2991 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2975 * cbSceneParam._m0[78u].z)) * _2965.z) / cbSceneParam._m0[78u].z)) + _2710;
        _2809 = _2974 * _2711;
    }
    else
    {
        _2803 = _2708;
        _2805 = _2709;
        _2807 = _2710;
        _2809 = _2711;
    }
    float _2821 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2822 = _2821 == 3.0;
    float _2823 = log2(_2809);
    float _2827 = exp2(_2823 * cbSceneParam._m0[78u].x);
    float _2828 = exp2(_2823 * cbSceneParam._m0[78u].y);
    float _2829 = exp2(_2823 * cbSceneParam._m0[78u].z);
    float _2830 = _2827 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0)));
    float _2831 = _2828 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)));
    float _2832 = _2829 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)));
    float _2841 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2841 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.y = _2841 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.z = _2841 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.w = _2686;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2636) * _2681) * _2827) * _2841;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2641) * _2681) * _2828) * _2841;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2646) * _2681) * _2829) * _2841;
    SV_Target_1.w = _2686;
}


