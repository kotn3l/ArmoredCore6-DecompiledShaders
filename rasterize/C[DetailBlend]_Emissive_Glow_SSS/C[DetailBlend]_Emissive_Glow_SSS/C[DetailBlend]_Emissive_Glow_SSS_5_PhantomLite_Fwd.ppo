#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1369;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _308.z;
    float _320 = exp2(log2(_313 * 22.0) * 260.0);
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(1.0) ? _321 : (isnan(_321) ? 1.0 : min(_321, 1.0));
    vec4 _336 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _346 = cbMtdParam._m0[10u].x * _336.x;
    float _347 = cbMtdParam._m0[10u].y * _336.y;
    float _348 = cbMtdParam._m0[10u].z * _336.z;
    vec4 _360 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _375 = exp2(log2(1.0 - _308.w) * 8.0);
    vec4 _387 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _412 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _434 = (((((_360.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _412.x) - _346) * _322) + _346;
    float _435 = (((((_360.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _412.y) - _347) * _322) + _347;
    float _436 = (((((_360.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _412.z) - _348) * _322) + _348;
    float _443 = (((cbMtdParam._m0[13u].x * _387.x) - _434) * _375) + _434;
    float _444 = (((cbMtdParam._m0[13u].y * _387.y) - _435) * _375) + _435;
    float _445 = (((cbMtdParam._m0[13u].z * _387.z) - _436) * _375) + _436;
    float _446 = _412.w * _360.w;
    float _476 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _322) + cbMtdParam._m0[17u].x;
    float _479 = ((cbMtdParam._m0[15u].z - _476) * _375) + _476;
    vec4 _491 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _500 = cbMtdParam._m0[14u].y + _491.z;
    vec4 _512 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _531 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _542 = ((((_313 * 2.0) * (cbMtdParam._m0[14u].x + _512.z)) - _500) * _322) + _500;
    float _546 = (((_531.z - _542) + cbMtdParam._m0[15u].y) * _375) + _542;
    float _561 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3750 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _567 = (_562 * _562) * (3.0 - (_562 * 2.0));
    vec4 _580 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _588 = (_308.x * 2.0) + (-1.0);
    float _589 = (_308.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3761 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))));
    float _600 = ((_512.x - _493) * _322) + _493;
    float _601 = ((_512.y - _494) * _322) + _494;
    float _614 = (cbMtdParam._m0[14u].z * (((((_531.x - _600) * _375) + _600) * 2.0) + (-1.0))) + _588;
    float _615 = (cbMtdParam._m0[14u].z * (((((_531.y - _601) * _375) + _601) * 2.0) + (-1.0))) + _589;
    float _618 = fma(_595, _237, fma(_615, _229 * TANGENT.x, (_215 * _207) * _614));
    float _621 = fma(_595, _238, fma(_615, _229 * TANGENT.y, (_215 * _208) * _614));
    float _624 = fma(_595, _239, fma(_615, _229 * TANGENT.z, (_215 * _209) * _614));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3772 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _632 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _633 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _634 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _635 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _636 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _637 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _645 = cbMatDynParam._m0[9u].x * _634;
    float _646 = cbMatDynParam._m0[9u].y * _635;
    float _647 = cbMatDynParam._m0[9u].z * _636;
    float _654 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _655 = _654 * _293;
    float _656 = _654 * _294;
    float _657 = _654 * _295;
    float _658 = dot(vec3(_629, _630, _631), vec3(_655, _656, _657));
    float _664 = abs(exp2(log2(_658) * cbMatDynParam._m0[12u].x));
    float _665 = isnan(0.100000001490116119384765625) ? _664 : (isnan(_664) ? 0.100000001490116119384765625 : max(_664, 0.100000001490116119384765625));
    float _671 = ((isnan(0.699999988079071044921875) ? _665 : (isnan(_665) ? 0.699999988079071044921875 : min(_665, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _693 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3848 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3859 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _700 = (((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) - _697) * _671) + _697;
    float _719 = dot(vec3(_629, _630, _631), vec3(0.0, -1.0, 0.0));
    float _3870 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _729 = (_722 * _634) * cbMatDynParam._m0[11u].x;
    float _731 = (_722 * _635) * cbMatDynParam._m0[11u].y;
    float _733 = (_722 * _636) * cbMatDynParam._m0[11u].z;
    float _740 = dot(vec3(_655, _656, _657), vec3(_629, _630, _631));
    float _743 = _740 * 2.0;
    float _753 = dot(vec3((-0.0) - (_655 - (_743 * _629)), (-0.0) - (_656 - (_743 * _630)), (-0.0) - (_657 - (_743 * _631))), vec3(0.0, -1.0, 0.0));
    float _3881 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _760 = exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 4.0);
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _795 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _797 = _795.w;
    float _815 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _818 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _821 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    vec4 _823 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _825 = _823.x;
    float _837 = (((_823.y - _633) + (_823.w * _633)) * cbMtdParam._m0[3u].x) + _633;
    vec4 _838 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _854 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_825 * _825)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _838.z;
    float _862 = (((cbMatDynParam._m0[15u].x - _637) * cbMatDynParam._m0[15u].w) * _854) + _637;
    float _870 = ((_854 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _837)) + _837;
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _895 = _894 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * _645) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * _646) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * _647) * cbInstanceData._m0[_896].z;
    float _3892 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _908 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _913 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _924 = (((_913.x - _862) + (_913.w * _862)) * cbMtdParam._m0[3u].x) + _862;
    float _937 = (cbMtdParam._m0[3u].x * (((_905 * _797) - _905) + _908.x)) + _905;
    float _938 = (cbMtdParam._m0[3u].x * (((_906 * _797) - _906) + _908.y)) + _906;
    float _939 = (cbMtdParam._m0[3u].x * (((_907 * _797) - _907) + _908.z)) + _907;
    vec4 _940 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _953 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_862 * (_645 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_862 * (_646 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_862 * (_647 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _940.z;
    float _957 = _953 * cbMatDynParam._m0[13u].w;
    float _967 = (_957 * (cbMatDynParam._m0[13u].x - _937)) + _937;
    float _968 = (_957 * (cbMatDynParam._m0[13u].y - _938)) + _938;
    float _969 = (_957 * (cbMatDynParam._m0[13u].z - _939)) + _939;
    float _977 = ((_953 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _924)) + _924;
    float _978 = 1.0 - _977;
    float _979 = _978 * _967;
    float _980 = _978 * _968;
    float _981 = _978 * _969;
    float _985 = (_967 + (-0.039999999105930328369140625)) * _977;
    float _986 = (_968 + (-0.039999999105930328369140625)) * _977;
    float _987 = (_969 + (-0.039999999105930328369140625)) * _977;
    float _988 = _985 + 0.039999999105930328369140625;
    float _989 = _986 + 0.039999999105930328369140625;
    float _990 = _987 + 0.039999999105930328369140625;
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _1002 = _999.x * TEXCOORD_4;
    float _1003 = _658 * 2.0;
    float _1007 = (_1003 * _629) - _655;
    float _1008 = (_1003 * _630) - _656;
    float _1009 = (_1003 * _631) - _657;
    float _1010 = abs(_740);
    float _3925 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_870);
    float _1023 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1029 = (1.0 - _1023) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1030 = _1023 * _1012;
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1368;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1097 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1101 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1126 = _1058 + _629;
        float _1127 = _1062 + _630;
        float _1128 = _1066 + _631;
        float _1138 = fma(_1128, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126)) - _1093;
        float _1139 = fma(_1128, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126)) - _1097;
        float _1140 = fma(_1128, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126)) - _1101;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1196 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1162.x + (-0.5));
        float _1198 = _1196 * (_1162.y + (-0.5));
        float _1199 = _1196 * (_1162.z + (-0.5));
        float _1206 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1169.x + (-0.5));
        float _1208 = _1206 * (_1169.y + (-0.5));
        float _1209 = _1206 * (_1169.z + (-0.5));
        float _1216 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1176.x + (-0.5));
        float _1218 = _1216 * (_1176.y + (-0.5));
        float _1219 = _1216 * (_1176.z + (-0.5));
        float _1226 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1183.x + (-0.5));
        float _1228 = _1226 * (_1183.y + (-0.5));
        float _1229 = _1226 * (_1183.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1250 = (dot(vec3(_629, _630, _631), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1260 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3973 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1262 + 1.0))) + _1267) * _1230;
        float _1277 = _1198 * 0.5;
        float _1278 = _1208 * 0.5;
        float _1279 = _1218 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_629, _630, _631), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4006 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1304 + 1.0))) + _1309) * _1231;
        float _1319 = _1199 * 0.5;
        float _1320 = _1209 * 0.5;
        float _1321 = _1219 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_629, _630, _631), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4039 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1346 + 1.0))) + _1351) * _1232;
        _1368 = _1199;
        _1370 = _1198;
        _1371 = _1197;
        _1372 = _1209;
        _1373 = _1208;
        _1374 = _1207;
        _1375 = _1219;
        _1376 = _1218;
        _1377 = _1217;
        _1378 = _1232;
        _1379 = _1231;
        _1380 = _1230;
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1369;
        _1370 = _1369;
        _1371 = _1369;
        _1372 = _1369;
        _1373 = _1369;
        _1374 = _1369;
        _1375 = _1369;
        _1376 = _1369;
        _1377 = _1369;
        _1378 = _1369;
        _1379 = _1369;
        _1380 = _1369;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1413 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1417 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1440 = _1058 + _629;
        float _1441 = _1062 + _630;
        float _1442 = _1066 + _631;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_629, _630, _631), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4102 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_629, _630, _631), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4135 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_629, _630, _631), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4168 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1369;
        _1679 = _1369;
        _1680 = _1369;
        _1681 = _1369;
        _1682 = _1369;
        _1683 = _1369;
        _1684 = _1369;
        _1685 = _1369;
        _1686 = _1369;
        _1687 = _1369;
        _1688 = _1369;
        _1689 = _1369;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1381)) + _1381;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1382)) + _1382;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1383)) + _1383;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _1007 * 0.5;
    float _1747 = _1008 * 0.5;
    float _1748 = _1009 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1368, _1372, _1375, _1378));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _870);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1873 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1876 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1904 = frontier_phi_16_14_ladder;
        }
        float _2108;
        if (_1873 > 0.0)
        {
            _2108 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2108 = frontier_phi_25_21_ladder;
        }
        float _2362;
        if (_1876 > 0.0)
        {
            _2362 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2362 = frontier_phi_37_32_ladder;
        }
        float _2364 = isnan(_2108) ? _1904 : (isnan(_1904) ? _2108 : min(_1904, _2108));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1870) + _1859;
        float _2370 = (_2365 * _1873) + _1863;
        float _2371 = (_2365 * _1876) + _1867;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_15_37_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_15_37_ladder_2;
        _1894 = frontier_phi_15_37_ladder_1;
        _1896 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _870);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _1970 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _1973 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2113;
        if (_1967 > 0.0)
        {
            _2113 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2113 = frontier_phi_27_23_ladder;
        }
        float _2389;
        if (_1970 > 0.0)
        {
            _2389 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2389 = frontier_phi_39_34_ladder;
        }
        float _2602;
        if (_1973 > 0.0)
        {
            _2602 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2602 = frontier_phi_48_45_ladder;
        }
        float _2604 = isnan(_2389) ? _2113 : (isnan(_2113) ? _2389 : min(_2113, _2389));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _1967) + _1956;
        float _2610 = (_2605 * _1970) + _1960;
        float _2611 = (_2605 * _1973) + _1964;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2612;
        float _2615 = _2612 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2611 > _2615) || ((_2611 < _2613) || ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 < _2613) || (_2609 > _2615))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2611, cbModelParam._m0[17u].z, fma(_2610, cbModelParam._m0[17u].y, _2609 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2611, cbModelParam._m0[18u].z, fma(_2610, cbModelParam._m0[18u].y, _2609 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2611, cbModelParam._m0[19u].z, fma(_2610, cbModelParam._m0[19u].y, _2609 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_24_48_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_24_48_ladder_2;
        _1994 = frontier_phi_24_48_ladder_1;
        _1996 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1901);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_1029 * _988) + _1030) * _1002) * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2011 = (((_1029 * _989) + _1030) * _1002) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_1029 * _990) + _1030) * _1002) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _1002 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2067 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2071 = _2034 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_629, _630, _631));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_629, _630, _631));
    float _4304 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4315 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2051].x * _2057) * _2092) + ((cbLight._m0[_2061].x * _2067) * _2090);
    float _2100 = ((_2057 * cbLight._m0[_2051].y) * _2092) + ((_2067 * cbLight._m0[_2061].y) * _2090);
    float _2101 = ((_2057 * cbLight._m0[_2051].z) * _2092) + ((_2067 * cbLight._m0[_2061].z) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2034 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4326 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2145 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2333 = _2034 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4342 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2352 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2163 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2118;
        _2165 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2120;
        _2167 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2122;
    }
    uint _2170 = _2034 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _870) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2034].x + _655;
    float _2186 = cbLight._m0[_2034].y + _656;
    float _2187 = cbLight._m0[_2034].z + _657;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2034].xyz));
    float _4358 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2199 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2200 = dot(vec3(_629, _630, _631), vec3(_2192, _2193, _2194));
    float _4380 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2192, _2193, _2194));
    float _4391 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _985;
    float _2223 = 0.959999978542327880859375 - _986;
    float _2224 = 0.959999978542327880859375 - _987;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4402 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2255 = _2034 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _870) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2071].x + _655;
    float _2269 = cbLight._m0[_2071].y + _656;
    float _2270 = cbLight._m0[_2071].z + _657;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2071].xyz));
    float _4413 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2282 = dot(vec3(_629, _630, _631), vec3(_2275, _2276, _2277));
    float _4424 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2275, _2276, _2277));
    float _4435 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2308 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2199 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2308) + _2267) * _2281))) * _2281;
    float _4446 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2330 = (((((_2301 * _2221) + _988) * cbLight._m0[_2255].x) * _2320) * _2057) + (((((_2220 * _2221) + _988) * cbLight._m0[_2170].x) * _2244) * _2067);
    float _2331 = (((((_2301 * _2223) + _989) * cbLight._m0[_2255].y) * _2320) * _2057) + (((((_2220 * _2223) + _989) * cbLight._m0[_2170].y) * _2244) * _2067);
    float _2332 = (((((_2301 * _2224) + _990) * cbLight._m0[_2255].z) * _2320) * _2057) + (((((_2220 * _2224) + _990) * cbLight._m0[_2170].z) * _2244) * _2067);
    float _2394;
    float _2396;
    float _2398;
    if (_2107)
    {
        _2394 = _2330;
        _2396 = _2331;
        _2398 = _2332;
    }
    else
    {
        uint _2400 = _2034 + 2u;
        uint _2404 = _2034 + 10u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _870) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _655;
        float _2421 = cbLight._m0[_2400].y + _656;
        float _2422 = cbLight._m0[_2400].z + _657;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2400].xyz));
        float _4457 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2434 = dot(vec3(_629, _630, _631), vec3(_2427, _2428, _2429));
        float _4468 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4479 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2460 = 1.0 - _2419;
        float _2470 = (0.5 / (((_2199 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2460) + _2419) * _2433))) * _2433;
        float _4490 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2394 = (((((_2453 * _2221) + _988) * cbLight._m0[_2404].x) * _2472) * _2473) + _2330;
        _2396 = (((((_2453 * _2223) + _989) * cbLight._m0[_2404].y) * _2472) * _2473) + _2331;
        _2398 = (((((_2453 * _2224) + _990) * cbLight._m0[_2404].z) * _2472) * _2473) + _2332;
    }
    float _2508;
    float _2510;
    float _2512;
    if (_2125)
    {
        _2508 = _2394;
        _2510 = _2396;
        _2512 = _2398;
    }
    else
    {
        uint _2519 = _2034 + 3u;
        uint _2523 = _2034 + 11u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _870) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _655;
        float _2540 = cbLight._m0[_2519].y + _656;
        float _2541 = cbLight._m0[_2519].z + _657;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2519].xyz));
        float _4506 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2553 = dot(vec3(_629, _630, _631), vec3(_2546, _2547, _2548));
        float _4517 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4528 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2199 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2579) + _2538) * _2552))) * _2552;
        float _4539 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2508 = (((((_2572 * _2221) + _988) * cbLight._m0[_2523].x) * _2591) * _2592) + _2394;
        _2510 = (((((_2572 * _2223) + _989) * cbLight._m0[_2523].y) * _2591) * _2592) + _2396;
        _2512 = (((((_2572 * _2224) + _990) * cbLight._m0[_2523].z) * _2591) * _2592) + _2398;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_2032.y == 0u)
    {
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2667;
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2667;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2667;
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2683)));
        float _2704 = (log2(_2670 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            uint _3009 = 0u;
            uint _3018;
            bool _3019;
            for (;;)
            {
                _3018 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                _3019 = _3018 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3019)
                {
                    frontier_phi_63_pred = _3008;
                    frontier_phi_63_pred_1 = _3007;
                    frontier_phi_63_pred_2 = _3006;
                    frontier_phi_63_pred_3 = _3005;
                    frontier_phi_63_pred_4 = _3004;
                    frontier_phi_63_pred_5 = _3003;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3018;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_3009 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2668;
                        float _3194 = _3153.y - _2669;
                        float _3195 = _3153.z - _2670;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_815, _818, _821), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4565 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3223 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3227 = (-0.0) - _2668;
                        float _3228 = (-0.0) - _2669;
                        float _3229 = (-0.0) - _2670;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3244 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3245 = 1.0 - _1012;
                        float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                        float _3253 = _3252 * _3252;
                        float _3254 = _3253 * _3253;
                        float _3255 = _3234 + _3200;
                        float _3256 = _3235 + _3201;
                        float _3257 = _3236 + _3202;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3265 = dot(vec3(_815, _818, _821), vec3(_3234, _3235, _3236));
                        float _4581 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3269 = dot(vec3(_815, _818, _821), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                        float _4592 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                        float _3277 = _3213 * _3253;
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3203) + _3278;
                        float _4603 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3283 = 1.0 - _3253;
                        float _3293 = (0.5 / (((_3282 * ((_3268 * _3283) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3253) * _3268))) * _3282;
                        float _4614 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3304 = (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3276 * _3276) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3062 = (_3223 * _3172.x) + _3130;
                        _3063 = (_3223 * _3172.y) + _3131;
                        _3064 = (_3223 * _3172.z) + _3132;
                        _3059 = (_3304 * _3189.x) + _3127;
                        _3060 = (_3304 * _3189.y) + _3128;
                        _3061 = (_3304 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_63_pred = _3064;
                    frontier_phi_63_pred_1 = _3063;
                    frontier_phi_63_pred_2 = _3062;
                    frontier_phi_63_pred_3 = _3061;
                    frontier_phi_63_pred_4 = _3060;
                    frontier_phi_63_pred_5 = _3059;
                }
                _2861 = frontier_phi_63_pred;
                _2859 = frontier_phi_63_pred_1;
                _2857 = frontier_phi_63_pred_2;
                _2855 = frontier_phi_63_pred_3;
                _2853 = frontier_phi_63_pred_4;
                _2851 = frontier_phi_63_pred_5;
                uint _3010 = _3009 + 1u;
                if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3003 = _2851;
                    _3004 = _2853;
                    _3005 = _2855;
                    _3006 = _2857;
                    _3007 = _2859;
                    _3008 = _2861;
                    _3009 = _3010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((4294967295u << _2867) & _2714) == 0u)
        {
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
        }
        else
        {
            float _2996 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
            float _2997 = _2996 * _2668;
            float _2998 = _2996 * _2669;
            float _2999 = _2996 * _2670;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _3110 = _2850;
                float _3111 = _2852;
                float _3112 = _2854;
                float _3113 = _2856;
                float _3114 = _2858;
                float _3115 = _2860;
                uint _3116 = _2867;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3126)
                    {
                        frontier_phi_69_pred = _3115;
                        frontier_phi_69_pred_1 = _3114;
                        frontier_phi_69_pred_2 = _3113;
                        frontier_phi_69_pred_3 = _3112;
                        frontier_phi_69_pred_4 = _3111;
                        frontier_phi_69_pred_5 = _3110;
                    }
                    else
                    {
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        uint _3328 = _3125;
                        uint _3329;
                        vec4 _3354;
                        float _3355;
                        vec4 _3370;
                        vec3 _3382;
                        vec4 _3397;
                        vec4 _3413;
                        float _3460;
                        bool _3461;
                        for (;;)
                        {
                            uint _3339 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3328));
                            _3329 = (_3328 + 4294967295u) & _3328;
                            uint _3341 = _3339 * 40u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3355 = _3354.w;
                            uint _3357 = (_3339 * 40u) + 4u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3339 * 40u) + 8u;
                            _3382 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x));
                            uint _3384 = (_3339 * 40u) + 16u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3400 = (_3339 * 40u) + 20u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3416 = (_3339 * 40u) + 24u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3435 = (_3339 * 40u) + 28u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3460 = fma(_2670, _3448.z, fma(_2669, _3448.y, _3448.x * _2668)) + _3448.w;
                            _3461 = !((fma(_2670, _3429.z, fma(_2669, _3429.y, _3429.x * _2668)) + _3429.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3461)
                            {
                                float _3488 = _3354.x - _2668;
                                float _3489 = _3354.y - _2669;
                                float _3490 = _3354.z - _2670;
                                float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                                float _3494 = inversesqrt(_3491);
                                float _3495 = _3494 * _3488;
                                float _3496 = _3494 * _3489;
                                float _3497 = _3494 * _3490;
                                float _3501 = 1.0 - (_3491 / (_3355 * _3355));
                                float _4625 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3506 = sqrt(_3491) * _3370.w;
                                float _3508 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                                float _3509 = _3508 * _3508;
                                float _3512 = ((1.0 - _3509) * dot(vec3(_3495, _3496, _3497), vec3(_815, _818, _821))) + _3509;
                                float _3515 = _3506 * _3506;
                                float _3519 = (fma(_2670, _3397.z, fma(_2669, _3397.y, _3397.x * _2668)) + _3397.w) / _3460;
                                float _3520 = (fma(_2670, _3413.z, fma(_2669, _3413.y, _3413.x * _2668)) + _3413.w) / _3460;
                                float _3524 = 1.0 - dot(vec2(_3519, _3520), vec2(_3519, _3520));
                                float _4641 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3526 = _3525 * (((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3502) / ((_3515 * 0.699999988079071044921875) + 1.0));
                                float _3538 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                                float _3539 = 1.0 - _1012;
                                float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                                float _3547 = _3546 * _3546;
                                float _3548 = _3547 * _3547;
                                float _3549 = _3495 - _2997;
                                float _3550 = _3496 - _2998;
                                float _3551 = _3497 - _2999;
                                float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                                float _3559 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2997, (-0.0) - _2998, (-0.0) - _2999));
                                float _4652 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3563 = dot(vec3(_815, _818, _821), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                                float _4663 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                                float _3571 = _3508 * _3547;
                                float _3572 = _3571 * _3571;
                                float _3578 = ((1.0 - _3572) * dot(vec3(_815, _818, _821), vec3(_3495, _3496, _3497))) + _3572;
                                float _4674 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3580 = 1.0 - _3547;
                                float _3590 = (0.5 / (((_3579 * ((_3562 * _3580) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3547) * _3562))) * _3579;
                                float _4685 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3600 = (_3525 * _3502) * (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3570 * _3570) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3526 * _3370.z;
                                frontier_phi_75_pred_1 = _3526 * _3370.y;
                                frontier_phi_75_pred_2 = _3526 * _3370.x;
                                frontier_phi_75_pred_3 = _3600 * _3382.z;
                                frontier_phi_75_pred_4 = _3600 * _3382.y;
                                frontier_phi_75_pred_5 = _3600 * _3382.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3609 = frontier_phi_75_pred;
                            _3608 = frontier_phi_75_pred_1;
                            _3607 = frontier_phi_75_pred_2;
                            _3606 = frontier_phi_75_pred_3;
                            _3605 = frontier_phi_75_pred_4;
                            _3604 = frontier_phi_75_pred_5;
                            _3312 = _3607 + _3325;
                            _3313 = _3608 + _3326;
                            _3314 = _3609 + _3327;
                            _3309 = _3604 + _3322;
                            _3310 = _3605 + _3323;
                            _3311 = _3606 + _3324;
                            if (_3329 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3329;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3314;
                        frontier_phi_69_pred_1 = _3313;
                        frontier_phi_69_pred_2 = _3312;
                        frontier_phi_69_pred_3 = _3311;
                        frontier_phi_69_pred_4 = _3310;
                        frontier_phi_69_pred_5 = _3309;
                    }
                    _2982 = frontier_phi_69_pred;
                    _2980 = frontier_phi_69_pred_1;
                    _2978 = frontier_phi_69_pred_2;
                    _2976 = frontier_phi_69_pred_3;
                    _2974 = frontier_phi_69_pred_4;
                    _2972 = frontier_phi_69_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2972;
                        _3111 = _2974;
                        _3112 = _2976;
                        _3113 = _2978;
                        _3114 = _2980;
                        _3115 = _2982;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2982;
                frontier_phi_57_58_ladder_1 = _2980;
                frontier_phi_57_58_ladder_2 = _2978;
                frontier_phi_57_58_ladder_3 = _2976;
                frontier_phi_57_58_ladder_4 = _2974;
                frontier_phi_57_58_ladder_5 = _2972;
            }
            else
            {
                frontier_phi_57_58_ladder = _2860;
                frontier_phi_57_58_ladder_1 = _2858;
                frontier_phi_57_58_ladder_2 = _2856;
                frontier_phi_57_58_ladder_3 = _2854;
                frontier_phi_57_58_ladder_4 = _2852;
                frontier_phi_57_58_ladder_5 = _2850;
            }
            _2971 = frontier_phi_57_58_ladder_5;
            _2973 = frontier_phi_57_58_ladder_4;
            _2975 = frontier_phi_57_58_ladder_3;
            _2977 = frontier_phi_57_58_ladder_2;
            _2979 = frontier_phi_57_58_ladder_1;
            _2981 = frontier_phi_57_58_ladder;
        }
        float _2986 = isnan(1.0) ? _1002 : (isnan(_1002) ? 1.0 : min(_1002, 1.0));
        _2726 = (_2986 * _2977) + _2163;
        _2728 = (_2986 * _2979) + _2165;
        _2730 = (_2986 * _2981) + _2167;
        _2732 = ((_2971 * _988) * _2986) + _2508;
        _2734 = ((_2973 * _989) * _2986) + _2510;
        _2736 = ((_2975 * _990) * _2986) + _2512;
    }
    else
    {
        _2726 = _2163;
        _2728 = _2165;
        _2730 = _2167;
        _2732 = _2508;
        _2734 = _2510;
        _2736 = _2512;
    }
    uint _2742 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _2748 = cbInstanceData._m0[_2742].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _671) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.x) * _700)) + (((_729 - (_729 * _637)) + (cbMatDynParam._m0[11u].x * _760)) * cbMatDynParam._m0[9u].x));
    float _2749 = cbInstanceData._m0[_2742].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _671) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.y) * _700)) + (((_731 - (_731 * _637)) + (cbMatDynParam._m0[11u].y * _760)) * cbMatDynParam._m0[9u].y));
    float _2750 = cbInstanceData._m0[_2742].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _671) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _567) * _580.z) * _700)) + (((_733 - (_733 * _637)) + (cbMatDynParam._m0[11u].z * _760)) * cbMatDynParam._m0[9u].z));
    float _4701 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4712 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4723 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4734 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2768 = (((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2726 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1002))) + ((_2732 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + _2748;
    float _2770 = (_2749 + ((_2734 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2728 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1002)));
    float _2772 = (_2750 + ((_2736 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1801)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2730 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1002)));
    float _2790 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _700) + cbMatDynParam._m0[12u].y;
    float _2795 = cbInstanceData._m0[_894 + 6u].w * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)));
    float _2800 = _792 / cbSceneParam._m0[86u].x;
    float _2801 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2815 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2817 = _2815.x;
    float _2818 = _2815.y;
    float _2819 = _2815.z;
    float _2820 = _2815.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _2876 = _2875 / _786;
        float _2887 = _2876 * _293;
        float _2888 = _294 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2890 = _2876 * _295;
        float _2892 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2888;
        float _2900 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2889 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3032 = 1.0 / cbSceneParam._m0[80u].x;
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3034 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            _3072 = ((abs(_2900 / _2889) * cbSceneParam._m0[80u].y) * ((((_3043 - _3044) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))))) * _3032)) - ((exp2(_2910 * _3043) - exp2(_2910 * _3044)) * _3032))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2820);
        _2912 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2817;
        _2914 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2818;
        _2916 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2819;
        _2918 = _3083 * _2820;
    }
    else
    {
        _2912 = _2817;
        _2914 = _2818;
        _2916 = _2819;
        _2918 = _2820;
    }
    float _2930 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2931 = _2930 == 3.0;
    float _2932 = log2(_2918);
    float _2936 = exp2(_2932 * cbSceneParam._m0[78u].x);
    float _2937 = exp2(_2932 * cbSceneParam._m0[78u].y);
    float _2938 = exp2(_2932 * cbSceneParam._m0[78u].z);
    float _2939 = _2936 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0)));
    float _2940 = _2937 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)));
    float _2941 = _2938 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)));
    float _2950 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2950 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.y = _2950 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.z = _2950 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.w = _2795;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2748) * _2790) * _2936) * _2950;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2749) * _2790) * _2937) * _2950;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2750) * _2790) * _2938) * _2950;
    SV_Target_1.w = _2795;
}


