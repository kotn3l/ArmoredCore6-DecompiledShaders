#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1549;
float _3974;
float _3975;
float _3976;
float _3977;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    vec4 _316 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = _316.z;
    float _322 = _316.w;
    float _328 = exp2(log2(_321 * 22.0) * 260.0);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _354 = cbMtdParam._m0[10u].x * _344.x;
    float _355 = cbMtdParam._m0[10u].y * _344.y;
    float _356 = cbMtdParam._m0[10u].z * _344.z;
    vec4 _368 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _383 = exp2(log2(1.0 - _322) * 8.0);
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _411 = exp2(log2(_322) * 8.0);
    vec4 _423 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _447 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _469 = (((((_368.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _447.x) - _354) * _330) + _354;
    float _470 = (((((_368.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _447.y) - _355) * _330) + _355;
    float _471 = (((((_368.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _447.z) - _356) * _330) + _356;
    float _478 = (((cbMtdParam._m0[13u].x * _395.x) - _469) * _383) + _469;
    float _479 = (((cbMtdParam._m0[13u].y * _395.y) - _470) * _383) + _470;
    float _480 = (((cbMtdParam._m0[13u].z * _395.z) - _471) * _383) + _471;
    float _487 = (((cbMtdParam._m0[11u].x * _423.x) - _478) * _411) + _478;
    float _488 = (((cbMtdParam._m0[11u].y * _423.y) - _479) * _411) + _479;
    float _489 = (((cbMtdParam._m0[11u].z * _423.z) - _480) * _411) + _480;
    float _490 = _447.w * _368.w;
    float _521 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _330) + cbMtdParam._m0[17u].x;
    float _524 = ((cbMtdParam._m0[15u].z - _521) * _383) + _521;
    float _527 = ((cbMtdParam._m0[16u].w - _524) * _411) + _524;
    vec4 _539 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _548 = cbMtdParam._m0[14u].y + _539.z;
    vec4 _560 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _579 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _597 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _608 = ((((_321 * 2.0) * (cbMtdParam._m0[14u].x + _560.z)) - _548) * _330) + _548;
    float _612 = (((_579.z - _608) + cbMtdParam._m0[15u].y) * _383) + _608;
    float _616 = (((_597.z - _612) + cbMtdParam._m0[14u].w) * _411) + _612;
    float _630 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3996 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _636 = (_631 * _631) * (3.0 - (_631 * 2.0));
    vec4 _649 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _657 = (_316.x * 2.0) + (-1.0);
    float _658 = (_316.y * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _4007 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))));
    float _669 = ((_560.x - _541) * _330) + _541;
    float _670 = ((_560.y - _542) * _330) + _542;
    float _675 = ((_579.x - _669) * _383) + _669;
    float _676 = ((_579.y - _670) * _383) + _670;
    float _689 = (cbMtdParam._m0[14u].z * (((((_597.x - _675) * _411) + _675) * 2.0) + (-1.0))) + _657;
    float _690 = (cbMtdParam._m0[14u].z * (((((_597.y - _676) * _411) + _676) * 2.0) + (-1.0))) + _658;
    float _693 = fma(_664, _245, fma(_690, _237 * TANGENT.x, (_223 * _215) * _689));
    float _696 = fma(_664, _246, fma(_690, _237 * TANGENT.y, (_223 * _216) * _689));
    float _699 = fma(_664, _247, fma(_690, _237 * TANGENT.z, (_223 * _217) * _689));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _4018 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _707 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _708 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _709 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _710 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _711 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _712 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _720 = cbMatDynParam._m0[9u].x * _709;
    float _721 = cbMatDynParam._m0[9u].y * _710;
    float _722 = cbMatDynParam._m0[9u].z * _711;
    float _729 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _730 = _729 * _301;
    float _731 = _729 * _302;
    float _732 = _729 * _303;
    float _739 = abs(exp2(log2(dot(vec3(_704, _705, _706), vec3(_730, _731, _732))) * cbMatDynParam._m0[12u].x));
    float _740 = isnan(0.100000001490116119384765625) ? _739 : (isnan(_739) ? 0.100000001490116119384765625 : max(_739, 0.100000001490116119384765625));
    float _746 = ((isnan(0.699999988079071044921875) ? _740 : (isnan(_740) ? 0.699999988079071044921875 : min(_740, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _768 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4094 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4105 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _775 = (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) - _772) * _746) + _772;
    float _794 = dot(vec3(_704, _705, _706), vec3(0.0, -1.0, 0.0));
    float _4116 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _804 = (_797 * _709) * cbMatDynParam._m0[11u].x;
    float _806 = (_797 * _710) * cbMatDynParam._m0[11u].y;
    float _808 = (_797 * _711) * cbMatDynParam._m0[11u].z;
    float _818 = dot(vec3(_730, _731, _732), vec3(_704, _705, _706)) * 2.0;
    float _828 = dot(vec3((-0.0) - (_730 - (_818 * _704)), (-0.0) - (_731 - (_818 * _705)), (-0.0) - (_732 - (_818 * _706))), vec3(0.0, -1.0, 0.0));
    float _4127 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _835 = exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 4.0);
    float _861 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _910 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _911 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
    float _917 = _910 * _916;
    float _918 = _911 * _916;
    float _919 = _912 * _916;
    vec4 _924 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _926 = _924.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1228 = sqrt(((_910 * _910) + (_911 * _911)) + (_912 * _912));
        float _1234 = (cbMatDynParam._m0[5u].x * _1228) + cbMatDynParam._m0[5u].y;
        float _4138 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1239 = (cbMatDynParam._m0[5u].z * _1228) + cbMatDynParam._m0[5u].w;
        float _4149 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) - _1235)) + _1235) < ((_926 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _937 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _938 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _940 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _942 = _940.w;
    float _960 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _963 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _966 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    vec4 _968 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _970 = _968.x;
    float _982 = (((_968.y - _708) + (_968.w * _708)) * cbMtdParam._m0[3u].x) + _708;
    vec4 _983 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _999 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_970 * _970)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _983.z;
    float _1007 = (((cbMatDynParam._m0[15u].x - _712) * cbMatDynParam._m0[15u].w) * _999) + _712;
    float _1015 = ((_999 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _982)) + _982;
    uint _1039 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1040 = _1039 + 9u;
    uint _1041 = _1040 + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * _720) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * _721) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * _722) * cbInstanceData._m0[_1041].z;
    float _4160 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    vec4 _1053 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1058 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1069 = (((_1058.x - _1007) + (_1058.w * _1007)) * cbMtdParam._m0[3u].x) + _1007;
    float _1082 = (cbMtdParam._m0[3u].x * (((_1050 * _942) - _1050) + _1053.x)) + _1050;
    float _1083 = (cbMtdParam._m0[3u].x * (((_1051 * _942) - _1051) + _1053.y)) + _1051;
    float _1084 = (cbMtdParam._m0[3u].x * (((_1052 * _942) - _1052) + _1053.z)) + _1052;
    float _1098 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_1007 * (_720 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1007 * (_721 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_1007 * (_722 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _1102 = _1098 * cbMatDynParam._m0[13u].w;
    float _1112 = (_1102 * (cbMatDynParam._m0[13u].x - _1082)) + _1082;
    float _1113 = (_1102 * (cbMatDynParam._m0[13u].y - _1083)) + _1083;
    float _1114 = (_1102 * (cbMatDynParam._m0[13u].z - _1084)) + _1084;
    float _1122 = ((_1098 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1069)) + _1069;
    float _1123 = 1.0 - _1122;
    float _1124 = _1123 * _1112;
    float _1125 = _1123 * _1113;
    float _1126 = _1123 * _1114;
    float _1130 = (_1112 + (-0.039999999105930328369140625)) * _1122;
    float _1131 = (_1113 + (-0.039999999105930328369140625)) * _1122;
    float _1132 = (_1114 + (-0.039999999105930328369140625)) * _1122;
    float _1133 = _1130 + 0.039999999105930328369140625;
    float _1134 = _1131 + 0.039999999105930328369140625;
    float _1135 = _1132 + 0.039999999105930328369140625;
    vec4 _1144 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _937, cbSceneParam._m0[86u].y * _938));
    float _1147 = _1144.x * TEXCOORD_4;
    float _1148 = dot(vec3(_704, _705, _706), vec3(_917, _918, _919));
    float _1151 = _1148 * 2.0;
    float _1155 = (_1151 * _704) - _917;
    float _1156 = (_1151 * _705) - _918;
    float _1157 = (_1151 * _706) - _919;
    float _1161 = abs(dot(vec3(_917, _918, _919), vec3(_704, _705, _706)));
    float _4193 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1163 = sqrt(_1015);
    float _1174 = exp2((_1163 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1163 * 3.0));
    float _1180 = (1.0 - _1174) * ((_1163 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1181 = _1174 * _1163;
    float _1209 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1548;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1273 = fma(_1217, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209));
        float _1277 = fma(_1217, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209));
        float _1281 = fma(_1217, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209));
        float _1306 = _1209 + _704;
        float _1307 = _1213 + _705;
        float _1308 = _1217 + _706;
        float _1318 = fma(_1308, cbModelParam._m0[26u].z, fma(_1307, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1306)) - _1273;
        float _1319 = fma(_1308, cbModelParam._m0[27u].z, fma(_1307, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1306)) - _1277;
        float _1320 = fma(_1308, cbModelParam._m0[28u].z, fma(_1307, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1306)) - _1281;
        float _1324 = inversesqrt(dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320)));
        float _1337 = ((_1324 * _1318) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1273 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1324 * _1319) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1277 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1324 * _1320) / cbModelParam._m0[34u].z) + ((((((_1281 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        float _1376 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1342.x + (-0.5));
        float _1378 = _1376 * (_1342.y + (-0.5));
        float _1379 = _1376 * (_1342.z + (-0.5));
        float _1386 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1349.x + (-0.5));
        float _1388 = _1386 * (_1349.y + (-0.5));
        float _1389 = _1386 * (_1349.z + (-0.5));
        float _1396 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1356.x + (-0.5));
        float _1398 = _1396 * (_1356.y + (-0.5));
        float _1399 = _1396 * (_1356.z + (-0.5));
        float _1406 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1363.x + (-0.5));
        float _1408 = _1406 * (_1363.y + (-0.5));
        float _1409 = _1406 * (_1363.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1430 = (dot(vec3(_704, _705, _706), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1440 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4241 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1442 + 1.0))) + _1447) * _1410;
        float _1457 = _1378 * 0.5;
        float _1458 = _1388 * 0.5;
        float _1459 = _1398 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_704, _705, _706), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4274 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1484 + 1.0))) + _1489) * _1411;
        float _1499 = _1379 * 0.5;
        float _1500 = _1389 * 0.5;
        float _1501 = _1399 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_704, _705, _706), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4307 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1526 + 1.0))) + _1531) * _1412;
        _1548 = _1379;
        _1550 = _1378;
        _1551 = _1377;
        _1552 = _1389;
        _1553 = _1388;
        _1554 = _1387;
        _1555 = _1399;
        _1556 = _1398;
        _1557 = _1397;
        _1558 = _1412;
        _1559 = _1411;
        _1560 = _1410;
        _1561 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1549;
        _1550 = _1549;
        _1551 = _1549;
        _1552 = _1549;
        _1553 = _1549;
        _1554 = _1549;
        _1555 = _1549;
        _1556 = _1549;
        _1557 = _1549;
        _1558 = _1549;
        _1559 = _1549;
        _1560 = _1549;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1592 = fma(_1217, cbModelParam._m0[30u].z, fma(_1213, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209));
        float _1596 = fma(_1217, cbModelParam._m0[31u].z, fma(_1213, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209));
        float _1600 = fma(_1217, cbModelParam._m0[32u].z, fma(_1213, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209));
        float _1623 = _1209 + _704;
        float _1624 = _1213 + _705;
        float _1625 = _1217 + _706;
        float _1635 = fma(_1625, cbModelParam._m0[30u].z, fma(_1624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1623)) - _1592;
        float _1636 = fma(_1625, cbModelParam._m0[31u].z, fma(_1624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1623)) - _1596;
        float _1637 = fma(_1625, cbModelParam._m0[32u].z, fma(_1624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1623)) - _1600;
        float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
        float _1654 = ((_1641 * _1635) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1592 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1655 = ((_1641 * _1636) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1596 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1641 * _1637) / cbModelParam._m0[35u].z) + ((((((_1600 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        float _1691 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1658.x + (-0.5));
        float _1693 = _1691 * (_1658.y + (-0.5));
        float _1694 = _1691 * (_1658.z + (-0.5));
        float _1701 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1665.x + (-0.5));
        float _1703 = _1701 * (_1665.y + (-0.5));
        float _1704 = _1701 * (_1665.z + (-0.5));
        float _1711 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1672.x + (-0.5));
        float _1713 = _1711 * (_1672.y + (-0.5));
        float _1714 = _1711 * (_1672.z + (-0.5));
        float _1721 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1679.x + (-0.5));
        float _1723 = _1721 * (_1679.y + (-0.5));
        float _1724 = _1721 * (_1679.z + (-0.5));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = _1692 * 0.5;
        float _1729 = _1702 * 0.5;
        float _1730 = _1712 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_704, _705, _706), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4370 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1755 + 1.0))) + _1760) * _1725;
        float _1770 = _1693 * 0.5;
        float _1771 = _1703 * 0.5;
        float _1772 = _1713 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_704, _705, _706), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4403 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1797 + 1.0))) + _1802) * _1726;
        float _1812 = _1694 * 0.5;
        float _1813 = _1704 * 0.5;
        float _1814 = _1714 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_704, _705, _706), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4436 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1839 + 1.0))) + _1844) * _1727;
        _1861 = _1694;
        _1862 = _1693;
        _1863 = _1692;
        _1864 = _1704;
        _1865 = _1703;
        _1866 = _1702;
        _1867 = _1714;
        _1868 = _1713;
        _1869 = _1712;
        _1870 = _1727;
        _1871 = _1726;
        _1872 = _1725;
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    }
    else
    {
        _1861 = _1549;
        _1862 = _1549;
        _1863 = _1549;
        _1864 = _1549;
        _1865 = _1549;
        _1866 = _1549;
        _1867 = _1549;
        _1868 = _1549;
        _1869 = _1549;
        _1870 = _1549;
        _1871 = _1549;
        _1872 = _1549;
        _1873 = 0.0;
        _1874 = 0.0;
        _1875 = 0.0;
    }
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1561)) + _1561;
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1562)) + _1562;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1563)) + _1563;
    float _1908 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1885));
    float _1929 = _1155 * 0.5;
    float _1930 = _1156 * 0.5;
    float _1931 = _1157 * 0.5;
    float _1932 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1935 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1938 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1969;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1945 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1548, _1552, _1555, _1558));
        float _1949 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1550, _1553, _1556, _1559));
        float _1953 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1960 = dot(vec4(cbModelParam._m0[39u]), vec4(_1929, _1930, _1931, 1.0));
        _1969 = dot(vec3(isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1960) ? 0.0 : (isnan(0.0) ? _1960 : max(0.0, _1960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1969 = 1.0;
    }
    float _1980;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1971 = dot(vec4(cbModelParam._m0[40u]), vec4(_1929, _1930, _1931, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1971) ? 0.0 : (isnan(0.0) ? _1971 : max(0.0, _1971))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1984 = (_1980 * cbModelParam._m0[1u].x) + (_1969 * (1.0 - cbModelParam._m0[1u].x));
    float _1994 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1015);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1994 : min(cbModelParam._m0[25u].z, _1994));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2042 = fma(_1217, cbModelParam._m0[13u].z, fma(_1213, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1209)) + cbModelParam._m0[13u].w;
        float _2046 = fma(_1217, cbModelParam._m0[14u].z, fma(_1213, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1209)) + cbModelParam._m0[14u].w;
        float _2050 = fma(_1217, cbModelParam._m0[15u].z, fma(_1213, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1209)) + cbModelParam._m0[15u].w;
        float _2053 = fma(_1157, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155));
        float _2056 = fma(_1157, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155));
        float _2059 = fma(_1157, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155));
        float _2087;
        if (_2053 > 0.0)
        {
            _2087 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2087 = frontier_phi_19_17_ladder;
        }
        float _2291;
        if (_2056 > 0.0)
        {
            _2291 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2291 = frontier_phi_28_24_ladder;
        }
        float _2545;
        if (_2059 > 0.0)
        {
            _2545 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2545 = frontier_phi_40_35_ladder;
        }
        float _2547 = isnan(_2291) ? _2087 : (isnan(_2087) ? _2291 : min(_2087, _2291));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _2053) + _2042;
        float _2553 = (_2548 * _2056) + _2046;
        float _2554 = (_2548 * _2059) + _2050;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2555;
        float _2559 = _2555 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 > _2559) || ((_2553 < _2557) || ((_2552 < _2557) || (_2552 > _2559))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2554, cbModelParam._m0[9u].z, fma(_2553, cbModelParam._m0[9u].y, _2552 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2554, cbModelParam._m0[10u].z, fma(_2553, cbModelParam._m0[10u].y, _2552 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2554, cbModelParam._m0[11u].z, fma(_2553, cbModelParam._m0[11u].y, _2552 * cbModelParam._m0[11u].x))), _1995);
            frontier_phi_18_40_ladder = _2682.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2682.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2682.x * cbModelParam._m0[1u].y;
        }
        _2075 = frontier_phi_18_40_ladder_2;
        _2077 = frontier_phi_18_40_ladder_1;
        _2079 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1155, _1156, _1157), _1995);
        _2075 = _2063.x * cbModelParam._m0[1u].y;
        _2077 = _2063.y * cbModelParam._m0[1u].y;
        _2079 = _2063.z * cbModelParam._m0[1u].y;
    }
    float _2083 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1015);
    float _2084 = isnan(_2083) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2083 : min(cbModelParam._m0[25u].w, _2083));
    float _2175;
    float _2177;
    float _2179;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2139 = fma(_1217, cbModelParam._m0[21u].z, fma(_1213, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1209)) + cbModelParam._m0[21u].w;
        float _2143 = fma(_1217, cbModelParam._m0[22u].z, fma(_1213, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1209)) + cbModelParam._m0[22u].w;
        float _2147 = fma(_1217, cbModelParam._m0[23u].z, fma(_1213, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1209)) + cbModelParam._m0[23u].w;
        float _2150 = fma(_1157, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155));
        float _2153 = fma(_1157, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155));
        float _2156 = fma(_1157, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155));
        float _2296;
        if (_2150 > 0.0)
        {
            _2296 = abs((1.0 - _2139) / _2150);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2139 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2296 = frontier_phi_30_26_ladder;
        }
        float _2572;
        if (_2153 > 0.0)
        {
            _2572 = abs((1.0 - _2143) / _2153);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2143 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2572 = frontier_phi_42_37_ladder;
        }
        float _2785;
        if (_2156 > 0.0)
        {
            _2785 = abs((1.0 - _2147) / _2156);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2147 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2785 = frontier_phi_51_48_ladder;
        }
        float _2787 = isnan(_2572) ? _2296 : (isnan(_2296) ? _2572 : min(_2296, _2572));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2150) + _2139;
        float _2793 = (_2788 * _2153) + _2143;
        float _2794 = (_2788 * _2156) + _2147;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _2084);
            frontier_phi_27_51_ladder = _3028.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3028.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3028.x * cbModelParam._m0[1u].z;
        }
        _2175 = frontier_phi_27_51_ladder_2;
        _2177 = frontier_phi_27_51_ladder_1;
        _2179 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2159 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1155, _1156, _1157), _2084);
        _2175 = _2159.x * cbModelParam._m0[1u].z;
        _2177 = _2159.y * cbModelParam._m0[1u].z;
        _2179 = _2159.z * cbModelParam._m0[1u].z;
    }
    float _2192 = (((_1180 * _1133) + _1181) * _1147) * ((cbModelParam._m0[1u].w * (_2175 - _2075)) + _2075);
    float _2194 = (((_1180 * _1134) + _1181) * _1147) * ((cbModelParam._m0[1u].w * (_2177 - _2077)) + _2077);
    float _2196 = (((_1180 * _1135) + _1181) * _1147) * ((cbModelParam._m0[1u].w * (_2179 - _2079)) + _2079);
    float _2199 = fma(_2196, cbSceneParam._m0[89u].z, fma(_2194, cbSceneParam._m0[89u].y, _2192 * cbSceneParam._m0[89u].x));
    float _2202 = fma(_2196, cbSceneParam._m0[90u].z, fma(_2194, cbSceneParam._m0[90u].y, _2192 * cbSceneParam._m0[90u].x));
    float _2205 = fma(_2196, cbSceneParam._m0[91u].z, fma(_2194, cbSceneParam._m0[91u].y, _2192 * cbSceneParam._m0[91u].x));
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_1039 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _1147 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2250 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2254 = _2217 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_704, _705, _706));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_704, _705, _706));
    float _4572 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4583 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2234].x * _2240) * _2275) + ((cbLight._m0[_2244].x * _2250) * _2273);
    float _2283 = ((_2240 * cbLight._m0[_2234].y) * _2275) + ((_2250 * cbLight._m0[_2244].y) * _2273);
    float _2284 = ((_2240 * cbLight._m0[_2234].z) * _2275) + ((_2250 * cbLight._m0[_2244].z) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2290)
    {
        _2301 = _2282;
        _2303 = _2283;
        _2305 = _2284;
    }
    else
    {
        uint _2309 = _2217 + 6u;
        float _2325 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4594 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2328 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2301 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2282;
        _2303 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2283;
        _2305 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2284;
    }
    bool _2308 = _2288.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2308)
    {
        _2346 = _2301;
        _2348 = _2303;
        _2350 = _2305;
    }
    else
    {
        uint _2516 = _2217 + 7u;
        float _2532 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4610 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2535 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2346 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2301;
        _2348 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2303;
        _2350 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2305;
    }
    uint _2353 = _2217 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _1015) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2217].x + _917;
    float _2369 = cbLight._m0[_2217].y + _918;
    float _2370 = cbLight._m0[_2217].z + _919;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2217].xyz));
    float _4626 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _4637 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2382 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2383 = dot(vec3(_704, _705, _706), vec3(_2375, _2376, _2377));
    float _4648 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2375, _2376, _2377));
    float _4659 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2404 = 0.959999978542327880859375 - _1130;
    float _2406 = 0.959999978542327880859375 - _1131;
    float _2407 = 0.959999978542327880859375 - _1132;
    float _2414 = 1.0 - _2367;
    float _2425 = (0.5 / (((_2382 * ((_2381 * _2414) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2414) + _2367) * _2381))) * _2381;
    float _4670 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2438 = _2217 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _1015) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2254].x + _917;
    float _2452 = cbLight._m0[_2254].y + _918;
    float _2453 = cbLight._m0[_2254].z + _919;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2254].xyz));
    float _4681 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2465 = dot(vec3(_704, _705, _706), vec3(_2458, _2459, _2460));
    float _4692 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2458, _2459, _2460));
    float _4703 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
    float _2491 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2382 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2491) + _2450) * _2464))) * _2464;
    float _4714 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2513 = (((((_2484 * _2404) + _1133) * cbLight._m0[_2438].x) * _2503) * _2240) + (((((_2403 * _2404) + _1133) * cbLight._m0[_2353].x) * _2427) * _2250);
    float _2514 = (((((_2484 * _2406) + _1134) * cbLight._m0[_2438].y) * _2503) * _2240) + (((((_2403 * _2406) + _1134) * cbLight._m0[_2353].y) * _2427) * _2250);
    float _2515 = (((((_2484 * _2407) + _1135) * cbLight._m0[_2438].z) * _2503) * _2240) + (((((_2403 * _2407) + _1135) * cbLight._m0[_2353].z) * _2427) * _2250);
    float _2577;
    float _2579;
    float _2581;
    if (_2290)
    {
        _2577 = _2513;
        _2579 = _2514;
        _2581 = _2515;
    }
    else
    {
        uint _2583 = _2217 + 2u;
        uint _2587 = _2217 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _1015) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _917;
        float _2604 = cbLight._m0[_2583].y + _918;
        float _2605 = cbLight._m0[_2583].z + _919;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2583].xyz));
        float _4725 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2617 = dot(vec3(_704, _705, _706), vec3(_2610, _2611, _2612));
        float _4736 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4747 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2643 = 1.0 - _2602;
        float _2653 = (0.5 / (((_2382 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2643) + _2602) * _2616))) * _2616;
        float _4758 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2577 = (((((_2636 * _2404) + _1133) * cbLight._m0[_2587].x) * _2655) * _2656) + _2513;
        _2579 = (((((_2636 * _2406) + _1134) * cbLight._m0[_2587].y) * _2655) * _2656) + _2514;
        _2581 = (((((_2636 * _2407) + _1135) * cbLight._m0[_2587].z) * _2655) * _2656) + _2515;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2308)
    {
        _2691 = _2577;
        _2693 = _2579;
        _2695 = _2581;
    }
    else
    {
        uint _2702 = _2217 + 3u;
        uint _2706 = _2217 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _1015) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _917;
        float _2723 = cbLight._m0[_2702].y + _918;
        float _2724 = cbLight._m0[_2702].z + _919;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2702].xyz));
        float _4774 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2736 = dot(vec3(_704, _705, _706), vec3(_2729, _2730, _2731));
        float _4785 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4796 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2382 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2762) + _2721) * _2735))) * _2735;
        float _4807 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2691 = (((((_2755 * _2404) + _1133) * cbLight._m0[_2706].x) * _2774) * _2775) + _2577;
        _2693 = (((((_2755 * _2406) + _1134) * cbLight._m0[_2706].y) * _2774) * _2775) + _2579;
        _2695 = (((((_2755 * _2407) + _1135) * cbLight._m0[_2706].z) * _2774) * _2775) + _2581;
    }
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_2215.y == 0u)
    {
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2850;
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2850;
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2850;
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.x;
        uint _2877 = uint((float(_2865.y) * floor(float(uint(cbSceneParam._m0[85u].y * _938) / _2866))) + floor(float(uint(cbSceneParam._m0[85u].x * _937) / _2866)));
        float _2887 = (log2(_2853 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2888 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        uint _2891 = uint(isnan(14.0) ? _2888 : (isnan(_2888) ? 14.0 : min(_2888, 14.0)));
        uvec4 _2896 = texelFetch(g_lightClusterGridBuffer, int(((_2891 << 2u) + (_2877 << 6u)) >> 2u));
        uint _2897 = _2896.x;
        uint _2898 = _2865.z;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((((1u << ((_2898 >> 4u) & 15u)) + 4294967295u) & _2897) == 0u) || ((_2898 & 240u) == 0u))
        {
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
        }
        else
        {
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            uint _3200 = 0u;
            uint _3209;
            bool _3210;
            for (;;)
            {
                _3209 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                _3210 = _3209 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3210)
                {
                    frontier_phi_68_pred = _3196;
                    frontier_phi_68_pred_1 = _3199;
                    frontier_phi_68_pred_2 = _3198;
                    frontier_phi_68_pred_3 = _3197;
                    frontier_phi_68_pred_4 = _3195;
                    frontier_phi_68_pred_5 = _3194;
                }
                else
                {
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    uint _3345;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3209;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    for (;;)
                    {
                        uint _3349 = uint(findLSB(_3345)) + (_3200 << 5u);
                        uint _3346 = (_3345 + 4294967295u) & _3345;
                        uint _3351 = _3349 * 48u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3371 = (_3349 * 48u) + 4u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3390 = (_3349 * 48u) + 8u;
                        vec3 _3401 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x));
                        float _3405 = _3365.x - _2851;
                        float _3406 = _3365.y - _2852;
                        float _3407 = _3365.z - _2853;
                        float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                        float _3411 = inversesqrt(_3408);
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3415 = dot(vec3(_960, _963, _966), vec3(_3412, _3413, _3414));
                        float _3420 = 1.0 - (_3408 * _3365.w);
                        float _4833 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3422 = sqrt(_3408) * _3384.w;
                        float _3425 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3415) + _3426;
                        float _3432 = _3422 * _3422;
                        float _3435 = ((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3421) / ((_3432 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2851;
                        float _3440 = (-0.0) - _2852;
                        float _3441 = (-0.0) - _2853;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3456 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _1163;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3446 + _3412;
                        float _3468 = _3447 + _3413;
                        float _3469 = _3448 + _3414;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_960, _963, _966), vec3(_3446, _3447, _3448));
                        float _4849 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3481 = dot(vec3(_960, _963, _966), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4860 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3425 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3415) + _3490;
                        float _4871 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4882 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3488 * _3488) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125))) * _3421;
                        _3269 = (_3435 * _3384.x) + _3342;
                        _3270 = (_3435 * _3384.y) + _3343;
                        _3271 = (_3435 * _3384.z) + _3344;
                        _3266 = (_3516 * _3401.x) + _3339;
                        _3267 = (_3516 * _3401.y) + _3340;
                        _3268 = (_3516 * _3401.z) + _3341;
                        if (_3346 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3346;
                        }
                    }
                    frontier_phi_68_pred = _3268;
                    frontier_phi_68_pred_1 = _3271;
                    frontier_phi_68_pred_2 = _3270;
                    frontier_phi_68_pred_3 = _3269;
                    frontier_phi_68_pred_4 = _3267;
                    frontier_phi_68_pred_5 = _3266;
                }
                _3038 = frontier_phi_68_pred;
                _3044 = frontier_phi_68_pred_1;
                _3042 = frontier_phi_68_pred_2;
                _3040 = frontier_phi_68_pred_3;
                _3036 = frontier_phi_68_pred_4;
                _3034 = frontier_phi_68_pred_5;
                uint _3201 = _3200 + 1u;
                if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3194 = _3034;
                    _3195 = _3036;
                    _3196 = _3038;
                    _3197 = _3040;
                    _3198 = _3042;
                    _3199 = _3044;
                    _3200 = _3201;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
        }
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.z;
        uint _3050 = (_3048 >> 8u) & 15u;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((4294967295u << _3050) & _2897) == 0u)
        {
            _3162 = _3033;
            _3164 = _3035;
            _3166 = _3037;
            _3168 = _3039;
            _3170 = _3041;
            _3172 = _3043;
        }
        else
        {
            float _3187 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
            float _3188 = _3187 * _2851;
            float _3189 = _3187 * _2852;
            float _3190 = _3187 * _2853;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3050 < ((_3048 >> 12u) & 15u))
            {
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3322 = _3033;
                float _3323 = _3035;
                float _3324 = _3037;
                float _3325 = _3039;
                float _3326 = _3041;
                float _3327 = _3043;
                uint _3328 = _3050;
                uint _3337;
                bool _3338;
                for (;;)
                {
                    _3337 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                    _3338 = _3337 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3338)
                    {
                        frontier_phi_79_pred = _3327;
                        frontier_phi_79_pred_1 = _3326;
                        frontier_phi_79_pred_2 = _3325;
                        frontier_phi_79_pred_3 = _3324;
                        frontier_phi_79_pred_4 = _3323;
                        frontier_phi_79_pred_5 = _3322;
                    }
                    else
                    {
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        uint _3549 = _3337;
                        uint _3550;
                        vec4 _3575;
                        float _3576;
                        vec4 _3591;
                        vec3 _3603;
                        vec4 _3618;
                        vec4 _3634;
                        float _3681;
                        bool _3682;
                        for (;;)
                        {
                            uint _3560 = ((_3328 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3549));
                            _3550 = (_3549 + 4294967295u) & _3549;
                            uint _3562 = _3560 * 40u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3576 = _3575.w;
                            uint _3578 = (_3560 * 40u) + 4u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3560 * 40u) + 8u;
                            _3603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x));
                            uint _3605 = (_3560 * 40u) + 16u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3621 = (_3560 * 40u) + 20u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3637 = (_3560 * 40u) + 24u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3656 = (_3560 * 40u) + 28u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3681 = fma(_2853, _3669.z, fma(_2852, _3669.y, _3669.x * _2851)) + _3669.w;
                            _3682 = !((fma(_2853, _3650.z, fma(_2852, _3650.y, _3650.x * _2851)) + _3650.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3682)
                            {
                                float _3709 = _3575.x - _2851;
                                float _3710 = _3575.y - _2852;
                                float _3711 = _3575.z - _2853;
                                float _3712 = dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711));
                                float _3715 = inversesqrt(_3712);
                                float _3716 = _3715 * _3709;
                                float _3717 = _3715 * _3710;
                                float _3718 = _3715 * _3711;
                                float _3722 = 1.0 - (_3712 / (_3576 * _3576));
                                float _4893 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3727 = sqrt(_3712) * _3591.w;
                                float _3729 = 1.39999997615814208984375 / (_3727 + 1.39999997615814208984375);
                                float _3730 = _3729 * _3729;
                                float _3733 = ((1.0 - _3730) * dot(vec3(_3716, _3717, _3718), vec3(_960, _963, _966))) + _3730;
                                float _3736 = _3727 * _3727;
                                float _3740 = (fma(_2853, _3618.z, fma(_2852, _3618.y, _3618.x * _2851)) + _3618.w) / _3681;
                                float _3741 = (fma(_2853, _3634.z, fma(_2852, _3634.y, _3634.x * _2851)) + _3634.w) / _3681;
                                float _3745 = 1.0 - dot(vec2(_3740, _3741), vec2(_3740, _3741));
                                float _4909 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3747 = _3746 * (((isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0))) * _3723) / ((_3736 * 0.699999988079071044921875) + 1.0));
                                float _3759 = exp2(log2(1.0 / ((_3736 * 3.5) + 5.0)) * 0.25);
                                float _3760 = 1.0 - _1163;
                                float _3767 = sqrt(1.0 - ((1.0 - (_3760 * _3760)) * (1.0 - (_3759 * _3759))));
                                float _3768 = _3767 * _3767;
                                float _3769 = _3768 * _3768;
                                float _3770 = _3716 - _3188;
                                float _3771 = _3717 - _3189;
                                float _3772 = _3718 - _3190;
                                float _3776 = inversesqrt(dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772)));
                                float _3780 = dot(vec3(_960, _963, _966), vec3((-0.0) - _3188, (-0.0) - _3189, (-0.0) - _3190));
                                float _4920 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3784 = dot(vec3(_960, _963, _966), vec3(_3776 * _3770, _3776 * _3771, _3776 * _3772));
                                float _4931 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3791 = ((_3787 * _3787) * (_3769 + (-1.0))) + 1.0;
                                float _3792 = _3729 * _3768;
                                float _3793 = _3792 * _3792;
                                float _3799 = ((1.0 - _3793) * dot(vec3(_960, _963, _966), vec3(_3716, _3717, _3718))) + _3793;
                                float _4942 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3801 = 1.0 - _3768;
                                float _3811 = (0.5 / (((_3800 * ((_3783 * _3801) + _3768)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3768) * _3783))) * _3800;
                                float _4953 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3821 = (_3746 * _3723) * (((_3769 * 3.1415927410125732421875) * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) / ((_3791 * _3791) * ((_3736 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3747 * _3591.z;
                                frontier_phi_85_pred_1 = _3747 * _3591.y;
                                frontier_phi_85_pred_2 = _3747 * _3591.x;
                                frontier_phi_85_pred_3 = _3821 * _3603.z;
                                frontier_phi_85_pred_4 = _3821 * _3603.y;
                                frontier_phi_85_pred_5 = _3821 * _3603.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3830 = frontier_phi_85_pred;
                            _3829 = frontier_phi_85_pred_1;
                            _3828 = frontier_phi_85_pred_2;
                            _3827 = frontier_phi_85_pred_3;
                            _3826 = frontier_phi_85_pred_4;
                            _3825 = frontier_phi_85_pred_5;
                            _3533 = _3828 + _3546;
                            _3534 = _3829 + _3547;
                            _3535 = _3830 + _3548;
                            _3530 = _3825 + _3543;
                            _3531 = _3826 + _3544;
                            _3532 = _3827 + _3545;
                            if (_3550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3550;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3535;
                        frontier_phi_79_pred_1 = _3534;
                        frontier_phi_79_pred_2 = _3533;
                        frontier_phi_79_pred_3 = _3532;
                        frontier_phi_79_pred_4 = _3531;
                        frontier_phi_79_pred_5 = _3530;
                    }
                    _3173 = frontier_phi_79_pred;
                    _3171 = frontier_phi_79_pred_1;
                    _3169 = frontier_phi_79_pred_2;
                    _3167 = frontier_phi_79_pred_3;
                    _3165 = frontier_phi_79_pred_4;
                    _3163 = frontier_phi_79_pred_5;
                    uint _3329 = _3328 + 1u;
                    if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3322 = _3163;
                        _3323 = _3165;
                        _3324 = _3167;
                        _3325 = _3169;
                        _3326 = _3171;
                        _3327 = _3173;
                        _3328 = _3329;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3169;
                frontier_phi_60_61_ladder_1 = _3173;
                frontier_phi_60_61_ladder_2 = _3171;
                frontier_phi_60_61_ladder_3 = _3167;
                frontier_phi_60_61_ladder_4 = _3165;
                frontier_phi_60_61_ladder_5 = _3163;
            }
            else
            {
                frontier_phi_60_61_ladder = _3039;
                frontier_phi_60_61_ladder_1 = _3043;
                frontier_phi_60_61_ladder_2 = _3041;
                frontier_phi_60_61_ladder_3 = _3037;
                frontier_phi_60_61_ladder_4 = _3035;
                frontier_phi_60_61_ladder_5 = _3033;
            }
            _3162 = frontier_phi_60_61_ladder_5;
            _3164 = frontier_phi_60_61_ladder_4;
            _3166 = frontier_phi_60_61_ladder_3;
            _3168 = frontier_phi_60_61_ladder;
            _3170 = frontier_phi_60_61_ladder_2;
            _3172 = frontier_phi_60_61_ladder_1;
        }
        float _3177 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
        _2909 = (_3177 * _3168) + _2346;
        _2911 = (_3177 * _3170) + _2348;
        _2913 = (_3177 * _3172) + _2350;
        _2915 = ((_3162 * _1133) * _3177) + _2691;
        _2917 = ((_3164 * _1134) * _3177) + _2693;
        _2919 = ((_3166 * _1135) * _3177) + _2695;
    }
    else
    {
        _2909 = _2346;
        _2911 = _2348;
        _2913 = _2350;
        _2915 = _2691;
        _2917 = _2693;
        _2919 = _2695;
    }
    uint _2925 = _1040 + uint(cbMatDynParam._m0[0u].w);
    float _2931 = cbInstanceData._m0[_2925].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _746) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.x) * _775)) + (((_804 - (_804 * _712)) + (cbMatDynParam._m0[11u].x * _835)) * cbMatDynParam._m0[9u].x));
    float _2932 = cbInstanceData._m0[_2925].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _746) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.y) * _775)) + (((_806 - (_806 * _712)) + (cbMatDynParam._m0[11u].y * _835)) * cbMatDynParam._m0[9u].y));
    float _2933 = cbInstanceData._m0[_2925].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _746) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _636) * _649.z) * _775)) + (((_808 - (_808 * _712)) + (cbMatDynParam._m0[11u].z * _835)) * cbMatDynParam._m0[9u].z));
    float _4969 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4980 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4991 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _5002 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2951 = (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2909 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1147))) + ((_2915 + ((isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0))) * _1984)) * cbPerFrame._m0[3u].x)) + _2931;
    float _2953 = (_2932 + ((_2917 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1984)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2911 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1147)));
    float _2955 = (_2933 + ((_2919 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1984)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_2913 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1147)));
    float _2956 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
    float _2957 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
    float _2958 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
    float _2964 = cbMtdParam._m0[2u].x * _2931;
    float _2965 = cbMtdParam._m0[2u].y * _2932;
    float _2966 = cbMtdParam._m0[2u].z * _2933;
    float _2973 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _775) + cbMatDynParam._m0[12u].y;
    float _2978 = cbInstanceData._m0[_1039 + 6u].w * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)));
    float _2983 = _937 / cbSceneParam._m0[86u].x;
    float _2984 = _938 / cbSceneParam._m0[86u].y;
    vec4 _2998 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, (log2((isnan(cbSceneParam._m0[77u].w) ? _861 : (isnan(_861) ? cbSceneParam._m0[77u].w : min(_861, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3000 = _2998.x;
    float _3001 = _2998.y;
    float _3002 = _2998.z;
    float _3003 = _2998.w;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    if (_861 > cbSceneParam._m0[78u].w)
    {
        float _3058 = isnan(_861) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _861 : min(cbSceneParam._m0[80u].w, _861));
        float _3059 = _3058 / _861;
        float _3070 = _3059 * _910;
        float _3071 = _911 * _3059;
        float _3072 = (-0.0) - _3071;
        float _3073 = _3059 * _912;
        float _3075 = (cbSceneParam._m0[77u].w * _3072) / _3058;
        float _3076 = _3075 + cbSceneParam._m0[79u].w;
        float _3077 = cbSceneParam._m0[79u].w - _3071;
        float _3083 = sqrt(((_3070 * _3070) + (_3071 * _3071)) + (_3073 * _3073));
        float _3086 = (1.0 - (cbSceneParam._m0[77u].w / _3058)) * _3083;
        float _3091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3279;
        if (abs((_3072 - _3075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3279 = ((((_3076 > 0.0) ? exp2(_3091 * _3076) : (2.0 - exp2(_3093 * _3076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3086;
        }
        else
        {
            float _3223 = 1.0 / cbSceneParam._m0[80u].x;
            float _3224 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : max(_3076, _3077));
            float _3225 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : min(_3076, _3077));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            _3279 = ((abs(_3083 / _3072) * cbSceneParam._m0[80u].y) * ((((_3234 - _3235) * 2.0) - ((exp2(_3091 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0)))) - exp2(_3091 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))))) * _3223)) - ((exp2(_3093 * _3234) - exp2(_3093 * _3235)) * _3223))) + (_3086 * cbSceneParam._m0[80u].z);
        }
        vec4 _3281 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, 1.0), 0.0);
        float _3290 = exp2((_3279 * (-1.44269502162933349609375)) * (1.0 - _3281.w));
        float _3291 = log2(_3290);
        float _3307 = log2(_3003);
        _3095 = (exp2(_3307 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].x)) * _3281.x) / cbSceneParam._m0[78u].x)) + _3000;
        _3097 = (exp2(_3307 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].y)) * _3281.y) / cbSceneParam._m0[78u].y)) + _3001;
        _3099 = (exp2(_3307 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].z)) * _3281.z) / cbSceneParam._m0[78u].z)) + _3002;
        _3101 = _3290 * _3003;
    }
    else
    {
        _3095 = _3000;
        _3097 = _3001;
        _3099 = _3002;
        _3101 = _3003;
    }
    bool _3317;
    vec4 _3111;
    vec4 _3133;
    float _3135;
    float _3139;
    float _3140;
    float _3141;
    float _3144;
    float _3147;
    float _3150;
    float _3151;
    bool _3161;
    for (;;)
    {
        _3111 = cbMatDynParam._m0[0u];
        float _3113 = roundEven(_3111.y);
        bool _3114 = _3113 == 3.0;
        float _3115 = log2(_3101);
        float _3119 = exp2(_3115 * cbSceneParam._m0[78u].x);
        float _3120 = exp2(_3115 * cbSceneParam._m0[78u].y);
        float _3121 = exp2(_3115 * cbSceneParam._m0[78u].z);
        float _3122 = _3119 * _2956;
        float _3123 = _3120 * _2957;
        float _3124 = _3121 * _2958;
        float _3131 = _926 + (-0.5);
        _3133 = cbMtdParam._m0[1u];
        _3135 = _3133.y * _3131;
        float _3138 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3139 = _3138 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3095)));
        _3140 = _3138 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3097)));
        _3141 = _3138 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3099)));
        _3144 = ((_2964 * _2973) * _3119) * _3138;
        _3147 = ((_2965 * _2973) * _3120) * _3138;
        _3150 = ((_2966 * _2973) * _3121) * _3138;
        _3151 = _3131 * 0.999000012874603271484375;
        _3161 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3161)
        {
            if ((cbInstanceData._m0[_1039 + 7u].x + _3151) < 0.5)
            {
                _3317 = true;
                break;
            }
        }
        uint _3258 = _1040 + uint(_3111.w);
        if ((cbInstanceData._m0[_3258].w < 1.0) && ((cbInstanceData._m0[_3258].w + _3151) < 0.5))
        {
            _3317 = true;
            break;
        }
        if ((_3135 + _490) < _3133.x)
        {
            _3317 = true;
            break;
        }
        _3317 = false;
        break;
    }
    float _3521;
    if (_3317)
    {
        discard_state = true;
        _3521 = 0.0;
    }
    else
    {
        _3521 = _2978;
    }
    SV_Target.x = _3139;
    SV_Target.y = _3140;
    SV_Target.z = _3141;
    SV_Target.w = _3521;
    SV_Target_1.x = _3144;
    SV_Target_1.y = _3147;
    SV_Target_1.z = _3150;
    SV_Target_1.w = _2978;
    discard_exit();
}


