#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1344;
float _4052;
float _4053;
float _4054;
float _4055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _323 = exp2(log2(_317 * 22.0) * 260.0);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _339 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _349 = cbMtdParam._m0[10u].x * _339.x;
    float _350 = cbMtdParam._m0[10u].y * _339.y;
    float _351 = cbMtdParam._m0[10u].z * _339.z;
    vec4 _363 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _407 = (((((_363.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _385.x) - _349) * _325) + _349;
    float _408 = (((((_363.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _385.y) - _350) * _325) + _350;
    float _409 = (((((_363.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _385.z) - _351) * _325) + _351;
    float _410 = _385.w * _363.w;
    vec4 _426 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _436 = (((_426.x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _325) + cbMtdParam._m0[17u].x;
    vec4 _448 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _457 = cbMtdParam._m0[14u].y + _448.z;
    vec4 _469 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _481 = ((((_317 * 2.0) * (cbMtdParam._m0[14u].x + _469.z)) - _457) * _325) + _457;
    float _499 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4074 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _505 = (_500 * _500) * (3.0 - (_500 * 2.0));
    vec4 _518 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _526 = (_312.x * 2.0) + (-1.0);
    float _527 = (_312.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _4085 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    float _546 = (cbMtdParam._m0[14u].z * (((((_469.x - _450) * _325) + _450) * 2.0) + (-1.0))) + _526;
    float _547 = (cbMtdParam._m0[14u].z * (((((_469.y - _451) * _325) + _451) * 2.0) + (-1.0))) + _527;
    float _550 = fma(_533, _241, fma(_547, _233 * TANGENT.x, (_219 * _211) * _546));
    float _553 = fma(_533, _242, fma(_547, _233 * TANGENT.y, (_219 * _212) * _546));
    float _556 = fma(_533, _243, fma(_547, _233 * TANGENT.z, (_219 * _213) * _546));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _4096 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _564 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _565 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _566 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _567 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _568 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _569 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _577 = cbMatDynParam._m0[9u].x * _566;
    float _578 = cbMatDynParam._m0[9u].y * _567;
    float _579 = cbMatDynParam._m0[9u].z * _568;
    float _586 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _587 = _586 * _297;
    float _588 = _586 * _298;
    float _589 = _586 * _299;
    float _590 = dot(vec3(_561, _562, _563), vec3(_587, _588, _589));
    float _596 = abs(exp2(log2(_590) * cbMatDynParam._m0[12u].x));
    float _597 = isnan(0.100000001490116119384765625) ? _596 : (isnan(_596) ? 0.100000001490116119384765625 : max(_596, 0.100000001490116119384765625));
    float _603 = ((isnan(0.699999988079071044921875) ? _597 : (isnan(_597) ? 0.699999988079071044921875 : min(_597, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _625 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4172 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4183 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _632 = (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) - _629) * _603) + _629;
    float _651 = dot(vec3(_561, _562, _563), vec3(0.0, -1.0, 0.0));
    float _4194 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _661 = (_654 * _566) * cbMatDynParam._m0[11u].x;
    float _663 = (_654 * _567) * cbMatDynParam._m0[11u].y;
    float _665 = (_654 * _568) * cbMatDynParam._m0[11u].z;
    float _672 = dot(vec3(_587, _588, _589), vec3(_561, _562, _563));
    float _675 = _672 * 2.0;
    float _685 = dot(vec3((-0.0) - (_587 - (_675 * _561)), (-0.0) - (_588 - (_675 * _562)), (-0.0) - (_589 - (_675 * _563))), vec3(0.0, -1.0, 0.0));
    float _4205 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _692 = exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 4.0);
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _723 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _725 = _723.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _4216 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _4227 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) - _1030)) + _1030) < ((_725 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _739 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _741 = _739.w;
    float _760 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _763 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _766 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    vec4 _768 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _770 = _768.x;
    float _782 = (((_768.y - _565) + (_768.w * _565)) * cbMtdParam._m0[3u].x) + _565;
    vec4 _783 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _799 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_770 * _770)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _783.z;
    float _807 = (((cbMatDynParam._m0[15u].x - _569) * cbMatDynParam._m0[15u].w) * _799) + _569;
    float _815 = ((_799 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _782)) + _782;
    uint _839 = uint(roundEven(NORMAL.w)) * 13u;
    uint _841 = _839 + 9u;
    uint _842 = _841 + uint(cbMatDynParam._m0[0u].w);
    float _848 = (cbMtdParam._m0[0u].x * _577) * cbInstanceData._m0[_842].x;
    float _849 = (cbMtdParam._m0[0u].y * _578) * cbInstanceData._m0[_842].y;
    float _850 = (cbMtdParam._m0[0u].z * _579) * cbInstanceData._m0[_842].z;
    float _4238 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    vec4 _854 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _859 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _870 = (((_859.x - _807) + (_859.w * _807)) * cbMtdParam._m0[3u].x) + _807;
    float _883 = (cbMtdParam._m0[3u].x * (((_851 * _741) - _851) + _854.x)) + _851;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _741) - _852) + _854.y)) + _852;
    float _885 = (cbMtdParam._m0[3u].x * (((_853 * _741) - _853) + _854.z)) + _853;
    vec4 _886 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _899 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_807 * (_577 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_807 * (_578 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_807 * (_579 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _886.z;
    float _903 = _899 * cbMatDynParam._m0[13u].w;
    float _913 = (_903 * (cbMatDynParam._m0[13u].x - _883)) + _883;
    float _914 = (_903 * (cbMatDynParam._m0[13u].y - _884)) + _884;
    float _915 = (_903 * (cbMatDynParam._m0[13u].z - _885)) + _885;
    float _923 = ((_899 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _870)) + _870;
    float _924 = 1.0 - _923;
    float _925 = _924 * _913;
    float _926 = _924 * _914;
    float _927 = _924 * _915;
    float _931 = (_913 + (-0.039999999105930328369140625)) * _923;
    float _932 = (_914 + (-0.039999999105930328369140625)) * _923;
    float _933 = (_915 + (-0.039999999105930328369140625)) * _923;
    float _934 = _931 + 0.039999999105930328369140625;
    float _935 = _932 + 0.039999999105930328369140625;
    float _936 = _933 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _948 = _945.x * TEXCOORD_4;
    float _949 = _590 * 2.0;
    float _953 = (_949 * _561) - _587;
    float _954 = (_949 * _562) - _588;
    float _955 = (_949 * _563) - _589;
    float _956 = abs(_672);
    float _4271 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_815);
    float _969 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _975 = (1.0 - _969) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _958;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1072 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1076 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1101 = _1004 + _561;
        float _1102 = _1008 + _562;
        float _1103 = _1012 + _563;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1068;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1072;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1076;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_561, _562, _563), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4319 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_561, _562, _563), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4352 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_561, _562, _563), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4385 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1391 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1395 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1418 = _1004 + _561;
        float _1419 = _1008 + _562;
        float _1420 = _1012 + _563;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_561, _562, _563), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4448 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_561, _562, _563), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4481 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_561, _562, _563), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4514 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = _1344;
        _1665 = _1344;
        _1666 = _1344;
        _1667 = _1344;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1356)) + _1356;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1357)) + _1357;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1358)) + _1358;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _953 * 0.5;
    float _1725 = _954 * 0.5;
    float _1726 = _955 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1851 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1854 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1882 = frontier_phi_19_17_ladder;
        }
        float _2055;
        if (_1851 > 0.0)
        {
            _2055 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2055 = frontier_phi_28_24_ladder;
        }
        float _2350;
        if (_1854 > 0.0)
        {
            _2350 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2350 = frontier_phi_40_35_ladder;
        }
        float _2352 = isnan(_2055) ? _1882 : (isnan(_1882) ? _2055 : min(_1882, _2055));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1848) + _1837;
        float _2358 = (_2353 * _1851) + _1841;
        float _2359 = (_2353 * _1854) + _1845;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2360;
        float _2364 = _2360 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 > _2364) || ((_2358 < _2362) || ((_2357 < _2362) || (_2357 > _2364))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_18_40_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_18_40_ladder_2;
        _1872 = frontier_phi_18_40_ladder_1;
        _1874 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1948 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1951 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2060;
        if (_1945 > 0.0)
        {
            _2060 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2060 = frontier_phi_30_26_ladder;
        }
        float _2377;
        if (_1948 > 0.0)
        {
            _2377 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2377 = frontier_phi_42_37_ladder;
        }
        float _2715;
        if (_1951 > 0.0)
        {
            _2715 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2715 = frontier_phi_52_49_ladder;
        }
        float _2717 = isnan(_2377) ? _2060 : (isnan(_2060) ? _2377 : min(_2060, _2377));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _1945) + _1934;
        float _2723 = (_2718 * _1948) + _1938;
        float _2724 = (_2718 * _1951) + _1942;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_27_52_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_27_52_ladder_2;
        _1972 = frontier_phi_27_52_ladder_1;
        _1974 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1879);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_975 * _934) + _976) * _948) * ((cbModelParam._m0[1u].w * (_1970 - _1870)) + _1870);
    float _1989 = (((_975 * _935) + _976) * _948) * ((cbModelParam._m0[1u].w * (_1972 - _1872)) + _1872);
    float _1991 = (((_975 * _936) + _976) * _948) * ((cbModelParam._m0[1u].w * (_1974 - _1874)) + _1874);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2047 = _2034 / _2046;
    float _2048 = _2038 / _2046;
    float _2049 = _2042 / _2046;
    float _2196;
    float _2197;
    float _2198;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2076 = ((uint(_2049 > cbSceneParam._m0[59u].y) + uint(_2049 > cbSceneParam._m0[59u].x)) + uint(_2049 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2077 = _2076 + 43u;
        uint _2085 = _2076 + 44u;
        uint _2093 = _2076 + 45u;
        uint _2101 = _2076 + 46u;
        float _2112 = fma(_2046, cbSceneParam._m0[_2077].w, fma(_2042, cbSceneParam._m0[_2077].z, fma(_2038, cbSceneParam._m0[_2077].y, _2034 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2046, cbSceneParam._m0[_2085].w, fma(_2042, cbSceneParam._m0[_2085].z, fma(_2038, cbSceneParam._m0[_2085].y, _2034 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2046, cbSceneParam._m0[_2101].w, fma(_2042, cbSceneParam._m0[_2101].z, fma(_2038, cbSceneParam._m0[_2101].y, _2034 * cbSceneParam._m0[_2101].x)));
        float _2129 = cbSceneParam._m0[33u].z * _2124;
        float _2131 = cbSceneParam._m0[33u].w * _2124;
        float _2134 = fma(_2046, cbSceneParam._m0[_2093].w, fma(_2042, cbSceneParam._m0[_2093].z, fma(_2038, cbSceneParam._m0[_2093].y, _2034 * cbSceneParam._m0[_2093].x))) / _2124;
        float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
        float _4640 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2189 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2112) / _2124, (_2131 + _2116) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2112) / _2124, (_2116 - _2129) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2129) / _2124, (_2116 - _2131) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2131) / _2124, (_2129 + _2116) / _2124), _2134), 0.0)).x), vec4(0.25)));
        _2196 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
        _2197 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
        _2198 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2196 = 1.0;
        _2197 = 1.0;
        _2198 = 1.0;
    }
    float _2262;
    float _2264;
    float _2266;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2250 = fma(_2046, cbSceneParam._m0[63u].w, fma(_2042, cbSceneParam._m0[63u].z, fma(_2038, cbSceneParam._m0[63u].y, _2034 * cbSceneParam._m0[63u].x)));
        float _2251 = fma(_2046, cbSceneParam._m0[60u].w, fma(_2042, cbSceneParam._m0[60u].z, fma(_2038, cbSceneParam._m0[60u].y, _2034 * cbSceneParam._m0[60u].x))) / _2250;
        float _2252 = fma(_2046, cbSceneParam._m0[61u].w, fma(_2042, cbSceneParam._m0[61u].z, fma(_2038, cbSceneParam._m0[61u].y, _2034 * cbSceneParam._m0[61u].x))) / _2250;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2251 >= cbSceneParam._m0[64u].x) && (_2252 >= cbSceneParam._m0[64u].y)) && (_2251 <= cbSceneParam._m0[64u].z)) && (_2252 <= cbSceneParam._m0[64u].w))
        {
            float _2390 = fma(_2046, cbSceneParam._m0[62u].w, fma(_2042, cbSceneParam._m0[62u].z, fma(_2038, cbSceneParam._m0[62u].y, _2034 * cbSceneParam._m0[62u].x))) / _2250;
            float _2394 = isnan(cbSceneParam._m0[41u].w) ? _2390 : (isnan(_2390) ? cbSceneParam._m0[41u].w : max(_2390, cbSceneParam._m0[41u].w));
            float _2437 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
            float _4656 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
            float _2444 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2251, cbSceneParam._m0[33u].w + _2252), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2251, _2252 - cbSceneParam._m0[33u].z), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].z, _2252 - cbSceneParam._m0[33u].w), _2394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2252), _2394), 0.0)).x), vec4(0.25)));
            float _2448 = 1.0 - (_2444 * cbSceneParam._m0[34u].x);
            float _2449 = 1.0 - (_2444 * cbSceneParam._m0[34u].y);
            float _2450 = 1.0 - (_2444 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_39_38_ladder_1 = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_39_38_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_39_38_ladder = _2197;
            frontier_phi_39_38_ladder_1 = _2196;
            frontier_phi_39_38_ladder_2 = _2198;
        }
        _2262 = frontier_phi_39_38_ladder_1;
        _2264 = frontier_phi_39_38_ladder;
        _2266 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2262 = _2196;
        _2264 = _2197;
        _2266 = _2198;
    }
    uvec4 _2271 = floatBitsToUint(cbInstanceData._m0[_839 + 5u]);
    uint _2273 = _2271.x * 14u;
    uint _2274 = _2273 + 13u;
    float _2281 = _948 + (-1.0);
    float _2286 = (cbLight._m0[_2274].x * _2281) + 1.0;
    float _2287 = (cbLight._m0[_2274].y * _2281) + 1.0;
    float _2288 = (cbLight._m0[_2274].z * _2281) + 1.0;
    float _2289 = (cbLight._m0[_2274].w * _2281) + 1.0;
    uint _2290 = _2273 + 5u;
    float _2296 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
    uint _2300 = _2273 + 4u;
    float _2309 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2313 = _2273 | 1u;
    float _2324 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_561, _562, _563));
    float _2327 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_561, _562, _563));
    float _4692 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _4703 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * 0.3183098733425140380859375;
    float _2334 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2341 = ((cbLight._m0[_2290].x * _2296) * _2334) + (((cbLight._m0[_2300].x * _2262) * _2309) * _2332);
    float _2342 = ((_2296 * cbLight._m0[_2290].y) * _2334) + (((cbLight._m0[_2300].y * _2264) * _2309) * _2332);
    float _2343 = ((_2296 * cbLight._m0[_2290].z) * _2334) + (((cbLight._m0[_2300].z * _2266) * _2309) * _2332);
    uvec4 _2347 = floatBitsToUint(cbLight._m0[_2273 + 12u]);
    bool _2349 = _2347.x == 0u;
    float _2451;
    float _2453;
    float _2455;
    if (_2349)
    {
        _2451 = _2341;
        _2453 = _2342;
        _2455 = _2343;
    }
    else
    {
        uint _2459 = _2273 + 6u;
        float _2475 = (dot(vec3(cbLight._m0[_2273 + 2u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4714 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2478 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2451 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2341;
        _2453 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2342;
        _2455 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2343;
    }
    bool _2458 = _2347.y == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2458)
    {
        _2513 = _2451;
        _2515 = _2453;
        _2517 = _2455;
    }
    else
    {
        uint _2686 = _2273 + 7u;
        float _2702 = (dot(vec3(cbLight._m0[_2273 + 3u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2703 = _2702 * _2702;
        float _4730 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2704 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2705 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2513 = (((cbLight._m0[_2686].x * 0.3183098733425140380859375) * _2704) * _2705) + _2451;
        _2515 = (((cbLight._m0[_2686].y * 0.3183098733425140380859375) * _2704) * _2705) + _2453;
        _2517 = (((cbLight._m0[_2686].z * 0.3183098733425140380859375) * _2704) * _2705) + _2455;
    }
    uint _2520 = _2273 + 8u;
    float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _815) * 0.949999988079071044921875);
    float _2534 = _2533 * _2533;
    float _2535 = cbLight._m0[_2273].x + _587;
    float _2536 = cbLight._m0[_2273].y + _588;
    float _2537 = cbLight._m0[_2273].z + _589;
    float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
    float _2542 = _2541 * _2535;
    float _2543 = _2541 * _2536;
    float _2544 = _2541 * _2537;
    float _2545 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2273].xyz));
    float _4746 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _4757 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2549 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2550 = dot(vec3(_561, _562, _563), vec3(_2542, _2543, _2544));
    float _4768 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2554 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2542, _2543, _2544));
    float _4779 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2558 = _2534 * _2534;
    float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
    float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
    float _2571 = 0.959999978542327880859375 - _931;
    float _2573 = 0.959999978542327880859375 - _932;
    float _2574 = 0.959999978542327880859375 - _933;
    float _2581 = 1.0 - _2534;
    float _2592 = (0.5 / (((_2549 * ((_2548 * _2581) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2581) + _2534) * _2548))) * _2548;
    float _4790 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2594 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
    uint _2608 = _2273 + 9u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _815) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2313].x + _587;
    float _2622 = cbLight._m0[_2313].y + _588;
    float _2623 = cbLight._m0[_2313].z + _589;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2313].xyz));
    float _4801 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2635 = dot(vec3(_561, _562, _563), vec3(_2628, _2629, _2630));
    float _4812 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2639 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2628, _2629, _2630));
    float _4823 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2643 = _2620 * _2620;
    float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
    float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
    float _2661 = 1.0 - _2620;
    float _2671 = (0.5 / (((_2549 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2661) + _2620) * _2634))) * _2634;
    float _4834 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
    float _2683 = (((((_2654 * _2571) + _934) * cbLight._m0[_2608].x) * _2673) * _2296) + ((((cbLight._m0[_2520].x * _2262) * ((_2570 * _2571) + _934)) * _2594) * _2309);
    float _2684 = (((((_2654 * _2573) + _935) * cbLight._m0[_2608].y) * _2673) * _2296) + ((((cbLight._m0[_2520].y * _2264) * ((_2570 * _2573) + _935)) * _2594) * _2309);
    float _2685 = (((((_2654 * _2574) + _936) * cbLight._m0[_2608].z) * _2673) * _2296) + ((((cbLight._m0[_2520].z * _2266) * ((_2570 * _2574) + _936)) * _2594) * _2309);
    float _2741;
    float _2743;
    float _2745;
    if (_2349)
    {
        _2741 = _2683;
        _2743 = _2684;
        _2745 = _2685;
    }
    else
    {
        uint _2747 = _2273 + 2u;
        uint _2751 = _2273 + 10u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _815) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _587;
        float _2768 = cbLight._m0[_2747].y + _588;
        float _2769 = cbLight._m0[_2747].z + _589;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2747].xyz));
        float _4845 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2781 = dot(vec3(_561, _562, _563), vec3(_2774, _2775, _2776));
        float _4856 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4867 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) * 5.0);
        float _2807 = 1.0 - _2766;
        float _2817 = (0.5 / (((_2549 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2807) + _2766) * _2780))) * _2780;
        float _4878 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2741 = (((((_2800 * _2571) + _934) * cbLight._m0[_2751].x) * _2819) * _2820) + _2683;
        _2743 = (((((_2800 * _2573) + _935) * cbLight._m0[_2751].y) * _2819) * _2820) + _2684;
        _2745 = (((((_2800 * _2574) + _936) * cbLight._m0[_2751].z) * _2819) * _2820) + _2685;
    }
    float _2851;
    float _2853;
    float _2855;
    if (_2458)
    {
        _2851 = _2741;
        _2853 = _2743;
        _2855 = _2745;
    }
    else
    {
        uint _2862 = _2273 + 3u;
        uint _2866 = _2273 + 11u;
        float _2880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2862].w)) * _815) * 0.949999988079071044921875);
        float _2881 = _2880 * _2880;
        float _2882 = cbLight._m0[_2862].x + _587;
        float _2883 = cbLight._m0[_2862].y + _588;
        float _2884 = cbLight._m0[_2862].z + _589;
        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
        float _2889 = _2888 * _2882;
        float _2890 = _2888 * _2883;
        float _2891 = _2888 * _2884;
        float _2892 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2862].xyz));
        float _4894 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _2896 = dot(vec3(_561, _562, _563), vec3(_2889, _2890, _2891));
        float _4905 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _2900 = dot(vec3(cbLight._m0[_2862].xyz), vec3(_2889, _2890, _2891));
        float _4916 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2904 = _2881 * _2881;
        float _2908 = ((_2899 * _2899) * (_2904 + (-1.0))) + 1.0;
        float _2915 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
        float _2922 = 1.0 - _2881;
        float _2932 = (0.5 / (((_2549 * ((_2895 * _2922) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2549 * _2922) + _2881) * _2895))) * _2895;
        float _4927 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2934 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2904 / ((_2908 * _2908) * 3.141590118408203125));
        float _2935 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2851 = (((((_2915 * _2571) + _934) * cbLight._m0[_2866].x) * _2934) * _2935) + _2741;
        _2853 = (((((_2915 * _2573) + _935) * cbLight._m0[_2866].y) * _2934) * _2935) + _2743;
        _2855 = (((((_2915 * _2574) + _936) * cbLight._m0[_2866].z) * _2934) * _2935) + _2745;
    }
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_2271.y == 0u)
    {
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.x;
        uint _2968 = uint((float(_2956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2957))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2957)));
        float _2978 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2979 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        uint _2982 = uint(isnan(14.0) ? _2979 : (isnan(_2979) ? 14.0 : min(_2979, 14.0)));
        uvec4 _2987 = texelFetch(g_lightClusterGridBuffer, int(((_2982 << 2u) + (_2968 << 6u)) >> 2u));
        uint _2988 = _2987.x;
        uint _2989 = _2956.z;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((((1u << ((_2989 >> 4u) & 15u)) + 4294967295u) & _2988) == 0u) || ((_2989 & 240u) == 0u))
        {
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
        }
        else
        {
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            uint _3270 = 0u;
            uint _3279;
            bool _3280;
            for (;;)
            {
                _3279 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                _3280 = _3279 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3280)
                {
                    frontier_phi_73_pred = _3269;
                    frontier_phi_73_pred_1 = _3268;
                    frontier_phi_73_pred_2 = _3267;
                    frontier_phi_73_pred_3 = _3266;
                    frontier_phi_73_pred_4 = _3265;
                    frontier_phi_73_pred_5 = _3264;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3279;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3270 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2047;
                        float _3476 = _3435.y - _2048;
                        float _3477 = _3435.z - _2049;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_760, _763, _766), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4953 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3505 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3509 = (-0.0) - _2047;
                        float _3510 = (-0.0) - _2048;
                        float _3511 = (-0.0) - _2049;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3516 = _3515 * _3509;
                        float _3517 = _3515 * _3510;
                        float _3518 = _3515 * _3511;
                        float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3526 = 1.0 - _958;
                        float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                        float _3534 = _3533 * _3533;
                        float _3535 = _3534 * _3534;
                        float _3536 = _3516 + _3482;
                        float _3537 = _3517 + _3483;
                        float _3538 = _3518 + _3484;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3546 = dot(vec3(_760, _763, _766), vec3(_3516, _3517, _3518));
                        float _4969 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3550 = dot(vec3(_760, _763, _766), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                        float _4980 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                        float _3558 = _3495 * _3534;
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3485) + _3559;
                        float _4991 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3564 = 1.0 - _3534;
                        float _3574 = (0.5 / (((_3563 * ((_3549 * _3564) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3534) * _3549))) * _3563;
                        float _5002 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3585 = (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3339 = (_3505 * _3454.x) + _3412;
                        _3340 = (_3505 * _3454.y) + _3413;
                        _3341 = (_3505 * _3454.z) + _3414;
                        _3336 = (_3585 * _3471.x) + _3409;
                        _3337 = (_3585 * _3471.y) + _3410;
                        _3338 = (_3585 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_73_pred = _3341;
                    frontier_phi_73_pred_1 = _3340;
                    frontier_phi_73_pred_2 = _3339;
                    frontier_phi_73_pred_3 = _3338;
                    frontier_phi_73_pred_4 = _3337;
                    frontier_phi_73_pred_5 = _3336;
                }
                _3114 = frontier_phi_73_pred;
                _3112 = frontier_phi_73_pred_1;
                _3110 = frontier_phi_73_pred_2;
                _3108 = frontier_phi_73_pred_3;
                _3106 = frontier_phi_73_pred_4;
                _3104 = frontier_phi_73_pred_5;
                uint _3271 = _3270 + 1u;
                if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3264 = _3104;
                    _3265 = _3106;
                    _3266 = _3108;
                    _3267 = _3110;
                    _3268 = _3112;
                    _3269 = _3114;
                    _3270 = _3271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
        }
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.z;
        uint _3120 = (_3118 >> 8u) & 15u;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((4294967295u << _3120) & _2988) == 0u)
        {
            _3232 = _3103;
            _3234 = _3105;
            _3236 = _3107;
            _3238 = _3109;
            _3240 = _3111;
            _3242 = _3113;
        }
        else
        {
            float _3257 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _3258 = _3257 * _2047;
            float _3259 = _3257 * _2048;
            float _3260 = _3257 * _2049;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3120 < ((_3118 >> 12u) & 15u))
            {
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3392 = _3103;
                float _3393 = _3105;
                float _3394 = _3107;
                float _3395 = _3109;
                float _3396 = _3111;
                float _3397 = _3113;
                uint _3398 = _3120;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3408)
                    {
                        frontier_phi_84_pred = _3396;
                        frontier_phi_84_pred_1 = _3395;
                        frontier_phi_84_pred_2 = _3394;
                        frontier_phi_84_pred_3 = _3393;
                        frontier_phi_84_pred_4 = _3392;
                        frontier_phi_84_pred_5 = _3397;
                    }
                    else
                    {
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3612 = _3392;
                        float _3613 = _3393;
                        float _3614 = _3394;
                        float _3615 = _3395;
                        float _3616 = _3396;
                        float _3617 = _3397;
                        uint _3618 = _3407;
                        uint _3619;
                        vec4 _3644;
                        float _3645;
                        vec4 _3660;
                        vec3 _3672;
                        vec4 _3687;
                        vec4 _3703;
                        float _3750;
                        bool _3751;
                        for (;;)
                        {
                            uint _3629 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3618));
                            _3619 = (_3618 + 4294967295u) & _3618;
                            uint _3631 = _3629 * 40u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3645 = _3644.w;
                            uint _3647 = (_3629 * 40u) + 4u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3629 * 40u) + 8u;
                            _3672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x));
                            uint _3674 = (_3629 * 40u) + 16u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3690 = (_3629 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3706 = (_3629 * 40u) + 24u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3725 = (_3629 * 40u) + 28u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            _3750 = fma(_2049, _3738.z, fma(_2048, _3738.y, _3738.x * _2047)) + _3738.w;
                            _3751 = !((fma(_2049, _3719.z, fma(_2048, _3719.y, _3719.x * _2047)) + _3719.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3751)
                            {
                                float _3778 = _3644.x - _2047;
                                float _3779 = _3644.y - _2048;
                                float _3780 = _3644.z - _2049;
                                float _3781 = dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780));
                                float _3784 = inversesqrt(_3781);
                                float _3785 = _3784 * _3778;
                                float _3786 = _3784 * _3779;
                                float _3787 = _3784 * _3780;
                                float _3791 = 1.0 - (_3781 / (_3645 * _3645));
                                float _5013 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3796 = sqrt(_3781) * _3660.w;
                                float _3798 = 1.39999997615814208984375 / (_3796 + 1.39999997615814208984375);
                                float _3799 = _3798 * _3798;
                                float _3802 = ((1.0 - _3799) * dot(vec3(_3785, _3786, _3787), vec3(_760, _763, _766))) + _3799;
                                float _3805 = _3796 * _3796;
                                float _3809 = (fma(_2049, _3687.z, fma(_2048, _3687.y, _3687.x * _2047)) + _3687.w) / _3750;
                                float _3810 = (fma(_2049, _3703.z, fma(_2048, _3703.y, _3703.x * _2047)) + _3703.w) / _3750;
                                float _3814 = 1.0 - dot(vec2(_3809, _3810), vec2(_3809, _3810));
                                float _5029 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3816 = _3815 * (((isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0))) * _3792) / ((_3805 * 0.699999988079071044921875) + 1.0));
                                float _3828 = exp2(log2(1.0 / ((_3805 * 3.5) + 5.0)) * 0.25);
                                float _3829 = 1.0 - _958;
                                float _3836 = sqrt(1.0 - ((1.0 - (_3829 * _3829)) * (1.0 - (_3828 * _3828))));
                                float _3837 = _3836 * _3836;
                                float _3838 = _3837 * _3837;
                                float _3839 = _3785 - _3258;
                                float _3840 = _3786 - _3259;
                                float _3841 = _3787 - _3260;
                                float _3845 = inversesqrt(dot(vec3(_3839, _3840, _3841), vec3(_3839, _3840, _3841)));
                                float _3849 = dot(vec3(_760, _763, _766), vec3((-0.0) - _3258, (-0.0) - _3259, (-0.0) - _3260));
                                float _5040 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3853 = dot(vec3(_760, _763, _766), vec3(_3845 * _3839, _3845 * _3840, _3845 * _3841));
                                float _5051 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3860 = ((_3856 * _3856) * (_3838 + (-1.0))) + 1.0;
                                float _3861 = _3798 * _3837;
                                float _3862 = _3861 * _3861;
                                float _3868 = ((1.0 - _3862) * dot(vec3(_760, _763, _766), vec3(_3785, _3786, _3787))) + _3862;
                                float _5062 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3869 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3870 = 1.0 - _3837;
                                float _3880 = (0.5 / (((_3869 * ((_3852 * _3870) + _3837)) + 9.9999999392252902907785028219223e-09) + (((_3869 * _3870) + _3837) * _3852))) * _3869;
                                float _5073 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3890 = (_3815 * _3792) * (((_3838 * 3.1415927410125732421875) * (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) / ((_3860 * _3860) * ((_3805 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3816 * _3660.y;
                                frontier_phi_90_pred_1 = _3816 * _3660.x;
                                frontier_phi_90_pred_2 = _3890 * _3672.z;
                                frontier_phi_90_pred_3 = _3890 * _3672.y;
                                frontier_phi_90_pred_4 = _3890 * _3672.x;
                                frontier_phi_90_pred_5 = _3816 * _3660.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_90_pred;
                            _3897 = frontier_phi_90_pred_1;
                            _3896 = frontier_phi_90_pred_2;
                            _3895 = frontier_phi_90_pred_3;
                            _3894 = frontier_phi_90_pred_4;
                            _3899 = frontier_phi_90_pred_5;
                            _3602 = _3897 + _3615;
                            _3603 = _3898 + _3616;
                            _3604 = _3899 + _3617;
                            _3599 = _3894 + _3612;
                            _3600 = _3895 + _3613;
                            _3601 = _3896 + _3614;
                            if (_3619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3619;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3603;
                        frontier_phi_84_pred_1 = _3602;
                        frontier_phi_84_pred_2 = _3601;
                        frontier_phi_84_pred_3 = _3600;
                        frontier_phi_84_pred_4 = _3599;
                        frontier_phi_84_pred_5 = _3604;
                    }
                    _3241 = frontier_phi_84_pred;
                    _3239 = frontier_phi_84_pred_1;
                    _3237 = frontier_phi_84_pred_2;
                    _3235 = frontier_phi_84_pred_3;
                    _3233 = frontier_phi_84_pred_4;
                    _3243 = frontier_phi_84_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3233;
                        _3393 = _3235;
                        _3394 = _3237;
                        _3395 = _3239;
                        _3396 = _3241;
                        _3397 = _3243;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3243;
                frontier_phi_65_66_ladder_1 = _3239;
                frontier_phi_65_66_ladder_2 = _3241;
                frontier_phi_65_66_ladder_3 = _3235;
                frontier_phi_65_66_ladder_4 = _3233;
                frontier_phi_65_66_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_65_66_ladder = _3113;
                frontier_phi_65_66_ladder_1 = _3109;
                frontier_phi_65_66_ladder_2 = _3111;
                frontier_phi_65_66_ladder_3 = _3105;
                frontier_phi_65_66_ladder_4 = _3103;
                frontier_phi_65_66_ladder_5 = _3107;
            }
            _3232 = frontier_phi_65_66_ladder_4;
            _3234 = frontier_phi_65_66_ladder_3;
            _3236 = frontier_phi_65_66_ladder_5;
            _3238 = frontier_phi_65_66_ladder_1;
            _3240 = frontier_phi_65_66_ladder_2;
            _3242 = frontier_phi_65_66_ladder;
        }
        float _3247 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _3000 = (_3247 * _3238) + _2513;
        _3002 = (_3247 * _3240) + _2515;
        _3004 = (_3247 * _3242) + _2517;
        _3006 = ((_3232 * _934) * _3247) + _2851;
        _3008 = ((_3234 * _935) * _3247) + _2853;
        _3010 = ((_3236 * _936) * _3247) + _2855;
    }
    else
    {
        _3000 = _2513;
        _3002 = _2515;
        _3004 = _2517;
        _3006 = _2851;
        _3008 = _2853;
        _3010 = _2855;
    }
    uint _3016 = _841 + uint(cbMatDynParam._m0[0u].w);
    float _3022 = cbInstanceData._m0[_3016].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _603) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _505) * _518.x) * _632)) + (((_661 - (_661 * _569)) + (cbMatDynParam._m0[11u].x * _692)) * cbMatDynParam._m0[9u].x));
    float _3023 = cbInstanceData._m0[_3016].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _603) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _505) * _518.y) * _632)) + (((_663 - (_663 * _569)) + (cbMatDynParam._m0[11u].y * _692)) * cbMatDynParam._m0[9u].y));
    float _3024 = cbInstanceData._m0[_3016].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _603) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _505) * _518.z) * _632)) + (((_665 - (_665 * _569)) + (cbMatDynParam._m0[11u].z * _692)) * cbMatDynParam._m0[9u].z));
    float _5089 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _5100 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _5111 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _5122 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3042 = (((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3000 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _948))) + ((_3006 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + _3022;
    float _3044 = (_3023 + ((_3008 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3002 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _948)));
    float _3046 = (_3024 + ((_3010 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3004 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _948)));
    float _3047 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
    float _3048 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
    float _3049 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
    float _3055 = cbMtdParam._m0[2u].x * _3022;
    float _3056 = cbMtdParam._m0[2u].y * _3023;
    float _3057 = cbMtdParam._m0[2u].z * _3024;
    float _3064 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _632) + cbMatDynParam._m0[12u].y;
    float _3069 = cbInstanceData._m0[_839 + 6u].w * (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0)));
    float _3074 = _736 / cbSceneParam._m0[86u].x;
    float _3075 = _737 / cbSceneParam._m0[86u].y;
    vec4 _3089 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3091 = _3089.x;
    float _3092 = _3089.y;
    float _3093 = _3089.z;
    float _3094 = _3089.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3128 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3129 = _3128 / _718;
        float _3140 = _3129 * _297;
        float _3141 = _298 * _3129;
        float _3142 = (-0.0) - _3141;
        float _3143 = _3129 * _299;
        float _3145 = (cbSceneParam._m0[77u].w * _3142) / _3128;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3141;
        float _3153 = sqrt(((_3140 * _3140) + (_3141 * _3141)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3128)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3142 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3293 = 1.0 / cbSceneParam._m0[80u].x;
            float _3294 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3295 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            _3349 = ((abs(_3153 / _3142) * cbSceneParam._m0[80u].y) * ((((_3304 - _3305) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))))) * _3293)) - ((exp2(_3163 * _3304) - exp2(_3163 * _3305)) * _3293))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3094);
        _3165 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3091;
        _3167 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3092;
        _3169 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3093;
        _3171 = _3360 * _3094;
    }
    else
    {
        _3165 = _3091;
        _3167 = _3092;
        _3169 = _3093;
        _3171 = _3094;
    }
    bool _3387;
    vec4 _3181;
    vec4 _3203;
    float _3205;
    float _3209;
    float _3210;
    float _3211;
    float _3214;
    float _3217;
    float _3220;
    float _3221;
    bool _3231;
    for (;;)
    {
        _3181 = cbMatDynParam._m0[0u];
        float _3183 = roundEven(_3181.y);
        bool _3184 = _3183 == 3.0;
        float _3185 = log2(_3171);
        float _3189 = exp2(_3185 * cbSceneParam._m0[78u].x);
        float _3190 = exp2(_3185 * cbSceneParam._m0[78u].y);
        float _3191 = exp2(_3185 * cbSceneParam._m0[78u].z);
        float _3192 = _3189 * _3047;
        float _3193 = _3190 * _3048;
        float _3194 = _3191 * _3049;
        float _3201 = _725 + (-0.5);
        _3203 = cbMtdParam._m0[1u];
        _3205 = _3203.y * _3201;
        float _3208 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3209 = _3208 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
        _3210 = _3208 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
        _3211 = _3208 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
        _3214 = ((_3055 * _3064) * _3189) * _3208;
        _3217 = ((_3056 * _3064) * _3190) * _3208;
        _3220 = ((_3057 * _3064) * _3191) * _3208;
        _3221 = _3201 * 0.999000012874603271484375;
        _3231 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3231)
        {
            if ((cbInstanceData._m0[_839 + 7u].x + _3221) < 0.5)
            {
                _3387 = true;
                break;
            }
        }
        uint _3328 = _841 + uint(_3181.w);
        if ((cbInstanceData._m0[_3328].w < 1.0) && ((cbInstanceData._m0[_3328].w + _3221) < 0.5))
        {
            _3387 = true;
            break;
        }
        if ((_3205 + _410) < _3203.x)
        {
            _3387 = true;
            break;
        }
        _3387 = false;
        break;
    }
    float _3590;
    if (_3387)
    {
        discard_state = true;
        _3590 = 0.0;
    }
    else
    {
        _3590 = _3069;
    }
    SV_Target.x = _3209;
    SV_Target.y = _3210;
    SV_Target.z = _3211;
    SV_Target.w = _3590;
    SV_Target_1.x = _3214;
    SV_Target_1.y = _3217;
    SV_Target_1.z = _3220;
    SV_Target_1.w = _3069;
    discard_exit();
}


