#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _268 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = exp2(log2(1.0 - _250.w) * 8.0);
    vec4 _297 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _322 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _331 = ((_268.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _322.x;
    float _334 = ((_268.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _322.y;
    float _337 = ((_268.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _322.z;
    float _344 = (((cbMtdParam._m0[13u].x * _297.x) - _331) * _285) + _331;
    float _345 = (((cbMtdParam._m0[13u].y * _297.y) - _334) * _285) + _334;
    float _346 = (((cbMtdParam._m0[13u].z * _297.z) - _337) * _285) + _337;
    float _347 = _322.w * _268.w;
    float _371 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _374 = ((cbMtdParam._m0[15u].z - _371) * _285) + _371;
    vec4 _387 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _389 = _387.x;
    float _390 = _387.y;
    vec4 _409 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _417 = (_250.z * 2.0) * (cbMtdParam._m0[14u].x + _387.z);
    float _421 = (((_409.z - _417) + cbMtdParam._m0[15u].y) * _285) + _417;
    float _436 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3577 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _442 = (_437 * _437) * (3.0 - (_437 * 2.0));
    vec4 _455 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _463 = (_250.x * 2.0) + (-1.0);
    float _464 = (_250.y * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3588 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _483 = (cbMtdParam._m0[14u].z * (((((_409.x - _389) * _285) + _389) * 2.0) + (-1.0))) + _463;
    float _484 = (cbMtdParam._m0[14u].z * (((((_409.y - _390) * _285) + _390) * 2.0) + (-1.0))) + _464;
    float _487 = fma(_470, _235, fma(_484, _227 * TANGENT.x, (_213 * _205) * _483));
    float _490 = fma(_470, _236, fma(_484, _227 * TANGENT.y, (_213 * _206) * _483));
    float _493 = fma(_470, _237, fma(_484, _227 * TANGENT.z, (_213 * _207) * _483));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3599 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _501 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _502 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _503 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _504 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _505 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _506 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _592 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _594 = _592.w;
    float _613 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _616 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _619 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    vec4 _621 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _623 = _621.x;
    float _635 = (((_621.y - _502) + (_621.w * _502)) * cbMtdParam._m0[3u].x) + _502;
    vec4 _636 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _652 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_623 * _623)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _636.z;
    float _660 = (((cbMatDynParam._m0[15u].x - _506) * cbMatDynParam._m0[15u].w) * _652) + _506;
    float _668 = ((_652 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _635)) + _635;
    uint _692 = uint(roundEven(NORMAL.w)) * 13u;
    uint _693 = _692 + 9u;
    uint _694 = _693 + uint(cbMatDynParam._m0[0u].w);
    float _700 = (cbMtdParam._m0[0u].x * _503) * cbInstanceData._m0[_694].x;
    float _701 = (cbMtdParam._m0[0u].y * _504) * cbInstanceData._m0[_694].y;
    float _702 = (cbMtdParam._m0[0u].z * _505) * cbInstanceData._m0[_694].z;
    float _3665 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    vec4 _706 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _711 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _722 = (((_711.x - _660) + (_711.w * _660)) * cbMtdParam._m0[3u].x) + _660;
    float _735 = (cbMtdParam._m0[3u].x * (((_703 * _594) - _703) + _706.x)) + _703;
    float _736 = (cbMtdParam._m0[3u].x * (((_704 * _594) - _704) + _706.y)) + _704;
    float _737 = (cbMtdParam._m0[3u].x * (((_705 * _594) - _705) + _706.z)) + _705;
    float _751 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_660 * (_503 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_660 * (_504 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_660 * (_505 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _755 = _751 * cbMatDynParam._m0[13u].w;
    float _765 = (_755 * (cbMatDynParam._m0[13u].x - _735)) + _735;
    float _766 = (_755 * (cbMatDynParam._m0[13u].y - _736)) + _736;
    float _767 = (_755 * (cbMatDynParam._m0[13u].z - _737)) + _737;
    float _775 = ((_751 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _722)) + _722;
    float _776 = 1.0 - _775;
    float _777 = _776 * _765;
    float _778 = _776 * _766;
    float _779 = _776 * _767;
    float _783 = (_765 + (-0.039999999105930328369140625)) * _775;
    float _784 = (_766 + (-0.039999999105930328369140625)) * _775;
    float _785 = (_767 + (-0.039999999105930328369140625)) * _775;
    float _786 = _783 + 0.039999999105930328369140625;
    float _787 = _784 + 0.039999999105930328369140625;
    float _788 = _785 + 0.039999999105930328369140625;
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _800 = _797.x * TEXCOORD_4;
    float _801 = dot(vec3(_498, _499, _500), vec3(_581, _582, _583));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _498) - _581;
    float _809 = (_804 * _499) - _582;
    float _810 = (_804 * _500) - _583;
    float _814 = abs(dot(vec3(_581, _582, _583), vec3(_498, _499, _500)));
    float _3698 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_668);
    float _828 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _834 = (1.0 - _828) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _835 = _828 * _816;
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _902 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _906 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _931 = _863 + _498;
        float _932 = _867 + _499;
        float _933 = _871 + _500;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_498, _499, _500), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3746 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_498, _499, _500), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3779 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_498, _499, _500), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3812 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1218 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1222 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1245 = _863 + _498;
        float _1246 = _867 + _499;
        float _1247 = _871 + _500;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_498, _499, _500), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3875 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_498, _499, _500), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3908 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_498, _499, _500), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3941 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = _1174;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _808 * 0.5;
    float _1552 = _809 * 0.5;
    float _1553 = _810 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1678 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1681 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1709 = frontier_phi_16_14_ladder;
        }
        float _1934;
        if (_1678 > 0.0)
        {
            _1934 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2191;
        if (_1681 > 0.0)
        {
            _2191 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2191 = frontier_phi_37_32_ladder;
        }
        float _2193 = isnan(_1934) ? _1709 : (isnan(_1709) ? _1934 : min(_1709, _1934));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1675) + _1664;
        float _2199 = (_2194 * _1678) + _1668;
        float _2200 = (_2194 * _1681) + _1672;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_15_37_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_15_37_ladder_2;
        _1699 = frontier_phi_15_37_ladder_1;
        _1701 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1617);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1775 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1778 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1939;
        if (_1772 > 0.0)
        {
            _1939 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1939 = frontier_phi_27_23_ladder;
        }
        float _2218;
        if (_1775 > 0.0)
        {
            _2218 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2218 = frontier_phi_39_34_ladder;
        }
        float _2431;
        if (_1778 > 0.0)
        {
            _2431 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2431 = frontier_phi_48_45_ladder;
        }
        float _2433 = isnan(_2218) ? _1939 : (isnan(_1939) ? _2218 : min(_1939, _2218));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1772) + _1761;
        float _2439 = (_2434 * _1775) + _1765;
        float _2440 = (_2434 * _1778) + _1769;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_24_48_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_24_48_ladder_2;
        _1799 = frontier_phi_24_48_ladder_1;
        _1801 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_834 * _786) + _835) * _800) * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1816 = (((_834 * _787) + _835) * _800) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1818 = (((_834 * _788) + _835) * _800) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    vec4 _1835 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_589, _590));
    float _1837 = _1835.w;
    float _1849 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1837);
    float _1850 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1837);
    float _1851 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1837);
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_692 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _800 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1893 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1897 = _1857 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_498, _499, _500));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_498, _499, _500));
    float _4077 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4088 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1874].x * _1880) * _1918) + (((cbLight._m0[_1884].x * _1849) * _1893) * _1916);
    float _1926 = ((_1880 * cbLight._m0[_1874].y) * _1918) + (((cbLight._m0[_1884].y * _1850) * _1893) * _1916);
    float _1927 = ((_1880 * cbLight._m0[_1874].z) * _1918) + (((cbLight._m0[_1884].z * _1851) * _1893) * _1916);
    uvec4 _1931 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1933 = _1931.x == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1933)
    {
        _1944 = _1925;
        _1946 = _1926;
        _1948 = _1927;
    }
    else
    {
        uint _1952 = _1857 + 6u;
        float _1968 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _4099 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1971 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1944 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1925;
        _1946 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1926;
        _1948 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1927;
    }
    bool _1951 = _1931.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1951)
    {
        _1989 = _1944;
        _1991 = _1946;
        _1993 = _1948;
    }
    else
    {
        uint _2162 = _1857 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4115 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2181 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1989 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1944;
        _1991 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1946;
        _1993 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1948;
    }
    uint _1996 = _1857 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _668) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1857].x + _581;
    float _2012 = cbLight._m0[_1857].y + _582;
    float _2013 = cbLight._m0[_1857].z + _583;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1857].xyz));
    float _4131 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2025 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2026 = dot(vec3(_498, _499, _500), vec3(_2018, _2019, _2020));
    float _4153 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2018, _2019, _2020));
    float _4164 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0);
    float _2047 = 0.959999978542327880859375 - _783;
    float _2049 = 0.959999978542327880859375 - _784;
    float _2050 = 0.959999978542327880859375 - _785;
    float _2057 = 1.0 - _2010;
    float _2068 = (0.5 / (((_2025 * ((_2024 * _2057) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2057) + _2010) * _2024))) * _2024;
    float _4175 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2084 = _1857 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _668) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1897].x + _581;
    float _2098 = cbLight._m0[_1897].y + _582;
    float _2099 = cbLight._m0[_1897].z + _583;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1897].xyz));
    float _4186 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2111 = dot(vec3(_498, _499, _500), vec3(_2104, _2105, _2106));
    float _4197 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2104, _2105, _2106));
    float _4208 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0);
    float _2137 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2025 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2137) + _2096) * _2110))) * _2110;
    float _4219 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2159 = (((((_2130 * _2047) + _786) * cbLight._m0[_2084].x) * _2149) * _1880) + ((((cbLight._m0[_1996].x * _1849) * ((_2046 * _2047) + _786)) * _2070) * _1893);
    float _2160 = (((((_2130 * _2049) + _787) * cbLight._m0[_2084].y) * _2149) * _1880) + ((((cbLight._m0[_1996].y * _1850) * ((_2046 * _2049) + _787)) * _2070) * _1893);
    float _2161 = (((((_2130 * _2050) + _788) * cbLight._m0[_2084].z) * _2149) * _1880) + ((((cbLight._m0[_1996].z * _1851) * ((_2046 * _2050) + _788)) * _2070) * _1893);
    float _2223;
    float _2225;
    float _2227;
    if (_1933)
    {
        _2223 = _2159;
        _2225 = _2160;
        _2227 = _2161;
    }
    else
    {
        uint _2229 = _1857 + 2u;
        uint _2233 = _1857 + 10u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _668) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _581;
        float _2250 = cbLight._m0[_2229].y + _582;
        float _2251 = cbLight._m0[_2229].z + _583;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2229].xyz));
        float _4230 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2263 = dot(vec3(_498, _499, _500), vec3(_2256, _2257, _2258));
        float _4241 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4252 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_2025 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2289) + _2248) * _2262))) * _2262;
        float _4263 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2223 = (((((_2282 * _2047) + _786) * cbLight._m0[_2233].x) * _2301) * _2302) + _2159;
        _2225 = (((((_2282 * _2049) + _787) * cbLight._m0[_2233].y) * _2301) * _2302) + _2160;
        _2227 = (((((_2282 * _2050) + _788) * cbLight._m0[_2233].z) * _2301) * _2302) + _2161;
    }
    float _2337;
    float _2339;
    float _2341;
    if (_1951)
    {
        _2337 = _2223;
        _2339 = _2225;
        _2341 = _2227;
    }
    else
    {
        uint _2348 = _1857 + 3u;
        uint _2352 = _1857 + 11u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _668) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _581;
        float _2369 = cbLight._m0[_2348].y + _582;
        float _2370 = cbLight._m0[_2348].z + _583;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2348].xyz));
        float _4279 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2382 = dot(vec3(_498, _499, _500), vec3(_2375, _2376, _2377));
        float _4290 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4301 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2025 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2408) + _2367) * _2381))) * _2381;
        float _4312 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2337 = (((((_2401 * _2047) + _786) * cbLight._m0[_2352].x) * _2420) * _2421) + _2223;
        _2339 = (((((_2401 * _2049) + _787) * cbLight._m0[_2352].y) * _2420) * _2421) + _2225;
        _2341 = (((((_2401 * _2050) + _788) * cbLight._m0[_2352].z) * _2420) * _2421) + _2227;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1855.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            uint _2845 = 0u;
            uint _2854;
            bool _2855;
            for (;;)
            {
                _2854 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                _2855 = _2854 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2855)
                {
                    frontier_phi_63_pred = _2844;
                    frontier_phi_63_pred_1 = _2843;
                    frontier_phi_63_pred_2 = _2842;
                    frontier_phi_63_pred_3 = _2841;
                    frontier_phi_63_pred_4 = _2840;
                    frontier_phi_63_pred_5 = _2839;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2854;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2845 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _2497;
                        float _3030 = _2989.y - _2498;
                        float _3031 = _2989.z - _2499;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_613, _616, _619), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4338 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _2497;
                        float _3065 = (-0.0) - _2498;
                        float _3066 = (-0.0) - _2499;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3081 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3082 = 1.0 - _816;
                        float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                        float _3090 = _3089 * _3089;
                        float _3091 = _3090 * _3090;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3094 = _3073 + _3038;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3102 = dot(vec3(_613, _616, _619), vec3(_3071, _3072, _3073));
                        float _4354 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3106 = dot(vec3(_613, _616, _619), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                        float _4365 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                        float _3114 = _3049 * _3090;
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3039) + _3115;
                        float _4376 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3120 = 1.0 - _3090;
                        float _3130 = (0.5 / (((_3119 * ((_3105 * _3120) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3090) * _3105))) * _3119;
                        float _4387 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3141 = (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3113 * _3113) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2898 = (_3060 * _3008.x) + _2966;
                        _2899 = (_3060 * _3008.y) + _2967;
                        _2900 = (_3060 * _3008.z) + _2968;
                        _2895 = (_3141 * _3025.x) + _2963;
                        _2896 = (_3141 * _3025.y) + _2964;
                        _2897 = (_3141 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_63_pred = _2900;
                    frontier_phi_63_pred_1 = _2899;
                    frontier_phi_63_pred_2 = _2898;
                    frontier_phi_63_pred_3 = _2897;
                    frontier_phi_63_pred_4 = _2896;
                    frontier_phi_63_pred_5 = _2895;
                }
                _2697 = frontier_phi_63_pred;
                _2695 = frontier_phi_63_pred_1;
                _2693 = frontier_phi_63_pred_2;
                _2691 = frontier_phi_63_pred_3;
                _2689 = frontier_phi_63_pred_4;
                _2687 = frontier_phi_63_pred_5;
                uint _2846 = _2845 + 1u;
                if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2839 = _2687;
                    _2840 = _2689;
                    _2841 = _2691;
                    _2842 = _2693;
                    _2843 = _2695;
                    _2844 = _2697;
                    _2845 = _2846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((4294967295u << _2703) & _2543) == 0u)
        {
            _2807 = _2686;
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
        }
        else
        {
            float _2832 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2833 = _2832 * _2497;
            float _2834 = _2832 * _2498;
            float _2835 = _2832 * _2499;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2946 = _2686;
                float _2947 = _2688;
                float _2948 = _2690;
                float _2949 = _2692;
                float _2950 = _2694;
                float _2951 = _2696;
                uint _2952 = _2703;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2962)
                    {
                        frontier_phi_69_pred = _2951;
                        frontier_phi_69_pred_1 = _2950;
                        frontier_phi_69_pred_2 = _2949;
                        frontier_phi_69_pred_3 = _2948;
                        frontier_phi_69_pred_4 = _2947;
                        frontier_phi_69_pred_5 = _2946;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        float _3164 = _2951;
                        uint _3165 = _2961;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3234;
                        vec4 _3250;
                        float _3297;
                        bool _3298;
                        for (;;)
                        {
                            uint _3176 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3221 = (_3176 * 40u) + 16u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3237 = (_3176 * 40u) + 20u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3176 * 40u) + 24u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3272 = (_3176 * 40u) + 28u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3297 = fma(_2499, _3285.z, fma(_2498, _3285.y, _3285.x * _2497)) + _3285.w;
                            _3298 = !((fma(_2499, _3266.z, fma(_2498, _3266.y, _3266.x * _2497)) + _3266.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3298)
                            {
                                float _3325 = _3191.x - _2497;
                                float _3326 = _3191.y - _2498;
                                float _3327 = _3191.z - _2499;
                                float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                                float _3331 = inversesqrt(_3328);
                                float _3332 = _3331 * _3325;
                                float _3333 = _3331 * _3326;
                                float _3334 = _3331 * _3327;
                                float _3338 = 1.0 - (_3328 / (_3192 * _3192));
                                float _4398 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3343 = sqrt(_3328) * _3207.w;
                                float _3345 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                                float _3346 = _3345 * _3345;
                                float _3349 = ((1.0 - _3346) * dot(vec3(_3332, _3333, _3334), vec3(_613, _616, _619))) + _3346;
                                float _3352 = _3343 * _3343;
                                float _3356 = (fma(_2499, _3234.z, fma(_2498, _3234.y, _3234.x * _2497)) + _3234.w) / _3297;
                                float _3357 = (fma(_2499, _3250.z, fma(_2498, _3250.y, _3250.x * _2497)) + _3250.w) / _3297;
                                float _3361 = 1.0 - dot(vec2(_3356, _3357), vec2(_3356, _3357));
                                float _4414 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3363 = _3362 * (((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3339) / ((_3352 * 0.699999988079071044921875) + 1.0));
                                float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                                float _3376 = 1.0 - _816;
                                float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                                float _3384 = _3383 * _3383;
                                float _3385 = _3384 * _3384;
                                float _3386 = _3332 - _2833;
                                float _3387 = _3333 - _2834;
                                float _3388 = _3334 - _2835;
                                float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                                float _3396 = dot(vec3(_613, _616, _619), vec3((-0.0) - _2833, (-0.0) - _2834, (-0.0) - _2835));
                                float _4425 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3400 = dot(vec3(_613, _616, _619), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                                float _4436 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                                float _3408 = _3345 * _3384;
                                float _3409 = _3408 * _3408;
                                float _3415 = ((1.0 - _3409) * dot(vec3(_613, _616, _619), vec3(_3332, _3333, _3334))) + _3409;
                                float _4447 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3417 = 1.0 - _3384;
                                float _3427 = (0.5 / (((_3416 * ((_3399 * _3417) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3384) * _3399))) * _3416;
                                float _4458 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3437 = (_3362 * _3339) * (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3363 * _3207.z;
                                frontier_phi_75_pred_1 = _3363 * _3207.y;
                                frontier_phi_75_pred_2 = _3363 * _3207.x;
                                frontier_phi_75_pred_3 = _3437 * _3219.z;
                                frontier_phi_75_pred_4 = _3437 * _3219.y;
                                frontier_phi_75_pred_5 = _3437 * _3219.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_75_pred;
                            _3445 = frontier_phi_75_pred_1;
                            _3444 = frontier_phi_75_pred_2;
                            _3443 = frontier_phi_75_pred_3;
                            _3442 = frontier_phi_75_pred_4;
                            _3441 = frontier_phi_75_pred_5;
                            _3149 = _3444 + _3162;
                            _3150 = _3445 + _3163;
                            _3151 = _3446 + _3164;
                            _3146 = _3441 + _3159;
                            _3147 = _3442 + _3160;
                            _3148 = _3443 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3151;
                        frontier_phi_69_pred_1 = _3150;
                        frontier_phi_69_pred_2 = _3149;
                        frontier_phi_69_pred_3 = _3148;
                        frontier_phi_69_pred_4 = _3147;
                        frontier_phi_69_pred_5 = _3146;
                    }
                    _2818 = frontier_phi_69_pred;
                    _2816 = frontier_phi_69_pred_1;
                    _2814 = frontier_phi_69_pred_2;
                    _2812 = frontier_phi_69_pred_3;
                    _2810 = frontier_phi_69_pred_4;
                    _2808 = frontier_phi_69_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2808;
                        _2947 = _2810;
                        _2948 = _2812;
                        _2949 = _2814;
                        _2950 = _2816;
                        _2951 = _2818;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2818;
                frontier_phi_57_58_ladder_1 = _2816;
                frontier_phi_57_58_ladder_2 = _2814;
                frontier_phi_57_58_ladder_3 = _2812;
                frontier_phi_57_58_ladder_4 = _2810;
                frontier_phi_57_58_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_57_58_ladder = _2696;
                frontier_phi_57_58_ladder_1 = _2694;
                frontier_phi_57_58_ladder_2 = _2692;
                frontier_phi_57_58_ladder_3 = _2690;
                frontier_phi_57_58_ladder_4 = _2688;
                frontier_phi_57_58_ladder_5 = _2686;
            }
            _2807 = frontier_phi_57_58_ladder_5;
            _2809 = frontier_phi_57_58_ladder_4;
            _2811 = frontier_phi_57_58_ladder_3;
            _2813 = frontier_phi_57_58_ladder_2;
            _2815 = frontier_phi_57_58_ladder_1;
            _2817 = frontier_phi_57_58_ladder;
        }
        float _2822 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2555 = (_2822 * _2813) + _1989;
        _2557 = (_2822 * _2815) + _1991;
        _2559 = (_2822 * _2817) + _1993;
        _2561 = ((_2807 * _786) * _2822) + _2337;
        _2563 = ((_2809 * _787) * _2822) + _2339;
        _2565 = ((_2811 * _788) * _2822) + _2341;
    }
    else
    {
        _2555 = _1989;
        _2557 = _1991;
        _2559 = _1993;
        _2561 = _2337;
        _2563 = _2339;
        _2565 = _2341;
    }
    uint _2571 = _693 + uint(cbMatDynParam._m0[0u].w);
    float _2581 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _442) * _455.x) * cbInstanceData._m0[_2571].x;
    float _2586 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _442) * _455.y) * cbInstanceData._m0[_2571].y;
    float _2591 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _442) * _455.z) * cbInstanceData._m0[_2571].z;
    float _4474 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4485 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4496 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4507 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2609 = (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2555 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _800))) + ((_2561 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + _2581;
    float _2611 = (_2586 + ((_2563 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2557 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _800)));
    float _2613 = (_2591 + ((_2565 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1606)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2559 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _800)));
    float _4533 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2626 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2631 = cbInstanceData._m0[_692 + 6u].w * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)));
    float _2636 = _589 / cbSceneParam._m0[86u].x;
    float _2637 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2712 = _2711 / _522;
        float _2723 = _2712 * _574;
        float _2724 = _575 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2726 = _2712 * _576;
        float _2728 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2724;
        float _2736 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2908;
        if (abs((_2725 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2908 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2868 = 1.0 / cbSceneParam._m0[80u].x;
            float _2869 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2870 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            _2908 = ((abs(_2736 / _2725) * cbSceneParam._m0[80u].y) * ((((_2879 - _2880) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))))) * _2868)) - ((exp2(_2746 * _2879) - exp2(_2746 * _2880)) * _2868))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2910 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2919 = exp2((_2908 * (-1.44269502162933349609375)) * (1.0 - _2910.w));
        float _2920 = log2(_2919);
        float _2936 = log2(_2656);
        _2748 = (exp2(_2936 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].x)) * _2910.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2750 = (exp2(_2936 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].y)) * _2910.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2752 = (exp2(_2936 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].z)) * _2910.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2754 = _2919 * _2656;
    }
    else
    {
        _2748 = _2653;
        _2750 = _2654;
        _2752 = _2655;
        _2754 = _2656;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2754);
    float _2772 = exp2(_2768 * cbSceneParam._m0[78u].x);
    float _2773 = exp2(_2768 * cbSceneParam._m0[78u].y);
    float _2774 = exp2(_2768 * cbSceneParam._m0[78u].z);
    float _2775 = _2772 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)));
    float _2776 = _2773 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)));
    float _2777 = _2774 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.w = _2631;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2581) * _2626) * _2772) * _2786;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2586) * _2626) * _2773) * _2786;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2591) * _2626) * _2774) * _2786;
    SV_Target_1.w = _2631;
}


