#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3937;
float _3938;
float _3939;
float _3940;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _274 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = exp2(log2(1.0 - _256.w) * 8.0);
    vec4 _303 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _328 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _337 = ((_274.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _328.x;
    float _340 = ((_274.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _328.y;
    float _343 = ((_274.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _328.z;
    float _350 = (((cbMtdParam._m0[13u].x * _303.x) - _337) * _291) + _337;
    float _351 = (((cbMtdParam._m0[13u].y * _303.y) - _340) * _291) + _340;
    float _352 = (((cbMtdParam._m0[13u].z * _303.z) - _343) * _291) + _343;
    float _353 = _328.w * _274.w;
    vec4 _370 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = cbMtdParam._m0[16u].x + _370.x;
    float _380 = ((cbMtdParam._m0[15u].z - _377) * _291) + _377;
    vec4 _393 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _395 = _393.x;
    float _396 = _393.y;
    vec4 _415 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _423 = (_256.z * 2.0) * (cbMtdParam._m0[14u].x + _393.z);
    float _427 = (((_415.z - _423) + cbMtdParam._m0[15u].y) * _291) + _423;
    float _442 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3949 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _448 = (_443 * _443) * (3.0 - (_443 * 2.0));
    vec4 _461 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _469 = (_256.x * 2.0) + (-1.0);
    float _470 = (_256.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3960 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    float _489 = (cbMtdParam._m0[14u].z * (((((_415.x - _395) * _291) + _395) * 2.0) + (-1.0))) + _469;
    float _490 = (cbMtdParam._m0[14u].z * (((((_415.y - _396) * _291) + _396) * 2.0) + (-1.0))) + _470;
    float _493 = fma(_476, _241, fma(_490, _233 * TANGENT.x, (_219 * _211) * _489));
    float _496 = fma(_476, _242, fma(_490, _233 * TANGENT.y, (_219 * _212) * _489));
    float _499 = fma(_476, _243, fma(_490, _233 * TANGENT.z, (_219 * _213) * _489));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3971 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _507 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _508 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _509 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _510 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _511 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _512 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    vec4 _594 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _596 = _594.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _900 = sqrt(((_580 * _580) + (_581 * _581)) + (_582 * _582));
        float _906 = (cbMatDynParam._m0[5u].x * _900) + cbMatDynParam._m0[5u].y;
        float _4037 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _911 = (cbMatDynParam._m0[5u].z * _900) + cbMatDynParam._m0[5u].w;
        float _4048 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) - _907)) + _907) < ((_596 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _611 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = _611.w;
    float _631 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _634 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _637 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    vec4 _639 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _641 = _639.x;
    float _653 = (((_639.y - _508) + (_639.w * _508)) * cbMtdParam._m0[3u].x) + _508;
    vec4 _654 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _670 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_641 * _641)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _654.z;
    float _678 = (((cbMatDynParam._m0[15u].x - _512) * cbMatDynParam._m0[15u].w) * _670) + _512;
    float _686 = ((_670 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _653)) + _653;
    uint _710 = uint(roundEven(NORMAL.w)) * 13u;
    uint _711 = _710 + 9u;
    uint _712 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * _509) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * _510) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * _511) * cbInstanceData._m0[_712].z;
    float _4059 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    vec4 _724 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _729 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _740 = (((_729.x - _678) + (_729.w * _678)) * cbMtdParam._m0[3u].x) + _678;
    float _753 = (cbMtdParam._m0[3u].x * (((_721 * _613) - _721) + _724.x)) + _721;
    float _754 = (cbMtdParam._m0[3u].x * (((_722 * _613) - _722) + _724.y)) + _722;
    float _755 = (cbMtdParam._m0[3u].x * (((_723 * _613) - _723) + _724.z)) + _723;
    float _769 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_678 * (_509 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_678 * (_510 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_678 * (_511 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _773 = _769 * cbMatDynParam._m0[13u].w;
    float _783 = (_773 * (cbMatDynParam._m0[13u].x - _753)) + _753;
    float _784 = (_773 * (cbMatDynParam._m0[13u].y - _754)) + _754;
    float _785 = (_773 * (cbMatDynParam._m0[13u].z - _755)) + _755;
    float _793 = ((_769 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _740)) + _740;
    float _794 = 1.0 - _793;
    float _795 = _794 * _783;
    float _796 = _794 * _784;
    float _797 = _794 * _785;
    float _801 = (_783 + (-0.039999999105930328369140625)) * _793;
    float _802 = (_784 + (-0.039999999105930328369140625)) * _793;
    float _803 = (_785 + (-0.039999999105930328369140625)) * _793;
    float _804 = _801 + 0.039999999105930328369140625;
    float _805 = _802 + 0.039999999105930328369140625;
    float _806 = _803 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _818 = _815.x * TEXCOORD_4;
    float _819 = dot(vec3(_504, _505, _506), vec3(_587, _588, _589));
    float _822 = _819 * 2.0;
    float _826 = (_822 * _504) - _587;
    float _827 = (_822 * _505) - _588;
    float _828 = (_822 * _506) - _589;
    float _832 = abs(dot(vec3(_587, _588, _589), vec3(_504, _505, _506)));
    float _4092 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _834 = sqrt(_686);
    float _846 = exp2((_834 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_834 * 3.0));
    float _852 = (1.0 - _846) * ((_834 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _853 = _846 * _834;
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _949 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _953 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _978 = _881 + _504;
        float _979 = _885 + _505;
        float _980 = _889 + _506;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_504, _505, _506), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4140 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_504, _505, _506), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4173 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_504, _505, _506), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4206 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1268 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1272 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1295 = _881 + _504;
        float _1296 = _885 + _505;
        float _1297 = _889 + _506;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_504, _505, _506), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4269 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_504, _505, _506), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4302 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_504, _505, _506), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4335 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = _1221;
        _1542 = _1221;
        _1543 = _1221;
        _1544 = _1221;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _826 * 0.5;
    float _1602 = _827 * 0.5;
    float _1603 = _828 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1641;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1652;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1643 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1656 = (_1652 * cbModelParam._m0[1u].x) + (_1641 * (1.0 - cbModelParam._m0[1u].x));
    float _1666 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _686);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1666 : min(cbModelParam._m0[25u].z, _1666));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1714 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1718 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1722 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1725 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1728 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1731 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1759;
        if (_1725 > 0.0)
        {
            _1759 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1759 = frontier_phi_19_17_ladder;
        }
        float _1932;
        if (_1728 > 0.0)
        {
            _1932 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1932 = frontier_phi_28_24_ladder;
        }
        float _2227;
        if (_1731 > 0.0)
        {
            _2227 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2227 = frontier_phi_40_35_ladder;
        }
        float _2229 = isnan(_1932) ? _1759 : (isnan(_1759) ? _1932 : min(_1759, _1932));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1725) + _1714;
        float _2235 = (_2230 * _1728) + _1718;
        float _2236 = (_2230 * _1731) + _1722;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1667);
            frontier_phi_18_40_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1747 = frontier_phi_18_40_ladder_2;
        _1749 = frontier_phi_18_40_ladder_1;
        _1751 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1667);
        _1747 = _1735.x * cbModelParam._m0[1u].y;
        _1749 = _1735.y * cbModelParam._m0[1u].y;
        _1751 = _1735.z * cbModelParam._m0[1u].y;
    }
    float _1755 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _686);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1755 : min(cbModelParam._m0[25u].w, _1755));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1825 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1828 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1937;
        if (_1822 > 0.0)
        {
            _1937 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1937 = frontier_phi_30_26_ladder;
        }
        float _2254;
        if (_1825 > 0.0)
        {
            _2254 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2254 = frontier_phi_42_37_ladder;
        }
        float _2592;
        if (_1828 > 0.0)
        {
            _2592 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2592 = frontier_phi_52_49_ladder;
        }
        float _2594 = isnan(_2254) ? _1937 : (isnan(_1937) ? _2254 : min(_1937, _2254));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1822) + _1811;
        float _2600 = (_2595 * _1825) + _1815;
        float _2601 = (_2595 * _1828) + _1819;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1756);
            frontier_phi_27_52_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_27_52_ladder_2;
        _1849 = frontier_phi_27_52_ladder_1;
        _1851 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1756);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1864 = (((_852 * _804) + _853) * _818) * ((cbModelParam._m0[1u].w * (_1847 - _1747)) + _1747);
    float _1866 = (((_852 * _805) + _853) * _818) * ((cbModelParam._m0[1u].w * (_1849 - _1749)) + _1749);
    float _1868 = (((_852 * _806) + _853) * _818) * ((cbModelParam._m0[1u].w * (_1851 - _1751)) + _1751);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1924 = _1911 / _1923;
    float _1925 = _1915 / _1923;
    float _1926 = _1919 / _1923;
    float _2073;
    float _2074;
    float _2075;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1953 = ((uint(_1926 > cbSceneParam._m0[59u].y) + uint(_1926 > cbSceneParam._m0[59u].x)) + uint(_1926 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1954 = _1953 + 43u;
        uint _1962 = _1953 + 44u;
        uint _1970 = _1953 + 45u;
        uint _1978 = _1953 + 46u;
        float _1989 = fma(_1923, cbSceneParam._m0[_1954].w, fma(_1919, cbSceneParam._m0[_1954].z, fma(_1915, cbSceneParam._m0[_1954].y, _1911 * cbSceneParam._m0[_1954].x)));
        float _1993 = fma(_1923, cbSceneParam._m0[_1962].w, fma(_1919, cbSceneParam._m0[_1962].z, fma(_1915, cbSceneParam._m0[_1962].y, _1911 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1923, cbSceneParam._m0[_1978].w, fma(_1919, cbSceneParam._m0[_1978].z, fma(_1915, cbSceneParam._m0[_1978].y, _1911 * cbSceneParam._m0[_1978].x)));
        float _2006 = cbSceneParam._m0[33u].z * _2001;
        float _2008 = cbSceneParam._m0[33u].w * _2001;
        float _2011 = fma(_1923, cbSceneParam._m0[_1970].w, fma(_1919, cbSceneParam._m0[_1970].z, fma(_1915, cbSceneParam._m0[_1970].y, _1911 * cbSceneParam._m0[_1970].x))) / _2001;
        float _2059 = (cbSceneParam._m0[33u].x - sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926))) * cbSceneParam._m0[33u].y;
        float _4461 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2066 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 + _1989) / _2001, (_2008 + _1993) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2008 + _1989) / _2001, (_1993 - _2006) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 - _2006) / _2001, (_1993 - _2008) / _2001), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 - _2008) / _2001, (_2006 + _1993) / _2001), _2011), 0.0)).x), vec4(0.25)));
        _2073 = 1.0 - (_2066 * cbSceneParam._m0[34u].x);
        _2074 = 1.0 - (_2066 * cbSceneParam._m0[34u].y);
        _2075 = 1.0 - (_2066 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2073 = 1.0;
        _2074 = 1.0;
        _2075 = 1.0;
    }
    float _2139;
    float _2141;
    float _2143;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2127 = fma(_1923, cbSceneParam._m0[63u].w, fma(_1919, cbSceneParam._m0[63u].z, fma(_1915, cbSceneParam._m0[63u].y, _1911 * cbSceneParam._m0[63u].x)));
        float _2128 = fma(_1923, cbSceneParam._m0[60u].w, fma(_1919, cbSceneParam._m0[60u].z, fma(_1915, cbSceneParam._m0[60u].y, _1911 * cbSceneParam._m0[60u].x))) / _2127;
        float _2129 = fma(_1923, cbSceneParam._m0[61u].w, fma(_1919, cbSceneParam._m0[61u].z, fma(_1915, cbSceneParam._m0[61u].y, _1911 * cbSceneParam._m0[61u].x))) / _2127;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2128 >= cbSceneParam._m0[64u].x) && (_2129 >= cbSceneParam._m0[64u].y)) && (_2128 <= cbSceneParam._m0[64u].z)) && (_2129 <= cbSceneParam._m0[64u].w))
        {
            float _2267 = fma(_1923, cbSceneParam._m0[62u].w, fma(_1919, cbSceneParam._m0[62u].z, fma(_1915, cbSceneParam._m0[62u].y, _1911 * cbSceneParam._m0[62u].x))) / _2127;
            float _2271 = isnan(cbSceneParam._m0[41u].w) ? _2267 : (isnan(_2267) ? cbSceneParam._m0[41u].w : max(_2267, cbSceneParam._m0[41u].w));
            float _2314 = (cbSceneParam._m0[33u].x - sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926))) * cbSceneParam._m0[33u].y;
            float _4477 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
            float _2321 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2128, cbSceneParam._m0[33u].w + _2129), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2128, _2129 - cbSceneParam._m0[33u].z), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2128 - cbSceneParam._m0[33u].z, _2129 - cbSceneParam._m0[33u].w), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2128 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2129), _2271), 0.0)).x), vec4(0.25)));
            float _2325 = 1.0 - (_2321 * cbSceneParam._m0[34u].x);
            float _2326 = 1.0 - (_2321 * cbSceneParam._m0[34u].y);
            float _2327 = 1.0 - (_2321 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2326) ? _2074 : (isnan(_2074) ? _2326 : min(_2074, _2326));
            frontier_phi_39_38_ladder_1 = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_39_38_ladder_2 = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
        }
        else
        {
            frontier_phi_39_38_ladder = _2074;
            frontier_phi_39_38_ladder_1 = _2073;
            frontier_phi_39_38_ladder_2 = _2075;
        }
        _2139 = frontier_phi_39_38_ladder_1;
        _2141 = frontier_phi_39_38_ladder;
        _2143 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2139 = _2073;
        _2141 = _2074;
        _2143 = _2075;
    }
    uvec4 _2148 = floatBitsToUint(cbInstanceData._m0[_710 + 5u]);
    uint _2150 = _2148.x * 14u;
    uint _2151 = _2150 + 13u;
    float _2158 = _818 + (-1.0);
    float _2163 = (cbLight._m0[_2151].x * _2158) + 1.0;
    float _2164 = (cbLight._m0[_2151].y * _2158) + 1.0;
    float _2165 = (cbLight._m0[_2151].z * _2158) + 1.0;
    float _2166 = (cbLight._m0[_2151].w * _2158) + 1.0;
    uint _2167 = _2150 + 5u;
    float _2173 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2177 = _2150 + 4u;
    float _2186 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2190 = _2150 | 1u;
    float _2201 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_504, _505, _506));
    float _2204 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_504, _505, _506));
    float _4513 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _4524 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2209 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2211 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2218 = ((cbLight._m0[_2167].x * _2173) * _2211) + (((cbLight._m0[_2177].x * _2139) * _2186) * _2209);
    float _2219 = ((_2173 * cbLight._m0[_2167].y) * _2211) + (((cbLight._m0[_2177].y * _2141) * _2186) * _2209);
    float _2220 = ((_2173 * cbLight._m0[_2167].z) * _2211) + (((cbLight._m0[_2177].z * _2143) * _2186) * _2209);
    uvec4 _2224 = floatBitsToUint(cbLight._m0[_2150 + 12u]);
    bool _2226 = _2224.x == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2226)
    {
        _2328 = _2218;
        _2330 = _2219;
        _2332 = _2220;
    }
    else
    {
        uint _2336 = _2150 + 6u;
        float _2352 = (dot(vec3(cbLight._m0[_2150 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4535 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2355 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2328 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2218;
        _2330 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2219;
        _2332 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2220;
    }
    bool _2335 = _2224.y == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2335)
    {
        _2390 = _2328;
        _2392 = _2330;
        _2394 = _2332;
    }
    else
    {
        uint _2563 = _2150 + 7u;
        float _2579 = (dot(vec3(cbLight._m0[_2150 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2580 = _2579 * _2579;
        float _4551 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2581 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2582 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2390 = (((cbLight._m0[_2563].x * 0.3183098733425140380859375) * _2581) * _2582) + _2328;
        _2392 = (((cbLight._m0[_2563].y * 0.3183098733425140380859375) * _2581) * _2582) + _2330;
        _2394 = (((cbLight._m0[_2563].z * 0.3183098733425140380859375) * _2581) * _2582) + _2332;
    }
    uint _2397 = _2150 + 8u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _686) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2150].x + _587;
    float _2413 = cbLight._m0[_2150].y + _588;
    float _2414 = cbLight._m0[_2150].z + _589;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2150].xyz));
    float _4567 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _4578 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2426 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2427 = dot(vec3(_504, _505, _506), vec3(_2419, _2420, _2421));
    float _4589 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2419, _2420, _2421));
    float _4600 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2411 * _2411;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
    float _2448 = 0.959999978542327880859375 - _801;
    float _2450 = 0.959999978542327880859375 - _802;
    float _2451 = 0.959999978542327880859375 - _803;
    float _2458 = 1.0 - _2411;
    float _2469 = (0.5 / (((_2426 * ((_2425 * _2458) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2458) + _2411) * _2425))) * _2425;
    float _4611 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    uint _2485 = _2150 + 9u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _686) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2190].x + _587;
    float _2499 = cbLight._m0[_2190].y + _588;
    float _2500 = cbLight._m0[_2190].z + _589;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2190].xyz));
    float _4622 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2512 = dot(vec3(_504, _505, _506), vec3(_2505, _2506, _2507));
    float _4633 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2505, _2506, _2507));
    float _4644 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2497 * _2497;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
    float _2538 = 1.0 - _2497;
    float _2548 = (0.5 / (((_2426 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2538) + _2497) * _2511))) * _2511;
    float _4655 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2550 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    float _2560 = (((((_2531 * _2448) + _804) * cbLight._m0[_2485].x) * _2550) * _2173) + ((((cbLight._m0[_2397].x * _2139) * ((_2447 * _2448) + _804)) * _2471) * _2186);
    float _2561 = (((((_2531 * _2450) + _805) * cbLight._m0[_2485].y) * _2550) * _2173) + ((((cbLight._m0[_2397].y * _2141) * ((_2447 * _2450) + _805)) * _2471) * _2186);
    float _2562 = (((((_2531 * _2451) + _806) * cbLight._m0[_2485].z) * _2550) * _2173) + ((((cbLight._m0[_2397].z * _2143) * ((_2447 * _2451) + _806)) * _2471) * _2186);
    float _2618;
    float _2620;
    float _2622;
    if (_2226)
    {
        _2618 = _2560;
        _2620 = _2561;
        _2622 = _2562;
    }
    else
    {
        uint _2624 = _2150 + 2u;
        uint _2628 = _2150 + 10u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _686) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _587;
        float _2645 = cbLight._m0[_2624].y + _588;
        float _2646 = cbLight._m0[_2624].z + _589;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2624].xyz));
        float _4666 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2658 = dot(vec3(_504, _505, _506), vec3(_2651, _2652, _2653));
        float _4677 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4688 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2426 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2684) + _2643) * _2657))) * _2657;
        float _4699 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2618 = (((((_2677 * _2448) + _804) * cbLight._m0[_2628].x) * _2696) * _2697) + _2560;
        _2620 = (((((_2677 * _2450) + _805) * cbLight._m0[_2628].y) * _2696) * _2697) + _2561;
        _2622 = (((((_2677 * _2451) + _806) * cbLight._m0[_2628].z) * _2696) * _2697) + _2562;
    }
    float _2728;
    float _2730;
    float _2732;
    if (_2335)
    {
        _2728 = _2618;
        _2730 = _2620;
        _2732 = _2622;
    }
    else
    {
        uint _2739 = _2150 + 3u;
        uint _2743 = _2150 + 11u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _686) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _587;
        float _2760 = cbLight._m0[_2739].y + _588;
        float _2761 = cbLight._m0[_2739].z + _589;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2739].xyz));
        float _4715 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2773 = dot(vec3(_504, _505, _506), vec3(_2766, _2767, _2768));
        float _4726 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4737 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2799 = 1.0 - _2758;
        float _2809 = (0.5 / (((_2426 * ((_2772 * _2799) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2799) + _2758) * _2772))) * _2772;
        float _4748 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2811 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2812 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2728 = (((((_2792 * _2448) + _804) * cbLight._m0[_2743].x) * _2811) * _2812) + _2618;
        _2730 = (((((_2792 * _2450) + _805) * cbLight._m0[_2743].y) * _2811) * _2812) + _2620;
        _2732 = (((((_2792 * _2451) + _806) * cbLight._m0[_2743].z) * _2811) * _2812) + _2622;
    }
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    if (_2148.y == 0u)
    {
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.x;
        uint _2845 = uint((float(_2833.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2834))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2834)));
        float _2855 = (log2(_1926 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2856 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        uint _2859 = uint(isnan(14.0) ? _2856 : (isnan(_2856) ? 14.0 : min(_2856, 14.0)));
        uvec4 _2864 = texelFetch(g_lightClusterGridBuffer, int(((_2859 << 2u) + (_2845 << 6u)) >> 2u));
        uint _2865 = _2864.x;
        uint _2866 = _2833.z;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((((1u << ((_2866 >> 4u) & 15u)) + 4294967295u) & _2865) == 0u) || ((_2866 & 240u) == 0u))
        {
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
        }
        else
        {
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            uint _3154 = 0u;
            uint _3163;
            bool _3164;
            for (;;)
            {
                _3163 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                _3164 = _3163 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3164)
                {
                    frontier_phi_73_pred = _3153;
                    frontier_phi_73_pred_1 = _3152;
                    frontier_phi_73_pred_2 = _3151;
                    frontier_phi_73_pred_3 = _3150;
                    frontier_phi_73_pred_4 = _3149;
                    frontier_phi_73_pred_5 = _3148;
                }
                else
                {
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    uint _3299;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3163;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3303 = uint(findLSB(_3299)) + (_3154 << 5u);
                        uint _3300 = (_3299 + 4294967295u) & _3299;
                        uint _3305 = _3303 * 48u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3325 = (_3303 * 48u) + 4u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 3u)).x));
                        uint _3344 = (_3303 * 48u) + 8u;
                        vec3 _3355 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x));
                        float _3359 = _3319.x - _1924;
                        float _3360 = _3319.y - _1925;
                        float _3361 = _3319.z - _1926;
                        float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                        float _3365 = inversesqrt(_3362);
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3369 = dot(vec3(_631, _634, _637), vec3(_3366, _3367, _3368));
                        float _3374 = 1.0 - (_3362 * _3319.w);
                        float _4774 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3376 = sqrt(_3362) * _3338.w;
                        float _3379 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3369) + _3380;
                        float _3386 = _3376 * _3376;
                        float _3390 = ((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3375) / ((_3386 * 0.699999988079071044921875) + 1.0);
                        float _3394 = (-0.0) - _1924;
                        float _3395 = (-0.0) - _1925;
                        float _3396 = (-0.0) - _1926;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3410 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                        float _3411 = 1.0 - _834;
                        float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                        float _3419 = _3418 * _3418;
                        float _3420 = _3419 * _3419;
                        float _3421 = _3401 + _3366;
                        float _3422 = _3402 + _3367;
                        float _3423 = _3403 + _3368;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3431 = dot(vec3(_631, _634, _637), vec3(_3401, _3402, _3403));
                        float _4790 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3435 = dot(vec3(_631, _634, _637), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                        float _4801 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                        float _3443 = _3379 * _3419;
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3369) + _3444;
                        float _4812 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3449 = 1.0 - _3419;
                        float _3459 = (0.5 / (((_3448 * ((_3434 * _3449) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3419) * _3434))) * _3448;
                        float _4823 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3470 = (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3442 * _3442) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125))) * _3375;
                        _3223 = (_3390 * _3338.x) + _3296;
                        _3224 = (_3390 * _3338.y) + _3297;
                        _3225 = (_3390 * _3338.z) + _3298;
                        _3220 = (_3470 * _3355.x) + _3293;
                        _3221 = (_3470 * _3355.y) + _3294;
                        _3222 = (_3470 * _3355.z) + _3295;
                        if (_3300 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3300;
                        }
                    }
                    frontier_phi_73_pred = _3225;
                    frontier_phi_73_pred_1 = _3224;
                    frontier_phi_73_pred_2 = _3223;
                    frontier_phi_73_pred_3 = _3222;
                    frontier_phi_73_pred_4 = _3221;
                    frontier_phi_73_pred_5 = _3220;
                }
                _2998 = frontier_phi_73_pred;
                _2996 = frontier_phi_73_pred_1;
                _2994 = frontier_phi_73_pred_2;
                _2992 = frontier_phi_73_pred_3;
                _2990 = frontier_phi_73_pred_4;
                _2988 = frontier_phi_73_pred_5;
                uint _3155 = _3154 + 1u;
                if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3148 = _2988;
                    _3149 = _2990;
                    _3150 = _2992;
                    _3151 = _2994;
                    _3152 = _2996;
                    _3153 = _2998;
                    _3154 = _3155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
        }
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.z;
        uint _3004 = (_3002 >> 8u) & 15u;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((4294967295u << _3004) & _2865) == 0u)
        {
            _3116 = _2987;
            _3118 = _2989;
            _3120 = _2991;
            _3122 = _2993;
            _3124 = _2995;
            _3126 = _2997;
        }
        else
        {
            float _3141 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
            float _3142 = _3141 * _1924;
            float _3143 = _3141 * _1925;
            float _3144 = _3141 * _1926;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3004 < ((_3002 >> 12u) & 15u))
            {
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3276 = _2987;
                float _3277 = _2989;
                float _3278 = _2991;
                float _3279 = _2993;
                float _3280 = _2995;
                float _3281 = _2997;
                uint _3282 = _3004;
                uint _3291;
                bool _3292;
                for (;;)
                {
                    _3291 = texelFetch(g_lightClassification, int((((_2859 << 5u) + (_2845 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                    _3292 = _3291 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3292)
                    {
                        frontier_phi_84_pred = _3280;
                        frontier_phi_84_pred_1 = _3279;
                        frontier_phi_84_pred_2 = _3278;
                        frontier_phi_84_pred_3 = _3277;
                        frontier_phi_84_pred_4 = _3276;
                        frontier_phi_84_pred_5 = _3281;
                    }
                    else
                    {
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3497 = _3276;
                        float _3498 = _3277;
                        float _3499 = _3278;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        uint _3503 = _3291;
                        uint _3504;
                        vec4 _3529;
                        float _3530;
                        vec4 _3545;
                        vec3 _3557;
                        vec4 _3572;
                        vec4 _3588;
                        float _3635;
                        bool _3636;
                        for (;;)
                        {
                            uint _3514 = ((_3282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3503));
                            _3504 = (_3503 + 4294967295u) & _3503;
                            uint _3516 = _3514 * 40u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3530 = _3529.w;
                            uint _3532 = (_3514 * 40u) + 4u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3514 * 40u) + 8u;
                            _3557 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x));
                            uint _3559 = (_3514 * 40u) + 16u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3575 = (_3514 * 40u) + 20u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3591 = (_3514 * 40u) + 24u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3610 = (_3514 * 40u) + 28u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3635 = fma(_1926, _3623.z, fma(_1925, _3623.y, _3623.x * _1924)) + _3623.w;
                            _3636 = !((fma(_1926, _3604.z, fma(_1925, _3604.y, _3604.x * _1924)) + _3604.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3636)
                            {
                                float _3663 = _3529.x - _1924;
                                float _3664 = _3529.y - _1925;
                                float _3665 = _3529.z - _1926;
                                float _3666 = dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665));
                                float _3669 = inversesqrt(_3666);
                                float _3670 = _3669 * _3663;
                                float _3671 = _3669 * _3664;
                                float _3672 = _3669 * _3665;
                                float _3676 = 1.0 - (_3666 / (_3530 * _3530));
                                float _4834 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3681 = sqrt(_3666) * _3545.w;
                                float _3683 = 1.39999997615814208984375 / (_3681 + 1.39999997615814208984375);
                                float _3684 = _3683 * _3683;
                                float _3687 = ((1.0 - _3684) * dot(vec3(_3670, _3671, _3672), vec3(_631, _634, _637))) + _3684;
                                float _3690 = _3681 * _3681;
                                float _3694 = (fma(_1926, _3572.z, fma(_1925, _3572.y, _3572.x * _1924)) + _3572.w) / _3635;
                                float _3695 = (fma(_1926, _3588.z, fma(_1925, _3588.y, _3588.x * _1924)) + _3588.w) / _3635;
                                float _3699 = 1.0 - dot(vec2(_3694, _3695), vec2(_3694, _3695));
                                float _4850 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3701 = _3700 * (((isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))) * _3677) / ((_3690 * 0.699999988079071044921875) + 1.0));
                                float _3713 = exp2(log2(1.0 / ((_3690 * 3.5) + 5.0)) * 0.25);
                                float _3714 = 1.0 - _834;
                                float _3721 = sqrt(1.0 - ((1.0 - (_3714 * _3714)) * (1.0 - (_3713 * _3713))));
                                float _3722 = _3721 * _3721;
                                float _3723 = _3722 * _3722;
                                float _3724 = _3670 - _3142;
                                float _3725 = _3671 - _3143;
                                float _3726 = _3672 - _3144;
                                float _3730 = inversesqrt(dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726)));
                                float _3734 = dot(vec3(_631, _634, _637), vec3((-0.0) - _3142, (-0.0) - _3143, (-0.0) - _3144));
                                float _4861 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3738 = dot(vec3(_631, _634, _637), vec3(_3730 * _3724, _3730 * _3725, _3730 * _3726));
                                float _4872 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3745 = ((_3741 * _3741) * (_3723 + (-1.0))) + 1.0;
                                float _3746 = _3683 * _3722;
                                float _3747 = _3746 * _3746;
                                float _3753 = ((1.0 - _3747) * dot(vec3(_631, _634, _637), vec3(_3670, _3671, _3672))) + _3747;
                                float _4883 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3755 = 1.0 - _3722;
                                float _3765 = (0.5 / (((_3754 * ((_3737 * _3755) + _3722)) + 9.9999999392252902907785028219223e-09) + (((_3754 * _3755) + _3722) * _3737))) * _3754;
                                float _4894 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3775 = (_3700 * _3677) * (((_3723 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3745 * _3745) * ((_3690 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3701 * _3545.y;
                                frontier_phi_90_pred_1 = _3701 * _3545.x;
                                frontier_phi_90_pred_2 = _3775 * _3557.z;
                                frontier_phi_90_pred_3 = _3775 * _3557.y;
                                frontier_phi_90_pred_4 = _3775 * _3557.x;
                                frontier_phi_90_pred_5 = _3701 * _3545.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3783 = frontier_phi_90_pred;
                            _3782 = frontier_phi_90_pred_1;
                            _3781 = frontier_phi_90_pred_2;
                            _3780 = frontier_phi_90_pred_3;
                            _3779 = frontier_phi_90_pred_4;
                            _3784 = frontier_phi_90_pred_5;
                            _3487 = _3782 + _3500;
                            _3488 = _3783 + _3501;
                            _3489 = _3784 + _3502;
                            _3484 = _3779 + _3497;
                            _3485 = _3780 + _3498;
                            _3486 = _3781 + _3499;
                            if (_3504 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3504;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3488;
                        frontier_phi_84_pred_1 = _3487;
                        frontier_phi_84_pred_2 = _3486;
                        frontier_phi_84_pred_3 = _3485;
                        frontier_phi_84_pred_4 = _3484;
                        frontier_phi_84_pred_5 = _3489;
                    }
                    _3125 = frontier_phi_84_pred;
                    _3123 = frontier_phi_84_pred_1;
                    _3121 = frontier_phi_84_pred_2;
                    _3119 = frontier_phi_84_pred_3;
                    _3117 = frontier_phi_84_pred_4;
                    _3127 = frontier_phi_84_pred_5;
                    uint _3283 = _3282 + 1u;
                    if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3276 = _3117;
                        _3277 = _3119;
                        _3278 = _3121;
                        _3279 = _3123;
                        _3280 = _3125;
                        _3281 = _3127;
                        _3282 = _3283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3127;
                frontier_phi_65_66_ladder_1 = _3123;
                frontier_phi_65_66_ladder_2 = _3125;
                frontier_phi_65_66_ladder_3 = _3119;
                frontier_phi_65_66_ladder_4 = _3117;
                frontier_phi_65_66_ladder_5 = _3121;
            }
            else
            {
                frontier_phi_65_66_ladder = _2997;
                frontier_phi_65_66_ladder_1 = _2993;
                frontier_phi_65_66_ladder_2 = _2995;
                frontier_phi_65_66_ladder_3 = _2989;
                frontier_phi_65_66_ladder_4 = _2987;
                frontier_phi_65_66_ladder_5 = _2991;
            }
            _3116 = frontier_phi_65_66_ladder_4;
            _3118 = frontier_phi_65_66_ladder_3;
            _3120 = frontier_phi_65_66_ladder_5;
            _3122 = frontier_phi_65_66_ladder_1;
            _3124 = frontier_phi_65_66_ladder_2;
            _3126 = frontier_phi_65_66_ladder;
        }
        float _3131 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        _2877 = (_3131 * _3122) + _2390;
        _2879 = (_3131 * _3124) + _2392;
        _2881 = (_3131 * _3126) + _2394;
        _2883 = ((_3116 * _804) * _3131) + _2728;
        _2885 = ((_3118 * _805) * _3131) + _2730;
        _2887 = ((_3120 * _806) * _3131) + _2732;
    }
    else
    {
        _2877 = _2390;
        _2879 = _2392;
        _2881 = _2394;
        _2883 = _2728;
        _2885 = _2730;
        _2887 = _2732;
    }
    uint _2893 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _2903 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.x) * cbInstanceData._m0[_2893].x;
    float _2908 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.y) * cbInstanceData._m0[_2893].y;
    float _2913 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _448) * _461.z) * cbInstanceData._m0[_2893].z;
    float _4910 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4921 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4932 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4943 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2931 = (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2877 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _818))) + ((_2883 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1656)) * cbPerFrame._m0[3u].x)) + _2903;
    float _2933 = (_2908 + ((_2885 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1656)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2879 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _818)));
    float _2935 = (_2913 + ((_2887 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1656)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2881 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _818)));
    float _2936 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
    float _2937 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2938 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
    float _2944 = cbMtdParam._m0[2u].x * _2903;
    float _2945 = cbMtdParam._m0[2u].y * _2908;
    float _2946 = cbMtdParam._m0[2u].z * _2913;
    float _4969 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2948 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
    float _2953 = cbInstanceData._m0[_710 + 6u].w * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)));
    float _2958 = _608 / cbSceneParam._m0[86u].x;
    float _2959 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _3012 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _3013 = _3012 / _528;
        float _3024 = _3013 * _580;
        float _3025 = _581 * _3013;
        float _3026 = (-0.0) - _3025;
        float _3027 = _3013 * _582;
        float _3029 = (cbSceneParam._m0[77u].w * _3026) / _3012;
        float _3030 = _3029 + cbSceneParam._m0[79u].w;
        float _3031 = cbSceneParam._m0[79u].w - _3025;
        float _3037 = sqrt(((_3024 * _3024) + (_3025 * _3025)) + (_3027 * _3027));
        float _3040 = (1.0 - (cbSceneParam._m0[77u].w / _3012)) * _3037;
        float _3045 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3047 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3026 - _3029) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3030 > 0.0) ? exp2(_3045 * _3030) : (2.0 - exp2(_3047 * _3030))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3040;
        }
        else
        {
            float _3177 = 1.0 / cbSceneParam._m0[80u].x;
            float _3178 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : max(_3030, _3031));
            float _3179 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : min(_3030, _3031));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            _3233 = ((abs(_3037 / _3026) * cbSceneParam._m0[80u].y) * ((((_3188 - _3189) * 2.0) - ((exp2(_3045 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0)))) - exp2(_3045 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))))) * _3177)) - ((exp2(_3047 * _3188) - exp2(_3047 * _3189)) * _3177))) + (_3040 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_2978);
        _3049 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3051 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3053 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3055 = _3244 * _2978;
    }
    else
    {
        _3049 = _2975;
        _3051 = _2976;
        _3053 = _2977;
        _3055 = _2978;
    }
    bool _3271;
    vec4 _3065;
    vec4 _3087;
    float _3089;
    float _3093;
    float _3094;
    float _3095;
    float _3098;
    float _3101;
    float _3104;
    float _3105;
    bool _3115;
    for (;;)
    {
        _3065 = cbMatDynParam._m0[0u];
        float _3067 = roundEven(_3065.y);
        bool _3068 = _3067 == 3.0;
        float _3069 = log2(_3055);
        float _3073 = exp2(_3069 * cbSceneParam._m0[78u].x);
        float _3074 = exp2(_3069 * cbSceneParam._m0[78u].y);
        float _3075 = exp2(_3069 * cbSceneParam._m0[78u].z);
        float _3076 = _3073 * _2936;
        float _3077 = _3074 * _2937;
        float _3078 = _3075 * _2938;
        float _3085 = _596 + (-0.5);
        _3087 = cbMtdParam._m0[1u];
        _3089 = _3087.y * _3085;
        float _3092 = (_3067 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3093 = _3092 * (_3068 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3049)));
        _3094 = _3092 * (_3068 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3051)));
        _3095 = _3092 * (_3068 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3053)));
        _3098 = ((_2944 * _2948) * _3073) * _3092;
        _3101 = ((_2945 * _2948) * _3074) * _3092;
        _3104 = ((_2946 * _2948) * _3075) * _3092;
        _3105 = _3085 * 0.999000012874603271484375;
        _3115 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3115)
        {
            if ((cbInstanceData._m0[_710 + 7u].x + _3105) < 0.5)
            {
                _3271 = true;
                break;
            }
        }
        uint _3212 = _711 + uint(_3065.w);
        if ((cbInstanceData._m0[_3212].w < 1.0) && ((cbInstanceData._m0[_3212].w + _3105) < 0.5))
        {
            _3271 = true;
            break;
        }
        if ((_3089 + _353) < _3087.x)
        {
            _3271 = true;
            break;
        }
        _3271 = false;
        break;
    }
    float _3475;
    if (_3271)
    {
        discard_state = true;
        _3475 = 0.0;
    }
    else
    {
        _3475 = _2953;
    }
    SV_Target.x = _3093;
    SV_Target.y = _3094;
    SV_Target.z = _3095;
    SV_Target.w = _3475;
    SV_Target_1.x = _3098;
    SV_Target_1.y = _3101;
    SV_Target_1.z = _3104;
    SV_Target_1.w = _2953;
    discard_exit();
}


