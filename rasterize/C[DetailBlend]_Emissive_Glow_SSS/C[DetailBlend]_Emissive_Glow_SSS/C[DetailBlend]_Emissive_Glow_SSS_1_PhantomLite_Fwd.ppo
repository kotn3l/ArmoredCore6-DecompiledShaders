#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1298;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    vec4 _304 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _304.z;
    float _315 = exp2(log2(_309 * 22.0) * 260.0);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    vec4 _331 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _341 = cbMtdParam._m0[10u].x * _331.x;
    float _342 = cbMtdParam._m0[10u].y * _331.y;
    float _343 = cbMtdParam._m0[10u].z * _331.z;
    vec4 _355 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _389 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _397 = (((((cbMtdParam._m0[9u].x * _355.x) - _341) * _317) + _341) * 4.55000019073486328125) * _389.x;
    float _399 = (((((cbMtdParam._m0[9u].y * _355.y) - _342) * _317) + _342) * 4.55000019073486328125) * _389.y;
    float _401 = (((((cbMtdParam._m0[9u].z * _355.z) - _343) * _317) + _343) * 4.55000019073486328125) * _389.z;
    float _402 = _389.w * _355.w;
    float _428 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _317) + cbMtdParam._m0[17u].x;
    vec4 _440 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _442 = _440.x;
    float _443 = _440.y;
    float _449 = cbMtdParam._m0[14u].y + _440.z;
    vec4 _461 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _478 = (((_317 * (_309 + (-0.5))) + 0.5) * 2.0) * ((((_461.z - _449) + cbMtdParam._m0[14u].x) * _317) + _449);
    float _496 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3679 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _502 = (_497 * _497) * (3.0 - (_497 * 2.0));
    vec4 _515 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _523 = (_304.x * 2.0) + (-1.0);
    float _524 = (_304.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3690 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    float _543 = (cbMtdParam._m0[14u].z * (((((_461.x - _442) * _317) + _442) * 2.0) + (-1.0))) + _523;
    float _544 = (cbMtdParam._m0[14u].z * (((((_461.y - _443) * _317) + _443) * 2.0) + (-1.0))) + _524;
    float _547 = fma(_530, _233, fma(_544, _225 * TANGENT.x, (_211 * _203) * _543));
    float _550 = fma(_530, _234, fma(_544, _225 * TANGENT.y, (_211 * _204) * _543));
    float _553 = fma(_530, _235, fma(_544, _225 * TANGENT.z, (_211 * _205) * _543));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3701 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _561 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _562 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _563 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _564 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _565 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _566 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _574 = cbMatDynParam._m0[9u].x * _563;
    float _575 = cbMatDynParam._m0[9u].y * _564;
    float _576 = cbMatDynParam._m0[9u].z * _565;
    float _583 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _584 = _583 * _289;
    float _585 = _583 * _290;
    float _586 = _583 * _291;
    float _587 = dot(vec3(_558, _559, _560), vec3(_584, _585, _586));
    float _593 = abs(exp2(log2(_587) * cbMatDynParam._m0[12u].x));
    float _594 = isnan(0.100000001490116119384765625) ? _593 : (isnan(_593) ? 0.100000001490116119384765625 : max(_593, 0.100000001490116119384765625));
    float _600 = ((isnan(0.699999988079071044921875) ? _594 : (isnan(_594) ? 0.699999988079071044921875 : min(_594, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _622 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3777 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3788 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _629 = (((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) - _626) * _600) + _626;
    float _648 = dot(vec3(_558, _559, _560), vec3(0.0, -1.0, 0.0));
    float _3799 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _658 = (_651 * _563) * cbMatDynParam._m0[11u].x;
    float _660 = (_651 * _564) * cbMatDynParam._m0[11u].y;
    float _662 = (_651 * _565) * cbMatDynParam._m0[11u].z;
    float _669 = dot(vec3(_584, _585, _586), vec3(_558, _559, _560));
    float _672 = _669 * 2.0;
    float _682 = dot(vec3((-0.0) - (_584 - (_672 * _558)), (-0.0) - (_585 - (_672 * _559)), (-0.0) - (_586 - (_672 * _560))), vec3(0.0, -1.0, 0.0));
    float _3810 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _689 = exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 4.0);
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _722 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _724 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _726 = _724.w;
    float _745 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _748 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _751 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    vec4 _753 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _755 = _753.x;
    float _767 = (((_753.y - _562) + (_753.w * _562)) * cbMtdParam._m0[3u].x) + _562;
    float _784 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_755 * _755)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _792 = (((cbMatDynParam._m0[15u].x - _566) * cbMatDynParam._m0[15u].w) * _784) + _566;
    float _800 = ((_784 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _767)) + _767;
    uint _824 = uint(roundEven(NORMAL.w)) * 13u;
    uint _826 = _824 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * _574) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * _575) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * _576) * cbInstanceData._m0[_827].z;
    float _3821 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    vec4 _839 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _844 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _855 = (((_844.x - _792) + (_844.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    float _868 = (cbMtdParam._m0[3u].x * (((_836 * _726) - _836) + _839.x)) + _836;
    float _869 = (cbMtdParam._m0[3u].x * (((_837 * _726) - _837) + _839.y)) + _837;
    float _870 = (cbMtdParam._m0[3u].x * (((_838 * _726) - _838) + _839.z)) + _838;
    vec4 _871 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _884 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_792 * (_574 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_792 * (_575 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_792 * (_576 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _871.z;
    float _888 = _884 * cbMatDynParam._m0[13u].w;
    float _898 = (_888 * (cbMatDynParam._m0[13u].x - _868)) + _868;
    float _899 = (_888 * (cbMatDynParam._m0[13u].y - _869)) + _869;
    float _900 = (_888 * (cbMatDynParam._m0[13u].z - _870)) + _870;
    float _908 = ((_884 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _855)) + _855;
    float _909 = 1.0 - _908;
    float _910 = _909 * _898;
    float _911 = _909 * _899;
    float _912 = _909 * _900;
    float _916 = (_898 + (-0.039999999105930328369140625)) * _908;
    float _917 = (_899 + (-0.039999999105930328369140625)) * _908;
    float _918 = (_900 + (-0.039999999105930328369140625)) * _908;
    float _919 = _916 + 0.039999999105930328369140625;
    float _920 = _917 + 0.039999999105930328369140625;
    float _921 = _918 + 0.039999999105930328369140625;
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _721, cbSceneParam._m0[86u].y * _722));
    float _933 = _930.x * TEXCOORD_4;
    float _934 = _587 * 2.0;
    float _938 = (_934 * _558) - _584;
    float _939 = (_934 * _559) - _585;
    float _940 = (_934 * _560) - _586;
    float _941 = abs(_669);
    float _3854 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_800);
    float _954 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _960 = (1.0 - _954) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _961 = _954 * _943;
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1028 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1032 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1055 = _989 + _558;
        float _1056 = _993 + _559;
        float _1057 = _997 + _560;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_558, _559, _560), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3902 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_558, _559, _560), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3935 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_558, _559, _560), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3968 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1342 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1346 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1369 = _989 + _558;
        float _1370 = _993 + _559;
        float _1371 = _997 + _560;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_558, _559, _560), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4031 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_558, _559, _560), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4064 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_558, _559, _560), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4097 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1298;
        _1608 = _1298;
        _1609 = _1298;
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = _1298;
        _1618 = _1298;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1310)) + _1310;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1312)) + _1312;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _938 * 0.5;
    float _1676 = _939 * 0.5;
    float _1677 = _940 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_940, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938));
        float _1802 = fma(_940, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938));
        float _1805 = fma(_940, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1833 = frontier_phi_16_14_ladder;
        }
        float _2037;
        if (_1802 > 0.0)
        {
            _2037 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2037 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1805 > 0.0)
        {
            _2291 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2293 = isnan(_2037) ? _1833 : (isnan(_1833) ? _2037 : min(_1833, _2037));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1799) + _1788;
        float _2299 = (_2294 * _1802) + _1792;
        float _2300 = (_2294 * _1805) + _1796;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_15_37_ladder = _2428.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2428.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2428.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_15_37_ladder_2;
        _1823 = frontier_phi_15_37_ladder_1;
        _1825 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_938, _939, _940), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_940, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938));
        float _1899 = fma(_940, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938));
        float _1902 = fma(_940, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938));
        float _2042;
        if (_1896 > 0.0)
        {
            _2042 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2042 = frontier_phi_27_23_ladder;
        }
        float _2318;
        if (_1899 > 0.0)
        {
            _2318 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2318 = frontier_phi_39_34_ladder;
        }
        float _2531;
        if (_1902 > 0.0)
        {
            _2531 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2531 = frontier_phi_48_45_ladder;
        }
        float _2533 = isnan(_2318) ? _2042 : (isnan(_2042) ? _2318 : min(_2042, _2318));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1896) + _1885;
        float _2539 = (_2534 * _1899) + _1889;
        float _2540 = (_2534 * _1902) + _1893;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_24_48_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_24_48_ladder_2;
        _1923 = frontier_phi_24_48_ladder_1;
        _1925 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_938, _939, _940), _1830);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_960 * _919) + _961) * _933) * ((cbModelParam._m0[1u].w * (_1921 - _1821)) + _1821);
    float _1940 = (((_960 * _920) + _961) * _933) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_960 * _921) + _961) * _933) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_824 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _933 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _1996 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2000 = _1963 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_558, _559, _560));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_558, _559, _560));
    float _4233 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4244 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1980].x * _1986) * _2021) + ((cbLight._m0[_1990].x * _1996) * _2019);
    float _2029 = ((_1986 * cbLight._m0[_1980].y) * _2021) + ((_1996 * cbLight._m0[_1990].y) * _2019);
    float _2030 = ((_1986 * cbLight._m0[_1980].z) * _2021) + ((_1996 * cbLight._m0[_1990].z) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1963 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4255 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2074 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2262 = _1963 + 7u;
        float _2278 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4271 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2281 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2092 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2047;
        _2094 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2049;
        _2096 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2051;
    }
    uint _2099 = _1963 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _800) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1963].x + _584;
    float _2115 = cbLight._m0[_1963].y + _585;
    float _2116 = cbLight._m0[_1963].z + _586;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_1963].xyz));
    float _4287 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2128 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2129 = dot(vec3(_558, _559, _560), vec3(_2121, _2122, _2123));
    float _4309 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2121, _2122, _2123));
    float _4320 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
    float _2150 = 0.959999978542327880859375 - _916;
    float _2152 = 0.959999978542327880859375 - _917;
    float _2153 = 0.959999978542327880859375 - _918;
    float _2160 = 1.0 - _2113;
    float _2171 = (0.5 / (((_2128 * ((_2127 * _2160) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2160) + _2113) * _2127))) * _2127;
    float _4331 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2184 = _1963 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _800) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2000].x + _584;
    float _2198 = cbLight._m0[_2000].y + _585;
    float _2199 = cbLight._m0[_2000].z + _586;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2000].xyz));
    float _4342 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2211 = dot(vec3(_558, _559, _560), vec3(_2204, _2205, _2206));
    float _4353 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2204, _2205, _2206));
    float _4364 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
    float _2237 = 1.0 - _2196;
    float _2247 = (0.5 / (((_2128 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2237) + _2196) * _2210))) * _2210;
    float _4375 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2259 = (((((_2230 * _2150) + _919) * cbLight._m0[_2184].x) * _2249) * _1986) + (((((_2149 * _2150) + _919) * cbLight._m0[_2099].x) * _2173) * _1996);
    float _2260 = (((((_2230 * _2152) + _920) * cbLight._m0[_2184].y) * _2249) * _1986) + (((((_2149 * _2152) + _920) * cbLight._m0[_2099].y) * _2173) * _1996);
    float _2261 = (((((_2230 * _2153) + _921) * cbLight._m0[_2184].z) * _2249) * _1986) + (((((_2149 * _2153) + _921) * cbLight._m0[_2099].z) * _2173) * _1996);
    float _2323;
    float _2325;
    float _2327;
    if (_2036)
    {
        _2323 = _2259;
        _2325 = _2260;
        _2327 = _2261;
    }
    else
    {
        uint _2329 = _1963 + 2u;
        uint _2333 = _1963 + 10u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _800) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _584;
        float _2350 = cbLight._m0[_2329].y + _585;
        float _2351 = cbLight._m0[_2329].z + _586;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2329].xyz));
        float _4386 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2363 = dot(vec3(_558, _559, _560), vec3(_2356, _2357, _2358));
        float _4397 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4408 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2389 = 1.0 - _2348;
        float _2399 = (0.5 / (((_2128 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2389) + _2348) * _2362))) * _2362;
        float _4419 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2323 = (((((_2382 * _2150) + _919) * cbLight._m0[_2333].x) * _2401) * _2402) + _2259;
        _2325 = (((((_2382 * _2152) + _920) * cbLight._m0[_2333].y) * _2401) * _2402) + _2260;
        _2327 = (((((_2382 * _2153) + _921) * cbLight._m0[_2333].z) * _2401) * _2402) + _2261;
    }
    float _2437;
    float _2439;
    float _2441;
    if (_2054)
    {
        _2437 = _2323;
        _2439 = _2325;
        _2441 = _2327;
    }
    else
    {
        uint _2448 = _1963 + 3u;
        uint _2452 = _1963 + 11u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _800) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _584;
        float _2469 = cbLight._m0[_2448].y + _585;
        float _2470 = cbLight._m0[_2448].z + _586;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2448].xyz));
        float _4435 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2482 = dot(vec3(_558, _559, _560), vec3(_2475, _2476, _2477));
        float _4446 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4457 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2508 = 1.0 - _2467;
        float _2518 = (0.5 / (((_2128 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2508) + _2467) * _2481))) * _2481;
        float _4468 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2437 = (((((_2501 * _2150) + _919) * cbLight._m0[_2452].x) * _2520) * _2521) + _2323;
        _2439 = (((((_2501 * _2152) + _920) * cbLight._m0[_2452].y) * _2520) * _2521) + _2325;
        _2441 = (((((_2501 * _2153) + _921) * cbLight._m0[_2452].z) * _2520) * _2521) + _2327;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1961.y == 0u)
    {
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2596;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2596;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2596;
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _722) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _721) / _2612)));
        float _2633 = (log2(_2599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2948)
                {
                    frontier_phi_63_pred = _2937;
                    frontier_phi_63_pred_1 = _2936;
                    frontier_phi_63_pred_2 = _2935;
                    frontier_phi_63_pred_3 = _2934;
                    frontier_phi_63_pred_4 = _2933;
                    frontier_phi_63_pred_5 = _2932;
                }
                else
                {
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    uint _3062;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2947;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    for (;;)
                    {
                        uint _3066 = uint(findLSB(_3062)) + (_2938 << 5u);
                        uint _3063 = (_3062 + 4294967295u) & _3062;
                        uint _3068 = _3066 * 48u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3088 = (_3066 * 48u) + 4u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3107 = (_3066 * 48u) + 8u;
                        vec3 _3118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x));
                        float _3122 = _3082.x - _2597;
                        float _3123 = _3082.y - _2598;
                        float _3124 = _3082.z - _2599;
                        float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                        float _3128 = inversesqrt(_3125);
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3132 = dot(vec3(_745, _748, _751), vec3(_3129, _3130, _3131));
                        float _3137 = 1.0 - (_3125 * _3082.w);
                        float _4494 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3139 = sqrt(_3125) * _3101.w;
                        float _3142 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                        float _3143 = _3142 * _3142;
                        float _3146 = ((1.0 - _3143) * _3132) + _3143;
                        float _3149 = _3139 * _3139;
                        float _3152 = ((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3138) / ((_3149 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _2597;
                        float _3157 = (-0.0) - _2598;
                        float _3158 = (-0.0) - _2599;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3173 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _943;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3163 + _3129;
                        float _3185 = _3164 + _3130;
                        float _3186 = _3165 + _3131;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_745, _748, _751), vec3(_3163, _3164, _3165));
                        float _4510 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3198 = dot(vec3(_745, _748, _751), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4521 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3142 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3132) + _3207;
                        float _4532 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4543 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3205 * _3205) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125))) * _3138;
                        _2991 = (_3152 * _3101.x) + _3059;
                        _2992 = (_3152 * _3101.y) + _3060;
                        _2993 = (_3152 * _3101.z) + _3061;
                        _2988 = (_3233 * _3118.x) + _3056;
                        _2989 = (_3233 * _3118.y) + _3057;
                        _2990 = (_3233 * _3118.z) + _3058;
                        if (_3063 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _3063;
                        }
                    }
                    frontier_phi_63_pred = _2993;
                    frontier_phi_63_pred_1 = _2992;
                    frontier_phi_63_pred_2 = _2991;
                    frontier_phi_63_pred_3 = _2990;
                    frontier_phi_63_pred_4 = _2989;
                    frontier_phi_63_pred_5 = _2988;
                }
                _2790 = frontier_phi_63_pred;
                _2788 = frontier_phi_63_pred_1;
                _2786 = frontier_phi_63_pred_2;
                _2784 = frontier_phi_63_pred_3;
                _2782 = frontier_phi_63_pred_4;
                _2780 = frontier_phi_63_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2780;
                    _2933 = _2782;
                    _2934 = _2784;
                    _2935 = _2786;
                    _2936 = _2788;
                    _2937 = _2790;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2796) & _2643) == 0u)
        {
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
            float _2926 = _2925 * _2597;
            float _2927 = _2925 * _2598;
            float _2928 = _2925 * _2599;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3039 = _2779;
                float _3040 = _2781;
                float _3041 = _2783;
                float _3042 = _2785;
                float _3043 = _2787;
                float _3044 = _2789;
                uint _3045 = _2796;
                uint _3054;
                bool _3055;
                for (;;)
                {
                    _3054 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                    _3055 = _3054 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3055)
                    {
                        frontier_phi_69_pred = _3044;
                        frontier_phi_69_pred_1 = _3043;
                        frontier_phi_69_pred_2 = _3042;
                        frontier_phi_69_pred_3 = _3041;
                        frontier_phi_69_pred_4 = _3040;
                        frontier_phi_69_pred_5 = _3039;
                    }
                    else
                    {
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        uint _3257 = _3054;
                        uint _3258;
                        vec4 _3283;
                        float _3284;
                        vec4 _3299;
                        vec3 _3311;
                        vec4 _3326;
                        vec4 _3342;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3268 = ((_3045 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3257));
                            _3258 = (_3257 + 4294967295u) & _3257;
                            uint _3270 = _3268 * 40u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3284 = _3283.w;
                            uint _3286 = (_3268 * 40u) + 4u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3268 * 40u) + 8u;
                            _3311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x));
                            uint _3313 = (_3268 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3329 = (_3268 * 40u) + 20u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3345 = (_3268 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3268 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2599, _3377.z, fma(_2598, _3377.y, _3377.x * _2597)) + _3377.w;
                            _3390 = !((fma(_2599, _3358.z, fma(_2598, _3358.y, _3358.x * _2597)) + _3358.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3283.x - _2597;
                                float _3418 = _3283.y - _2598;
                                float _3419 = _3283.z - _2599;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3284 * _3284));
                                float _4554 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3435 = sqrt(_3420) * _3299.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_745, _748, _751))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2599, _3326.z, fma(_2598, _3326.y, _3326.x * _2597)) + _3326.w) / _3389;
                                float _3449 = (fma(_2599, _3342.z, fma(_2598, _3342.y, _3342.x * _2597)) + _3342.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4570 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _943;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2926;
                                float _3479 = _3425 - _2927;
                                float _3480 = _3426 - _2928;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4581 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3492 = dot(vec3(_745, _748, _751), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4592 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_745, _748, _751), vec3(_3424, _3425, _3426))) + _3501;
                                float _4603 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4614 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3455 * _3299.z;
                                frontier_phi_75_pred_1 = _3455 * _3299.y;
                                frontier_phi_75_pred_2 = _3455 * _3299.x;
                                frontier_phi_75_pred_3 = _3529 * _3311.z;
                                frontier_phi_75_pred_4 = _3529 * _3311.y;
                                frontier_phi_75_pred_5 = _3529 * _3311.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3538 = frontier_phi_75_pred;
                            _3537 = frontier_phi_75_pred_1;
                            _3536 = frontier_phi_75_pred_2;
                            _3535 = frontier_phi_75_pred_3;
                            _3534 = frontier_phi_75_pred_4;
                            _3533 = frontier_phi_75_pred_5;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            if (_3258 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3258;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3243;
                        frontier_phi_69_pred_1 = _3242;
                        frontier_phi_69_pred_2 = _3241;
                        frontier_phi_69_pred_3 = _3240;
                        frontier_phi_69_pred_4 = _3239;
                        frontier_phi_69_pred_5 = _3238;
                    }
                    _2911 = frontier_phi_69_pred;
                    _2909 = frontier_phi_69_pred_1;
                    _2907 = frontier_phi_69_pred_2;
                    _2905 = frontier_phi_69_pred_3;
                    _2903 = frontier_phi_69_pred_4;
                    _2901 = frontier_phi_69_pred_5;
                    uint _3046 = _3045 + 1u;
                    if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3039 = _2901;
                        _3040 = _2903;
                        _3041 = _2905;
                        _3042 = _2907;
                        _3043 = _2909;
                        _3044 = _2911;
                        _3045 = _3046;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2911;
                frontier_phi_57_58_ladder_1 = _2909;
                frontier_phi_57_58_ladder_2 = _2907;
                frontier_phi_57_58_ladder_3 = _2905;
                frontier_phi_57_58_ladder_4 = _2903;
                frontier_phi_57_58_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_57_58_ladder = _2789;
                frontier_phi_57_58_ladder_1 = _2787;
                frontier_phi_57_58_ladder_2 = _2785;
                frontier_phi_57_58_ladder_3 = _2783;
                frontier_phi_57_58_ladder_4 = _2781;
                frontier_phi_57_58_ladder_5 = _2779;
            }
            _2900 = frontier_phi_57_58_ladder_5;
            _2902 = frontier_phi_57_58_ladder_4;
            _2904 = frontier_phi_57_58_ladder_3;
            _2906 = frontier_phi_57_58_ladder_2;
            _2908 = frontier_phi_57_58_ladder_1;
            _2910 = frontier_phi_57_58_ladder;
        }
        float _2915 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2655 = (_2915 * _2906) + _2092;
        _2657 = (_2915 * _2908) + _2094;
        _2659 = (_2915 * _2910) + _2096;
        _2661 = ((_2900 * _919) * _2915) + _2437;
        _2663 = ((_2902 * _920) * _2915) + _2439;
        _2665 = ((_2904 * _921) * _2915) + _2441;
    }
    else
    {
        _2655 = _2092;
        _2657 = _2094;
        _2659 = _2096;
        _2661 = _2437;
        _2663 = _2439;
        _2665 = _2441;
    }
    uint _2671 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _2677 = cbInstanceData._m0[_2671].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _600) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _502) * _515.x) * _629)) + (((_658 - (_658 * _566)) + (cbMatDynParam._m0[11u].x * _689)) * cbMatDynParam._m0[9u].x));
    float _2678 = cbInstanceData._m0[_2671].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _600) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _502) * _515.y) * _629)) + (((_660 - (_660 * _566)) + (cbMatDynParam._m0[11u].y * _689)) * cbMatDynParam._m0[9u].y));
    float _2679 = cbInstanceData._m0[_2671].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _600) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _502) * _515.z) * _629)) + (((_662 - (_662 * _566)) + (cbMatDynParam._m0[11u].z * _689)) * cbMatDynParam._m0[9u].z));
    float _4630 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4641 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4652 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4663 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _2697 = (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2655 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _933))) + ((_2661 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + _2677;
    float _2699 = (_2678 + ((_2663 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2657 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _933)));
    float _2701 = (_2679 + ((_2665 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1730)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2659 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _933)));
    float _2719 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _629) + cbMatDynParam._m0[12u].y;
    float _2724 = cbInstanceData._m0[_824 + 6u].w * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)));
    float _2729 = _721 / cbSceneParam._m0[86u].x;
    float _2730 = _722 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2805 = _2804 / _715;
        float _2816 = _2805 * _289;
        float _2817 = _290 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2819 = _2805 * _291;
        float _2821 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2822 = _2821 + cbSceneParam._m0[79u].w;
        float _2823 = cbSceneParam._m0[79u].w - _2817;
        float _2829 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2819 * _2819));
        float _2832 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2829;
        float _2837 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2839 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3001;
        if (abs((_2818 - _2821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3001 = ((((_2822 > 0.0) ? exp2(_2837 * _2822) : (2.0 - exp2(_2839 * _2822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2832;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : max(_2822, _2823));
            float _2963 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : min(_2822, _2823));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3001 = ((abs(_2829 / _2818) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2837 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2837 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2839 * _2972) - exp2(_2839 * _2973)) * _2961))) + (_2832 * cbSceneParam._m0[80u].z);
        }
        vec4 _3003 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3012 = exp2((_3001 * (-1.44269502162933349609375)) * (1.0 - _3003.w));
        float _3013 = log2(_3012);
        float _3029 = log2(_2749);
        _2841 = (exp2(_3029 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].x)) * _3003.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2843 = (exp2(_3029 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].y)) * _3003.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2845 = (exp2(_3029 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3013 * cbSceneParam._m0[78u].z)) * _3003.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2847 = _3012 * _2749;
    }
    else
    {
        _2841 = _2746;
        _2843 = _2747;
        _2845 = _2748;
        _2847 = _2749;
    }
    float _2859 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2860 = _2859 == 3.0;
    float _2861 = log2(_2847);
    float _2865 = exp2(_2861 * cbSceneParam._m0[78u].x);
    float _2866 = exp2(_2861 * cbSceneParam._m0[78u].y);
    float _2867 = exp2(_2861 * cbSceneParam._m0[78u].z);
    float _2868 = _2865 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)));
    float _2869 = _2866 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)));
    float _2870 = _2867 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)));
    float _2879 = (_2859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2879 * (_2860 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.y = _2879 * (_2860 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.z = _2879 * (_2860 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.w = _2724;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2677) * _2719) * _2865) * _2879;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2678) * _2719) * _2866) * _2879;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2679) * _2719) * _2867) * _2879;
    SV_Target_1.w = _2724;
}


