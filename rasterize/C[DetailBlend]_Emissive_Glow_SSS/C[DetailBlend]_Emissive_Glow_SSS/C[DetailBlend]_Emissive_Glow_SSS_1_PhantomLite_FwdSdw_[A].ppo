#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _4055;
float _4056;
float _4057;
float _4058;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _323 = exp2(log2(_317 * 22.0) * 260.0);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _339 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _349 = cbMtdParam._m0[10u].x * _339.x;
    float _350 = cbMtdParam._m0[10u].y * _339.y;
    float _351 = cbMtdParam._m0[10u].z * _339.z;
    vec4 _363 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _397 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _405 = (((((cbMtdParam._m0[9u].x * _363.x) - _349) * _325) + _349) * 4.55000019073486328125) * _397.x;
    float _407 = (((((cbMtdParam._m0[9u].y * _363.y) - _350) * _325) + _350) * 4.55000019073486328125) * _397.y;
    float _409 = (((((cbMtdParam._m0[9u].z * _363.z) - _351) * _325) + _351) * 4.55000019073486328125) * _397.z;
    float _410 = _397.w * _363.w;
    vec4 _426 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _436 = (((_426.x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _325) + cbMtdParam._m0[17u].x;
    vec4 _448 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _457 = cbMtdParam._m0[14u].y + _448.z;
    vec4 _469 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _486 = (((_325 * (_317 + (-0.5))) + 0.5) * 2.0) * ((((_469.z - _457) + cbMtdParam._m0[14u].x) * _325) + _457);
    float _504 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4077 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _510 = (_505 * _505) * (3.0 - (_505 * 2.0));
    vec4 _523 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _531 = (_312.x * 2.0) + (-1.0);
    float _532 = (_312.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _4088 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _538 = sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))));
    float _551 = (cbMtdParam._m0[14u].z * (((((_469.x - _450) * _325) + _450) * 2.0) + (-1.0))) + _531;
    float _552 = (cbMtdParam._m0[14u].z * (((((_469.y - _451) * _325) + _451) * 2.0) + (-1.0))) + _532;
    float _555 = fma(_538, _241, fma(_552, _233 * TANGENT.x, (_219 * _211) * _551));
    float _558 = fma(_538, _242, fma(_552, _233 * TANGENT.y, (_219 * _212) * _551));
    float _561 = fma(_538, _243, fma(_552, _233 * TANGENT.z, (_219 * _213) * _551));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _4099 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _569 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _570 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _571 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _572 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _573 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _574 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _582 = cbMatDynParam._m0[9u].x * _571;
    float _583 = cbMatDynParam._m0[9u].y * _572;
    float _584 = cbMatDynParam._m0[9u].z * _573;
    float _591 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _592 = _591 * _297;
    float _593 = _591 * _298;
    float _594 = _591 * _299;
    float _595 = dot(vec3(_566, _567, _568), vec3(_592, _593, _594));
    float _601 = abs(exp2(log2(_595) * cbMatDynParam._m0[12u].x));
    float _602 = isnan(0.100000001490116119384765625) ? _601 : (isnan(_601) ? 0.100000001490116119384765625 : max(_601, 0.100000001490116119384765625));
    float _608 = ((isnan(0.699999988079071044921875) ? _602 : (isnan(_602) ? 0.699999988079071044921875 : min(_602, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _630 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4175 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4186 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _637 = (((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) - _634) * _608) + _634;
    float _656 = dot(vec3(_566, _567, _568), vec3(0.0, -1.0, 0.0));
    float _4197 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _666 = (_659 * _571) * cbMatDynParam._m0[11u].x;
    float _668 = (_659 * _572) * cbMatDynParam._m0[11u].y;
    float _670 = (_659 * _573) * cbMatDynParam._m0[11u].z;
    float _677 = dot(vec3(_592, _593, _594), vec3(_566, _567, _568));
    float _680 = _677 * 2.0;
    float _690 = dot(vec3((-0.0) - (_592 - (_680 * _566)), (-0.0) - (_593 - (_680 * _567)), (-0.0) - (_594 - (_680 * _568))), vec3(0.0, -1.0, 0.0));
    float _4208 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _697 = exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 4.0);
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _728 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _730 = _728.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _4219 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _4230 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) - _1035)) + _1035) < ((_730 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _744 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _746 = _744.w;
    float _765 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _768 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _771 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    vec4 _773 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _775 = _773.x;
    float _787 = (((_773.y - _570) + (_773.w * _570)) * cbMtdParam._m0[3u].x) + _570;
    float _804 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_775 * _775)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _812 = (((cbMatDynParam._m0[15u].x - _574) * cbMatDynParam._m0[15u].w) * _804) + _574;
    float _820 = ((_804 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _787)) + _787;
    uint _844 = uint(roundEven(NORMAL.w)) * 13u;
    uint _846 = _844 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * _582) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * _583) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * _584) * cbInstanceData._m0[_847].z;
    float _4241 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    vec4 _859 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _864 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _875 = (((_864.x - _812) + (_864.w * _812)) * cbMtdParam._m0[3u].x) + _812;
    float _888 = (cbMtdParam._m0[3u].x * (((_856 * _746) - _856) + _859.x)) + _856;
    float _889 = (cbMtdParam._m0[3u].x * (((_857 * _746) - _857) + _859.y)) + _857;
    float _890 = (cbMtdParam._m0[3u].x * (((_858 * _746) - _858) + _859.z)) + _858;
    vec4 _891 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _904 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_812 * (_582 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_812 * (_583 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_812 * (_584 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _891.z;
    float _908 = _904 * cbMatDynParam._m0[13u].w;
    float _918 = (_908 * (cbMatDynParam._m0[13u].x - _888)) + _888;
    float _919 = (_908 * (cbMatDynParam._m0[13u].y - _889)) + _889;
    float _920 = (_908 * (cbMatDynParam._m0[13u].z - _890)) + _890;
    float _928 = ((_904 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _875)) + _875;
    float _929 = 1.0 - _928;
    float _930 = _929 * _918;
    float _931 = _929 * _919;
    float _932 = _929 * _920;
    float _936 = (_918 + (-0.039999999105930328369140625)) * _928;
    float _937 = (_919 + (-0.039999999105930328369140625)) * _928;
    float _938 = (_920 + (-0.039999999105930328369140625)) * _928;
    float _939 = _936 + 0.039999999105930328369140625;
    float _940 = _937 + 0.039999999105930328369140625;
    float _941 = _938 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _953 = _950.x * TEXCOORD_4;
    float _954 = _595 * 2.0;
    float _958 = (_954 * _566) - _592;
    float _959 = (_954 * _567) - _593;
    float _960 = (_954 * _568) - _594;
    float _961 = abs(_677);
    float _4274 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_820);
    float _974 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _980 = (1.0 - _974) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _963;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1077 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1081 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1104 = _1009 + _566;
        float _1105 = _1013 + _567;
        float _1106 = _1017 + _568;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1073;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1077;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1081;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_566, _567, _568), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4322 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_566, _567, _568), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4355 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_566, _567, _568), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4388 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1390 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1394 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1398 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1421 = _1009 + _566;
        float _1422 = _1013 + _567;
        float _1423 = _1017 + _568;
        float _1433 = fma(_1423, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421)) - _1390;
        float _1434 = fma(_1423, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421)) - _1394;
        float _1435 = fma(_1423, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421)) - _1398;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1390 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1394 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[35u].z) + ((((((_1398 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1489 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1456.x + (-0.5));
        float _1491 = _1489 * (_1456.y + (-0.5));
        float _1492 = _1489 * (_1456.z + (-0.5));
        float _1499 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1463.x + (-0.5));
        float _1501 = _1499 * (_1463.y + (-0.5));
        float _1502 = _1499 * (_1463.z + (-0.5));
        float _1509 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1470.x + (-0.5));
        float _1511 = _1509 * (_1470.y + (-0.5));
        float _1512 = _1509 * (_1470.z + (-0.5));
        float _1519 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1477.x + (-0.5));
        float _1521 = _1519 * (_1477.y + (-0.5));
        float _1522 = _1519 * (_1477.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_566, _567, _568), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4451 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1553 + 1.0))) + _1558) * _1523;
        float _1568 = _1491 * 0.5;
        float _1569 = _1501 * 0.5;
        float _1570 = _1511 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_566, _567, _568), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4484 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1595 + 1.0))) + _1600) * _1524;
        float _1610 = _1492 * 0.5;
        float _1611 = _1502 * 0.5;
        float _1612 = _1512 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_566, _567, _568), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4517 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1637 + 1.0))) + _1642) * _1525;
        _1659 = _1492;
        _1660 = _1491;
        _1661 = _1490;
        _1662 = _1502;
        _1663 = _1501;
        _1664 = _1500;
        _1665 = _1512;
        _1666 = _1511;
        _1667 = _1510;
        _1668 = _1525;
        _1669 = _1524;
        _1670 = _1523;
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = _1347;
        _1670 = _1347;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1359)) + _1359;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1360)) + _1360;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1361)) + _1361;
    float _1706 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1683));
    float _1727 = _958 * 0.5;
    float _1728 = _959 * 0.5;
    float _1729 = _960 * 0.5;
    float _1730 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1733 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1736 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1743 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1747 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1751 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1758 = dot(vec4(cbModelParam._m0[39u]), vec4(_1727, _1728, _1729, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1727, _1728, _1729, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1854 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1857 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1885 = frontier_phi_19_17_ladder;
        }
        float _2058;
        if (_1854 > 0.0)
        {
            _2058 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2058 = frontier_phi_28_24_ladder;
        }
        float _2353;
        if (_1857 > 0.0)
        {
            _2353 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2353 = frontier_phi_40_35_ladder;
        }
        float _2355 = isnan(_2058) ? _1885 : (isnan(_1885) ? _2058 : min(_1885, _2058));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1851) + _1840;
        float _2361 = (_2356 * _1854) + _1844;
        float _2362 = (_2356 * _1857) + _1848;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_18_40_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_18_40_ladder_2;
        _1875 = frontier_phi_18_40_ladder_1;
        _1877 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1793);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1951 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1954 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _2063;
        if (_1948 > 0.0)
        {
            _2063 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2063 = frontier_phi_30_26_ladder;
        }
        float _2380;
        if (_1951 > 0.0)
        {
            _2380 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2380 = frontier_phi_42_37_ladder;
        }
        float _2718;
        if (_1954 > 0.0)
        {
            _2718 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2718 = frontier_phi_52_49_ladder;
        }
        float _2720 = isnan(_2380) ? _2063 : (isnan(_2063) ? _2380 : min(_2063, _2380));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _1948) + _1937;
        float _2726 = (_2721 * _1951) + _1941;
        float _2727 = (_2721 * _1954) + _1945;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_27_52_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_27_52_ladder_2;
        _1975 = frontier_phi_27_52_ladder_1;
        _1977 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1882);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_980 * _939) + _981) * _953) * ((cbModelParam._m0[1u].w * (_1973 - _1873)) + _1873);
    float _1992 = (((_980 * _940) + _981) * _953) * ((cbModelParam._m0[1u].w * (_1975 - _1875)) + _1875);
    float _1994 = (((_980 * _941) + _981) * _953) * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2050 = _2037 / _2049;
    float _2051 = _2041 / _2049;
    float _2052 = _2045 / _2049;
    float _2199;
    float _2200;
    float _2201;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2079 = ((uint(_2052 > cbSceneParam._m0[59u].y) + uint(_2052 > cbSceneParam._m0[59u].x)) + uint(_2052 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2080 = _2079 + 43u;
        uint _2088 = _2079 + 44u;
        uint _2096 = _2079 + 45u;
        uint _2104 = _2079 + 46u;
        float _2115 = fma(_2049, cbSceneParam._m0[_2080].w, fma(_2045, cbSceneParam._m0[_2080].z, fma(_2041, cbSceneParam._m0[_2080].y, _2037 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2049, cbSceneParam._m0[_2088].w, fma(_2045, cbSceneParam._m0[_2088].z, fma(_2041, cbSceneParam._m0[_2088].y, _2037 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2049, cbSceneParam._m0[_2104].w, fma(_2045, cbSceneParam._m0[_2104].z, fma(_2041, cbSceneParam._m0[_2104].y, _2037 * cbSceneParam._m0[_2104].x)));
        float _2132 = cbSceneParam._m0[33u].z * _2127;
        float _2134 = cbSceneParam._m0[33u].w * _2127;
        float _2137 = fma(_2049, cbSceneParam._m0[_2096].w, fma(_2045, cbSceneParam._m0[_2096].z, fma(_2041, cbSceneParam._m0[_2096].y, _2037 * cbSceneParam._m0[_2096].x))) / _2127;
        float _2185 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
        float _4643 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2192 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 + _2115) / _2127, (_2134 + _2119) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2115) / _2127, (_2119 - _2132) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2132) / _2127, (_2119 - _2134) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2134) / _2127, (_2132 + _2119) / _2127), _2137), 0.0)).x), vec4(0.25)));
        _2199 = 1.0 - (_2192 * cbSceneParam._m0[34u].x);
        _2200 = 1.0 - (_2192 * cbSceneParam._m0[34u].y);
        _2201 = 1.0 - (_2192 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2199 = 1.0;
        _2200 = 1.0;
        _2201 = 1.0;
    }
    float _2265;
    float _2267;
    float _2269;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2253 = fma(_2049, cbSceneParam._m0[63u].w, fma(_2045, cbSceneParam._m0[63u].z, fma(_2041, cbSceneParam._m0[63u].y, _2037 * cbSceneParam._m0[63u].x)));
        float _2254 = fma(_2049, cbSceneParam._m0[60u].w, fma(_2045, cbSceneParam._m0[60u].z, fma(_2041, cbSceneParam._m0[60u].y, _2037 * cbSceneParam._m0[60u].x))) / _2253;
        float _2255 = fma(_2049, cbSceneParam._m0[61u].w, fma(_2045, cbSceneParam._m0[61u].z, fma(_2041, cbSceneParam._m0[61u].y, _2037 * cbSceneParam._m0[61u].x))) / _2253;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2254 >= cbSceneParam._m0[64u].x) && (_2255 >= cbSceneParam._m0[64u].y)) && (_2254 <= cbSceneParam._m0[64u].z)) && (_2255 <= cbSceneParam._m0[64u].w))
        {
            float _2393 = fma(_2049, cbSceneParam._m0[62u].w, fma(_2045, cbSceneParam._m0[62u].z, fma(_2041, cbSceneParam._m0[62u].y, _2037 * cbSceneParam._m0[62u].x))) / _2253;
            float _2397 = isnan(cbSceneParam._m0[41u].w) ? _2393 : (isnan(_2393) ? cbSceneParam._m0[41u].w : max(_2393, cbSceneParam._m0[41u].w));
            float _2440 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
            float _4659 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
            float _2447 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2254, cbSceneParam._m0[33u].w + _2255), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2254, _2255 - cbSceneParam._m0[33u].z), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].z, _2255 - cbSceneParam._m0[33u].w), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2254 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2255), _2397), 0.0)).x), vec4(0.25)));
            float _2451 = 1.0 - (_2447 * cbSceneParam._m0[34u].x);
            float _2452 = 1.0 - (_2447 * cbSceneParam._m0[34u].y);
            float _2453 = 1.0 - (_2447 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_39_38_ladder_1 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_39_38_ladder_2 = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
        }
        else
        {
            frontier_phi_39_38_ladder = _2200;
            frontier_phi_39_38_ladder_1 = _2199;
            frontier_phi_39_38_ladder_2 = _2201;
        }
        _2265 = frontier_phi_39_38_ladder_1;
        _2267 = frontier_phi_39_38_ladder;
        _2269 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2265 = _2199;
        _2267 = _2200;
        _2269 = _2201;
    }
    uvec4 _2274 = floatBitsToUint(cbInstanceData._m0[_844 + 5u]);
    uint _2276 = _2274.x * 14u;
    uint _2277 = _2276 + 13u;
    float _2284 = _953 + (-1.0);
    float _2289 = (cbLight._m0[_2277].x * _2284) + 1.0;
    float _2290 = (cbLight._m0[_2277].y * _2284) + 1.0;
    float _2291 = (cbLight._m0[_2277].z * _2284) + 1.0;
    float _2292 = (cbLight._m0[_2277].w * _2284) + 1.0;
    uint _2293 = _2276 + 5u;
    float _2299 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2303 = _2276 + 4u;
    float _2312 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2316 = _2276 | 1u;
    float _2327 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_566, _567, _568));
    float _2330 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_566, _567, _568));
    float _4695 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _4706 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2335 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * 0.3183098733425140380859375;
    float _2337 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2344 = ((cbLight._m0[_2293].x * _2299) * _2337) + (((cbLight._m0[_2303].x * _2265) * _2312) * _2335);
    float _2345 = ((_2299 * cbLight._m0[_2293].y) * _2337) + (((cbLight._m0[_2303].y * _2267) * _2312) * _2335);
    float _2346 = ((_2299 * cbLight._m0[_2293].z) * _2337) + (((cbLight._m0[_2303].z * _2269) * _2312) * _2335);
    uvec4 _2350 = floatBitsToUint(cbLight._m0[_2276 + 12u]);
    bool _2352 = _2350.x == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2352)
    {
        _2454 = _2344;
        _2456 = _2345;
        _2458 = _2346;
    }
    else
    {
        uint _2462 = _2276 + 6u;
        float _2478 = (dot(vec3(cbLight._m0[_2276 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4717 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2481 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2454 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2344;
        _2456 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2345;
        _2458 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2346;
    }
    bool _2461 = _2350.y == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2461)
    {
        _2516 = _2454;
        _2518 = _2456;
        _2520 = _2458;
    }
    else
    {
        uint _2689 = _2276 + 7u;
        float _2705 = (dot(vec3(cbLight._m0[_2276 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2706 = _2705 * _2705;
        float _4733 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2707 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2708 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2516 = (((cbLight._m0[_2689].x * 0.3183098733425140380859375) * _2707) * _2708) + _2454;
        _2518 = (((cbLight._m0[_2689].y * 0.3183098733425140380859375) * _2707) * _2708) + _2456;
        _2520 = (((cbLight._m0[_2689].z * 0.3183098733425140380859375) * _2707) * _2708) + _2458;
    }
    uint _2523 = _2276 + 8u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _820) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2276].x + _592;
    float _2539 = cbLight._m0[_2276].y + _593;
    float _2540 = cbLight._m0[_2276].z + _594;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2276].xyz));
    float _4749 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _4760 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _2552 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2553 = dot(vec3(_566, _567, _568), vec3(_2545, _2546, _2547));
    float _4771 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2545, _2546, _2547));
    float _4782 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2537 * _2537;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
    float _2574 = 0.959999978542327880859375 - _936;
    float _2576 = 0.959999978542327880859375 - _937;
    float _2577 = 0.959999978542327880859375 - _938;
    float _2584 = 1.0 - _2537;
    float _2595 = (0.5 / (((_2552 * ((_2551 * _2584) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2584) + _2537) * _2551))) * _2551;
    float _4793 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    uint _2611 = _2276 + 9u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _820) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2316].x + _592;
    float _2625 = cbLight._m0[_2316].y + _593;
    float _2626 = cbLight._m0[_2316].z + _594;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2316].xyz));
    float _4804 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
    float _2638 = dot(vec3(_566, _567, _568), vec3(_2631, _2632, _2633));
    float _4815 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2642 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2631, _2632, _2633));
    float _4826 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = _2623 * _2623;
    float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
    float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
    float _2664 = 1.0 - _2623;
    float _2674 = (0.5 / (((_2552 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2664) + _2623) * _2637))) * _2637;
    float _4837 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
    float _2686 = (((((_2657 * _2574) + _939) * cbLight._m0[_2611].x) * _2676) * _2299) + ((((cbLight._m0[_2523].x * _2265) * ((_2573 * _2574) + _939)) * _2597) * _2312);
    float _2687 = (((((_2657 * _2576) + _940) * cbLight._m0[_2611].y) * _2676) * _2299) + ((((cbLight._m0[_2523].y * _2267) * ((_2573 * _2576) + _940)) * _2597) * _2312);
    float _2688 = (((((_2657 * _2577) + _941) * cbLight._m0[_2611].z) * _2676) * _2299) + ((((cbLight._m0[_2523].z * _2269) * ((_2573 * _2577) + _941)) * _2597) * _2312);
    float _2744;
    float _2746;
    float _2748;
    if (_2352)
    {
        _2744 = _2686;
        _2746 = _2687;
        _2748 = _2688;
    }
    else
    {
        uint _2750 = _2276 + 2u;
        uint _2754 = _2276 + 10u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _820) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _592;
        float _2771 = cbLight._m0[_2750].y + _593;
        float _2772 = cbLight._m0[_2750].z + _594;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2750].xyz));
        float _4848 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2784 = dot(vec3(_566, _567, _568), vec3(_2777, _2778, _2779));
        float _4859 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4870 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
        float _2810 = 1.0 - _2769;
        float _2820 = (0.5 / (((_2552 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2810) + _2769) * _2783))) * _2783;
        float _4881 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2744 = (((((_2803 * _2574) + _939) * cbLight._m0[_2754].x) * _2822) * _2823) + _2686;
        _2746 = (((((_2803 * _2576) + _940) * cbLight._m0[_2754].y) * _2822) * _2823) + _2687;
        _2748 = (((((_2803 * _2577) + _941) * cbLight._m0[_2754].z) * _2822) * _2823) + _2688;
    }
    float _2854;
    float _2856;
    float _2858;
    if (_2461)
    {
        _2854 = _2744;
        _2856 = _2746;
        _2858 = _2748;
    }
    else
    {
        uint _2865 = _2276 + 3u;
        uint _2869 = _2276 + 11u;
        float _2883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2865].w)) * _820) * 0.949999988079071044921875);
        float _2884 = _2883 * _2883;
        float _2885 = cbLight._m0[_2865].x + _592;
        float _2886 = cbLight._m0[_2865].y + _593;
        float _2887 = cbLight._m0[_2865].z + _594;
        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
        float _2892 = _2891 * _2885;
        float _2893 = _2891 * _2886;
        float _2894 = _2891 * _2887;
        float _2895 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2865].xyz));
        float _4897 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _2899 = dot(vec3(_566, _567, _568), vec3(_2892, _2893, _2894));
        float _4908 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2903 = dot(vec3(cbLight._m0[_2865].xyz), vec3(_2892, _2893, _2894));
        float _4919 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2907 = _2884 * _2884;
        float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
        float _2918 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
        float _2925 = 1.0 - _2884;
        float _2935 = (0.5 / (((_2552 * ((_2898 * _2925) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2925) + _2884) * _2898))) * _2898;
        float _4930 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2937 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
        float _2938 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2854 = (((((_2918 * _2574) + _939) * cbLight._m0[_2869].x) * _2937) * _2938) + _2744;
        _2856 = (((((_2918 * _2576) + _940) * cbLight._m0[_2869].y) * _2937) * _2938) + _2746;
        _2858 = (((((_2918 * _2577) + _941) * cbLight._m0[_2869].z) * _2937) * _2938) + _2748;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2274.y == 0u)
    {
        uvec4 _2959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2960 = _2959.x;
        uint _2971 = uint((float(_2959.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2960))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2960)));
        float _2981 = (log2(_2052 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2982 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        uint _2985 = uint(isnan(14.0) ? _2982 : (isnan(_2982) ? 14.0 : min(_2982, 14.0)));
        uvec4 _2990 = texelFetch(g_lightClusterGridBuffer, int(((_2985 << 2u) + (_2971 << 6u)) >> 2u));
        uint _2991 = _2990.x;
        uint _2992 = _2959.z;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((((1u << ((_2992 >> 4u) & 15u)) + 4294967295u) & _2991) == 0u) || ((_2992 & 240u) == 0u))
        {
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
        }
        else
        {
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            uint _3273 = 0u;
            uint _3282;
            bool _3283;
            for (;;)
            {
                _3282 = texelFetch(g_lightClassification, int((((_2985 << 5u) + (_2971 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                _3283 = _3282 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3283)
                {
                    frontier_phi_73_pred = _3272;
                    frontier_phi_73_pred_1 = _3271;
                    frontier_phi_73_pred_2 = _3270;
                    frontier_phi_73_pred_3 = _3269;
                    frontier_phi_73_pred_4 = _3268;
                    frontier_phi_73_pred_5 = _3267;
                }
                else
                {
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    uint _3418;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3282;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    for (;;)
                    {
                        uint _3422 = uint(findLSB(_3418)) + (_3273 << 5u);
                        uint _3419 = (_3418 + 4294967295u) & _3418;
                        uint _3424 = _3422 * 48u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3444 = (_3422 * 48u) + 4u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 3u)).x));
                        uint _3463 = (_3422 * 48u) + 8u;
                        vec3 _3474 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x));
                        float _3478 = _3438.x - _2050;
                        float _3479 = _3438.y - _2051;
                        float _3480 = _3438.z - _2052;
                        float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                        float _3484 = inversesqrt(_3481);
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3488 = dot(vec3(_765, _768, _771), vec3(_3485, _3486, _3487));
                        float _3493 = 1.0 - (_3481 * _3438.w);
                        float _4956 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3495 = sqrt(_3481) * _3457.w;
                        float _3498 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3488) + _3499;
                        float _3505 = _3495 * _3495;
                        float _3508 = ((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3494) / ((_3505 * 0.699999988079071044921875) + 1.0);
                        float _3512 = (-0.0) - _2050;
                        float _3513 = (-0.0) - _2051;
                        float _3514 = (-0.0) - _2052;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3519 = _3518 * _3512;
                        float _3520 = _3518 * _3513;
                        float _3521 = _3518 * _3514;
                        float _3528 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                        float _3529 = 1.0 - _963;
                        float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                        float _3537 = _3536 * _3536;
                        float _3538 = _3537 * _3537;
                        float _3539 = _3519 + _3485;
                        float _3540 = _3520 + _3486;
                        float _3541 = _3521 + _3487;
                        float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                        float _3549 = dot(vec3(_765, _768, _771), vec3(_3519, _3520, _3521));
                        float _4972 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3553 = dot(vec3(_765, _768, _771), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                        float _4983 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3556 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                        float _3561 = _3498 * _3537;
                        float _3562 = _3561 * _3561;
                        float _3565 = ((1.0 - _3562) * _3488) + _3562;
                        float _4994 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3566 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3567 = 1.0 - _3537;
                        float _3577 = (0.5 / (((_3566 * ((_3552 * _3567) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3537) * _3552))) * _3566;
                        float _5005 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3588 = (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3560 * _3560) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125))) * _3494;
                        _3342 = (_3508 * _3457.x) + _3415;
                        _3343 = (_3508 * _3457.y) + _3416;
                        _3344 = (_3508 * _3457.z) + _3417;
                        _3339 = (_3588 * _3474.x) + _3412;
                        _3340 = (_3588 * _3474.y) + _3413;
                        _3341 = (_3588 * _3474.z) + _3414;
                        if (_3419 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3419;
                        }
                    }
                    frontier_phi_73_pred = _3344;
                    frontier_phi_73_pred_1 = _3343;
                    frontier_phi_73_pred_2 = _3342;
                    frontier_phi_73_pred_3 = _3341;
                    frontier_phi_73_pred_4 = _3340;
                    frontier_phi_73_pred_5 = _3339;
                }
                _3117 = frontier_phi_73_pred;
                _3115 = frontier_phi_73_pred_1;
                _3113 = frontier_phi_73_pred_2;
                _3111 = frontier_phi_73_pred_3;
                _3109 = frontier_phi_73_pred_4;
                _3107 = frontier_phi_73_pred_5;
                uint _3274 = _3273 + 1u;
                if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3267 = _3107;
                    _3268 = _3109;
                    _3269 = _3111;
                    _3270 = _3113;
                    _3271 = _3115;
                    _3272 = _3117;
                    _3273 = _3274;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
        }
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.z;
        uint _3123 = (_3121 >> 8u) & 15u;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        if (((4294967295u << _3123) & _2991) == 0u)
        {
            _3235 = _3106;
            _3237 = _3108;
            _3239 = _3110;
            _3241 = _3112;
            _3243 = _3114;
            _3245 = _3116;
        }
        else
        {
            float _3260 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
            float _3261 = _3260 * _2050;
            float _3262 = _3260 * _2051;
            float _3263 = _3260 * _2052;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3123 < ((_3121 >> 12u) & 15u))
            {
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3395 = _3106;
                float _3396 = _3108;
                float _3397 = _3110;
                float _3398 = _3112;
                float _3399 = _3114;
                float _3400 = _3116;
                uint _3401 = _3123;
                uint _3410;
                bool _3411;
                for (;;)
                {
                    _3410 = texelFetch(g_lightClassification, int((((_2985 << 5u) + (_2971 << 9u)) + (_3401 << 2u)) >> 2u)).x;
                    _3411 = _3410 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3411)
                    {
                        frontier_phi_84_pred = _3399;
                        frontier_phi_84_pred_1 = _3398;
                        frontier_phi_84_pred_2 = _3397;
                        frontier_phi_84_pred_3 = _3396;
                        frontier_phi_84_pred_4 = _3395;
                        frontier_phi_84_pred_5 = _3400;
                    }
                    else
                    {
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3615 = _3395;
                        float _3616 = _3396;
                        float _3617 = _3397;
                        float _3618 = _3398;
                        float _3619 = _3399;
                        float _3620 = _3400;
                        uint _3621 = _3410;
                        uint _3622;
                        vec4 _3647;
                        float _3648;
                        vec4 _3663;
                        vec3 _3675;
                        vec4 _3690;
                        vec4 _3706;
                        float _3753;
                        bool _3754;
                        for (;;)
                        {
                            uint _3632 = ((_3401 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3621));
                            _3622 = (_3621 + 4294967295u) & _3621;
                            uint _3634 = _3632 * 40u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3648 = _3647.w;
                            uint _3650 = (_3632 * 40u) + 4u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3632 * 40u) + 8u;
                            _3675 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x));
                            uint _3677 = (_3632 * 40u) + 16u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3693 = (_3632 * 40u) + 20u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3709 = (_3632 * 40u) + 24u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3728 = (_3632 * 40u) + 28u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            _3753 = fma(_2052, _3741.z, fma(_2051, _3741.y, _3741.x * _2050)) + _3741.w;
                            _3754 = !((fma(_2052, _3722.z, fma(_2051, _3722.y, _3722.x * _2050)) + _3722.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3754)
                            {
                                float _3781 = _3647.x - _2050;
                                float _3782 = _3647.y - _2051;
                                float _3783 = _3647.z - _2052;
                                float _3784 = dot(vec3(_3781, _3782, _3783), vec3(_3781, _3782, _3783));
                                float _3787 = inversesqrt(_3784);
                                float _3788 = _3787 * _3781;
                                float _3789 = _3787 * _3782;
                                float _3790 = _3787 * _3783;
                                float _3794 = 1.0 - (_3784 / (_3648 * _3648));
                                float _5016 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3799 = sqrt(_3784) * _3663.w;
                                float _3801 = 1.39999997615814208984375 / (_3799 + 1.39999997615814208984375);
                                float _3802 = _3801 * _3801;
                                float _3805 = ((1.0 - _3802) * dot(vec3(_3788, _3789, _3790), vec3(_765, _768, _771))) + _3802;
                                float _3808 = _3799 * _3799;
                                float _3812 = (fma(_2052, _3690.z, fma(_2051, _3690.y, _3690.x * _2050)) + _3690.w) / _3753;
                                float _3813 = (fma(_2052, _3706.z, fma(_2051, _3706.y, _3706.x * _2050)) + _3706.w) / _3753;
                                float _3817 = 1.0 - dot(vec2(_3812, _3813), vec2(_3812, _3813));
                                float _5032 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3819 = _3818 * (((isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0))) * _3795) / ((_3808 * 0.699999988079071044921875) + 1.0));
                                float _3831 = exp2(log2(1.0 / ((_3808 * 3.5) + 5.0)) * 0.25);
                                float _3832 = 1.0 - _963;
                                float _3839 = sqrt(1.0 - ((1.0 - (_3832 * _3832)) * (1.0 - (_3831 * _3831))));
                                float _3840 = _3839 * _3839;
                                float _3841 = _3840 * _3840;
                                float _3842 = _3788 - _3261;
                                float _3843 = _3789 - _3262;
                                float _3844 = _3790 - _3263;
                                float _3848 = inversesqrt(dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844)));
                                float _3852 = dot(vec3(_765, _768, _771), vec3((-0.0) - _3261, (-0.0) - _3262, (-0.0) - _3263));
                                float _5043 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3856 = dot(vec3(_765, _768, _771), vec3(_3848 * _3842, _3848 * _3843, _3848 * _3844));
                                float _5054 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3859 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3863 = ((_3859 * _3859) * (_3841 + (-1.0))) + 1.0;
                                float _3864 = _3801 * _3840;
                                float _3865 = _3864 * _3864;
                                float _3871 = ((1.0 - _3865) * dot(vec3(_765, _768, _771), vec3(_3788, _3789, _3790))) + _3865;
                                float _5065 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3872 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3873 = 1.0 - _3840;
                                float _3883 = (0.5 / (((_3872 * ((_3855 * _3873) + _3840)) + 9.9999999392252902907785028219223e-09) + (((_3872 * _3873) + _3840) * _3855))) * _3872;
                                float _5076 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3893 = (_3818 * _3795) * (((_3841 * 3.1415927410125732421875) * (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) / ((_3863 * _3863) * ((_3808 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3819 * _3663.y;
                                frontier_phi_90_pred_1 = _3819 * _3663.x;
                                frontier_phi_90_pred_2 = _3893 * _3675.z;
                                frontier_phi_90_pred_3 = _3893 * _3675.y;
                                frontier_phi_90_pred_4 = _3893 * _3675.x;
                                frontier_phi_90_pred_5 = _3819 * _3663.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3901 = frontier_phi_90_pred;
                            _3900 = frontier_phi_90_pred_1;
                            _3899 = frontier_phi_90_pred_2;
                            _3898 = frontier_phi_90_pred_3;
                            _3897 = frontier_phi_90_pred_4;
                            _3902 = frontier_phi_90_pred_5;
                            _3605 = _3900 + _3618;
                            _3606 = _3901 + _3619;
                            _3607 = _3902 + _3620;
                            _3602 = _3897 + _3615;
                            _3603 = _3898 + _3616;
                            _3604 = _3899 + _3617;
                            if (_3622 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3622;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3606;
                        frontier_phi_84_pred_1 = _3605;
                        frontier_phi_84_pred_2 = _3604;
                        frontier_phi_84_pred_3 = _3603;
                        frontier_phi_84_pred_4 = _3602;
                        frontier_phi_84_pred_5 = _3607;
                    }
                    _3244 = frontier_phi_84_pred;
                    _3242 = frontier_phi_84_pred_1;
                    _3240 = frontier_phi_84_pred_2;
                    _3238 = frontier_phi_84_pred_3;
                    _3236 = frontier_phi_84_pred_4;
                    _3246 = frontier_phi_84_pred_5;
                    uint _3402 = _3401 + 1u;
                    if (_3402 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3395 = _3236;
                        _3396 = _3238;
                        _3397 = _3240;
                        _3398 = _3242;
                        _3399 = _3244;
                        _3400 = _3246;
                        _3401 = _3402;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3246;
                frontier_phi_65_66_ladder_1 = _3242;
                frontier_phi_65_66_ladder_2 = _3244;
                frontier_phi_65_66_ladder_3 = _3238;
                frontier_phi_65_66_ladder_4 = _3236;
                frontier_phi_65_66_ladder_5 = _3240;
            }
            else
            {
                frontier_phi_65_66_ladder = _3116;
                frontier_phi_65_66_ladder_1 = _3112;
                frontier_phi_65_66_ladder_2 = _3114;
                frontier_phi_65_66_ladder_3 = _3108;
                frontier_phi_65_66_ladder_4 = _3106;
                frontier_phi_65_66_ladder_5 = _3110;
            }
            _3235 = frontier_phi_65_66_ladder_4;
            _3237 = frontier_phi_65_66_ladder_3;
            _3239 = frontier_phi_65_66_ladder_5;
            _3241 = frontier_phi_65_66_ladder_1;
            _3243 = frontier_phi_65_66_ladder_2;
            _3245 = frontier_phi_65_66_ladder;
        }
        float _3250 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _3003 = (_3250 * _3241) + _2516;
        _3005 = (_3250 * _3243) + _2518;
        _3007 = (_3250 * _3245) + _2520;
        _3009 = ((_3235 * _939) * _3250) + _2854;
        _3011 = ((_3237 * _940) * _3250) + _2856;
        _3013 = ((_3239 * _941) * _3250) + _2858;
    }
    else
    {
        _3003 = _2516;
        _3005 = _2518;
        _3007 = _2520;
        _3009 = _2854;
        _3011 = _2856;
        _3013 = _2858;
    }
    uint _3019 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _3025 = cbInstanceData._m0[_3019].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _608) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _510) * _523.x) * _637)) + (((_666 - (_666 * _574)) + (cbMatDynParam._m0[11u].x * _697)) * cbMatDynParam._m0[9u].x));
    float _3026 = cbInstanceData._m0[_3019].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _608) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _510) * _523.y) * _637)) + (((_668 - (_668 * _574)) + (cbMatDynParam._m0[11u].y * _697)) * cbMatDynParam._m0[9u].y));
    float _3027 = cbInstanceData._m0[_3019].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _608) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _510) * _523.z) * _637)) + (((_670 - (_670 * _574)) + (cbMatDynParam._m0[11u].z * _697)) * cbMatDynParam._m0[9u].z));
    float _5092 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _5103 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _5114 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _5125 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3045 = (((isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3003 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _953))) + ((_3009 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1782)) * cbPerFrame._m0[3u].x)) + _3025;
    float _3047 = (_3026 + ((_3011 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1782)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3005 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _953)));
    float _3049 = (_3027 + ((_3013 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1782)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3007 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _953)));
    float _3050 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
    float _3051 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
    float _3052 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
    float _3058 = cbMtdParam._m0[2u].x * _3025;
    float _3059 = cbMtdParam._m0[2u].y * _3026;
    float _3060 = cbMtdParam._m0[2u].z * _3027;
    float _3067 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _637) + cbMatDynParam._m0[12u].y;
    float _3072 = cbInstanceData._m0[_844 + 6u].w * (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0)));
    float _3077 = _741 / cbSceneParam._m0[86u].x;
    float _3078 = _742 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _3131 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _3132 = _3131 / _723;
        float _3143 = _3132 * _297;
        float _3144 = _298 * _3132;
        float _3145 = (-0.0) - _3144;
        float _3146 = _3132 * _299;
        float _3148 = (cbSceneParam._m0[77u].w * _3145) / _3131;
        float _3149 = _3148 + cbSceneParam._m0[79u].w;
        float _3150 = cbSceneParam._m0[79u].w - _3144;
        float _3156 = sqrt(((_3143 * _3143) + (_3144 * _3144)) + (_3146 * _3146));
        float _3159 = (1.0 - (cbSceneParam._m0[77u].w / _3131)) * _3156;
        float _3164 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3166 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3352;
        if (abs((_3145 - _3148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3352 = ((((_3149 > 0.0) ? exp2(_3164 * _3149) : (2.0 - exp2(_3166 * _3149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3159;
        }
        else
        {
            float _3296 = 1.0 / cbSceneParam._m0[80u].x;
            float _3297 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : max(_3149, _3150));
            float _3298 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : min(_3149, _3150));
            float _3307 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : min(_3297, 0.0));
            float _3308 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : min(_3298, 0.0));
            _3352 = ((abs(_3156 / _3145) * cbSceneParam._m0[80u].y) * ((((_3307 - _3308) * 2.0) - ((exp2(_3164 * (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0)))) - exp2(_3164 * (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))))) * _3296)) - ((exp2(_3166 * _3307) - exp2(_3166 * _3308)) * _3296))) + (_3159 * cbSceneParam._m0[80u].z);
        }
        vec4 _3354 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3363 = exp2((_3352 * (-1.44269502162933349609375)) * (1.0 - _3354.w));
        float _3364 = log2(_3363);
        float _3380 = log2(_3097);
        _3168 = (exp2(_3380 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].x)) * _3354.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3170 = (exp2(_3380 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].y)) * _3354.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3172 = (exp2(_3380 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].z)) * _3354.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3174 = _3363 * _3097;
    }
    else
    {
        _3168 = _3094;
        _3170 = _3095;
        _3172 = _3096;
        _3174 = _3097;
    }
    bool _3390;
    vec4 _3184;
    vec4 _3206;
    float _3208;
    float _3212;
    float _3213;
    float _3214;
    float _3217;
    float _3220;
    float _3223;
    float _3224;
    bool _3234;
    for (;;)
    {
        _3184 = cbMatDynParam._m0[0u];
        float _3186 = roundEven(_3184.y);
        bool _3187 = _3186 == 3.0;
        float _3188 = log2(_3174);
        float _3192 = exp2(_3188 * cbSceneParam._m0[78u].x);
        float _3193 = exp2(_3188 * cbSceneParam._m0[78u].y);
        float _3194 = exp2(_3188 * cbSceneParam._m0[78u].z);
        float _3195 = _3192 * _3050;
        float _3196 = _3193 * _3051;
        float _3197 = _3194 * _3052;
        float _3204 = _730 + (-0.5);
        _3206 = cbMtdParam._m0[1u];
        _3208 = _3206.y * _3204;
        float _3211 = (_3186 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3212 = _3211 * (_3187 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3168)));
        _3213 = _3211 * (_3187 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3170)));
        _3214 = _3211 * (_3187 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3172)));
        _3217 = ((_3058 * _3067) * _3192) * _3211;
        _3220 = ((_3059 * _3067) * _3193) * _3211;
        _3223 = ((_3060 * _3067) * _3194) * _3211;
        _3224 = _3204 * 0.999000012874603271484375;
        _3234 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3234)
        {
            if ((cbInstanceData._m0[_844 + 7u].x + _3224) < 0.5)
            {
                _3390 = true;
                break;
            }
        }
        uint _3331 = _846 + uint(_3184.w);
        if ((cbInstanceData._m0[_3331].w < 1.0) && ((cbInstanceData._m0[_3331].w + _3224) < 0.5))
        {
            _3390 = true;
            break;
        }
        if ((_3208 + _410) < _3206.x)
        {
            _3390 = true;
            break;
        }
        _3390 = false;
        break;
    }
    float _3593;
    if (_3390)
    {
        discard_state = true;
        _3593 = 0.0;
    }
    else
    {
        _3593 = _3072;
    }
    SV_Target.x = _3212;
    SV_Target.y = _3213;
    SV_Target.z = _3214;
    SV_Target.w = _3593;
    SV_Target_1.x = _3217;
    SV_Target_1.y = _3220;
    SV_Target_1.z = _3223;
    SV_Target_1.w = _3072;
    discard_exit();
}


