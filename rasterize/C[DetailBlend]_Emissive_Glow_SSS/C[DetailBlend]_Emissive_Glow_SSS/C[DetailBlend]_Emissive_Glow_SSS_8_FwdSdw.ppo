#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = _256.w;
    vec4 _274 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _291 = exp2(log2(1.0 - _262) * 8.0);
    vec4 _303 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _319 = exp2(log2(_262) * 8.0);
    vec4 _332 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _357 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _366 = ((_274.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _357.x;
    float _369 = ((_274.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _357.y;
    float _372 = ((_274.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _357.z;
    float _379 = (((cbMtdParam._m0[13u].x * _303.x) - _366) * _291) + _366;
    float _380 = (((cbMtdParam._m0[13u].y * _303.y) - _369) * _291) + _369;
    float _381 = (((cbMtdParam._m0[13u].z * _303.z) - _372) * _291) + _372;
    float _388 = (((cbMtdParam._m0[11u].x * _332.x) - _379) * _319) + _379;
    float _389 = (((cbMtdParam._m0[11u].y * _332.y) - _380) * _319) + _380;
    float _390 = (((cbMtdParam._m0[11u].z * _332.z) - _381) * _319) + _381;
    float _391 = _357.w * _274.w;
    float _415 = cbMtdParam._m0[16u].x + texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _419 = ((cbMtdParam._m0[15u].z - _415) * _291) + _415;
    float _422 = ((cbMtdParam._m0[16u].w - _419) * _319) + _419;
    vec4 _435 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    vec4 _457 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _475 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _483 = (_256.z * 2.0) * (cbMtdParam._m0[14u].x + _435.z);
    float _487 = (((_457.z - _483) + cbMtdParam._m0[15u].y) * _291) + _483;
    float _491 = (((_475.z - _487) + cbMtdParam._m0[14u].w) * _319) + _487;
    float _505 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3909 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _511 = (_506 * _506) * (3.0 - (_506 * 2.0));
    vec4 _524 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _532 = (_256.x * 2.0) + (-1.0);
    float _533 = (_256.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3920 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    float _544 = ((_457.x - _437) * _291) + _437;
    float _545 = ((_457.y - _438) * _291) + _438;
    float _558 = (cbMtdParam._m0[14u].z * (((((_475.x - _544) * _319) + _544) * 2.0) + (-1.0))) + _532;
    float _559 = (cbMtdParam._m0[14u].z * (((((_475.y - _545) * _319) + _545) * 2.0) + (-1.0))) + _533;
    float _562 = fma(_539, _241, fma(_559, _233 * TANGENT.x, (_219 * _211) * _558));
    float _565 = fma(_539, _242, fma(_559, _233 * TANGENT.y, (_219 * _212) * _558));
    float _568 = fma(_539, _243, fma(_559, _233 * TANGENT.z, (_219 * _213) * _558));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3931 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _576 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _577 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _578 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _579 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _580 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _581 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _665 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _667 = _665.w;
    float _686 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _689 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _692 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    vec4 _694 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _696 = _694.x;
    float _708 = (((_694.y - _577) + (_694.w * _577)) * cbMtdParam._m0[3u].x) + _577;
    vec4 _709 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _725 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_696 * _696)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _709.z;
    float _733 = (((cbMatDynParam._m0[15u].x - _581) * cbMatDynParam._m0[15u].w) * _725) + _581;
    float _741 = ((_725 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _708)) + _708;
    uint _765 = uint(roundEven(NORMAL.w)) * 13u;
    uint _766 = _765 + 9u;
    uint _767 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * _578) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * _579) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * _580) * cbInstanceData._m0[_767].z;
    float _3997 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    vec4 _779 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _784 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _795 = (((_784.x - _733) + (_784.w * _733)) * cbMtdParam._m0[3u].x) + _733;
    float _808 = (cbMtdParam._m0[3u].x * (((_776 * _667) - _776) + _779.x)) + _776;
    float _809 = (cbMtdParam._m0[3u].x * (((_777 * _667) - _777) + _779.y)) + _777;
    float _810 = (cbMtdParam._m0[3u].x * (((_778 * _667) - _778) + _779.z)) + _778;
    vec4 _811 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _824 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_733 * (_578 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_733 * (_579 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_733 * (_580 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _811.z;
    float _828 = _824 * cbMatDynParam._m0[13u].w;
    float _838 = (_828 * (cbMatDynParam._m0[13u].x - _808)) + _808;
    float _839 = (_828 * (cbMatDynParam._m0[13u].y - _809)) + _809;
    float _840 = (_828 * (cbMatDynParam._m0[13u].z - _810)) + _810;
    float _848 = ((_824 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _795)) + _795;
    float _849 = 1.0 - _848;
    float _850 = _849 * _838;
    float _851 = _849 * _839;
    float _852 = _849 * _840;
    float _856 = (_838 + (-0.039999999105930328369140625)) * _848;
    float _857 = (_839 + (-0.039999999105930328369140625)) * _848;
    float _858 = (_840 + (-0.039999999105930328369140625)) * _848;
    float _859 = _856 + 0.039999999105930328369140625;
    float _860 = _857 + 0.039999999105930328369140625;
    float _861 = _858 + 0.039999999105930328369140625;
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _873 = _870.x * TEXCOORD_4;
    float _874 = dot(vec3(_573, _574, _575), vec3(_654, _655, _656));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _573) - _654;
    float _882 = (_877 * _574) - _655;
    float _883 = (_877 * _575) - _656;
    float _887 = abs(dot(vec3(_654, _655, _656), vec3(_573, _574, _575)));
    float _4030 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_741);
    float _901 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _907 = (1.0 - _901) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _908 = _901 * _889;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _975 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _979 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1004 = _936 + _573;
        float _1005 = _940 + _574;
        float _1006 = _944 + _575;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_573, _574, _575), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4078 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_573, _574, _575), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _4111 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_573, _574, _575), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4144 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1287 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1291 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1295 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1318 = _936 + _573;
        float _1319 = _940 + _574;
        float _1320 = _944 + _575;
        float _1330 = fma(_1320, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1318)) - _1287;
        float _1331 = fma(_1320, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1318)) - _1291;
        float _1332 = fma(_1320, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1318)) - _1295;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1287 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1291 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[35u].z) + ((((((_1295 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1386 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1353.x + (-0.5));
        float _1388 = _1386 * (_1353.y + (-0.5));
        float _1389 = _1386 * (_1353.z + (-0.5));
        float _1396 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1360.x + (-0.5));
        float _1398 = _1396 * (_1360.y + (-0.5));
        float _1399 = _1396 * (_1360.z + (-0.5));
        float _1406 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1367.x + (-0.5));
        float _1408 = _1406 * (_1367.y + (-0.5));
        float _1409 = _1406 * (_1367.z + (-0.5));
        float _1416 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1374.x + (-0.5));
        float _1418 = _1416 * (_1374.y + (-0.5));
        float _1419 = _1416 * (_1374.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_573, _574, _575), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4207 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1450 + 1.0))) + _1455) * _1420;
        float _1465 = _1388 * 0.5;
        float _1466 = _1398 * 0.5;
        float _1467 = _1408 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_573, _574, _575), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4240 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1492 + 1.0))) + _1497) * _1421;
        float _1507 = _1389 * 0.5;
        float _1508 = _1399 * 0.5;
        float _1509 = _1409 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_573, _574, _575), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4273 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1534 + 1.0))) + _1539) * _1422;
        _1556 = _1389;
        _1557 = _1388;
        _1558 = _1387;
        _1559 = _1399;
        _1560 = _1398;
        _1561 = _1397;
        _1562 = _1409;
        _1563 = _1408;
        _1564 = _1407;
        _1565 = _1422;
        _1566 = _1421;
        _1567 = _1420;
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1603 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1580));
    float _1624 = _881 * 0.5;
    float _1625 = _882 * 0.5;
    float _1626 = _883 * 0.5;
    float _1627 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1630 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1633 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1640 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1644 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1648 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1655 = dot(vec4(cbModelParam._m0[39u]), vec4(_1624, _1625, _1626, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1624, _1625, _1626, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1751 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1754 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1782 = frontier_phi_16_14_ladder;
        }
        float _1955;
        if (_1751 > 0.0)
        {
            _1955 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1955 = frontier_phi_25_21_ladder;
        }
        float _2250;
        if (_1754 > 0.0)
        {
            _2250 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2250 = frontier_phi_37_32_ladder;
        }
        float _2252 = isnan(_1955) ? _1782 : (isnan(_1782) ? _1955 : min(_1782, _1955));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1748) + _1737;
        float _2258 = (_2253 * _1751) + _1741;
        float _2259 = (_2253 * _1754) + _1745;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_15_37_ladder = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2404.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2404.z * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_15_37_ladder_1;
        _1772 = frontier_phi_15_37_ladder;
        _1774 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1690);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1848 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1851 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1960;
        if (_1845 > 0.0)
        {
            _1960 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1960 = frontier_phi_27_23_ladder;
        }
        float _2277;
        if (_1848 > 0.0)
        {
            _2277 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2277 = frontier_phi_39_34_ladder;
        }
        float _2615;
        if (_1851 > 0.0)
        {
            _2615 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2615 = frontier_phi_49_46_ladder;
        }
        float _2617 = isnan(_2277) ? _1960 : (isnan(_1960) ? _2277 : min(_1960, _2277));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1845) + _1834;
        float _2623 = (_2618 * _1848) + _1838;
        float _2624 = (_2618 * _1851) + _1842;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_24_49_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_24_49_ladder_2;
        _1872 = frontier_phi_24_49_ladder_1;
        _1874 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1779);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_907 * _859) + _908) * _873) * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1889 = (((_907 * _860) + _908) * _873) * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1891 = (((_907 * _861) + _908) * _873) * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1947 = _1934 / _1946;
    float _1948 = _1938 / _1946;
    float _1949 = _1942 / _1946;
    float _2096;
    float _2097;
    float _2098;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1976 = ((uint(_1949 > cbSceneParam._m0[59u].y) + uint(_1949 > cbSceneParam._m0[59u].x)) + uint(_1949 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1977 = _1976 + 43u;
        uint _1985 = _1976 + 44u;
        uint _1993 = _1976 + 45u;
        uint _2001 = _1976 + 46u;
        float _2012 = fma(_1946, cbSceneParam._m0[_1977].w, fma(_1942, cbSceneParam._m0[_1977].z, fma(_1938, cbSceneParam._m0[_1977].y, _1934 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1946, cbSceneParam._m0[_1985].w, fma(_1942, cbSceneParam._m0[_1985].z, fma(_1938, cbSceneParam._m0[_1985].y, _1934 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1946, cbSceneParam._m0[_2001].w, fma(_1942, cbSceneParam._m0[_2001].z, fma(_1938, cbSceneParam._m0[_2001].y, _1934 * cbSceneParam._m0[_2001].x)));
        float _2029 = cbSceneParam._m0[33u].z * _2024;
        float _2031 = cbSceneParam._m0[33u].w * _2024;
        float _2034 = fma(_1946, cbSceneParam._m0[_1993].w, fma(_1942, cbSceneParam._m0[_1993].z, fma(_1938, cbSceneParam._m0[_1993].y, _1934 * cbSceneParam._m0[_1993].x))) / _2024;
        float _2082 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
        float _4399 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2089 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2012) / _2024, (_2031 + _2016) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2012) / _2024, (_2016 - _2029) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2029) / _2024, (_2016 - _2031) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2031) / _2024, (_2029 + _2016) / _2024), _2034), 0.0)).x), vec4(0.25)));
        _2096 = 1.0 - (_2089 * cbSceneParam._m0[34u].x);
        _2097 = 1.0 - (_2089 * cbSceneParam._m0[34u].y);
        _2098 = 1.0 - (_2089 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2096 = 1.0;
        _2097 = 1.0;
        _2098 = 1.0;
    }
    float _2162;
    float _2164;
    float _2166;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2150 = fma(_1946, cbSceneParam._m0[63u].w, fma(_1942, cbSceneParam._m0[63u].z, fma(_1938, cbSceneParam._m0[63u].y, _1934 * cbSceneParam._m0[63u].x)));
        float _2151 = fma(_1946, cbSceneParam._m0[60u].w, fma(_1942, cbSceneParam._m0[60u].z, fma(_1938, cbSceneParam._m0[60u].y, _1934 * cbSceneParam._m0[60u].x))) / _2150;
        float _2152 = fma(_1946, cbSceneParam._m0[61u].w, fma(_1942, cbSceneParam._m0[61u].z, fma(_1938, cbSceneParam._m0[61u].y, _1934 * cbSceneParam._m0[61u].x))) / _2150;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2151 >= cbSceneParam._m0[64u].x) && (_2152 >= cbSceneParam._m0[64u].y)) && (_2151 <= cbSceneParam._m0[64u].z)) && (_2152 <= cbSceneParam._m0[64u].w))
        {
            float _2290 = fma(_1946, cbSceneParam._m0[62u].w, fma(_1942, cbSceneParam._m0[62u].z, fma(_1938, cbSceneParam._m0[62u].y, _1934 * cbSceneParam._m0[62u].x))) / _2150;
            float _2294 = isnan(cbSceneParam._m0[41u].w) ? _2290 : (isnan(_2290) ? cbSceneParam._m0[41u].w : max(_2290, cbSceneParam._m0[41u].w));
            float _2337 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
            float _4415 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
            float _2344 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2151, cbSceneParam._m0[33u].w + _2152), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2151, _2152 - cbSceneParam._m0[33u].z), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].z, _2152 - cbSceneParam._m0[33u].w), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2152), _2294), 0.0)).x), vec4(0.25)));
            float _2348 = 1.0 - (_2344 * cbSceneParam._m0[34u].x);
            float _2349 = 1.0 - (_2344 * cbSceneParam._m0[34u].y);
            float _2350 = 1.0 - (_2344 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
            frontier_phi_36_35_ladder_1 = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
            frontier_phi_36_35_ladder_2 = isnan(_2348) ? _2096 : (isnan(_2096) ? _2348 : min(_2096, _2348));
        }
        else
        {
            frontier_phi_36_35_ladder = _2097;
            frontier_phi_36_35_ladder_1 = _2098;
            frontier_phi_36_35_ladder_2 = _2096;
        }
        _2162 = frontier_phi_36_35_ladder_2;
        _2164 = frontier_phi_36_35_ladder;
        _2166 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2162 = _2096;
        _2164 = _2097;
        _2166 = _2098;
    }
    uvec4 _2171 = floatBitsToUint(cbInstanceData._m0[_765 + 5u]);
    uint _2173 = _2171.x * 14u;
    uint _2174 = _2173 + 13u;
    float _2181 = _873 + (-1.0);
    float _2186 = (cbLight._m0[_2174].x * _2181) + 1.0;
    float _2187 = (cbLight._m0[_2174].y * _2181) + 1.0;
    float _2188 = (cbLight._m0[_2174].z * _2181) + 1.0;
    float _2189 = (cbLight._m0[_2174].w * _2181) + 1.0;
    uint _2190 = _2173 + 5u;
    float _2196 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2200 = _2173 + 4u;
    float _2209 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2213 = _2173 | 1u;
    float _2224 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_573, _574, _575));
    float _2227 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_573, _574, _575));
    float _4451 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _4462 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2232 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2234 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2241 = ((cbLight._m0[_2190].x * _2196) * _2234) + (((cbLight._m0[_2200].x * _2162) * _2209) * _2232);
    float _2242 = ((_2196 * cbLight._m0[_2190].y) * _2234) + (((cbLight._m0[_2200].y * _2164) * _2209) * _2232);
    float _2243 = ((_2196 * cbLight._m0[_2190].z) * _2234) + (((cbLight._m0[_2200].z * _2166) * _2209) * _2232);
    uvec4 _2247 = floatBitsToUint(cbLight._m0[_2173 + 12u]);
    bool _2249 = _2247.x == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2249)
    {
        _2351 = _2241;
        _2353 = _2242;
        _2355 = _2243;
    }
    else
    {
        uint _2359 = _2173 + 6u;
        float _2375 = (dot(vec3(cbLight._m0[_2173 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4473 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2378 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2351 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2241;
        _2353 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2242;
        _2355 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2243;
    }
    bool _2358 = _2247.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2358)
    {
        _2413 = _2351;
        _2415 = _2353;
        _2417 = _2355;
    }
    else
    {
        uint _2586 = _2173 + 7u;
        float _2602 = (dot(vec3(cbLight._m0[_2173 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4489 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2605 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2413 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2351;
        _2415 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2353;
        _2417 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2355;
    }
    uint _2420 = _2173 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _741) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2173].x + _654;
    float _2436 = cbLight._m0[_2173].y + _655;
    float _2437 = cbLight._m0[_2173].z + _656;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2173].xyz));
    float _4505 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _4516 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2449 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2450 = dot(vec3(_573, _574, _575), vec3(_2442, _2443, _2444));
    float _4527 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2442, _2443, _2444));
    float _4538 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
    float _2471 = 0.959999978542327880859375 - _856;
    float _2473 = 0.959999978542327880859375 - _857;
    float _2474 = 0.959999978542327880859375 - _858;
    float _2481 = 1.0 - _2434;
    float _2492 = (0.5 / (((_2449 * ((_2448 * _2481) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2481) + _2434) * _2448))) * _2448;
    float _4549 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2508 = _2173 + 9u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _741) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2213].x + _654;
    float _2522 = cbLight._m0[_2213].y + _655;
    float _2523 = cbLight._m0[_2213].z + _656;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2213].xyz));
    float _4560 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2535 = dot(vec3(_573, _574, _575), vec3(_2528, _2529, _2530));
    float _4571 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2528, _2529, _2530));
    float _4582 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2520 * _2520;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2561 = 1.0 - _2520;
    float _2571 = (0.5 / (((_2449 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2561) + _2520) * _2534))) * _2534;
    float _4593 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    float _2583 = (((((_2554 * _2471) + _859) * cbLight._m0[_2508].x) * _2573) * _2196) + ((((cbLight._m0[_2420].x * _2162) * ((_2470 * _2471) + _859)) * _2494) * _2209);
    float _2584 = (((((_2554 * _2473) + _860) * cbLight._m0[_2508].y) * _2573) * _2196) + ((((cbLight._m0[_2420].y * _2164) * ((_2470 * _2473) + _860)) * _2494) * _2209);
    float _2585 = (((((_2554 * _2474) + _861) * cbLight._m0[_2508].z) * _2573) * _2196) + ((((cbLight._m0[_2420].z * _2166) * ((_2470 * _2474) + _861)) * _2494) * _2209);
    float _2641;
    float _2643;
    float _2645;
    if (_2249)
    {
        _2641 = _2583;
        _2643 = _2584;
        _2645 = _2585;
    }
    else
    {
        uint _2647 = _2173 + 2u;
        uint _2651 = _2173 + 10u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _741) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _654;
        float _2668 = cbLight._m0[_2647].y + _655;
        float _2669 = cbLight._m0[_2647].z + _656;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2647].xyz));
        float _4604 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2681 = dot(vec3(_573, _574, _575), vec3(_2674, _2675, _2676));
        float _4615 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4626 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
        float _2707 = 1.0 - _2666;
        float _2717 = (0.5 / (((_2449 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2707) + _2666) * _2680))) * _2680;
        float _4637 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2641 = (((((_2700 * _2471) + _859) * cbLight._m0[_2651].x) * _2719) * _2720) + _2583;
        _2643 = (((((_2700 * _2473) + _860) * cbLight._m0[_2651].y) * _2719) * _2720) + _2584;
        _2645 = (((((_2700 * _2474) + _861) * cbLight._m0[_2651].z) * _2719) * _2720) + _2585;
    }
    float _2751;
    float _2753;
    float _2755;
    if (_2358)
    {
        _2751 = _2641;
        _2753 = _2643;
        _2755 = _2645;
    }
    else
    {
        uint _2762 = _2173 + 3u;
        uint _2766 = _2173 + 11u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _741) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _654;
        float _2783 = cbLight._m0[_2762].y + _655;
        float _2784 = cbLight._m0[_2762].z + _656;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2762].xyz));
        float _4653 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2796 = dot(vec3(_573, _574, _575), vec3(_2789, _2790, _2791));
        float _4664 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4675 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2822 = 1.0 - _2781;
        float _2832 = (0.5 / (((_2449 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2822) + _2781) * _2795))) * _2795;
        float _4686 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2751 = (((((_2815 * _2471) + _859) * cbLight._m0[_2766].x) * _2834) * _2835) + _2641;
        _2753 = (((((_2815 * _2473) + _860) * cbLight._m0[_2766].y) * _2834) * _2835) + _2643;
        _2755 = (((((_2815 * _2474) + _861) * cbLight._m0[_2766].z) * _2834) * _2835) + _2645;
    }
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_2171.y == 0u)
    {
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.x;
        uint _2868 = uint((float(_2856.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2857))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2857)));
        float _2878 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2879 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        uint _2882 = uint(isnan(14.0) ? _2879 : (isnan(_2879) ? 14.0 : min(_2879, 14.0)));
        uvec4 _2887 = texelFetch(g_lightClusterGridBuffer, int(((_2882 << 2u) + (_2868 << 6u)) >> 2u));
        uint _2888 = _2887.x;
        uint _2889 = _2856.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2889 >> 4u) & 15u)) + 4294967295u) & _2888) == 0u) || ((_2889 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3179)
                {
                    frontier_phi_68_pred = _3168;
                    frontier_phi_68_pred_1 = _3167;
                    frontier_phi_68_pred_2 = _3166;
                    frontier_phi_68_pred_3 = _3164;
                    frontier_phi_68_pred_4 = _3163;
                    frontier_phi_68_pred_5 = _3165;
                }
                else
                {
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    uint _3293;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3178;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    for (;;)
                    {
                        uint _3297 = uint(findLSB(_3293)) + (_3169 << 5u);
                        uint _3294 = (_3293 + 4294967295u) & _3293;
                        uint _3299 = _3297 * 48u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3319 = (_3297 * 48u) + 4u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3338 = (_3297 * 48u) + 8u;
                        vec3 _3349 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x));
                        float _3353 = _3313.x - _1947;
                        float _3354 = _3313.y - _1948;
                        float _3355 = _3313.z - _1949;
                        float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                        float _3359 = inversesqrt(_3356);
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3363 = dot(vec3(_686, _689, _692), vec3(_3360, _3361, _3362));
                        float _3368 = 1.0 - (_3356 * _3313.w);
                        float _4712 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3370 = sqrt(_3356) * _3332.w;
                        float _3373 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3363) + _3374;
                        float _3380 = _3370 * _3370;
                        float _3384 = ((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3369) / ((_3380 * 0.699999988079071044921875) + 1.0);
                        float _3388 = (-0.0) - _1947;
                        float _3389 = (-0.0) - _1948;
                        float _3390 = (-0.0) - _1949;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3404 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _889;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_686, _689, _692), vec3(_3395, _3396, _3397));
                        float _4728 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3429 = dot(vec3(_686, _689, _692), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4739 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3373 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3363) + _3438;
                        float _4750 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4761 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3436 * _3436) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125))) * _3369;
                        _3222 = (_3384 * _3332.x) + _3290;
                        _3223 = (_3384 * _3332.y) + _3291;
                        _3224 = (_3384 * _3332.z) + _3292;
                        _3219 = (_3464 * _3349.x) + _3287;
                        _3220 = (_3464 * _3349.y) + _3288;
                        _3221 = (_3464 * _3349.z) + _3289;
                        if (_3294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3294;
                        }
                    }
                    frontier_phi_68_pred = _3224;
                    frontier_phi_68_pred_1 = _3223;
                    frontier_phi_68_pred_2 = _3222;
                    frontier_phi_68_pred_3 = _3220;
                    frontier_phi_68_pred_4 = _3219;
                    frontier_phi_68_pred_5 = _3221;
                }
                _3021 = frontier_phi_68_pred;
                _3019 = frontier_phi_68_pred_1;
                _3017 = frontier_phi_68_pred_2;
                _3013 = frontier_phi_68_pred_3;
                _3011 = frontier_phi_68_pred_4;
                _3015 = frontier_phi_68_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3011;
                    _3164 = _3013;
                    _3165 = _3015;
                    _3166 = _3017;
                    _3167 = _3019;
                    _3168 = _3021;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3027) & _2888) == 0u)
        {
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float _3157 = _3156 * _1947;
            float _3158 = _3156 * _1948;
            float _3159 = _3156 * _1949;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3270 = _3010;
                float _3271 = _3012;
                float _3272 = _3014;
                float _3273 = _3016;
                float _3274 = _3018;
                float _3275 = _3020;
                uint _3276 = _3027;
                uint _3285;
                bool _3286;
                for (;;)
                {
                    _3285 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                    _3286 = _3285 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3286)
                    {
                        frontier_phi_74_pred = _3272;
                        frontier_phi_74_pred_1 = _3271;
                        frontier_phi_74_pred_2 = _3270;
                        frontier_phi_74_pred_3 = _3275;
                        frontier_phi_74_pred_4 = _3274;
                        frontier_phi_74_pred_5 = _3273;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        uint _3488 = _3285;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3573;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3499 = ((_3276 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3560 = (_3499 * 40u) + 20u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3576 = (_3499 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3499 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_1949, _3608.z, fma(_1948, _3608.y, _3608.x * _1947)) + _3608.w;
                            _3621 = !((fma(_1949, _3589.z, fma(_1948, _3589.y, _3589.x * _1947)) + _3589.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3514.x - _1947;
                                float _3649 = _3514.y - _1948;
                                float _3650 = _3514.z - _1949;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3515 * _3515));
                                float _4772 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3666 = sqrt(_3651) * _3530.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_686, _689, _692))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_1949, _3557.z, fma(_1948, _3557.y, _3557.x * _1947)) + _3557.w) / _3620;
                                float _3680 = (fma(_1949, _3573.z, fma(_1948, _3573.y, _3573.x * _1947)) + _3573.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4788 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _889;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3157;
                                float _3710 = _3656 - _3158;
                                float _3711 = _3657 - _3159;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_686, _689, _692), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4799 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3723 = dot(vec3(_686, _689, _692), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4810 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_686, _689, _692), vec3(_3655, _3656, _3657))) + _3732;
                                float _4821 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4832 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3760 * _3542.z;
                                frontier_phi_80_pred_1 = _3760 * _3542.y;
                                frontier_phi_80_pred_2 = _3760 * _3542.x;
                                frontier_phi_80_pred_3 = _3686 * _3530.z;
                                frontier_phi_80_pred_4 = _3686 * _3530.y;
                                frontier_phi_80_pred_5 = _3686 * _3530.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_80_pred;
                            _3765 = frontier_phi_80_pred_1;
                            _3764 = frontier_phi_80_pred_2;
                            _3769 = frontier_phi_80_pred_3;
                            _3768 = frontier_phi_80_pred_4;
                            _3767 = frontier_phi_80_pred_5;
                            _3472 = _3767 + _3485;
                            _3473 = _3768 + _3486;
                            _3474 = _3769 + _3487;
                            _3469 = _3764 + _3482;
                            _3470 = _3765 + _3483;
                            _3471 = _3766 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3471;
                        frontier_phi_74_pred_1 = _3470;
                        frontier_phi_74_pred_2 = _3469;
                        frontier_phi_74_pred_3 = _3474;
                        frontier_phi_74_pred_4 = _3473;
                        frontier_phi_74_pred_5 = _3472;
                    }
                    _3136 = frontier_phi_74_pred;
                    _3134 = frontier_phi_74_pred_1;
                    _3132 = frontier_phi_74_pred_2;
                    _3142 = frontier_phi_74_pred_3;
                    _3140 = frontier_phi_74_pred_4;
                    _3138 = frontier_phi_74_pred_5;
                    uint _3277 = _3276 + 1u;
                    if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3270 = _3132;
                        _3271 = _3134;
                        _3272 = _3136;
                        _3273 = _3138;
                        _3274 = _3140;
                        _3275 = _3142;
                        _3276 = _3277;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3140;
                frontier_phi_62_63_ladder_1 = _3138;
                frontier_phi_62_63_ladder_2 = _3136;
                frontier_phi_62_63_ladder_3 = _3142;
                frontier_phi_62_63_ladder_4 = _3134;
                frontier_phi_62_63_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_62_63_ladder = _3018;
                frontier_phi_62_63_ladder_1 = _3016;
                frontier_phi_62_63_ladder_2 = _3014;
                frontier_phi_62_63_ladder_3 = _3020;
                frontier_phi_62_63_ladder_4 = _3012;
                frontier_phi_62_63_ladder_5 = _3010;
            }
            _3131 = frontier_phi_62_63_ladder_5;
            _3133 = frontier_phi_62_63_ladder_4;
            _3135 = frontier_phi_62_63_ladder_2;
            _3137 = frontier_phi_62_63_ladder_1;
            _3139 = frontier_phi_62_63_ladder;
            _3141 = frontier_phi_62_63_ladder_3;
        }
        float _3146 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2900 = (_3146 * _3137) + _2413;
        _2902 = (_3146 * _3139) + _2415;
        _2904 = (_3146 * _3141) + _2417;
        _2906 = ((_3131 * _859) * _3146) + _2751;
        _2908 = ((_3133 * _860) * _3146) + _2753;
        _2910 = ((_3135 * _861) * _3146) + _2755;
    }
    else
    {
        _2900 = _2413;
        _2902 = _2415;
        _2904 = _2417;
        _2906 = _2751;
        _2908 = _2753;
        _2910 = _2755;
    }
    uint _2916 = _766 + uint(cbMatDynParam._m0[0u].w);
    float _2926 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _511) * _524.x) * cbInstanceData._m0[_2916].x;
    float _2931 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _511) * _524.y) * cbInstanceData._m0[_2916].y;
    float _2936 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _511) * _524.z) * cbInstanceData._m0[_2916].z;
    float _4848 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4859 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4870 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4881 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _2954 = (((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2900 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _873))) + ((_2906 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + _2926;
    float _2956 = (_2931 + ((_2908 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2902 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _873)));
    float _2958 = (_2936 + ((_2910 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2904 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _873)));
    float _4907 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2971 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    float _2976 = cbInstanceData._m0[_765 + 6u].w * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)));
    float _2981 = _662 / cbSceneParam._m0[86u].x;
    float _2982 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _3036 = _3035 / _597;
        float _3047 = _3036 * _647;
        float _3048 = _648 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3050 = _3036 * _649;
        float _3052 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3053 = _3052 + cbSceneParam._m0[79u].w;
        float _3054 = cbSceneParam._m0[79u].w - _3048;
        float _3060 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3050 * _3050));
        float _3063 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3060;
        float _3068 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3070 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3232;
        if (abs((_3049 - _3052) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3232 = ((((_3053 > 0.0) ? exp2(_3068 * _3053) : (2.0 - exp2(_3070 * _3053))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3063;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : max(_3053, _3054));
            float _3194 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : min(_3053, _3054));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3232 = ((abs(_3060 / _3049) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3068 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3068 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3070 * _3203) - exp2(_3070 * _3204)) * _3192))) + (_3063 * cbSceneParam._m0[80u].z);
        }
        vec4 _3234 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3243 = exp2((_3232 * (-1.44269502162933349609375)) * (1.0 - _3234.w));
        float _3244 = log2(_3243);
        float _3260 = log2(_3001);
        _3072 = (exp2(_3260 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].x)) * _3234.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3074 = (exp2(_3260 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].y)) * _3234.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3076 = (exp2(_3260 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].z)) * _3234.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3078 = _3243 * _3001;
    }
    else
    {
        _3072 = _2998;
        _3074 = _2999;
        _3076 = _3000;
        _3078 = _3001;
    }
    float _3090 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3091 = _3090 == 3.0;
    float _3092 = log2(_3078);
    float _3096 = exp2(_3092 * cbSceneParam._m0[78u].x);
    float _3097 = exp2(_3092 * cbSceneParam._m0[78u].y);
    float _3098 = exp2(_3092 * cbSceneParam._m0[78u].z);
    float _3099 = _3096 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)));
    float _3100 = _3097 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)));
    float _3101 = _3098 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)));
    float _3110 = (_3090 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3110 * (_3091 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.y = _3110 * (_3091 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.z = _3110 * (_3091 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.w = _2976;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2926) * _2971) * _3096) * _3110;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2931) * _2971) * _3097) * _3110;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2936) * _2971) * _3098) * _3110;
    SV_Target_1.w = _2976;
}


