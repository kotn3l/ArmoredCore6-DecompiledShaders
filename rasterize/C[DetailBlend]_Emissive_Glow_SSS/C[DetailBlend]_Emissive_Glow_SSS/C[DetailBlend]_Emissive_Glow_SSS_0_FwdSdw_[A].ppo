#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1147;
float _3863;
float _3864;
float _3865;
float _3866;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _269 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _292 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _301 = ((_269.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _292.x;
    float _304 = ((_269.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _292.y;
    float _307 = ((_269.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _292.z;
    float _308 = _292.w * _269.w;
    vec4 _321 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = cbMtdParam._m0[16u].x + _321.x;
    vec4 _341 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _353 = (_252.z * 2.0) * (cbMtdParam._m0[14u].x + _341.z);
    float _371 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3875 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _378 = (_373 * _373) * (3.0 - (_373 * 2.0));
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _399 = (_252.x * 2.0) + (-1.0);
    float _400 = (_252.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3886 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))));
    float _413 = (cbMtdParam._m0[14u].z * ((_341.x * 2.0) + (-1.0))) + _399;
    float _414 = (cbMtdParam._m0[14u].z * ((_341.y * 2.0) + (-1.0))) + _400;
    float _417 = fma(_406, _237, fma(_414, _229 * TANGENT.x, (_215 * _207) * _413));
    float _420 = fma(_406, _238, fma(_414, _229 * TANGENT.y, (_215 * _208) * _413));
    float _423 = fma(_406, _239, fma(_414, _229 * TANGENT.z, (_215 * _209) * _413));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3897 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _431 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _432 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _433 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _434 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _435 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _436 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    vec4 _518 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _520 = _518.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _826 = sqrt(((_504 * _504) + (_505 * _505)) + (_506 * _506));
        float _832 = (cbMatDynParam._m0[5u].x * _826) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _837 = (cbMatDynParam._m0[5u].z * _826) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _833)) + _833) < ((_520 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _535 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _537 = _535.w;
    float _556 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _559 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _562 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    vec4 _564 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _566 = _564.x;
    float _578 = (((_564.y - _432) + (_564.w * _432)) * cbMtdParam._m0[3u].x) + _432;
    float _595 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_566 * _566)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _603 = (((cbMatDynParam._m0[15u].x - _436) * cbMatDynParam._m0[15u].w) * _595) + _436;
    float _611 = ((_595 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _578)) + _578;
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _637 = _635 + 9u;
    uint _638 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * _433) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * _434) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * _435) * cbInstanceData._m0[_638].z;
    float _3985 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    vec4 _650 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _655 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _666 = (((_655.x - _603) + (_655.w * _603)) * cbMtdParam._m0[3u].x) + _603;
    float _679 = (cbMtdParam._m0[3u].x * (((_647 * _537) - _647) + _650.x)) + _647;
    float _680 = (cbMtdParam._m0[3u].x * (((_648 * _537) - _648) + _650.y)) + _648;
    float _681 = (cbMtdParam._m0[3u].x * (((_649 * _537) - _649) + _650.z)) + _649;
    vec4 _682 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _695 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_603 * (_433 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_603 * (_434 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_603 * (_435 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _682.z;
    float _699 = _695 * cbMatDynParam._m0[13u].w;
    float _709 = (_699 * (cbMatDynParam._m0[13u].x - _679)) + _679;
    float _710 = (_699 * (cbMatDynParam._m0[13u].y - _680)) + _680;
    float _711 = (_699 * (cbMatDynParam._m0[13u].z - _681)) + _681;
    float _719 = ((_695 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _666)) + _666;
    float _720 = 1.0 - _719;
    float _721 = _720 * _709;
    float _722 = _720 * _710;
    float _723 = _720 * _711;
    float _727 = (_709 + (-0.039999999105930328369140625)) * _719;
    float _728 = (_710 + (-0.039999999105930328369140625)) * _719;
    float _729 = (_711 + (-0.039999999105930328369140625)) * _719;
    float _730 = _727 + 0.039999999105930328369140625;
    float _731 = _728 + 0.039999999105930328369140625;
    float _732 = _729 + 0.039999999105930328369140625;
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _744 = _741.x * TEXCOORD_4;
    float _745 = dot(vec3(_428, _429, _430), vec3(_511, _512, _513));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _428) - _511;
    float _753 = (_748 * _429) - _512;
    float _754 = (_748 * _430) - _513;
    float _758 = abs(dot(vec3(_511, _512, _513), vec3(_428, _429, _430)));
    float _4018 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_611);
    float _772 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _778 = (1.0 - _772) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _779 = _772 * _760;
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1146;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _871 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _875 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _879 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _904 = _807 + _428;
        float _905 = _811 + _429;
        float _906 = _815 + _430;
        float _916 = fma(_906, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904)) - _871;
        float _917 = fma(_906, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904)) - _875;
        float _918 = fma(_906, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904)) - _879;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_871 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_875 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[34u].z) + ((((((_879 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _974 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_940.x + (-0.5));
        float _976 = _974 * (_940.y + (-0.5));
        float _977 = _974 * (_940.z + (-0.5));
        float _984 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_947.x + (-0.5));
        float _986 = _984 * (_947.y + (-0.5));
        float _987 = _984 * (_947.z + (-0.5));
        float _994 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_954.x + (-0.5));
        float _996 = _994 * (_954.y + (-0.5));
        float _997 = _994 * (_954.z + (-0.5));
        float _1004 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_961.x + (-0.5));
        float _1006 = _1004 * (_961.y + (-0.5));
        float _1007 = _1004 * (_961.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1028 = (dot(vec3(_428, _429, _430), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1038 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _4066 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1040 + 1.0))) + _1045) * _1008;
        float _1055 = _976 * 0.5;
        float _1056 = _986 * 0.5;
        float _1057 = _996 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_428, _429, _430), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _4099 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1082 + 1.0))) + _1087) * _1009;
        float _1097 = _977 * 0.5;
        float _1098 = _987 * 0.5;
        float _1099 = _997 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_428, _429, _430), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _4132 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1124 + 1.0))) + _1129) * _1010;
        _1146 = _977;
        _1148 = _976;
        _1149 = _975;
        _1150 = _987;
        _1151 = _986;
        _1152 = _985;
        _1153 = _997;
        _1154 = _996;
        _1155 = _995;
        _1156 = _1010;
        _1157 = _1009;
        _1158 = _1008;
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
    }
    else
    {
        _1146 = _1147;
        _1148 = _1147;
        _1149 = _1147;
        _1150 = _1147;
        _1151 = _1147;
        _1152 = _1147;
        _1153 = _1147;
        _1154 = _1147;
        _1155 = _1147;
        _1156 = _1147;
        _1157 = _1147;
        _1158 = _1147;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1190 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1194 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1198 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1221 = _807 + _428;
        float _1222 = _811 + _429;
        float _1223 = _815 + _430;
        float _1233 = fma(_1223, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221)) - _1190;
        float _1234 = fma(_1223, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221)) - _1194;
        float _1235 = fma(_1223, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221)) - _1198;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1190 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1194 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[35u].z) + ((((((_1198 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1289 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1256.x + (-0.5));
        float _1291 = _1289 * (_1256.y + (-0.5));
        float _1292 = _1289 * (_1256.z + (-0.5));
        float _1299 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1263.x + (-0.5));
        float _1301 = _1299 * (_1263.y + (-0.5));
        float _1302 = _1299 * (_1263.z + (-0.5));
        float _1309 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1270.x + (-0.5));
        float _1311 = _1309 * (_1270.y + (-0.5));
        float _1312 = _1309 * (_1270.z + (-0.5));
        float _1319 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1277.x + (-0.5));
        float _1321 = _1319 * (_1277.y + (-0.5));
        float _1322 = _1319 * (_1277.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_428, _429, _430), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4195 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1353 + 1.0))) + _1358) * _1323;
        float _1368 = _1291 * 0.5;
        float _1369 = _1301 * 0.5;
        float _1370 = _1311 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_428, _429, _430), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4228 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1395 + 1.0))) + _1400) * _1324;
        float _1410 = _1292 * 0.5;
        float _1411 = _1302 * 0.5;
        float _1412 = _1312 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_428, _429, _430), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4261 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1437 + 1.0))) + _1442) * _1325;
        _1459 = _1292;
        _1460 = _1291;
        _1461 = _1290;
        _1462 = _1302;
        _1463 = _1301;
        _1464 = _1300;
        _1465 = _1312;
        _1466 = _1311;
        _1467 = _1310;
        _1468 = _1325;
        _1469 = _1324;
        _1470 = _1323;
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1147;
        _1460 = _1147;
        _1461 = _1147;
        _1462 = _1147;
        _1463 = _1147;
        _1464 = _1147;
        _1465 = _1147;
        _1466 = _1147;
        _1467 = _1147;
        _1468 = _1147;
        _1469 = _1147;
        _1470 = _1147;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1159)) + _1159;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1160)) + _1160;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1161)) + _1161;
    float _1506 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1483 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1483 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1483));
    float _1527 = _752 * 0.5;
    float _1528 = _753 * 0.5;
    float _1529 = _754 * 0.5;
    float _1530 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1533 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1536 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1543 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1146, _1150, _1153, _1156));
        float _1547 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1551 = dot(vec4(_1527, _1528, _1529, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1558 = dot(vec4(cbModelParam._m0[39u]), vec4(_1527, _1528, _1529, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1527, _1528, _1529, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1654 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1657 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1685 = frontier_phi_19_17_ladder;
        }
        float _1858;
        if (_1654 > 0.0)
        {
            _1858 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1858 = frontier_phi_28_24_ladder;
        }
        float _2153;
        if (_1657 > 0.0)
        {
            _2153 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2153 = frontier_phi_40_35_ladder;
        }
        float _2155 = isnan(_1858) ? _1685 : (isnan(_1685) ? _1858 : min(_1685, _1858));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1651) + _1640;
        float _2161 = (_2156 * _1654) + _1644;
        float _2162 = (_2156 * _1657) + _1648;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_18_40_ladder = _2307.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2307.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2307.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_18_40_ladder_2;
        _1675 = frontier_phi_18_40_ladder_1;
        _1677 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1593);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1751 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1754 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1863;
        if (_1748 > 0.0)
        {
            _1863 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1863 = frontier_phi_30_26_ladder;
        }
        float _2180;
        if (_1751 > 0.0)
        {
            _2180 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2180 = frontier_phi_42_37_ladder;
        }
        float _2518;
        if (_1754 > 0.0)
        {
            _2518 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2518 = frontier_phi_52_49_ladder;
        }
        float _2520 = isnan(_2180) ? _1863 : (isnan(_1863) ? _2180 : min(_1863, _2180));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1748) + _1737;
        float _2526 = (_2521 * _1751) + _1741;
        float _2527 = (_2521 * _1754) + _1745;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_27_52_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_27_52_ladder_2;
        _1775 = frontier_phi_27_52_ladder_1;
        _1777 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1682);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1790 = (((_778 * _730) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1792 = (((_778 * _731) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1794 = (((_778 * _732) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1777 - _1677)) + _1677);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1850 = _1837 / _1849;
    float _1851 = _1841 / _1849;
    float _1852 = _1845 / _1849;
    float _1999;
    float _2000;
    float _2001;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1879 = ((uint(_1852 > cbSceneParam._m0[59u].y) + uint(_1852 > cbSceneParam._m0[59u].x)) + uint(_1852 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1880 = _1879 + 43u;
        uint _1888 = _1879 + 44u;
        uint _1896 = _1879 + 45u;
        uint _1904 = _1879 + 46u;
        float _1915 = fma(_1849, cbSceneParam._m0[_1880].w, fma(_1845, cbSceneParam._m0[_1880].z, fma(_1841, cbSceneParam._m0[_1880].y, _1837 * cbSceneParam._m0[_1880].x)));
        float _1919 = fma(_1849, cbSceneParam._m0[_1888].w, fma(_1845, cbSceneParam._m0[_1888].z, fma(_1841, cbSceneParam._m0[_1888].y, _1837 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1849, cbSceneParam._m0[_1904].w, fma(_1845, cbSceneParam._m0[_1904].z, fma(_1841, cbSceneParam._m0[_1904].y, _1837 * cbSceneParam._m0[_1904].x)));
        float _1932 = cbSceneParam._m0[33u].z * _1927;
        float _1934 = cbSceneParam._m0[33u].w * _1927;
        float _1937 = fma(_1849, cbSceneParam._m0[_1896].w, fma(_1845, cbSceneParam._m0[_1896].z, fma(_1841, cbSceneParam._m0[_1896].y, _1837 * cbSceneParam._m0[_1896].x))) / _1927;
        float _1985 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
        float _4387 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1992 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 + _1915) / _1927, (_1934 + _1919) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1934 + _1915) / _1927, (_1919 - _1932) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1932) / _1927, (_1919 - _1934) / _1927), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 - _1934) / _1927, (_1932 + _1919) / _1927), _1937), 0.0)).x), vec4(0.25)));
        _1999 = 1.0 - (_1992 * cbSceneParam._m0[34u].x);
        _2000 = 1.0 - (_1992 * cbSceneParam._m0[34u].y);
        _2001 = 1.0 - (_1992 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1999 = 1.0;
        _2000 = 1.0;
        _2001 = 1.0;
    }
    float _2065;
    float _2067;
    float _2069;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2053 = fma(_1849, cbSceneParam._m0[63u].w, fma(_1845, cbSceneParam._m0[63u].z, fma(_1841, cbSceneParam._m0[63u].y, _1837 * cbSceneParam._m0[63u].x)));
        float _2054 = fma(_1849, cbSceneParam._m0[60u].w, fma(_1845, cbSceneParam._m0[60u].z, fma(_1841, cbSceneParam._m0[60u].y, _1837 * cbSceneParam._m0[60u].x))) / _2053;
        float _2055 = fma(_1849, cbSceneParam._m0[61u].w, fma(_1845, cbSceneParam._m0[61u].z, fma(_1841, cbSceneParam._m0[61u].y, _1837 * cbSceneParam._m0[61u].x))) / _2053;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2054 >= cbSceneParam._m0[64u].x) && (_2055 >= cbSceneParam._m0[64u].y)) && (_2054 <= cbSceneParam._m0[64u].z)) && (_2055 <= cbSceneParam._m0[64u].w))
        {
            float _2193 = fma(_1849, cbSceneParam._m0[62u].w, fma(_1845, cbSceneParam._m0[62u].z, fma(_1841, cbSceneParam._m0[62u].y, _1837 * cbSceneParam._m0[62u].x))) / _2053;
            float _2197 = isnan(cbSceneParam._m0[41u].w) ? _2193 : (isnan(_2193) ? cbSceneParam._m0[41u].w : max(_2193, cbSceneParam._m0[41u].w));
            float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852))) * cbSceneParam._m0[33u].y;
            float _4403 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
            float _2247 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2054, cbSceneParam._m0[33u].w + _2055), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2054, _2055 - cbSceneParam._m0[33u].z), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].z, _2055 - cbSceneParam._m0[33u].w), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2054 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2055), _2197), 0.0)).x), vec4(0.25)));
            float _2251 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
            float _2252 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
            float _2253 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2252) ? _2000 : (isnan(_2000) ? _2252 : min(_2000, _2252));
            frontier_phi_39_38_ladder_1 = isnan(_2251) ? _1999 : (isnan(_1999) ? _2251 : min(_1999, _2251));
            frontier_phi_39_38_ladder_2 = isnan(_2253) ? _2001 : (isnan(_2001) ? _2253 : min(_2001, _2253));
        }
        else
        {
            frontier_phi_39_38_ladder = _2000;
            frontier_phi_39_38_ladder_1 = _1999;
            frontier_phi_39_38_ladder_2 = _2001;
        }
        _2065 = frontier_phi_39_38_ladder_1;
        _2067 = frontier_phi_39_38_ladder;
        _2069 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2065 = _1999;
        _2067 = _2000;
        _2069 = _2001;
    }
    uvec4 _2074 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _2076 = _2074.x * 14u;
    uint _2077 = _2076 + 13u;
    float _2084 = _744 + (-1.0);
    float _2089 = (cbLight._m0[_2077].x * _2084) + 1.0;
    float _2090 = (cbLight._m0[_2077].y * _2084) + 1.0;
    float _2091 = (cbLight._m0[_2077].z * _2084) + 1.0;
    float _2092 = (cbLight._m0[_2077].w * _2084) + 1.0;
    uint _2093 = _2076 + 5u;
    float _2099 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2103 = _2076 + 4u;
    float _2112 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2116 = _2076 | 1u;
    float _2127 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_428, _429, _430));
    float _2130 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_428, _429, _430));
    float _4439 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _4450 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2137 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2144 = ((cbLight._m0[_2093].x * _2099) * _2137) + (((cbLight._m0[_2103].x * _2065) * _2112) * _2135);
    float _2145 = ((_2099 * cbLight._m0[_2093].y) * _2137) + (((cbLight._m0[_2103].y * _2067) * _2112) * _2135);
    float _2146 = ((_2099 * cbLight._m0[_2093].z) * _2137) + (((cbLight._m0[_2103].z * _2069) * _2112) * _2135);
    uvec4 _2150 = floatBitsToUint(cbLight._m0[_2076 + 12u]);
    bool _2152 = _2150.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2152)
    {
        _2254 = _2144;
        _2256 = _2145;
        _2258 = _2146;
    }
    else
    {
        uint _2262 = _2076 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2076 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4461 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2281 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2144;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2145;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2146;
    }
    bool _2261 = _2150.y == 0u;
    float _2316;
    float _2318;
    float _2320;
    if (_2261)
    {
        _2316 = _2254;
        _2318 = _2256;
        _2320 = _2258;
    }
    else
    {
        uint _2489 = _2076 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2076 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4477 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2508 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2316 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2254;
        _2318 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2256;
        _2320 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2258;
    }
    uint _2323 = _2076 + 8u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _611) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2076].x + _511;
    float _2339 = cbLight._m0[_2076].y + _512;
    float _2340 = cbLight._m0[_2076].z + _513;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2076].xyz));
    float _4493 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2352 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2353 = dot(vec3(_428, _429, _430), vec3(_2345, _2346, _2347));
    float _4515 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2345, _2346, _2347));
    float _4526 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2337 * _2337;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2374 = 0.959999978542327880859375 - _727;
    float _2376 = 0.959999978542327880859375 - _728;
    float _2377 = 0.959999978542327880859375 - _729;
    float _2384 = 1.0 - _2337;
    float _2395 = (0.5 / (((_2352 * ((_2351 * _2384) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2384) + _2337) * _2351))) * _2351;
    float _4537 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    uint _2411 = _2076 + 9u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _611) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2116].x + _511;
    float _2425 = cbLight._m0[_2116].y + _512;
    float _2426 = cbLight._m0[_2116].z + _513;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2116].xyz));
    float _4548 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2438 = dot(vec3(_428, _429, _430), vec3(_2431, _2432, _2433));
    float _4559 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2431, _2432, _2433));
    float _4570 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2423 * _2423;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2464 = 1.0 - _2423;
    float _2474 = (0.5 / (((_2352 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2464) + _2423) * _2437))) * _2437;
    float _4581 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    float _2486 = (((((_2457 * _2374) + _730) * cbLight._m0[_2411].x) * _2476) * _2099) + ((((cbLight._m0[_2323].x * _2065) * ((_2373 * _2374) + _730)) * _2397) * _2112);
    float _2487 = (((((_2457 * _2376) + _731) * cbLight._m0[_2411].y) * _2476) * _2099) + ((((cbLight._m0[_2323].y * _2067) * ((_2373 * _2376) + _731)) * _2397) * _2112);
    float _2488 = (((((_2457 * _2377) + _732) * cbLight._m0[_2411].z) * _2476) * _2099) + ((((cbLight._m0[_2323].z * _2069) * ((_2373 * _2377) + _732)) * _2397) * _2112);
    float _2544;
    float _2546;
    float _2548;
    if (_2152)
    {
        _2544 = _2486;
        _2546 = _2487;
        _2548 = _2488;
    }
    else
    {
        uint _2550 = _2076 + 2u;
        uint _2554 = _2076 + 10u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _611) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _511;
        float _2571 = cbLight._m0[_2550].y + _512;
        float _2572 = cbLight._m0[_2550].z + _513;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2550].xyz));
        float _4592 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2584 = dot(vec3(_428, _429, _430), vec3(_2577, _2578, _2579));
        float _4603 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4614 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2610 = 1.0 - _2569;
        float _2620 = (0.5 / (((_2352 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2610) + _2569) * _2583))) * _2583;
        float _4625 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2544 = (((((_2603 * _2374) + _730) * cbLight._m0[_2554].x) * _2622) * _2623) + _2486;
        _2546 = (((((_2603 * _2376) + _731) * cbLight._m0[_2554].y) * _2622) * _2623) + _2487;
        _2548 = (((((_2603 * _2377) + _732) * cbLight._m0[_2554].z) * _2622) * _2623) + _2488;
    }
    float _2654;
    float _2656;
    float _2658;
    if (_2261)
    {
        _2654 = _2544;
        _2656 = _2546;
        _2658 = _2548;
    }
    else
    {
        uint _2665 = _2076 + 3u;
        uint _2669 = _2076 + 11u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _611) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _511;
        float _2686 = cbLight._m0[_2665].y + _512;
        float _2687 = cbLight._m0[_2665].z + _513;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2665].xyz));
        float _4641 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2699 = dot(vec3(_428, _429, _430), vec3(_2692, _2693, _2694));
        float _4652 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4663 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2725 = 1.0 - _2684;
        float _2735 = (0.5 / (((_2352 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2352 * _2725) + _2684) * _2698))) * _2698;
        float _4674 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2654 = (((((_2718 * _2374) + _730) * cbLight._m0[_2669].x) * _2737) * _2738) + _2544;
        _2656 = (((((_2718 * _2376) + _731) * cbLight._m0[_2669].y) * _2737) * _2738) + _2546;
        _2658 = (((((_2718 * _2377) + _732) * cbLight._m0[_2669].z) * _2737) * _2738) + _2548;
    }
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_2074.y == 0u)
    {
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.x;
        uint _2771 = uint((float(_2759.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2760))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2760)));
        float _2781 = (log2(_1852 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2782 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        uint _2785 = uint(isnan(14.0) ? _2782 : (isnan(_2782) ? 14.0 : min(_2782, 14.0)));
        uvec4 _2790 = texelFetch(g_lightClusterGridBuffer, int(((_2785 << 2u) + (_2771 << 6u)) >> 2u));
        uint _2791 = _2790.x;
        uint _2792 = _2759.z;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((((1u << ((_2792 >> 4u) & 15u)) + 4294967295u) & _2791) == 0u) || ((_2792 & 240u) == 0u))
        {
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
        }
        else
        {
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            uint _3080 = 0u;
            uint _3089;
            bool _3090;
            for (;;)
            {
                _3089 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                _3090 = _3089 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3090)
                {
                    frontier_phi_73_pred = _3079;
                    frontier_phi_73_pred_1 = _3078;
                    frontier_phi_73_pred_2 = _3077;
                    frontier_phi_73_pred_3 = _3076;
                    frontier_phi_73_pred_4 = _3075;
                    frontier_phi_73_pred_5 = _3074;
                }
                else
                {
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    uint _3225;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3089;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    for (;;)
                    {
                        uint _3229 = uint(findLSB(_3225)) + (_3080 << 5u);
                        uint _3226 = (_3225 + 4294967295u) & _3225;
                        uint _3231 = _3229 * 48u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3251 = (_3229 * 48u) + 4u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3270 = (_3229 * 48u) + 8u;
                        vec3 _3281 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x));
                        float _3285 = _3245.x - _1850;
                        float _3286 = _3245.y - _1851;
                        float _3287 = _3245.z - _1852;
                        float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                        float _3291 = inversesqrt(_3288);
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3295 = dot(vec3(_556, _559, _562), vec3(_3292, _3293, _3294));
                        float _3300 = 1.0 - (_3288 * _3245.w);
                        float _4700 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3302 = sqrt(_3288) * _3264.w;
                        float _3305 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3295) + _3306;
                        float _3312 = _3302 * _3302;
                        float _3316 = ((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3301) / ((_3312 * 0.699999988079071044921875) + 1.0);
                        float _3320 = (-0.0) - _1850;
                        float _3321 = (-0.0) - _1851;
                        float _3322 = (-0.0) - _1852;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3336 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                        float _3337 = 1.0 - _760;
                        float _3344 = sqrt(1.0 - ((1.0 - (_3337 * _3337)) * (1.0 - (_3336 * _3336))));
                        float _3345 = _3344 * _3344;
                        float _3346 = _3345 * _3345;
                        float _3347 = _3327 + _3292;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3357 = dot(vec3(_556, _559, _562), vec3(_3327, _3328, _3329));
                        float _4716 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3360 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3361 = dot(vec3(_556, _559, _562), vec3(_3353 * _3347, _3353 * _3348, _3353 * _3349));
                        float _4727 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3368 = ((_3364 * _3364) * (_3346 + (-1.0))) + 1.0;
                        float _3369 = _3305 * _3345;
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3295) + _3370;
                        float _4738 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3374 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3375 = 1.0 - _3345;
                        float _3385 = (0.5 / (((_3374 * ((_3360 * _3375) + _3345)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3345) * _3360))) * _3374;
                        float _4749 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3396 = (((_3346 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3368 * _3368) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125))) * _3301;
                        _3149 = (_3316 * _3264.x) + _3222;
                        _3150 = (_3316 * _3264.y) + _3223;
                        _3151 = (_3316 * _3264.z) + _3224;
                        _3146 = (_3396 * _3281.x) + _3219;
                        _3147 = (_3396 * _3281.y) + _3220;
                        _3148 = (_3396 * _3281.z) + _3221;
                        if (_3226 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3226;
                        }
                    }
                    frontier_phi_73_pred = _3151;
                    frontier_phi_73_pred_1 = _3150;
                    frontier_phi_73_pred_2 = _3149;
                    frontier_phi_73_pred_3 = _3148;
                    frontier_phi_73_pred_4 = _3147;
                    frontier_phi_73_pred_5 = _3146;
                }
                _2924 = frontier_phi_73_pred;
                _2922 = frontier_phi_73_pred_1;
                _2920 = frontier_phi_73_pred_2;
                _2918 = frontier_phi_73_pred_3;
                _2916 = frontier_phi_73_pred_4;
                _2914 = frontier_phi_73_pred_5;
                uint _3081 = _3080 + 1u;
                if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3074 = _2914;
                    _3075 = _2916;
                    _3076 = _2918;
                    _3077 = _2920;
                    _3078 = _2922;
                    _3079 = _2924;
                    _3080 = _3081;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
        }
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.z;
        uint _2930 = (_2928 >> 8u) & 15u;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((4294967295u << _2930) & _2791) == 0u)
        {
            _3042 = _2913;
            _3044 = _2915;
            _3046 = _2917;
            _3048 = _2919;
            _3050 = _2921;
            _3052 = _2923;
        }
        else
        {
            float _3067 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
            float _3068 = _3067 * _1850;
            float _3069 = _3067 * _1851;
            float _3070 = _3067 * _1852;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2930 < ((_2928 >> 12u) & 15u))
            {
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3202 = _2913;
                float _3203 = _2915;
                float _3204 = _2917;
                float _3205 = _2919;
                float _3206 = _2921;
                float _3207 = _2923;
                uint _3208 = _2930;
                uint _3217;
                bool _3218;
                for (;;)
                {
                    _3217 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                    _3218 = _3217 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3218)
                    {
                        frontier_phi_84_pred = _3206;
                        frontier_phi_84_pred_1 = _3205;
                        frontier_phi_84_pred_2 = _3204;
                        frontier_phi_84_pred_3 = _3203;
                        frontier_phi_84_pred_4 = _3202;
                        frontier_phi_84_pred_5 = _3207;
                    }
                    else
                    {
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3423 = _3202;
                        float _3424 = _3203;
                        float _3425 = _3204;
                        float _3426 = _3205;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        uint _3429 = _3217;
                        uint _3430;
                        vec4 _3455;
                        float _3456;
                        vec4 _3471;
                        vec3 _3483;
                        vec4 _3498;
                        vec4 _3514;
                        float _3561;
                        bool _3562;
                        for (;;)
                        {
                            uint _3440 = ((_3208 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3429));
                            _3430 = (_3429 + 4294967295u) & _3429;
                            uint _3442 = _3440 * 40u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3456 = _3455.w;
                            uint _3458 = (_3440 * 40u) + 4u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3440 * 40u) + 8u;
                            _3483 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x));
                            uint _3485 = (_3440 * 40u) + 16u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3501 = (_3440 * 40u) + 20u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3517 = (_3440 * 40u) + 24u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3536 = (_3440 * 40u) + 28u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3561 = fma(_1852, _3549.z, fma(_1851, _3549.y, _3549.x * _1850)) + _3549.w;
                            _3562 = !((fma(_1852, _3530.z, fma(_1851, _3530.y, _3530.x * _1850)) + _3530.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3562)
                            {
                                float _3589 = _3455.x - _1850;
                                float _3590 = _3455.y - _1851;
                                float _3591 = _3455.z - _1852;
                                float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                                float _3595 = inversesqrt(_3592);
                                float _3596 = _3595 * _3589;
                                float _3597 = _3595 * _3590;
                                float _3598 = _3595 * _3591;
                                float _3602 = 1.0 - (_3592 / (_3456 * _3456));
                                float _4760 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3607 = sqrt(_3592) * _3471.w;
                                float _3609 = 1.39999997615814208984375 / (_3607 + 1.39999997615814208984375);
                                float _3610 = _3609 * _3609;
                                float _3613 = ((1.0 - _3610) * dot(vec3(_3596, _3597, _3598), vec3(_556, _559, _562))) + _3610;
                                float _3616 = _3607 * _3607;
                                float _3620 = (fma(_1852, _3498.z, fma(_1851, _3498.y, _3498.x * _1850)) + _3498.w) / _3561;
                                float _3621 = (fma(_1852, _3514.z, fma(_1851, _3514.y, _3514.x * _1850)) + _3514.w) / _3561;
                                float _3625 = 1.0 - dot(vec2(_3620, _3621), vec2(_3620, _3621));
                                float _4776 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3627 = _3626 * (((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3603) / ((_3616 * 0.699999988079071044921875) + 1.0));
                                float _3639 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                                float _3640 = 1.0 - _760;
                                float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                                float _3648 = _3647 * _3647;
                                float _3649 = _3648 * _3648;
                                float _3650 = _3596 - _3068;
                                float _3651 = _3597 - _3069;
                                float _3652 = _3598 - _3070;
                                float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                                float _3660 = dot(vec3(_556, _559, _562), vec3((-0.0) - _3068, (-0.0) - _3069, (-0.0) - _3070));
                                float _4787 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3664 = dot(vec3(_556, _559, _562), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                                float _4798 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                                float _3672 = _3609 * _3648;
                                float _3673 = _3672 * _3672;
                                float _3679 = ((1.0 - _3673) * dot(vec3(_556, _559, _562), vec3(_3596, _3597, _3598))) + _3673;
                                float _4809 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3681 = 1.0 - _3648;
                                float _3691 = (0.5 / (((_3680 * ((_3663 * _3681) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3648) * _3663))) * _3680;
                                float _4820 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3701 = (_3626 * _3603) * (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3671 * _3671) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3627 * _3471.y;
                                frontier_phi_90_pred_1 = _3627 * _3471.x;
                                frontier_phi_90_pred_2 = _3701 * _3483.z;
                                frontier_phi_90_pred_3 = _3701 * _3483.y;
                                frontier_phi_90_pred_4 = _3701 * _3483.x;
                                frontier_phi_90_pred_5 = _3627 * _3471.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3709 = frontier_phi_90_pred;
                            _3708 = frontier_phi_90_pred_1;
                            _3707 = frontier_phi_90_pred_2;
                            _3706 = frontier_phi_90_pred_3;
                            _3705 = frontier_phi_90_pred_4;
                            _3710 = frontier_phi_90_pred_5;
                            _3413 = _3708 + _3426;
                            _3414 = _3709 + _3427;
                            _3415 = _3710 + _3428;
                            _3410 = _3705 + _3423;
                            _3411 = _3706 + _3424;
                            _3412 = _3707 + _3425;
                            if (_3430 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3430;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3414;
                        frontier_phi_84_pred_1 = _3413;
                        frontier_phi_84_pred_2 = _3412;
                        frontier_phi_84_pred_3 = _3411;
                        frontier_phi_84_pred_4 = _3410;
                        frontier_phi_84_pred_5 = _3415;
                    }
                    _3051 = frontier_phi_84_pred;
                    _3049 = frontier_phi_84_pred_1;
                    _3047 = frontier_phi_84_pred_2;
                    _3045 = frontier_phi_84_pred_3;
                    _3043 = frontier_phi_84_pred_4;
                    _3053 = frontier_phi_84_pred_5;
                    uint _3209 = _3208 + 1u;
                    if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3202 = _3043;
                        _3203 = _3045;
                        _3204 = _3047;
                        _3205 = _3049;
                        _3206 = _3051;
                        _3207 = _3053;
                        _3208 = _3209;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3053;
                frontier_phi_65_66_ladder_1 = _3049;
                frontier_phi_65_66_ladder_2 = _3051;
                frontier_phi_65_66_ladder_3 = _3045;
                frontier_phi_65_66_ladder_4 = _3043;
                frontier_phi_65_66_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_65_66_ladder = _2923;
                frontier_phi_65_66_ladder_1 = _2919;
                frontier_phi_65_66_ladder_2 = _2921;
                frontier_phi_65_66_ladder_3 = _2915;
                frontier_phi_65_66_ladder_4 = _2913;
                frontier_phi_65_66_ladder_5 = _2917;
            }
            _3042 = frontier_phi_65_66_ladder_4;
            _3044 = frontier_phi_65_66_ladder_3;
            _3046 = frontier_phi_65_66_ladder_5;
            _3048 = frontier_phi_65_66_ladder_1;
            _3050 = frontier_phi_65_66_ladder_2;
            _3052 = frontier_phi_65_66_ladder;
        }
        float _3057 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2803 = (_3057 * _3048) + _2316;
        _2805 = (_3057 * _3050) + _2318;
        _2807 = (_3057 * _3052) + _2320;
        _2809 = ((_3042 * _730) * _3057) + _2654;
        _2811 = ((_3044 * _731) * _3057) + _2656;
        _2813 = ((_3046 * _732) * _3057) + _2658;
    }
    else
    {
        _2803 = _2316;
        _2805 = _2318;
        _2807 = _2320;
        _2809 = _2654;
        _2811 = _2656;
        _2813 = _2658;
    }
    uint _2819 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _2829 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _378) * _391.x) * cbInstanceData._m0[_2819].x;
    float _2834 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _378) * _391.y) * cbInstanceData._m0[_2819].y;
    float _2839 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _378) * _391.z) * cbInstanceData._m0[_2819].z;
    float _4836 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4847 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4858 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4869 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _2857 = (((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2803 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _744))) + ((_2809 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + _2829;
    float _2859 = (_2834 + ((_2811 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2805 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _744)));
    float _2861 = (_2839 + ((_2813 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2807 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _744)));
    float _2862 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2863 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
    float _2864 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2870 = cbMtdParam._m0[2u].x * _2829;
    float _2871 = cbMtdParam._m0[2u].y * _2834;
    float _2872 = cbMtdParam._m0[2u].z * _2839;
    float _4895 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2874 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2879 = cbInstanceData._m0[_635 + 6u].w * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)));
    float _2884 = _532 / cbSceneParam._m0[86u].x;
    float _2885 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2899 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2901 = _2899.x;
    float _2902 = _2899.y;
    float _2903 = _2899.z;
    float _2904 = _2899.w;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2938 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2939 = _2938 / _452;
        float _2950 = _2939 * _504;
        float _2951 = _505 * _2939;
        float _2952 = (-0.0) - _2951;
        float _2953 = _2939 * _506;
        float _2955 = (cbSceneParam._m0[77u].w * _2952) / _2938;
        float _2956 = _2955 + cbSceneParam._m0[79u].w;
        float _2957 = cbSceneParam._m0[79u].w - _2951;
        float _2963 = sqrt(((_2950 * _2950) + (_2951 * _2951)) + (_2953 * _2953));
        float _2966 = (1.0 - (cbSceneParam._m0[77u].w / _2938)) * _2963;
        float _2971 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2973 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3159;
        if (abs((_2952 - _2955) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3159 = ((((_2956 > 0.0) ? exp2(_2971 * _2956) : (2.0 - exp2(_2973 * _2956))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2966;
        }
        else
        {
            float _3103 = 1.0 / cbSceneParam._m0[80u].x;
            float _3104 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : max(_2956, _2957));
            float _3105 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : min(_2956, _2957));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            _3159 = ((abs(_2963 / _2952) * cbSceneParam._m0[80u].y) * ((((_3114 - _3115) * 2.0) - ((exp2(_2971 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0)))) - exp2(_2971 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))))) * _3103)) - ((exp2(_2973 * _3114) - exp2(_2973 * _3115)) * _3103))) + (_2966 * cbSceneParam._m0[80u].z);
        }
        vec4 _3161 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, 1.0), 0.0);
        float _3170 = exp2((_3159 * (-1.44269502162933349609375)) * (1.0 - _3161.w));
        float _3171 = log2(_3170);
        float _3187 = log2(_2904);
        _2975 = (exp2(_3187 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].x)) * _3161.x) / cbSceneParam._m0[78u].x)) + _2901;
        _2977 = (exp2(_3187 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].y)) * _3161.y) / cbSceneParam._m0[78u].y)) + _2902;
        _2979 = (exp2(_3187 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].z)) * _3161.z) / cbSceneParam._m0[78u].z)) + _2903;
        _2981 = _3170 * _2904;
    }
    else
    {
        _2975 = _2901;
        _2977 = _2902;
        _2979 = _2903;
        _2981 = _2904;
    }
    bool _3197;
    vec4 _2991;
    vec4 _3013;
    float _3015;
    float _3019;
    float _3020;
    float _3021;
    float _3024;
    float _3027;
    float _3030;
    float _3031;
    bool _3041;
    for (;;)
    {
        _2991 = cbMatDynParam._m0[0u];
        float _2993 = roundEven(_2991.y);
        bool _2994 = _2993 == 3.0;
        float _2995 = log2(_2981);
        float _2999 = exp2(_2995 * cbSceneParam._m0[78u].x);
        float _3000 = exp2(_2995 * cbSceneParam._m0[78u].y);
        float _3001 = exp2(_2995 * cbSceneParam._m0[78u].z);
        float _3002 = _2999 * _2862;
        float _3003 = _3000 * _2863;
        float _3004 = _3001 * _2864;
        float _3011 = _520 + (-0.5);
        _3013 = cbMtdParam._m0[1u];
        _3015 = _3013.y * _3011;
        float _3018 = (_2993 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3019 = _3018 * (_2994 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2975)));
        _3020 = _3018 * (_2994 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2977)));
        _3021 = _3018 * (_2994 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2979)));
        _3024 = ((_2870 * _2874) * _2999) * _3018;
        _3027 = ((_2871 * _2874) * _3000) * _3018;
        _3030 = ((_2872 * _2874) * _3001) * _3018;
        _3031 = _3011 * 0.999000012874603271484375;
        _3041 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3041)
        {
            if ((cbInstanceData._m0[_635 + 7u].x + _3031) < 0.5)
            {
                _3197 = true;
                break;
            }
        }
        uint _3138 = _637 + uint(_2991.w);
        if ((cbInstanceData._m0[_3138].w < 1.0) && ((cbInstanceData._m0[_3138].w + _3031) < 0.5))
        {
            _3197 = true;
            break;
        }
        if ((_3015 + _308) < _3013.x)
        {
            _3197 = true;
            break;
        }
        _3197 = false;
        break;
    }
    float _3401;
    if (_3197)
    {
        discard_state = true;
        _3401 = 0.0;
    }
    else
    {
        _3401 = _2879;
    }
    SV_Target.x = _3019;
    SV_Target.y = _3020;
    SV_Target.z = _3021;
    SV_Target.w = _3401;
    SV_Target_1.x = _3024;
    SV_Target_1.y = _3027;
    SV_Target_1.z = _3030;
    SV_Target_1.w = _2879;
    discard_exit();
}


