#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3602;
float _3603;
float _3604;
float _3605;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _267 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _290 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _299 = ((_267.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _290.x;
    float _302 = ((_267.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _290.y;
    float _305 = ((_267.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _290.z;
    float _306 = _290.w * _267.w;
    vec4 _319 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = cbMtdParam._m0[16u].x + _319.x;
    vec4 _339 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _351 = (_250.z * 2.0) * (cbMtdParam._m0[14u].x + _339.z);
    float _369 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3614 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _376 = (_371 * _371) * (3.0 - (_371 * 2.0));
    vec4 _389 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _397 = (_250.x * 2.0) + (-1.0);
    float _398 = (_250.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3625 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _404 = sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))));
    float _411 = (cbMtdParam._m0[14u].z * ((_339.x * 2.0) + (-1.0))) + _397;
    float _412 = (cbMtdParam._m0[14u].z * ((_339.y * 2.0) + (-1.0))) + _398;
    float _415 = fma(_404, _235, fma(_412, _227 * TANGENT.x, (_213 * _205) * _411));
    float _418 = fma(_404, _236, fma(_412, _227 * TANGENT.y, (_213 * _206) * _411));
    float _421 = fma(_404, _237, fma(_412, _227 * TANGENT.z, (_213 * _207) * _411));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    float _426 = _425 * _415;
    float _427 = _425 * _418;
    float _428 = _425 * _421;
    float _3636 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _429 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _430 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _431 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _432 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _433 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _434 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    vec4 _516 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _518 = _516.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _824 = sqrt(((_502 * _502) + (_503 * _503)) + (_504 * _504));
        float _830 = (cbMatDynParam._m0[5u].x * _824) + cbMatDynParam._m0[5u].y;
        float _3702 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _835 = (cbMatDynParam._m0[5u].z * _824) + cbMatDynParam._m0[5u].w;
        float _3713 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _831)) + _831) < ((_518 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _533 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _535 = _533.w;
    float _554 = fma(_428, cbSceneParam._m0[5u].z, fma(_427, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _426));
    float _557 = fma(_428, cbSceneParam._m0[6u].z, fma(_427, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _426));
    float _560 = fma(_428, cbSceneParam._m0[7u].z, fma(_427, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _426));
    vec4 _562 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _564 = _562.x;
    float _576 = (((_562.y - _430) + (_562.w * _430)) * cbMtdParam._m0[3u].x) + _430;
    float _593 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_564 * _564)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _601 = (((cbMatDynParam._m0[15u].x - _434) * cbMatDynParam._m0[15u].w) * _593) + _434;
    float _609 = ((_593 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _576)) + _576;
    uint _633 = uint(roundEven(NORMAL.w)) * 13u;
    uint _635 = _633 + 9u;
    uint _636 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _642 = (cbMtdParam._m0[0u].x * _431) * cbInstanceData._m0[_636].x;
    float _643 = (cbMtdParam._m0[0u].y * _432) * cbInstanceData._m0[_636].y;
    float _644 = (cbMtdParam._m0[0u].z * _433) * cbInstanceData._m0[_636].z;
    float _3724 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _648 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _653 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _664 = (((_653.x - _601) + (_653.w * _601)) * cbMtdParam._m0[3u].x) + _601;
    float _677 = (cbMtdParam._m0[3u].x * (((_645 * _535) - _645) + _648.x)) + _645;
    float _678 = (cbMtdParam._m0[3u].x * (((_646 * _535) - _646) + _648.y)) + _646;
    float _679 = (cbMtdParam._m0[3u].x * (((_647 * _535) - _647) + _648.z)) + _647;
    vec4 _680 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _693 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_601 * (_431 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_601 * (_432 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_601 * (_433 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _680.z;
    float _697 = _693 * cbMatDynParam._m0[13u].w;
    float _707 = (_697 * (cbMatDynParam._m0[13u].x - _677)) + _677;
    float _708 = (_697 * (cbMatDynParam._m0[13u].y - _678)) + _678;
    float _709 = (_697 * (cbMatDynParam._m0[13u].z - _679)) + _679;
    float _717 = ((_693 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _664)) + _664;
    float _718 = 1.0 - _717;
    float _719 = _718 * _707;
    float _720 = _718 * _708;
    float _721 = _718 * _709;
    float _725 = (_707 + (-0.039999999105930328369140625)) * _717;
    float _726 = (_708 + (-0.039999999105930328369140625)) * _717;
    float _727 = (_709 + (-0.039999999105930328369140625)) * _717;
    float _728 = _725 + 0.039999999105930328369140625;
    float _729 = _726 + 0.039999999105930328369140625;
    float _730 = _727 + 0.039999999105930328369140625;
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _742 = _739.x * TEXCOORD_4;
    float _743 = dot(vec3(_426, _427, _428), vec3(_509, _510, _511));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _426) - _509;
    float _751 = (_746 * _427) - _510;
    float _752 = (_746 * _428) - _511;
    float _756 = abs(dot(vec3(_509, _510, _511), vec3(_426, _427, _428)));
    float _3757 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_609);
    float _770 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _776 = (1.0 - _770) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _777 = _770 * _758;
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _873 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _877 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _902 = _805 + _426;
        float _903 = _809 + _427;
        float _904 = _813 + _428;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_426, _427, _428), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3805 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_426, _427, _428), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3838 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_426, _427, _428), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3871 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1192 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1196 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1219 = _805 + _426;
        float _1220 = _809 + _427;
        float _1221 = _813 + _428;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_426, _427, _428), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3934 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_426, _427, _428), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3967 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_426, _427, _428), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4000 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = _1145;
        _1468 = _1145;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1157)) + _1157;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1158)) + _1158;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1159)) + _1159;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _750 * 0.5;
    float _1526 = _751 * 0.5;
    float _1527 = _752 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1565;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1576;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1567 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1580 = (_1576 * cbModelParam._m0[1u].x) + (_1565 * (1.0 - cbModelParam._m0[1u].x));
    float _1590 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _609);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1590 : min(cbModelParam._m0[25u].z, _1590));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1652 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1655 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1683 = frontier_phi_19_17_ladder;
        }
        float _1908;
        if (_1652 > 0.0)
        {
            _1908 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1908 = frontier_phi_28_24_ladder;
        }
        float _2165;
        if (_1655 > 0.0)
        {
            _2165 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2165 = frontier_phi_40_35_ladder;
        }
        float _2167 = isnan(_1908) ? _1683 : (isnan(_1683) ? _1908 : min(_1683, _1908));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1649) + _1638;
        float _2173 = (_2168 * _1652) + _1642;
        float _2174 = (_2168 * _1655) + _1646;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1591);
            frontier_phi_18_40_ladder = _2302.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2302.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2302.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_18_40_ladder_2;
        _1673 = frontier_phi_18_40_ladder_1;
        _1675 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1591);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _609);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1749 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1752 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1913;
        if (_1746 > 0.0)
        {
            _1913 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1913 = frontier_phi_30_26_ladder;
        }
        float _2192;
        if (_1749 > 0.0)
        {
            _2192 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2192 = frontier_phi_42_37_ladder;
        }
        float _2405;
        if (_1752 > 0.0)
        {
            _2405 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2405 = frontier_phi_51_48_ladder;
        }
        float _2407 = isnan(_2192) ? _1913 : (isnan(_1913) ? _2192 : min(_1913, _2192));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1746) + _1735;
        float _2413 = (_2408 * _1749) + _1739;
        float _2414 = (_2408 * _1752) + _1743;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_27_51_ladder = _2655.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2655.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2655.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_27_51_ladder_2;
        _1773 = frontier_phi_27_51_ladder_1;
        _1775 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1680);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1788 = (((_776 * _728) + _777) * _742) * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1790 = (((_776 * _729) + _777) * _742) * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1792 = (((_776 * _730) + _777) * _742) * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1795 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    vec4 _1809 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_530, _531));
    float _1811 = _1809.w;
    float _1823 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1811);
    float _1824 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1811);
    float _1825 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1811);
    uvec4 _1829 = floatBitsToUint(cbInstanceData._m0[_633 + 5u]);
    uint _1831 = _1829.x * 14u;
    uint _1832 = _1831 + 13u;
    float _1839 = _742 + (-1.0);
    float _1844 = (cbLight._m0[_1832].x * _1839) + 1.0;
    float _1845 = (cbLight._m0[_1832].y * _1839) + 1.0;
    float _1846 = (cbLight._m0[_1832].z * _1839) + 1.0;
    float _1847 = (cbLight._m0[_1832].w * _1839) + 1.0;
    uint _1848 = _1831 + 5u;
    float _1854 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1858 = _1831 + 4u;
    float _1867 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1871 = _1831 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_426, _427, _428));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_426, _427, _428));
    float _4136 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4147 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1848].x * _1854) * _1892) + (((cbLight._m0[_1858].x * _1823) * _1867) * _1890);
    float _1900 = ((_1854 * cbLight._m0[_1848].y) * _1892) + (((cbLight._m0[_1858].y * _1824) * _1867) * _1890);
    float _1901 = ((_1854 * cbLight._m0[_1848].z) * _1892) + (((cbLight._m0[_1858].z * _1825) * _1867) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1831 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1831 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1831 + 2u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4158 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1945 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2136 = _1831 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1831 + 3u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4174 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2155 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1963 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1918;
        _1965 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1920;
        _1967 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1922;
    }
    uint _1970 = _1831 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _609) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1831].x + _509;
    float _1986 = cbLight._m0[_1831].y + _510;
    float _1987 = cbLight._m0[_1831].z + _511;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1831].xyz));
    float _4190 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1999 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2000 = dot(vec3(_426, _427, _428), vec3(_1992, _1993, _1994));
    float _4212 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1992, _1993, _1994));
    float _4223 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2021 = 0.959999978542327880859375 - _725;
    float _2023 = 0.959999978542327880859375 - _726;
    float _2024 = 0.959999978542327880859375 - _727;
    float _2031 = 1.0 - _1984;
    float _2042 = (0.5 / (((_1999 * ((_1998 * _2031) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2031) + _1984) * _1998))) * _1998;
    float _4234 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2058 = _1831 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _609) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1871].x + _509;
    float _2072 = cbLight._m0[_1871].y + _510;
    float _2073 = cbLight._m0[_1871].z + _511;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1871].xyz));
    float _4245 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2085 = dot(vec3(_426, _427, _428), vec3(_2078, _2079, _2080));
    float _4256 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2078, _2079, _2080));
    float _4267 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2111 = 1.0 - _2070;
    float _2121 = (0.5 / (((_1999 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2111) + _2070) * _2084))) * _2084;
    float _4278 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2133 = (((((_2104 * _2021) + _728) * cbLight._m0[_2058].x) * _2123) * _1854) + ((((cbLight._m0[_1970].x * _1823) * ((_2020 * _2021) + _728)) * _2044) * _1867);
    float _2134 = (((((_2104 * _2023) + _729) * cbLight._m0[_2058].y) * _2123) * _1854) + ((((cbLight._m0[_1970].y * _1824) * ((_2020 * _2023) + _729)) * _2044) * _1867);
    float _2135 = (((((_2104 * _2024) + _730) * cbLight._m0[_2058].z) * _2123) * _1854) + ((((cbLight._m0[_1970].z * _1825) * ((_2020 * _2024) + _730)) * _2044) * _1867);
    float _2197;
    float _2199;
    float _2201;
    if (_1907)
    {
        _2197 = _2133;
        _2199 = _2134;
        _2201 = _2135;
    }
    else
    {
        uint _2203 = _1831 + 2u;
        uint _2207 = _1831 + 10u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _609) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _509;
        float _2224 = cbLight._m0[_2203].y + _510;
        float _2225 = cbLight._m0[_2203].z + _511;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2203].xyz));
        float _4289 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2237 = dot(vec3(_426, _427, _428), vec3(_2230, _2231, _2232));
        float _4300 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4311 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1999 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2263) + _2222) * _2236))) * _2236;
        float _4322 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2197 = (((((_2256 * _2021) + _728) * cbLight._m0[_2207].x) * _2275) * _2276) + _2133;
        _2199 = (((((_2256 * _2023) + _729) * cbLight._m0[_2207].y) * _2275) * _2276) + _2134;
        _2201 = (((((_2256 * _2024) + _730) * cbLight._m0[_2207].z) * _2275) * _2276) + _2135;
    }
    float _2311;
    float _2313;
    float _2315;
    if (_1925)
    {
        _2311 = _2197;
        _2313 = _2199;
        _2315 = _2201;
    }
    else
    {
        uint _2322 = _1831 + 3u;
        uint _2326 = _1831 + 11u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _609) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _509;
        float _2343 = cbLight._m0[_2322].y + _510;
        float _2344 = cbLight._m0[_2322].z + _511;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2322].xyz));
        float _4338 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2356 = dot(vec3(_426, _427, _428), vec3(_2349, _2350, _2351));
        float _4349 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4360 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_1999 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2382) + _2341) * _2355))) * _2355;
        float _4371 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2311 = (((((_2375 * _2021) + _728) * cbLight._m0[_2326].x) * _2394) * _2395) + _2197;
        _2313 = (((((_2375 * _2023) + _729) * cbLight._m0[_2326].y) * _2394) * _2395) + _2199;
        _2315 = (((((_2375 * _2024) + _730) * cbLight._m0[_2326].z) * _2394) * _2395) + _2201;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1829.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            uint _2827 = 0u;
            uint _2836;
            bool _2837;
            for (;;)
            {
                _2836 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                _2837 = _2836 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2837)
                {
                    frontier_phi_68_pred = _2823;
                    frontier_phi_68_pred_1 = _2826;
                    frontier_phi_68_pred_2 = _2825;
                    frontier_phi_68_pred_3 = _2824;
                    frontier_phi_68_pred_4 = _2822;
                    frontier_phi_68_pred_5 = _2821;
                }
                else
                {
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    uint _2972;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2836;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    for (;;)
                    {
                        uint _2976 = uint(findLSB(_2972)) + (_2827 << 5u);
                        uint _2973 = (_2972 + 4294967295u) & _2972;
                        uint _2978 = _2976 * 48u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2998 = (_2976 * 48u) + 4u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3017 = (_2976 * 48u) + 8u;
                        vec3 _3028 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x));
                        float _3032 = _2992.x - _2471;
                        float _3033 = _2992.y - _2472;
                        float _3034 = _2992.z - _2473;
                        float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                        float _3038 = inversesqrt(_3035);
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3042 = dot(vec3(_554, _557, _560), vec3(_3039, _3040, _3041));
                        float _3047 = 1.0 - (_3035 * _2992.w);
                        float _4397 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3049 = sqrt(_3035) * _3011.w;
                        float _3052 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _3042) + _3053;
                        float _3059 = _3049 * _3049;
                        float _3063 = ((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3048) / ((_3059 * 0.699999988079071044921875) + 1.0);
                        float _3067 = (-0.0) - _2471;
                        float _3068 = (-0.0) - _2472;
                        float _3069 = (-0.0) - _2473;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3084 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                        float _3085 = 1.0 - _758;
                        float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                        float _3093 = _3092 * _3092;
                        float _3094 = _3093 * _3093;
                        float _3095 = _3074 + _3039;
                        float _3096 = _3075 + _3040;
                        float _3097 = _3076 + _3041;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3105 = dot(vec3(_554, _557, _560), vec3(_3074, _3075, _3076));
                        float _4413 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3109 = dot(vec3(_554, _557, _560), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                        float _4424 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                        float _3117 = _3052 * _3093;
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3042) + _3118;
                        float _4435 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3123 = 1.0 - _3093;
                        float _3133 = (0.5 / (((_3122 * ((_3108 * _3123) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3093) * _3108))) * _3122;
                        float _4446 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3144 = (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3116 * _3116) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125))) * _3048;
                        _2896 = (_3063 * _3011.x) + _2969;
                        _2897 = (_3063 * _3011.y) + _2970;
                        _2898 = (_3063 * _3011.z) + _2971;
                        _2893 = (_3144 * _3028.x) + _2966;
                        _2894 = (_3144 * _3028.y) + _2967;
                        _2895 = (_3144 * _3028.z) + _2968;
                        if (_2973 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2973;
                        }
                    }
                    frontier_phi_68_pred = _2895;
                    frontier_phi_68_pred_1 = _2898;
                    frontier_phi_68_pred_2 = _2897;
                    frontier_phi_68_pred_3 = _2896;
                    frontier_phi_68_pred_4 = _2894;
                    frontier_phi_68_pred_5 = _2893;
                }
                _2665 = frontier_phi_68_pred;
                _2671 = frontier_phi_68_pred_1;
                _2669 = frontier_phi_68_pred_2;
                _2667 = frontier_phi_68_pred_3;
                _2663 = frontier_phi_68_pred_4;
                _2661 = frontier_phi_68_pred_5;
                uint _2828 = _2827 + 1u;
                if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2821 = _2661;
                    _2822 = _2663;
                    _2823 = _2665;
                    _2824 = _2667;
                    _2825 = _2669;
                    _2826 = _2671;
                    _2827 = _2828;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((4294967295u << _2677) & _2517) == 0u)
        {
            _2789 = _2660;
            _2791 = _2662;
            _2793 = _2664;
            _2795 = _2666;
            _2797 = _2668;
            _2799 = _2670;
        }
        else
        {
            float _2814 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2815 = _2814 * _2471;
            float _2816 = _2814 * _2472;
            float _2817 = _2814 * _2473;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2949 = _2660;
                float _2950 = _2662;
                float _2951 = _2664;
                float _2952 = _2666;
                float _2953 = _2668;
                float _2954 = _2670;
                uint _2955 = _2677;
                uint _2964;
                bool _2965;
                for (;;)
                {
                    _2964 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                    _2965 = _2964 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2965)
                    {
                        frontier_phi_79_pred = _2954;
                        frontier_phi_79_pred_1 = _2953;
                        frontier_phi_79_pred_2 = _2952;
                        frontier_phi_79_pred_3 = _2951;
                        frontier_phi_79_pred_4 = _2950;
                        frontier_phi_79_pred_5 = _2949;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3171 = _2949;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        uint _3177 = _2964;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3188 = ((_2955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3233 = (_3188 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3188 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3188 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3188 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_2473, _3297.z, fma(_2472, _3297.y, _3297.x * _2471)) + _3297.w;
                            _3310 = !((fma(_2473, _3278.z, fma(_2472, _3278.y, _3278.x * _2471)) + _3278.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3203.x - _2471;
                                float _3338 = _3203.y - _2472;
                                float _3339 = _3203.z - _2473;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3204 * _3204));
                                float _4457 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3355 = sqrt(_3340) * _3219.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_554, _557, _560))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_2473, _3246.z, fma(_2472, _3246.y, _3246.x * _2471)) + _3246.w) / _3309;
                                float _3369 = (fma(_2473, _3262.z, fma(_2472, _3262.y, _3262.x * _2471)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4473 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _758;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2815;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_554, _557, _560), vec3((-0.0) - _2815, (-0.0) - _2816, (-0.0) - _2817));
                                float _4484 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3412 = dot(vec3(_554, _557, _560), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4495 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_554, _557, _560), vec3(_3344, _3345, _3346))) + _3421;
                                float _4506 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4517 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3375 * _3219.z;
                                frontier_phi_85_pred_1 = _3375 * _3219.y;
                                frontier_phi_85_pred_2 = _3375 * _3219.x;
                                frontier_phi_85_pred_3 = _3449 * _3231.z;
                                frontier_phi_85_pred_4 = _3449 * _3231.y;
                                frontier_phi_85_pred_5 = _3449 * _3231.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3458 = frontier_phi_85_pred;
                            _3457 = frontier_phi_85_pred_1;
                            _3456 = frontier_phi_85_pred_2;
                            _3455 = frontier_phi_85_pred_3;
                            _3454 = frontier_phi_85_pred_4;
                            _3453 = frontier_phi_85_pred_5;
                            _3161 = _3456 + _3174;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3158 = _3453 + _3171;
                            _3159 = _3454 + _3172;
                            _3160 = _3455 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3163;
                        frontier_phi_79_pred_1 = _3162;
                        frontier_phi_79_pred_2 = _3161;
                        frontier_phi_79_pred_3 = _3160;
                        frontier_phi_79_pred_4 = _3159;
                        frontier_phi_79_pred_5 = _3158;
                    }
                    _2800 = frontier_phi_79_pred;
                    _2798 = frontier_phi_79_pred_1;
                    _2796 = frontier_phi_79_pred_2;
                    _2794 = frontier_phi_79_pred_3;
                    _2792 = frontier_phi_79_pred_4;
                    _2790 = frontier_phi_79_pred_5;
                    uint _2956 = _2955 + 1u;
                    if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2949 = _2790;
                        _2950 = _2792;
                        _2951 = _2794;
                        _2952 = _2796;
                        _2953 = _2798;
                        _2954 = _2800;
                        _2955 = _2956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2796;
                frontier_phi_60_61_ladder_1 = _2800;
                frontier_phi_60_61_ladder_2 = _2798;
                frontier_phi_60_61_ladder_3 = _2794;
                frontier_phi_60_61_ladder_4 = _2792;
                frontier_phi_60_61_ladder_5 = _2790;
            }
            else
            {
                frontier_phi_60_61_ladder = _2666;
                frontier_phi_60_61_ladder_1 = _2670;
                frontier_phi_60_61_ladder_2 = _2668;
                frontier_phi_60_61_ladder_3 = _2664;
                frontier_phi_60_61_ladder_4 = _2662;
                frontier_phi_60_61_ladder_5 = _2660;
            }
            _2789 = frontier_phi_60_61_ladder_5;
            _2791 = frontier_phi_60_61_ladder_4;
            _2793 = frontier_phi_60_61_ladder_3;
            _2795 = frontier_phi_60_61_ladder;
            _2797 = frontier_phi_60_61_ladder_2;
            _2799 = frontier_phi_60_61_ladder_1;
        }
        float _2804 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2529 = (_2804 * _2795) + _1963;
        _2531 = (_2804 * _2797) + _1965;
        _2533 = (_2804 * _2799) + _1967;
        _2535 = ((_2789 * _728) * _2804) + _2311;
        _2537 = ((_2791 * _729) * _2804) + _2313;
        _2539 = ((_2793 * _730) * _2804) + _2315;
    }
    else
    {
        _2529 = _1963;
        _2531 = _1965;
        _2533 = _1967;
        _2535 = _2311;
        _2537 = _2313;
        _2539 = _2315;
    }
    uint _2545 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _2555 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _376) * _389.x) * cbInstanceData._m0[_2545].x;
    float _2560 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _376) * _389.y) * cbInstanceData._m0[_2545].y;
    float _2565 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _376) * _389.z) * cbInstanceData._m0[_2545].z;
    float _4533 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4544 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4555 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4566 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _2583 = (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2529 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _742))) + ((_2535 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1580)) * cbPerFrame._m0[3u].x)) + _2555;
    float _2585 = (_2560 + ((_2537 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1580)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2531 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _742)));
    float _2587 = (_2565 + ((_2539 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1580)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2533 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _742)));
    float _2588 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2589 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2590 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2596 = cbMtdParam._m0[2u].x * _2555;
    float _2597 = cbMtdParam._m0[2u].y * _2560;
    float _2598 = cbMtdParam._m0[2u].z * _2565;
    float _4592 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2600 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2605 = cbInstanceData._m0[_633 + 6u].w * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)));
    float _2610 = _530 / cbSceneParam._m0[86u].x;
    float _2611 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2627 = _2625.x;
    float _2628 = _2625.y;
    float _2629 = _2625.z;
    float _2630 = _2625.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2686 = _2685 / _450;
        float _2697 = _2686 * _502;
        float _2698 = _503 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _504;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2906;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2906 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2850 = 1.0 / cbSceneParam._m0[80u].x;
            float _2851 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2852 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            _2906 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2861 - _2862) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))))) * _2850)) - ((exp2(_2720 * _2861) - exp2(_2720 * _2862)) * _2850))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2908 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, 1.0), 0.0);
        float _2917 = exp2((_2906 * (-1.44269502162933349609375)) * (1.0 - _2908.w));
        float _2918 = log2(_2917);
        float _2934 = log2(_2630);
        _2722 = (exp2(_2934 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].x)) * _2908.x) / cbSceneParam._m0[78u].x)) + _2627;
        _2724 = (exp2(_2934 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].y)) * _2908.y) / cbSceneParam._m0[78u].y)) + _2628;
        _2726 = (exp2(_2934 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].z)) * _2908.z) / cbSceneParam._m0[78u].z)) + _2629;
        _2728 = _2917 * _2630;
    }
    else
    {
        _2722 = _2627;
        _2724 = _2628;
        _2726 = _2629;
        _2728 = _2630;
    }
    bool _2944;
    vec4 _2738;
    vec4 _2760;
    float _2762;
    float _2766;
    float _2767;
    float _2768;
    float _2771;
    float _2774;
    float _2777;
    float _2778;
    bool _2788;
    for (;;)
    {
        _2738 = cbMatDynParam._m0[0u];
        float _2740 = roundEven(_2738.y);
        bool _2741 = _2740 == 3.0;
        float _2742 = log2(_2728);
        float _2746 = exp2(_2742 * cbSceneParam._m0[78u].x);
        float _2747 = exp2(_2742 * cbSceneParam._m0[78u].y);
        float _2748 = exp2(_2742 * cbSceneParam._m0[78u].z);
        float _2749 = _2746 * _2588;
        float _2750 = _2747 * _2589;
        float _2751 = _2748 * _2590;
        float _2758 = _518 + (-0.5);
        _2760 = cbMtdParam._m0[1u];
        _2762 = _2760.y * _2758;
        float _2765 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2766 = _2765 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
        _2767 = _2765 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
        _2768 = _2765 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
        _2771 = ((_2596 * _2600) * _2746) * _2765;
        _2774 = ((_2597 * _2600) * _2747) * _2765;
        _2777 = ((_2598 * _2600) * _2748) * _2765;
        _2778 = _2758 * 0.999000012874603271484375;
        _2788 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2788)
        {
            if ((cbInstanceData._m0[_633 + 7u].x + _2778) < 0.5)
            {
                _2944 = true;
                break;
            }
        }
        uint _2885 = _635 + uint(_2738.w);
        if ((cbInstanceData._m0[_2885].w < 1.0) && ((cbInstanceData._m0[_2885].w + _2778) < 0.5))
        {
            _2944 = true;
            break;
        }
        if ((_2762 + _306) < _2760.x)
        {
            _2944 = true;
            break;
        }
        _2944 = false;
        break;
    }
    float _3149;
    if (_2944)
    {
        discard_state = true;
        _3149 = 0.0;
    }
    else
    {
        _3149 = _2605;
    }
    SV_Target.x = _2766;
    SV_Target.y = _2767;
    SV_Target.z = _2768;
    SV_Target.w = _3149;
    SV_Target_1.x = _2771;
    SV_Target_1.y = _2774;
    SV_Target_1.z = _2777;
    SV_Target_1.w = _2605;
    discard_exit();
}


