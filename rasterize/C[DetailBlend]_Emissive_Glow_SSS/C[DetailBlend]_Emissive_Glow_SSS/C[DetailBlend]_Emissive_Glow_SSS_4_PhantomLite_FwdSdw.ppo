#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _324 = exp2(log2(_317 * 22.0) * 260.0);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _350 = cbMtdParam._m0[10u].x * _340.x;
    float _351 = cbMtdParam._m0[10u].y * _340.y;
    float _352 = cbMtdParam._m0[10u].z * _340.z;
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _391 = exp2(log2(1.0 - _312.w) * 8.0);
    vec4 _403 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _428 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _436 = (((((cbMtdParam._m0[9u].x * _364.x) - _350) * _326) + _350) * 4.55000019073486328125) * _428.x;
    float _438 = (((((cbMtdParam._m0[9u].y * _364.y) - _351) * _326) + _351) * 4.55000019073486328125) * _428.y;
    float _440 = (((((cbMtdParam._m0[9u].z * _364.z) - _352) * _326) + _352) * 4.55000019073486328125) * _428.z;
    float _447 = (((cbMtdParam._m0[13u].x * _403.x) - _436) * _391) + _436;
    float _448 = (((cbMtdParam._m0[13u].y * _403.y) - _438) * _391) + _438;
    float _449 = (((cbMtdParam._m0[13u].z * _403.z) - _440) * _391) + _440;
    float _450 = _428.w * _364.w;
    float _480 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _326) + cbMtdParam._m0[17u].x;
    float _483 = ((cbMtdParam._m0[15u].z - _480) * _391) + _480;
    vec4 _495 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _504 = cbMtdParam._m0[14u].y + _495.z;
    vec4 _516 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _538 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _551 = (((_326 * (_317 + (-0.5))) + 0.5) * 2.0) * ((((_516.z - _504) + cbMtdParam._m0[14u].x) * _326) + _504);
    float _555 = (((_538.z - _551) + cbMtdParam._m0[15u].y) * _391) + _551;
    float _570 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4040 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _576 = (_571 * _571) * (3.0 - (_571 * 2.0));
    vec4 _589 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _597 = (_312.x * 2.0) + (-1.0);
    float _598 = (_312.y * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _4051 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))));
    float _609 = ((_516.x - _497) * _326) + _497;
    float _610 = ((_516.y - _498) * _326) + _498;
    float _623 = (cbMtdParam._m0[14u].z * (((((_538.x - _609) * _391) + _609) * 2.0) + (-1.0))) + _597;
    float _624 = (cbMtdParam._m0[14u].z * (((((_538.y - _610) * _391) + _610) * 2.0) + (-1.0))) + _598;
    float _627 = fma(_604, _241, fma(_624, _233 * TANGENT.x, (_219 * _211) * _623));
    float _630 = fma(_604, _242, fma(_624, _233 * TANGENT.y, (_219 * _212) * _623));
    float _633 = fma(_604, _243, fma(_624, _233 * TANGENT.z, (_219 * _213) * _623));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _4062 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _641 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _642 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _643 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _644 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _645 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _646 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _654 = cbMatDynParam._m0[9u].x * _643;
    float _655 = cbMatDynParam._m0[9u].y * _644;
    float _656 = cbMatDynParam._m0[9u].z * _645;
    float _663 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _664 = _663 * _297;
    float _665 = _663 * _298;
    float _666 = _663 * _299;
    float _667 = dot(vec3(_638, _639, _640), vec3(_664, _665, _666));
    float _673 = abs(exp2(log2(_667) * cbMatDynParam._m0[12u].x));
    float _674 = isnan(0.100000001490116119384765625) ? _673 : (isnan(_673) ? 0.100000001490116119384765625 : max(_673, 0.100000001490116119384765625));
    float _680 = ((isnan(0.699999988079071044921875) ? _674 : (isnan(_674) ? 0.699999988079071044921875 : min(_674, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _702 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4138 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4149 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _709 = (((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) - _706) * _680) + _706;
    float _728 = dot(vec3(_638, _639, _640), vec3(0.0, -1.0, 0.0));
    float _4160 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _738 = (_731 * _643) * cbMatDynParam._m0[11u].x;
    float _740 = (_731 * _644) * cbMatDynParam._m0[11u].y;
    float _742 = (_731 * _645) * cbMatDynParam._m0[11u].z;
    float _749 = dot(vec3(_664, _665, _666), vec3(_638, _639, _640));
    float _752 = _749 * 2.0;
    float _762 = dot(vec3((-0.0) - (_664 - (_752 * _638)), (-0.0) - (_665 - (_752 * _639)), (-0.0) - (_666 - (_752 * _640))), vec3(0.0, -1.0, 0.0));
    float _4171 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _769 = exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 4.0);
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _804 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _806 = _804.w;
    float _824 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _827 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _830 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    vec4 _832 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _834 = _832.x;
    float _846 = (((_832.y - _642) + (_832.w * _642)) * cbMtdParam._m0[3u].x) + _642;
    vec4 _847 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _863 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_834 * _834)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _847.z;
    float _871 = (((cbMatDynParam._m0[15u].x - _646) * cbMatDynParam._m0[15u].w) * _863) + _646;
    float _879 = ((_863 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _846)) + _846;
    uint _903 = uint(roundEven(NORMAL.w)) * 13u;
    uint _904 = _903 + 9u;
    uint _905 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * _654) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * _655) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * _656) * cbInstanceData._m0[_905].z;
    float _4182 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    vec4 _917 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.x - _871) + (_922.w * _871)) * cbMtdParam._m0[3u].x) + _871;
    float _946 = (cbMtdParam._m0[3u].x * (((_914 * _806) - _914) + _917.x)) + _914;
    float _947 = (cbMtdParam._m0[3u].x * (((_915 * _806) - _915) + _917.y)) + _915;
    float _948 = (cbMtdParam._m0[3u].x * (((_916 * _806) - _916) + _917.z)) + _916;
    float _962 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_871 * (_654 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_655 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_656 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _966 = _962 * cbMatDynParam._m0[13u].w;
    float _976 = (_966 * (cbMatDynParam._m0[13u].x - _946)) + _946;
    float _977 = (_966 * (cbMatDynParam._m0[13u].y - _947)) + _947;
    float _978 = (_966 * (cbMatDynParam._m0[13u].z - _948)) + _948;
    float _986 = ((_962 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _933)) + _933;
    float _987 = 1.0 - _986;
    float _988 = _987 * _976;
    float _989 = _987 * _977;
    float _990 = _987 * _978;
    float _994 = (_976 + (-0.039999999105930328369140625)) * _986;
    float _995 = (_977 + (-0.039999999105930328369140625)) * _986;
    float _996 = (_978 + (-0.039999999105930328369140625)) * _986;
    float _997 = _994 + 0.039999999105930328369140625;
    float _998 = _995 + 0.039999999105930328369140625;
    float _999 = _996 + 0.039999999105930328369140625;
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _1011 = _1008.x * TEXCOORD_4;
    float _1012 = _667 * 2.0;
    float _1016 = (_1012 * _638) - _664;
    float _1017 = (_1012 * _639) - _665;
    float _1018 = (_1012 * _640) - _666;
    float _1019 = abs(_749);
    float _4215 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_879);
    float _1032 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1021;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1106 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1110 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1133 = _1067 + _638;
        float _1134 = _1071 + _639;
        float _1135 = _1075 + _640;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_638, _639, _640), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4263 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_638, _639, _640), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4296 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_638, _639, _640), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4329 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1420 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1424 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1447 = _1067 + _638;
        float _1448 = _1071 + _639;
        float _1449 = _1075 + _640;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_638, _639, _640), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4392 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_638, _639, _640), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4425 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_638, _639, _640), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4458 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _1016 * 0.5;
    float _1754 = _1017 * 0.5;
    float _1755 = _1018 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1880 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1883 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1911 = frontier_phi_16_14_ladder;
        }
        float _2084;
        if (_1880 > 0.0)
        {
            _2084 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2084 = frontier_phi_25_21_ladder;
        }
        float _2379;
        if (_1883 > 0.0)
        {
            _2379 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2379 = frontier_phi_37_32_ladder;
        }
        float _2381 = isnan(_2084) ? _1911 : (isnan(_1911) ? _2084 : min(_1911, _2084));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1877) + _1866;
        float _2387 = (_2382 * _1880) + _1870;
        float _2388 = (_2382 * _1883) + _1874;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_15_37_ladder = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2533.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2533.z * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_15_37_ladder_1;
        _1901 = frontier_phi_15_37_ladder;
        _1903 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1977 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1980 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2089;
        if (_1974 > 0.0)
        {
            _2089 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2089 = frontier_phi_27_23_ladder;
        }
        float _2406;
        if (_1977 > 0.0)
        {
            _2406 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2406 = frontier_phi_39_34_ladder;
        }
        float _2744;
        if (_1980 > 0.0)
        {
            _2744 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2744 = frontier_phi_49_46_ladder;
        }
        float _2746 = isnan(_2406) ? _2089 : (isnan(_2089) ? _2406 : min(_2089, _2406));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1974) + _1963;
        float _2752 = (_2747 * _1977) + _1967;
        float _2753 = (_2747 * _1980) + _1971;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_24_49_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_24_49_ladder_2;
        _2001 = frontier_phi_24_49_ladder_1;
        _2003 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1908);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2016 = (((_1038 * _997) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_1999 - _1899)) + _1899);
    float _2018 = (((_1038 * _998) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_2001 - _1901)) + _1901);
    float _2020 = (((_1038 * _999) + _1039) * _1011) * ((cbModelParam._m0[1u].w * (_2003 - _1903)) + _1903);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2076 = _2063 / _2075;
    float _2077 = _2067 / _2075;
    float _2078 = _2071 / _2075;
    float _2225;
    float _2226;
    float _2227;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2105 = ((uint(_2078 > cbSceneParam._m0[59u].y) + uint(_2078 > cbSceneParam._m0[59u].x)) + uint(_2078 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2106 = _2105 + 43u;
        uint _2114 = _2105 + 44u;
        uint _2122 = _2105 + 45u;
        uint _2130 = _2105 + 46u;
        float _2141 = fma(_2075, cbSceneParam._m0[_2106].w, fma(_2071, cbSceneParam._m0[_2106].z, fma(_2067, cbSceneParam._m0[_2106].y, _2063 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2075, cbSceneParam._m0[_2114].w, fma(_2071, cbSceneParam._m0[_2114].z, fma(_2067, cbSceneParam._m0[_2114].y, _2063 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2075, cbSceneParam._m0[_2130].w, fma(_2071, cbSceneParam._m0[_2130].z, fma(_2067, cbSceneParam._m0[_2130].y, _2063 * cbSceneParam._m0[_2130].x)));
        float _2158 = cbSceneParam._m0[33u].z * _2153;
        float _2160 = cbSceneParam._m0[33u].w * _2153;
        float _2163 = fma(_2075, cbSceneParam._m0[_2122].w, fma(_2071, cbSceneParam._m0[_2122].z, fma(_2067, cbSceneParam._m0[_2122].y, _2063 * cbSceneParam._m0[_2122].x))) / _2153;
        float _2211 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
        float _4584 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2218 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 + _2141) / _2153, (_2160 + _2145) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2141) / _2153, (_2145 - _2158) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2158) / _2153, (_2145 - _2160) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2160) / _2153, (_2158 + _2145) / _2153), _2163), 0.0)).x), vec4(0.25)));
        _2225 = 1.0 - (_2218 * cbSceneParam._m0[34u].x);
        _2226 = 1.0 - (_2218 * cbSceneParam._m0[34u].y);
        _2227 = 1.0 - (_2218 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2225 = 1.0;
        _2226 = 1.0;
        _2227 = 1.0;
    }
    float _2291;
    float _2293;
    float _2295;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2279 = fma(_2075, cbSceneParam._m0[63u].w, fma(_2071, cbSceneParam._m0[63u].z, fma(_2067, cbSceneParam._m0[63u].y, _2063 * cbSceneParam._m0[63u].x)));
        float _2280 = fma(_2075, cbSceneParam._m0[60u].w, fma(_2071, cbSceneParam._m0[60u].z, fma(_2067, cbSceneParam._m0[60u].y, _2063 * cbSceneParam._m0[60u].x))) / _2279;
        float _2281 = fma(_2075, cbSceneParam._m0[61u].w, fma(_2071, cbSceneParam._m0[61u].z, fma(_2067, cbSceneParam._m0[61u].y, _2063 * cbSceneParam._m0[61u].x))) / _2279;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2280 >= cbSceneParam._m0[64u].x) && (_2281 >= cbSceneParam._m0[64u].y)) && (_2280 <= cbSceneParam._m0[64u].z)) && (_2281 <= cbSceneParam._m0[64u].w))
        {
            float _2419 = fma(_2075, cbSceneParam._m0[62u].w, fma(_2071, cbSceneParam._m0[62u].z, fma(_2067, cbSceneParam._m0[62u].y, _2063 * cbSceneParam._m0[62u].x))) / _2279;
            float _2423 = isnan(cbSceneParam._m0[41u].w) ? _2419 : (isnan(_2419) ? cbSceneParam._m0[41u].w : max(_2419, cbSceneParam._m0[41u].w));
            float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
            float _4600 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
            float _2473 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2280, cbSceneParam._m0[33u].w + _2281), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2280, _2281 - cbSceneParam._m0[33u].z), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].z, _2281 - cbSceneParam._m0[33u].w), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2281), _2423), 0.0)).x), vec4(0.25)));
            float _2477 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
            float _2478 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
            float _2479 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_36_35_ladder_1 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_36_35_ladder_2 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
        }
        else
        {
            frontier_phi_36_35_ladder = _2226;
            frontier_phi_36_35_ladder_1 = _2227;
            frontier_phi_36_35_ladder_2 = _2225;
        }
        _2291 = frontier_phi_36_35_ladder_2;
        _2293 = frontier_phi_36_35_ladder;
        _2295 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2291 = _2225;
        _2293 = _2226;
        _2295 = _2227;
    }
    uvec4 _2300 = floatBitsToUint(cbInstanceData._m0[_903 + 5u]);
    uint _2302 = _2300.x * 14u;
    uint _2303 = _2302 + 13u;
    float _2310 = _1011 + (-1.0);
    float _2315 = (cbLight._m0[_2303].x * _2310) + 1.0;
    float _2316 = (cbLight._m0[_2303].y * _2310) + 1.0;
    float _2317 = (cbLight._m0[_2303].z * _2310) + 1.0;
    float _2318 = (cbLight._m0[_2303].w * _2310) + 1.0;
    uint _2319 = _2302 + 5u;
    float _2325 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2329 = _2302 + 4u;
    float _2338 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2342 = _2302 | 1u;
    float _2353 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_638, _639, _640));
    float _2356 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_638, _639, _640));
    float _4636 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _4647 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * 0.3183098733425140380859375;
    float _2363 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2370 = ((cbLight._m0[_2319].x * _2325) * _2363) + (((cbLight._m0[_2329].x * _2291) * _2338) * _2361);
    float _2371 = ((_2325 * cbLight._m0[_2319].y) * _2363) + (((cbLight._m0[_2329].y * _2293) * _2338) * _2361);
    float _2372 = ((_2325 * cbLight._m0[_2319].z) * _2363) + (((cbLight._m0[_2329].z * _2295) * _2338) * _2361);
    uvec4 _2376 = floatBitsToUint(cbLight._m0[_2302 + 12u]);
    bool _2378 = _2376.x == 0u;
    float _2480;
    float _2482;
    float _2484;
    if (_2378)
    {
        _2480 = _2370;
        _2482 = _2371;
        _2484 = _2372;
    }
    else
    {
        uint _2488 = _2302 + 6u;
        float _2504 = (dot(vec3(cbLight._m0[_2302 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2505 = _2504 * _2504;
        float _4658 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2506 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2507 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2480 = (((cbLight._m0[_2488].x * 0.3183098733425140380859375) * _2506) * _2507) + _2370;
        _2482 = (((cbLight._m0[_2488].y * 0.3183098733425140380859375) * _2506) * _2507) + _2371;
        _2484 = (((cbLight._m0[_2488].z * 0.3183098733425140380859375) * _2506) * _2507) + _2372;
    }
    bool _2487 = _2376.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2487)
    {
        _2542 = _2480;
        _2544 = _2482;
        _2546 = _2484;
    }
    else
    {
        uint _2715 = _2302 + 7u;
        float _2731 = (dot(vec3(cbLight._m0[_2302 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2732 = _2731 * _2731;
        float _4674 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2733 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2734 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2542 = (((cbLight._m0[_2715].x * 0.3183098733425140380859375) * _2733) * _2734) + _2480;
        _2544 = (((cbLight._m0[_2715].y * 0.3183098733425140380859375) * _2733) * _2734) + _2482;
        _2546 = (((cbLight._m0[_2715].z * 0.3183098733425140380859375) * _2733) * _2734) + _2484;
    }
    uint _2549 = _2302 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _879) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2302].x + _664;
    float _2565 = cbLight._m0[_2302].y + _665;
    float _2566 = cbLight._m0[_2302].z + _666;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2302].xyz));
    float _4690 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _4701 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2578 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2579 = dot(vec3(_638, _639, _640), vec3(_2571, _2572, _2573));
    float _4712 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2571, _2572, _2573));
    float _4723 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
    float _2600 = 0.959999978542327880859375 - _994;
    float _2602 = 0.959999978542327880859375 - _995;
    float _2603 = 0.959999978542327880859375 - _996;
    float _2610 = 1.0 - _2563;
    float _2621 = (0.5 / (((_2578 * ((_2577 * _2610) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2610) + _2563) * _2577))) * _2577;
    float _4734 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2637 = _2302 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _879) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2342].x + _664;
    float _2651 = cbLight._m0[_2342].y + _665;
    float _2652 = cbLight._m0[_2342].z + _666;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2342].xyz));
    float _4745 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2664 = dot(vec3(_638, _639, _640), vec3(_2657, _2658, _2659));
    float _4756 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2657, _2658, _2659));
    float _4767 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
    float _2690 = 1.0 - _2649;
    float _2700 = (0.5 / (((_2578 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2690) + _2649) * _2663))) * _2663;
    float _4778 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2712 = (((((_2683 * _2600) + _997) * cbLight._m0[_2637].x) * _2702) * _2325) + ((((cbLight._m0[_2549].x * _2291) * ((_2599 * _2600) + _997)) * _2623) * _2338);
    float _2713 = (((((_2683 * _2602) + _998) * cbLight._m0[_2637].y) * _2702) * _2325) + ((((cbLight._m0[_2549].y * _2293) * ((_2599 * _2602) + _998)) * _2623) * _2338);
    float _2714 = (((((_2683 * _2603) + _999) * cbLight._m0[_2637].z) * _2702) * _2325) + ((((cbLight._m0[_2549].z * _2295) * ((_2599 * _2603) + _999)) * _2623) * _2338);
    float _2770;
    float _2772;
    float _2774;
    if (_2378)
    {
        _2770 = _2712;
        _2772 = _2713;
        _2774 = _2714;
    }
    else
    {
        uint _2776 = _2302 + 2u;
        uint _2780 = _2302 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _879) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _664;
        float _2797 = cbLight._m0[_2776].y + _665;
        float _2798 = cbLight._m0[_2776].z + _666;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2776].xyz));
        float _4789 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2810 = dot(vec3(_638, _639, _640), vec3(_2803, _2804, _2805));
        float _4800 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4811 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2578 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2836) + _2795) * _2809))) * _2809;
        float _4822 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2770 = (((((_2829 * _2600) + _997) * cbLight._m0[_2780].x) * _2848) * _2849) + _2712;
        _2772 = (((((_2829 * _2602) + _998) * cbLight._m0[_2780].y) * _2848) * _2849) + _2713;
        _2774 = (((((_2829 * _2603) + _999) * cbLight._m0[_2780].z) * _2848) * _2849) + _2714;
    }
    float _2880;
    float _2882;
    float _2884;
    if (_2487)
    {
        _2880 = _2770;
        _2882 = _2772;
        _2884 = _2774;
    }
    else
    {
        uint _2891 = _2302 + 3u;
        uint _2895 = _2302 + 11u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _879) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _664;
        float _2912 = cbLight._m0[_2891].y + _665;
        float _2913 = cbLight._m0[_2891].z + _666;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2891].xyz));
        float _4838 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2925 = dot(vec3(_638, _639, _640), vec3(_2918, _2919, _2920));
        float _4849 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4860 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2578 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2951) + _2910) * _2924))) * _2924;
        float _4871 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2880 = (((((_2944 * _2600) + _997) * cbLight._m0[_2895].x) * _2963) * _2964) + _2770;
        _2882 = (((((_2944 * _2602) + _998) * cbLight._m0[_2895].y) * _2963) * _2964) + _2772;
        _2884 = (((((_2944 * _2603) + _999) * cbLight._m0[_2895].z) * _2963) * _2964) + _2774;
    }
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_2300.y == 0u)
    {
        uvec4 _2985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2986 = _2985.x;
        uint _2997 = uint((float(_2985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2986))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2986)));
        float _3007 = (log2(_2078 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3008 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        uint _3011 = uint(isnan(14.0) ? _3008 : (isnan(_3008) ? 14.0 : min(_3008, 14.0)));
        uvec4 _3016 = texelFetch(g_lightClusterGridBuffer, int(((_3011 << 2u) + (_2997 << 6u)) >> 2u));
        uint _3017 = _3016.x;
        uint _3018 = _2985.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3018 >> 4u) & 15u)) + 4294967295u) & _3017) == 0u) || ((_3018 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            uint _3291 = 0u;
            uint _3300;
            bool _3301;
            for (;;)
            {
                _3300 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                _3301 = _3300 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3301)
                {
                    frontier_phi_68_pred = _3290;
                    frontier_phi_68_pred_1 = _3289;
                    frontier_phi_68_pred_2 = _3288;
                    frontier_phi_68_pred_3 = _3286;
                    frontier_phi_68_pred_4 = _3285;
                    frontier_phi_68_pred_5 = _3287;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3300;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3291 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2076;
                        float _3476 = _3435.y - _2077;
                        float _3477 = _3435.z - _2078;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_824, _827, _830), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4897 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3505 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3509 = (-0.0) - _2076;
                        float _3510 = (-0.0) - _2077;
                        float _3511 = (-0.0) - _2078;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3516 = _3515 * _3509;
                        float _3517 = _3515 * _3510;
                        float _3518 = _3515 * _3511;
                        float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3526 = 1.0 - _1021;
                        float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                        float _3534 = _3533 * _3533;
                        float _3535 = _3534 * _3534;
                        float _3536 = _3516 + _3482;
                        float _3537 = _3517 + _3483;
                        float _3538 = _3518 + _3484;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3546 = dot(vec3(_824, _827, _830), vec3(_3516, _3517, _3518));
                        float _4913 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3550 = dot(vec3(_824, _827, _830), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                        float _4924 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                        float _3558 = _3495 * _3534;
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3485) + _3559;
                        float _4935 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3564 = 1.0 - _3534;
                        float _3574 = (0.5 / (((_3563 * ((_3549 * _3564) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3534) * _3549))) * _3563;
                        float _4946 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3585 = (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3344 = (_3505 * _3454.x) + _3412;
                        _3345 = (_3505 * _3454.y) + _3413;
                        _3346 = (_3505 * _3454.z) + _3414;
                        _3341 = (_3585 * _3471.x) + _3409;
                        _3342 = (_3585 * _3471.y) + _3410;
                        _3343 = (_3585 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_68_pred = _3346;
                    frontier_phi_68_pred_1 = _3345;
                    frontier_phi_68_pred_2 = _3344;
                    frontier_phi_68_pred_3 = _3342;
                    frontier_phi_68_pred_4 = _3341;
                    frontier_phi_68_pred_5 = _3343;
                }
                _3143 = frontier_phi_68_pred;
                _3141 = frontier_phi_68_pred_1;
                _3139 = frontier_phi_68_pred_2;
                _3135 = frontier_phi_68_pred_3;
                _3133 = frontier_phi_68_pred_4;
                _3137 = frontier_phi_68_pred_5;
                uint _3292 = _3291 + 1u;
                if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3285 = _3133;
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((4294967295u << _3149) & _3017) == 0u)
        {
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
        }
        else
        {
            float _3278 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
            float _3279 = _3278 * _2076;
            float _3280 = _3278 * _2077;
            float _3281 = _3278 * _2078;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3392 = _3132;
                float _3393 = _3134;
                float _3394 = _3136;
                float _3395 = _3138;
                float _3396 = _3140;
                float _3397 = _3142;
                uint _3398 = _3149;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3408)
                    {
                        frontier_phi_74_pred = _3394;
                        frontier_phi_74_pred_1 = _3393;
                        frontier_phi_74_pred_2 = _3392;
                        frontier_phi_74_pred_3 = _3397;
                        frontier_phi_74_pred_4 = _3396;
                        frontier_phi_74_pred_5 = _3395;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3603 = _3392;
                        float _3604 = _3393;
                        float _3605 = _3394;
                        float _3606 = _3395;
                        float _3607 = _3396;
                        float _3608 = _3397;
                        uint _3609 = _3407;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3694;
                        float _3741;
                        bool _3742;
                        for (;;)
                        {
                            uint _3620 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3681 = (_3620 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3697 = (_3620 * 40u) + 24u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3716 = (_3620 * 40u) + 28u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3741 = fma(_2078, _3729.z, fma(_2077, _3729.y, _3729.x * _2076)) + _3729.w;
                            _3742 = !((fma(_2078, _3710.z, fma(_2077, _3710.y, _3710.x * _2076)) + _3710.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3742)
                            {
                                float _3769 = _3635.x - _2076;
                                float _3770 = _3635.y - _2077;
                                float _3771 = _3635.z - _2078;
                                float _3772 = dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771));
                                float _3775 = inversesqrt(_3772);
                                float _3776 = _3775 * _3769;
                                float _3777 = _3775 * _3770;
                                float _3778 = _3775 * _3771;
                                float _3782 = 1.0 - (_3772 / (_3636 * _3636));
                                float _4957 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3787 = sqrt(_3772) * _3651.w;
                                float _3789 = 1.39999997615814208984375 / (_3787 + 1.39999997615814208984375);
                                float _3790 = _3789 * _3789;
                                float _3793 = ((1.0 - _3790) * dot(vec3(_3776, _3777, _3778), vec3(_824, _827, _830))) + _3790;
                                float _3796 = _3787 * _3787;
                                float _3800 = (fma(_2078, _3678.z, fma(_2077, _3678.y, _3678.x * _2076)) + _3678.w) / _3741;
                                float _3801 = (fma(_2078, _3694.z, fma(_2077, _3694.y, _3694.x * _2076)) + _3694.w) / _3741;
                                float _3805 = 1.0 - dot(vec2(_3800, _3801), vec2(_3800, _3801));
                                float _4973 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3807 = _3806 * (((isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0))) * _3783) / ((_3796 * 0.699999988079071044921875) + 1.0));
                                float _3819 = exp2(log2(1.0 / ((_3796 * 3.5) + 5.0)) * 0.25);
                                float _3820 = 1.0 - _1021;
                                float _3827 = sqrt(1.0 - ((1.0 - (_3820 * _3820)) * (1.0 - (_3819 * _3819))));
                                float _3828 = _3827 * _3827;
                                float _3829 = _3828 * _3828;
                                float _3830 = _3776 - _3279;
                                float _3831 = _3777 - _3280;
                                float _3832 = _3778 - _3281;
                                float _3836 = inversesqrt(dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832)));
                                float _3840 = dot(vec3(_824, _827, _830), vec3((-0.0) - _3279, (-0.0) - _3280, (-0.0) - _3281));
                                float _4984 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3844 = dot(vec3(_824, _827, _830), vec3(_3836 * _3830, _3836 * _3831, _3836 * _3832));
                                float _4995 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3851 = ((_3847 * _3847) * (_3829 + (-1.0))) + 1.0;
                                float _3852 = _3789 * _3828;
                                float _3853 = _3852 * _3852;
                                float _3859 = ((1.0 - _3853) * dot(vec3(_824, _827, _830), vec3(_3776, _3777, _3778))) + _3853;
                                float _5006 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3861 = 1.0 - _3828;
                                float _3871 = (0.5 / (((_3860 * ((_3843 * _3861) + _3828)) + 9.9999999392252902907785028219223e-09) + (((_3860 * _3861) + _3828) * _3843))) * _3860;
                                float _5017 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3881 = (_3806 * _3783) * (((_3829 * 3.1415927410125732421875) * (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) / ((_3851 * _3851) * ((_3796 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3881 * _3663.z;
                                frontier_phi_80_pred_1 = _3881 * _3663.y;
                                frontier_phi_80_pred_2 = _3881 * _3663.x;
                                frontier_phi_80_pred_3 = _3807 * _3651.z;
                                frontier_phi_80_pred_4 = _3807 * _3651.y;
                                frontier_phi_80_pred_5 = _3807 * _3651.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_80_pred;
                            _3886 = frontier_phi_80_pred_1;
                            _3885 = frontier_phi_80_pred_2;
                            _3890 = frontier_phi_80_pred_3;
                            _3889 = frontier_phi_80_pred_4;
                            _3888 = frontier_phi_80_pred_5;
                            _3593 = _3888 + _3606;
                            _3594 = _3889 + _3607;
                            _3595 = _3890 + _3608;
                            _3590 = _3885 + _3603;
                            _3591 = _3886 + _3604;
                            _3592 = _3887 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3592;
                        frontier_phi_74_pred_1 = _3591;
                        frontier_phi_74_pred_2 = _3590;
                        frontier_phi_74_pred_3 = _3595;
                        frontier_phi_74_pred_4 = _3594;
                        frontier_phi_74_pred_5 = _3593;
                    }
                    _3258 = frontier_phi_74_pred;
                    _3256 = frontier_phi_74_pred_1;
                    _3254 = frontier_phi_74_pred_2;
                    _3264 = frontier_phi_74_pred_3;
                    _3262 = frontier_phi_74_pred_4;
                    _3260 = frontier_phi_74_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3254;
                        _3393 = _3256;
                        _3394 = _3258;
                        _3395 = _3260;
                        _3396 = _3262;
                        _3397 = _3264;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3262;
                frontier_phi_62_63_ladder_1 = _3260;
                frontier_phi_62_63_ladder_2 = _3258;
                frontier_phi_62_63_ladder_3 = _3264;
                frontier_phi_62_63_ladder_4 = _3256;
                frontier_phi_62_63_ladder_5 = _3254;
            }
            else
            {
                frontier_phi_62_63_ladder = _3140;
                frontier_phi_62_63_ladder_1 = _3138;
                frontier_phi_62_63_ladder_2 = _3136;
                frontier_phi_62_63_ladder_3 = _3142;
                frontier_phi_62_63_ladder_4 = _3134;
                frontier_phi_62_63_ladder_5 = _3132;
            }
            _3253 = frontier_phi_62_63_ladder_5;
            _3255 = frontier_phi_62_63_ladder_4;
            _3257 = frontier_phi_62_63_ladder_2;
            _3259 = frontier_phi_62_63_ladder_1;
            _3261 = frontier_phi_62_63_ladder;
            _3263 = frontier_phi_62_63_ladder_3;
        }
        float _3268 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _3029 = (_3268 * _3259) + _2542;
        _3031 = (_3268 * _3261) + _2544;
        _3033 = (_3268 * _3263) + _2546;
        _3035 = ((_3253 * _997) * _3268) + _2880;
        _3037 = ((_3255 * _998) * _3268) + _2882;
        _3039 = ((_3257 * _999) * _3268) + _2884;
    }
    else
    {
        _3029 = _2542;
        _3031 = _2544;
        _3033 = _2546;
        _3035 = _2880;
        _3037 = _2882;
        _3039 = _2884;
    }
    uint _3045 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _3051 = cbInstanceData._m0[_3045].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _680) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.x) * _709)) + (((_738 - (_738 * _646)) + (cbMatDynParam._m0[11u].x * _769)) * cbMatDynParam._m0[9u].x));
    float _3052 = cbInstanceData._m0[_3045].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _680) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.y) * _709)) + (((_740 - (_740 * _646)) + (cbMatDynParam._m0[11u].y * _769)) * cbMatDynParam._m0[9u].y));
    float _3053 = cbInstanceData._m0[_3045].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _680) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _576) * _589.z) * _709)) + (((_742 - (_742 * _646)) + (cbMatDynParam._m0[11u].z * _769)) * cbMatDynParam._m0[9u].z));
    float _5033 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _5044 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _5055 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _5066 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3071 = (((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_3029 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1011))) + ((_3035 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + _3051;
    float _3073 = (_3052 + ((_3037 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3031 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1011)));
    float _3075 = (_3053 + ((_3039 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3033 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1011)));
    float _3093 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _709) + cbMatDynParam._m0[12u].y;
    float _3098 = cbInstanceData._m0[_903 + 6u].w * (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)));
    float _3103 = _801 / cbSceneParam._m0[86u].x;
    float _3104 = _802 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _3158 = _3157 / _795;
        float _3169 = _3158 * _297;
        float _3170 = _298 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3172 = _3158 * _299;
        float _3174 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3175 = _3174 + cbSceneParam._m0[79u].w;
        float _3176 = cbSceneParam._m0[79u].w - _3170;
        float _3182 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3172 * _3172));
        float _3185 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3182;
        float _3190 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3192 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3354;
        if (abs((_3171 - _3174) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3354 = ((((_3175 > 0.0) ? exp2(_3190 * _3175) : (2.0 - exp2(_3192 * _3175))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3185;
        }
        else
        {
            float _3314 = 1.0 / cbSceneParam._m0[80u].x;
            float _3315 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : max(_3175, _3176));
            float _3316 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : min(_3175, _3176));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            _3354 = ((abs(_3182 / _3171) * cbSceneParam._m0[80u].y) * ((((_3325 - _3326) * 2.0) - ((exp2(_3190 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0)))) - exp2(_3190 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))))) * _3314)) - ((exp2(_3192 * _3325) - exp2(_3192 * _3326)) * _3314))) + (_3185 * cbSceneParam._m0[80u].z);
        }
        vec4 _3356 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3365 = exp2((_3354 * (-1.44269502162933349609375)) * (1.0 - _3356.w));
        float _3366 = log2(_3365);
        float _3382 = log2(_3123);
        _3194 = (exp2(_3382 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].x)) * _3356.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3196 = (exp2(_3382 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].y)) * _3356.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3198 = (exp2(_3382 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].z)) * _3356.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3200 = _3365 * _3123;
    }
    else
    {
        _3194 = _3120;
        _3196 = _3121;
        _3198 = _3122;
        _3200 = _3123;
    }
    float _3212 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3213 = _3212 == 3.0;
    float _3214 = log2(_3200);
    float _3218 = exp2(_3214 * cbSceneParam._m0[78u].x);
    float _3219 = exp2(_3214 * cbSceneParam._m0[78u].y);
    float _3220 = exp2(_3214 * cbSceneParam._m0[78u].z);
    float _3221 = _3218 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)));
    float _3222 = _3219 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)));
    float _3223 = _3220 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)));
    float _3232 = (_3212 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3232 * (_3213 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3194)));
    SV_Target.y = _3232 * (_3213 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3196)));
    SV_Target.z = _3232 * (_3213 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.w = _3098;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3051) * _3093) * _3218) * _3232;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3052) * _3093) * _3219) * _3232;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3053) * _3093) * _3220) * _3232;
    SV_Target_1.w = _3098;
}


