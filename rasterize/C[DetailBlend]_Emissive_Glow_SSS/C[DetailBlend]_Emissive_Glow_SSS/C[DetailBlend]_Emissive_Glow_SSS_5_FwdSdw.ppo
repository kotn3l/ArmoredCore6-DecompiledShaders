#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1254;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = exp2(log2(1.0 - _256.w) * 8.0);
    vec4 _337 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _362 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _384 = (((((_309.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _362.x) - _295) * _270) + _295;
    float _385 = (((((_309.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _362.y) - _296) * _270) + _296;
    float _386 = (((((_309.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _362.z) - _297) * _270) + _297;
    float _393 = (((cbMtdParam._m0[13u].x * _337.x) - _384) * _325) + _384;
    float _394 = (((cbMtdParam._m0[13u].y * _337.y) - _385) * _325) + _385;
    float _395 = (((cbMtdParam._m0[13u].z * _337.z) - _386) * _325) + _386;
    float _396 = _362.w * _309.w;
    float _426 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _270) + cbMtdParam._m0[17u].x;
    float _429 = ((cbMtdParam._m0[15u].z - _426) * _325) + _426;
    vec4 _441 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _450 = cbMtdParam._m0[14u].y + _441.z;
    vec4 _462 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _481 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _492 = ((((_261 * 2.0) * (cbMtdParam._m0[14u].x + _462.z)) - _450) * _270) + _450;
    float _496 = (((_481.z - _492) + cbMtdParam._m0[15u].y) * _325) + _492;
    float _511 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3926 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _517 = (_512 * _512) * (3.0 - (_512 * 2.0));
    vec4 _530 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _538 = (_256.x * 2.0) + (-1.0);
    float _539 = (_256.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3937 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    float _550 = ((_462.x - _443) * _270) + _443;
    float _551 = ((_462.y - _444) * _270) + _444;
    float _564 = (cbMtdParam._m0[14u].z * (((((_481.x - _550) * _325) + _550) * 2.0) + (-1.0))) + _538;
    float _565 = (cbMtdParam._m0[14u].z * (((((_481.y - _551) * _325) + _551) * 2.0) + (-1.0))) + _539;
    float _568 = fma(_545, _241, fma(_565, _233 * TANGENT.x, (_219 * _211) * _564));
    float _571 = fma(_545, _242, fma(_565, _233 * TANGENT.y, (_219 * _212) * _564));
    float _574 = fma(_545, _243, fma(_565, _233 * TANGENT.z, (_219 * _213) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3948 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _582 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _583 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _584 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _585 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _586 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _587 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _673 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _675 = _673.w;
    float _693 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _696 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _699 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _701 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _703 = _701.x;
    float _715 = (((_701.y - _583) + (_701.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    vec4 _716 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _732 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_703 * _703)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _716.z;
    float _740 = (((cbMatDynParam._m0[15u].x - _587) * cbMatDynParam._m0[15u].w) * _732) + _587;
    float _748 = ((_732 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _715)) + _715;
    uint _772 = uint(roundEven(NORMAL.w)) * 13u;
    uint _773 = _772 + 9u;
    uint _774 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * _584) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * _585) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * _586) * cbInstanceData._m0[_774].z;
    float _4014 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    vec4 _786 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _791 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _802 = (((_791.x - _740) + (_791.w * _740)) * cbMtdParam._m0[3u].x) + _740;
    float _815 = (cbMtdParam._m0[3u].x * (((_783 * _675) - _783) + _786.x)) + _783;
    float _816 = (cbMtdParam._m0[3u].x * (((_784 * _675) - _784) + _786.y)) + _784;
    float _817 = (cbMtdParam._m0[3u].x * (((_785 * _675) - _785) + _786.z)) + _785;
    vec4 _818 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _831 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_740 * (_584 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_740 * (_585 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_740 * (_586 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _818.z;
    float _835 = _831 * cbMatDynParam._m0[13u].w;
    float _845 = (_835 * (cbMatDynParam._m0[13u].x - _815)) + _815;
    float _846 = (_835 * (cbMatDynParam._m0[13u].y - _816)) + _816;
    float _847 = (_835 * (cbMatDynParam._m0[13u].z - _817)) + _817;
    float _855 = ((_831 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _802)) + _802;
    float _856 = 1.0 - _855;
    float _857 = _856 * _845;
    float _858 = _856 * _846;
    float _859 = _856 * _847;
    float _863 = (_845 + (-0.039999999105930328369140625)) * _855;
    float _864 = (_846 + (-0.039999999105930328369140625)) * _855;
    float _865 = (_847 + (-0.039999999105930328369140625)) * _855;
    float _866 = _863 + 0.039999999105930328369140625;
    float _867 = _864 + 0.039999999105930328369140625;
    float _868 = _865 + 0.039999999105930328369140625;
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _880 = _877.x * TEXCOORD_4;
    float _881 = dot(vec3(_579, _580, _581), vec3(_662, _663, _664));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _579) - _662;
    float _889 = (_884 * _580) - _663;
    float _890 = (_884 * _581) - _664;
    float _894 = abs(dot(vec3(_662, _663, _664), vec3(_579, _580, _581)));
    float _4047 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_748);
    float _908 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _914 = (1.0 - _908) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _915 = _908 * _896;
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _982 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _986 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1011 = _943 + _579;
        float _1012 = _947 + _580;
        float _1013 = _951 + _581;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_579, _580, _581), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _4095 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_579, _580, _581), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4128 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_579, _580, _581), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4161 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1294 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1298 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1302 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1325 = _943 + _579;
        float _1326 = _947 + _580;
        float _1327 = _951 + _581;
        float _1337 = fma(_1327, cbModelParam._m0[30u].z, fma(_1326, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1325)) - _1294;
        float _1338 = fma(_1327, cbModelParam._m0[31u].z, fma(_1326, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1325)) - _1298;
        float _1339 = fma(_1327, cbModelParam._m0[32u].z, fma(_1326, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1325)) - _1302;
        float _1343 = inversesqrt(dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339)));
        float _1356 = ((_1343 * _1337) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1294 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1343 * _1338) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1298 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1343 * _1339) / cbModelParam._m0[35u].z) + ((((((_1302 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1393 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1360.x + (-0.5));
        float _1395 = _1393 * (_1360.y + (-0.5));
        float _1396 = _1393 * (_1360.z + (-0.5));
        float _1403 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1367.x + (-0.5));
        float _1405 = _1403 * (_1367.y + (-0.5));
        float _1406 = _1403 * (_1367.z + (-0.5));
        float _1413 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1374.x + (-0.5));
        float _1415 = _1413 * (_1374.y + (-0.5));
        float _1416 = _1413 * (_1374.z + (-0.5));
        float _1423 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1381.x + (-0.5));
        float _1425 = _1423 * (_1381.y + (-0.5));
        float _1426 = _1423 * (_1381.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_579, _580, _581), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4224 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1457 + 1.0))) + _1462) * _1427;
        float _1472 = _1395 * 0.5;
        float _1473 = _1405 * 0.5;
        float _1474 = _1415 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_579, _580, _581), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4257 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1499 + 1.0))) + _1504) * _1428;
        float _1514 = _1396 * 0.5;
        float _1515 = _1406 * 0.5;
        float _1516 = _1416 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_579, _580, _581), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4290 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1541 + 1.0))) + _1546) * _1429;
        _1563 = _1396;
        _1564 = _1395;
        _1565 = _1394;
        _1566 = _1406;
        _1567 = _1405;
        _1568 = _1404;
        _1569 = _1416;
        _1570 = _1415;
        _1571 = _1414;
        _1572 = _1429;
        _1573 = _1428;
        _1574 = _1427;
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1254;
        _1564 = _1254;
        _1565 = _1254;
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1610 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1587));
    float _1631 = _888 * 0.5;
    float _1632 = _889 * 0.5;
    float _1633 = _890 * 0.5;
    float _1634 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1637 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1640 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1671;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1647 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1651 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1655 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1662 = dot(vec4(cbModelParam._m0[39u]), vec4(_1631, _1632, _1633, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1682;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1673 = dot(vec4(cbModelParam._m0[40u]), vec4(_1631, _1632, _1633, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1686 = (_1682 * cbModelParam._m0[1u].x) + (_1671 * (1.0 - cbModelParam._m0[1u].x));
    float _1696 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1696 : min(cbModelParam._m0[25u].z, _1696));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1758 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1761 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1789 = frontier_phi_16_14_ladder;
        }
        float _1962;
        if (_1758 > 0.0)
        {
            _1962 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1962 = frontier_phi_25_21_ladder;
        }
        float _2257;
        if (_1761 > 0.0)
        {
            _2257 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2257 = frontier_phi_37_32_ladder;
        }
        float _2259 = isnan(_1962) ? _1789 : (isnan(_1789) ? _1962 : min(_1789, _1962));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1755) + _1744;
        float _2265 = (_2260 * _1758) + _1748;
        float _2266 = (_2260 * _1761) + _1752;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1697);
            frontier_phi_15_37_ladder = _2411.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2411.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2411.z * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_15_37_ladder_1;
        _1779 = frontier_phi_15_37_ladder;
        _1781 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1697);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1855 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1858 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _1967;
        if (_1852 > 0.0)
        {
            _1967 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1967 = frontier_phi_27_23_ladder;
        }
        float _2284;
        if (_1855 > 0.0)
        {
            _2284 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2284 = frontier_phi_39_34_ladder;
        }
        float _2622;
        if (_1858 > 0.0)
        {
            _2622 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2622 = frontier_phi_49_46_ladder;
        }
        float _2624 = isnan(_2284) ? _1967 : (isnan(_1967) ? _2284 : min(_1967, _2284));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1852) + _1841;
        float _2630 = (_2625 * _1855) + _1845;
        float _2631 = (_2625 * _1858) + _1849;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_24_49_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_24_49_ladder_2;
        _1879 = frontier_phi_24_49_ladder_1;
        _1881 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1786);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1894 = (((_914 * _866) + _915) * _880) * ((cbModelParam._m0[1u].w * (_1877 - _1777)) + _1777);
    float _1896 = (((_914 * _867) + _915) * _880) * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1898 = (((_914 * _868) + _915) * _880) * ((cbModelParam._m0[1u].w * (_1881 - _1781)) + _1781);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1954 = _1941 / _1953;
    float _1955 = _1945 / _1953;
    float _1956 = _1949 / _1953;
    float _2103;
    float _2104;
    float _2105;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1983 = ((uint(_1956 > cbSceneParam._m0[59u].y) + uint(_1956 > cbSceneParam._m0[59u].x)) + uint(_1956 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1984 = _1983 + 43u;
        uint _1992 = _1983 + 44u;
        uint _2000 = _1983 + 45u;
        uint _2008 = _1983 + 46u;
        float _2019 = fma(_1953, cbSceneParam._m0[_1984].w, fma(_1949, cbSceneParam._m0[_1984].z, fma(_1945, cbSceneParam._m0[_1984].y, _1941 * cbSceneParam._m0[_1984].x)));
        float _2023 = fma(_1953, cbSceneParam._m0[_1992].w, fma(_1949, cbSceneParam._m0[_1992].z, fma(_1945, cbSceneParam._m0[_1992].y, _1941 * cbSceneParam._m0[_1992].x)));
        float _2031 = fma(_1953, cbSceneParam._m0[_2008].w, fma(_1949, cbSceneParam._m0[_2008].z, fma(_1945, cbSceneParam._m0[_2008].y, _1941 * cbSceneParam._m0[_2008].x)));
        float _2036 = cbSceneParam._m0[33u].z * _2031;
        float _2038 = cbSceneParam._m0[33u].w * _2031;
        float _2041 = fma(_1953, cbSceneParam._m0[_2000].w, fma(_1949, cbSceneParam._m0[_2000].z, fma(_1945, cbSceneParam._m0[_2000].y, _1941 * cbSceneParam._m0[_2000].x))) / _2031;
        float _2089 = (cbSceneParam._m0[33u].x - sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956))) * cbSceneParam._m0[33u].y;
        float _4416 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2096 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2036 + _2019) / _2031, (_2038 + _2023) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 + _2019) / _2031, (_2023 - _2036) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 - _2036) / _2031, (_2023 - _2038) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 - _2038) / _2031, (_2036 + _2023) / _2031), _2041), 0.0)).x), vec4(0.25)));
        _2103 = 1.0 - (_2096 * cbSceneParam._m0[34u].x);
        _2104 = 1.0 - (_2096 * cbSceneParam._m0[34u].y);
        _2105 = 1.0 - (_2096 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2103 = 1.0;
        _2104 = 1.0;
        _2105 = 1.0;
    }
    float _2169;
    float _2171;
    float _2173;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2157 = fma(_1953, cbSceneParam._m0[63u].w, fma(_1949, cbSceneParam._m0[63u].z, fma(_1945, cbSceneParam._m0[63u].y, _1941 * cbSceneParam._m0[63u].x)));
        float _2158 = fma(_1953, cbSceneParam._m0[60u].w, fma(_1949, cbSceneParam._m0[60u].z, fma(_1945, cbSceneParam._m0[60u].y, _1941 * cbSceneParam._m0[60u].x))) / _2157;
        float _2159 = fma(_1953, cbSceneParam._m0[61u].w, fma(_1949, cbSceneParam._m0[61u].z, fma(_1945, cbSceneParam._m0[61u].y, _1941 * cbSceneParam._m0[61u].x))) / _2157;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2158 >= cbSceneParam._m0[64u].x) && (_2159 >= cbSceneParam._m0[64u].y)) && (_2158 <= cbSceneParam._m0[64u].z)) && (_2159 <= cbSceneParam._m0[64u].w))
        {
            float _2297 = fma(_1953, cbSceneParam._m0[62u].w, fma(_1949, cbSceneParam._m0[62u].z, fma(_1945, cbSceneParam._m0[62u].y, _1941 * cbSceneParam._m0[62u].x))) / _2157;
            float _2301 = isnan(cbSceneParam._m0[41u].w) ? _2297 : (isnan(_2297) ? cbSceneParam._m0[41u].w : max(_2297, cbSceneParam._m0[41u].w));
            float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956))) * cbSceneParam._m0[33u].y;
            float _4432 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
            float _2351 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2158, cbSceneParam._m0[33u].w + _2159), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2158, _2159 - cbSceneParam._m0[33u].z), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2158 - cbSceneParam._m0[33u].z, _2159 - cbSceneParam._m0[33u].w), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2158 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2159), _2301), 0.0)).x), vec4(0.25)));
            float _2355 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
            float _2356 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
            float _2357 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2356) ? _2104 : (isnan(_2104) ? _2356 : min(_2104, _2356));
            frontier_phi_36_35_ladder_1 = isnan(_2357) ? _2105 : (isnan(_2105) ? _2357 : min(_2105, _2357));
            frontier_phi_36_35_ladder_2 = isnan(_2355) ? _2103 : (isnan(_2103) ? _2355 : min(_2103, _2355));
        }
        else
        {
            frontier_phi_36_35_ladder = _2104;
            frontier_phi_36_35_ladder_1 = _2105;
            frontier_phi_36_35_ladder_2 = _2103;
        }
        _2169 = frontier_phi_36_35_ladder_2;
        _2171 = frontier_phi_36_35_ladder;
        _2173 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2169 = _2103;
        _2171 = _2104;
        _2173 = _2105;
    }
    uvec4 _2178 = floatBitsToUint(cbInstanceData._m0[_772 + 5u]);
    uint _2180 = _2178.x * 14u;
    uint _2181 = _2180 + 13u;
    float _2188 = _880 + (-1.0);
    float _2193 = (cbLight._m0[_2181].x * _2188) + 1.0;
    float _2194 = (cbLight._m0[_2181].y * _2188) + 1.0;
    float _2195 = (cbLight._m0[_2181].z * _2188) + 1.0;
    float _2196 = (cbLight._m0[_2181].w * _2188) + 1.0;
    uint _2197 = _2180 + 5u;
    float _2203 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2207 = _2180 + 4u;
    float _2216 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2220 = _2180 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_579, _580, _581));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_579, _580, _581));
    float _4468 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4479 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2197].x * _2203) * _2241) + (((cbLight._m0[_2207].x * _2169) * _2216) * _2239);
    float _2249 = ((_2203 * cbLight._m0[_2197].y) * _2241) + (((cbLight._m0[_2207].y * _2171) * _2216) * _2239);
    float _2250 = ((_2203 * cbLight._m0[_2197].z) * _2241) + (((cbLight._m0[_2207].z * _2173) * _2216) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2180 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2358;
    float _2360;
    float _2362;
    if (_2256)
    {
        _2358 = _2248;
        _2360 = _2249;
        _2362 = _2250;
    }
    else
    {
        uint _2366 = _2180 + 6u;
        float _2382 = (dot(vec3(cbLight._m0[_2180 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4490 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2385 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2358 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2248;
        _2360 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2249;
        _2362 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2250;
    }
    bool _2365 = _2254.y == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2365)
    {
        _2420 = _2358;
        _2422 = _2360;
        _2424 = _2362;
    }
    else
    {
        uint _2593 = _2180 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2180 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4506 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2612 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2420 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2358;
        _2422 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2360;
        _2424 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2362;
    }
    uint _2427 = _2180 + 8u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _748) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2180].x + _662;
    float _2443 = cbLight._m0[_2180].y + _663;
    float _2444 = cbLight._m0[_2180].z + _664;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2180].xyz));
    float _4522 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2456 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2457 = dot(vec3(_579, _580, _581), vec3(_2449, _2450, _2451));
    float _4544 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2449, _2450, _2451));
    float _4555 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2441 * _2441;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
    float _2478 = 0.959999978542327880859375 - _863;
    float _2480 = 0.959999978542327880859375 - _864;
    float _2481 = 0.959999978542327880859375 - _865;
    float _2488 = 1.0 - _2441;
    float _2499 = (0.5 / (((_2456 * ((_2455 * _2488) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2488) + _2441) * _2455))) * _2455;
    float _4566 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    uint _2515 = _2180 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _748) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2220].x + _662;
    float _2529 = cbLight._m0[_2220].y + _663;
    float _2530 = cbLight._m0[_2220].z + _664;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2220].xyz));
    float _4577 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2542 = dot(vec3(_579, _580, _581), vec3(_2535, _2536, _2537));
    float _4588 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2535, _2536, _2537));
    float _4599 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2568 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2456 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2568) + _2527) * _2541))) * _2541;
    float _4610 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2590 = (((((_2561 * _2478) + _866) * cbLight._m0[_2515].x) * _2580) * _2203) + ((((cbLight._m0[_2427].x * _2169) * ((_2477 * _2478) + _866)) * _2501) * _2216);
    float _2591 = (((((_2561 * _2480) + _867) * cbLight._m0[_2515].y) * _2580) * _2203) + ((((cbLight._m0[_2427].y * _2171) * ((_2477 * _2480) + _867)) * _2501) * _2216);
    float _2592 = (((((_2561 * _2481) + _868) * cbLight._m0[_2515].z) * _2580) * _2203) + ((((cbLight._m0[_2427].z * _2173) * ((_2477 * _2481) + _868)) * _2501) * _2216);
    float _2648;
    float _2650;
    float _2652;
    if (_2256)
    {
        _2648 = _2590;
        _2650 = _2591;
        _2652 = _2592;
    }
    else
    {
        uint _2654 = _2180 + 2u;
        uint _2658 = _2180 + 10u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _748) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _662;
        float _2675 = cbLight._m0[_2654].y + _663;
        float _2676 = cbLight._m0[_2654].z + _664;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2654].xyz));
        float _4621 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2688 = dot(vec3(_579, _580, _581), vec3(_2681, _2682, _2683));
        float _4632 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4643 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2456 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2714) + _2673) * _2687))) * _2687;
        float _4654 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2648 = (((((_2707 * _2478) + _866) * cbLight._m0[_2658].x) * _2726) * _2727) + _2590;
        _2650 = (((((_2707 * _2480) + _867) * cbLight._m0[_2658].y) * _2726) * _2727) + _2591;
        _2652 = (((((_2707 * _2481) + _868) * cbLight._m0[_2658].z) * _2726) * _2727) + _2592;
    }
    float _2758;
    float _2760;
    float _2762;
    if (_2365)
    {
        _2758 = _2648;
        _2760 = _2650;
        _2762 = _2652;
    }
    else
    {
        uint _2769 = _2180 + 3u;
        uint _2773 = _2180 + 11u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _748) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _662;
        float _2790 = cbLight._m0[_2769].y + _663;
        float _2791 = cbLight._m0[_2769].z + _664;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2769].xyz));
        float _4670 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2803 = dot(vec3(_579, _580, _581), vec3(_2796, _2797, _2798));
        float _4681 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4692 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2829 = 1.0 - _2788;
        float _2839 = (0.5 / (((_2456 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2829) + _2788) * _2802))) * _2802;
        float _4703 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2758 = (((((_2822 * _2478) + _866) * cbLight._m0[_2773].x) * _2841) * _2842) + _2648;
        _2760 = (((((_2822 * _2480) + _867) * cbLight._m0[_2773].y) * _2841) * _2842) + _2650;
        _2762 = (((((_2822 * _2481) + _868) * cbLight._m0[_2773].z) * _2841) * _2842) + _2652;
    }
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_2178.y == 0u)
    {
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.x;
        uint _2875 = uint((float(_2863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2864))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2864)));
        float _2885 = (log2(_1956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2886 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        uint _2889 = uint(isnan(14.0) ? _2886 : (isnan(_2886) ? 14.0 : min(_2886, 14.0)));
        uvec4 _2894 = texelFetch(g_lightClusterGridBuffer, int(((_2889 << 2u) + (_2875 << 6u)) >> 2u));
        uint _2895 = _2894.x;
        uint _2896 = _2863.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2896 >> 4u) & 15u)) + 4294967295u) & _2895) == 0u) || ((_2896 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3186)
                {
                    frontier_phi_68_pred = _3175;
                    frontier_phi_68_pred_1 = _3174;
                    frontier_phi_68_pred_2 = _3173;
                    frontier_phi_68_pred_3 = _3171;
                    frontier_phi_68_pred_4 = _3170;
                    frontier_phi_68_pred_5 = _3172;
                }
                else
                {
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    uint _3300;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3185;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3304 = uint(findLSB(_3300)) + (_3176 << 5u);
                        uint _3301 = (_3300 + 4294967295u) & _3300;
                        uint _3306 = _3304 * 48u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3326 = (_3304 * 48u) + 4u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3345 = (_3304 * 48u) + 8u;
                        vec3 _3356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x));
                        float _3360 = _3320.x - _1954;
                        float _3361 = _3320.y - _1955;
                        float _3362 = _3320.z - _1956;
                        float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                        float _3366 = inversesqrt(_3363);
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3370 = dot(vec3(_693, _696, _699), vec3(_3367, _3368, _3369));
                        float _3375 = 1.0 - (_3363 * _3320.w);
                        float _4729 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3377 = sqrt(_3363) * _3339.w;
                        float _3380 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3370) + _3381;
                        float _3387 = _3377 * _3377;
                        float _3391 = ((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3376) / ((_3387 * 0.699999988079071044921875) + 1.0);
                        float _3395 = (-0.0) - _1954;
                        float _3396 = (-0.0) - _1955;
                        float _3397 = (-0.0) - _1956;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3411 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                        float _3412 = 1.0 - _896;
                        float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                        float _3420 = _3419 * _3419;
                        float _3421 = _3420 * _3420;
                        float _3422 = _3402 + _3367;
                        float _3423 = _3403 + _3368;
                        float _3424 = _3404 + _3369;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3432 = dot(vec3(_693, _696, _699), vec3(_3402, _3403, _3404));
                        float _4745 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3436 = dot(vec3(_693, _696, _699), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                        float _4756 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                        float _3444 = _3380 * _3420;
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3370) + _3445;
                        float _4767 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3450 = 1.0 - _3420;
                        float _3460 = (0.5 / (((_3449 * ((_3435 * _3450) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3420) * _3435))) * _3449;
                        float _4778 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3471 = (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3443 * _3443) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125))) * _3376;
                        _3229 = (_3391 * _3339.x) + _3297;
                        _3230 = (_3391 * _3339.y) + _3298;
                        _3231 = (_3391 * _3339.z) + _3299;
                        _3226 = (_3471 * _3356.x) + _3294;
                        _3227 = (_3471 * _3356.y) + _3295;
                        _3228 = (_3471 * _3356.z) + _3296;
                        if (_3301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3301;
                        }
                    }
                    frontier_phi_68_pred = _3231;
                    frontier_phi_68_pred_1 = _3230;
                    frontier_phi_68_pred_2 = _3229;
                    frontier_phi_68_pred_3 = _3227;
                    frontier_phi_68_pred_4 = _3226;
                    frontier_phi_68_pred_5 = _3228;
                }
                _3028 = frontier_phi_68_pred;
                _3026 = frontier_phi_68_pred_1;
                _3024 = frontier_phi_68_pred_2;
                _3020 = frontier_phi_68_pred_3;
                _3018 = frontier_phi_68_pred_4;
                _3022 = frontier_phi_68_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3018;
                    _3171 = _3020;
                    _3172 = _3022;
                    _3173 = _3024;
                    _3174 = _3026;
                    _3175 = _3028;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3034) & _2895) == 0u)
        {
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
            float _3164 = _3163 * _1954;
            float _3165 = _3163 * _1955;
            float _3166 = _3163 * _1956;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3277 = _3017;
                float _3278 = _3019;
                float _3279 = _3021;
                float _3280 = _3023;
                float _3281 = _3025;
                float _3282 = _3027;
                uint _3283 = _3034;
                uint _3292;
                bool _3293;
                for (;;)
                {
                    _3292 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                    _3293 = _3292 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3293)
                    {
                        frontier_phi_74_pred = _3279;
                        frontier_phi_74_pred_1 = _3278;
                        frontier_phi_74_pred_2 = _3277;
                        frontier_phi_74_pred_3 = _3282;
                        frontier_phi_74_pred_4 = _3281;
                        frontier_phi_74_pred_5 = _3280;
                    }
                    else
                    {
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        float _3492 = _3280;
                        float _3493 = _3281;
                        float _3494 = _3282;
                        uint _3495 = _3292;
                        uint _3496;
                        vec4 _3521;
                        float _3522;
                        vec4 _3537;
                        vec3 _3549;
                        vec4 _3564;
                        vec4 _3580;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3506 = ((_3283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3495));
                            _3496 = (_3495 + 4294967295u) & _3495;
                            uint _3508 = _3506 * 40u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3522 = _3521.w;
                            uint _3524 = (_3506 * 40u) + 4u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3506 * 40u) + 8u;
                            _3549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x));
                            uint _3551 = (_3506 * 40u) + 16u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3567 = (_3506 * 40u) + 20u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3583 = (_3506 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3506 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_1956, _3615.z, fma(_1955, _3615.y, _3615.x * _1954)) + _3615.w;
                            _3628 = !((fma(_1956, _3596.z, fma(_1955, _3596.y, _3596.x * _1954)) + _3596.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3521.x - _1954;
                                float _3656 = _3521.y - _1955;
                                float _3657 = _3521.z - _1956;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3522 * _3522));
                                float _4789 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3673 = sqrt(_3658) * _3537.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_693, _696, _699))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_1956, _3564.z, fma(_1955, _3564.y, _3564.x * _1954)) + _3564.w) / _3627;
                                float _3687 = (fma(_1956, _3580.z, fma(_1955, _3580.y, _3580.x * _1954)) + _3580.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4805 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _896;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3164;
                                float _3717 = _3663 - _3165;
                                float _3718 = _3664 - _3166;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_693, _696, _699), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4816 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3730 = dot(vec3(_693, _696, _699), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4827 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_693, _696, _699), vec3(_3662, _3663, _3664))) + _3739;
                                float _4838 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4849 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3767 * _3549.z;
                                frontier_phi_80_pred_1 = _3767 * _3549.y;
                                frontier_phi_80_pred_2 = _3767 * _3549.x;
                                frontier_phi_80_pred_3 = _3693 * _3537.z;
                                frontier_phi_80_pred_4 = _3693 * _3537.y;
                                frontier_phi_80_pred_5 = _3693 * _3537.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3773 = frontier_phi_80_pred;
                            _3772 = frontier_phi_80_pred_1;
                            _3771 = frontier_phi_80_pred_2;
                            _3776 = frontier_phi_80_pred_3;
                            _3775 = frontier_phi_80_pred_4;
                            _3774 = frontier_phi_80_pred_5;
                            _3479 = _3774 + _3492;
                            _3480 = _3775 + _3493;
                            _3481 = _3776 + _3494;
                            _3476 = _3771 + _3489;
                            _3477 = _3772 + _3490;
                            _3478 = _3773 + _3491;
                            if (_3496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3496;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3478;
                        frontier_phi_74_pred_1 = _3477;
                        frontier_phi_74_pred_2 = _3476;
                        frontier_phi_74_pred_3 = _3481;
                        frontier_phi_74_pred_4 = _3480;
                        frontier_phi_74_pred_5 = _3479;
                    }
                    _3143 = frontier_phi_74_pred;
                    _3141 = frontier_phi_74_pred_1;
                    _3139 = frontier_phi_74_pred_2;
                    _3149 = frontier_phi_74_pred_3;
                    _3147 = frontier_phi_74_pred_4;
                    _3145 = frontier_phi_74_pred_5;
                    uint _3284 = _3283 + 1u;
                    if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3139;
                        _3278 = _3141;
                        _3279 = _3143;
                        _3280 = _3145;
                        _3281 = _3147;
                        _3282 = _3149;
                        _3283 = _3284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3147;
                frontier_phi_62_63_ladder_1 = _3145;
                frontier_phi_62_63_ladder_2 = _3143;
                frontier_phi_62_63_ladder_3 = _3149;
                frontier_phi_62_63_ladder_4 = _3141;
                frontier_phi_62_63_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_62_63_ladder = _3025;
                frontier_phi_62_63_ladder_1 = _3023;
                frontier_phi_62_63_ladder_2 = _3021;
                frontier_phi_62_63_ladder_3 = _3027;
                frontier_phi_62_63_ladder_4 = _3019;
                frontier_phi_62_63_ladder_5 = _3017;
            }
            _3138 = frontier_phi_62_63_ladder_5;
            _3140 = frontier_phi_62_63_ladder_4;
            _3142 = frontier_phi_62_63_ladder_2;
            _3144 = frontier_phi_62_63_ladder_1;
            _3146 = frontier_phi_62_63_ladder;
            _3148 = frontier_phi_62_63_ladder_3;
        }
        float _3153 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2907 = (_3153 * _3144) + _2420;
        _2909 = (_3153 * _3146) + _2422;
        _2911 = (_3153 * _3148) + _2424;
        _2913 = ((_3138 * _866) * _3153) + _2758;
        _2915 = ((_3140 * _867) * _3153) + _2760;
        _2917 = ((_3142 * _868) * _3153) + _2762;
    }
    else
    {
        _2907 = _2420;
        _2909 = _2422;
        _2911 = _2424;
        _2913 = _2758;
        _2915 = _2760;
        _2917 = _2762;
    }
    uint _2923 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _2933 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.x) * cbInstanceData._m0[_2923].x;
    float _2938 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.y) * cbInstanceData._m0[_2923].y;
    float _2943 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _517) * _530.z) * cbInstanceData._m0[_2923].z;
    float _4865 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4876 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4887 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4898 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2961 = (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2907 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _880))) + ((_2913 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + _2933;
    float _2963 = (_2938 + ((_2915 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2909 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _880)));
    float _2965 = (_2943 + ((_2917 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2911 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _880)));
    float _4924 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2978 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
    float _2983 = cbInstanceData._m0[_772 + 6u].w * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)));
    float _2988 = _670 / cbSceneParam._m0[86u].x;
    float _2989 = _671 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _3043 = _3042 / _603;
        float _3054 = _3043 * _655;
        float _3055 = _656 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3057 = _3043 * _657;
        float _3059 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3055;
        float _3067 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3067;
        float _3075 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3056 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3060 > 0.0) ? exp2(_3075 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3201 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3239 = ((abs(_3067 / _3056) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3075 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3075 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3077 * _3210) - exp2(_3077 * _3211)) * _3199))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_3008);
        _3079 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3081 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3083 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3085 = _3250 * _3008;
    }
    else
    {
        _3079 = _3005;
        _3081 = _3006;
        _3083 = _3007;
        _3085 = _3008;
    }
    float _3097 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3098 = _3097 == 3.0;
    float _3099 = log2(_3085);
    float _3103 = exp2(_3099 * cbSceneParam._m0[78u].x);
    float _3104 = exp2(_3099 * cbSceneParam._m0[78u].y);
    float _3105 = exp2(_3099 * cbSceneParam._m0[78u].z);
    float _3106 = _3103 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)));
    float _3107 = _3104 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0)));
    float _3108 = _3105 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)));
    float _3117 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3117 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.y = _3117 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.z = _3117 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.w = _2983;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2933) * _2978) * _3103) * _3117;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2938) * _2978) * _3104) * _3117;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2943) * _2978) * _3105) * _3117;
    SV_Target_1.w = _2983;
}


