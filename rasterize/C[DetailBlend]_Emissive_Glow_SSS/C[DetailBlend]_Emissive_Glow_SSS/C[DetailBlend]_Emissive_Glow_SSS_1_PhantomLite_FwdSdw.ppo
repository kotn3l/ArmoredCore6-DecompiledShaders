#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1302;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _308.z;
    float _319 = exp2(log2(_313 * 22.0) * 260.0);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _335 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _345 = cbMtdParam._m0[10u].x * _335.x;
    float _346 = cbMtdParam._m0[10u].y * _335.y;
    float _347 = cbMtdParam._m0[10u].z * _335.z;
    vec4 _359 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _393 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _401 = (((((cbMtdParam._m0[9u].x * _359.x) - _345) * _321) + _345) * 4.55000019073486328125) * _393.x;
    float _403 = (((((cbMtdParam._m0[9u].y * _359.y) - _346) * _321) + _346) * 4.55000019073486328125) * _393.y;
    float _405 = (((((cbMtdParam._m0[9u].z * _359.z) - _347) * _321) + _347) * 4.55000019073486328125) * _393.z;
    float _406 = _393.w * _359.w;
    float _432 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _321) + cbMtdParam._m0[17u].x;
    vec4 _444 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _453 = cbMtdParam._m0[14u].y + _444.z;
    vec4 _465 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _482 = (((_321 * (_313 + (-0.5))) + 0.5) * 2.0) * ((((_465.z - _453) + cbMtdParam._m0[14u].x) * _321) + _453);
    float _500 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3966 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _506 = (_501 * _501) * (3.0 - (_501 * 2.0));
    vec4 _519 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _527 = (_308.x * 2.0) + (-1.0);
    float _528 = (_308.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3977 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    float _547 = (cbMtdParam._m0[14u].z * (((((_465.x - _446) * _321) + _446) * 2.0) + (-1.0))) + _527;
    float _548 = (cbMtdParam._m0[14u].z * (((((_465.y - _447) * _321) + _447) * 2.0) + (-1.0))) + _528;
    float _551 = fma(_534, _237, fma(_548, _229 * TANGENT.x, (_215 * _207) * _547));
    float _554 = fma(_534, _238, fma(_548, _229 * TANGENT.y, (_215 * _208) * _547));
    float _557 = fma(_534, _239, fma(_548, _229 * TANGENT.z, (_215 * _209) * _547));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3988 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _565 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _566 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _567 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _568 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _569 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _570 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _578 = cbMatDynParam._m0[9u].x * _567;
    float _579 = cbMatDynParam._m0[9u].y * _568;
    float _580 = cbMatDynParam._m0[9u].z * _569;
    float _587 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _588 = _587 * _293;
    float _589 = _587 * _294;
    float _590 = _587 * _295;
    float _591 = dot(vec3(_562, _563, _564), vec3(_588, _589, _590));
    float _597 = abs(exp2(log2(_591) * cbMatDynParam._m0[12u].x));
    float _598 = isnan(0.100000001490116119384765625) ? _597 : (isnan(_597) ? 0.100000001490116119384765625 : max(_597, 0.100000001490116119384765625));
    float _604 = ((isnan(0.699999988079071044921875) ? _598 : (isnan(_598) ? 0.699999988079071044921875 : min(_598, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _626 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4064 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4075 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _633 = (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) - _630) * _604) + _630;
    float _652 = dot(vec3(_562, _563, _564), vec3(0.0, -1.0, 0.0));
    float _4086 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _662 = (_655 * _567) * cbMatDynParam._m0[11u].x;
    float _664 = (_655 * _568) * cbMatDynParam._m0[11u].y;
    float _666 = (_655 * _569) * cbMatDynParam._m0[11u].z;
    float _673 = dot(vec3(_588, _589, _590), vec3(_562, _563, _564));
    float _676 = _673 * 2.0;
    float _686 = dot(vec3((-0.0) - (_588 - (_676 * _562)), (-0.0) - (_589 - (_676 * _563)), (-0.0) - (_590 - (_676 * _564))), vec3(0.0, -1.0, 0.0));
    float _4097 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _693 = exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 4.0);
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _726 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _728 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _730 = _728.w;
    float _749 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _752 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _755 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    vec4 _757 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = _757.x;
    float _771 = (((_757.y - _566) + (_757.w * _566)) * cbMtdParam._m0[3u].x) + _566;
    float _788 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_759 * _759)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _796 = (((cbMatDynParam._m0[15u].x - _570) * cbMatDynParam._m0[15u].w) * _788) + _570;
    float _804 = ((_788 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _771)) + _771;
    uint _828 = uint(roundEven(NORMAL.w)) * 13u;
    uint _830 = _828 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * _578) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * _579) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * _580) * cbInstanceData._m0[_831].z;
    float _4108 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    vec4 _843 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _848 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _859 = (((_848.x - _796) + (_848.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _872 = (cbMtdParam._m0[3u].x * (((_840 * _730) - _840) + _843.x)) + _840;
    float _873 = (cbMtdParam._m0[3u].x * (((_841 * _730) - _841) + _843.y)) + _841;
    float _874 = (cbMtdParam._m0[3u].x * (((_842 * _730) - _842) + _843.z)) + _842;
    vec4 _875 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _888 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_796 * (_578 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_796 * (_579 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_796 * (_580 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _875.z;
    float _892 = _888 * cbMatDynParam._m0[13u].w;
    float _902 = (_892 * (cbMatDynParam._m0[13u].x - _872)) + _872;
    float _903 = (_892 * (cbMatDynParam._m0[13u].y - _873)) + _873;
    float _904 = (_892 * (cbMatDynParam._m0[13u].z - _874)) + _874;
    float _912 = ((_888 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _859)) + _859;
    float _913 = 1.0 - _912;
    float _914 = _913 * _902;
    float _915 = _913 * _903;
    float _916 = _913 * _904;
    float _920 = (_902 + (-0.039999999105930328369140625)) * _912;
    float _921 = (_903 + (-0.039999999105930328369140625)) * _912;
    float _922 = (_904 + (-0.039999999105930328369140625)) * _912;
    float _923 = _920 + 0.039999999105930328369140625;
    float _924 = _921 + 0.039999999105930328369140625;
    float _925 = _922 + 0.039999999105930328369140625;
    vec4 _934 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _725, cbSceneParam._m0[86u].y * _726));
    float _937 = _934.x * TEXCOORD_4;
    float _938 = _591 * 2.0;
    float _942 = (_938 * _562) - _588;
    float _943 = (_938 * _563) - _589;
    float _944 = (_938 * _564) - _590;
    float _945 = abs(_673);
    float _4141 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_804);
    float _958 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _964 = (1.0 - _958) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _947;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1028 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1032 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1036 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1059 = _993 + _562;
        float _1060 = _997 + _563;
        float _1061 = _1001 + _564;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1028 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1032 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1036 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_562, _563, _564), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4189 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_562, _563, _564), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4222 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_562, _563, _564), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4255 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1346 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1350 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1373 = _993 + _562;
        float _1374 = _997 + _563;
        float _1375 = _1001 + _564;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_562, _563, _564), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4318 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_562, _563, _564), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4351 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_562, _563, _564), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4384 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1302;
        _1612 = _1302;
        _1613 = _1302;
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1314)) + _1314;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _942 * 0.5;
    float _1680 = _943 * 0.5;
    float _1681 = _944 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1806 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1809 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1837 = frontier_phi_16_14_ladder;
        }
        float _2010;
        if (_1806 > 0.0)
        {
            _2010 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2010 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1809 > 0.0)
        {
            _2305 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2307 = isnan(_2010) ? _1837 : (isnan(_1837) ? _2010 : min(_1837, _2010));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1803) + _1792;
        float _2313 = (_2308 * _1806) + _1796;
        float _2314 = (_2308 * _1809) + _1800;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_15_37_ladder = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2459.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2459.z * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_15_37_ladder_1;
        _1827 = frontier_phi_15_37_ladder;
        _1829 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1903 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1906 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2015;
        if (_1900 > 0.0)
        {
            _2015 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2015 = frontier_phi_27_23_ladder;
        }
        float _2332;
        if (_1903 > 0.0)
        {
            _2332 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2332 = frontier_phi_39_34_ladder;
        }
        float _2670;
        if (_1906 > 0.0)
        {
            _2670 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2670 = frontier_phi_49_46_ladder;
        }
        float _2672 = isnan(_2332) ? _2015 : (isnan(_2015) ? _2332 : min(_2015, _2332));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _1900) + _1889;
        float _2678 = (_2673 * _1903) + _1893;
        float _2679 = (_2673 * _1906) + _1897;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_24_49_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_24_49_ladder_2;
        _1927 = frontier_phi_24_49_ladder_1;
        _1929 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1834);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1942 = (((_964 * _923) + _965) * _937) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1944 = (((_964 * _924) + _965) * _937) * ((cbModelParam._m0[1u].w * (_1927 - _1827)) + _1827);
    float _1946 = (((_964 * _925) + _965) * _937) * ((cbModelParam._m0[1u].w * (_1929 - _1829)) + _1829);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2002 = _1989 / _2001;
    float _2003 = _1993 / _2001;
    float _2004 = _1997 / _2001;
    float _2151;
    float _2152;
    float _2153;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2031 = ((uint(_2004 > cbSceneParam._m0[59u].y) + uint(_2004 > cbSceneParam._m0[59u].x)) + uint(_2004 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2032 = _2031 + 43u;
        uint _2040 = _2031 + 44u;
        uint _2048 = _2031 + 45u;
        uint _2056 = _2031 + 46u;
        float _2067 = fma(_2001, cbSceneParam._m0[_2032].w, fma(_1997, cbSceneParam._m0[_2032].z, fma(_1993, cbSceneParam._m0[_2032].y, _1989 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_2001, cbSceneParam._m0[_2040].w, fma(_1997, cbSceneParam._m0[_2040].z, fma(_1993, cbSceneParam._m0[_2040].y, _1989 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2001, cbSceneParam._m0[_2056].w, fma(_1997, cbSceneParam._m0[_2056].z, fma(_1993, cbSceneParam._m0[_2056].y, _1989 * cbSceneParam._m0[_2056].x)));
        float _2084 = cbSceneParam._m0[33u].z * _2079;
        float _2086 = cbSceneParam._m0[33u].w * _2079;
        float _2089 = fma(_2001, cbSceneParam._m0[_2048].w, fma(_1997, cbSceneParam._m0[_2048].z, fma(_1993, cbSceneParam._m0[_2048].y, _1989 * cbSceneParam._m0[_2048].x))) / _2079;
        float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
        float _4510 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2144 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2067) / _2079, (_2086 + _2071) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2067) / _2079, (_2071 - _2084) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2084) / _2079, (_2071 - _2086) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2086) / _2079, (_2084 + _2071) / _2079), _2089), 0.0)).x), vec4(0.25)));
        _2151 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
        _2152 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
        _2153 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2151 = 1.0;
        _2152 = 1.0;
        _2153 = 1.0;
    }
    float _2217;
    float _2219;
    float _2221;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2205 = fma(_2001, cbSceneParam._m0[63u].w, fma(_1997, cbSceneParam._m0[63u].z, fma(_1993, cbSceneParam._m0[63u].y, _1989 * cbSceneParam._m0[63u].x)));
        float _2206 = fma(_2001, cbSceneParam._m0[60u].w, fma(_1997, cbSceneParam._m0[60u].z, fma(_1993, cbSceneParam._m0[60u].y, _1989 * cbSceneParam._m0[60u].x))) / _2205;
        float _2207 = fma(_2001, cbSceneParam._m0[61u].w, fma(_1997, cbSceneParam._m0[61u].z, fma(_1993, cbSceneParam._m0[61u].y, _1989 * cbSceneParam._m0[61u].x))) / _2205;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2206 >= cbSceneParam._m0[64u].x) && (_2207 >= cbSceneParam._m0[64u].y)) && (_2206 <= cbSceneParam._m0[64u].z)) && (_2207 <= cbSceneParam._m0[64u].w))
        {
            float _2345 = fma(_2001, cbSceneParam._m0[62u].w, fma(_1997, cbSceneParam._m0[62u].z, fma(_1993, cbSceneParam._m0[62u].y, _1989 * cbSceneParam._m0[62u].x))) / _2205;
            float _2349 = isnan(cbSceneParam._m0[41u].w) ? _2345 : (isnan(_2345) ? cbSceneParam._m0[41u].w : max(_2345, cbSceneParam._m0[41u].w));
            float _2392 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
            float _4526 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
            float _2399 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2206, cbSceneParam._m0[33u].w + _2207), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2206, _2207 - cbSceneParam._m0[33u].z), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].z, _2207 - cbSceneParam._m0[33u].w), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2207), _2349), 0.0)).x), vec4(0.25)));
            float _2403 = 1.0 - (_2399 * cbSceneParam._m0[34u].x);
            float _2404 = 1.0 - (_2399 * cbSceneParam._m0[34u].y);
            float _2405 = 1.0 - (_2399 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_36_35_ladder_1 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
            frontier_phi_36_35_ladder_2 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
        }
        else
        {
            frontier_phi_36_35_ladder = _2152;
            frontier_phi_36_35_ladder_1 = _2153;
            frontier_phi_36_35_ladder_2 = _2151;
        }
        _2217 = frontier_phi_36_35_ladder_2;
        _2219 = frontier_phi_36_35_ladder;
        _2221 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2217 = _2151;
        _2219 = _2152;
        _2221 = _2153;
    }
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_828 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _937 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2264 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2268 = _2228 | 1u;
    float _2279 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_562, _563, _564));
    float _2282 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_562, _563, _564));
    float _4562 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _4573 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2287 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * 0.3183098733425140380859375;
    float _2289 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2296 = ((cbLight._m0[_2245].x * _2251) * _2289) + (((cbLight._m0[_2255].x * _2217) * _2264) * _2287);
    float _2297 = ((_2251 * cbLight._m0[_2245].y) * _2289) + (((cbLight._m0[_2255].y * _2219) * _2264) * _2287);
    float _2298 = ((_2251 * cbLight._m0[_2245].z) * _2289) + (((cbLight._m0[_2255].z * _2221) * _2264) * _2287);
    uvec4 _2302 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2304 = _2302.x == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2304)
    {
        _2406 = _2296;
        _2408 = _2297;
        _2410 = _2298;
    }
    else
    {
        uint _2414 = _2228 + 6u;
        float _2430 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4584 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2433 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2406 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2296;
        _2408 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2297;
        _2410 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2298;
    }
    bool _2413 = _2302.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2413)
    {
        _2468 = _2406;
        _2470 = _2408;
        _2472 = _2410;
    }
    else
    {
        uint _2641 = _2228 + 7u;
        float _2657 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2658 = _2657 * _2657;
        float _4600 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2659 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2660 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2468 = (((cbLight._m0[_2641].x * 0.3183098733425140380859375) * _2659) * _2660) + _2406;
        _2470 = (((cbLight._m0[_2641].y * 0.3183098733425140380859375) * _2659) * _2660) + _2408;
        _2472 = (((cbLight._m0[_2641].z * 0.3183098733425140380859375) * _2659) * _2660) + _2410;
    }
    uint _2475 = _2228 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _804) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2228].x + _588;
    float _2491 = cbLight._m0[_2228].y + _589;
    float _2492 = cbLight._m0[_2228].z + _590;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2228].xyz));
    float _4616 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _4627 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2504 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2505 = dot(vec3(_562, _563, _564), vec3(_2497, _2498, _2499));
    float _4638 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2497, _2498, _2499));
    float _4649 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2526 = 0.959999978542327880859375 - _920;
    float _2528 = 0.959999978542327880859375 - _921;
    float _2529 = 0.959999978542327880859375 - _922;
    float _2536 = 1.0 - _2489;
    float _2547 = (0.5 / (((_2504 * ((_2503 * _2536) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2536) + _2489) * _2503))) * _2503;
    float _4660 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2563 = _2228 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _804) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2268].x + _588;
    float _2577 = cbLight._m0[_2268].y + _589;
    float _2578 = cbLight._m0[_2268].z + _590;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2268].xyz));
    float _4671 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2590 = dot(vec3(_562, _563, _564), vec3(_2583, _2584, _2585));
    float _4682 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2583, _2584, _2585));
    float _4693 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
    float _2616 = 1.0 - _2575;
    float _2626 = (0.5 / (((_2504 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2616) + _2575) * _2589))) * _2589;
    float _4704 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2638 = (((((_2609 * _2526) + _923) * cbLight._m0[_2563].x) * _2628) * _2251) + ((((cbLight._m0[_2475].x * _2217) * ((_2525 * _2526) + _923)) * _2549) * _2264);
    float _2639 = (((((_2609 * _2528) + _924) * cbLight._m0[_2563].y) * _2628) * _2251) + ((((cbLight._m0[_2475].y * _2219) * ((_2525 * _2528) + _924)) * _2549) * _2264);
    float _2640 = (((((_2609 * _2529) + _925) * cbLight._m0[_2563].z) * _2628) * _2251) + ((((cbLight._m0[_2475].z * _2221) * ((_2525 * _2529) + _925)) * _2549) * _2264);
    float _2696;
    float _2698;
    float _2700;
    if (_2304)
    {
        _2696 = _2638;
        _2698 = _2639;
        _2700 = _2640;
    }
    else
    {
        uint _2702 = _2228 + 2u;
        uint _2706 = _2228 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _804) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _588;
        float _2723 = cbLight._m0[_2702].y + _589;
        float _2724 = cbLight._m0[_2702].z + _590;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2702].xyz));
        float _4715 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2736 = dot(vec3(_562, _563, _564), vec3(_2729, _2730, _2731));
        float _4726 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4737 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2504 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2762) + _2721) * _2735))) * _2735;
        float _4748 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2696 = (((((_2755 * _2526) + _923) * cbLight._m0[_2706].x) * _2774) * _2775) + _2638;
        _2698 = (((((_2755 * _2528) + _924) * cbLight._m0[_2706].y) * _2774) * _2775) + _2639;
        _2700 = (((((_2755 * _2529) + _925) * cbLight._m0[_2706].z) * _2774) * _2775) + _2640;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2413)
    {
        _2806 = _2696;
        _2808 = _2698;
        _2810 = _2700;
    }
    else
    {
        uint _2817 = _2228 + 3u;
        uint _2821 = _2228 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _804) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _588;
        float _2838 = cbLight._m0[_2817].y + _589;
        float _2839 = cbLight._m0[_2817].z + _590;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2817].xyz));
        float _4764 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2851 = dot(vec3(_562, _563, _564), vec3(_2844, _2845, _2846));
        float _4775 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4786 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2504 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2877) + _2836) * _2850))) * _2850;
        float _4797 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2806 = (((((_2870 * _2526) + _923) * cbLight._m0[_2821].x) * _2889) * _2890) + _2696;
        _2808 = (((((_2870 * _2528) + _924) * cbLight._m0[_2821].y) * _2889) * _2890) + _2698;
        _2810 = (((((_2870 * _2529) + _925) * cbLight._m0[_2821].z) * _2889) * _2890) + _2700;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2226.y == 0u)
    {
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _726) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _725) / _2912)));
        float _2933 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3227)
                {
                    frontier_phi_68_pred = _3216;
                    frontier_phi_68_pred_1 = _3215;
                    frontier_phi_68_pred_2 = _3214;
                    frontier_phi_68_pred_3 = _3212;
                    frontier_phi_68_pred_4 = _3211;
                    frontier_phi_68_pred_5 = _3213;
                }
                else
                {
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    uint _3341;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3226;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3345 = uint(findLSB(_3341)) + (_3217 << 5u);
                        uint _3342 = (_3341 + 4294967295u) & _3341;
                        uint _3347 = _3345 * 48u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3367 = (_3345 * 48u) + 4u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3386 = (_3345 * 48u) + 8u;
                        vec3 _3397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x));
                        float _3401 = _3361.x - _2002;
                        float _3402 = _3361.y - _2003;
                        float _3403 = _3361.z - _2004;
                        float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                        float _3407 = inversesqrt(_3404);
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3411 = dot(vec3(_749, _752, _755), vec3(_3408, _3409, _3410));
                        float _3416 = 1.0 - (_3404 * _3361.w);
                        float _4823 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3418 = sqrt(_3404) * _3380.w;
                        float _3421 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3411) + _3422;
                        float _3428 = _3418 * _3418;
                        float _3431 = ((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3417) / ((_3428 * 0.699999988079071044921875) + 1.0);
                        float _3435 = (-0.0) - _2002;
                        float _3436 = (-0.0) - _2003;
                        float _3437 = (-0.0) - _2004;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3442 = _3441 * _3435;
                        float _3443 = _3441 * _3436;
                        float _3444 = _3441 * _3437;
                        float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                        float _3452 = 1.0 - _947;
                        float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                        float _3460 = _3459 * _3459;
                        float _3461 = _3460 * _3460;
                        float _3462 = _3442 + _3408;
                        float _3463 = _3443 + _3409;
                        float _3464 = _3444 + _3410;
                        float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                        float _3472 = dot(vec3(_749, _752, _755), vec3(_3442, _3443, _3444));
                        float _4839 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3476 = dot(vec3(_749, _752, _755), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                        float _4850 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                        float _3484 = _3421 * _3460;
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3411) + _3485;
                        float _4861 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3490 = 1.0 - _3460;
                        float _3500 = (0.5 / (((_3489 * ((_3475 * _3490) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3460) * _3475))) * _3489;
                        float _4872 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3511 = (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125))) * _3417;
                        _3270 = (_3431 * _3380.x) + _3338;
                        _3271 = (_3431 * _3380.y) + _3339;
                        _3272 = (_3431 * _3380.z) + _3340;
                        _3267 = (_3511 * _3397.x) + _3335;
                        _3268 = (_3511 * _3397.y) + _3336;
                        _3269 = (_3511 * _3397.z) + _3337;
                        if (_3342 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3342;
                        }
                    }
                    frontier_phi_68_pred = _3272;
                    frontier_phi_68_pred_1 = _3271;
                    frontier_phi_68_pred_2 = _3270;
                    frontier_phi_68_pred_3 = _3268;
                    frontier_phi_68_pred_4 = _3267;
                    frontier_phi_68_pred_5 = _3269;
                }
                _3069 = frontier_phi_68_pred;
                _3067 = frontier_phi_68_pred_1;
                _3065 = frontier_phi_68_pred_2;
                _3061 = frontier_phi_68_pred_3;
                _3059 = frontier_phi_68_pred_4;
                _3063 = frontier_phi_68_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3059;
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3075) & _2943) == 0u)
        {
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float _3205 = _3204 * _2002;
            float _3206 = _3204 * _2003;
            float _3207 = _3204 * _2004;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3318 = _3058;
                float _3319 = _3060;
                float _3320 = _3062;
                float _3321 = _3064;
                float _3322 = _3066;
                float _3323 = _3068;
                uint _3324 = _3075;
                uint _3333;
                bool _3334;
                for (;;)
                {
                    _3333 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                    _3334 = _3333 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3334)
                    {
                        frontier_phi_74_pred = _3320;
                        frontier_phi_74_pred_1 = _3319;
                        frontier_phi_74_pred_2 = _3318;
                        frontier_phi_74_pred_3 = _3323;
                        frontier_phi_74_pred_4 = _3322;
                        frontier_phi_74_pred_5 = _3321;
                    }
                    else
                    {
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3529 = _3318;
                        float _3530 = _3319;
                        float _3531 = _3320;
                        float _3532 = _3321;
                        float _3533 = _3322;
                        float _3534 = _3323;
                        uint _3535 = _3333;
                        uint _3536;
                        vec4 _3561;
                        float _3562;
                        vec4 _3577;
                        vec3 _3589;
                        vec4 _3604;
                        vec4 _3620;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3546 = ((_3324 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3535));
                            _3536 = (_3535 + 4294967295u) & _3535;
                            uint _3548 = _3546 * 40u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3562 = _3561.w;
                            uint _3564 = (_3546 * 40u) + 4u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3546 * 40u) + 8u;
                            _3589 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x));
                            uint _3591 = (_3546 * 40u) + 16u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3607 = (_3546 * 40u) + 20u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3623 = (_3546 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3546 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2004, _3655.z, fma(_2003, _3655.y, _3655.x * _2002)) + _3655.w;
                            _3668 = !((fma(_2004, _3636.z, fma(_2003, _3636.y, _3636.x * _2002)) + _3636.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3561.x - _2002;
                                float _3696 = _3561.y - _2003;
                                float _3697 = _3561.z - _2004;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3562 * _3562));
                                float _4883 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3713 = sqrt(_3698) * _3577.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_749, _752, _755))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2004, _3604.z, fma(_2003, _3604.y, _3604.x * _2002)) + _3604.w) / _3667;
                                float _3727 = (fma(_2004, _3620.z, fma(_2003, _3620.y, _3620.x * _2002)) + _3620.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4899 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _947;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3205;
                                float _3757 = _3703 - _3206;
                                float _3758 = _3704 - _3207;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_749, _752, _755), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4910 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3770 = dot(vec3(_749, _752, _755), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4921 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_749, _752, _755), vec3(_3702, _3703, _3704))) + _3779;
                                float _4932 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4943 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3807 * _3589.z;
                                frontier_phi_80_pred_1 = _3807 * _3589.y;
                                frontier_phi_80_pred_2 = _3807 * _3589.x;
                                frontier_phi_80_pred_3 = _3733 * _3577.z;
                                frontier_phi_80_pred_4 = _3733 * _3577.y;
                                frontier_phi_80_pred_5 = _3733 * _3577.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3813 = frontier_phi_80_pred;
                            _3812 = frontier_phi_80_pred_1;
                            _3811 = frontier_phi_80_pred_2;
                            _3816 = frontier_phi_80_pred_3;
                            _3815 = frontier_phi_80_pred_4;
                            _3814 = frontier_phi_80_pred_5;
                            _3519 = _3814 + _3532;
                            _3520 = _3815 + _3533;
                            _3521 = _3816 + _3534;
                            _3516 = _3811 + _3529;
                            _3517 = _3812 + _3530;
                            _3518 = _3813 + _3531;
                            if (_3536 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3536;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3518;
                        frontier_phi_74_pred_1 = _3517;
                        frontier_phi_74_pred_2 = _3516;
                        frontier_phi_74_pred_3 = _3521;
                        frontier_phi_74_pred_4 = _3520;
                        frontier_phi_74_pred_5 = _3519;
                    }
                    _3184 = frontier_phi_74_pred;
                    _3182 = frontier_phi_74_pred_1;
                    _3180 = frontier_phi_74_pred_2;
                    _3190 = frontier_phi_74_pred_3;
                    _3188 = frontier_phi_74_pred_4;
                    _3186 = frontier_phi_74_pred_5;
                    uint _3325 = _3324 + 1u;
                    if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3318 = _3180;
                        _3319 = _3182;
                        _3320 = _3184;
                        _3321 = _3186;
                        _3322 = _3188;
                        _3323 = _3190;
                        _3324 = _3325;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3188;
                frontier_phi_62_63_ladder_1 = _3186;
                frontier_phi_62_63_ladder_2 = _3184;
                frontier_phi_62_63_ladder_3 = _3190;
                frontier_phi_62_63_ladder_4 = _3182;
                frontier_phi_62_63_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_62_63_ladder = _3066;
                frontier_phi_62_63_ladder_1 = _3064;
                frontier_phi_62_63_ladder_2 = _3062;
                frontier_phi_62_63_ladder_3 = _3068;
                frontier_phi_62_63_ladder_4 = _3060;
                frontier_phi_62_63_ladder_5 = _3058;
            }
            _3179 = frontier_phi_62_63_ladder_5;
            _3181 = frontier_phi_62_63_ladder_4;
            _3183 = frontier_phi_62_63_ladder_2;
            _3185 = frontier_phi_62_63_ladder_1;
            _3187 = frontier_phi_62_63_ladder;
            _3189 = frontier_phi_62_63_ladder_3;
        }
        float _3194 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2955 = (_3194 * _3185) + _2468;
        _2957 = (_3194 * _3187) + _2470;
        _2959 = (_3194 * _3189) + _2472;
        _2961 = ((_3179 * _923) * _3194) + _2806;
        _2963 = ((_3181 * _924) * _3194) + _2808;
        _2965 = ((_3183 * _925) * _3194) + _2810;
    }
    else
    {
        _2955 = _2468;
        _2957 = _2470;
        _2959 = _2472;
        _2961 = _2806;
        _2963 = _2808;
        _2965 = _2810;
    }
    uint _2971 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _2977 = cbInstanceData._m0[_2971].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _604) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _506) * _519.x) * _633)) + (((_662 - (_662 * _570)) + (cbMatDynParam._m0[11u].x * _693)) * cbMatDynParam._m0[9u].x));
    float _2978 = cbInstanceData._m0[_2971].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _604) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _506) * _519.y) * _633)) + (((_664 - (_664 * _570)) + (cbMatDynParam._m0[11u].y * _693)) * cbMatDynParam._m0[9u].y));
    float _2979 = cbInstanceData._m0[_2971].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _604) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _506) * _519.z) * _633)) + (((_666 - (_666 * _570)) + (cbMatDynParam._m0[11u].z * _693)) * cbMatDynParam._m0[9u].z));
    float _4959 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4970 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4981 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4992 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _2997 = (((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2955 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _937))) + ((_2961 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + _2977;
    float _2999 = (_2978 + ((_2963 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2957 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _937)));
    float _3001 = (_2979 + ((_2965 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1734)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2959 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _937)));
    float _3019 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _633) + cbMatDynParam._m0[12u].y;
    float _3024 = cbInstanceData._m0[_828 + 6u].w * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)));
    float _3029 = _725 / cbSceneParam._m0[86u].x;
    float _3030 = _726 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _3084 = _3083 / _719;
        float _3095 = _3084 * _293;
        float _3096 = _294 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3098 = _3084 * _295;
        float _3100 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3096;
        float _3108 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3097 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3242 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3280 = ((abs(_3108 / _3097) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3118 * _3251) - exp2(_3118 * _3252)) * _3240))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3049);
        _3120 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3122 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3124 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3126 = _3291 * _3049;
    }
    else
    {
        _3120 = _3046;
        _3122 = _3047;
        _3124 = _3048;
        _3126 = _3049;
    }
    float _3138 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3139 = _3138 == 3.0;
    float _3140 = log2(_3126);
    float _3144 = exp2(_3140 * cbSceneParam._m0[78u].x);
    float _3145 = exp2(_3140 * cbSceneParam._m0[78u].y);
    float _3146 = exp2(_3140 * cbSceneParam._m0[78u].z);
    float _3147 = _3144 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0)));
    float _3148 = _3145 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)));
    float _3149 = _3146 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)));
    float _3158 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3158 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.y = _3158 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.z = _3158 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.w = _3024;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2977) * _3019) * _3144) * _3158;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2978) * _3019) * _3145) * _3158;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2979) * _3019) * _3146) * _3158;
    SV_Target_1.w = _3024;
}


