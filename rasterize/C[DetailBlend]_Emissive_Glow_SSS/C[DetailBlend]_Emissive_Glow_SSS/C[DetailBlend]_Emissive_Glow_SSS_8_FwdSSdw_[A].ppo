#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3747;
float _3748;
float _3749;
float _3750;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = _258.w;
    vec4 _276 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = exp2(log2(1.0 - _264) * 8.0);
    vec4 _305 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _321 = exp2(log2(_264) * 8.0);
    vec4 _334 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _359 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _368 = ((_276.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _359.x;
    float _371 = ((_276.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _359.y;
    float _374 = ((_276.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _359.z;
    float _381 = (((cbMtdParam._m0[13u].x * _305.x) - _368) * _293) + _368;
    float _382 = (((cbMtdParam._m0[13u].y * _305.y) - _371) * _293) + _371;
    float _383 = (((cbMtdParam._m0[13u].z * _305.z) - _374) * _293) + _374;
    float _390 = (((cbMtdParam._m0[11u].x * _334.x) - _381) * _321) + _381;
    float _391 = (((cbMtdParam._m0[11u].y * _334.y) - _382) * _321) + _382;
    float _392 = (((cbMtdParam._m0[11u].z * _334.z) - _383) * _321) + _383;
    float _393 = _359.w * _276.w;
    vec4 _410 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _417 = cbMtdParam._m0[16u].x + _410.x;
    float _421 = ((cbMtdParam._m0[15u].z - _417) * _293) + _417;
    float _424 = ((cbMtdParam._m0[16u].w - _421) * _321) + _421;
    vec4 _437 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    vec4 _459 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _477 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _485 = (_258.z * 2.0) * (cbMtdParam._m0[14u].x + _437.z);
    float _489 = (((_459.z - _485) + cbMtdParam._m0[15u].y) * _293) + _485;
    float _493 = (((_477.z - _489) + cbMtdParam._m0[14u].w) * _321) + _489;
    float _507 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3759 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _513 = (_508 * _508) * (3.0 - (_508 * 2.0));
    vec4 _526 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _534 = (_258.x * 2.0) + (-1.0);
    float _535 = (_258.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3770 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))));
    float _546 = ((_459.x - _439) * _293) + _439;
    float _547 = ((_459.y - _440) * _293) + _440;
    float _560 = (cbMtdParam._m0[14u].z * (((((_477.x - _546) * _321) + _546) * 2.0) + (-1.0))) + _534;
    float _561 = (cbMtdParam._m0[14u].z * (((((_477.y - _547) * _321) + _547) * 2.0) + (-1.0))) + _535;
    float _564 = fma(_541, _243, fma(_561, _235 * TANGENT.x, (_221 * _213) * _560));
    float _567 = fma(_541, _244, fma(_561, _235 * TANGENT.y, (_221 * _214) * _560));
    float _570 = fma(_541, _245, fma(_561, _235 * TANGENT.z, (_221 * _215) * _560));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3781 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _578 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _579 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _580 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _581 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _582 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _583 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    vec4 _663 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _665 = _663.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_649 * _649) + (_650 * _650)) + (_651 * _651));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3847 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3858 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) - _976)) + _976) < ((_665 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _680 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _682 = _680.w;
    float _700 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _703 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _706 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    vec4 _708 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _710 = _708.x;
    float _722 = (((_708.y - _579) + (_708.w * _579)) * cbMtdParam._m0[3u].x) + _579;
    vec4 _723 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _739 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_710 * _710)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _723.z;
    float _747 = (((cbMatDynParam._m0[15u].x - _583) * cbMatDynParam._m0[15u].w) * _739) + _583;
    float _755 = ((_739 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _722)) + _722;
    uint _779 = uint(roundEven(NORMAL.w)) * 13u;
    uint _780 = _779 + 9u;
    uint _781 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _787 = (cbMtdParam._m0[0u].x * _580) * cbInstanceData._m0[_781].x;
    float _788 = (cbMtdParam._m0[0u].y * _581) * cbInstanceData._m0[_781].y;
    float _789 = (cbMtdParam._m0[0u].z * _582) * cbInstanceData._m0[_781].z;
    float _3869 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    vec4 _793 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _798 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _809 = (((_798.x - _747) + (_798.w * _747)) * cbMtdParam._m0[3u].x) + _747;
    float _822 = (cbMtdParam._m0[3u].x * (((_790 * _682) - _790) + _793.x)) + _790;
    float _823 = (cbMtdParam._m0[3u].x * (((_791 * _682) - _791) + _793.y)) + _791;
    float _824 = (cbMtdParam._m0[3u].x * (((_792 * _682) - _792) + _793.z)) + _792;
    vec4 _825 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _838 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_747 * (_580 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_747 * (_581 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_747 * (_582 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _825.z;
    float _842 = _838 * cbMatDynParam._m0[13u].w;
    float _852 = (_842 * (cbMatDynParam._m0[13u].x - _822)) + _822;
    float _853 = (_842 * (cbMatDynParam._m0[13u].y - _823)) + _823;
    float _854 = (_842 * (cbMatDynParam._m0[13u].z - _824)) + _824;
    float _862 = ((_838 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _809)) + _809;
    float _863 = 1.0 - _862;
    float _864 = _863 * _852;
    float _865 = _863 * _853;
    float _866 = _863 * _854;
    float _870 = (_852 + (-0.039999999105930328369140625)) * _862;
    float _871 = (_853 + (-0.039999999105930328369140625)) * _862;
    float _872 = (_854 + (-0.039999999105930328369140625)) * _862;
    float _873 = _870 + 0.039999999105930328369140625;
    float _874 = _871 + 0.039999999105930328369140625;
    float _875 = _872 + 0.039999999105930328369140625;
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _887 = _884.x * TEXCOORD_4;
    float _888 = dot(vec3(_575, _576, _577), vec3(_656, _657, _658));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _575) - _656;
    float _896 = (_891 * _576) - _657;
    float _897 = (_891 * _577) - _658;
    float _901 = abs(dot(vec3(_656, _657, _658), vec3(_575, _576, _577)));
    float _3902 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _903 = sqrt(_755);
    float _915 = exp2((_903 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _921 = (1.0 - _915) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _922 = _915 * _903;
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1018 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1022 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1047 = _950 + _575;
        float _1048 = _954 + _576;
        float _1049 = _958 + _577;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_575, _576, _577), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3950 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_575, _576, _577), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3983 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_575, _576, _577), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4016 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1337 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1341 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1364 = _950 + _575;
        float _1365 = _954 + _576;
        float _1366 = _958 + _577;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_575, _576, _577), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4079 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_575, _576, _577), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4112 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_575, _576, _577), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4145 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _895 * 0.5;
    float _1671 = _896 * 0.5;
    float _1672 = _897 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _755);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1797 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1800 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1828 = frontier_phi_19_17_ladder;
        }
        float _2053;
        if (_1797 > 0.0)
        {
            _2053 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2053 = frontier_phi_28_24_ladder;
        }
        float _2310;
        if (_1800 > 0.0)
        {
            _2310 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2310 = frontier_phi_40_35_ladder;
        }
        float _2312 = isnan(_2053) ? _1828 : (isnan(_1828) ? _2053 : min(_1828, _2053));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1794) + _1783;
        float _2318 = (_2313 * _1797) + _1787;
        float _2319 = (_2313 * _1800) + _1791;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2320;
        float _2324 = _2320 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 > _2324) || ((_2318 < _2322) || ((_2317 < _2322) || (_2317 > _2324))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_18_40_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_18_40_ladder_2;
        _1818 = frontier_phi_18_40_ladder_1;
        _1820 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1736);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _755);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1894 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1897 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _2058;
        if (_1891 > 0.0)
        {
            _2058 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2058 = frontier_phi_30_26_ladder;
        }
        float _2337;
        if (_1894 > 0.0)
        {
            _2337 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2337 = frontier_phi_42_37_ladder;
        }
        float _2550;
        if (_1897 > 0.0)
        {
            _2550 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2550 = frontier_phi_51_48_ladder;
        }
        float _2552 = isnan(_2337) ? _2058 : (isnan(_2058) ? _2337 : min(_2058, _2337));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1891) + _1880;
        float _2558 = (_2553 * _1894) + _1884;
        float _2559 = (_2553 * _1897) + _1888;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2560;
        float _2563 = _2560 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2559 > _2563) || ((_2559 < _2561) || ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 < _2561) || (_2557 > _2563))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2559, cbModelParam._m0[17u].z, fma(_2558, cbModelParam._m0[17u].y, _2557 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2559, cbModelParam._m0[18u].z, fma(_2558, cbModelParam._m0[18u].y, _2557 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2559, cbModelParam._m0[19u].z, fma(_2558, cbModelParam._m0[19u].y, _2557 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_27_51_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_27_51_ladder_2;
        _1918 = frontier_phi_27_51_ladder_1;
        _1920 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1825);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1933 = (((_921 * _873) + _922) * _887) * ((cbModelParam._m0[1u].w * (_1916 - _1816)) + _1816);
    float _1935 = (((_921 * _874) + _922) * _887) * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1937 = (((_921 * _875) + _922) * _887) * ((cbModelParam._m0[1u].w * (_1920 - _1820)) + _1820);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    vec4 _1954 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_677, _678));
    float _1956 = _1954.w;
    float _1968 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1956);
    float _1969 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1956);
    float _1970 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1956);
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_779 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _887 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2012 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2016 = _1976 | 1u;
    float _2027 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_575, _576, _577));
    float _2030 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_575, _576, _577));
    float _4281 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _4292 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2035 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2037 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
    float _2044 = ((cbLight._m0[_1993].x * _1999) * _2037) + (((cbLight._m0[_2003].x * _1968) * _2012) * _2035);
    float _2045 = ((_1999 * cbLight._m0[_1993].y) * _2037) + (((cbLight._m0[_2003].y * _1969) * _2012) * _2035);
    float _2046 = ((_1999 * cbLight._m0[_1993].z) * _2037) + (((cbLight._m0[_2003].z * _1970) * _2012) * _2035);
    uvec4 _2050 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2052 = _2050.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2052)
    {
        _2063 = _2044;
        _2065 = _2045;
        _2067 = _2046;
    }
    else
    {
        uint _2071 = _1976 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4303 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2090 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _2044;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _2045;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _2046;
    }
    bool _2070 = _2050.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2070)
    {
        _2108 = _2063;
        _2110 = _2065;
        _2112 = _2067;
    }
    else
    {
        uint _2281 = _1976 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4319 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2300 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2108 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2063;
        _2110 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2065;
        _2112 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2067;
    }
    uint _2115 = _1976 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _755) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1976].x + _656;
    float _2131 = cbLight._m0[_1976].y + _657;
    float _2132 = cbLight._m0[_1976].z + _658;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1976].xyz));
    float _4335 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2144 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2145 = dot(vec3(_575, _576, _577), vec3(_2137, _2138, _2139));
    float _4357 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2137, _2138, _2139));
    float _4368 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2166 = 0.959999978542327880859375 - _870;
    float _2168 = 0.959999978542327880859375 - _871;
    float _2169 = 0.959999978542327880859375 - _872;
    float _2176 = 1.0 - _2129;
    float _2187 = (0.5 / (((_2144 * ((_2143 * _2176) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2176) + _2129) * _2143))) * _2143;
    float _4379 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2203 = _1976 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _755) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2016].x + _656;
    float _2217 = cbLight._m0[_2016].y + _657;
    float _2218 = cbLight._m0[_2016].z + _658;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2016].xyz));
    float _4390 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2230 = dot(vec3(_575, _576, _577), vec3(_2223, _2224, _2225));
    float _4401 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2223, _2224, _2225));
    float _4412 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
    float _2256 = 1.0 - _2215;
    float _2266 = (0.5 / (((_2144 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2256) + _2215) * _2229))) * _2229;
    float _4423 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2278 = (((((_2249 * _2166) + _873) * cbLight._m0[_2203].x) * _2268) * _1999) + ((((cbLight._m0[_2115].x * _1968) * ((_2165 * _2166) + _873)) * _2189) * _2012);
    float _2279 = (((((_2249 * _2168) + _874) * cbLight._m0[_2203].y) * _2268) * _1999) + ((((cbLight._m0[_2115].y * _1969) * ((_2165 * _2168) + _874)) * _2189) * _2012);
    float _2280 = (((((_2249 * _2169) + _875) * cbLight._m0[_2203].z) * _2268) * _1999) + ((((cbLight._m0[_2115].z * _1970) * ((_2165 * _2169) + _875)) * _2189) * _2012);
    float _2342;
    float _2344;
    float _2346;
    if (_2052)
    {
        _2342 = _2278;
        _2344 = _2279;
        _2346 = _2280;
    }
    else
    {
        uint _2348 = _1976 + 2u;
        uint _2352 = _1976 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _755) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _656;
        float _2369 = cbLight._m0[_2348].y + _657;
        float _2370 = cbLight._m0[_2348].z + _658;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2348].xyz));
        float _4434 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2382 = dot(vec3(_575, _576, _577), vec3(_2375, _2376, _2377));
        float _4445 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4456 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2144 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2408) + _2367) * _2381))) * _2381;
        float _4467 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2342 = (((((_2401 * _2166) + _873) * cbLight._m0[_2352].x) * _2420) * _2421) + _2278;
        _2344 = (((((_2401 * _2168) + _874) * cbLight._m0[_2352].y) * _2420) * _2421) + _2279;
        _2346 = (((((_2401 * _2169) + _875) * cbLight._m0[_2352].z) * _2420) * _2421) + _2280;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2070)
    {
        _2456 = _2342;
        _2458 = _2344;
        _2460 = _2346;
    }
    else
    {
        uint _2467 = _1976 + 3u;
        uint _2471 = _1976 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _755) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _656;
        float _2488 = cbLight._m0[_2467].y + _657;
        float _2489 = cbLight._m0[_2467].z + _658;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2467].xyz));
        float _4483 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2501 = dot(vec3(_575, _576, _577), vec3(_2494, _2495, _2496));
        float _4494 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4505 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
        float _2527 = 1.0 - _2486;
        float _2537 = (0.5 / (((_2144 * ((_2500 * _2527) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2527) + _2486) * _2500))) * _2500;
        float _4516 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2456 = (((((_2520 * _2166) + _873) * cbLight._m0[_2471].x) * _2539) * _2540) + _2342;
        _2458 = (((((_2520 * _2168) + _874) * cbLight._m0[_2471].y) * _2539) * _2540) + _2344;
        _2460 = (((((_2520 * _2169) + _875) * cbLight._m0[_2471].z) * _2539) * _2540) + _2346;
    }
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_1974.y == 0u)
    {
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2615;
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2615;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2615;
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.x;
        uint _2642 = uint((float(_2630.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2631))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2631)));
        float _2652 = (log2(_2618 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2653 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        uint _2656 = uint(isnan(14.0) ? _2653 : (isnan(_2653) ? 14.0 : min(_2653, 14.0)));
        uvec4 _2661 = texelFetch(g_lightClusterGridBuffer, int(((_2656 << 2u) + (_2642 << 6u)) >> 2u));
        uint _2662 = _2661.x;
        uint _2663 = _2630.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2663 >> 4u) & 15u)) + 4294967295u) & _2662) == 0u) || ((_2663 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2656 << 5u) + (_2642 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2982)
                {
                    frontier_phi_68_pred = _2968;
                    frontier_phi_68_pred_1 = _2971;
                    frontier_phi_68_pred_2 = _2970;
                    frontier_phi_68_pred_3 = _2969;
                    frontier_phi_68_pred_4 = _2967;
                    frontier_phi_68_pred_5 = _2966;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2981;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2972 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2616;
                        float _3178 = _3137.y - _2617;
                        float _3179 = _3137.z - _2618;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_700, _703, _706), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4542 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2616;
                        float _3213 = (-0.0) - _2617;
                        float _3214 = (-0.0) - _2618;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3229 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _903;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_700, _703, _706), vec3(_3219, _3220, _3221));
                        float _4558 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3254 = dot(vec3(_700, _703, _706), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4569 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3197 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3187) + _3263;
                        float _4580 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4591 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3261 * _3261) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3289 * _3173.x) + _3111;
                        _3039 = (_3289 * _3173.y) + _3112;
                        _3040 = (_3289 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_68_pred = _3040;
                    frontier_phi_68_pred_1 = _3043;
                    frontier_phi_68_pred_2 = _3042;
                    frontier_phi_68_pred_3 = _3041;
                    frontier_phi_68_pred_4 = _3039;
                    frontier_phi_68_pred_5 = _3038;
                }
                _2810 = frontier_phi_68_pred;
                _2816 = frontier_phi_68_pred_1;
                _2814 = frontier_phi_68_pred_2;
                _2812 = frontier_phi_68_pred_3;
                _2808 = frontier_phi_68_pred_4;
                _2806 = frontier_phi_68_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2806;
                    _2967 = _2808;
                    _2968 = _2810;
                    _2969 = _2812;
                    _2970 = _2814;
                    _2971 = _2816;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2822) & _2662) == 0u)
        {
            _2934 = _2805;
            _2936 = _2807;
            _2938 = _2809;
            _2940 = _2811;
            _2942 = _2813;
            _2944 = _2815;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
            float _2960 = _2959 * _2616;
            float _2961 = _2959 * _2617;
            float _2962 = _2959 * _2618;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3094 = _2805;
                float _3095 = _2807;
                float _3096 = _2809;
                float _3097 = _2811;
                float _3098 = _2813;
                float _3099 = _2815;
                uint _3100 = _2822;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2656 << 5u) + (_2642 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3110)
                    {
                        frontier_phi_79_pred = _3099;
                        frontier_phi_79_pred_1 = _3098;
                        frontier_phi_79_pred_2 = _3097;
                        frontier_phi_79_pred_3 = _3096;
                        frontier_phi_79_pred_4 = _3095;
                        frontier_phi_79_pred_5 = _3094;
                    }
                    else
                    {
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        uint _3322 = _3109;
                        uint _3323;
                        vec4 _3348;
                        float _3349;
                        vec4 _3364;
                        vec3 _3376;
                        vec4 _3391;
                        vec4 _3407;
                        float _3454;
                        bool _3455;
                        for (;;)
                        {
                            uint _3333 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3322));
                            _3323 = (_3322 + 4294967295u) & _3322;
                            uint _3335 = _3333 * 40u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3349 = _3348.w;
                            uint _3351 = (_3333 * 40u) + 4u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3333 * 40u) + 8u;
                            _3376 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x));
                            uint _3378 = (_3333 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3333 * 40u) + 20u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3333 * 40u) + 24u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3429 = (_3333 * 40u) + 28u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3454 = fma(_2618, _3442.z, fma(_2617, _3442.y, _3442.x * _2616)) + _3442.w;
                            _3455 = !((fma(_2618, _3423.z, fma(_2617, _3423.y, _3423.x * _2616)) + _3423.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3455)
                            {
                                float _3482 = _3348.x - _2616;
                                float _3483 = _3348.y - _2617;
                                float _3484 = _3348.z - _2618;
                                float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                                float _3488 = inversesqrt(_3485);
                                float _3489 = _3488 * _3482;
                                float _3490 = _3488 * _3483;
                                float _3491 = _3488 * _3484;
                                float _3495 = 1.0 - (_3485 / (_3349 * _3349));
                                float _4602 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3500 = sqrt(_3485) * _3364.w;
                                float _3502 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                                float _3503 = _3502 * _3502;
                                float _3506 = ((1.0 - _3503) * dot(vec3(_3489, _3490, _3491), vec3(_700, _703, _706))) + _3503;
                                float _3509 = _3500 * _3500;
                                float _3513 = (fma(_2618, _3391.z, fma(_2617, _3391.y, _3391.x * _2616)) + _3391.w) / _3454;
                                float _3514 = (fma(_2618, _3407.z, fma(_2617, _3407.y, _3407.x * _2616)) + _3407.w) / _3454;
                                float _3518 = 1.0 - dot(vec2(_3513, _3514), vec2(_3513, _3514));
                                float _4618 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3520 = _3519 * (((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3496) / ((_3509 * 0.699999988079071044921875) + 1.0));
                                float _3532 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                                float _3533 = 1.0 - _903;
                                float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                                float _3541 = _3540 * _3540;
                                float _3542 = _3541 * _3541;
                                float _3543 = _3489 - _2960;
                                float _3544 = _3490 - _2961;
                                float _3545 = _3491 - _2962;
                                float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                                float _3553 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4629 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3557 = dot(vec3(_700, _703, _706), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                                float _4640 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                                float _3565 = _3502 * _3541;
                                float _3566 = _3565 * _3565;
                                float _3572 = ((1.0 - _3566) * dot(vec3(_700, _703, _706), vec3(_3489, _3490, _3491))) + _3566;
                                float _4651 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3574 = 1.0 - _3541;
                                float _3584 = (0.5 / (((_3573 * ((_3556 * _3574) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3541) * _3556))) * _3573;
                                float _4662 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3594 = (_3519 * _3496) * (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3564 * _3564) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3520 * _3364.z;
                                frontier_phi_85_pred_1 = _3520 * _3364.y;
                                frontier_phi_85_pred_2 = _3520 * _3364.x;
                                frontier_phi_85_pred_3 = _3594 * _3376.z;
                                frontier_phi_85_pred_4 = _3594 * _3376.y;
                                frontier_phi_85_pred_5 = _3594 * _3376.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3603 = frontier_phi_85_pred;
                            _3602 = frontier_phi_85_pred_1;
                            _3601 = frontier_phi_85_pred_2;
                            _3600 = frontier_phi_85_pred_3;
                            _3599 = frontier_phi_85_pred_4;
                            _3598 = frontier_phi_85_pred_5;
                            _3306 = _3601 + _3319;
                            _3307 = _3602 + _3320;
                            _3308 = _3603 + _3321;
                            _3303 = _3598 + _3316;
                            _3304 = _3599 + _3317;
                            _3305 = _3600 + _3318;
                            if (_3323 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3323;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3308;
                        frontier_phi_79_pred_1 = _3307;
                        frontier_phi_79_pred_2 = _3306;
                        frontier_phi_79_pred_3 = _3305;
                        frontier_phi_79_pred_4 = _3304;
                        frontier_phi_79_pred_5 = _3303;
                    }
                    _2945 = frontier_phi_79_pred;
                    _2943 = frontier_phi_79_pred_1;
                    _2941 = frontier_phi_79_pred_2;
                    _2939 = frontier_phi_79_pred_3;
                    _2937 = frontier_phi_79_pred_4;
                    _2935 = frontier_phi_79_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2935;
                        _3095 = _2937;
                        _3096 = _2939;
                        _3097 = _2941;
                        _3098 = _2943;
                        _3099 = _2945;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2941;
                frontier_phi_60_61_ladder_1 = _2945;
                frontier_phi_60_61_ladder_2 = _2943;
                frontier_phi_60_61_ladder_3 = _2939;
                frontier_phi_60_61_ladder_4 = _2937;
                frontier_phi_60_61_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_60_61_ladder = _2811;
                frontier_phi_60_61_ladder_1 = _2815;
                frontier_phi_60_61_ladder_2 = _2813;
                frontier_phi_60_61_ladder_3 = _2809;
                frontier_phi_60_61_ladder_4 = _2807;
                frontier_phi_60_61_ladder_5 = _2805;
            }
            _2934 = frontier_phi_60_61_ladder_5;
            _2936 = frontier_phi_60_61_ladder_4;
            _2938 = frontier_phi_60_61_ladder_3;
            _2940 = frontier_phi_60_61_ladder;
            _2942 = frontier_phi_60_61_ladder_2;
            _2944 = frontier_phi_60_61_ladder_1;
        }
        float _2949 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2674 = (_2949 * _2940) + _2108;
        _2676 = (_2949 * _2942) + _2110;
        _2678 = (_2949 * _2944) + _2112;
        _2680 = ((_2934 * _873) * _2949) + _2456;
        _2682 = ((_2936 * _874) * _2949) + _2458;
        _2684 = ((_2938 * _875) * _2949) + _2460;
    }
    else
    {
        _2674 = _2108;
        _2676 = _2110;
        _2678 = _2112;
        _2680 = _2456;
        _2682 = _2458;
        _2684 = _2460;
    }
    uint _2690 = _780 + uint(cbMatDynParam._m0[0u].w);
    float _2700 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _513) * _526.x) * cbInstanceData._m0[_2690].x;
    float _2705 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _513) * _526.y) * cbInstanceData._m0[_2690].y;
    float _2710 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _513) * _526.z) * cbInstanceData._m0[_2690].z;
    float _4678 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4689 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4700 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4711 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2728 = (((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2674 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _887))) + ((_2680 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1725)) * cbPerFrame._m0[3u].x)) + _2700;
    float _2730 = (_2705 + ((_2682 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1725)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2676 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _887)));
    float _2732 = (_2710 + ((_2684 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1725)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2678 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _887)));
    float _2733 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2734 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2735 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2741 = cbMtdParam._m0[2u].x * _2700;
    float _2742 = cbMtdParam._m0[2u].y * _2705;
    float _2743 = cbMtdParam._m0[2u].z * _2710;
    float _4737 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2745 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2750 = cbInstanceData._m0[_779 + 6u].w * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)));
    float _2755 = _677 / cbSceneParam._m0[86u].x;
    float _2756 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2831 = _2830 / _599;
        float _2842 = _2831 * _649;
        float _2843 = _650 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2845 = _2831 * _651;
        float _2847 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2848 = _2847 + cbSceneParam._m0[79u].w;
        float _2849 = cbSceneParam._m0[79u].w - _2843;
        float _2855 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2845 * _2845));
        float _2858 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2855;
        float _2863 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2865 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2844 - _2847) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2848 > 0.0) ? exp2(_2863 * _2848) : (2.0 - exp2(_2865 * _2848))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2858;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : max(_2848, _2849));
            float _2997 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : min(_2848, _2849));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3051 = ((abs(_2855 / _2844) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2863 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2863 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2865 * _3006) - exp2(_2865 * _3007)) * _2995))) + (_2858 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2775);
        _2867 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2869 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2871 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2873 = _3062 * _2775;
    }
    else
    {
        _2867 = _2772;
        _2869 = _2773;
        _2871 = _2774;
        _2873 = _2775;
    }
    bool _3089;
    vec4 _2883;
    vec4 _2905;
    float _2907;
    float _2911;
    float _2912;
    float _2913;
    float _2916;
    float _2919;
    float _2922;
    float _2923;
    bool _2933;
    for (;;)
    {
        _2883 = cbMatDynParam._m0[0u];
        float _2885 = roundEven(_2883.y);
        bool _2886 = _2885 == 3.0;
        float _2887 = log2(_2873);
        float _2891 = exp2(_2887 * cbSceneParam._m0[78u].x);
        float _2892 = exp2(_2887 * cbSceneParam._m0[78u].y);
        float _2893 = exp2(_2887 * cbSceneParam._m0[78u].z);
        float _2894 = _2891 * _2733;
        float _2895 = _2892 * _2734;
        float _2896 = _2893 * _2735;
        float _2903 = _665 + (-0.5);
        _2905 = cbMtdParam._m0[1u];
        _2907 = _2905.y * _2903;
        float _2910 = (_2885 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2911 = _2910 * (_2886 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2867)));
        _2912 = _2910 * (_2886 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2869)));
        _2913 = _2910 * (_2886 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2871)));
        _2916 = ((_2741 * _2745) * _2891) * _2910;
        _2919 = ((_2742 * _2745) * _2892) * _2910;
        _2922 = ((_2743 * _2745) * _2893) * _2910;
        _2923 = _2903 * 0.999000012874603271484375;
        _2933 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2933)
        {
            if ((cbInstanceData._m0[_779 + 7u].x + _2923) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3030 = _780 + uint(_2883.w);
        if ((cbInstanceData._m0[_3030].w < 1.0) && ((cbInstanceData._m0[_3030].w + _2923) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2907 + _393) < _2905.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3294;
    if (_3089)
    {
        discard_state = true;
        _3294 = 0.0;
    }
    else
    {
        _3294 = _2750;
    }
    SV_Target.x = _2911;
    SV_Target.y = _2912;
    SV_Target.z = _2913;
    SV_Target.w = _3294;
    SV_Target_1.x = _2916;
    SV_Target_1.y = _2919;
    SV_Target_1.z = _2922;
    SV_Target_1.w = _2750;
    discard_exit();
}


