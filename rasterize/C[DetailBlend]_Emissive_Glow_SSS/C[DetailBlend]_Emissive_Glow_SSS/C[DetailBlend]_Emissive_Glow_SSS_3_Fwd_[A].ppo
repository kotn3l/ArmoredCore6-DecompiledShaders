#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1298;
float _3731;
float _3732;
float _3733;
float _3734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = (((cbMtdParam._m0[9u].x * _309.x) - _295) * _270) + _295;
    float _331 = (((cbMtdParam._m0[9u].y * _309.y) - _296) * _270) + _296;
    float _332 = (((cbMtdParam._m0[9u].z * _309.z) - _297) * _270) + _297;
    float _337 = exp2(log2(1.0 - _256.w) * 8.0);
    vec4 _349 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _383 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _391 = (((((cbMtdParam._m0[13u].x * _349.x) - _330) * _337) + _330) * 4.55000019073486328125) * _383.x;
    float _393 = (((((cbMtdParam._m0[13u].y * _349.y) - _331) * _337) + _331) * 4.55000019073486328125) * _383.y;
    float _395 = (((((cbMtdParam._m0[13u].z * _349.z) - _332) * _337) + _332) * 4.55000019073486328125) * _383.z;
    float _396 = _383.w * _309.w;
    float _426 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _270) + cbMtdParam._m0[17u].x;
    float _429 = ((cbMtdParam._m0[15u].z - _426) * _337) + _426;
    vec4 _441 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _450 = cbMtdParam._m0[14u].y + _441.z;
    vec4 _462 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _471 = (((_462.z - _450) + cbMtdParam._m0[14u].x) * _270) + _450;
    vec4 _484 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _501 = (((_270 * (_261 + (-0.5))) + 0.5) * 2.0) * ((((_484.z - _471) + cbMtdParam._m0[15u].y) * _337) + _471);
    float _516 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3753 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _522 = (_517 * _517) * (3.0 - (_517 * 2.0));
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _543 = (_256.x * 2.0) + (-1.0);
    float _544 = (_256.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3764 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _555 = ((_462.x - _443) * _270) + _443;
    float _556 = ((_462.y - _444) * _270) + _444;
    float _569 = (cbMtdParam._m0[14u].z * (((((_484.x - _555) * _337) + _555) * 2.0) + (-1.0))) + _543;
    float _570 = (cbMtdParam._m0[14u].z * (((((_484.y - _556) * _337) + _556) * 2.0) + (-1.0))) + _544;
    float _573 = fma(_550, _241, fma(_570, _233 * TANGENT.x, (_219 * _211) * _569));
    float _576 = fma(_550, _242, fma(_570, _233 * TANGENT.y, (_219 * _212) * _569));
    float _579 = fma(_550, _243, fma(_570, _233 * TANGENT.z, (_219 * _213) * _569));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3775 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _587 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _588 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _589 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _590 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _591 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _592 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    vec4 _674 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _676 = _674.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _979 = sqrt(((_660 * _660) + (_661 * _661)) + (_662 * _662));
        float _985 = (cbMatDynParam._m0[5u].x * _979) + cbMatDynParam._m0[5u].y;
        float _3841 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _990 = (cbMatDynParam._m0[5u].z * _979) + cbMatDynParam._m0[5u].w;
        float _3852 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) - _986)) + _986) < ((_676 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _690 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.w;
    float _710 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _713 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _716 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    vec4 _718 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _720 = _718.x;
    float _732 = (((_718.y - _588) + (_718.w * _588)) * cbMtdParam._m0[3u].x) + _588;
    vec4 _733 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_720 * _720)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _733.z;
    float _757 = (((cbMatDynParam._m0[15u].x - _592) * cbMatDynParam._m0[15u].w) * _749) + _592;
    float _765 = ((_749 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _732)) + _732;
    uint _789 = uint(roundEven(NORMAL.w)) * 13u;
    uint _790 = _789 + 9u;
    uint _791 = _790 + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * _589) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * _590) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * _591) * cbInstanceData._m0[_791].z;
    float _3863 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    vec4 _803 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _819 = (((_808.x - _757) + (_808.w * _757)) * cbMtdParam._m0[3u].x) + _757;
    float _832 = (cbMtdParam._m0[3u].x * (((_800 * _692) - _800) + _803.x)) + _800;
    float _833 = (cbMtdParam._m0[3u].x * (((_801 * _692) - _801) + _803.y)) + _801;
    float _834 = (cbMtdParam._m0[3u].x * (((_802 * _692) - _802) + _803.z)) + _802;
    float _848 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_757 * (_589 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_757 * (_590 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_757 * (_591 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _852 = _848 * cbMatDynParam._m0[13u].w;
    float _862 = (_852 * (cbMatDynParam._m0[13u].x - _832)) + _832;
    float _863 = (_852 * (cbMatDynParam._m0[13u].y - _833)) + _833;
    float _864 = (_852 * (cbMatDynParam._m0[13u].z - _834)) + _834;
    float _872 = ((_848 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _819)) + _819;
    float _873 = 1.0 - _872;
    float _874 = _873 * _862;
    float _875 = _873 * _863;
    float _876 = _873 * _864;
    float _880 = (_862 + (-0.039999999105930328369140625)) * _872;
    float _881 = (_863 + (-0.039999999105930328369140625)) * _872;
    float _882 = (_864 + (-0.039999999105930328369140625)) * _872;
    float _883 = _880 + 0.039999999105930328369140625;
    float _884 = _881 + 0.039999999105930328369140625;
    float _885 = _882 + 0.039999999105930328369140625;
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _897 = _894.x * TEXCOORD_4;
    float _898 = dot(vec3(_584, _585, _586), vec3(_667, _668, _669));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _584) - _667;
    float _906 = (_901 * _585) - _668;
    float _907 = (_901 * _586) - _669;
    float _911 = abs(dot(vec3(_667, _668, _669), vec3(_584, _585, _586)));
    float _3896 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_765);
    float _925 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _931 = (1.0 - _925) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _932 = _925 * _913;
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_968, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960));
        float _1028 = fma(_968, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960));
        float _1032 = fma(_968, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960));
        float _1055 = _960 + _584;
        float _1056 = _964 + _585;
        float _1057 = _968 + _586;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_584, _585, _586), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3944 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_584, _585, _586), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3977 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_584, _585, _586), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4010 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_968, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960));
        float _1345 = fma(_968, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960));
        float _1349 = fma(_968, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960));
        float _1372 = _960 + _584;
        float _1373 = _964 + _585;
        float _1374 = _968 + _586;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_584, _585, _586), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4073 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_584, _585, _586), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4106 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_584, _585, _586), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4139 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = _1298;
        _1618 = _1298;
        _1619 = _1298;
        _1620 = _1298;
        _1621 = _1298;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1310)) + _1310;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _905 * 0.5;
    float _1679 = _906 * 0.5;
    float _1680 = _907 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _765);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1791 = fma(_968, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960)) + cbModelParam._m0[13u].w;
        float _1795 = fma(_968, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960)) + cbModelParam._m0[14u].w;
        float _1799 = fma(_968, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960)) + cbModelParam._m0[15u].w;
        float _1802 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1805 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1808 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1836;
        if (_1802 > 0.0)
        {
            _1836 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1836 = frontier_phi_19_17_ladder;
        }
        float _2040;
        if (_1805 > 0.0)
        {
            _2040 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1808 > 0.0)
        {
            _2294 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2296 = isnan(_2040) ? _1836 : (isnan(_1836) ? _2040 : min(_1836, _2040));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1802) + _1791;
        float _2302 = (_2297 * _1805) + _1795;
        float _2303 = (_2297 * _1808) + _1799;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_18_40_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1824 = frontier_phi_18_40_ladder_2;
        _1826 = frontier_phi_18_40_ladder_1;
        _1828 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1744);
        _1824 = _1812.x * cbModelParam._m0[1u].y;
        _1826 = _1812.y * cbModelParam._m0[1u].y;
        _1828 = _1812.z * cbModelParam._m0[1u].y;
    }
    float _1832 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _765);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1832 : min(cbModelParam._m0[25u].w, _1832));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_968, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_968, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_968, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1902 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1905 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2045;
        if (_1899 > 0.0)
        {
            _2045 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2045 = frontier_phi_30_26_ladder;
        }
        float _2321;
        if (_1902 > 0.0)
        {
            _2321 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2321 = frontier_phi_42_37_ladder;
        }
        float _2534;
        if (_1905 > 0.0)
        {
            _2534 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2534 = frontier_phi_51_48_ladder;
        }
        float _2536 = isnan(_2321) ? _2045 : (isnan(_2045) ? _2321 : min(_2045, _2321));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1899) + _1888;
        float _2542 = (_2537 * _1902) + _1892;
        float _2543 = (_2537 * _1905) + _1896;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1833);
            frontier_phi_27_51_ladder = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_27_51_ladder_2;
        _1926 = frontier_phi_27_51_ladder_1;
        _1928 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1833);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1941 = (((_931 * _883) + _932) * _897) * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1943 = (((_931 * _884) + _932) * _897) * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1945 = (((_931 * _885) + _932) * _897) * ((cbModelParam._m0[1u].w * (_1928 - _1828)) + _1828);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_789 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1974 = _897 + (-1.0);
    float _1979 = (cbLight._m0[_1967].x * _1974) + 1.0;
    float _1980 = (cbLight._m0[_1967].y * _1974) + 1.0;
    float _1981 = (cbLight._m0[_1967].z * _1974) + 1.0;
    float _1982 = (cbLight._m0[_1967].w * _1974) + 1.0;
    uint _1983 = _1966 + 5u;
    float _1989 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _1993 = _1966 + 4u;
    float _1999 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _2003 = _1966 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_584, _585, _586));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_584, _585, _586));
    float _4275 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4286 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1983].x * _1989) * _2024) + ((cbLight._m0[_1993].x * _1999) * _2022);
    float _2032 = ((_1989 * cbLight._m0[_1983].y) * _2024) + ((_1999 * cbLight._m0[_1993].y) * _2022);
    float _2033 = ((_1989 * cbLight._m0[_1983].z) * _2024) + ((_1999 * cbLight._m0[_1993].z) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1966 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2039)
    {
        _2050 = _2031;
        _2052 = _2032;
        _2054 = _2033;
    }
    else
    {
        uint _2058 = _1966 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1966 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4297 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2077 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _2031;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _2032;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _2033;
    }
    bool _2057 = _2037.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2057)
    {
        _2095 = _2050;
        _2097 = _2052;
        _2099 = _2054;
    }
    else
    {
        uint _2265 = _1966 + 7u;
        float _2281 = (dot(vec3(cbLight._m0[_1966 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4313 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2284 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2095 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2050;
        _2097 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2052;
        _2099 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2054;
    }
    uint _2102 = _1966 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _765) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1966].x + _667;
    float _2118 = cbLight._m0[_1966].y + _668;
    float _2119 = cbLight._m0[_1966].z + _669;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1966].xyz));
    float _4329 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _4340 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2131 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2132 = dot(vec3(_584, _585, _586), vec3(_2124, _2125, _2126));
    float _4351 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2124, _2125, _2126));
    float _4362 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
    float _2153 = 0.959999978542327880859375 - _880;
    float _2155 = 0.959999978542327880859375 - _881;
    float _2156 = 0.959999978542327880859375 - _882;
    float _2163 = 1.0 - _2116;
    float _2174 = (0.5 / (((_2131 * ((_2130 * _2163) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2163) + _2116) * _2130))) * _2130;
    float _4373 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2187 = _1966 + 9u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _765) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2003].x + _667;
    float _2201 = cbLight._m0[_2003].y + _668;
    float _2202 = cbLight._m0[_2003].z + _669;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2003].xyz));
    float _4384 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2214 = dot(vec3(_584, _585, _586), vec3(_2207, _2208, _2209));
    float _4395 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2207, _2208, _2209));
    float _4406 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2199 * _2199;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2240 = 1.0 - _2199;
    float _2250 = (0.5 / (((_2131 * ((_2213 * _2240) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2240) + _2199) * _2213))) * _2213;
    float _4417 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    float _2262 = (((((_2233 * _2153) + _883) * cbLight._m0[_2187].x) * _2252) * _1989) + (((((_2152 * _2153) + _883) * cbLight._m0[_2102].x) * _2176) * _1999);
    float _2263 = (((((_2233 * _2155) + _884) * cbLight._m0[_2187].y) * _2252) * _1989) + (((((_2152 * _2155) + _884) * cbLight._m0[_2102].y) * _2176) * _1999);
    float _2264 = (((((_2233 * _2156) + _885) * cbLight._m0[_2187].z) * _2252) * _1989) + (((((_2152 * _2156) + _885) * cbLight._m0[_2102].z) * _2176) * _1999);
    float _2326;
    float _2328;
    float _2330;
    if (_2039)
    {
        _2326 = _2262;
        _2328 = _2263;
        _2330 = _2264;
    }
    else
    {
        uint _2332 = _1966 + 2u;
        uint _2336 = _1966 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _765) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _667;
        float _2353 = cbLight._m0[_2332].y + _668;
        float _2354 = cbLight._m0[_2332].z + _669;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2332].xyz));
        float _4428 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2366 = dot(vec3(_584, _585, _586), vec3(_2359, _2360, _2361));
        float _4439 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4450 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2131 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2392) + _2351) * _2365))) * _2365;
        float _4461 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2326 = (((((_2385 * _2153) + _883) * cbLight._m0[_2336].x) * _2404) * _2405) + _2262;
        _2328 = (((((_2385 * _2155) + _884) * cbLight._m0[_2336].y) * _2404) * _2405) + _2263;
        _2330 = (((((_2385 * _2156) + _885) * cbLight._m0[_2336].z) * _2404) * _2405) + _2264;
    }
    float _2440;
    float _2442;
    float _2444;
    if (_2057)
    {
        _2440 = _2326;
        _2442 = _2328;
        _2444 = _2330;
    }
    else
    {
        uint _2451 = _1966 + 3u;
        uint _2455 = _1966 + 11u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _765) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _667;
        float _2472 = cbLight._m0[_2451].y + _668;
        float _2473 = cbLight._m0[_2451].z + _669;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2451].xyz));
        float _4477 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2485 = dot(vec3(_584, _585, _586), vec3(_2478, _2479, _2480));
        float _4488 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2131 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2511) + _2470) * _2484))) * _2484;
        float _4510 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2440 = (((((_2504 * _2153) + _883) * cbLight._m0[_2455].x) * _2523) * _2524) + _2326;
        _2442 = (((((_2504 * _2155) + _884) * cbLight._m0[_2455].y) * _2523) * _2524) + _2328;
        _2444 = (((((_2504 * _2156) + _885) * cbLight._m0[_2455].z) * _2523) * _2524) + _2330;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1964.y == 0u)
    {
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2599;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2599;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2599;
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2615)));
        float _2636 = (log2(_2602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
        }
        else
        {
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2966)
                {
                    frontier_phi_68_pred = _2952;
                    frontier_phi_68_pred_1 = _2955;
                    frontier_phi_68_pred_2 = _2954;
                    frontier_phi_68_pred_3 = _2953;
                    frontier_phi_68_pred_4 = _2951;
                    frontier_phi_68_pred_5 = _2950;
                }
                else
                {
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    uint _3101;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2965;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3105 = uint(findLSB(_3101)) + (_2956 << 5u);
                        uint _3102 = (_3101 + 4294967295u) & _3101;
                        uint _3107 = _3105 * 48u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3127 = (_3105 * 48u) + 4u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3146 = (_3105 * 48u) + 8u;
                        vec3 _3157 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x));
                        float _3161 = _3121.x - _2600;
                        float _3162 = _3121.y - _2601;
                        float _3163 = _3121.z - _2602;
                        float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                        float _3167 = inversesqrt(_3164);
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3171 = dot(vec3(_710, _713, _716), vec3(_3168, _3169, _3170));
                        float _3176 = 1.0 - (_3164 * _3121.w);
                        float _4536 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3178 = sqrt(_3164) * _3140.w;
                        float _3181 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3171) + _3182;
                        float _3188 = _3178 * _3178;
                        float _3192 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3177) / ((_3188 * 0.699999988079071044921875) + 1.0);
                        float _3196 = (-0.0) - _2600;
                        float _3197 = (-0.0) - _2601;
                        float _3198 = (-0.0) - _2602;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3213 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                        float _3214 = 1.0 - _913;
                        float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                        float _3222 = _3221 * _3221;
                        float _3223 = _3222 * _3222;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3234 = dot(vec3(_710, _713, _716), vec3(_3203, _3204, _3205));
                        float _4552 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3238 = dot(vec3(_710, _713, _716), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                        float _4563 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                        float _3246 = _3181 * _3222;
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3171) + _3247;
                        float _4574 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3252 = 1.0 - _3222;
                        float _3262 = (0.5 / (((_3251 * ((_3237 * _3252) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3222) * _3237))) * _3251;
                        float _4585 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3273 = (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3245 * _3245) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125))) * _3177;
                        _3025 = (_3192 * _3140.x) + _3098;
                        _3026 = (_3192 * _3140.y) + _3099;
                        _3027 = (_3192 * _3140.z) + _3100;
                        _3022 = (_3273 * _3157.x) + _3095;
                        _3023 = (_3273 * _3157.y) + _3096;
                        _3024 = (_3273 * _3157.z) + _3097;
                        if (_3102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3102;
                        }
                    }
                    frontier_phi_68_pred = _3024;
                    frontier_phi_68_pred_1 = _3027;
                    frontier_phi_68_pred_2 = _3026;
                    frontier_phi_68_pred_3 = _3025;
                    frontier_phi_68_pred_4 = _3023;
                    frontier_phi_68_pred_5 = _3022;
                }
                _2794 = frontier_phi_68_pred;
                _2800 = frontier_phi_68_pred_1;
                _2798 = frontier_phi_68_pred_2;
                _2796 = frontier_phi_68_pred_3;
                _2792 = frontier_phi_68_pred_4;
                _2790 = frontier_phi_68_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2790;
                    _2951 = _2792;
                    _2952 = _2794;
                    _2953 = _2796;
                    _2954 = _2798;
                    _2955 = _2800;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
        }
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.z;
        uint _2806 = (_2804 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2806) & _2646) == 0u)
        {
            _2918 = _2789;
            _2920 = _2791;
            _2922 = _2793;
            _2924 = _2795;
            _2926 = _2797;
            _2928 = _2799;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
            float _2944 = _2943 * _2600;
            float _2945 = _2943 * _2601;
            float _2946 = _2943 * _2602;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2806 < ((_2804 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3078 = _2789;
                float _3079 = _2791;
                float _3080 = _2793;
                float _3081 = _2795;
                float _3082 = _2797;
                float _3083 = _2799;
                uint _3084 = _2806;
                uint _3093;
                bool _3094;
                for (;;)
                {
                    _3093 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                    _3094 = _3093 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3094)
                    {
                        frontier_phi_79_pred = _3083;
                        frontier_phi_79_pred_1 = _3082;
                        frontier_phi_79_pred_2 = _3081;
                        frontier_phi_79_pred_3 = _3080;
                        frontier_phi_79_pred_4 = _3079;
                        frontier_phi_79_pred_5 = _3078;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        uint _3306 = _3093;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3391;
                        float _3438;
                        bool _3439;
                        for (;;)
                        {
                            uint _3317 = ((_3084 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3378 = (_3317 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3317 * 40u) + 24u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3413 = (_3317 * 40u) + 28u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3438 = fma(_2602, _3426.z, fma(_2601, _3426.y, _3426.x * _2600)) + _3426.w;
                            _3439 = !((fma(_2602, _3407.z, fma(_2601, _3407.y, _3407.x * _2600)) + _3407.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3439)
                            {
                                float _3466 = _3332.x - _2600;
                                float _3467 = _3332.y - _2601;
                                float _3468 = _3332.z - _2602;
                                float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                                float _3472 = inversesqrt(_3469);
                                float _3473 = _3472 * _3466;
                                float _3474 = _3472 * _3467;
                                float _3475 = _3472 * _3468;
                                float _3479 = 1.0 - (_3469 / (_3333 * _3333));
                                float _4596 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3484 = sqrt(_3469) * _3348.w;
                                float _3486 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                                float _3487 = _3486 * _3486;
                                float _3490 = ((1.0 - _3487) * dot(vec3(_3473, _3474, _3475), vec3(_710, _713, _716))) + _3487;
                                float _3493 = _3484 * _3484;
                                float _3497 = (fma(_2602, _3375.z, fma(_2601, _3375.y, _3375.x * _2600)) + _3375.w) / _3438;
                                float _3498 = (fma(_2602, _3391.z, fma(_2601, _3391.y, _3391.x * _2600)) + _3391.w) / _3438;
                                float _3502 = 1.0 - dot(vec2(_3497, _3498), vec2(_3497, _3498));
                                float _4612 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3504 = _3503 * (((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3480) / ((_3493 * 0.699999988079071044921875) + 1.0));
                                float _3516 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3517 = 1.0 - _913;
                                float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                                float _3525 = _3524 * _3524;
                                float _3526 = _3525 * _3525;
                                float _3527 = _3473 - _2944;
                                float _3528 = _3474 - _2945;
                                float _3529 = _3475 - _2946;
                                float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                                float _3537 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4623 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3541 = dot(vec3(_710, _713, _716), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                                float _4634 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                                float _3549 = _3486 * _3525;
                                float _3550 = _3549 * _3549;
                                float _3556 = ((1.0 - _3550) * dot(vec3(_710, _713, _716), vec3(_3473, _3474, _3475))) + _3550;
                                float _4645 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3558 = 1.0 - _3525;
                                float _3568 = (0.5 / (((_3557 * ((_3540 * _3558) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3525) * _3540))) * _3557;
                                float _4656 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3578 = (_3503 * _3480) * (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3548 * _3548) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3504 * _3348.z;
                                frontier_phi_85_pred_1 = _3504 * _3348.y;
                                frontier_phi_85_pred_2 = _3504 * _3348.x;
                                frontier_phi_85_pred_3 = _3578 * _3360.z;
                                frontier_phi_85_pred_4 = _3578 * _3360.y;
                                frontier_phi_85_pred_5 = _3578 * _3360.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_85_pred;
                            _3586 = frontier_phi_85_pred_1;
                            _3585 = frontier_phi_85_pred_2;
                            _3584 = frontier_phi_85_pred_3;
                            _3583 = frontier_phi_85_pred_4;
                            _3582 = frontier_phi_85_pred_5;
                            _3290 = _3585 + _3303;
                            _3291 = _3586 + _3304;
                            _3292 = _3587 + _3305;
                            _3287 = _3582 + _3300;
                            _3288 = _3583 + _3301;
                            _3289 = _3584 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3292;
                        frontier_phi_79_pred_1 = _3291;
                        frontier_phi_79_pred_2 = _3290;
                        frontier_phi_79_pred_3 = _3289;
                        frontier_phi_79_pred_4 = _3288;
                        frontier_phi_79_pred_5 = _3287;
                    }
                    _2929 = frontier_phi_79_pred;
                    _2927 = frontier_phi_79_pred_1;
                    _2925 = frontier_phi_79_pred_2;
                    _2923 = frontier_phi_79_pred_3;
                    _2921 = frontier_phi_79_pred_4;
                    _2919 = frontier_phi_79_pred_5;
                    uint _3085 = _3084 + 1u;
                    if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3078 = _2919;
                        _3079 = _2921;
                        _3080 = _2923;
                        _3081 = _2925;
                        _3082 = _2927;
                        _3083 = _2929;
                        _3084 = _3085;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2925;
                frontier_phi_60_61_ladder_1 = _2929;
                frontier_phi_60_61_ladder_2 = _2927;
                frontier_phi_60_61_ladder_3 = _2923;
                frontier_phi_60_61_ladder_4 = _2921;
                frontier_phi_60_61_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_60_61_ladder = _2795;
                frontier_phi_60_61_ladder_1 = _2799;
                frontier_phi_60_61_ladder_2 = _2797;
                frontier_phi_60_61_ladder_3 = _2793;
                frontier_phi_60_61_ladder_4 = _2791;
                frontier_phi_60_61_ladder_5 = _2789;
            }
            _2918 = frontier_phi_60_61_ladder_5;
            _2920 = frontier_phi_60_61_ladder_4;
            _2922 = frontier_phi_60_61_ladder_3;
            _2924 = frontier_phi_60_61_ladder;
            _2926 = frontier_phi_60_61_ladder_2;
            _2928 = frontier_phi_60_61_ladder_1;
        }
        float _2933 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2658 = (_2933 * _2924) + _2095;
        _2660 = (_2933 * _2926) + _2097;
        _2662 = (_2933 * _2928) + _2099;
        _2664 = ((_2918 * _883) * _2933) + _2440;
        _2666 = ((_2920 * _884) * _2933) + _2442;
        _2668 = ((_2922 * _885) * _2933) + _2444;
    }
    else
    {
        _2658 = _2095;
        _2660 = _2097;
        _2662 = _2099;
        _2664 = _2440;
        _2666 = _2442;
        _2668 = _2444;
    }
    uint _2674 = _790 + uint(cbMatDynParam._m0[0u].w);
    float _2684 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.x) * cbInstanceData._m0[_2674].x;
    float _2689 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.y) * cbInstanceData._m0[_2674].y;
    float _2694 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _522) * _535.z) * cbInstanceData._m0[_2674].z;
    float _4672 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4683 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4694 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4705 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2712 = (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2658 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _897))) + ((_2664 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + _2684;
    float _2714 = (_2689 + ((_2666 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2660 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _897)));
    float _2716 = (_2694 + ((_2668 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1733)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2662 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _897)));
    float _2717 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2718 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2719 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2725 = cbMtdParam._m0[2u].x * _2684;
    float _2726 = cbMtdParam._m0[2u].y * _2689;
    float _2727 = cbMtdParam._m0[2u].z * _2694;
    float _4731 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2729 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2734 = cbInstanceData._m0[_789 + 6u].w * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)));
    float _2739 = _687 / cbSceneParam._m0[86u].x;
    float _2740 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2754 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2756 = _2754.x;
    float _2757 = _2754.y;
    float _2758 = _2754.z;
    float _2759 = _2754.w;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2814 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2815 = _2814 / _608;
        float _2826 = _2815 * _660;
        float _2827 = _661 * _2815;
        float _2828 = (-0.0) - _2827;
        float _2829 = _2815 * _662;
        float _2831 = (cbSceneParam._m0[77u].w * _2828) / _2814;
        float _2832 = _2831 + cbSceneParam._m0[79u].w;
        float _2833 = cbSceneParam._m0[79u].w - _2827;
        float _2839 = sqrt(((_2826 * _2826) + (_2827 * _2827)) + (_2829 * _2829));
        float _2842 = (1.0 - (cbSceneParam._m0[77u].w / _2814)) * _2839;
        float _2847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2828 - _2831) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2832 > 0.0) ? exp2(_2847 * _2832) : (2.0 - exp2(_2849 * _2832))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2842;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : max(_2832, _2833));
            float _2981 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : min(_2832, _2833));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3035 = ((abs(_2839 / _2828) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2847 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2847 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2849 * _2990) - exp2(_2849 * _2991)) * _2979))) + (_2842 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2759);
        _2851 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2756;
        _2853 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2757;
        _2855 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2758;
        _2857 = _3046 * _2759;
    }
    else
    {
        _2851 = _2756;
        _2853 = _2757;
        _2855 = _2758;
        _2857 = _2759;
    }
    bool _3073;
    vec4 _2867;
    vec4 _2889;
    float _2891;
    float _2895;
    float _2896;
    float _2897;
    float _2900;
    float _2903;
    float _2906;
    float _2907;
    bool _2917;
    for (;;)
    {
        _2867 = cbMatDynParam._m0[0u];
        float _2869 = roundEven(_2867.y);
        bool _2870 = _2869 == 3.0;
        float _2871 = log2(_2857);
        float _2875 = exp2(_2871 * cbSceneParam._m0[78u].x);
        float _2876 = exp2(_2871 * cbSceneParam._m0[78u].y);
        float _2877 = exp2(_2871 * cbSceneParam._m0[78u].z);
        float _2878 = _2875 * _2717;
        float _2879 = _2876 * _2718;
        float _2880 = _2877 * _2719;
        float _2887 = _676 + (-0.5);
        _2889 = cbMtdParam._m0[1u];
        _2891 = _2889.y * _2887;
        float _2894 = (_2869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2895 = _2894 * (_2870 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2851)));
        _2896 = _2894 * (_2870 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2853)));
        _2897 = _2894 * (_2870 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2855)));
        _2900 = ((_2725 * _2729) * _2875) * _2894;
        _2903 = ((_2726 * _2729) * _2876) * _2894;
        _2906 = ((_2727 * _2729) * _2877) * _2894;
        _2907 = _2887 * 0.999000012874603271484375;
        _2917 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2917)
        {
            if ((cbInstanceData._m0[_789 + 7u].x + _2907) < 0.5)
            {
                _3073 = true;
                break;
            }
        }
        uint _3014 = _790 + uint(_2867.w);
        if ((cbInstanceData._m0[_3014].w < 1.0) && ((cbInstanceData._m0[_3014].w + _2907) < 0.5))
        {
            _3073 = true;
            break;
        }
        if ((_2891 + _396) < _2889.x)
        {
            _3073 = true;
            break;
        }
        _3073 = false;
        break;
    }
    float _3278;
    if (_3073)
    {
        discard_state = true;
        _3278 = 0.0;
    }
    else
    {
        _3278 = _2734;
    }
    SV_Target.x = _2895;
    SV_Target.y = _2896;
    SV_Target.z = _2897;
    SV_Target.w = _3278;
    SV_Target_1.x = _2900;
    SV_Target_1.y = _2903;
    SV_Target_1.z = _2906;
    SV_Target_1.w = _2734;
    discard_exit();
}


