#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _260.z;
    float _266 = _260.w;
    float _272 = exp2(log2(_265 * 22.0) * 260.0);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _299 = cbMtdParam._m0[10u].x * _288.x;
    float _300 = cbMtdParam._m0[10u].y * _288.y;
    float _301 = cbMtdParam._m0[10u].z * _288.z;
    vec4 _313 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = (((cbMtdParam._m0[9u].x * _313.x) - _299) * _274) + _299;
    float _335 = (((cbMtdParam._m0[9u].y * _313.y) - _300) * _274) + _300;
    float _336 = (((cbMtdParam._m0[9u].z * _313.z) - _301) * _274) + _301;
    float _341 = exp2(log2(1.0 - _266) * 8.0);
    vec4 _353 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _378 = exp2(log2(_266) * 8.0);
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _416 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _424 = (((((cbMtdParam._m0[13u].x * _353.x) - _334) * _341) + _334) * 4.55000019073486328125) * _416.x;
    float _426 = (((((cbMtdParam._m0[13u].y * _353.y) - _335) * _341) + _335) * 4.55000019073486328125) * _416.y;
    float _428 = (((((cbMtdParam._m0[13u].z * _353.z) - _336) * _341) + _336) * 4.55000019073486328125) * _416.z;
    float _435 = (((cbMtdParam._m0[11u].x * _391.x) - _424) * _378) + _424;
    float _436 = (((cbMtdParam._m0[11u].y * _391.y) - _426) * _378) + _426;
    float _437 = (((cbMtdParam._m0[11u].z * _391.z) - _428) * _378) + _428;
    float _438 = _416.w * _313.w;
    float _468 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _274) + cbMtdParam._m0[17u].x;
    float _471 = ((cbMtdParam._m0[15u].z - _468) * _341) + _468;
    float _475 = ((cbMtdParam._m0[16u].w - _471) * _378) + _471;
    vec4 _487 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[14u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _517 = (((_508.z - _496) + cbMtdParam._m0[14u].x) * _274) + _496;
    vec4 _530 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _552 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _565 = (((_274 * (_265 + (-0.5))) + 0.5) * 2.0) * ((((_530.z - _517) + cbMtdParam._m0[15u].y) * _341) + _517);
    float _569 = (((_552.z - _565) + cbMtdParam._m0[14u].w) * _378) + _565;
    float _583 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4000 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _589 = (_584 * _584) * (3.0 - (_584 * 2.0));
    vec4 _602 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _610 = (_260.x * 2.0) + (-1.0);
    float _611 = (_260.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _4011 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
    float _622 = ((_508.x - _489) * _274) + _489;
    float _623 = ((_508.y - _490) * _274) + _490;
    float _628 = ((_530.x - _622) * _341) + _622;
    float _629 = ((_530.y - _623) * _341) + _623;
    float _642 = (cbMtdParam._m0[14u].z * (((((_552.x - _628) * _378) + _628) * 2.0) + (-1.0))) + _610;
    float _643 = (cbMtdParam._m0[14u].z * (((((_552.y - _629) * _378) + _629) * 2.0) + (-1.0))) + _611;
    float _646 = fma(_617, _245, fma(_643, _237 * TANGENT.x, (_223 * _215) * _642));
    float _649 = fma(_617, _246, fma(_643, _237 * TANGENT.y, (_223 * _216) * _642));
    float _652 = fma(_617, _247, fma(_643, _237 * TANGENT.z, (_223 * _217) * _642));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _4022 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _660 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _661 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _662 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _663 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _664 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _665 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _731 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _721);
    float _732 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _721);
    float _733 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _721);
    float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
    float _738 = _731 * _737;
    float _739 = _732 * _737;
    float _740 = _733 * _737;
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _749 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = _749.w;
    float _769 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _772 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _775 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    vec4 _777 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _779 = _777.x;
    float _791 = (((_777.y - _661) + (_777.w * _661)) * cbMtdParam._m0[3u].x) + _661;
    vec4 _792 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _808 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_779 * _779)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _792.z;
    float _816 = (((cbMatDynParam._m0[15u].x - _665) * cbMatDynParam._m0[15u].w) * _808) + _665;
    float _824 = ((_808 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _791)) + _791;
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _849 = _848 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * _662) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * _663) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * _664) * cbInstanceData._m0[_850].z;
    float _4088 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    vec4 _862 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _867 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _878 = (((_867.x - _816) + (_867.w * _816)) * cbMtdParam._m0[3u].x) + _816;
    float _891 = (cbMtdParam._m0[3u].x * (((_859 * _751) - _859) + _862.x)) + _859;
    float _892 = (cbMtdParam._m0[3u].x * (((_860 * _751) - _860) + _862.y)) + _860;
    float _893 = (cbMtdParam._m0[3u].x * (((_861 * _751) - _861) + _862.z)) + _861;
    float _907 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_816 * (_662 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_816 * (_663 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_816 * (_664 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _911 = _907 * cbMatDynParam._m0[13u].w;
    float _921 = (_911 * (cbMatDynParam._m0[13u].x - _891)) + _891;
    float _922 = (_911 * (cbMatDynParam._m0[13u].y - _892)) + _892;
    float _923 = (_911 * (cbMatDynParam._m0[13u].z - _893)) + _893;
    float _931 = ((_907 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _878)) + _878;
    float _932 = 1.0 - _931;
    float _933 = _932 * _921;
    float _934 = _932 * _922;
    float _935 = _932 * _923;
    float _939 = (_921 + (-0.039999999105930328369140625)) * _931;
    float _940 = (_922 + (-0.039999999105930328369140625)) * _931;
    float _941 = (_923 + (-0.039999999105930328369140625)) * _931;
    float _942 = _939 + 0.039999999105930328369140625;
    float _943 = _940 + 0.039999999105930328369140625;
    float _944 = _941 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _956 = _953.x * TEXCOORD_4;
    float _957 = dot(vec3(_657, _658, _659), vec3(_738, _739, _740));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _657) - _738;
    float _965 = (_960 * _658) - _739;
    float _966 = (_960 * _659) - _740;
    float _970 = abs(dot(vec3(_738, _739, _740), vec3(_657, _658, _659)));
    float _4121 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_824);
    float _984 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _990 = (1.0 - _984) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _991 = _984 * _972;
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1027, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019));
        float _1058 = fma(_1027, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019));
        float _1062 = fma(_1027, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019));
        float _1085 = _1019 + _657;
        float _1086 = _1023 + _658;
        float _1087 = _1027 + _659;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1054;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1058;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1062;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_657, _658, _659), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4169 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_657, _658, _659), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4202 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_657, _658, _659), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4235 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_1027, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019));
        float _1372 = fma(_1027, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019));
        float _1376 = fma(_1027, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019));
        float _1399 = _1019 + _657;
        float _1400 = _1023 + _658;
        float _1401 = _1027 + _659;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_657, _658, _659), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4298 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_657, _658, _659), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4331 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_657, _658, _659), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4364 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = _1328;
        _1648 = _1328;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _964 * 0.5;
    float _1706 = _965 * 0.5;
    float _1707 = _966 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1027, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1027, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1027, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1832 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1835 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1863 = frontier_phi_16_14_ladder;
        }
        float _2036;
        if (_1832 > 0.0)
        {
            _2036 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2036 = frontier_phi_25_21_ladder;
        }
        float _2331;
        if (_1835 > 0.0)
        {
            _2331 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2331 = frontier_phi_37_32_ladder;
        }
        float _2333 = isnan(_2036) ? _1863 : (isnan(_1863) ? _2036 : min(_1863, _2036));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1829) + _1818;
        float _2339 = (_2334 * _1832) + _1822;
        float _2340 = (_2334 * _1835) + _1826;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_15_37_ladder = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2485.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2485.z * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_15_37_ladder_1;
        _1853 = frontier_phi_15_37_ladder;
        _1855 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1771);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_1027, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_1027, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_1027, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1929 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1932 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2041;
        if (_1926 > 0.0)
        {
            _2041 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2041 = frontier_phi_27_23_ladder;
        }
        float _2358;
        if (_1929 > 0.0)
        {
            _2358 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2358 = frontier_phi_39_34_ladder;
        }
        float _2696;
        if (_1932 > 0.0)
        {
            _2696 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2696 = frontier_phi_49_46_ladder;
        }
        float _2698 = isnan(_2358) ? _2041 : (isnan(_2041) ? _2358 : min(_2041, _2358));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _1926) + _1915;
        float _2704 = (_2699 * _1929) + _1919;
        float _2705 = (_2699 * _1932) + _1923;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_24_49_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_24_49_ladder_2;
        _1953 = frontier_phi_24_49_ladder_1;
        _1955 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1860);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1968 = (((_990 * _942) + _991) * _956) * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1970 = (((_990 * _943) + _991) * _956) * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1972 = (((_990 * _944) + _991) * _956) * ((cbModelParam._m0[1u].w * (_1955 - _1855)) + _1855);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2028 = _2015 / _2027;
    float _2029 = _2019 / _2027;
    float _2030 = _2023 / _2027;
    float _2177;
    float _2178;
    float _2179;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2057 = ((uint(_2030 > cbSceneParam._m0[59u].y) + uint(_2030 > cbSceneParam._m0[59u].x)) + uint(_2030 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2058 = _2057 + 43u;
        uint _2066 = _2057 + 44u;
        uint _2074 = _2057 + 45u;
        uint _2082 = _2057 + 46u;
        float _2093 = fma(_2027, cbSceneParam._m0[_2058].w, fma(_2023, cbSceneParam._m0[_2058].z, fma(_2019, cbSceneParam._m0[_2058].y, _2015 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2027, cbSceneParam._m0[_2066].w, fma(_2023, cbSceneParam._m0[_2066].z, fma(_2019, cbSceneParam._m0[_2066].y, _2015 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2027, cbSceneParam._m0[_2082].w, fma(_2023, cbSceneParam._m0[_2082].z, fma(_2019, cbSceneParam._m0[_2082].y, _2015 * cbSceneParam._m0[_2082].x)));
        float _2110 = cbSceneParam._m0[33u].z * _2105;
        float _2112 = cbSceneParam._m0[33u].w * _2105;
        float _2115 = fma(_2027, cbSceneParam._m0[_2074].w, fma(_2023, cbSceneParam._m0[_2074].z, fma(_2019, cbSceneParam._m0[_2074].y, _2015 * cbSceneParam._m0[_2074].x))) / _2105;
        float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
        float _4490 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2170 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2093) / _2105, (_2112 + _2097) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2093) / _2105, (_2097 - _2110) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2110) / _2105, (_2097 - _2112) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2112) / _2105, (_2110 + _2097) / _2105), _2115), 0.0)).x), vec4(0.25)));
        _2177 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
        _2178 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
        _2179 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2177 = 1.0;
        _2178 = 1.0;
        _2179 = 1.0;
    }
    float _2243;
    float _2245;
    float _2247;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2231 = fma(_2027, cbSceneParam._m0[63u].w, fma(_2023, cbSceneParam._m0[63u].z, fma(_2019, cbSceneParam._m0[63u].y, _2015 * cbSceneParam._m0[63u].x)));
        float _2232 = fma(_2027, cbSceneParam._m0[60u].w, fma(_2023, cbSceneParam._m0[60u].z, fma(_2019, cbSceneParam._m0[60u].y, _2015 * cbSceneParam._m0[60u].x))) / _2231;
        float _2233 = fma(_2027, cbSceneParam._m0[61u].w, fma(_2023, cbSceneParam._m0[61u].z, fma(_2019, cbSceneParam._m0[61u].y, _2015 * cbSceneParam._m0[61u].x))) / _2231;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2232 >= cbSceneParam._m0[64u].x) && (_2233 >= cbSceneParam._m0[64u].y)) && (_2232 <= cbSceneParam._m0[64u].z)) && (_2233 <= cbSceneParam._m0[64u].w))
        {
            float _2371 = fma(_2027, cbSceneParam._m0[62u].w, fma(_2023, cbSceneParam._m0[62u].z, fma(_2019, cbSceneParam._m0[62u].y, _2015 * cbSceneParam._m0[62u].x))) / _2231;
            float _2375 = isnan(cbSceneParam._m0[41u].w) ? _2371 : (isnan(_2371) ? cbSceneParam._m0[41u].w : max(_2371, cbSceneParam._m0[41u].w));
            float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
            float _4506 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
            float _2425 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2232, cbSceneParam._m0[33u].w + _2233), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2232, _2233 - cbSceneParam._m0[33u].z), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].z, _2233 - cbSceneParam._m0[33u].w), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2233), _2375), 0.0)).x), vec4(0.25)));
            float _2429 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
            float _2430 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
            float _2431 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_36_35_ladder_1 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_36_35_ladder_2 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
        }
        else
        {
            frontier_phi_36_35_ladder = _2178;
            frontier_phi_36_35_ladder_1 = _2179;
            frontier_phi_36_35_ladder_2 = _2177;
        }
        _2243 = frontier_phi_36_35_ladder_2;
        _2245 = frontier_phi_36_35_ladder;
        _2247 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2243 = _2177;
        _2245 = _2178;
        _2247 = _2179;
    }
    uvec4 _2252 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _2254 = _2252.x * 14u;
    uint _2255 = _2254 + 13u;
    float _2262 = _956 + (-1.0);
    float _2267 = (cbLight._m0[_2255].x * _2262) + 1.0;
    float _2268 = (cbLight._m0[_2255].y * _2262) + 1.0;
    float _2269 = (cbLight._m0[_2255].z * _2262) + 1.0;
    float _2270 = (cbLight._m0[_2255].w * _2262) + 1.0;
    uint _2271 = _2254 + 5u;
    float _2277 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2281 = _2254 + 4u;
    float _2290 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2294 = _2254 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_657, _658, _659));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_657, _658, _659));
    float _4542 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4553 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2271].x * _2277) * _2315) + (((cbLight._m0[_2281].x * _2243) * _2290) * _2313);
    float _2323 = ((_2277 * cbLight._m0[_2271].y) * _2315) + (((cbLight._m0[_2281].y * _2245) * _2290) * _2313);
    float _2324 = ((_2277 * cbLight._m0[_2271].z) * _2315) + (((cbLight._m0[_2281].z * _2247) * _2290) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2254 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2330)
    {
        _2432 = _2322;
        _2434 = _2323;
        _2436 = _2324;
    }
    else
    {
        uint _2440 = _2254 + 6u;
        float _2456 = (dot(vec3(cbLight._m0[_2254 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4564 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2459 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2432 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2322;
        _2434 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2323;
        _2436 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2324;
    }
    bool _2439 = _2328.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2439)
    {
        _2494 = _2432;
        _2496 = _2434;
        _2498 = _2436;
    }
    else
    {
        uint _2667 = _2254 + 7u;
        float _2683 = (dot(vec3(cbLight._m0[_2254 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2684 = _2683 * _2683;
        float _4580 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2685 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2686 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2494 = (((cbLight._m0[_2667].x * 0.3183098733425140380859375) * _2685) * _2686) + _2432;
        _2496 = (((cbLight._m0[_2667].y * 0.3183098733425140380859375) * _2685) * _2686) + _2434;
        _2498 = (((cbLight._m0[_2667].z * 0.3183098733425140380859375) * _2685) * _2686) + _2436;
    }
    uint _2501 = _2254 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _824) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2254].x + _738;
    float _2517 = cbLight._m0[_2254].y + _739;
    float _2518 = cbLight._m0[_2254].z + _740;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2254].xyz));
    float _4596 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _4607 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2530 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2531 = dot(vec3(_657, _658, _659), vec3(_2523, _2524, _2525));
    float _4618 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2523, _2524, _2525));
    float _4629 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2552 = 0.959999978542327880859375 - _939;
    float _2554 = 0.959999978542327880859375 - _940;
    float _2555 = 0.959999978542327880859375 - _941;
    float _2562 = 1.0 - _2515;
    float _2573 = (0.5 / (((_2530 * ((_2529 * _2562) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2562) + _2515) * _2529))) * _2529;
    float _4640 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2589 = _2254 + 9u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _824) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2294].x + _738;
    float _2603 = cbLight._m0[_2294].y + _739;
    float _2604 = cbLight._m0[_2294].z + _740;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2294].xyz));
    float _4651 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2616 = dot(vec3(_657, _658, _659), vec3(_2609, _2610, _2611));
    float _4662 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2609, _2610, _2611));
    float _4673 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2601 * _2601;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2642 = 1.0 - _2601;
    float _2652 = (0.5 / (((_2530 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2642) + _2601) * _2615))) * _2615;
    float _4684 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    float _2664 = (((((_2635 * _2552) + _942) * cbLight._m0[_2589].x) * _2654) * _2277) + ((((cbLight._m0[_2501].x * _2243) * ((_2551 * _2552) + _942)) * _2575) * _2290);
    float _2665 = (((((_2635 * _2554) + _943) * cbLight._m0[_2589].y) * _2654) * _2277) + ((((cbLight._m0[_2501].y * _2245) * ((_2551 * _2554) + _943)) * _2575) * _2290);
    float _2666 = (((((_2635 * _2555) + _944) * cbLight._m0[_2589].z) * _2654) * _2277) + ((((cbLight._m0[_2501].z * _2247) * ((_2551 * _2555) + _944)) * _2575) * _2290);
    float _2722;
    float _2724;
    float _2726;
    if (_2330)
    {
        _2722 = _2664;
        _2724 = _2665;
        _2726 = _2666;
    }
    else
    {
        uint _2728 = _2254 + 2u;
        uint _2732 = _2254 + 10u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _824) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _738;
        float _2749 = cbLight._m0[_2728].y + _739;
        float _2750 = cbLight._m0[_2728].z + _740;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2728].xyz));
        float _4695 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2762 = dot(vec3(_657, _658, _659), vec3(_2755, _2756, _2757));
        float _4706 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4717 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2788 = 1.0 - _2747;
        float _2798 = (0.5 / (((_2530 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2788) + _2747) * _2761))) * _2761;
        float _4728 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2722 = (((((_2781 * _2552) + _942) * cbLight._m0[_2732].x) * _2800) * _2801) + _2664;
        _2724 = (((((_2781 * _2554) + _943) * cbLight._m0[_2732].y) * _2800) * _2801) + _2665;
        _2726 = (((((_2781 * _2555) + _944) * cbLight._m0[_2732].z) * _2800) * _2801) + _2666;
    }
    float _2832;
    float _2834;
    float _2836;
    if (_2439)
    {
        _2832 = _2722;
        _2834 = _2724;
        _2836 = _2726;
    }
    else
    {
        uint _2843 = _2254 + 3u;
        uint _2847 = _2254 + 11u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _824) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _738;
        float _2864 = cbLight._m0[_2843].y + _739;
        float _2865 = cbLight._m0[_2843].z + _740;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2843].xyz));
        float _4744 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2877 = dot(vec3(_657, _658, _659), vec3(_2870, _2871, _2872));
        float _4755 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4766 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2896 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2903 = 1.0 - _2862;
        float _2913 = (0.5 / (((_2530 * ((_2876 * _2903) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2903) + _2862) * _2876))) * _2876;
        float _4777 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2915 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2916 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2832 = (((((_2896 * _2552) + _942) * cbLight._m0[_2847].x) * _2915) * _2916) + _2722;
        _2834 = (((((_2896 * _2554) + _943) * cbLight._m0[_2847].y) * _2915) * _2916) + _2724;
        _2836 = (((((_2896 * _2555) + _944) * cbLight._m0[_2847].z) * _2915) * _2916) + _2726;
    }
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_2252.y == 0u)
    {
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.x;
        uint _2949 = uint((float(_2937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2938))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2938)));
        float _2959 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2960 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        uint _2963 = uint(isnan(14.0) ? _2960 : (isnan(_2960) ? 14.0 : min(_2960, 14.0)));
        uvec4 _2968 = texelFetch(g_lightClusterGridBuffer, int(((_2963 << 2u) + (_2949 << 6u)) >> 2u));
        uint _2969 = _2968.x;
        uint _2970 = _2937.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_2970 >> 4u) & 15u)) + 4294967295u) & _2969) == 0u) || ((_2970 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            uint _3250 = 0u;
            uint _3259;
            bool _3260;
            for (;;)
            {
                _3259 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                _3260 = _3259 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3260)
                {
                    frontier_phi_68_pred = _3249;
                    frontier_phi_68_pred_1 = _3248;
                    frontier_phi_68_pred_2 = _3247;
                    frontier_phi_68_pred_3 = _3245;
                    frontier_phi_68_pred_4 = _3244;
                    frontier_phi_68_pred_5 = _3246;
                }
                else
                {
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    uint _3374;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3247;
                    _3372 = _3248;
                    _3373 = _3249;
                    _3374 = _3259;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    for (;;)
                    {
                        uint _3378 = uint(findLSB(_3374)) + (_3250 << 5u);
                        uint _3375 = (_3374 + 4294967295u) & _3374;
                        uint _3380 = _3378 * 48u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3400 = (_3378 * 48u) + 4u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3419 = (_3378 * 48u) + 8u;
                        vec3 _3430 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x));
                        float _3434 = _3394.x - _2028;
                        float _3435 = _3394.y - _2029;
                        float _3436 = _3394.z - _2030;
                        float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                        float _3440 = inversesqrt(_3437);
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3444 = dot(vec3(_769, _772, _775), vec3(_3441, _3442, _3443));
                        float _3449 = 1.0 - (_3437 * _3394.w);
                        float _4803 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3451 = sqrt(_3437) * _3413.w;
                        float _3454 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3444) + _3455;
                        float _3461 = _3451 * _3451;
                        float _3465 = ((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3450) / ((_3461 * 0.699999988079071044921875) + 1.0);
                        float _3469 = (-0.0) - _2028;
                        float _3470 = (-0.0) - _2029;
                        float _3471 = (-0.0) - _2030;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3485 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                        float _3486 = 1.0 - _972;
                        float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                        float _3494 = _3493 * _3493;
                        float _3495 = _3494 * _3494;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3498 = _3478 + _3443;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3506 = dot(vec3(_769, _772, _775), vec3(_3476, _3477, _3478));
                        float _4819 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3510 = dot(vec3(_769, _772, _775), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                        float _4830 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                        float _3518 = _3454 * _3494;
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3444) + _3519;
                        float _4841 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3524 = 1.0 - _3494;
                        float _3534 = (0.5 / (((_3523 * ((_3509 * _3524) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3494) * _3509))) * _3523;
                        float _4852 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3545 = (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3517 * _3517) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125))) * _3450;
                        _3303 = (_3465 * _3413.x) + _3371;
                        _3304 = (_3465 * _3413.y) + _3372;
                        _3305 = (_3465 * _3413.z) + _3373;
                        _3300 = (_3545 * _3430.x) + _3368;
                        _3301 = (_3545 * _3430.y) + _3369;
                        _3302 = (_3545 * _3430.z) + _3370;
                        if (_3375 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3303;
                            _3372 = _3304;
                            _3373 = _3305;
                            _3374 = _3375;
                        }
                    }
                    frontier_phi_68_pred = _3305;
                    frontier_phi_68_pred_1 = _3304;
                    frontier_phi_68_pred_2 = _3303;
                    frontier_phi_68_pred_3 = _3301;
                    frontier_phi_68_pred_4 = _3300;
                    frontier_phi_68_pred_5 = _3302;
                }
                _3102 = frontier_phi_68_pred;
                _3100 = frontier_phi_68_pred_1;
                _3098 = frontier_phi_68_pred_2;
                _3094 = frontier_phi_68_pred_3;
                _3092 = frontier_phi_68_pred_4;
                _3096 = frontier_phi_68_pred_5;
                uint _3251 = _3250 + 1u;
                if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3244 = _3092;
                    _3245 = _3094;
                    _3246 = _3096;
                    _3247 = _3098;
                    _3248 = _3100;
                    _3249 = _3102;
                    _3250 = _3251;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((4294967295u << _3108) & _2969) == 0u)
        {
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
            _3222 = _3101;
        }
        else
        {
            float _3237 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float _3238 = _3237 * _2028;
            float _3239 = _3237 * _2029;
            float _3240 = _3237 * _2030;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3351 = _3091;
                float _3352 = _3093;
                float _3353 = _3095;
                float _3354 = _3097;
                float _3355 = _3099;
                float _3356 = _3101;
                uint _3357 = _3108;
                uint _3366;
                bool _3367;
                for (;;)
                {
                    _3366 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3357 << 2u)) >> 2u)).x;
                    _3367 = _3366 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3367)
                    {
                        frontier_phi_74_pred = _3353;
                        frontier_phi_74_pred_1 = _3352;
                        frontier_phi_74_pred_2 = _3351;
                        frontier_phi_74_pred_3 = _3356;
                        frontier_phi_74_pred_4 = _3355;
                        frontier_phi_74_pred_5 = _3354;
                    }
                    else
                    {
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        float _3565 = _3353;
                        float _3566 = _3354;
                        float _3567 = _3355;
                        float _3568 = _3356;
                        uint _3569 = _3366;
                        uint _3570;
                        vec4 _3595;
                        float _3596;
                        vec4 _3611;
                        vec3 _3623;
                        vec4 _3638;
                        vec4 _3654;
                        float _3701;
                        bool _3702;
                        for (;;)
                        {
                            uint _3580 = ((_3357 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3569));
                            _3570 = (_3569 + 4294967295u) & _3569;
                            uint _3582 = _3580 * 40u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3596 = _3595.w;
                            uint _3598 = (_3580 * 40u) + 4u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3580 * 40u) + 8u;
                            _3623 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x));
                            uint _3625 = (_3580 * 40u) + 16u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3641 = (_3580 * 40u) + 20u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3657 = (_3580 * 40u) + 24u;
                            vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3676 = (_3580 * 40u) + 28u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            _3701 = fma(_2030, _3689.z, fma(_2029, _3689.y, _3689.x * _2028)) + _3689.w;
                            _3702 = !((fma(_2030, _3670.z, fma(_2029, _3670.y, _3670.x * _2028)) + _3670.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3702)
                            {
                                float _3729 = _3595.x - _2028;
                                float _3730 = _3595.y - _2029;
                                float _3731 = _3595.z - _2030;
                                float _3732 = dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731));
                                float _3735 = inversesqrt(_3732);
                                float _3736 = _3735 * _3729;
                                float _3737 = _3735 * _3730;
                                float _3738 = _3735 * _3731;
                                float _3742 = 1.0 - (_3732 / (_3596 * _3596));
                                float _4863 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3747 = sqrt(_3732) * _3611.w;
                                float _3749 = 1.39999997615814208984375 / (_3747 + 1.39999997615814208984375);
                                float _3750 = _3749 * _3749;
                                float _3753 = ((1.0 - _3750) * dot(vec3(_3736, _3737, _3738), vec3(_769, _772, _775))) + _3750;
                                float _3756 = _3747 * _3747;
                                float _3760 = (fma(_2030, _3638.z, fma(_2029, _3638.y, _3638.x * _2028)) + _3638.w) / _3701;
                                float _3761 = (fma(_2030, _3654.z, fma(_2029, _3654.y, _3654.x * _2028)) + _3654.w) / _3701;
                                float _3765 = 1.0 - dot(vec2(_3760, _3761), vec2(_3760, _3761));
                                float _4879 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3767 = _3766 * (((isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0))) * _3743) / ((_3756 * 0.699999988079071044921875) + 1.0));
                                float _3779 = exp2(log2(1.0 / ((_3756 * 3.5) + 5.0)) * 0.25);
                                float _3780 = 1.0 - _972;
                                float _3787 = sqrt(1.0 - ((1.0 - (_3780 * _3780)) * (1.0 - (_3779 * _3779))));
                                float _3788 = _3787 * _3787;
                                float _3789 = _3788 * _3788;
                                float _3790 = _3736 - _3238;
                                float _3791 = _3737 - _3239;
                                float _3792 = _3738 - _3240;
                                float _3796 = inversesqrt(dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792)));
                                float _3800 = dot(vec3(_769, _772, _775), vec3((-0.0) - _3238, (-0.0) - _3239, (-0.0) - _3240));
                                float _4890 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3804 = dot(vec3(_769, _772, _775), vec3(_3796 * _3790, _3796 * _3791, _3796 * _3792));
                                float _4901 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3811 = ((_3807 * _3807) * (_3789 + (-1.0))) + 1.0;
                                float _3812 = _3749 * _3788;
                                float _3813 = _3812 * _3812;
                                float _3819 = ((1.0 - _3813) * dot(vec3(_769, _772, _775), vec3(_3736, _3737, _3738))) + _3813;
                                float _4912 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3821 = 1.0 - _3788;
                                float _3831 = (0.5 / (((_3820 * ((_3803 * _3821) + _3788)) + 9.9999999392252902907785028219223e-09) + (((_3820 * _3821) + _3788) * _3803))) * _3820;
                                float _4923 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3841 = (_3766 * _3743) * (((_3789 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3811 * _3811) * ((_3756 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3841 * _3623.z;
                                frontier_phi_80_pred_1 = _3841 * _3623.y;
                                frontier_phi_80_pred_2 = _3841 * _3623.x;
                                frontier_phi_80_pred_3 = _3767 * _3611.z;
                                frontier_phi_80_pred_4 = _3767 * _3611.y;
                                frontier_phi_80_pred_5 = _3767 * _3611.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_80_pred;
                            _3846 = frontier_phi_80_pred_1;
                            _3845 = frontier_phi_80_pred_2;
                            _3850 = frontier_phi_80_pred_3;
                            _3849 = frontier_phi_80_pred_4;
                            _3848 = frontier_phi_80_pred_5;
                            _3553 = _3848 + _3566;
                            _3554 = _3849 + _3567;
                            _3555 = _3850 + _3568;
                            _3550 = _3845 + _3563;
                            _3551 = _3846 + _3564;
                            _3552 = _3847 + _3565;
                            if (_3570 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3570;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3552;
                        frontier_phi_74_pred_1 = _3551;
                        frontier_phi_74_pred_2 = _3550;
                        frontier_phi_74_pred_3 = _3555;
                        frontier_phi_74_pred_4 = _3554;
                        frontier_phi_74_pred_5 = _3553;
                    }
                    _3217 = frontier_phi_74_pred;
                    _3215 = frontier_phi_74_pred_1;
                    _3213 = frontier_phi_74_pred_2;
                    _3223 = frontier_phi_74_pred_3;
                    _3221 = frontier_phi_74_pred_4;
                    _3219 = frontier_phi_74_pred_5;
                    uint _3358 = _3357 + 1u;
                    if (_3358 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3351 = _3213;
                        _3352 = _3215;
                        _3353 = _3217;
                        _3354 = _3219;
                        _3355 = _3221;
                        _3356 = _3223;
                        _3357 = _3358;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3221;
                frontier_phi_62_63_ladder_1 = _3219;
                frontier_phi_62_63_ladder_2 = _3217;
                frontier_phi_62_63_ladder_3 = _3223;
                frontier_phi_62_63_ladder_4 = _3215;
                frontier_phi_62_63_ladder_5 = _3213;
            }
            else
            {
                frontier_phi_62_63_ladder = _3099;
                frontier_phi_62_63_ladder_1 = _3097;
                frontier_phi_62_63_ladder_2 = _3095;
                frontier_phi_62_63_ladder_3 = _3101;
                frontier_phi_62_63_ladder_4 = _3093;
                frontier_phi_62_63_ladder_5 = _3091;
            }
            _3212 = frontier_phi_62_63_ladder_5;
            _3214 = frontier_phi_62_63_ladder_4;
            _3216 = frontier_phi_62_63_ladder_2;
            _3218 = frontier_phi_62_63_ladder_1;
            _3220 = frontier_phi_62_63_ladder;
            _3222 = frontier_phi_62_63_ladder_3;
        }
        float _3227 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2981 = (_3227 * _3218) + _2494;
        _2983 = (_3227 * _3220) + _2496;
        _2985 = (_3227 * _3222) + _2498;
        _2987 = ((_3212 * _942) * _3227) + _2832;
        _2989 = ((_3214 * _943) * _3227) + _2834;
        _2991 = ((_3216 * _944) * _3227) + _2836;
    }
    else
    {
        _2981 = _2494;
        _2983 = _2496;
        _2985 = _2498;
        _2987 = _2832;
        _2989 = _2834;
        _2991 = _2836;
    }
    uint _2997 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _3007 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.x) * cbInstanceData._m0[_2997].x;
    float _3012 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.y) * cbInstanceData._m0[_2997].y;
    float _3017 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _589) * _602.z) * cbInstanceData._m0[_2997].z;
    float _4939 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4950 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4961 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4972 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3035 = (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2981 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _956))) + ((_2987 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1760)) * cbPerFrame._m0[3u].x)) + _3007;
    float _3037 = (_3012 + ((_2989 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1760)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2983 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _956)));
    float _3039 = (_3017 + ((_2991 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1760)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2985 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _956)));
    float _4998 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3052 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
    float _3057 = cbInstanceData._m0[_848 + 6u].w * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)));
    float _3062 = _746 / cbSceneParam._m0[86u].x;
    float _3063 = _747 / cbSceneParam._m0[86u].y;
    vec4 _3077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3079 = _3077.x;
    float _3080 = _3077.y;
    float _3081 = _3077.z;
    float _3082 = _3077.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _3117 = _3116 / _681;
        float _3128 = _3117 * _731;
        float _3129 = _732 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3131 = _3117 * _733;
        float _3133 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3129;
        float _3141 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3313;
        if (abs((_3130 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3313 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3273 = 1.0 / cbSceneParam._m0[80u].x;
            float _3274 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3275 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            _3313 = ((abs(_3141 / _3130) * cbSceneParam._m0[80u].y) * ((((_3284 - _3285) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))))) * _3273)) - ((exp2(_3151 * _3284) - exp2(_3151 * _3285)) * _3273))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3315 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, 1.0), 0.0);
        float _3324 = exp2((_3313 * (-1.44269502162933349609375)) * (1.0 - _3315.w));
        float _3325 = log2(_3324);
        float _3341 = log2(_3082);
        _3153 = (exp2(_3341 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].x)) * _3315.x) / cbSceneParam._m0[78u].x)) + _3079;
        _3155 = (exp2(_3341 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].y)) * _3315.y) / cbSceneParam._m0[78u].y)) + _3080;
        _3157 = (exp2(_3341 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].z)) * _3315.z) / cbSceneParam._m0[78u].z)) + _3081;
        _3159 = _3324 * _3082;
    }
    else
    {
        _3153 = _3079;
        _3155 = _3080;
        _3157 = _3081;
        _3159 = _3082;
    }
    float _3171 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3172 = _3171 == 3.0;
    float _3173 = log2(_3159);
    float _3177 = exp2(_3173 * cbSceneParam._m0[78u].x);
    float _3178 = exp2(_3173 * cbSceneParam._m0[78u].y);
    float _3179 = exp2(_3173 * cbSceneParam._m0[78u].z);
    float _3180 = _3177 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)));
    float _3181 = _3178 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)));
    float _3182 = _3179 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)));
    float _3191 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3191 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.y = _3191 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
    SV_Target.z = _3191 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
    SV_Target.w = _3057;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3007) * _3052) * _3177) * _3191;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3012) * _3052) * _3178) * _3191;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3017) * _3052) * _3179) * _3191;
    SV_Target_1.w = _3057;
}


