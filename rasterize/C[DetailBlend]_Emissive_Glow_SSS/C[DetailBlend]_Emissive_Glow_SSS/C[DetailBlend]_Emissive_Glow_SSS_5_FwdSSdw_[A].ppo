#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3754;
float _3755;
float _3756;
float _3757;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _258.z;
    float _270 = exp2(log2(_263 * 22.0) * 260.0);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _297 = cbMtdParam._m0[10u].x * _286.x;
    float _298 = cbMtdParam._m0[10u].y * _286.y;
    float _299 = cbMtdParam._m0[10u].z * _286.z;
    vec4 _311 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = exp2(log2(1.0 - _258.w) * 8.0);
    vec4 _339 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _386 = (((((_311.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _364.x) - _297) * _272) + _297;
    float _387 = (((((_311.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _364.y) - _298) * _272) + _298;
    float _388 = (((((_311.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _364.z) - _299) * _272) + _299;
    float _395 = (((cbMtdParam._m0[13u].x * _339.x) - _386) * _327) + _386;
    float _396 = (((cbMtdParam._m0[13u].y * _339.y) - _387) * _327) + _387;
    float _397 = (((cbMtdParam._m0[13u].z * _339.z) - _388) * _327) + _388;
    float _398 = _364.w * _311.w;
    float _428 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _272) + cbMtdParam._m0[17u].x;
    float _431 = ((cbMtdParam._m0[15u].z - _428) * _327) + _428;
    vec4 _443 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _452 = cbMtdParam._m0[14u].y + _443.z;
    vec4 _464 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _483 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _494 = ((((_263 * 2.0) * (cbMtdParam._m0[14u].x + _464.z)) - _452) * _272) + _452;
    float _498 = (((_483.z - _494) + cbMtdParam._m0[15u].y) * _327) + _494;
    float _513 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3776 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _519 = (_514 * _514) * (3.0 - (_514 * 2.0));
    vec4 _532 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _540 = (_258.x * 2.0) + (-1.0);
    float _541 = (_258.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3787 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))));
    float _552 = ((_464.x - _445) * _272) + _445;
    float _553 = ((_464.y - _446) * _272) + _446;
    float _566 = (cbMtdParam._m0[14u].z * (((((_483.x - _552) * _327) + _552) * 2.0) + (-1.0))) + _540;
    float _567 = (cbMtdParam._m0[14u].z * (((((_483.y - _553) * _327) + _553) * 2.0) + (-1.0))) + _541;
    float _570 = fma(_547, _243, fma(_567, _235 * TANGENT.x, (_221 * _213) * _566));
    float _573 = fma(_547, _244, fma(_567, _235 * TANGENT.y, (_221 * _214) * _566));
    float _576 = fma(_547, _245, fma(_567, _235 * TANGENT.z, (_221 * _215) * _566));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3798 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _584 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _585 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _586 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _587 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _588 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _589 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _605 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    vec4 _671 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _673 = _671.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_657 * _657) + (_658 * _658)) + (_659 * _659));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _983)) + _983) < ((_673 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _687 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _689 = _687.w;
    float _707 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _710 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _713 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    vec4 _715 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _717 = _715.x;
    float _729 = (((_715.y - _585) + (_715.w * _585)) * cbMtdParam._m0[3u].x) + _585;
    vec4 _730 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _746 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_717 * _717)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _730.z;
    float _754 = (((cbMatDynParam._m0[15u].x - _589) * cbMatDynParam._m0[15u].w) * _746) + _589;
    float _762 = ((_746 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _729)) + _729;
    uint _786 = uint(roundEven(NORMAL.w)) * 13u;
    uint _787 = _786 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * _586) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * _587) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * _588) * cbInstanceData._m0[_788].z;
    float _3886 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    vec4 _800 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _805 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _816 = (((_805.x - _754) + (_805.w * _754)) * cbMtdParam._m0[3u].x) + _754;
    float _829 = (cbMtdParam._m0[3u].x * (((_797 * _689) - _797) + _800.x)) + _797;
    float _830 = (cbMtdParam._m0[3u].x * (((_798 * _689) - _798) + _800.y)) + _798;
    float _831 = (cbMtdParam._m0[3u].x * (((_799 * _689) - _799) + _800.z)) + _799;
    vec4 _832 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _845 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_754 * (_586 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_754 * (_587 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_754 * (_588 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _832.z;
    float _849 = _845 * cbMatDynParam._m0[13u].w;
    float _859 = (_849 * (cbMatDynParam._m0[13u].x - _829)) + _829;
    float _860 = (_849 * (cbMatDynParam._m0[13u].y - _830)) + _830;
    float _861 = (_849 * (cbMatDynParam._m0[13u].z - _831)) + _831;
    float _869 = ((_845 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _816)) + _816;
    float _870 = 1.0 - _869;
    float _871 = _870 * _859;
    float _872 = _870 * _860;
    float _873 = _870 * _861;
    float _877 = (_859 + (-0.039999999105930328369140625)) * _869;
    float _878 = (_860 + (-0.039999999105930328369140625)) * _869;
    float _879 = (_861 + (-0.039999999105930328369140625)) * _869;
    float _880 = _877 + 0.039999999105930328369140625;
    float _881 = _878 + 0.039999999105930328369140625;
    float _882 = _879 + 0.039999999105930328369140625;
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _684, cbSceneParam._m0[86u].y * _685));
    float _894 = _891.x * TEXCOORD_4;
    float _895 = dot(vec3(_581, _582, _583), vec3(_664, _665, _666));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _581) - _664;
    float _903 = (_898 * _582) - _665;
    float _904 = (_898 * _583) - _666;
    float _908 = abs(dot(vec3(_664, _665, _666), vec3(_581, _582, _583)));
    float _3919 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_762);
    float _922 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _928 = (1.0 - _922) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _929 = _922 * _910;
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1025 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1029 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1054 = _957 + _581;
        float _1055 = _961 + _582;
        float _1056 = _965 + _583;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_581, _582, _583), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3967 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_581, _582, _583), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4000 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_581, _582, _583), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4033 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1340 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1344 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1348 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1371 = _957 + _581;
        float _1372 = _961 + _582;
        float _1373 = _965 + _583;
        float _1383 = fma(_1373, cbModelParam._m0[30u].z, fma(_1372, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1371)) - _1340;
        float _1384 = fma(_1373, cbModelParam._m0[31u].z, fma(_1372, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1371)) - _1344;
        float _1385 = fma(_1373, cbModelParam._m0[32u].z, fma(_1372, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1371)) - _1348;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1340 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1344 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[35u].z) + ((((((_1348 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1439 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1406.x + (-0.5));
        float _1441 = _1439 * (_1406.y + (-0.5));
        float _1442 = _1439 * (_1406.z + (-0.5));
        float _1449 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1413.x + (-0.5));
        float _1451 = _1449 * (_1413.y + (-0.5));
        float _1452 = _1449 * (_1413.z + (-0.5));
        float _1459 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1420.x + (-0.5));
        float _1461 = _1459 * (_1420.y + (-0.5));
        float _1462 = _1459 * (_1420.z + (-0.5));
        float _1469 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1427.x + (-0.5));
        float _1471 = _1469 * (_1427.y + (-0.5));
        float _1472 = _1469 * (_1427.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_581, _582, _583), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4096 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1503 + 1.0))) + _1508) * _1473;
        float _1518 = _1441 * 0.5;
        float _1519 = _1451 * 0.5;
        float _1520 = _1461 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_581, _582, _583), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4129 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1545 + 1.0))) + _1550) * _1474;
        float _1560 = _1442 * 0.5;
        float _1561 = _1452 * 0.5;
        float _1562 = _1462 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_581, _582, _583), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4162 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1587 + 1.0))) + _1592) * _1475;
        _1609 = _1442;
        _1610 = _1441;
        _1611 = _1440;
        _1612 = _1452;
        _1613 = _1451;
        _1614 = _1450;
        _1615 = _1462;
        _1616 = _1461;
        _1617 = _1460;
        _1618 = _1475;
        _1619 = _1474;
        _1620 = _1473;
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
    }
    else
    {
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = _1297;
        _1620 = _1297;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1309)) + _1309;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1310)) + _1310;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1656 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1633));
    float _1677 = _902 * 0.5;
    float _1678 = _903 * 0.5;
    float _1679 = _904 * 0.5;
    float _1680 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1683 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1686 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1693 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1697 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1701 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1708 = dot(vec4(cbModelParam._m0[39u]), vec4(_1677, _1678, _1679, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1677, _1678, _1679, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1804 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1807 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1835 = frontier_phi_19_17_ladder;
        }
        float _2060;
        if (_1804 > 0.0)
        {
            _2060 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2317;
        if (_1807 > 0.0)
        {
            _2317 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2317 = frontier_phi_40_35_ladder;
        }
        float _2319 = isnan(_2060) ? _1835 : (isnan(_1835) ? _2060 : min(_1835, _2060));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1801) + _1790;
        float _2325 = (_2320 * _1804) + _1794;
        float _2326 = (_2320 * _1807) + _1798;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2327;
        float _2331 = _2327 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 > _2331) || ((_2325 < _2329) || ((_2324 < _2329) || (_2324 > _2331))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_18_40_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_18_40_ladder_2;
        _1825 = frontier_phi_18_40_ladder_1;
        _1827 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1901 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1904 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2065;
        if (_1898 > 0.0)
        {
            _2065 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2065 = frontier_phi_30_26_ladder;
        }
        float _2344;
        if (_1901 > 0.0)
        {
            _2344 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2344 = frontier_phi_42_37_ladder;
        }
        float _2557;
        if (_1904 > 0.0)
        {
            _2557 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2557 = frontier_phi_51_48_ladder;
        }
        float _2559 = isnan(_2344) ? _2065 : (isnan(_2065) ? _2344 : min(_2065, _2344));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1898) + _1887;
        float _2565 = (_2560 * _1901) + _1891;
        float _2566 = (_2560 * _1904) + _1895;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_27_51_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_27_51_ladder_2;
        _1925 = frontier_phi_27_51_ladder_1;
        _1927 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1832);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_928 * _880) + _929) * _894) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_928 * _881) + _929) * _894) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1944 = (((_928 * _882) + _929) * _894) * ((cbModelParam._m0[1u].w * (_1927 - _1827)) + _1827);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    vec4 _1961 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_684, _685));
    float _1963 = _1961.w;
    float _1975 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1963);
    float _1976 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1963);
    float _1977 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1963);
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_786 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _894 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2019 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2023 = _1983 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_581, _582, _583));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_581, _582, _583));
    float _4298 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4309 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2000].x * _2006) * _2044) + (((cbLight._m0[_2010].x * _1975) * _2019) * _2042);
    float _2052 = ((_2006 * cbLight._m0[_2000].y) * _2044) + (((cbLight._m0[_2010].y * _1976) * _2019) * _2042);
    float _2053 = ((_2006 * cbLight._m0[_2000].z) * _2044) + (((cbLight._m0[_2010].z * _1977) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2059)
    {
        _2070 = _2051;
        _2072 = _2052;
        _2074 = _2053;
    }
    else
    {
        uint _2078 = _1983 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4320 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2097 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _2051;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _2052;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _2053;
    }
    bool _2077 = _2057.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2077)
    {
        _2115 = _2070;
        _2117 = _2072;
        _2119 = _2074;
    }
    else
    {
        uint _2288 = _1983 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4336 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2307 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2115 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2070;
        _2117 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2072;
        _2119 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2074;
    }
    uint _2122 = _1983 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _762) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1983].x + _664;
    float _2138 = cbLight._m0[_1983].y + _665;
    float _2139 = cbLight._m0[_1983].z + _666;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1983].xyz));
    float _4352 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2151 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2152 = dot(vec3(_581, _582, _583), vec3(_2144, _2145, _2146));
    float _4374 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2144, _2145, _2146));
    float _4385 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _877;
    float _2175 = 0.959999978542327880859375 - _878;
    float _2176 = 0.959999978542327880859375 - _879;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4396 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2210 = _1983 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _762) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2023].x + _664;
    float _2224 = cbLight._m0[_2023].y + _665;
    float _2225 = cbLight._m0[_2023].z + _666;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2023].xyz));
    float _4407 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2237 = dot(vec3(_581, _582, _583), vec3(_2230, _2231, _2232));
    float _4418 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2230, _2231, _2232));
    float _4429 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2263 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2151 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2263) + _2222) * _2236))) * _2236;
    float _4440 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2285 = (((((_2256 * _2173) + _880) * cbLight._m0[_2210].x) * _2275) * _2006) + ((((cbLight._m0[_2122].x * _1975) * ((_2172 * _2173) + _880)) * _2196) * _2019);
    float _2286 = (((((_2256 * _2175) + _881) * cbLight._m0[_2210].y) * _2275) * _2006) + ((((cbLight._m0[_2122].y * _1976) * ((_2172 * _2175) + _881)) * _2196) * _2019);
    float _2287 = (((((_2256 * _2176) + _882) * cbLight._m0[_2210].z) * _2275) * _2006) + ((((cbLight._m0[_2122].z * _1977) * ((_2172 * _2176) + _882)) * _2196) * _2019);
    float _2349;
    float _2351;
    float _2353;
    if (_2059)
    {
        _2349 = _2285;
        _2351 = _2286;
        _2353 = _2287;
    }
    else
    {
        uint _2355 = _1983 + 2u;
        uint _2359 = _1983 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _762) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _664;
        float _2376 = cbLight._m0[_2355].y + _665;
        float _2377 = cbLight._m0[_2355].z + _666;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2355].xyz));
        float _4451 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2389 = dot(vec3(_581, _582, _583), vec3(_2382, _2383, _2384));
        float _4462 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4473 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2151 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2415) + _2374) * _2388))) * _2388;
        float _4484 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2349 = (((((_2408 * _2173) + _880) * cbLight._m0[_2359].x) * _2427) * _2428) + _2285;
        _2351 = (((((_2408 * _2175) + _881) * cbLight._m0[_2359].y) * _2427) * _2428) + _2286;
        _2353 = (((((_2408 * _2176) + _882) * cbLight._m0[_2359].z) * _2427) * _2428) + _2287;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2077)
    {
        _2463 = _2349;
        _2465 = _2351;
        _2467 = _2353;
    }
    else
    {
        uint _2474 = _1983 + 3u;
        uint _2478 = _1983 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _762) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _664;
        float _2495 = cbLight._m0[_2474].y + _665;
        float _2496 = cbLight._m0[_2474].z + _666;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2474].xyz));
        float _4500 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2508 = dot(vec3(_581, _582, _583), vec3(_2501, _2502, _2503));
        float _4511 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4522 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2151 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2534) + _2493) * _2507))) * _2507;
        float _4533 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2463 = (((((_2527 * _2173) + _880) * cbLight._m0[_2478].x) * _2546) * _2547) + _2349;
        _2465 = (((((_2527 * _2175) + _881) * cbLight._m0[_2478].y) * _2546) * _2547) + _2351;
        _2467 = (((((_2527 * _2176) + _882) * cbLight._m0[_2478].z) * _2546) * _2547) + _2353;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1981.y == 0u)
    {
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2622;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2622;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2622;
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _2638)));
        float _2659 = (log2(_2625 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2989)
                {
                    frontier_phi_68_pred = _2975;
                    frontier_phi_68_pred_1 = _2978;
                    frontier_phi_68_pred_2 = _2977;
                    frontier_phi_68_pred_3 = _2976;
                    frontier_phi_68_pred_4 = _2974;
                    frontier_phi_68_pred_5 = _2973;
                }
                else
                {
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    uint _3124;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2988;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    for (;;)
                    {
                        uint _3128 = uint(findLSB(_3124)) + (_2979 << 5u);
                        uint _3125 = (_3124 + 4294967295u) & _3124;
                        uint _3130 = _3128 * 48u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3150 = (_3128 * 48u) + 4u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3169 = (_3128 * 48u) + 8u;
                        vec3 _3180 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x));
                        float _3184 = _3144.x - _2623;
                        float _3185 = _3144.y - _2624;
                        float _3186 = _3144.z - _2625;
                        float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                        float _3190 = inversesqrt(_3187);
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3194 = dot(vec3(_707, _710, _713), vec3(_3191, _3192, _3193));
                        float _3199 = 1.0 - (_3187 * _3144.w);
                        float _4559 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3201 = sqrt(_3187) * _3163.w;
                        float _3204 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3194) + _3205;
                        float _3211 = _3201 * _3201;
                        float _3215 = ((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3200) / ((_3211 * 0.699999988079071044921875) + 1.0);
                        float _3219 = (-0.0) - _2623;
                        float _3220 = (-0.0) - _2624;
                        float _3221 = (-0.0) - _2625;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3236 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                        float _3237 = 1.0 - _910;
                        float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                        float _3245 = _3244 * _3244;
                        float _3246 = _3245 * _3245;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3249 = _3228 + _3193;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3257 = dot(vec3(_707, _710, _713), vec3(_3226, _3227, _3228));
                        float _4575 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3261 = dot(vec3(_707, _710, _713), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                        float _4586 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                        float _3269 = _3204 * _3245;
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3194) + _3270;
                        float _4597 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3275 = 1.0 - _3245;
                        float _3285 = (0.5 / (((_3274 * ((_3260 * _3275) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3245) * _3260))) * _3274;
                        float _4608 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3296 = (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3268 * _3268) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125))) * _3200;
                        _3048 = (_3215 * _3163.x) + _3121;
                        _3049 = (_3215 * _3163.y) + _3122;
                        _3050 = (_3215 * _3163.z) + _3123;
                        _3045 = (_3296 * _3180.x) + _3118;
                        _3046 = (_3296 * _3180.y) + _3119;
                        _3047 = (_3296 * _3180.z) + _3120;
                        if (_3125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3125;
                        }
                    }
                    frontier_phi_68_pred = _3047;
                    frontier_phi_68_pred_1 = _3050;
                    frontier_phi_68_pred_2 = _3049;
                    frontier_phi_68_pred_3 = _3048;
                    frontier_phi_68_pred_4 = _3046;
                    frontier_phi_68_pred_5 = _3045;
                }
                _2817 = frontier_phi_68_pred;
                _2823 = frontier_phi_68_pred_1;
                _2821 = frontier_phi_68_pred_2;
                _2819 = frontier_phi_68_pred_3;
                _2815 = frontier_phi_68_pred_4;
                _2813 = frontier_phi_68_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2813;
                    _2974 = _2815;
                    _2975 = _2817;
                    _2976 = _2819;
                    _2977 = _2821;
                    _2978 = _2823;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2829) & _2669) == 0u)
        {
            _2941 = _2812;
            _2943 = _2814;
            _2945 = _2816;
            _2947 = _2818;
            _2949 = _2820;
            _2951 = _2822;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
            float _2967 = _2966 * _2623;
            float _2968 = _2966 * _2624;
            float _2969 = _2966 * _2625;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3101 = _2812;
                float _3102 = _2814;
                float _3103 = _2816;
                float _3104 = _2818;
                float _3105 = _2820;
                float _3106 = _2822;
                uint _3107 = _2829;
                uint _3116;
                bool _3117;
                for (;;)
                {
                    _3116 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                    _3117 = _3116 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3117)
                    {
                        frontier_phi_79_pred = _3106;
                        frontier_phi_79_pred_1 = _3105;
                        frontier_phi_79_pred_2 = _3104;
                        frontier_phi_79_pred_3 = _3103;
                        frontier_phi_79_pred_4 = _3102;
                        frontier_phi_79_pred_5 = _3101;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        uint _3329 = _3116;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3414;
                        float _3461;
                        bool _3462;
                        for (;;)
                        {
                            uint _3340 = ((_3107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3340 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3340 * 40u) + 24u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3436 = (_3340 * 40u) + 28u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3461 = fma(_2625, _3449.z, fma(_2624, _3449.y, _3449.x * _2623)) + _3449.w;
                            _3462 = !((fma(_2625, _3430.z, fma(_2624, _3430.y, _3430.x * _2623)) + _3430.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3462)
                            {
                                float _3489 = _3355.x - _2623;
                                float _3490 = _3355.y - _2624;
                                float _3491 = _3355.z - _2625;
                                float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                                float _3495 = inversesqrt(_3492);
                                float _3496 = _3495 * _3489;
                                float _3497 = _3495 * _3490;
                                float _3498 = _3495 * _3491;
                                float _3502 = 1.0 - (_3492 / (_3356 * _3356));
                                float _4619 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3507 = sqrt(_3492) * _3371.w;
                                float _3509 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                                float _3510 = _3509 * _3509;
                                float _3513 = ((1.0 - _3510) * dot(vec3(_3496, _3497, _3498), vec3(_707, _710, _713))) + _3510;
                                float _3516 = _3507 * _3507;
                                float _3520 = (fma(_2625, _3398.z, fma(_2624, _3398.y, _3398.x * _2623)) + _3398.w) / _3461;
                                float _3521 = (fma(_2625, _3414.z, fma(_2624, _3414.y, _3414.x * _2623)) + _3414.w) / _3461;
                                float _3525 = 1.0 - dot(vec2(_3520, _3521), vec2(_3520, _3521));
                                float _4635 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3527 = _3526 * (((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3503) / ((_3516 * 0.699999988079071044921875) + 1.0));
                                float _3539 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                                float _3540 = 1.0 - _910;
                                float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                                float _3548 = _3547 * _3547;
                                float _3549 = _3548 * _3548;
                                float _3550 = _3496 - _2967;
                                float _3551 = _3497 - _2968;
                                float _3552 = _3498 - _2969;
                                float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                                float _3560 = dot(vec3(_707, _710, _713), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4646 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3564 = dot(vec3(_707, _710, _713), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                                float _4657 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                                float _3572 = _3509 * _3548;
                                float _3573 = _3572 * _3572;
                                float _3579 = ((1.0 - _3573) * dot(vec3(_707, _710, _713), vec3(_3496, _3497, _3498))) + _3573;
                                float _4668 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3581 = 1.0 - _3548;
                                float _3591 = (0.5 / (((_3580 * ((_3563 * _3581) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3548) * _3563))) * _3580;
                                float _4679 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3601 = (_3526 * _3503) * (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3571 * _3571) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3527 * _3371.z;
                                frontier_phi_85_pred_1 = _3527 * _3371.y;
                                frontier_phi_85_pred_2 = _3527 * _3371.x;
                                frontier_phi_85_pred_3 = _3601 * _3383.z;
                                frontier_phi_85_pred_4 = _3601 * _3383.y;
                                frontier_phi_85_pred_5 = _3601 * _3383.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_85_pred;
                            _3609 = frontier_phi_85_pred_1;
                            _3608 = frontier_phi_85_pred_2;
                            _3607 = frontier_phi_85_pred_3;
                            _3606 = frontier_phi_85_pred_4;
                            _3605 = frontier_phi_85_pred_5;
                            _3313 = _3608 + _3326;
                            _3314 = _3609 + _3327;
                            _3315 = _3610 + _3328;
                            _3310 = _3605 + _3323;
                            _3311 = _3606 + _3324;
                            _3312 = _3607 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3315;
                        frontier_phi_79_pred_1 = _3314;
                        frontier_phi_79_pred_2 = _3313;
                        frontier_phi_79_pred_3 = _3312;
                        frontier_phi_79_pred_4 = _3311;
                        frontier_phi_79_pred_5 = _3310;
                    }
                    _2952 = frontier_phi_79_pred;
                    _2950 = frontier_phi_79_pred_1;
                    _2948 = frontier_phi_79_pred_2;
                    _2946 = frontier_phi_79_pred_3;
                    _2944 = frontier_phi_79_pred_4;
                    _2942 = frontier_phi_79_pred_5;
                    uint _3108 = _3107 + 1u;
                    if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3101 = _2942;
                        _3102 = _2944;
                        _3103 = _2946;
                        _3104 = _2948;
                        _3105 = _2950;
                        _3106 = _2952;
                        _3107 = _3108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2948;
                frontier_phi_60_61_ladder_1 = _2952;
                frontier_phi_60_61_ladder_2 = _2950;
                frontier_phi_60_61_ladder_3 = _2946;
                frontier_phi_60_61_ladder_4 = _2944;
                frontier_phi_60_61_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_60_61_ladder = _2818;
                frontier_phi_60_61_ladder_1 = _2822;
                frontier_phi_60_61_ladder_2 = _2820;
                frontier_phi_60_61_ladder_3 = _2816;
                frontier_phi_60_61_ladder_4 = _2814;
                frontier_phi_60_61_ladder_5 = _2812;
            }
            _2941 = frontier_phi_60_61_ladder_5;
            _2943 = frontier_phi_60_61_ladder_4;
            _2945 = frontier_phi_60_61_ladder_3;
            _2947 = frontier_phi_60_61_ladder;
            _2949 = frontier_phi_60_61_ladder_2;
            _2951 = frontier_phi_60_61_ladder_1;
        }
        float _2956 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2681 = (_2956 * _2947) + _2115;
        _2683 = (_2956 * _2949) + _2117;
        _2685 = (_2956 * _2951) + _2119;
        _2687 = ((_2941 * _880) * _2956) + _2463;
        _2689 = ((_2943 * _881) * _2956) + _2465;
        _2691 = ((_2945 * _882) * _2956) + _2467;
    }
    else
    {
        _2681 = _2115;
        _2683 = _2117;
        _2685 = _2119;
        _2687 = _2463;
        _2689 = _2465;
        _2691 = _2467;
    }
    uint _2697 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _2707 = ((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _519) * _532.x) * cbInstanceData._m0[_2697].x;
    float _2712 = ((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _519) * _532.y) * cbInstanceData._m0[_2697].y;
    float _2717 = ((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _519) * _532.z) * cbInstanceData._m0[_2697].z;
    float _4695 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4706 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4717 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4728 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2735 = (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2681 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _894))) + ((_2687 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1732)) * cbPerFrame._m0[3u].x)) + _2707;
    float _2737 = (_2712 + ((_2689 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1732)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2683 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _894)));
    float _2739 = (_2717 + ((_2691 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1732)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2685 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _894)));
    float _2740 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2741 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2742 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2748 = cbMtdParam._m0[2u].x * _2707;
    float _2749 = cbMtdParam._m0[2u].y * _2712;
    float _2750 = cbMtdParam._m0[2u].z * _2717;
    float _4754 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2752 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2757 = cbInstanceData._m0[_786 + 6u].w * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)));
    float _2762 = _684 / cbSceneParam._m0[86u].x;
    float _2763 = _685 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _605 : (isnan(_605) ? cbSceneParam._m0[77u].w : min(_605, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_605 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_605) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _605 : min(cbSceneParam._m0[80u].w, _605));
        float _2838 = _2837 / _605;
        float _2849 = _2838 * _657;
        float _2850 = _658 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2852 = _2838 * _659;
        float _2854 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2855 = _2854 + cbSceneParam._m0[79u].w;
        float _2856 = cbSceneParam._m0[79u].w - _2850;
        float _2862 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2852 * _2852));
        float _2865 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2862;
        float _2870 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2872 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3058;
        if (abs((_2851 - _2854) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3058 = ((((_2855 > 0.0) ? exp2(_2870 * _2855) : (2.0 - exp2(_2872 * _2855))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2865;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : max(_2855, _2856));
            float _3004 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : min(_2855, _2856));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3058 = ((abs(_2862 / _2851) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2870 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2870 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2872 * _3013) - exp2(_2872 * _3014)) * _3002))) + (_2865 * cbSceneParam._m0[80u].z);
        }
        vec4 _3060 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3069 = exp2((_3058 * (-1.44269502162933349609375)) * (1.0 - _3060.w));
        float _3070 = log2(_3069);
        float _3086 = log2(_2782);
        _2874 = (exp2(_3086 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].x)) * _3060.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2876 = (exp2(_3086 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].y)) * _3060.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2878 = (exp2(_3086 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].z)) * _3060.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2880 = _3069 * _2782;
    }
    else
    {
        _2874 = _2779;
        _2876 = _2780;
        _2878 = _2781;
        _2880 = _2782;
    }
    bool _3096;
    vec4 _2890;
    vec4 _2912;
    float _2914;
    float _2918;
    float _2919;
    float _2920;
    float _2923;
    float _2926;
    float _2929;
    float _2930;
    bool _2940;
    for (;;)
    {
        _2890 = cbMatDynParam._m0[0u];
        float _2892 = roundEven(_2890.y);
        bool _2893 = _2892 == 3.0;
        float _2894 = log2(_2880);
        float _2898 = exp2(_2894 * cbSceneParam._m0[78u].x);
        float _2899 = exp2(_2894 * cbSceneParam._m0[78u].y);
        float _2900 = exp2(_2894 * cbSceneParam._m0[78u].z);
        float _2901 = _2898 * _2740;
        float _2902 = _2899 * _2741;
        float _2903 = _2900 * _2742;
        float _2910 = _673 + (-0.5);
        _2912 = cbMtdParam._m0[1u];
        _2914 = _2912.y * _2910;
        float _2917 = (_2892 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2918 = _2917 * (_2893 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2874)));
        _2919 = _2917 * (_2893 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2876)));
        _2920 = _2917 * (_2893 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2878)));
        _2923 = ((_2748 * _2752) * _2898) * _2917;
        _2926 = ((_2749 * _2752) * _2899) * _2917;
        _2929 = ((_2750 * _2752) * _2900) * _2917;
        _2930 = _2910 * 0.999000012874603271484375;
        _2940 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2940)
        {
            if ((cbInstanceData._m0[_786 + 7u].x + _2930) < 0.5)
            {
                _3096 = true;
                break;
            }
        }
        uint _3037 = _787 + uint(_2890.w);
        if ((cbInstanceData._m0[_3037].w < 1.0) && ((cbInstanceData._m0[_3037].w + _2930) < 0.5))
        {
            _3096 = true;
            break;
        }
        if ((_2914 + _398) < _2912.x)
        {
            _3096 = true;
            break;
        }
        _3096 = false;
        break;
    }
    float _3301;
    if (_3096)
    {
        discard_state = true;
        _3301 = 0.0;
    }
    else
    {
        _3301 = _2757;
    }
    SV_Target.x = _2918;
    SV_Target.y = _2919;
    SV_Target.z = _2920;
    SV_Target.w = _3301;
    SV_Target_1.x = _2923;
    SV_Target_1.y = _2926;
    SV_Target_1.z = _2929;
    SV_Target_1.w = _2757;
    discard_exit();
}


