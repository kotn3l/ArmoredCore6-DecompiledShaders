#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1266;
float _3974;
float _3975;
float _3976;
float _3977;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    float _283 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _293 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _283);
    float _294 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _283);
    float _295 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _283);
    vec4 _308 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _325 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _347 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _356 = ((_325.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _347.x;
    float _359 = ((_325.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _347.y;
    float _362 = ((_325.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _347.z;
    float _363 = _347.w * _325.w;
    vec4 _376 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _383 = cbMtdParam._m0[16u].x + _376.x;
    vec4 _395 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _407 = (_308.z * 2.0) * (cbMtdParam._m0[14u].x + _395.z);
    float _425 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3986 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _427 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _432 = (_427 * _427) * (3.0 - (_427 * 2.0));
    vec4 _445 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _453 = (_308.x * 2.0) + (-1.0);
    float _454 = (_308.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3997 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))));
    float _467 = (cbMtdParam._m0[14u].z * ((_395.x * 2.0) + (-1.0))) + _453;
    float _468 = (cbMtdParam._m0[14u].z * ((_395.y * 2.0) + (-1.0))) + _454;
    float _471 = fma(_460, _237, fma(_468, _229 * TANGENT.x, (_215 * _207) * _467));
    float _474 = fma(_460, _238, fma(_468, _229 * TANGENT.y, (_215 * _208) * _467));
    float _477 = fma(_460, _239, fma(_468, _229 * TANGENT.z, (_215 * _209) * _467));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    float _482 = _481 * _471;
    float _483 = _481 * _474;
    float _484 = _481 * _477;
    float _4008 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _485 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _486 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _487 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _488 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _489 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _490 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _498 = cbMatDynParam._m0[9u].x * _487;
    float _499 = cbMatDynParam._m0[9u].y * _488;
    float _500 = cbMatDynParam._m0[9u].z * _489;
    float _507 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _508 = _507 * _293;
    float _509 = _507 * _294;
    float _510 = _507 * _295;
    float _511 = dot(vec3(_482, _483, _484), vec3(_508, _509, _510));
    float _517 = abs(exp2(log2(_511) * cbMatDynParam._m0[12u].x));
    float _518 = isnan(0.100000001490116119384765625) ? _517 : (isnan(_517) ? 0.100000001490116119384765625 : max(_517, 0.100000001490116119384765625));
    float _524 = ((isnan(0.699999988079071044921875) ? _518 : (isnan(_518) ? 0.699999988079071044921875 : min(_518, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _546 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4084 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4095 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _553 = (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _550) * _524) + _550;
    float _572 = dot(vec3(_482, _483, _484), vec3(0.0, -1.0, 0.0));
    float _4106 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _582 = (_575 * _487) * cbMatDynParam._m0[11u].x;
    float _584 = (_575 * _488) * cbMatDynParam._m0[11u].y;
    float _586 = (_575 * _489) * cbMatDynParam._m0[11u].z;
    float _593 = dot(vec3(_508, _509, _510), vec3(_482, _483, _484));
    float _596 = _593 * 2.0;
    float _606 = dot(vec3((-0.0) - (_508 - (_596 * _482)), (-0.0) - (_509 - (_596 * _483)), (-0.0) - (_510 - (_596 * _484))), vec3(0.0, -1.0, 0.0));
    float _4117 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _613 = exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 4.0);
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _644 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _646 = _644.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_293 * _293) + (_294 * _294)) + (_295 * _295));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _4128 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _4139 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) - _952)) + _952) < ((_646 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _661 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _663 = _661.w;
    float _682 = fma(_484, cbSceneParam._m0[5u].z, fma(_483, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _482));
    float _685 = fma(_484, cbSceneParam._m0[6u].z, fma(_483, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _482));
    float _688 = fma(_484, cbSceneParam._m0[7u].z, fma(_483, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _482));
    vec4 _690 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.x;
    float _704 = (((_690.y - _486) + (_690.w * _486)) * cbMtdParam._m0[3u].x) + _486;
    float _721 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_692 * _692)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _729 = (((cbMatDynParam._m0[15u].x - _490) * cbMatDynParam._m0[15u].w) * _721) + _490;
    float _737 = ((_721 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _704)) + _704;
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _763 = _761 + 9u;
    uint _764 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * _498) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * _499) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * _500) * cbInstanceData._m0[_764].z;
    float _4150 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    vec4 _776 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.x - _729) + (_781.w * _729)) * cbMtdParam._m0[3u].x) + _729;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _663) - _773) + _776.x)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _663) - _774) + _776.y)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _663) - _775) + _776.z)) + _775;
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_729 * (_498 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_499 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_500 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _808.z;
    float _825 = _821 * cbMatDynParam._m0[13u].w;
    float _835 = (_825 * (cbMatDynParam._m0[13u].x - _805)) + _805;
    float _836 = (_825 * (cbMatDynParam._m0[13u].y - _806)) + _806;
    float _837 = (_825 * (cbMatDynParam._m0[13u].z - _807)) + _807;
    float _845 = ((_821 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _792)) + _792;
    float _846 = 1.0 - _845;
    float _847 = _846 * _835;
    float _848 = _846 * _836;
    float _849 = _846 * _837;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _845;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _845;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _845;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _870 = _867.x * TEXCOORD_4;
    float _871 = _511 * 2.0;
    float _875 = (_871 * _482) - _508;
    float _876 = (_871 * _483) - _509;
    float _877 = (_871 * _484) - _510;
    float _878 = abs(_593);
    float _4183 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_737);
    float _891 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _897 = (1.0 - _891) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _880;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1265;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _990 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _994 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _998 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1023 = _926 + _482;
        float _1024 = _930 + _483;
        float _1025 = _934 + _484;
        float _1035 = fma(_1025, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023)) - _990;
        float _1036 = fma(_1025, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023)) - _994;
        float _1037 = fma(_1025, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023)) - _998;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_990 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_994 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[34u].z) + ((((((_998 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1093 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1059.x + (-0.5));
        float _1095 = _1093 * (_1059.y + (-0.5));
        float _1096 = _1093 * (_1059.z + (-0.5));
        float _1103 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1066.x + (-0.5));
        float _1105 = _1103 * (_1066.y + (-0.5));
        float _1106 = _1103 * (_1066.z + (-0.5));
        float _1113 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1073.x + (-0.5));
        float _1115 = _1113 * (_1073.y + (-0.5));
        float _1116 = _1113 * (_1073.z + (-0.5));
        float _1123 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1080.x + (-0.5));
        float _1125 = _1123 * (_1080.y + (-0.5));
        float _1126 = _1123 * (_1080.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1147 = (dot(vec3(_482, _483, _484), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1157 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _4231 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1159 + 1.0))) + _1164) * _1127;
        float _1174 = _1095 * 0.5;
        float _1175 = _1105 * 0.5;
        float _1176 = _1115 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_482, _483, _484), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _4264 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1201 + 1.0))) + _1206) * _1128;
        float _1216 = _1096 * 0.5;
        float _1217 = _1106 * 0.5;
        float _1218 = _1116 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_482, _483, _484), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4297 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1243 + 1.0))) + _1248) * _1129;
        _1265 = _1096;
        _1267 = _1095;
        _1268 = _1094;
        _1269 = _1106;
        _1270 = _1105;
        _1271 = _1104;
        _1272 = _1116;
        _1273 = _1115;
        _1274 = _1114;
        _1275 = _1129;
        _1276 = _1128;
        _1277 = _1127;
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _1266;
        _1267 = _1266;
        _1268 = _1266;
        _1269 = _1266;
        _1270 = _1266;
        _1271 = _1266;
        _1272 = _1266;
        _1273 = _1266;
        _1274 = _1266;
        _1275 = _1266;
        _1276 = _1266;
        _1277 = _1266;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1313 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1317 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1340 = _926 + _482;
        float _1341 = _930 + _483;
        float _1342 = _934 + _484;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_482, _483, _484), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4360 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_482, _483, _484), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4393 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_482, _483, _484), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4426 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1266;
        _1579 = _1266;
        _1580 = _1266;
        _1581 = _1266;
        _1582 = _1266;
        _1583 = _1266;
        _1584 = _1266;
        _1585 = _1266;
        _1586 = _1266;
        _1587 = _1266;
        _1588 = _1266;
        _1589 = _1266;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1278)) + _1278;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1280)) + _1280;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _875 * 0.5;
    float _1647 = _876 * 0.5;
    float _1648 = _877 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1265, _1269, _1272, _1275));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1773 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1776 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1804 = frontier_phi_19_17_ladder;
        }
        float _1977;
        if (_1773 > 0.0)
        {
            _1977 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1977 = frontier_phi_28_24_ladder;
        }
        float _2272;
        if (_1776 > 0.0)
        {
            _2272 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2272 = frontier_phi_40_35_ladder;
        }
        float _2274 = isnan(_1977) ? _1804 : (isnan(_1804) ? _1977 : min(_1804, _1977));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1770) + _1759;
        float _2280 = (_2275 * _1773) + _1763;
        float _2281 = (_2275 * _1776) + _1767;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2282;
        float _2286 = _2282 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 > _2286) || ((_2280 < _2284) || ((_2279 < _2284) || (_2279 > _2286))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_18_40_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_18_40_ladder_2;
        _1794 = frontier_phi_18_40_ladder_1;
        _1796 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1712);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1870 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1873 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _1982;
        if (_1867 > 0.0)
        {
            _1982 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1982 = frontier_phi_30_26_ladder;
        }
        float _2299;
        if (_1870 > 0.0)
        {
            _2299 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2299 = frontier_phi_42_37_ladder;
        }
        float _2637;
        if (_1873 > 0.0)
        {
            _2637 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2637 = frontier_phi_52_49_ladder;
        }
        float _2639 = isnan(_2299) ? _1982 : (isnan(_1982) ? _2299 : min(_1982, _2299));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1867) + _1856;
        float _2645 = (_2640 * _1870) + _1860;
        float _2646 = (_2640 * _1873) + _1864;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_27_52_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_27_52_ladder_2;
        _1894 = frontier_phi_27_52_ladder_1;
        _1896 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1801);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1909 = (((_897 * _856) + _898) * _870) * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1911 = (((_897 * _857) + _898) * _870) * ((cbModelParam._m0[1u].w * (_1894 - _1794)) + _1794);
    float _1913 = (((_897 * _858) + _898) * _870) * ((cbModelParam._m0[1u].w * (_1896 - _1796)) + _1796);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1969 = _1956 / _1968;
    float _1970 = _1960 / _1968;
    float _1971 = _1964 / _1968;
    float _2118;
    float _2119;
    float _2120;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1998 = ((uint(_1971 > cbSceneParam._m0[59u].y) + uint(_1971 > cbSceneParam._m0[59u].x)) + uint(_1971 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1999 = _1998 + 43u;
        uint _2007 = _1998 + 44u;
        uint _2015 = _1998 + 45u;
        uint _2023 = _1998 + 46u;
        float _2034 = fma(_1968, cbSceneParam._m0[_1999].w, fma(_1964, cbSceneParam._m0[_1999].z, fma(_1960, cbSceneParam._m0[_1999].y, _1956 * cbSceneParam._m0[_1999].x)));
        float _2038 = fma(_1968, cbSceneParam._m0[_2007].w, fma(_1964, cbSceneParam._m0[_2007].z, fma(_1960, cbSceneParam._m0[_2007].y, _1956 * cbSceneParam._m0[_2007].x)));
        float _2046 = fma(_1968, cbSceneParam._m0[_2023].w, fma(_1964, cbSceneParam._m0[_2023].z, fma(_1960, cbSceneParam._m0[_2023].y, _1956 * cbSceneParam._m0[_2023].x)));
        float _2051 = cbSceneParam._m0[33u].z * _2046;
        float _2053 = cbSceneParam._m0[33u].w * _2046;
        float _2056 = fma(_1968, cbSceneParam._m0[_2015].w, fma(_1964, cbSceneParam._m0[_2015].z, fma(_1960, cbSceneParam._m0[_2015].y, _1956 * cbSceneParam._m0[_2015].x))) / _2046;
        float _2104 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
        float _4552 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2111 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 + _2034) / _2046, (_2053 + _2038) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 + _2034) / _2046, (_2038 - _2051) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2051) / _2046, (_2038 - _2053) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2053) / _2046, (_2051 + _2038) / _2046), _2056), 0.0)).x), vec4(0.25)));
        _2118 = 1.0 - (_2111 * cbSceneParam._m0[34u].x);
        _2119 = 1.0 - (_2111 * cbSceneParam._m0[34u].y);
        _2120 = 1.0 - (_2111 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2118 = 1.0;
        _2119 = 1.0;
        _2120 = 1.0;
    }
    float _2184;
    float _2186;
    float _2188;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2172 = fma(_1968, cbSceneParam._m0[63u].w, fma(_1964, cbSceneParam._m0[63u].z, fma(_1960, cbSceneParam._m0[63u].y, _1956 * cbSceneParam._m0[63u].x)));
        float _2173 = fma(_1968, cbSceneParam._m0[60u].w, fma(_1964, cbSceneParam._m0[60u].z, fma(_1960, cbSceneParam._m0[60u].y, _1956 * cbSceneParam._m0[60u].x))) / _2172;
        float _2174 = fma(_1968, cbSceneParam._m0[61u].w, fma(_1964, cbSceneParam._m0[61u].z, fma(_1960, cbSceneParam._m0[61u].y, _1956 * cbSceneParam._m0[61u].x))) / _2172;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2173 >= cbSceneParam._m0[64u].x) && (_2174 >= cbSceneParam._m0[64u].y)) && (_2173 <= cbSceneParam._m0[64u].z)) && (_2174 <= cbSceneParam._m0[64u].w))
        {
            float _2312 = fma(_1968, cbSceneParam._m0[62u].w, fma(_1964, cbSceneParam._m0[62u].z, fma(_1960, cbSceneParam._m0[62u].y, _1956 * cbSceneParam._m0[62u].x))) / _2172;
            float _2316 = isnan(cbSceneParam._m0[41u].w) ? _2312 : (isnan(_2312) ? cbSceneParam._m0[41u].w : max(_2312, cbSceneParam._m0[41u].w));
            float _2359 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
            float _4568 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
            float _2366 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2173, cbSceneParam._m0[33u].w + _2174), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2173, _2174 - cbSceneParam._m0[33u].z), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].z, _2174 - cbSceneParam._m0[33u].w), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2174), _2316), 0.0)).x), vec4(0.25)));
            float _2370 = 1.0 - (_2366 * cbSceneParam._m0[34u].x);
            float _2371 = 1.0 - (_2366 * cbSceneParam._m0[34u].y);
            float _2372 = 1.0 - (_2366 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2371) ? _2119 : (isnan(_2119) ? _2371 : min(_2119, _2371));
            frontier_phi_39_38_ladder_1 = isnan(_2370) ? _2118 : (isnan(_2118) ? _2370 : min(_2118, _2370));
            frontier_phi_39_38_ladder_2 = isnan(_2372) ? _2120 : (isnan(_2120) ? _2372 : min(_2120, _2372));
        }
        else
        {
            frontier_phi_39_38_ladder = _2119;
            frontier_phi_39_38_ladder_1 = _2118;
            frontier_phi_39_38_ladder_2 = _2120;
        }
        _2184 = frontier_phi_39_38_ladder_1;
        _2186 = frontier_phi_39_38_ladder;
        _2188 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2184 = _2118;
        _2186 = _2119;
        _2188 = _2120;
    }
    uvec4 _2193 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _2195 = _2193.x * 14u;
    uint _2196 = _2195 + 13u;
    float _2203 = _870 + (-1.0);
    float _2208 = (cbLight._m0[_2196].x * _2203) + 1.0;
    float _2209 = (cbLight._m0[_2196].y * _2203) + 1.0;
    float _2210 = (cbLight._m0[_2196].z * _2203) + 1.0;
    float _2211 = (cbLight._m0[_2196].w * _2203) + 1.0;
    uint _2212 = _2195 + 5u;
    float _2218 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2222 = _2195 + 4u;
    float _2231 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2235 = _2195 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_482, _483, _484));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_482, _483, _484));
    float _4604 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4615 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2212].x * _2218) * _2256) + (((cbLight._m0[_2222].x * _2184) * _2231) * _2254);
    float _2264 = ((_2218 * cbLight._m0[_2212].y) * _2256) + (((cbLight._m0[_2222].y * _2186) * _2231) * _2254);
    float _2265 = ((_2218 * cbLight._m0[_2212].z) * _2256) + (((cbLight._m0[_2222].z * _2188) * _2231) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2195 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2373;
    float _2375;
    float _2377;
    if (_2271)
    {
        _2373 = _2263;
        _2375 = _2264;
        _2377 = _2265;
    }
    else
    {
        uint _2381 = _2195 + 6u;
        float _2397 = (dot(vec3(cbLight._m0[_2195 + 2u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4626 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2400 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2373 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2263;
        _2375 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2264;
        _2377 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2265;
    }
    bool _2380 = _2269.y == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2380)
    {
        _2435 = _2373;
        _2437 = _2375;
        _2439 = _2377;
    }
    else
    {
        uint _2608 = _2195 + 7u;
        float _2624 = (dot(vec3(cbLight._m0[_2195 + 3u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _2625 = _2624 * _2624;
        float _4642 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2626 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2627 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2435 = (((cbLight._m0[_2608].x * 0.3183098733425140380859375) * _2626) * _2627) + _2373;
        _2437 = (((cbLight._m0[_2608].y * 0.3183098733425140380859375) * _2626) * _2627) + _2375;
        _2439 = (((cbLight._m0[_2608].z * 0.3183098733425140380859375) * _2626) * _2627) + _2377;
    }
    uint _2442 = _2195 + 8u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _737) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2195].x + _508;
    float _2458 = cbLight._m0[_2195].y + _509;
    float _2459 = cbLight._m0[_2195].z + _510;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2195].xyz));
    float _4658 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _4669 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2471 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2472 = dot(vec3(_482, _483, _484), vec3(_2464, _2465, _2466));
    float _4680 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2464, _2465, _2466));
    float _4691 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2456 * _2456;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
    float _2493 = 0.959999978542327880859375 - _853;
    float _2495 = 0.959999978542327880859375 - _854;
    float _2496 = 0.959999978542327880859375 - _855;
    float _2503 = 1.0 - _2456;
    float _2514 = (0.5 / (((_2471 * ((_2470 * _2503) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2503) + _2456) * _2470))) * _2470;
    float _4702 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    uint _2530 = _2195 + 9u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _737) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2235].x + _508;
    float _2544 = cbLight._m0[_2235].y + _509;
    float _2545 = cbLight._m0[_2235].z + _510;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2235].xyz));
    float _4713 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2557 = dot(vec3(_482, _483, _484), vec3(_2550, _2551, _2552));
    float _4724 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2550, _2551, _2552));
    float _4735 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2542 * _2542;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
    float _2583 = 1.0 - _2542;
    float _2593 = (0.5 / (((_2471 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2583) + _2542) * _2556))) * _2556;
    float _4746 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2595 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    float _2605 = (((((_2576 * _2493) + _856) * cbLight._m0[_2530].x) * _2595) * _2218) + ((((cbLight._m0[_2442].x * _2184) * ((_2492 * _2493) + _856)) * _2516) * _2231);
    float _2606 = (((((_2576 * _2495) + _857) * cbLight._m0[_2530].y) * _2595) * _2218) + ((((cbLight._m0[_2442].y * _2186) * ((_2492 * _2495) + _857)) * _2516) * _2231);
    float _2607 = (((((_2576 * _2496) + _858) * cbLight._m0[_2530].z) * _2595) * _2218) + ((((cbLight._m0[_2442].z * _2188) * ((_2492 * _2496) + _858)) * _2516) * _2231);
    float _2663;
    float _2665;
    float _2667;
    if (_2271)
    {
        _2663 = _2605;
        _2665 = _2606;
        _2667 = _2607;
    }
    else
    {
        uint _2669 = _2195 + 2u;
        uint _2673 = _2195 + 10u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _737) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _508;
        float _2690 = cbLight._m0[_2669].y + _509;
        float _2691 = cbLight._m0[_2669].z + _510;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2669].xyz));
        float _4757 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2703 = dot(vec3(_482, _483, _484), vec3(_2696, _2697, _2698));
        float _4768 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4779 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
        float _2729 = 1.0 - _2688;
        float _2739 = (0.5 / (((_2471 * ((_2702 * _2729) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2729) + _2688) * _2702))) * _2702;
        float _4790 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2663 = (((((_2722 * _2493) + _856) * cbLight._m0[_2673].x) * _2741) * _2742) + _2605;
        _2665 = (((((_2722 * _2495) + _857) * cbLight._m0[_2673].y) * _2741) * _2742) + _2606;
        _2667 = (((((_2722 * _2496) + _858) * cbLight._m0[_2673].z) * _2741) * _2742) + _2607;
    }
    float _2773;
    float _2775;
    float _2777;
    if (_2380)
    {
        _2773 = _2663;
        _2775 = _2665;
        _2777 = _2667;
    }
    else
    {
        uint _2784 = _2195 + 3u;
        uint _2788 = _2195 + 11u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _737) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _508;
        float _2805 = cbLight._m0[_2784].y + _509;
        float _2806 = cbLight._m0[_2784].z + _510;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2784].xyz));
        float _4806 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2818 = dot(vec3(_482, _483, _484), vec3(_2811, _2812, _2813));
        float _4817 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4828 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2844 = 1.0 - _2803;
        float _2854 = (0.5 / (((_2471 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2844) + _2803) * _2817))) * _2817;
        float _4839 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2773 = (((((_2837 * _2493) + _856) * cbLight._m0[_2788].x) * _2856) * _2857) + _2663;
        _2775 = (((((_2837 * _2495) + _857) * cbLight._m0[_2788].y) * _2856) * _2857) + _2665;
        _2777 = (((((_2837 * _2496) + _858) * cbLight._m0[_2788].z) * _2856) * _2857) + _2667;
    }
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_2193.y == 0u)
    {
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.x;
        uint _2890 = uint((float(_2878.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2879))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2879)));
        float _2900 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2901 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        uint _2904 = uint(isnan(14.0) ? _2901 : (isnan(_2901) ? 14.0 : min(_2901, 14.0)));
        uvec4 _2909 = texelFetch(g_lightClusterGridBuffer, int(((_2904 << 2u) + (_2890 << 6u)) >> 2u));
        uint _2910 = _2909.x;
        uint _2911 = _2878.z;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((((1u << ((_2911 >> 4u) & 15u)) + 4294967295u) & _2910) == 0u) || ((_2911 & 240u) == 0u))
        {
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
        }
        else
        {
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3202)
                {
                    frontier_phi_73_pred = _3191;
                    frontier_phi_73_pred_1 = _3190;
                    frontier_phi_73_pred_2 = _3189;
                    frontier_phi_73_pred_3 = _3188;
                    frontier_phi_73_pred_4 = _3187;
                    frontier_phi_73_pred_5 = _3186;
                }
                else
                {
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    uint _3337;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3191;
                    _3337 = _3201;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    for (;;)
                    {
                        uint _3341 = uint(findLSB(_3337)) + (_3192 << 5u);
                        uint _3338 = (_3337 + 4294967295u) & _3337;
                        uint _3343 = _3341 * 48u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3363 = (_3341 * 48u) + 4u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 3u)).x));
                        uint _3382 = (_3341 * 48u) + 8u;
                        vec3 _3393 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x));
                        float _3397 = _3357.x - _1969;
                        float _3398 = _3357.y - _1970;
                        float _3399 = _3357.z - _1971;
                        float _3400 = dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399));
                        float _3403 = inversesqrt(_3400);
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3407 = dot(vec3(_682, _685, _688), vec3(_3404, _3405, _3406));
                        float _3412 = 1.0 - (_3400 * _3357.w);
                        float _4865 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3414 = sqrt(_3400) * _3376.w;
                        float _3417 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3407) + _3418;
                        float _3424 = _3414 * _3414;
                        float _3427 = ((isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))) * _3413) / ((_3424 * 0.699999988079071044921875) + 1.0);
                        float _3431 = (-0.0) - _1969;
                        float _3432 = (-0.0) - _1970;
                        float _3433 = (-0.0) - _1971;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3447 = exp2(log2(1.0 / ((_3424 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _880;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3438 + _3404;
                        float _3459 = _3439 + _3405;
                        float _3460 = _3440 + _3406;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_682, _685, _688), vec3(_3438, _3439, _3440));
                        float _4881 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3472 = dot(vec3(_682, _685, _688), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4892 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3417 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3407) + _3481;
                        float _4903 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4914 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3479 * _3479) * ((_3424 * 2.1991131305694580078125) + 3.141590118408203125))) * _3413;
                        _3261 = (_3427 * _3376.x) + _3334;
                        _3262 = (_3427 * _3376.y) + _3335;
                        _3263 = (_3427 * _3376.z) + _3336;
                        _3258 = (_3507 * _3393.x) + _3331;
                        _3259 = (_3507 * _3393.y) + _3332;
                        _3260 = (_3507 * _3393.z) + _3333;
                        if (_3338 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3338;
                        }
                    }
                    frontier_phi_73_pred = _3263;
                    frontier_phi_73_pred_1 = _3262;
                    frontier_phi_73_pred_2 = _3261;
                    frontier_phi_73_pred_3 = _3260;
                    frontier_phi_73_pred_4 = _3259;
                    frontier_phi_73_pred_5 = _3258;
                }
                _3036 = frontier_phi_73_pred;
                _3034 = frontier_phi_73_pred_1;
                _3032 = frontier_phi_73_pred_2;
                _3030 = frontier_phi_73_pred_3;
                _3028 = frontier_phi_73_pred_4;
                _3026 = frontier_phi_73_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _3026;
                    _3187 = _3028;
                    _3188 = _3030;
                    _3189 = _3032;
                    _3190 = _3034;
                    _3191 = _3036;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
        }
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.z;
        uint _3042 = (_3040 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _3042) & _2910) == 0u)
        {
            _3154 = _3025;
            _3156 = _3027;
            _3158 = _3029;
            _3160 = _3031;
            _3162 = _3033;
            _3164 = _3035;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float _3180 = _3179 * _1969;
            float _3181 = _3179 * _1970;
            float _3182 = _3179 * _1971;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3042 < ((_3040 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3314 = _3025;
                float _3315 = _3027;
                float _3316 = _3029;
                float _3317 = _3031;
                float _3318 = _3033;
                float _3319 = _3035;
                uint _3320 = _3042;
                uint _3329;
                bool _3330;
                for (;;)
                {
                    _3329 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                    _3330 = _3329 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3330)
                    {
                        frontier_phi_84_pred = _3318;
                        frontier_phi_84_pred_1 = _3317;
                        frontier_phi_84_pred_2 = _3316;
                        frontier_phi_84_pred_3 = _3315;
                        frontier_phi_84_pred_4 = _3314;
                        frontier_phi_84_pred_5 = _3319;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3534 = _3314;
                        float _3535 = _3315;
                        float _3536 = _3316;
                        float _3537 = _3317;
                        float _3538 = _3318;
                        float _3539 = _3319;
                        uint _3540 = _3329;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3625;
                        float _3672;
                        bool _3673;
                        for (;;)
                        {
                            uint _3551 = ((_3320 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3612 = (_3551 * 40u) + 20u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3628 = (_3551 * 40u) + 24u;
                            vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3647 = (_3551 * 40u) + 28u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            _3672 = fma(_1971, _3660.z, fma(_1970, _3660.y, _3660.x * _1969)) + _3660.w;
                            _3673 = !((fma(_1971, _3641.z, fma(_1970, _3641.y, _3641.x * _1969)) + _3641.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3673)
                            {
                                float _3700 = _3566.x - _1969;
                                float _3701 = _3566.y - _1970;
                                float _3702 = _3566.z - _1971;
                                float _3703 = dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702));
                                float _3706 = inversesqrt(_3703);
                                float _3707 = _3706 * _3700;
                                float _3708 = _3706 * _3701;
                                float _3709 = _3706 * _3702;
                                float _3713 = 1.0 - (_3703 / (_3567 * _3567));
                                float _4925 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3718 = sqrt(_3703) * _3582.w;
                                float _3720 = 1.39999997615814208984375 / (_3718 + 1.39999997615814208984375);
                                float _3721 = _3720 * _3720;
                                float _3724 = ((1.0 - _3721) * dot(vec3(_3707, _3708, _3709), vec3(_682, _685, _688))) + _3721;
                                float _3727 = _3718 * _3718;
                                float _3731 = (fma(_1971, _3609.z, fma(_1970, _3609.y, _3609.x * _1969)) + _3609.w) / _3672;
                                float _3732 = (fma(_1971, _3625.z, fma(_1970, _3625.y, _3625.x * _1969)) + _3625.w) / _3672;
                                float _3736 = 1.0 - dot(vec2(_3731, _3732), vec2(_3731, _3732));
                                float _4941 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3738 = _3737 * (((isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0))) * _3714) / ((_3727 * 0.699999988079071044921875) + 1.0));
                                float _3750 = exp2(log2(1.0 / ((_3727 * 3.5) + 5.0)) * 0.25);
                                float _3751 = 1.0 - _880;
                                float _3758 = sqrt(1.0 - ((1.0 - (_3751 * _3751)) * (1.0 - (_3750 * _3750))));
                                float _3759 = _3758 * _3758;
                                float _3760 = _3759 * _3759;
                                float _3761 = _3707 - _3180;
                                float _3762 = _3708 - _3181;
                                float _3763 = _3709 - _3182;
                                float _3767 = inversesqrt(dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763)));
                                float _3771 = dot(vec3(_682, _685, _688), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _4952 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3774 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3775 = dot(vec3(_682, _685, _688), vec3(_3767 * _3761, _3767 * _3762, _3767 * _3763));
                                float _4963 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3778 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3782 = ((_3778 * _3778) * (_3760 + (-1.0))) + 1.0;
                                float _3783 = _3720 * _3759;
                                float _3784 = _3783 * _3783;
                                float _3790 = ((1.0 - _3784) * dot(vec3(_682, _685, _688), vec3(_3707, _3708, _3709))) + _3784;
                                float _4974 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3792 = 1.0 - _3759;
                                float _3802 = (0.5 / (((_3791 * ((_3774 * _3792) + _3759)) + 9.9999999392252902907785028219223e-09) + (((_3791 * _3792) + _3759) * _3774))) * _3791;
                                float _4985 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3812 = (_3737 * _3714) * (((_3760 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3782 * _3782) * ((_3727 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3738 * _3582.y;
                                frontier_phi_90_pred_1 = _3738 * _3582.x;
                                frontier_phi_90_pred_2 = _3812 * _3594.z;
                                frontier_phi_90_pred_3 = _3812 * _3594.y;
                                frontier_phi_90_pred_4 = _3812 * _3594.x;
                                frontier_phi_90_pred_5 = _3738 * _3582.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3820 = frontier_phi_90_pred;
                            _3819 = frontier_phi_90_pred_1;
                            _3818 = frontier_phi_90_pred_2;
                            _3817 = frontier_phi_90_pred_3;
                            _3816 = frontier_phi_90_pred_4;
                            _3821 = frontier_phi_90_pred_5;
                            _3524 = _3819 + _3537;
                            _3525 = _3820 + _3538;
                            _3526 = _3821 + _3539;
                            _3521 = _3816 + _3534;
                            _3522 = _3817 + _3535;
                            _3523 = _3818 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3525;
                        frontier_phi_84_pred_1 = _3524;
                        frontier_phi_84_pred_2 = _3523;
                        frontier_phi_84_pred_3 = _3522;
                        frontier_phi_84_pred_4 = _3521;
                        frontier_phi_84_pred_5 = _3526;
                    }
                    _3163 = frontier_phi_84_pred;
                    _3161 = frontier_phi_84_pred_1;
                    _3159 = frontier_phi_84_pred_2;
                    _3157 = frontier_phi_84_pred_3;
                    _3155 = frontier_phi_84_pred_4;
                    _3165 = frontier_phi_84_pred_5;
                    uint _3321 = _3320 + 1u;
                    if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3314 = _3155;
                        _3315 = _3157;
                        _3316 = _3159;
                        _3317 = _3161;
                        _3318 = _3163;
                        _3319 = _3165;
                        _3320 = _3321;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3165;
                frontier_phi_65_66_ladder_1 = _3161;
                frontier_phi_65_66_ladder_2 = _3163;
                frontier_phi_65_66_ladder_3 = _3157;
                frontier_phi_65_66_ladder_4 = _3155;
                frontier_phi_65_66_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_65_66_ladder = _3035;
                frontier_phi_65_66_ladder_1 = _3031;
                frontier_phi_65_66_ladder_2 = _3033;
                frontier_phi_65_66_ladder_3 = _3027;
                frontier_phi_65_66_ladder_4 = _3025;
                frontier_phi_65_66_ladder_5 = _3029;
            }
            _3154 = frontier_phi_65_66_ladder_4;
            _3156 = frontier_phi_65_66_ladder_3;
            _3158 = frontier_phi_65_66_ladder_5;
            _3160 = frontier_phi_65_66_ladder_1;
            _3162 = frontier_phi_65_66_ladder_2;
            _3164 = frontier_phi_65_66_ladder;
        }
        float _3169 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2922 = (_3169 * _3160) + _2435;
        _2924 = (_3169 * _3162) + _2437;
        _2926 = (_3169 * _3164) + _2439;
        _2928 = ((_3154 * _856) * _3169) + _2773;
        _2930 = ((_3156 * _857) * _3169) + _2775;
        _2932 = ((_3158 * _858) * _3169) + _2777;
    }
    else
    {
        _2922 = _2435;
        _2924 = _2437;
        _2926 = _2439;
        _2928 = _2773;
        _2930 = _2775;
        _2932 = _2777;
    }
    uint _2938 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _2944 = cbInstanceData._m0[_2938].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _524) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _432) * _445.x) * _553)) + (((_582 - (_582 * _490)) + (cbMatDynParam._m0[11u].x * _613)) * cbMatDynParam._m0[9u].x));
    float _2945 = cbInstanceData._m0[_2938].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _524) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _432) * _445.y) * _553)) + (((_584 - (_584 * _490)) + (cbMatDynParam._m0[11u].y * _613)) * cbMatDynParam._m0[9u].y));
    float _2946 = cbInstanceData._m0[_2938].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _524) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _432) * _445.z) * _553)) + (((_586 - (_586 * _490)) + (cbMatDynParam._m0[11u].z * _613)) * cbMatDynParam._m0[9u].z));
    float _5001 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _5012 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _5023 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _5034 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2964 = (((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2922 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _870))) + ((_2928 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + _2944;
    float _2966 = (_2945 + ((_2930 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2924 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _870)));
    float _2968 = (_2946 + ((_2932 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2926 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _870)));
    float _2969 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
    float _2970 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
    float _2971 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
    float _2977 = cbMtdParam._m0[2u].x * _2944;
    float _2978 = cbMtdParam._m0[2u].y * _2945;
    float _2979 = cbMtdParam._m0[2u].z * _2946;
    float _2986 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _553) + cbMatDynParam._m0[12u].y;
    float _2991 = cbInstanceData._m0[_761 + 6u].w * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)));
    float _2996 = _658 / cbSceneParam._m0[86u].x;
    float _2997 = _659 / cbSceneParam._m0[86u].y;
    vec4 _3011 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3013 = _3011.x;
    float _3014 = _3011.y;
    float _3015 = _3011.z;
    float _3016 = _3011.w;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _3050 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _3051 = _3050 / _639;
        float _3062 = _3051 * _293;
        float _3063 = _294 * _3051;
        float _3064 = (-0.0) - _3063;
        float _3065 = _3051 * _295;
        float _3067 = (cbSceneParam._m0[77u].w * _3064) / _3050;
        float _3068 = _3067 + cbSceneParam._m0[79u].w;
        float _3069 = cbSceneParam._m0[79u].w - _3063;
        float _3075 = sqrt(((_3062 * _3062) + (_3063 * _3063)) + (_3065 * _3065));
        float _3078 = (1.0 - (cbSceneParam._m0[77u].w / _3050)) * _3075;
        float _3083 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3085 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3271;
        if (abs((_3064 - _3067) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3271 = ((((_3068 > 0.0) ? exp2(_3083 * _3068) : (2.0 - exp2(_3085 * _3068))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3078;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : max(_3068, _3069));
            float _3217 = isnan(_3069) ? _3068 : (isnan(_3068) ? _3069 : min(_3068, _3069));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3271 = ((abs(_3075 / _3064) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3083 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3083 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3085 * _3226) - exp2(_3085 * _3227)) * _3215))) + (_3078 * cbSceneParam._m0[80u].z);
        }
        vec4 _3273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, 1.0), 0.0);
        float _3282 = exp2((_3271 * (-1.44269502162933349609375)) * (1.0 - _3273.w));
        float _3283 = log2(_3282);
        float _3299 = log2(_3016);
        _3087 = (exp2(_3299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].x)) * _3273.x) / cbSceneParam._m0[78u].x)) + _3013;
        _3089 = (exp2(_3299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].y)) * _3273.y) / cbSceneParam._m0[78u].y)) + _3014;
        _3091 = (exp2(_3299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].z)) * _3273.z) / cbSceneParam._m0[78u].z)) + _3015;
        _3093 = _3282 * _3016;
    }
    else
    {
        _3087 = _3013;
        _3089 = _3014;
        _3091 = _3015;
        _3093 = _3016;
    }
    bool _3309;
    vec4 _3103;
    vec4 _3125;
    float _3127;
    float _3131;
    float _3132;
    float _3133;
    float _3136;
    float _3139;
    float _3142;
    float _3143;
    bool _3153;
    for (;;)
    {
        _3103 = cbMatDynParam._m0[0u];
        float _3105 = roundEven(_3103.y);
        bool _3106 = _3105 == 3.0;
        float _3107 = log2(_3093);
        float _3111 = exp2(_3107 * cbSceneParam._m0[78u].x);
        float _3112 = exp2(_3107 * cbSceneParam._m0[78u].y);
        float _3113 = exp2(_3107 * cbSceneParam._m0[78u].z);
        float _3114 = _3111 * _2969;
        float _3115 = _3112 * _2970;
        float _3116 = _3113 * _2971;
        float _3123 = _646 + (-0.5);
        _3125 = cbMtdParam._m0[1u];
        _3127 = _3125.y * _3123;
        float _3130 = (_3105 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3131 = _3130 * (_3106 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3087)));
        _3132 = _3130 * (_3106 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3089)));
        _3133 = _3130 * (_3106 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3091)));
        _3136 = ((_2977 * _2986) * _3111) * _3130;
        _3139 = ((_2978 * _2986) * _3112) * _3130;
        _3142 = ((_2979 * _2986) * _3113) * _3130;
        _3143 = _3123 * 0.999000012874603271484375;
        _3153 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3153)
        {
            if ((cbInstanceData._m0[_761 + 7u].x + _3143) < 0.5)
            {
                _3309 = true;
                break;
            }
        }
        uint _3250 = _763 + uint(_3103.w);
        if ((cbInstanceData._m0[_3250].w < 1.0) && ((cbInstanceData._m0[_3250].w + _3143) < 0.5))
        {
            _3309 = true;
            break;
        }
        if ((_3127 + _363) < _3125.x)
        {
            _3309 = true;
            break;
        }
        _3309 = false;
        break;
    }
    float _3512;
    if (_3309)
    {
        discard_state = true;
        _3512 = 0.0;
    }
    else
    {
        _3512 = _2991;
    }
    SV_Target.x = _3131;
    SV_Target.y = _3132;
    SV_Target.z = _3133;
    SV_Target.w = _3512;
    SV_Target_1.x = _3136;
    SV_Target_1.y = _3139;
    SV_Target_1.z = _3142;
    SV_Target_1.w = _2991;
    discard_exit();
}


