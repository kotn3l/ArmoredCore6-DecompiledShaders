#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1504;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    vec4 _312 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _317 = _312.z;
    float _318 = _312.w;
    float _324 = exp2(log2(_317 * 22.0) * 260.0);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _350 = cbMtdParam._m0[10u].x * _340.x;
    float _351 = cbMtdParam._m0[10u].y * _340.y;
    float _352 = cbMtdParam._m0[10u].z * _340.z;
    vec4 _364 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _379 = exp2(log2(1.0 - _318) * 8.0);
    vec4 _391 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _407 = exp2(log2(_318) * 8.0);
    vec4 _419 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _443 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _465 = (((((_364.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _443.x) - _350) * _326) + _350;
    float _466 = (((((_364.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _443.y) - _351) * _326) + _351;
    float _467 = (((((_364.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _443.z) - _352) * _326) + _352;
    float _474 = (((cbMtdParam._m0[13u].x * _391.x) - _465) * _379) + _465;
    float _475 = (((cbMtdParam._m0[13u].y * _391.y) - _466) * _379) + _466;
    float _476 = (((cbMtdParam._m0[13u].z * _391.z) - _467) * _379) + _467;
    float _483 = (((cbMtdParam._m0[11u].x * _419.x) - _474) * _407) + _474;
    float _484 = (((cbMtdParam._m0[11u].y * _419.y) - _475) * _407) + _475;
    float _485 = (((cbMtdParam._m0[11u].z * _419.z) - _476) * _407) + _476;
    float _486 = _443.w * _364.w;
    float _517 = (((texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - cbMtdParam._m0[17u].x) + cbMtdParam._m0[16u].x) * _326) + cbMtdParam._m0[17u].x;
    float _520 = ((cbMtdParam._m0[15u].z - _517) * _379) + _517;
    float _523 = ((cbMtdParam._m0[16u].w - _520) * _407) + _520;
    vec4 _535 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _544 = cbMtdParam._m0[14u].y + _535.z;
    vec4 _556 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _575 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _593 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _604 = ((((_317 * 2.0) * (cbMtdParam._m0[14u].x + _556.z)) - _544) * _326) + _544;
    float _608 = (((_575.z - _604) + cbMtdParam._m0[15u].y) * _379) + _604;
    float _612 = (((_593.z - _608) + cbMtdParam._m0[14u].w) * _407) + _608;
    float _626 = abs((fract(cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3885 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _632 = (_627 * _627) * (3.0 - (_627 * 2.0));
    vec4 _645 = texture(sampler2D(C_DetailBlend_Emissive_Glow_SSS_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _653 = (_312.x * 2.0) + (-1.0);
    float _654 = (_312.y * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3896 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))));
    float _665 = ((_556.x - _537) * _326) + _537;
    float _666 = ((_556.y - _538) * _326) + _538;
    float _671 = ((_575.x - _665) * _379) + _665;
    float _672 = ((_575.y - _666) * _379) + _666;
    float _685 = (cbMtdParam._m0[14u].z * (((((_593.x - _671) * _407) + _671) * 2.0) + (-1.0))) + _653;
    float _686 = (cbMtdParam._m0[14u].z * (((((_593.y - _672) * _407) + _672) * 2.0) + (-1.0))) + _654;
    float _689 = fma(_660, _241, fma(_686, _233 * TANGENT.x, (_219 * _211) * _685));
    float _692 = fma(_660, _242, fma(_686, _233 * TANGENT.y, (_219 * _212) * _685));
    float _695 = fma(_660, _243, fma(_686, _233 * TANGENT.z, (_219 * _213) * _685));
    float _699 = inversesqrt(dot(vec3(_689, _692, _695), vec3(_689, _692, _695)));
    float _700 = _699 * _689;
    float _701 = _699 * _692;
    float _702 = _699 * _695;
    float _3907 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _703 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _704 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _705 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _706 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _707 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _708 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _716 = cbMatDynParam._m0[9u].x * _705;
    float _717 = cbMatDynParam._m0[9u].y * _706;
    float _718 = cbMatDynParam._m0[9u].z * _707;
    float _725 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _726 = _725 * _297;
    float _727 = _725 * _298;
    float _728 = _725 * _299;
    float _735 = abs(exp2(log2(dot(vec3(_700, _701, _702), vec3(_726, _727, _728))) * cbMatDynParam._m0[12u].x));
    float _736 = isnan(0.100000001490116119384765625) ? _735 : (isnan(_735) ? 0.100000001490116119384765625 : max(_735, 0.100000001490116119384765625));
    float _742 = ((isnan(0.699999988079071044921875) ? _736 : (isnan(_736) ? 0.699999988079071044921875 : min(_736, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _764 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3983 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3994 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _771 = (((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) - _768) * _742) + _768;
    float _790 = dot(vec3(_700, _701, _702), vec3(0.0, -1.0, 0.0));
    float _4005 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _800 = (_793 * _705) * cbMatDynParam._m0[11u].x;
    float _802 = (_793 * _706) * cbMatDynParam._m0[11u].y;
    float _804 = (_793 * _707) * cbMatDynParam._m0[11u].z;
    float _814 = dot(vec3(_726, _727, _728), vec3(_700, _701, _702)) * 2.0;
    float _824 = dot(vec3((-0.0) - (_726 - (_814 * _700)), (-0.0) - (_727 - (_814 * _701)), (-0.0) - (_728 - (_814 * _702))), vec3(0.0, -1.0, 0.0));
    float _4016 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _831 = exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 4.0);
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _924 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _926 = _924.w;
    float _944 = fma(_702, cbSceneParam._m0[5u].z, fma(_701, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _700));
    float _947 = fma(_702, cbSceneParam._m0[6u].z, fma(_701, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _700));
    float _950 = fma(_702, cbSceneParam._m0[7u].z, fma(_701, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _700));
    vec4 _952 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _954 = _952.x;
    float _966 = (((_952.y - _704) + (_952.w * _704)) * cbMtdParam._m0[3u].x) + _704;
    vec4 _967 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _983 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_954 * _954)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _967.z;
    float _991 = (((cbMatDynParam._m0[15u].x - _708) * cbMatDynParam._m0[15u].w) * _983) + _708;
    float _999 = ((_983 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _966)) + _966;
    uint _1023 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1024 = _1023 + 9u;
    uint _1025 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _1031 = (cbMtdParam._m0[0u].x * _716) * cbInstanceData._m0[_1025].x;
    float _1032 = (cbMtdParam._m0[0u].y * _717) * cbInstanceData._m0[_1025].y;
    float _1033 = (cbMtdParam._m0[0u].z * _718) * cbInstanceData._m0[_1025].z;
    float _4027 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    vec4 _1037 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1042 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1053 = (((_1042.x - _991) + (_1042.w * _991)) * cbMtdParam._m0[3u].x) + _991;
    float _1066 = (cbMtdParam._m0[3u].x * (((_1034 * _926) - _1034) + _1037.x)) + _1034;
    float _1067 = (cbMtdParam._m0[3u].x * (((_1035 * _926) - _1035) + _1037.y)) + _1035;
    float _1068 = (cbMtdParam._m0[3u].x * (((_1036 * _926) - _1036) + _1037.z)) + _1036;
    float _1082 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_991 * (_716 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_991 * (_717 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_991 * (_718 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _1086 = _1082 * cbMatDynParam._m0[13u].w;
    float _1096 = (_1086 * (cbMatDynParam._m0[13u].x - _1066)) + _1066;
    float _1097 = (_1086 * (cbMatDynParam._m0[13u].y - _1067)) + _1067;
    float _1098 = (_1086 * (cbMatDynParam._m0[13u].z - _1068)) + _1068;
    float _1106 = ((_1082 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _1053)) + _1053;
    float _1107 = 1.0 - _1106;
    float _1108 = _1107 * _1096;
    float _1109 = _1107 * _1097;
    float _1110 = _1107 * _1098;
    float _1114 = (_1096 + (-0.039999999105930328369140625)) * _1106;
    float _1115 = (_1097 + (-0.039999999105930328369140625)) * _1106;
    float _1116 = (_1098 + (-0.039999999105930328369140625)) * _1106;
    float _1117 = _1114 + 0.039999999105930328369140625;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1119 = _1116 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _1131 = _1128.x * TEXCOORD_4;
    float _1132 = dot(vec3(_700, _701, _702), vec3(_913, _914, _915));
    float _1135 = _1132 * 2.0;
    float _1139 = (_1135 * _700) - _913;
    float _1140 = (_1135 * _701) - _914;
    float _1141 = (_1135 * _702) - _915;
    float _1145 = abs(dot(vec3(_913, _914, _915), vec3(_700, _701, _702)));
    float _4060 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1147 = sqrt(_999);
    float _1158 = exp2((_1147 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1147 * 3.0));
    float _1164 = (1.0 - _1158) * ((_1147 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1165 = _1158 * _1147;
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1503;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1228 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1232 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1236 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1261 = _1193 + _700;
        float _1262 = _1197 + _701;
        float _1263 = _1201 + _702;
        float _1273 = fma(_1263, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261)) - _1228;
        float _1274 = fma(_1263, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261)) - _1232;
        float _1275 = fma(_1263, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261)) - _1236;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1228 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1232 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[34u].z) + ((((((_1236 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1331 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1297.x + (-0.5));
        float _1333 = _1331 * (_1297.y + (-0.5));
        float _1334 = _1331 * (_1297.z + (-0.5));
        float _1341 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1304.x + (-0.5));
        float _1343 = _1341 * (_1304.y + (-0.5));
        float _1344 = _1341 * (_1304.z + (-0.5));
        float _1351 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1311.x + (-0.5));
        float _1353 = _1351 * (_1311.y + (-0.5));
        float _1354 = _1351 * (_1311.z + (-0.5));
        float _1361 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1318.x + (-0.5));
        float _1363 = _1361 * (_1318.y + (-0.5));
        float _1364 = _1361 * (_1318.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1385 = (dot(vec3(_700, _701, _702), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1395 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4108 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1397 + 1.0))) + _1402) * _1365;
        float _1412 = _1333 * 0.5;
        float _1413 = _1343 * 0.5;
        float _1414 = _1353 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_700, _701, _702), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4141 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1439 + 1.0))) + _1444) * _1366;
        float _1454 = _1334 * 0.5;
        float _1455 = _1344 * 0.5;
        float _1456 = _1354 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_700, _701, _702), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4174 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1481 + 1.0))) + _1486) * _1367;
        _1503 = _1334;
        _1505 = _1333;
        _1506 = _1332;
        _1507 = _1344;
        _1508 = _1343;
        _1509 = _1342;
        _1510 = _1354;
        _1511 = _1353;
        _1512 = _1352;
        _1513 = _1367;
        _1514 = _1366;
        _1515 = _1365;
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1504;
        _1505 = _1504;
        _1506 = _1504;
        _1507 = _1504;
        _1508 = _1504;
        _1509 = _1504;
        _1510 = _1504;
        _1511 = _1504;
        _1512 = _1504;
        _1513 = _1504;
        _1514 = _1504;
        _1515 = _1504;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1548 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1552 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1575 = _1193 + _700;
        float _1576 = _1197 + _701;
        float _1577 = _1201 + _702;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_700, _701, _702), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4237 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_700, _701, _702), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4270 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_700, _701, _702), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4303 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1504;
        _1814 = _1504;
        _1815 = _1504;
        _1816 = _1504;
        _1817 = _1504;
        _1818 = _1504;
        _1819 = _1504;
        _1820 = _1504;
        _1821 = _1504;
        _1822 = _1504;
        _1823 = _1504;
        _1824 = _1504;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1516)) + _1516;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1517)) + _1517;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1518)) + _1518;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1139 * 0.5;
    float _1882 = _1140 * 0.5;
    float _1883 = _1141 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1921;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1503, _1507, _1510, _1513));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1932;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1923 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1936 = (_1932 * cbModelParam._m0[1u].x) + (_1921 * (1.0 - cbModelParam._m0[1u].x));
    float _1946 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _999);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1946 : min(cbModelParam._m0[25u].z, _1946));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1994 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _1998 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2002 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2005 = fma(_1141, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139));
        float _2008 = fma(_1141, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139));
        float _2011 = fma(_1141, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139));
        float _2039;
        if (_2005 > 0.0)
        {
            _2039 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2039 = frontier_phi_16_14_ladder;
        }
        float _2243;
        if (_2008 > 0.0)
        {
            _2243 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2243 = frontier_phi_25_21_ladder;
        }
        float _2497;
        if (_2011 > 0.0)
        {
            _2497 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2497 = frontier_phi_37_32_ladder;
        }
        float _2499 = isnan(_2243) ? _2039 : (isnan(_2039) ? _2243 : min(_2039, _2243));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _2005) + _1994;
        float _2505 = (_2500 * _2008) + _1998;
        float _2506 = (_2500 * _2011) + _2002;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2507;
        float _2511 = _2507 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 > _2511) || ((_2505 < _2509) || ((_2504 < _2509) || (_2504 > _2511))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1947);
            frontier_phi_15_37_ladder = _2634.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2634.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2634.x * cbModelParam._m0[1u].y;
        }
        _2027 = frontier_phi_15_37_ladder_2;
        _2029 = frontier_phi_15_37_ladder_1;
        _2031 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1139, _1140, _1141), _1947);
        _2027 = _2015.x * cbModelParam._m0[1u].y;
        _2029 = _2015.y * cbModelParam._m0[1u].y;
        _2031 = _2015.z * cbModelParam._m0[1u].y;
    }
    float _2035 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _999);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2035 : min(cbModelParam._m0[25u].w, _2035));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2091 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2095 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2099 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2102 = fma(_1141, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139));
        float _2105 = fma(_1141, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139));
        float _2108 = fma(_1141, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139));
        float _2248;
        if (_2102 > 0.0)
        {
            _2248 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2248 = frontier_phi_27_23_ladder;
        }
        float _2524;
        if (_2105 > 0.0)
        {
            _2524 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2524 = frontier_phi_39_34_ladder;
        }
        float _2737;
        if (_2108 > 0.0)
        {
            _2737 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2737 = frontier_phi_48_45_ladder;
        }
        float _2739 = isnan(_2524) ? _2248 : (isnan(_2248) ? _2524 : min(_2248, _2524));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2102) + _2091;
        float _2745 = (_2740 * _2105) + _2095;
        float _2746 = (_2740 * _2108) + _2099;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _2036);
            frontier_phi_24_48_ladder = _2980.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2980.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2980.x * cbModelParam._m0[1u].z;
        }
        _2127 = frontier_phi_24_48_ladder_2;
        _2129 = frontier_phi_24_48_ladder_1;
        _2131 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1139, _1140, _1141), _2036);
        _2127 = _2111.x * cbModelParam._m0[1u].z;
        _2129 = _2111.y * cbModelParam._m0[1u].z;
        _2131 = _2111.z * cbModelParam._m0[1u].z;
    }
    float _2144 = (((_1164 * _1117) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2127 - _2027)) + _2027);
    float _2146 = (((_1164 * _1118) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2129 - _2029)) + _2029);
    float _2148 = (((_1164 * _1119) + _1165) * _1131) * ((cbModelParam._m0[1u].w * (_2131 - _2031)) + _2031);
    float _2151 = fma(_2148, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2144 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2148, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2144 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2148, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2144 * cbSceneParam._m0[91u].x));
    uvec4 _2167 = floatBitsToUint(cbInstanceData._m0[_1023 + 5u]);
    uint _2169 = _2167.x * 14u;
    uint _2170 = _2169 + 13u;
    float _2177 = _1131 + (-1.0);
    float _2182 = (cbLight._m0[_2170].x * _2177) + 1.0;
    float _2183 = (cbLight._m0[_2170].y * _2177) + 1.0;
    float _2184 = (cbLight._m0[_2170].z * _2177) + 1.0;
    float _2185 = (cbLight._m0[_2170].w * _2177) + 1.0;
    uint _2186 = _2169 + 5u;
    float _2192 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2196 = _2169 + 4u;
    float _2202 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2206 = _2169 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_700, _701, _702));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_700, _701, _702));
    float _4439 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4450 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2186].x * _2192) * _2227) + ((cbLight._m0[_2196].x * _2202) * _2225);
    float _2235 = ((_2192 * cbLight._m0[_2186].y) * _2227) + ((_2202 * cbLight._m0[_2196].y) * _2225);
    float _2236 = ((_2192 * cbLight._m0[_2186].z) * _2227) + ((_2202 * cbLight._m0[_2196].z) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2169 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2242)
    {
        _2253 = _2234;
        _2255 = _2235;
        _2257 = _2236;
    }
    else
    {
        uint _2261 = _2169 + 6u;
        float _2277 = (dot(vec3(cbLight._m0[_2169 + 2u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4461 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2280 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2253 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2234;
        _2255 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2235;
        _2257 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2236;
    }
    bool _2260 = _2240.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2260)
    {
        _2298 = _2253;
        _2300 = _2255;
        _2302 = _2257;
    }
    else
    {
        uint _2468 = _2169 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2169 + 3u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4477 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2487 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2298 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2253;
        _2300 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2255;
        _2302 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2257;
    }
    uint _2305 = _2169 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _999) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2169].x + _913;
    float _2321 = cbLight._m0[_2169].y + _914;
    float _2322 = cbLight._m0[_2169].z + _915;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2169].xyz));
    float _4493 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _2334 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2335 = dot(vec3(_700, _701, _702), vec3(_2327, _2328, _2329));
    float _4515 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2327, _2328, _2329));
    float _4526 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2356 = 0.959999978542327880859375 - _1114;
    float _2358 = 0.959999978542327880859375 - _1115;
    float _2359 = 0.959999978542327880859375 - _1116;
    float _2366 = 1.0 - _2319;
    float _2377 = (0.5 / (((_2334 * ((_2333 * _2366) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2366) + _2319) * _2333))) * _2333;
    float _4537 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2390 = _2169 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _999) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2206].x + _913;
    float _2404 = cbLight._m0[_2206].y + _914;
    float _2405 = cbLight._m0[_2206].z + _915;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2206].xyz));
    float _4548 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2417 = dot(vec3(_700, _701, _702), vec3(_2410, _2411, _2412));
    float _4559 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2410, _2411, _2412));
    float _4570 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2443 = 1.0 - _2402;
    float _2453 = (0.5 / (((_2334 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2443) + _2402) * _2416))) * _2416;
    float _4581 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2465 = (((((_2436 * _2356) + _1117) * cbLight._m0[_2390].x) * _2455) * _2192) + (((((_2355 * _2356) + _1117) * cbLight._m0[_2305].x) * _2379) * _2202);
    float _2466 = (((((_2436 * _2358) + _1118) * cbLight._m0[_2390].y) * _2455) * _2192) + (((((_2355 * _2358) + _1118) * cbLight._m0[_2305].y) * _2379) * _2202);
    float _2467 = (((((_2436 * _2359) + _1119) * cbLight._m0[_2390].z) * _2455) * _2192) + (((((_2355 * _2359) + _1119) * cbLight._m0[_2305].z) * _2379) * _2202);
    float _2529;
    float _2531;
    float _2533;
    if (_2242)
    {
        _2529 = _2465;
        _2531 = _2466;
        _2533 = _2467;
    }
    else
    {
        uint _2535 = _2169 + 2u;
        uint _2539 = _2169 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _999) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _913;
        float _2556 = cbLight._m0[_2535].y + _914;
        float _2557 = cbLight._m0[_2535].z + _915;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2535].xyz));
        float _4592 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2569 = dot(vec3(_700, _701, _702), vec3(_2562, _2563, _2564));
        float _4603 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4614 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2334 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2595) + _2554) * _2568))) * _2568;
        float _4625 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2529 = (((((_2588 * _2356) + _1117) * cbLight._m0[_2539].x) * _2607) * _2608) + _2465;
        _2531 = (((((_2588 * _2358) + _1118) * cbLight._m0[_2539].y) * _2607) * _2608) + _2466;
        _2533 = (((((_2588 * _2359) + _1119) * cbLight._m0[_2539].z) * _2607) * _2608) + _2467;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2260)
    {
        _2643 = _2529;
        _2645 = _2531;
        _2647 = _2533;
    }
    else
    {
        uint _2654 = _2169 + 3u;
        uint _2658 = _2169 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _999) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _913;
        float _2675 = cbLight._m0[_2654].y + _914;
        float _2676 = cbLight._m0[_2654].z + _915;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2654].xyz));
        float _4641 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2688 = dot(vec3(_700, _701, _702), vec3(_2681, _2682, _2683));
        float _4652 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4663 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2334 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2714) + _2673) * _2687))) * _2687;
        float _4674 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2643 = (((((_2707 * _2356) + _1117) * cbLight._m0[_2658].x) * _2726) * _2727) + _2529;
        _2645 = (((((_2707 * _2358) + _1118) * cbLight._m0[_2658].y) * _2726) * _2727) + _2531;
        _2647 = (((((_2707 * _2359) + _1119) * cbLight._m0[_2658].z) * _2726) * _2727) + _2533;
    }
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_2167.y == 0u)
    {
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2802;
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2802;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2802;
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _2818)));
        float _2839 = (log2(_2805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3154)
                {
                    frontier_phi_63_pred = _3143;
                    frontier_phi_63_pred_1 = _3142;
                    frontier_phi_63_pred_2 = _3141;
                    frontier_phi_63_pred_3 = _3140;
                    frontier_phi_63_pred_4 = _3139;
                    frontier_phi_63_pred_5 = _3138;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3153;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3144 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _2803;
                        float _3329 = _3288.y - _2804;
                        float _3330 = _3288.z - _2805;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_944, _947, _950), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4700 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3358 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _2803;
                        float _3363 = (-0.0) - _2804;
                        float _3364 = (-0.0) - _2805;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3379 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3380 = 1.0 - _1147;
                        float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                        float _3388 = _3387 * _3387;
                        float _3389 = _3388 * _3388;
                        float _3390 = _3369 + _3335;
                        float _3391 = _3370 + _3336;
                        float _3392 = _3371 + _3337;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3400 = dot(vec3(_944, _947, _950), vec3(_3369, _3370, _3371));
                        float _4716 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3404 = dot(vec3(_944, _947, _950), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                        float _4727 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                        float _3412 = _3348 * _3388;
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3338) + _3413;
                        float _4738 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3418 = 1.0 - _3388;
                        float _3428 = (0.5 / (((_3417 * ((_3403 * _3418) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3388) * _3403))) * _3417;
                        float _4749 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3439 = (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3411 * _3411) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3197 = (_3358 * _3307.x) + _3265;
                        _3198 = (_3358 * _3307.y) + _3266;
                        _3199 = (_3358 * _3307.z) + _3267;
                        _3194 = (_3439 * _3324.x) + _3262;
                        _3195 = (_3439 * _3324.y) + _3263;
                        _3196 = (_3439 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_63_pred = _3199;
                    frontier_phi_63_pred_1 = _3198;
                    frontier_phi_63_pred_2 = _3197;
                    frontier_phi_63_pred_3 = _3196;
                    frontier_phi_63_pred_4 = _3195;
                    frontier_phi_63_pred_5 = _3194;
                }
                _2996 = frontier_phi_63_pred;
                _2994 = frontier_phi_63_pred_1;
                _2992 = frontier_phi_63_pred_2;
                _2990 = frontier_phi_63_pred_3;
                _2988 = frontier_phi_63_pred_4;
                _2986 = frontier_phi_63_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2986;
                    _3139 = _2988;
                    _3140 = _2990;
                    _3141 = _2992;
                    _3142 = _2994;
                    _3143 = _2996;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3002) & _2849) == 0u)
        {
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
            float _3132 = _3131 * _2803;
            float _3133 = _3131 * _2804;
            float _3134 = _3131 * _2805;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3245 = _2985;
                float _3246 = _2987;
                float _3247 = _2989;
                float _3248 = _2991;
                float _3249 = _2993;
                float _3250 = _2995;
                uint _3251 = _3002;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3261)
                    {
                        frontier_phi_69_pred = _3250;
                        frontier_phi_69_pred_1 = _3249;
                        frontier_phi_69_pred_2 = _3248;
                        frontier_phi_69_pred_3 = _3247;
                        frontier_phi_69_pred_4 = _3246;
                        frontier_phi_69_pred_5 = _3245;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        uint _3463 = _3260;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3548;
                        float _3595;
                        bool _3596;
                        for (;;)
                        {
                            uint _3474 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3535 = (_3474 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3551 = (_3474 * 40u) + 24u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3570 = (_3474 * 40u) + 28u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3595 = fma(_2805, _3583.z, fma(_2804, _3583.y, _3583.x * _2803)) + _3583.w;
                            _3596 = !((fma(_2805, _3564.z, fma(_2804, _3564.y, _3564.x * _2803)) + _3564.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3596)
                            {
                                float _3623 = _3489.x - _2803;
                                float _3624 = _3489.y - _2804;
                                float _3625 = _3489.z - _2805;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3490 * _3490));
                                float _4760 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3641 = sqrt(_3626) * _3505.w;
                                float _3643 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                                float _3644 = _3643 * _3643;
                                float _3647 = ((1.0 - _3644) * dot(vec3(_3630, _3631, _3632), vec3(_944, _947, _950))) + _3644;
                                float _3650 = _3641 * _3641;
                                float _3654 = (fma(_2805, _3532.z, fma(_2804, _3532.y, _3532.x * _2803)) + _3532.w) / _3595;
                                float _3655 = (fma(_2805, _3548.z, fma(_2804, _3548.y, _3548.x * _2803)) + _3548.w) / _3595;
                                float _3659 = 1.0 - dot(vec2(_3654, _3655), vec2(_3654, _3655));
                                float _4776 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3661 = _3660 * (((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3637) / ((_3650 * 0.699999988079071044921875) + 1.0));
                                float _3673 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                                float _3674 = 1.0 - _1147;
                                float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                                float _3682 = _3681 * _3681;
                                float _3683 = _3682 * _3682;
                                float _3684 = _3630 - _3132;
                                float _3685 = _3631 - _3133;
                                float _3686 = _3632 - _3134;
                                float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                                float _3694 = dot(vec3(_944, _947, _950), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4787 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3698 = dot(vec3(_944, _947, _950), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                                float _4798 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                                float _3706 = _3643 * _3682;
                                float _3707 = _3706 * _3706;
                                float _3713 = ((1.0 - _3707) * dot(vec3(_944, _947, _950), vec3(_3630, _3631, _3632))) + _3707;
                                float _4809 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3715 = 1.0 - _3682;
                                float _3725 = (0.5 / (((_3714 * ((_3697 * _3715) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3682) * _3697))) * _3714;
                                float _4820 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3735 = (_3660 * _3637) * (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3705 * _3705) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3661 * _3505.z;
                                frontier_phi_75_pred_1 = _3661 * _3505.y;
                                frontier_phi_75_pred_2 = _3661 * _3505.x;
                                frontier_phi_75_pred_3 = _3735 * _3517.z;
                                frontier_phi_75_pred_4 = _3735 * _3517.y;
                                frontier_phi_75_pred_5 = _3735 * _3517.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_75_pred;
                            _3743 = frontier_phi_75_pred_1;
                            _3742 = frontier_phi_75_pred_2;
                            _3741 = frontier_phi_75_pred_3;
                            _3740 = frontier_phi_75_pred_4;
                            _3739 = frontier_phi_75_pred_5;
                            _3447 = _3742 + _3460;
                            _3448 = _3743 + _3461;
                            _3449 = _3744 + _3462;
                            _3444 = _3739 + _3457;
                            _3445 = _3740 + _3458;
                            _3446 = _3741 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3449;
                        frontier_phi_69_pred_1 = _3448;
                        frontier_phi_69_pred_2 = _3447;
                        frontier_phi_69_pred_3 = _3446;
                        frontier_phi_69_pred_4 = _3445;
                        frontier_phi_69_pred_5 = _3444;
                    }
                    _3117 = frontier_phi_69_pred;
                    _3115 = frontier_phi_69_pred_1;
                    _3113 = frontier_phi_69_pred_2;
                    _3111 = frontier_phi_69_pred_3;
                    _3109 = frontier_phi_69_pred_4;
                    _3107 = frontier_phi_69_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3107;
                        _3246 = _3109;
                        _3247 = _3111;
                        _3248 = _3113;
                        _3249 = _3115;
                        _3250 = _3117;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3117;
                frontier_phi_57_58_ladder_1 = _3115;
                frontier_phi_57_58_ladder_2 = _3113;
                frontier_phi_57_58_ladder_3 = _3111;
                frontier_phi_57_58_ladder_4 = _3109;
                frontier_phi_57_58_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_57_58_ladder = _2995;
                frontier_phi_57_58_ladder_1 = _2993;
                frontier_phi_57_58_ladder_2 = _2991;
                frontier_phi_57_58_ladder_3 = _2989;
                frontier_phi_57_58_ladder_4 = _2987;
                frontier_phi_57_58_ladder_5 = _2985;
            }
            _3106 = frontier_phi_57_58_ladder_5;
            _3108 = frontier_phi_57_58_ladder_4;
            _3110 = frontier_phi_57_58_ladder_3;
            _3112 = frontier_phi_57_58_ladder_2;
            _3114 = frontier_phi_57_58_ladder_1;
            _3116 = frontier_phi_57_58_ladder;
        }
        float _3121 = isnan(1.0) ? _1131 : (isnan(_1131) ? 1.0 : min(_1131, 1.0));
        _2861 = (_3121 * _3112) + _2298;
        _2863 = (_3121 * _3114) + _2300;
        _2865 = (_3121 * _3116) + _2302;
        _2867 = ((_3106 * _1117) * _3121) + _2643;
        _2869 = ((_3108 * _1118) * _3121) + _2645;
        _2871 = ((_3110 * _1119) * _3121) + _2647;
    }
    else
    {
        _2861 = _2298;
        _2863 = _2300;
        _2865 = _2302;
        _2867 = _2643;
        _2869 = _2645;
        _2871 = _2647;
    }
    uint _2877 = _1024 + uint(cbMatDynParam._m0[0u].w);
    float _2883 = cbInstanceData._m0[_2877].x * (((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _742) + cbMatDynParam._m0[7u].x) + (((((cbMtdParam._m0[12u].x * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _632) * _645.x) * _771)) + (((_800 - (_800 * _708)) + (cbMatDynParam._m0[11u].x * _831)) * cbMatDynParam._m0[9u].x));
    float _2884 = cbInstanceData._m0[_2877].y * (((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _742) + cbMatDynParam._m0[7u].y) + (((((cbMtdParam._m0[12u].y * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _632) * _645.y) * _771)) + (((_802 - (_802 * _708)) + (cbMatDynParam._m0[11u].y * _831)) * cbMatDynParam._m0[9u].y));
    float _2885 = cbInstanceData._m0[_2877].z * (((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _742) + cbMatDynParam._m0[7u].z) + (((((cbMtdParam._m0[12u].z * cbMtdParam._m0[16u].z) * cbMtdParam._m0[15u].w) * _632) * _645.z) * _771)) + (((_804 - (_804 * _708)) + (cbMatDynParam._m0[11u].z * _831)) * cbMatDynParam._m0[9u].z));
    float _4836 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4847 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4858 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _4869 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _2903 = (((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2861 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1131))) + ((_2867 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1936)) * cbPerFrame._m0[3u].x)) + _2883;
    float _2905 = (_2884 + ((_2869 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1936)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2863 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1131)));
    float _2907 = (_2885 + ((_2871 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1936)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2865 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1131)));
    float _2925 = ((cbMtdParam._m0[2u].w - cbMatDynParam._m0[12u].y) * _771) + cbMatDynParam._m0[12u].y;
    float _2930 = cbInstanceData._m0[_1023 + 6u].w * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)));
    float _2935 = _921 / cbSceneParam._m0[86u].x;
    float _2936 = _922 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _3011 = _3010 / _857;
        float _3022 = _3011 * _906;
        float _3023 = _907 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3025 = _3011 * _908;
        float _3027 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3023;
        float _3035 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3024 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3169 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3207 = ((abs(_3035 / _3024) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3045 * _3178) - exp2(_3045 * _3179)) * _3167))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2955);
        _3047 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3049 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3051 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3053 = _3218 * _2955;
    }
    else
    {
        _3047 = _2952;
        _3049 = _2953;
        _3051 = _2954;
        _3053 = _2955;
    }
    float _3065 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3066 = _3065 == 3.0;
    float _3067 = log2(_3053);
    float _3071 = exp2(_3067 * cbSceneParam._m0[78u].x);
    float _3072 = exp2(_3067 * cbSceneParam._m0[78u].y);
    float _3073 = exp2(_3067 * cbSceneParam._m0[78u].z);
    float _3074 = _3071 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0)));
    float _3075 = _3072 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)));
    float _3076 = _3073 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)));
    float _3085 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3085 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
    SV_Target.y = _3085 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
    SV_Target.z = _3085 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.w = _2930;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2883) * _2925) * _3071) * _3085;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2884) * _2925) * _3072) * _3085;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2885) * _2925) * _3073) * _3085;
    SV_Target_1.w = _2930;
}


