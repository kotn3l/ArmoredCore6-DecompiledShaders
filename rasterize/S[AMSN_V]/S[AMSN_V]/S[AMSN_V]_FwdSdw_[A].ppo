#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _875;
float _3551;
float _3552;
float _3553;
float _3554;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(S_AMSN_V_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(S_AMSN_V_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3563 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _275 = fma(_272, _216, fma(_265, _208 * TANGENT.x, (_194 * _186) * _263));
    float _278 = fma(_272, _217, fma(_265, _208 * TANGENT.y, (_194 * _187) * _263));
    float _281 = fma(_272, _218, fma(_265, _208 * TANGENT.z, (_194 * _188) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3574 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _289 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _290 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3607 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3618 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3629 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _294 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _554 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _560 = (cbMatDynParam._m0[5u].x * _554) + cbMatDynParam._m0[5u].y;
        float _3640 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _561 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _565 = (cbMatDynParam._m0[5u].z * _554) + cbMatDynParam._m0[5u].w;
        float _3651 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) - _561)) + _561) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _414 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _417 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3662 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _445 = 1.0 - _294;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _294;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _294;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _294;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _471 = _468.x * TEXCOORD_1.w;
    float _472 = dot(vec3(_286, _287, _288), vec3(_369, _370, _371));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _286) - _369;
    float _480 = (_475 * _287) - _370;
    float _481 = (_475 * _288) - _371;
    float _485 = abs(dot(vec3(_369, _370, _371), vec3(_286, _287, _288)));
    float _3695 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_290);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _874;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _599 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _603 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _607 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _632 = _535 + _286;
        float _633 = _539 + _287;
        float _634 = _543 + _288;
        float _644 = fma(_634, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632)) - _599;
        float _645 = fma(_634, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632)) - _603;
        float _646 = fma(_634, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632)) - _607;
        float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
        float _663 = ((_650 * _644) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_599 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_650 * _645) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_603 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_650 * _646) / cbModelParam._m0[34u].z) + ((((((_607 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_668.x + (-0.5));
        float _704 = _702 * (_668.y + (-0.5));
        float _705 = _702 * (_668.z + (-0.5));
        float _712 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_675.x + (-0.5));
        float _714 = _712 * (_675.y + (-0.5));
        float _715 = _712 * (_675.z + (-0.5));
        float _722 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_682.x + (-0.5));
        float _724 = _722 * (_682.y + (-0.5));
        float _725 = _722 * (_682.z + (-0.5));
        float _732 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_689.x + (-0.5));
        float _734 = _732 * (_689.y + (-0.5));
        float _735 = _732 * (_689.z + (-0.5));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = _703 * 0.5;
        float _740 = _713 * 0.5;
        float _741 = _723 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _756 = (dot(vec3(_286, _287, _288), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _766 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3743 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_768 + 1.0))) + _773) * _736;
        float _783 = _704 * 0.5;
        float _784 = _714 * 0.5;
        float _785 = _724 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_286, _287, _288), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3776 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_810 + 1.0))) + _815) * _737;
        float _825 = _705 * 0.5;
        float _826 = _715 * 0.5;
        float _827 = _725 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_286, _287, _288), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3809 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_852 + 1.0))) + _857) * _738;
        _874 = _705;
        _876 = _704;
        _877 = _703;
        _878 = _715;
        _879 = _714;
        _880 = _713;
        _881 = _725;
        _882 = _724;
        _883 = _723;
        _884 = _738;
        _885 = _737;
        _886 = _736;
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
    }
    else
    {
        _874 = _875;
        _876 = _875;
        _877 = _875;
        _878 = _875;
        _879 = _875;
        _880 = _875;
        _881 = _875;
        _882 = _875;
        _883 = _875;
        _884 = _875;
        _885 = _875;
        _886 = _875;
        _887 = 0.0;
        _888 = 0.0;
        _889 = 0.0;
    }
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _918 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _922 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _926 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _949 = _535 + _286;
        float _950 = _539 + _287;
        float _951 = _543 + _288;
        float _961 = fma(_951, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949)) - _918;
        float _962 = fma(_951, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949)) - _922;
        float _963 = fma(_951, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949)) - _926;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_918 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_922 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[35u].z) + ((((((_926 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1017 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_984.x + (-0.5));
        float _1019 = _1017 * (_984.y + (-0.5));
        float _1020 = _1017 * (_984.z + (-0.5));
        float _1027 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_991.x + (-0.5));
        float _1029 = _1027 * (_991.y + (-0.5));
        float _1030 = _1027 * (_991.z + (-0.5));
        float _1037 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_998.x + (-0.5));
        float _1039 = _1037 * (_998.y + (-0.5));
        float _1040 = _1037 * (_998.z + (-0.5));
        float _1047 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1005.x + (-0.5));
        float _1049 = _1047 * (_1005.y + (-0.5));
        float _1050 = _1047 * (_1005.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = _1018 * 0.5;
        float _1055 = _1028 * 0.5;
        float _1056 = _1038 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_286, _287, _288), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3872 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1081 + 1.0))) + _1086) * _1051;
        float _1096 = _1019 * 0.5;
        float _1097 = _1029 * 0.5;
        float _1098 = _1039 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_286, _287, _288), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3905 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1123 + 1.0))) + _1128) * _1052;
        float _1138 = _1020 * 0.5;
        float _1139 = _1030 * 0.5;
        float _1140 = _1040 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_286, _287, _288), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3938 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1165 + 1.0))) + _1170) * _1053;
        _1187 = _1020;
        _1188 = _1019;
        _1189 = _1018;
        _1190 = _1030;
        _1191 = _1029;
        _1192 = _1028;
        _1193 = _1040;
        _1194 = _1039;
        _1195 = _1038;
        _1196 = _1053;
        _1197 = _1052;
        _1198 = _1051;
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _875;
        _1188 = _875;
        _1189 = _875;
        _1190 = _875;
        _1191 = _875;
        _1192 = _875;
        _1193 = _875;
        _1194 = _875;
        _1195 = _875;
        _1196 = _875;
        _1197 = _875;
        _1198 = _875;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _888)) + _888;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1234 = fma(_1213, cbSceneParam._m0[89u].z, fma(_1212, cbSceneParam._m0[89u].y, _1211 * cbSceneParam._m0[89u].x));
    float _1237 = fma(_1213, cbSceneParam._m0[90u].z, fma(_1212, cbSceneParam._m0[90u].y, _1211 * cbSceneParam._m0[90u].x));
    float _1240 = fma(_1213, cbSceneParam._m0[91u].z, fma(_1212, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1211));
    float _1255 = _479 * 0.5;
    float _1256 = _480 * 0.5;
    float _1257 = _481 * 0.5;
    float _1258 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1261 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1264 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1298;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1271 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_874, _878, _881, _884));
        float _1275 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_876, _879, _882, _885));
        float _1279 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_877, _880, _883, _886));
        float _1286 = dot(vec4(cbModelParam._m0[39u]), vec4(_1255, _1256, _1257, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1309;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1300 = dot(vec4(cbModelParam._m0[40u]), vec4(_1255, _1256, _1257, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1313 = (_1309 * cbModelParam._m0[1u].x) + (_1298 * (1.0 - cbModelParam._m0[1u].x));
    float _1323 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _290);
    float _1324 = isnan(_1323) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1323 : min(cbModelParam._m0[25u].z, _1323));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1373 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1377 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1381 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1384 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1387 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1390 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1418;
        if (_1384 > 0.0)
        {
            _1418 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1418 = frontier_phi_19_17_ladder;
        }
        float _1594;
        if (_1387 > 0.0)
        {
            _1594 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1594 = frontier_phi_28_24_ladder;
        }
        float _1890;
        if (_1390 > 0.0)
        {
            _1890 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1890 = frontier_phi_40_35_ladder;
        }
        float _1892 = isnan(_1594) ? _1418 : (isnan(_1418) ? _1594 : min(_1418, _1594));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1384) + _1373;
        float _1898 = (_1893 * _1387) + _1377;
        float _1899 = (_1893 * _1390) + _1381;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1324);
            frontier_phi_18_40_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1406 = frontier_phi_18_40_ladder_2;
        _1408 = frontier_phi_18_40_ladder_1;
        _1410 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1324);
        _1406 = _1394.x * cbModelParam._m0[1u].y;
        _1408 = _1394.y * cbModelParam._m0[1u].y;
        _1410 = _1394.z * cbModelParam._m0[1u].y;
    }
    float _1414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _290);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1414 : min(cbModelParam._m0[25u].w, _1414));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1472 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1476 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1480 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1483 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1486 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1489 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1599;
        if (_1483 > 0.0)
        {
            _1599 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1599 = frontier_phi_30_26_ladder;
        }
        float _1917;
        if (_1486 > 0.0)
        {
            _1917 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1917 = frontier_phi_42_37_ladder;
        }
        float _2255;
        if (_1489 > 0.0)
        {
            _2255 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2255 = frontier_phi_52_49_ladder;
        }
        float _2257 = isnan(_1917) ? _1599 : (isnan(_1599) ? _1917 : min(_1599, _1917));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1483) + _1472;
        float _2263 = (_2258 * _1486) + _1476;
        float _2264 = (_2258 * _1489) + _1480;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_27_52_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1508 = frontier_phi_27_52_ladder_2;
        _1510 = frontier_phi_27_52_ladder_1;
        _1512 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1415);
        _1508 = _1492.x * cbModelParam._m0[1u].z;
        _1510 = _1492.y * cbModelParam._m0[1u].z;
        _1512 = _1492.z * cbModelParam._m0[1u].z;
    }
    float _1525 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1532 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1525 * cbSceneParam._m0[91u].x));
    float _1573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1586 = _1573 / _1585;
    float _1587 = _1577 / _1585;
    float _1588 = _1581 / _1585;
    float _1735;
    float _1736;
    float _1737;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1615 = ((uint(_1588 > cbSceneParam._m0[59u].y) + uint(_1588 > cbSceneParam._m0[59u].x)) + uint(_1588 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1616 = _1615 + 43u;
        uint _1624 = _1615 + 44u;
        uint _1632 = _1615 + 45u;
        uint _1640 = _1615 + 46u;
        float _1651 = fma(_1585, cbSceneParam._m0[_1616].w, fma(_1581, cbSceneParam._m0[_1616].z, fma(_1577, cbSceneParam._m0[_1616].y, _1573 * cbSceneParam._m0[_1616].x)));
        float _1655 = fma(_1585, cbSceneParam._m0[_1624].w, fma(_1581, cbSceneParam._m0[_1624].z, fma(_1577, cbSceneParam._m0[_1624].y, _1573 * cbSceneParam._m0[_1624].x)));
        float _1663 = fma(_1585, cbSceneParam._m0[_1640].w, fma(_1581, cbSceneParam._m0[_1640].z, fma(_1577, cbSceneParam._m0[_1640].y, _1573 * cbSceneParam._m0[_1640].x)));
        float _1668 = cbSceneParam._m0[33u].z * _1663;
        float _1670 = cbSceneParam._m0[33u].w * _1663;
        float _1673 = fma(_1585, cbSceneParam._m0[_1632].w, fma(_1581, cbSceneParam._m0[_1632].z, fma(_1577, cbSceneParam._m0[_1632].y, _1573 * cbSceneParam._m0[_1632].x))) / _1663;
        float _1721 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
        float _4064 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1728 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 + _1651) / _1663, (_1670 + _1655) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1670 + _1651) / _1663, (_1655 - _1668) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1668) / _1663, (_1655 - _1670) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1670) / _1663, (_1668 + _1655) / _1663), _1673), 0.0)).x), vec4(0.25)));
        _1735 = 1.0 - (_1728 * cbSceneParam._m0[34u].x);
        _1736 = 1.0 - (_1728 * cbSceneParam._m0[34u].y);
        _1737 = 1.0 - (_1728 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1735 = 1.0;
        _1736 = 1.0;
        _1737 = 1.0;
    }
    float _1801;
    float _1803;
    float _1805;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1789 = fma(_1585, cbSceneParam._m0[63u].w, fma(_1581, cbSceneParam._m0[63u].z, fma(_1577, cbSceneParam._m0[63u].y, _1573 * cbSceneParam._m0[63u].x)));
        float _1790 = fma(_1585, cbSceneParam._m0[60u].w, fma(_1581, cbSceneParam._m0[60u].z, fma(_1577, cbSceneParam._m0[60u].y, _1573 * cbSceneParam._m0[60u].x))) / _1789;
        float _1791 = fma(_1585, cbSceneParam._m0[61u].w, fma(_1581, cbSceneParam._m0[61u].z, fma(_1577, cbSceneParam._m0[61u].y, _1573 * cbSceneParam._m0[61u].x))) / _1789;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1790 >= cbSceneParam._m0[64u].x) && (_1791 >= cbSceneParam._m0[64u].y)) && (_1790 <= cbSceneParam._m0[64u].z)) && (_1791 <= cbSceneParam._m0[64u].w))
        {
            float _1930 = fma(_1585, cbSceneParam._m0[62u].w, fma(_1581, cbSceneParam._m0[62u].z, fma(_1577, cbSceneParam._m0[62u].y, _1573 * cbSceneParam._m0[62u].x))) / _1789;
            float _1934 = isnan(cbSceneParam._m0[41u].w) ? _1930 : (isnan(_1930) ? cbSceneParam._m0[41u].w : max(_1930, cbSceneParam._m0[41u].w));
            float _1977 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
            float _4080 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
            float _1984 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1790, cbSceneParam._m0[33u].w + _1791), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1790, _1791 - cbSceneParam._m0[33u].z), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].z, _1791 - cbSceneParam._m0[33u].w), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1791), _1934), 0.0)).x), vec4(0.25)));
            float _1988 = 1.0 - (_1984 * cbSceneParam._m0[34u].x);
            float _1989 = 1.0 - (_1984 * cbSceneParam._m0[34u].y);
            float _1990 = 1.0 - (_1984 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1989) ? _1736 : (isnan(_1736) ? _1989 : min(_1736, _1989));
            frontier_phi_39_38_ladder_1 = isnan(_1988) ? _1735 : (isnan(_1735) ? _1988 : min(_1735, _1988));
            frontier_phi_39_38_ladder_2 = isnan(_1990) ? _1737 : (isnan(_1737) ? _1990 : min(_1737, _1990));
        }
        else
        {
            frontier_phi_39_38_ladder = _1736;
            frontier_phi_39_38_ladder_1 = _1735;
            frontier_phi_39_38_ladder_2 = _1737;
        }
        _1801 = frontier_phi_39_38_ladder_1;
        _1803 = frontier_phi_39_38_ladder;
        _1805 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1801 = _1735;
        _1803 = _1736;
        _1805 = _1737;
    }
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _471 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_286, _287, _288));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_286, _287, _288));
    float _4116 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4127 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1801) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1803) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1805) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1889)
    {
        _1991 = _1881;
        _1993 = _1882;
        _1995 = _1883;
    }
    else
    {
        uint _1999 = _1812 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4138 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2018 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1881;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1882;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1883;
    }
    bool _1998 = _1887.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_1998)
    {
        _2053 = _1991;
        _2055 = _1993;
        _2057 = _1995;
    }
    else
    {
        uint _2226 = _1812 + 7u;
        float _2242 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4154 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2245 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2053 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _1991;
        _2055 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _1993;
        _2057 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _1995;
    }
    uint _2060 = _1812 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _290) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1812].x + _369;
    float _2076 = cbLight._m0[_1812].y + _370;
    float _2077 = cbLight._m0[_1812].z + _371;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1812].xyz));
    float _4170 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _2089 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2090 = dot(vec3(_286, _287, _288), vec3(_2082, _2083, _2084));
    float _4192 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2082, _2083, _2084));
    float _4203 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _453;
    float _2113 = 0.959999978542327880859375 - _454;
    float _2114 = 0.959999978542327880859375 - _455;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4214 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2148 = _1812 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _290) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1853].x + _369;
    float _2162 = cbLight._m0[_1853].y + _370;
    float _2163 = cbLight._m0[_1853].z + _371;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1853].xyz));
    float _4225 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2175 = dot(vec3(_286, _287, _288), vec3(_2168, _2169, _2170));
    float _4236 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2168, _2169, _2170));
    float _4247 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2089 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2201) + _2160) * _2174))) * _2174;
    float _4258 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2111) + _456) * cbLight._m0[_2148].x) * _2213) * _1835) + ((((cbLight._m0[_2060].x * _1801) * ((_2110 * _2111) + _456)) * _2134) * _1849);
    float _2224 = (((((_2194 * _2113) + _458) * cbLight._m0[_2148].y) * _2213) * _1835) + ((((cbLight._m0[_2060].y * _1803) * ((_2110 * _2113) + _458)) * _2134) * _1849);
    float _2225 = (((((_2194 * _2114) + _459) * cbLight._m0[_2148].z) * _2213) * _1835) + ((((cbLight._m0[_2060].z * _1805) * ((_2110 * _2114) + _459)) * _2134) * _1849);
    float _2281;
    float _2283;
    float _2285;
    if (_1889)
    {
        _2281 = _2223;
        _2283 = _2224;
        _2285 = _2225;
    }
    else
    {
        uint _2287 = _1812 + 2u;
        uint _2291 = _1812 + 10u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _290) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _369;
        float _2308 = cbLight._m0[_2287].y + _370;
        float _2309 = cbLight._m0[_2287].z + _371;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2287].xyz));
        float _4269 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2321 = dot(vec3(_286, _287, _288), vec3(_2314, _2315, _2316));
        float _4280 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4291 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
        float _2347 = 1.0 - _2306;
        float _2357 = (0.5 / (((_2089 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2347) + _2306) * _2320))) * _2320;
        float _4302 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2281 = (((((_2340 * _2111) + _456) * cbLight._m0[_2291].x) * _2359) * _2360) + _2223;
        _2283 = (((((_2340 * _2113) + _458) * cbLight._m0[_2291].y) * _2359) * _2360) + _2224;
        _2285 = (((((_2340 * _2114) + _459) * cbLight._m0[_2291].z) * _2359) * _2360) + _2225;
    }
    float _2391;
    float _2393;
    float _2395;
    if (_1998)
    {
        _2391 = _2281;
        _2393 = _2283;
        _2395 = _2285;
    }
    else
    {
        uint _2402 = _1812 + 3u;
        uint _2406 = _1812 + 11u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _290) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _369;
        float _2423 = cbLight._m0[_2402].y + _370;
        float _2424 = cbLight._m0[_2402].z + _371;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2402].xyz));
        float _4318 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2436 = dot(vec3(_286, _287, _288), vec3(_2429, _2430, _2431));
        float _4329 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4340 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2089 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2462) + _2421) * _2435))) * _2435;
        float _4351 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2391 = (((((_2455 * _2111) + _456) * cbLight._m0[_2406].x) * _2474) * _2475) + _2281;
        _2393 = (((((_2455 * _2113) + _458) * cbLight._m0[_2406].y) * _2474) * _2475) + _2283;
        _2395 = (((((_2455 * _2114) + _459) * cbLight._m0[_2406].z) * _2474) * _2475) + _2285;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1810.y == 0u)
    {
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2497)));
        float _2518 = (log2(_1588 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2777)
                {
                    frontier_phi_73_pred = _2766;
                    frontier_phi_73_pred_1 = _2765;
                    frontier_phi_73_pred_2 = _2764;
                    frontier_phi_73_pred_3 = _2763;
                    frontier_phi_73_pred_4 = _2762;
                    frontier_phi_73_pred_5 = _2761;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2776;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2767 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _1586;
                        float _2973 = _2932.y - _1587;
                        float _2974 = _2932.z - _1588;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_411, _414, _417), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4377 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3003 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3007 = (-0.0) - _1586;
                        float _3008 = (-0.0) - _1587;
                        float _3009 = (-0.0) - _1588;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _487;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_411, _414, _417), vec3(_3014, _3015, _3016));
                        float _4393 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3048 = dot(vec3(_411, _414, _417), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4404 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4415 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4426 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2836 = (_3003 * _2951.x) + _2909;
                        _2837 = (_3003 * _2951.y) + _2910;
                        _2838 = (_3003 * _2951.z) + _2911;
                        _2833 = (_3083 * _2968.x) + _2906;
                        _2834 = (_3083 * _2968.y) + _2907;
                        _2835 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_73_pred = _2838;
                    frontier_phi_73_pred_1 = _2837;
                    frontier_phi_73_pred_2 = _2836;
                    frontier_phi_73_pred_3 = _2835;
                    frontier_phi_73_pred_4 = _2834;
                    frontier_phi_73_pred_5 = _2833;
                }
                _2620 = frontier_phi_73_pred;
                _2618 = frontier_phi_73_pred_1;
                _2616 = frontier_phi_73_pred_2;
                _2614 = frontier_phi_73_pred_3;
                _2612 = frontier_phi_73_pred_4;
                _2610 = frontier_phi_73_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2610;
                    _2762 = _2612;
                    _2763 = _2614;
                    _2764 = _2616;
                    _2765 = _2618;
                    _2766 = _2620;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2626) & _2528) == 0u)
        {
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
            _2735 = _2615;
            _2737 = _2617;
            _2739 = _2619;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
            float _2755 = _2754 * _1586;
            float _2756 = _2754 * _1587;
            float _2757 = _2754 * _1588;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2889 = _2609;
                float _2890 = _2611;
                float _2891 = _2613;
                float _2892 = _2615;
                float _2893 = _2617;
                float _2894 = _2619;
                uint _2895 = _2626;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2905)
                    {
                        frontier_phi_84_pred = _2893;
                        frontier_phi_84_pred_1 = _2892;
                        frontier_phi_84_pred_2 = _2891;
                        frontier_phi_84_pred_3 = _2890;
                        frontier_phi_84_pred_4 = _2889;
                        frontier_phi_84_pred_5 = _2894;
                    }
                    else
                    {
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3110 = _2889;
                        float _3111 = _2890;
                        float _3112 = _2891;
                        float _3113 = _2892;
                        float _3114 = _2893;
                        float _3115 = _2894;
                        uint _3116 = _2904;
                        uint _3117;
                        vec4 _3142;
                        float _3143;
                        vec4 _3158;
                        vec3 _3170;
                        vec4 _3186;
                        vec4 _3202;
                        float _3249;
                        bool _3250;
                        for (;;)
                        {
                            uint _3127 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3116));
                            _3117 = (_3116 + 4294967295u) & _3116;
                            uint _3129 = _3127 * 40u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3143 = _3142.w;
                            uint _3145 = (_3127 * 40u) + 4u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3127 * 40u) + 8u;
                            _3170 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x));
                            uint _3173 = (_3127 * 40u) + 16u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3127 * 40u) + 20u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3205 = (_3127 * 40u) + 24u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3224 = (_3127 * 40u) + 28u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3249 = fma(_1588, _3237.z, fma(_1587, _3237.y, _3237.x * _1586)) + _3237.w;
                            _3250 = !((fma(_1588, _3218.z, fma(_1587, _3218.y, _3218.x * _1586)) + _3218.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3250)
                            {
                                float _3277 = _3142.x - _1586;
                                float _3278 = _3142.y - _1587;
                                float _3279 = _3142.z - _1588;
                                float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                                float _3283 = inversesqrt(_3280);
                                float _3284 = _3283 * _3277;
                                float _3285 = _3283 * _3278;
                                float _3286 = _3283 * _3279;
                                float _3290 = 1.0 - (_3280 / (_3143 * _3143));
                                float _4437 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3295 = sqrt(_3280) * _3158.w;
                                float _3297 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                                float _3298 = _3297 * _3297;
                                float _3301 = ((1.0 - _3298) * dot(vec3(_3284, _3285, _3286), vec3(_411, _414, _417))) + _3298;
                                float _3304 = _3295 * _3295;
                                float _3308 = (fma(_1588, _3186.z, fma(_1587, _3186.y, _3186.x * _1586)) + _3186.w) / _3249;
                                float _3309 = (fma(_1588, _3202.z, fma(_1587, _3202.y, _3202.x * _1586)) + _3202.w) / _3249;
                                float _3313 = 1.0 - dot(vec2(_3308, _3309), vec2(_3308, _3309));
                                float _4453 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3315 = _3314 * (((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3291) / ((_3304 * 0.699999988079071044921875) + 1.0));
                                float _3327 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                                float _3328 = 1.0 - _487;
                                float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                                float _3336 = _3335 * _3335;
                                float _3337 = _3336 * _3336;
                                float _3338 = _3284 - _2755;
                                float _3339 = _3285 - _2756;
                                float _3340 = _3286 - _2757;
                                float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                                float _3348 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4464 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3352 = dot(vec3(_411, _414, _417), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                                float _4475 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                                float _3360 = _3297 * _3336;
                                float _3361 = _3360 * _3360;
                                float _3367 = ((1.0 - _3361) * dot(vec3(_411, _414, _417), vec3(_3284, _3285, _3286))) + _3361;
                                float _4486 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3369 = 1.0 - _3336;
                                float _3379 = (0.5 / (((_3368 * ((_3351 * _3369) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3336) * _3351))) * _3368;
                                float _4497 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3389 = (_3314 * _3291) * (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3359 * _3359) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3315 * _3158.y;
                                frontier_phi_90_pred_1 = _3315 * _3158.x;
                                frontier_phi_90_pred_2 = _3389 * _3170.z;
                                frontier_phi_90_pred_3 = _3389 * _3170.y;
                                frontier_phi_90_pred_4 = _3389 * _3170.x;
                                frontier_phi_90_pred_5 = _3315 * _3158.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3397 = frontier_phi_90_pred;
                            _3396 = frontier_phi_90_pred_1;
                            _3395 = frontier_phi_90_pred_2;
                            _3394 = frontier_phi_90_pred_3;
                            _3393 = frontier_phi_90_pred_4;
                            _3398 = frontier_phi_90_pred_5;
                            _3100 = _3396 + _3113;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            if (_3117 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3117;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3101;
                        frontier_phi_84_pred_1 = _3100;
                        frontier_phi_84_pred_2 = _3099;
                        frontier_phi_84_pred_3 = _3098;
                        frontier_phi_84_pred_4 = _3097;
                        frontier_phi_84_pred_5 = _3102;
                    }
                    _2738 = frontier_phi_84_pred;
                    _2736 = frontier_phi_84_pred_1;
                    _2734 = frontier_phi_84_pred_2;
                    _2732 = frontier_phi_84_pred_3;
                    _2730 = frontier_phi_84_pred_4;
                    _2740 = frontier_phi_84_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2730;
                        _2890 = _2732;
                        _2891 = _2734;
                        _2892 = _2736;
                        _2893 = _2738;
                        _2894 = _2740;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2740;
                frontier_phi_65_66_ladder_1 = _2736;
                frontier_phi_65_66_ladder_2 = _2738;
                frontier_phi_65_66_ladder_3 = _2732;
                frontier_phi_65_66_ladder_4 = _2730;
                frontier_phi_65_66_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_65_66_ladder = _2619;
                frontier_phi_65_66_ladder_1 = _2615;
                frontier_phi_65_66_ladder_2 = _2617;
                frontier_phi_65_66_ladder_3 = _2611;
                frontier_phi_65_66_ladder_4 = _2609;
                frontier_phi_65_66_ladder_5 = _2613;
            }
            _2729 = frontier_phi_65_66_ladder_4;
            _2731 = frontier_phi_65_66_ladder_3;
            _2733 = frontier_phi_65_66_ladder_5;
            _2735 = frontier_phi_65_66_ladder_1;
            _2737 = frontier_phi_65_66_ladder_2;
            _2739 = frontier_phi_65_66_ladder;
        }
        float _2744 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2540 = (_2744 * _2735) + _2053;
        _2542 = (_2744 * _2737) + _2055;
        _2544 = (_2744 * _2739) + _2057;
        _2546 = ((_2729 * _456) * _2744) + _2391;
        _2548 = ((_2731 * _458) * _2744) + _2393;
        _2550 = ((_2733 * _459) * _2744) + _2395;
    }
    else
    {
        _2540 = _2053;
        _2542 = _2055;
        _2544 = _2057;
        _2546 = _2391;
        _2548 = _2393;
        _2550 = _2395;
    }
    float _4513 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4524 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4535 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4546 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _2568 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2540 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _471))) + ((_2546 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2542 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _471))) + ((_2548 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2544 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _471))) + ((_2550 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2575 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)));
    float _2580 = _390 / cbSceneParam._m0[86u].x;
    float _2581 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2595 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2597 = _2595.x;
    float _2598 = _2595.y;
    float _2599 = _2595.z;
    float _2600 = _2595.w;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2635 = _2634 / _310;
        float _2646 = _2635 * _362;
        float _2647 = _363 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2649 = _2635 * _364;
        float _2651 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2652 = _2651 + cbSceneParam._m0[79u].w;
        float _2653 = cbSceneParam._m0[79u].w - _2647;
        float _2659 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2649 * _2649));
        float _2662 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2659;
        float _2667 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2669 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2846;
        if (abs((_2648 - _2651) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2846 = ((((_2652 > 0.0) ? exp2(_2667 * _2652) : (2.0 - exp2(_2669 * _2652))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2662;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : max(_2652, _2653));
            float _2792 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : min(_2652, _2653));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2846 = ((abs(_2659 / _2648) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2667 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2667 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2669 * _2801) - exp2(_2669 * _2802)) * _2790))) + (_2662 * cbSceneParam._m0[80u].z);
        }
        vec4 _2848 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, 1.0), 0.0);
        float _2857 = exp2((_2846 * (-1.44269502162933349609375)) * (1.0 - _2848.w));
        float _2858 = log2(_2857);
        float _2874 = log2(_2600);
        _2671 = (exp2(_2874 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].x)) * _2848.x) / cbSceneParam._m0[78u].x)) + _2597;
        _2673 = (exp2(_2874 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].y)) * _2848.y) / cbSceneParam._m0[78u].y)) + _2598;
        _2675 = (exp2(_2874 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].z)) * _2848.z) / cbSceneParam._m0[78u].z)) + _2599;
        _2677 = _2857 * _2600;
    }
    else
    {
        _2671 = _2597;
        _2673 = _2598;
        _2675 = _2599;
        _2677 = _2600;
    }
    bool _2884;
    vec4 _2687;
    vec4 _2709;
    float _2711;
    float _2715;
    float _2716;
    float _2717;
    float _2718;
    bool _2728;
    for (;;)
    {
        _2687 = cbMatDynParam._m0[0u];
        float _2689 = roundEven(_2687.y);
        bool _2690 = _2689 == 3.0;
        float _2691 = log2(_2677);
        float _2698 = exp2(_2691 * cbSceneParam._m0[78u].x) * _2568;
        float _2699 = exp2(_2691 * cbSceneParam._m0[78u].y) * _2569;
        float _2700 = exp2(_2691 * cbSceneParam._m0[78u].z) * _2570;
        float _2707 = _378 + (-0.5);
        _2709 = cbMtdParam._m0[1u];
        _2711 = _2709.y * _2707;
        float _2714 = (_2689 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2715 = _2714 * (_2690 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2671)));
        _2716 = _2714 * (_2690 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2673)));
        _2717 = _2714 * (_2690 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2675)));
        _2718 = _2707 * 0.999000012874603271484375;
        _2728 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2728)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2718) < 0.5)
            {
                _2884 = true;
                break;
            }
        }
        uint _2825 = _432 + uint(_2687.w);
        if ((cbInstanceData._m0[_2825].w < 1.0) && ((cbInstanceData._m0[_2825].w + _2718) < 0.5))
        {
            _2884 = true;
            break;
        }
        if ((_2711 + _238) < _2709.x)
        {
            _2884 = true;
            break;
        }
        _2884 = false;
        break;
    }
    float _3088;
    if (_2884)
    {
        discard_state = true;
        _3088 = 0.0;
    }
    else
    {
        _3088 = _2575;
    }
    SV_Target.x = _2715;
    SV_Target.y = _2716;
    SV_Target.z = _2717;
    SV_Target.w = _3088;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2575;
    discard_exit();
}


