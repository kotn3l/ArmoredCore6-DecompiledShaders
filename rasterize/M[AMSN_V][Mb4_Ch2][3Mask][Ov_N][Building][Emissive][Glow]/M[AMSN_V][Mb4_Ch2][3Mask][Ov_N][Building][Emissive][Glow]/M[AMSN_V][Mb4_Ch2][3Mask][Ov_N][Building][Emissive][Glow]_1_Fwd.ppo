#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1880;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _249 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _250 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _251 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _257 = inversesqrt(dot(vec3(_249, _250, _251), vec3(_249, _250, _251)));
    float _258 = _257 * _249;
    float _259 = _257 * _250;
    float _260 = _257 * _251;
    float _270 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _271 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _272 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _276 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _277 = _276 * _270;
    float _278 = _276 * _271;
    float _279 = _276 * _272;
    float _283 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _284 = _283 * NORMAL.x;
    float _285 = _283 * NORMAL.y;
    float _286 = _283 * NORMAL.z;
    float _290 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _291 = _290 * TANGENT.x;
    float _292 = _290 * TANGENT.y;
    float _293 = _290 * TANGENT.z;
    float _297 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _298 = _297 * TANGENT_2.x;
    float _299 = _297 * TANGENT_2.y;
    float _300 = _297 * TANGENT_2.z;
    float _305;
    float _306;
    float _307;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _305 = (-0.0) - _284;
        _306 = (-0.0) - _285;
        _307 = (-0.0) - _286;
    }
    else
    {
        _305 = _284;
        _306 = _285;
        _307 = _286;
    }
    vec4 _326 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = 1.0 - ((1.0 - _326.z) * 1.39999997615814208984375);
    float _4226 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _341 = 1.0 - ((1.0 - _326.x) * 1.39999997615814208984375);
    float _4237 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _344 = 1.0 - ((1.0 - _326.y) * 1.39999997615814208984375);
    float _4248 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _347 = (_342 + _339) + _345;
    float _354 = (_347 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _355 = (_347 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _356 = (_347 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _381 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _390 = 1.0 - ((1.0 - _381.x) * 1.39999997615814208984375);
    float _4259 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _401 = (_391 * ((cbMtdParam._m0[9u].x - _354) + ((1.0 - cbMtdParam._m0[9u].x) * _347))) + _354;
    float _402 = (_391 * ((cbMtdParam._m0[9u].y - _355) + ((1.0 - cbMtdParam._m0[9u].y) * _347))) + _355;
    float _403 = (_391 * ((cbMtdParam._m0[9u].z - _356) + ((1.0 - cbMtdParam._m0[9u].z) * _347))) + _356;
    float _416 = 1.0 - ((1.0 - _381.y) * 1.39999997615814208984375);
    float _4270 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _427 = (((cbMtdParam._m0[17u].x - _401) + ((1.0 - cbMtdParam._m0[17u].x) * _347)) * _417) + _401;
    float _428 = (((cbMtdParam._m0[17u].y - _402) + ((1.0 - cbMtdParam._m0[17u].y) * _347)) * _417) + _402;
    float _429 = (((cbMtdParam._m0[17u].z - _403) + ((1.0 - cbMtdParam._m0[17u].z) * _347)) * _417) + _403;
    float _443 = 1.0 - ((1.0 - _381.z) * 1.39999997615814208984375);
    float _4281 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _475 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _489 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _475) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4292 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = 1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)));
    float _499 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _475) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4303 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = 1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)));
    vec4 _519 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _524 = cbMtdParam._m0[10u].x * _501;
    float _526 = cbMtdParam._m0[10u].y * _501;
    float _528 = cbMtdParam._m0[10u].z * _501;
    float _545 = ((_521 * (cbMtdParam._m0[16u].x - _524)) * _491) + (_524 * _521);
    float _546 = ((_522 * (cbMtdParam._m0[16u].y - _526)) * _491) + (_526 * _522);
    float _547 = ((_523 * (cbMtdParam._m0[16u].z - _528)) * _491) + (_528 * _523);
    float _569 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _573 = (_569 * ((TEXCOORD_7.x - _475) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _574 = (_569 * ((TEXCOORD_7.y - _475) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _575 = (_569 * ((TEXCOORD_7.z - _475) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4314 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4325 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4336 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _584 = (1.0 - cbMtdParam._m0[25u].x) + _342;
    float _587 = _584 * (1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))));
    float _588 = _584 * (1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))));
    float _589 = ((_342 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))));
    float _599 = _501 + _491;
    float _600 = _599 + _587;
    float _601 = _599 + _588;
    float _602 = _599 + _589;
    float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _606 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
    float _607 = isnan(1.0) ? _604 : (isnan(_604) ? 1.0 : min(_604, 1.0));
    float _608 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
    vec4 _626 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _631 = _626.w;
    float _632 = _626.x * cbMtdParam._m0[12u].x;
    float _633 = _626.y * cbMtdParam._m0[12u].y;
    float _634 = _626.z * cbMtdParam._m0[12u].z;
    vec4 _652 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _666 = (((_652.x * cbMtdParam._m0[13u].x) - _632) * _342) + _632;
    float _667 = (((_652.y * cbMtdParam._m0[13u].y) - _633) * _342) + _633;
    float _668 = (((_652.z * cbMtdParam._m0[13u].z) - _634) * _342) + _634;
    vec4 _687 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _701 = (((_687.x * cbMtdParam._m0[14u].x) - _666) * _345) + _666;
    float _702 = (((_687.y * cbMtdParam._m0[14u].y) - _667) * _345) + _667;
    float _703 = (((_687.z * cbMtdParam._m0[14u].z) - _668) * _345) + _668;
    vec4 _720 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _734 = (((_720.x * cbMtdParam._m0[15u].x) - _701) * _339) + _701;
    float _735 = (((_720.y * cbMtdParam._m0[15u].y) - _702) * _339) + _702;
    float _736 = (((_720.z * cbMtdParam._m0[15u].z) - _703) * _339) + _703;
    float _756 = ((_734 - (_734 * _606)) + (((_606 * 4.55000019073486328125) * ((_587 * ((cbMtdParam._m0[11u].x * _521) - _545)) + _545)) * _734)) * ((((cbMtdParam._m0[18u].x - _427) + ((1.0 - cbMtdParam._m0[18u].x) * _347)) * _444) + _427);
    float _757 = ((_735 - (_735 * _607)) + (((_607 * 4.55000019073486328125) * ((_588 * ((cbMtdParam._m0[11u].y * _522) - _546)) + _546)) * _735)) * ((((cbMtdParam._m0[18u].y - _428) + ((1.0 - cbMtdParam._m0[18u].y) * _347)) * _444) + _428);
    float _758 = ((_736 - (_608 * _736)) + (((_608 * 4.55000019073486328125) * ((_589 * ((cbMtdParam._m0[11u].z * _523) - _547)) + _547)) * _736)) * ((((cbMtdParam._m0[18u].z - _429) + ((1.0 - cbMtdParam._m0[18u].z) * _347)) * _444) + _429);
    float _769 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _606) + cbMtdParam._m0[25u].w;
    float _772 = ((cbMtdParam._m0[20u].x - _769) * _342) + _769;
    float _775 = ((cbMtdParam._m0[20u].y - _772) * _345) + _772;
    float _778 = ((cbMtdParam._m0[20u].z - _775) * _339) + _775;
    vec4 _790 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _794 = _790.z;
    float _798 = (_790.x * 2.0) + (-1.0);
    float _800 = (_790.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_798, _800), vec2(_798, _800));
    float _4377 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _806 = sqrt(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))));
    float _809 = fma(_806, _305, fma(_800, _298, _798 * _277));
    float _812 = fma(_806, _306, fma(_800, _299, _798 * _278));
    float _815 = fma(_806, _307, fma(_800, _300, _798 * _279));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _839 = abs((fract(cbMtdParam._m0[21u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4388 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _845 = (_840 * _840) * (3.0 - (_840 * 2.0));
    float _846 = isnan(cbMtdParam._m0[21u].y) ? _845 : (isnan(_845) ? cbMtdParam._m0[21u].y : max(_845, cbMtdParam._m0[21u].y));
    vec4 _865 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].x * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _870 = (isnan(cbMtdParam._m0[21u].x) ? _846 : (isnan(_846) ? cbMtdParam._m0[21u].x : min(_846, cbMtdParam._m0[21u].x))) * cbMtdParam._m0[22u].y;
    vec4 _902 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _908 = (_902.x * 2.0) + (-1.0);
    float _909 = (_902.y * 2.0) + (-1.0);
    float _910 = dot(vec2(_908, _909), vec2(_908, _909));
    float _4409 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _915 = sqrt(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))));
    float _918 = fma(_915, _305, fma(_909, _298, _908 * _277));
    float _921 = fma(_915, _306, fma(_909, _299, _908 * _278));
    float _924 = fma(_915, _307, fma(_909, _300, _908 * _279));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _934 = fma(_931, _260, fma(_930, _259, _929 * _258));
    float _937 = fma(_931, _293, fma(_930, _292, _929 * _291));
    float _940 = fma(_931, _307, fma(_930, _306, _929 * _305));
    float _944 = inversesqrt(dot(vec3(_934, _937, _940), vec3(_934, _937, _940)));
    vec4 _958 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _964 = (_958.x * 2.0) + (-1.0);
    float _965 = (_958.y * 2.0) + (-1.0);
    float _966 = dot(vec2(_964, _965), vec2(_964, _965));
    float _4420 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _971 = sqrt(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))));
    float _974 = fma(_971, _305, fma(_965, _298, _964 * _277));
    float _977 = fma(_971, _306, fma(_965, _299, _964 * _278));
    float _980 = fma(_971, _307, fma(_965, _300, _964 * _279));
    float _984 = inversesqrt(dot(vec3(_974, _977, _980), vec3(_974, _977, _980)));
    float _985 = _984 * _974;
    float _986 = _984 * _977;
    float _987 = _984 * _980;
    float _990 = fma(_987, _260, fma(_986, _259, _985 * _258));
    float _993 = fma(_987, _293, fma(_986, _292, _985 * _291));
    float _996 = fma(_987, _307, fma(_986, _306, _985 * _305));
    float _1000 = inversesqrt(dot(vec3(_990, _993, _996), vec3(_990, _993, _996)));
    vec4 _1013 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1019 = (_1013.x * 2.0) + (-1.0);
    float _1020 = (_1013.y * 2.0) + (-1.0);
    float _1021 = dot(vec2(_1019, _1020), vec2(_1019, _1020));
    float _4431 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1026 = sqrt(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))));
    float _1029 = fma(_1026, _305, fma(_1020, _298, _1019 * _277));
    float _1032 = fma(_1026, _306, fma(_1020, _299, _1019 * _278));
    float _1035 = fma(_1026, _307, fma(_1020, _300, _1019 * _279));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _1045 = fma(_1042, _260, fma(_1041, _259, _1040 * _258));
    float _1048 = fma(_1042, _293, fma(_1041, _292, _1040 * _291));
    float _1051 = fma(_1042, _307, fma(_1041, _306, _1040 * _305));
    float _1055 = inversesqrt(dot(vec3(_1045, _1048, _1051), vec3(_1045, _1048, _1051)));
    float _1061 = fma(_822, _260, fma(_821, _259, _820 * _258));
    float _1064 = fma(_822, _293, fma(_821, _292, _820 * _291));
    float _1067 = fma(_822, _307, fma(_821, _306, _820 * _305));
    float _1071 = inversesqrt(dot(vec3(_1061, _1064, _1067), vec3(_1061, _1064, _1067)));
    float _1072 = _1071 * _1061;
    float _1073 = _1071 * _1064;
    float _1074 = _1071 * _1067;
    float _1081 = (((_1055 * _1045) - _1072) * _342) + _1072;
    float _1082 = (((_1055 * _1048) - _1073) * _342) + _1073;
    float _1083 = (((_1055 * _1051) - _1074) * _342) + _1074;
    vec4 _1096 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1102 = (_1096.x * 2.0) + (-1.0);
    float _1103 = (_1096.y * 2.0) + (-1.0);
    float _1104 = dot(vec2(_1102, _1103), vec2(_1102, _1103));
    float _4442 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1109 = sqrt(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))));
    float _1112 = fma(_1109, _305, fma(_1103, _298, _1102 * _277));
    float _1115 = fma(_1109, _306, fma(_1103, _299, _1102 * _278));
    float _1118 = fma(_1109, _307, fma(_1103, _300, _1102 * _279));
    float _1122 = inversesqrt(dot(vec3(_1112, _1115, _1118), vec3(_1112, _1115, _1118)));
    float _1123 = _1122 * _1112;
    float _1124 = _1122 * _1115;
    float _1125 = _1122 * _1118;
    float _1128 = fma(_1125, _260, fma(_1124, _259, _1123 * _258));
    float _1131 = fma(_1125, _293, fma(_1124, _292, _1123 * _291));
    float _1134 = fma(_1125, _307, fma(_1124, _306, _1123 * _305));
    float _1138 = inversesqrt(dot(vec3(_1128, _1131, _1134), vec3(_1128, _1131, _1134)));
    float _1148 = (((_1138 * _1128) - _1081) * _345) + _1081;
    float _1149 = (((_1138 * _1131) - _1082) * _345) + _1082;
    float _1150 = (((_1138 * _1134) - _1083) * _345) + _1083;
    vec4 _1163 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1169 = (_1163.x * 2.0) + (-1.0);
    float _1170 = (_1163.y * 2.0) + (-1.0);
    float _1171 = dot(vec2(_1169, _1170), vec2(_1169, _1170));
    float _4453 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1176 = sqrt(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))));
    float _1179 = fma(_1176, _305, fma(_1170, _298, _1169 * _277));
    float _1182 = fma(_1176, _306, fma(_1170, _299, _1169 * _278));
    float _1185 = fma(_1176, _307, fma(_1170, _300, _1169 * _279));
    float _1189 = inversesqrt(dot(vec3(_1179, _1182, _1185), vec3(_1179, _1182, _1185)));
    float _1190 = _1189 * _1179;
    float _1191 = _1189 * _1182;
    float _1192 = _1189 * _1185;
    float _1195 = fma(_1192, _260, fma(_1191, _259, _1190 * _258));
    float _1198 = fma(_1192, _293, fma(_1191, _292, _1190 * _291));
    float _1201 = fma(_1192, _307, fma(_1191, _306, _1190 * _305));
    float _1205 = inversesqrt(dot(vec3(_1195, _1198, _1201), vec3(_1195, _1198, _1201)));
    float _1215 = (((_1205 * _1201) - _1150) * _339) + _1150;
    vec4 _1227 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1233 = (_1227.x * 2.0) + (-1.0);
    float _1234 = (_1227.y * 2.0) + (-1.0);
    float _1235 = dot(vec2(_1233, _1234), vec2(_1233, _1234));
    float _4464 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1240 = sqrt(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))));
    float _1243 = fma(_1240, _305, fma(_1234, _298, _1233 * _277));
    float _1246 = fma(_1240, _306, fma(_1234, _299, _1233 * _278));
    float _1249 = fma(_1240, _307, fma(_1234, _300, _1233 * _279));
    float _1253 = inversesqrt(dot(vec3(_1243, _1246, _1249), vec3(_1243, _1246, _1249)));
    float _1254 = _1253 * _1243;
    float _1255 = _1253 * _1246;
    float _1256 = _1253 * _1249;
    float _1259 = fma(_1256, _260, fma(_1255, _259, _1254 * _258));
    float _1262 = fma(_1256, _293, fma(_1255, _292, _1254 * _291));
    float _1265 = fma(_1256, _307, fma(_1255, _306, _1254 * _305));
    float _1269 = inversesqrt(dot(vec3(_1259, _1262, _1265), vec3(_1259, _1262, _1265)));
    vec4 _1307 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1321 = (((((((_990 * _491) * _1000) * cbMtdParam._m0[24u].z) + ((((_600 * _584) * _934) * _944) * cbMtdParam._m0[24u].w)) + _1148) + (((_1205 * _1195) - _1148) * _339)) + (((_1259 * _501) * _1269) * cbMtdParam._m0[23u].z)) + (((_1307.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1326 = (((((((_993 * _491) * _1000) * cbMtdParam._m0[24u].z) + ((((_601 * _584) * _937) * _944) * cbMtdParam._m0[24u].w)) + _1149) + (((_1205 * _1198) - _1149) * _339)) + (((_1262 * _501) * _1269) * cbMtdParam._m0[23u].z)) + (((_1307.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1329 = fma(_1215, _305, fma(_1326, _291, _1321 * _258));
    float _1332 = fma(_1215, _306, fma(_1326, _292, _1321 * _259));
    float _1335 = fma(_1215, _307, fma(_1326, _293, _1321 * _260));
    float _1339 = inversesqrt(dot(vec3(_1329, _1332, _1335), vec3(_1329, _1332, _1335)));
    float _1340 = _1339 * _1329;
    float _1341 = _1339 * _1332;
    float _1342 = _1339 * _1335;
    float _4475 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _1343 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _4486 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _1344 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4508 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4519 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4530 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _1348 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _1364 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1404 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1414 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1404);
    float _1415 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1404);
    float _1416 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1404);
    float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
    float _1421 = _1414 * _1420;
    float _1422 = _1415 * _1420;
    float _1423 = _1416 * _1420;
    float _1429 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1430 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1448 = fma(_1342, cbSceneParam._m0[5u].z, fma(_1341, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1340));
    float _1451 = fma(_1342, cbSceneParam._m0[6u].z, fma(_1341, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1340));
    float _1454 = fma(_1342, cbSceneParam._m0[7u].z, fma(_1341, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1340));
    uint _1467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1468 = _1467 + 9u;
    uint _1469 = _1468 + uint(cbMatDynParam._m0[0u].w);
    float _1475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * cbInstanceData._m0[_1469].x;
    float _1476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * cbInstanceData._m0[_1469].y;
    float _1477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * cbInstanceData._m0[_1469].z;
    float _4541 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _1478 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _4552 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _1479 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
    float _1480 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _1481 = 1.0 - _1348;
    float _1482 = _1478 * _1481;
    float _1483 = _1479 * _1481;
    float _1484 = _1480 * _1481;
    float _1489 = (_1478 + (-0.039999999105930328369140625)) * _1348;
    float _1490 = (_1479 + (-0.039999999105930328369140625)) * _1348;
    float _1491 = (_1480 + (-0.039999999105930328369140625)) * _1348;
    float _1492 = _1489 + 0.039999999105930328369140625;
    float _1494 = _1490 + 0.039999999105930328369140625;
    float _1495 = _1491 + 0.039999999105930328369140625;
    vec4 _1504 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1429, cbSceneParam._m0[86u].y * _1430));
    float _1507 = _1504.x * TEXCOORD_7.w;
    float _1508 = dot(vec3(_1340, _1341, _1342), vec3(_1421, _1422, _1423));
    float _1511 = _1508 * 2.0;
    float _1515 = (_1511 * _1340) - _1421;
    float _1516 = (_1511 * _1341) - _1422;
    float _1517 = (_1511 * _1342) - _1423;
    float _1521 = abs(dot(vec3(_1421, _1422, _1423), vec3(_1340, _1341, _1342)));
    float _4574 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1523 = sqrt(_1344);
    float _1535 = exp2((_1523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1523 * 3.0));
    float _1541 = (1.0 - _1535) * ((_1523 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1542 = _1535 * _1523;
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1879;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1604 = fma(_1578, cbModelParam._m0[26u].z, fma(_1574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1570));
        float _1608 = fma(_1578, cbModelParam._m0[27u].z, fma(_1574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1570));
        float _1612 = fma(_1578, cbModelParam._m0[28u].z, fma(_1574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1570));
        float _1637 = _1570 + _1340;
        float _1638 = _1574 + _1341;
        float _1639 = _1578 + _1342;
        float _1649 = fma(_1639, cbModelParam._m0[26u].z, fma(_1638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1637)) - _1604;
        float _1650 = fma(_1639, cbModelParam._m0[27u].z, fma(_1638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1637)) - _1608;
        float _1651 = fma(_1639, cbModelParam._m0[28u].z, fma(_1638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1637)) - _1612;
        float _1655 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
        float _1668 = ((_1655 * _1649) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1604 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1669 = ((_1655 * _1650) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1608 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1670 = ((_1655 * _1651) / cbModelParam._m0[34u].z) + ((((((_1612 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        float _1707 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1673.x + (-0.5));
        float _1709 = _1707 * (_1673.y + (-0.5));
        float _1710 = _1707 * (_1673.z + (-0.5));
        float _1717 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1680.x + (-0.5));
        float _1719 = _1717 * (_1680.y + (-0.5));
        float _1720 = _1717 * (_1680.z + (-0.5));
        float _1727 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1687.x + (-0.5));
        float _1729 = _1727 * (_1687.y + (-0.5));
        float _1730 = _1727 * (_1687.z + (-0.5));
        float _1737 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1694.x + (-0.5));
        float _1739 = _1737 * (_1694.y + (-0.5));
        float _1740 = _1737 * (_1694.z + (-0.5));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1744 = _1708 * 0.5;
        float _1745 = _1718 * 0.5;
        float _1746 = _1728 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1761 = (dot(vec3(_1340, _1341, _1342), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1771 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4622 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_1773 + 1.0))) + _1778) * _1741;
        float _1788 = _1709 * 0.5;
        float _1789 = _1719 * 0.5;
        float _1790 = _1729 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_1340, _1341, _1342), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1742 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4655 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_1815 + 1.0))) + _1820) * _1742;
        float _1830 = _1710 * 0.5;
        float _1831 = _1720 * 0.5;
        float _1832 = _1730 * 0.5;
        float _1833 = dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832));
        float _1838 = (_1833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1833);
        float _1846 = (dot(vec3(_1340, _1341, _1342), vec3(_1838 * _1830, _1838 * _1831, _1838 * _1832)) + 1.0) * 0.5;
        float _4666 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832)) / (_1743 + 9.9999997473787516355514526367188e-06);
        float _4677 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _1857 = _1856 * 2.0;
        float _1861 = (1.0 - _1856) / (_1856 + 1.0);
        float _4688 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1871 = ((((1.0 - _1862) * (_1857 + 2.0)) * exp2(log2(isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_1857 + 1.0))) + _1862) * _1743;
        _1879 = _1710;
        _1881 = _1709;
        _1882 = _1708;
        _1883 = _1720;
        _1884 = _1719;
        _1885 = _1718;
        _1886 = _1730;
        _1887 = _1729;
        _1888 = _1728;
        _1889 = _1743;
        _1890 = _1742;
        _1891 = _1741;
        _1892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
        _1893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
        _1894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)));
    }
    else
    {
        _1879 = _1880;
        _1881 = _1880;
        _1882 = _1880;
        _1883 = _1880;
        _1884 = _1880;
        _1885 = _1880;
        _1886 = _1880;
        _1887 = _1880;
        _1888 = _1880;
        _1889 = _1880;
        _1890 = _1880;
        _1891 = _1880;
        _1892 = 0.0;
        _1893 = 0.0;
        _1894 = 0.0;
    }
    float _2189;
    float _2190;
    float _2191;
    float _2192;
    float _2193;
    float _2194;
    float _2195;
    float _2196;
    float _2197;
    float _2198;
    float _2199;
    float _2200;
    float _2201;
    float _2202;
    float _2203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1920 = fma(_1578, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1570));
        float _1924 = fma(_1578, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1570));
        float _1928 = fma(_1578, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1570));
        float _1951 = _1570 + _1340;
        float _1952 = _1574 + _1341;
        float _1953 = _1578 + _1342;
        float _1963 = fma(_1953, cbModelParam._m0[30u].z, fma(_1952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1951)) - _1920;
        float _1964 = fma(_1953, cbModelParam._m0[31u].z, fma(_1952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1951)) - _1924;
        float _1965 = fma(_1953, cbModelParam._m0[32u].z, fma(_1952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1951)) - _1928;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1982 = ((_1969 * _1963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1983 = ((_1969 * _1964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1984 = ((_1969 * _1965) / cbModelParam._m0[35u].z) + ((((((_1928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1982, _1983, _1984), 0.0);
        vec4 _1993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1982, _1983, _1984), 0.0);
        vec4 _2000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1982, _1983, _1984), 0.0);
        vec4 _2007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1982, _1983, _1984), 0.0);
        float _2019 = exp2((_1986.w + (-0.5)) * 20.0) * 2.0;
        float _2020 = _2019 * (_1986.x + (-0.5));
        float _2021 = _2019 * (_1986.y + (-0.5));
        float _2022 = _2019 * (_1986.z + (-0.5));
        float _2029 = exp2((_1993.w + (-0.5)) * 20.0) * 2.0;
        float _2030 = _2029 * (_1993.x + (-0.5));
        float _2031 = _2029 * (_1993.y + (-0.5));
        float _2032 = _2029 * (_1993.z + (-0.5));
        float _2039 = exp2((_2000.w + (-0.5)) * 20.0) * 2.0;
        float _2040 = _2039 * (_2000.x + (-0.5));
        float _2041 = _2039 * (_2000.y + (-0.5));
        float _2042 = _2039 * (_2000.z + (-0.5));
        float _2049 = exp2((_2007.w + (-0.5)) * 20.0) * 2.0;
        float _2050 = _2049 * (_2007.x + (-0.5));
        float _2051 = _2049 * (_2007.y + (-0.5));
        float _2052 = _2049 * (_2007.z + (-0.5));
        float _2053 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2054 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2056 = _2020 * 0.5;
        float _2057 = _2030 * 0.5;
        float _2058 = _2040 * 0.5;
        float _2059 = dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058));
        float _2064 = (_2059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2059);
        float _2072 = (dot(vec3(_1340, _1341, _1342), vec3(_2064 * _2056, _2064 * _2057, _2064 * _2058)) + 1.0) * 0.5;
        float _4729 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2081 = sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058)) / (_2053 + 9.9999997473787516355514526367188e-06);
        float _4740 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2083 = _2082 * 2.0;
        float _2087 = (1.0 - _2082) / (_2082 + 1.0);
        float _4751 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2097 = ((((1.0 - _2088) * (_2083 + 2.0)) * exp2(log2(isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2083 + 1.0))) + _2088) * _2053;
        float _2098 = _2021 * 0.5;
        float _2099 = _2031 * 0.5;
        float _2100 = _2041 * 0.5;
        float _2101 = dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100));
        float _2106 = (_2101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2101);
        float _2114 = (dot(vec3(_1340, _1341, _1342), vec3(_2106 * _2098, _2106 * _2099, _2106 * _2100)) + 1.0) * 0.5;
        float _4762 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2123 = sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100)) / (_2054 + 9.9999997473787516355514526367188e-06);
        float _4773 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2125 = _2124 * 2.0;
        float _2129 = (1.0 - _2124) / (_2124 + 1.0);
        float _4784 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2139 = ((((1.0 - _2130) * (_2125 + 2.0)) * exp2(log2(isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2125 + 1.0))) + _2130) * _2054;
        float _2140 = _2022 * 0.5;
        float _2141 = _2032 * 0.5;
        float _2142 = _2042 * 0.5;
        float _2143 = dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142));
        float _2148 = (_2143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2143);
        float _2156 = (dot(vec3(_1340, _1341, _1342), vec3(_2148 * _2140, _2148 * _2141, _2148 * _2142)) + 1.0) * 0.5;
        float _4795 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2165 = sqrt(((_2141 * _2141) + (_2140 * _2140)) + (_2142 * _2142)) / (_2055 + 9.9999997473787516355514526367188e-06);
        float _4806 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2167 = _2166 * 2.0;
        float _2171 = (1.0 - _2166) / (_2166 + 1.0);
        float _4817 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2181 = ((((1.0 - _2172) * (_2167 + 2.0)) * exp2(log2(isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2167 + 1.0))) + _2172) * _2055;
        _2189 = _2022;
        _2190 = _2021;
        _2191 = _2020;
        _2192 = _2032;
        _2193 = _2031;
        _2194 = _2030;
        _2195 = _2042;
        _2196 = _2041;
        _2197 = _2040;
        _2198 = _2055;
        _2199 = _2054;
        _2200 = _2053;
        _2201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)));
        _2202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0)));
        _2203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)));
    }
    else
    {
        _2189 = _1880;
        _2190 = _1880;
        _2191 = _1880;
        _2192 = _1880;
        _2193 = _1880;
        _2194 = _1880;
        _2195 = _1880;
        _2196 = _1880;
        _2197 = _1880;
        _2198 = _1880;
        _2199 = _1880;
        _2200 = _1880;
        _2201 = 0.0;
        _2202 = 0.0;
        _2203 = 0.0;
    }
    float _2213 = (cbModelParam._m0[1u].x * (_2201 - _1892)) + _1892;
    float _2214 = (cbModelParam._m0[1u].x * (_2202 - _1893)) + _1893;
    float _2215 = (cbModelParam._m0[1u].x * (_2203 - _1894)) + _1894;
    float _2236 = fma(_2215, cbSceneParam._m0[89u].z, fma(_2214, cbSceneParam._m0[89u].y, _2213 * cbSceneParam._m0[89u].x));
    float _2239 = fma(_2215, cbSceneParam._m0[90u].z, fma(_2214, cbSceneParam._m0[90u].y, _2213 * cbSceneParam._m0[90u].x));
    float _2242 = fma(_2215, cbSceneParam._m0[91u].z, fma(_2214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2213));
    float _2257 = _1515 * 0.5;
    float _2258 = _1516 * 0.5;
    float _2259 = _1517 * 0.5;
    float _2260 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_2191, _2194, _2197, _2200));
    float _2263 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_2190, _2193, _2196, _2199));
    float _2266 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_2189, _2192, _2195, _2198));
    float _2300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2273 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_1879, _1883, _1886, _1889));
        float _2277 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_1881, _1884, _1887, _1890));
        float _2281 = dot(vec4(_2257, _2258, _2259, 1.0), vec4(_1882, _1885, _1888, _1891));
        float _2288 = dot(vec4(cbModelParam._m0[39u]), vec4(_2257, _2258, _2259, 1.0));
        _2300 = dot(vec3(isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)), isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)), isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2288) ? 0.0 : (isnan(0.0) ? _2288 : max(0.0, _2288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2300 = 1.0;
    }
    float _2311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2302 = dot(vec4(cbModelParam._m0[40u]), vec4(_2257, _2258, _2259, 1.0));
        _2311 = dot(vec3(isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)), isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0)), isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2302) ? 0.0 : (isnan(0.0) ? _2302 : max(0.0, _2302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2311 = 1.0;
    }
    float _2315 = (_2311 * cbModelParam._m0[1u].x) + (_2300 * (1.0 - cbModelParam._m0[1u].x));
    float _2325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1344);
    float _2326 = isnan(_2325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2325 : min(cbModelParam._m0[25u].z, _2325));
    float _2406;
    float _2408;
    float _2410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2373 = fma(_1578, cbModelParam._m0[13u].z, fma(_1574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1570)) + cbModelParam._m0[13u].w;
        float _2377 = fma(_1578, cbModelParam._m0[14u].z, fma(_1574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1570)) + cbModelParam._m0[14u].w;
        float _2381 = fma(_1578, cbModelParam._m0[15u].z, fma(_1574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1570)) + cbModelParam._m0[15u].w;
        float _2384 = fma(_1517, cbModelParam._m0[13u].z, fma(_1516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1515));
        float _2387 = fma(_1517, cbModelParam._m0[14u].z, fma(_1516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1515));
        float _2390 = fma(_1517, cbModelParam._m0[15u].z, fma(_1516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1515));
        float _2418;
        if (_2384 > 0.0)
        {
            _2418 = abs((1.0 - _2373) / _2384);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2384 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2373 + 1.0) / _2384);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2418 = frontier_phi_16_14_ladder;
        }
        float _2620;
        if (_2387 > 0.0)
        {
            _2620 = abs((1.0 - _2377) / _2387);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2387 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2377 + 1.0) / _2387);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2620 = frontier_phi_25_21_ladder;
        }
        float _2874;
        if (_2390 > 0.0)
        {
            _2874 = abs((1.0 - _2381) / _2390);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2390 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2381 + 1.0) / _2390);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2874 = frontier_phi_37_32_ladder;
        }
        float _2876 = isnan(_2620) ? _2418 : (isnan(_2418) ? _2620 : min(_2418, _2620));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2384) + _2373;
        float _2882 = (_2877 * _2387) + _2377;
        float _2883 = (_2877 * _2390) + _2381;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2886 = (-1.0) - _2884;
        float _2888 = _2884 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2883 > _2888) || ((_2883 < _2886) || ((_2882 > _2888) || ((_2882 < _2886) || ((_2881 < _2886) || (_2881 > _2888))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2883, cbModelParam._m0[9u].z, fma(_2882, cbModelParam._m0[9u].y, _2881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2883, cbModelParam._m0[10u].z, fma(_2882, cbModelParam._m0[10u].y, _2881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2883, cbModelParam._m0[11u].z, fma(_2882, cbModelParam._m0[11u].y, _2881 * cbModelParam._m0[11u].x))), _2326);
            frontier_phi_15_37_ladder = _3011.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _3011.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _3011.x * cbModelParam._m0[1u].y;
        }
        _2406 = frontier_phi_15_37_ladder_2;
        _2408 = frontier_phi_15_37_ladder_1;
        _2410 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1515, _1516, _1517), _2326);
        _2406 = _2394.x * cbModelParam._m0[1u].y;
        _2408 = _2394.y * cbModelParam._m0[1u].y;
        _2410 = _2394.z * cbModelParam._m0[1u].y;
    }
    float _2414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1344);
    float _2415 = isnan(_2414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2414 : min(cbModelParam._m0[25u].w, _2414));
    float _2504;
    float _2506;
    float _2508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2468 = fma(_1578, cbModelParam._m0[21u].z, fma(_1574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1570)) + cbModelParam._m0[21u].w;
        float _2472 = fma(_1578, cbModelParam._m0[22u].z, fma(_1574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1570)) + cbModelParam._m0[22u].w;
        float _2476 = fma(_1578, cbModelParam._m0[23u].z, fma(_1574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1570)) + cbModelParam._m0[23u].w;
        float _2479 = fma(_1517, cbModelParam._m0[21u].z, fma(_1516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1515));
        float _2482 = fma(_1517, cbModelParam._m0[22u].z, fma(_1516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1515));
        float _2485 = fma(_1517, cbModelParam._m0[23u].z, fma(_1516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1515));
        float _2625;
        if (_2479 > 0.0)
        {
            _2625 = abs((1.0 - _2468) / _2479);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2479 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2468 + 1.0) / _2479);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2625 = frontier_phi_27_23_ladder;
        }
        float _2901;
        if (_2482 > 0.0)
        {
            _2901 = abs((1.0 - _2472) / _2482);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2482 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2472 + 1.0) / _2482);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2901 = frontier_phi_39_34_ladder;
        }
        float _3114;
        if (_2485 > 0.0)
        {
            _3114 = abs((1.0 - _2476) / _2485);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2485 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2476 + 1.0) / _2485);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _3114 = frontier_phi_48_45_ladder;
        }
        float _3116 = isnan(_2901) ? _2625 : (isnan(_2625) ? _2901 : min(_2625, _2901));
        float _3117 = isnan(_3114) ? _3116 : (isnan(_3116) ? _3114 : min(_3116, _3114));
        float _3121 = (_3117 * _2479) + _2468;
        float _3122 = (_3117 * _2482) + _2472;
        float _3123 = (_3117 * _2485) + _2476;
        float _3124 = _3117 * 9.9999997473787516355514526367188e-05;
        float _3125 = (-1.0) - _3124;
        float _3127 = _3124 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_3123 > _3127) || ((_3123 < _3125) || ((_3122 > _3127) || ((_3122 < _3125) || ((_3121 < _3125) || (_3121 > _3127))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3123, cbModelParam._m0[17u].z, fma(_3122, cbModelParam._m0[17u].y, _3121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3123, cbModelParam._m0[18u].z, fma(_3122, cbModelParam._m0[18u].y, _3121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3123, cbModelParam._m0[19u].z, fma(_3122, cbModelParam._m0[19u].y, _3121 * cbModelParam._m0[19u].x))), _2415);
            frontier_phi_24_48_ladder = _3342.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _3342.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _3342.x * cbModelParam._m0[1u].z;
        }
        _2504 = frontier_phi_24_48_ladder_2;
        _2506 = frontier_phi_24_48_ladder_1;
        _2508 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1515, _1516, _1517), _2415);
        _2504 = _2488.x * cbModelParam._m0[1u].z;
        _2506 = _2488.y * cbModelParam._m0[1u].z;
        _2508 = _2488.z * cbModelParam._m0[1u].z;
    }
    float _2521 = (((_1541 * _1492) + _1542) * _1507) * ((cbModelParam._m0[1u].w * (_2504 - _2406)) + _2406);
    float _2523 = (((_1541 * _1494) + _1542) * _1507) * ((cbModelParam._m0[1u].w * (_2506 - _2408)) + _2408);
    float _2525 = (((_1541 * _1495) + _1542) * _1507) * ((cbModelParam._m0[1u].w * (_2508 - _2410)) + _2410);
    float _2528 = fma(_2525, cbSceneParam._m0[89u].z, fma(_2523, cbSceneParam._m0[89u].y, _2521 * cbSceneParam._m0[89u].x));
    float _2531 = fma(_2525, cbSceneParam._m0[90u].z, fma(_2523, cbSceneParam._m0[90u].y, _2521 * cbSceneParam._m0[90u].x));
    float _2534 = fma(_2525, cbSceneParam._m0[91u].z, fma(_2523, cbSceneParam._m0[91u].y, _2521 * cbSceneParam._m0[91u].x));
    uvec4 _2544 = floatBitsToUint(cbInstanceData._m0[_1467 + 5u]);
    uint _2546 = _2544.x * 14u;
    uint _2547 = _2546 + 13u;
    float _2554 = _1507 + (-1.0);
    float _2559 = (cbLight._m0[_2547].x * _2554) + 1.0;
    float _2560 = (cbLight._m0[_2547].y * _2554) + 1.0;
    float _2561 = (cbLight._m0[_2547].z * _2554) + 1.0;
    float _2562 = (cbLight._m0[_2547].w * _2554) + 1.0;
    uint _2563 = _2546 + 5u;
    float _2569 = isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0));
    uint _2573 = _2546 + 4u;
    float _2579 = isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0));
    uint _2583 = _2546 | 1u;
    float _2594 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_1340, _1341, _1342));
    float _2597 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_1340, _1341, _1342));
    float _4953 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _4964 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2602 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * 0.3183098733425140380859375;
    float _2604 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * 0.3183098733425140380859375;
    float _2611 = ((cbLight._m0[_2563].x * _2569) * _2604) + ((cbLight._m0[_2573].x * _2579) * _2602);
    float _2612 = ((_2569 * cbLight._m0[_2563].y) * _2604) + ((_2579 * cbLight._m0[_2573].y) * _2602);
    float _2613 = ((_2569 * cbLight._m0[_2563].z) * _2604) + ((_2579 * cbLight._m0[_2573].z) * _2602);
    uvec4 _2617 = floatBitsToUint(cbLight._m0[_2546 + 12u]);
    bool _2619 = _2617.x == 0u;
    float _2630;
    float _2632;
    float _2634;
    if (_2619)
    {
        _2630 = _2611;
        _2632 = _2612;
        _2634 = _2613;
    }
    else
    {
        uint _2638 = _2546 + 6u;
        float _2654 = (dot(vec3(cbLight._m0[_2546 + 2u].xyz), vec3(_1340, _1341, _1342)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4975 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2657 = isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0));
        _2630 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2611;
        _2632 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2612;
        _2634 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2613;
    }
    bool _2637 = _2617.y == 0u;
    float _2675;
    float _2677;
    float _2679;
    if (_2637)
    {
        _2675 = _2630;
        _2677 = _2632;
        _2679 = _2634;
    }
    else
    {
        uint _2845 = _2546 + 7u;
        float _2861 = (dot(vec3(cbLight._m0[_2546 + 3u].xyz), vec3(_1340, _1341, _1342)) * 0.5) + 0.5;
        float _2862 = _2861 * _2861;
        float _4991 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2863 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _2864 = isnan(1.0) ? _2562 : (isnan(_2562) ? 1.0 : min(_2562, 1.0));
        _2675 = (((cbLight._m0[_2845].x * 0.3183098733425140380859375) * _2863) * _2864) + _2630;
        _2677 = (((cbLight._m0[_2845].y * 0.3183098733425140380859375) * _2863) * _2864) + _2632;
        _2679 = (((cbLight._m0[_2845].z * 0.3183098733425140380859375) * _2863) * _2864) + _2634;
    }
    uint _2682 = _2546 + 8u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _1344) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2546].x + _1421;
    float _2698 = cbLight._m0[_2546].y + _1422;
    float _2699 = cbLight._m0[_2546].z + _1423;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_1340, _1341, _1342), vec3(cbLight._m0[_2546].xyz));
    float _5007 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
    float _5018 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _2711 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    float _2712 = dot(vec3(_1340, _1341, _1342), vec3(_2704, _2705, _2706));
    float _5029 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2704, _2705, _2706));
    float _5040 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2696 * _2696;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) * 5.0);
    float _2733 = 0.959999978542327880859375 - _1489;
    float _2735 = 0.959999978542327880859375 - _1490;
    float _2736 = 0.959999978542327880859375 - _1491;
    float _2743 = 1.0 - _2696;
    float _2754 = (0.5 / (((_2711 * ((_2710 * _2743) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2743) + _2696) * _2710))) * _2710;
    float _5051 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2767 = _2546 + 9u;
    float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _1344) * 0.949999988079071044921875);
    float _2779 = _2778 * _2778;
    float _2780 = cbLight._m0[_2583].x + _1421;
    float _2781 = cbLight._m0[_2583].y + _1422;
    float _2782 = cbLight._m0[_2583].z + _1423;
    float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
    float _2787 = _2786 * _2780;
    float _2788 = _2786 * _2781;
    float _2789 = _2786 * _2782;
    float _2790 = dot(vec3(_1340, _1341, _1342), vec3(cbLight._m0[_2583].xyz));
    float _5062 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
    float _2794 = dot(vec3(_1340, _1341, _1342), vec3(_2787, _2788, _2789));
    float _5073 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
    float _2798 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2787, _2788, _2789));
    float _5084 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2802 = _2779 * _2779;
    float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
    float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0)))) * 5.0);
    float _2820 = 1.0 - _2779;
    float _2830 = (0.5 / (((_2711 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2820) + _2779) * _2793))) * _2793;
    float _5095 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2832 = (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
    float _2842 = (((((_2813 * _2733) + _1492) * cbLight._m0[_2767].x) * _2832) * _2569) + (((((_2732 * _2733) + _1492) * cbLight._m0[_2682].x) * _2756) * _2579);
    float _2843 = (((((_2813 * _2735) + _1494) * cbLight._m0[_2767].y) * _2832) * _2569) + (((((_2732 * _2735) + _1494) * cbLight._m0[_2682].y) * _2756) * _2579);
    float _2844 = (((((_2813 * _2736) + _1495) * cbLight._m0[_2767].z) * _2832) * _2569) + (((((_2732 * _2736) + _1495) * cbLight._m0[_2682].z) * _2756) * _2579);
    float _2906;
    float _2908;
    float _2910;
    if (_2619)
    {
        _2906 = _2842;
        _2908 = _2843;
        _2910 = _2844;
    }
    else
    {
        uint _2912 = _2546 + 2u;
        uint _2916 = _2546 + 10u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _1344) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _1421;
        float _2933 = cbLight._m0[_2912].y + _1422;
        float _2934 = cbLight._m0[_2912].z + _1423;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_1340, _1341, _1342), vec3(cbLight._m0[_2912].xyz));
        float _5106 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
        float _2946 = dot(vec3(_1340, _1341, _1342), vec3(_2939, _2940, _2941));
        float _5117 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _5128 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2711 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2972) + _2931) * _2945))) * _2945;
        float _5139 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0));
        _2906 = (((((_2965 * _2733) + _1492) * cbLight._m0[_2916].x) * _2984) * _2985) + _2842;
        _2908 = (((((_2965 * _2735) + _1494) * cbLight._m0[_2916].y) * _2984) * _2985) + _2843;
        _2910 = (((((_2965 * _2736) + _1495) * cbLight._m0[_2916].z) * _2984) * _2985) + _2844;
    }
    float _3020;
    float _3022;
    float _3024;
    if (_2637)
    {
        _3020 = _2906;
        _3022 = _2908;
        _3024 = _2910;
    }
    else
    {
        uint _3031 = _2546 + 3u;
        uint _3035 = _2546 + 11u;
        float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3031].w)) * _1344) * 0.949999988079071044921875);
        float _3050 = _3049 * _3049;
        float _3051 = cbLight._m0[_3031].x + _1421;
        float _3052 = cbLight._m0[_3031].y + _1422;
        float _3053 = cbLight._m0[_3031].z + _1423;
        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
        float _3058 = _3057 * _3051;
        float _3059 = _3057 * _3052;
        float _3060 = _3057 * _3053;
        float _3061 = dot(vec3(_1340, _1341, _1342), vec3(cbLight._m0[_3031].xyz));
        float _5155 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _3065 = dot(vec3(_1340, _1341, _1342), vec3(_3058, _3059, _3060));
        float _5166 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
        float _3069 = dot(vec3(cbLight._m0[_3031].xyz), vec3(_3058, _3059, _3060));
        float _5177 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3073 = _3050 * _3050;
        float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
        float _3084 = exp2(log2(1.0 - (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0)))) * 5.0);
        float _3091 = 1.0 - _3050;
        float _3101 = (0.5 / (((_2711 * ((_3064 * _3091) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _3091) + _3050) * _3064))) * _3064;
        float _5188 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3103 = (isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
        float _3104 = isnan(1.0) ? _2562 : (isnan(_2562) ? 1.0 : min(_2562, 1.0));
        _3020 = (((((_3084 * _2733) + _1492) * cbLight._m0[_3035].x) * _3103) * _3104) + _2906;
        _3022 = (((((_3084 * _2735) + _1494) * cbLight._m0[_3035].y) * _3103) * _3104) + _2908;
        _3024 = (((((_3084 * _2736) + _1495) * cbLight._m0[_3035].z) * _3103) * _3104) + _2910;
    }
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_2544.y == 0u)
    {
        float _3179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3179;
        float _3181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3179;
        float _3182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3179;
        uvec4 _3194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3195 = _3194.x;
        uint _3206 = uint((float(_3194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1430) / _3195))) + floor(float(uint(cbSceneParam._m0[85u].x * _1429) / _3195)));
        float _3216 = (log2(_3182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3217 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
        uint _3220 = uint(isnan(14.0) ? _3217 : (isnan(_3217) ? 14.0 : min(_3217, 14.0)));
        uvec4 _3225 = texelFetch(g_lightClusterGridBuffer, int(((_3220 << 2u) + (_3206 << 6u)) >> 2u));
        uint _3226 = _3225.x;
        uint _3227 = _3194.z;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        if (((((1u << ((_3227 >> 4u) & 15u)) + 4294967295u) & _3226) == 0u) || ((_3227 & 240u) == 0u))
        {
            _3347 = 0.0;
            _3349 = 0.0;
            _3351 = 0.0;
            _3353 = 0.0;
            _3355 = 0.0;
            _3357 = 0.0;
        }
        else
        {
            float _3348;
            float _3350;
            float _3352;
            float _3354;
            float _3356;
            float _3358;
            float _3491 = 0.0;
            float _3492 = 0.0;
            float _3493 = 0.0;
            float _3494 = 0.0;
            float _3495 = 0.0;
            float _3496 = 0.0;
            uint _3497 = 0u;
            uint _3506;
            bool _3507;
            for (;;)
            {
                _3506 = texelFetch(g_lightClassification, int((((_3220 << 5u) + (_3206 << 9u)) + (_3497 << 2u)) >> 2u)).x;
                _3507 = _3506 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3507)
                {
                    frontier_phi_63_pred = _3496;
                    frontier_phi_63_pred_1 = _3495;
                    frontier_phi_63_pred_2 = _3494;
                    frontier_phi_63_pred_3 = _3493;
                    frontier_phi_63_pred_4 = _3492;
                    frontier_phi_63_pred_5 = _3491;
                }
                else
                {
                    float _3615;
                    float _3616;
                    float _3617;
                    float _3618;
                    float _3619;
                    float _3620;
                    uint _3621;
                    _3615 = _3491;
                    _3616 = _3492;
                    _3617 = _3493;
                    _3618 = _3494;
                    _3619 = _3495;
                    _3620 = _3496;
                    _3621 = _3506;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    for (;;)
                    {
                        uint _3625 = uint(findLSB(_3621)) + (_3497 << 5u);
                        uint _3622 = (_3621 + 4294967295u) & _3621;
                        uint _3627 = _3625 * 48u;
                        vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3627)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 3u)).x));
                        uint _3647 = (_3625 * 48u) + 4u;
                        vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3647)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 3u)).x));
                        uint _3666 = (_3625 * 48u) + 8u;
                        vec3 _3677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x));
                        float _3681 = _3641.x - _3180;
                        float _3682 = _3641.y - _3181;
                        float _3683 = _3641.z - _3182;
                        float _3684 = dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683));
                        float _3687 = inversesqrt(_3684);
                        float _3688 = _3687 * _3681;
                        float _3689 = _3687 * _3682;
                        float _3690 = _3687 * _3683;
                        float _3691 = dot(vec3(_1448, _1451, _1454), vec3(_3688, _3689, _3690));
                        float _3696 = 1.0 - (_3684 * _3641.w);
                        float _5214 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3697 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                        float _3698 = sqrt(_3684) * _3660.w;
                        float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                        float _3701 = _3700 * _3700;
                        float _3704 = ((1.0 - _3701) * _3691) + _3701;
                        float _3707 = _3698 * _3698;
                        float _3711 = ((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3697) / ((_3707 * 0.699999988079071044921875) + 1.0);
                        float _3715 = (-0.0) - _3180;
                        float _3716 = (-0.0) - _3181;
                        float _3717 = (-0.0) - _3182;
                        float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                        float _3722 = _3721 * _3715;
                        float _3723 = _3721 * _3716;
                        float _3724 = _3721 * _3717;
                        float _3732 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                        float _3733 = 1.0 - _1523;
                        float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                        float _3741 = _3740 * _3740;
                        float _3742 = _3741 * _3741;
                        float _3743 = _3722 + _3688;
                        float _3744 = _3723 + _3689;
                        float _3745 = _3724 + _3690;
                        float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                        float _3753 = dot(vec3(_1448, _1451, _1454), vec3(_3722, _3723, _3724));
                        float _5230 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3756 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
                        float _3757 = dot(vec3(_1448, _1451, _1454), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                        float _5241 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                        float _3760 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                        float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                        float _3765 = _3700 * _3741;
                        float _3766 = _3765 * _3765;
                        float _3769 = ((1.0 - _3766) * _3691) + _3766;
                        float _5252 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                        float _3770 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                        float _3771 = 1.0 - _3741;
                        float _3781 = (0.5 / (((_3770 * ((_3756 * _3771) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3741) * _3756))) * _3770;
                        float _5263 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                        float _3792 = (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0)))) / ((_3764 * _3764) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125))) * _3697;
                        _3550 = (_3711 * _3660.x) + _3618;
                        _3551 = (_3711 * _3660.y) + _3619;
                        _3552 = (_3711 * _3660.z) + _3620;
                        _3547 = (_3792 * _3677.x) + _3615;
                        _3548 = (_3792 * _3677.y) + _3616;
                        _3549 = (_3792 * _3677.z) + _3617;
                        if (_3622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3615 = _3547;
                            _3616 = _3548;
                            _3617 = _3549;
                            _3618 = _3550;
                            _3619 = _3551;
                            _3620 = _3552;
                            _3621 = _3622;
                        }
                    }
                    frontier_phi_63_pred = _3552;
                    frontier_phi_63_pred_1 = _3551;
                    frontier_phi_63_pred_2 = _3550;
                    frontier_phi_63_pred_3 = _3549;
                    frontier_phi_63_pred_4 = _3548;
                    frontier_phi_63_pred_5 = _3547;
                }
                _3358 = frontier_phi_63_pred;
                _3356 = frontier_phi_63_pred_1;
                _3354 = frontier_phi_63_pred_2;
                _3352 = frontier_phi_63_pred_3;
                _3350 = frontier_phi_63_pred_4;
                _3348 = frontier_phi_63_pred_5;
                uint _3498 = _3497 + 1u;
                if (_3498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3491 = _3348;
                    _3492 = _3350;
                    _3493 = _3352;
                    _3494 = _3354;
                    _3495 = _3356;
                    _3496 = _3358;
                    _3497 = _3498;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3347 = _3348;
            _3349 = _3350;
            _3351 = _3352;
            _3353 = _3354;
            _3355 = _3356;
            _3357 = _3358;
        }
        uvec4 _3361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3362 = _3361.z;
        uint _3364 = (_3362 >> 8u) & 15u;
        float _3459;
        float _3461;
        float _3463;
        float _3465;
        float _3467;
        float _3469;
        if (((4294967295u << _3364) & _3226) == 0u)
        {
            _3459 = _3347;
            _3461 = _3349;
            _3463 = _3351;
            _3465 = _3353;
            _3467 = _3355;
            _3469 = _3357;
        }
        else
        {
            float _3484 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
            float _3485 = _3484 * _3180;
            float _3486 = _3484 * _3181;
            float _3487 = _3484 * _3182;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3364 < ((_3362 >> 12u) & 15u))
            {
                float _3460;
                float _3462;
                float _3464;
                float _3466;
                float _3468;
                float _3470;
                float _3598 = _3347;
                float _3599 = _3349;
                float _3600 = _3351;
                float _3601 = _3353;
                float _3602 = _3355;
                float _3603 = _3357;
                uint _3604 = _3364;
                uint _3613;
                bool _3614;
                for (;;)
                {
                    _3613 = texelFetch(g_lightClassification, int((((_3220 << 5u) + (_3206 << 9u)) + (_3604 << 2u)) >> 2u)).x;
                    _3614 = _3613 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3614)
                    {
                        frontier_phi_69_pred = _3603;
                        frontier_phi_69_pred_1 = _3602;
                        frontier_phi_69_pred_2 = _3601;
                        frontier_phi_69_pred_3 = _3600;
                        frontier_phi_69_pred_4 = _3599;
                        frontier_phi_69_pred_5 = _3598;
                    }
                    else
                    {
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _4090;
                        float _4091;
                        float _4092;
                        float _4093;
                        float _4094;
                        float _4095;
                        float _3810 = _3598;
                        float _3811 = _3599;
                        float _3812 = _3600;
                        float _3813 = _3601;
                        float _3814 = _3602;
                        float _3815 = _3603;
                        uint _3816 = _3613;
                        uint _3817;
                        vec4 _3842;
                        float _3843;
                        vec4 _3858;
                        vec3 _3870;
                        vec4 _3885;
                        vec4 _3900;
                        float _3946;
                        bool _3947;
                        for (;;)
                        {
                            uint _3827 = ((_3604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3816));
                            _3817 = (_3816 + 4294967295u) & _3816;
                            uint _3829 = _3827 * 40u;
                            _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            _3843 = _3842.w;
                            uint _3845 = (_3827 * 40u) + 4u;
                            _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            uint _3860 = (_3827 * 40u) + 8u;
                            _3870 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 2u)).x));
                            uint _3872 = (_3827 * 40u) + 16u;
                            _3885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 3u)).x));
                            uint _3887 = (_3827 * 40u) + 20u;
                            _3900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 3u)).x));
                            uint _3902 = (_3827 * 40u) + 24u;
                            vec4 _3915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 3u)).x));
                            uint _3921 = (_3827 * 40u) + 28u;
                            vec4 _3934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 3u)).x));
                            _3946 = fma(_3182, _3934.z, fma(_3181, _3934.y, _3934.x * _3180)) + _3934.w;
                            _3947 = !((fma(_3182, _3915.z, fma(_3181, _3915.y, _3915.x * _3180)) + _3915.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3947)
                            {
                                float _3974 = _3842.x - _3180;
                                float _3975 = _3842.y - _3181;
                                float _3976 = _3842.z - _3182;
                                float _3977 = dot(vec3(_3974, _3975, _3976), vec3(_3974, _3975, _3976));
                                float _3980 = inversesqrt(_3977);
                                float _3981 = _3980 * _3974;
                                float _3982 = _3980 * _3975;
                                float _3983 = _3980 * _3976;
                                float _3987 = 1.0 - (_3977 / (_3843 * _3843));
                                float _5274 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3988 = isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0));
                                float _3992 = sqrt(_3977) * _3858.w;
                                float _3994 = 1.39999997615814208984375 / (_3992 + 1.39999997615814208984375);
                                float _3995 = _3994 * _3994;
                                float _3998 = ((1.0 - _3995) * dot(vec3(_3981, _3982, _3983), vec3(_1448, _1451, _1454))) + _3995;
                                float _4001 = _3992 * _3992;
                                float _4005 = (fma(_3182, _3885.z, fma(_3181, _3885.y, _3885.x * _3180)) + _3885.w) / _3946;
                                float _4006 = (fma(_3182, _3900.z, fma(_3181, _3900.y, _3900.x * _3180)) + _3900.w) / _3946;
                                float _4010 = 1.0 - dot(vec2(_4005, _4006), vec2(_4005, _4006));
                                float _5290 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4011 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
                                float _4012 = _4011 * (((isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0))) * _3988) / ((_4001 * 0.699999988079071044921875) + 1.0));
                                float _4024 = exp2(log2(1.0 / ((_4001 * 3.5) + 5.0)) * 0.25);
                                float _4025 = 1.0 - _1523;
                                float _4032 = sqrt(1.0 - ((1.0 - (_4025 * _4025)) * (1.0 - (_4024 * _4024))));
                                float _4033 = _4032 * _4032;
                                float _4034 = _4033 * _4033;
                                float _4035 = _3981 - _3485;
                                float _4036 = _3982 - _3486;
                                float _4037 = _3983 - _3487;
                                float _4041 = inversesqrt(dot(vec3(_4035, _4036, _4037), vec3(_4035, _4036, _4037)));
                                float _4045 = dot(vec3(_1448, _1451, _1454), vec3((-0.0) - _3485, (-0.0) - _3486, (-0.0) - _3487));
                                float _5301 = isnan(0.0) ? _4045 : (isnan(_4045) ? 0.0 : max(_4045, 0.0));
                                float _4048 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4049 = dot(vec3(_1448, _1451, _1454), vec3(_4041 * _4035, _4041 * _4036, _4041 * _4037));
                                float _5312 = isnan(0.0) ? _4049 : (isnan(_4049) ? 0.0 : max(_4049, 0.0));
                                float _4052 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4056 = ((_4052 * _4052) * (_4034 + (-1.0))) + 1.0;
                                float _4057 = _3994 * _4033;
                                float _4058 = _4057 * _4057;
                                float _4064 = ((1.0 - _4058) * dot(vec3(_1448, _1451, _1454), vec3(_3981, _3982, _3983))) + _4058;
                                float _5323 = isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0));
                                float _4065 = isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0));
                                float _4066 = 1.0 - _4033;
                                float _4076 = (0.5 / (((_4065 * ((_4048 * _4066) + _4033)) + 9.9999999392252902907785028219223e-09) + (((_4065 * _4066) + _4033) * _4048))) * _4065;
                                float _5334 = isnan(0.0) ? _4076 : (isnan(_4076) ? 0.0 : max(_4076, 0.0));
                                float _4086 = (_4011 * _3988) * (((_4034 * 3.1415927410125732421875) * (isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0)))) / ((_4056 * _4056) * ((_4001 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _4012 * _3858.z;
                                frontier_phi_75_pred_1 = _4012 * _3858.y;
                                frontier_phi_75_pred_2 = _4012 * _3858.x;
                                frontier_phi_75_pred_3 = _4086 * _3870.z;
                                frontier_phi_75_pred_4 = _4086 * _3870.y;
                                frontier_phi_75_pred_5 = _4086 * _3870.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _4095 = frontier_phi_75_pred;
                            _4094 = frontier_phi_75_pred_1;
                            _4093 = frontier_phi_75_pred_2;
                            _4092 = frontier_phi_75_pred_3;
                            _4091 = frontier_phi_75_pred_4;
                            _4090 = frontier_phi_75_pred_5;
                            _3800 = _4093 + _3813;
                            _3801 = _4094 + _3814;
                            _3802 = _4095 + _3815;
                            _3797 = _4090 + _3810;
                            _3798 = _4091 + _3811;
                            _3799 = _4092 + _3812;
                            if (_3817 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3810 = _3797;
                                _3811 = _3798;
                                _3812 = _3799;
                                _3813 = _3800;
                                _3814 = _3801;
                                _3815 = _3802;
                                _3816 = _3817;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3802;
                        frontier_phi_69_pred_1 = _3801;
                        frontier_phi_69_pred_2 = _3800;
                        frontier_phi_69_pred_3 = _3799;
                        frontier_phi_69_pred_4 = _3798;
                        frontier_phi_69_pred_5 = _3797;
                    }
                    _3470 = frontier_phi_69_pred;
                    _3468 = frontier_phi_69_pred_1;
                    _3466 = frontier_phi_69_pred_2;
                    _3464 = frontier_phi_69_pred_3;
                    _3462 = frontier_phi_69_pred_4;
                    _3460 = frontier_phi_69_pred_5;
                    uint _3605 = _3604 + 1u;
                    if (_3605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3598 = _3460;
                        _3599 = _3462;
                        _3600 = _3464;
                        _3601 = _3466;
                        _3602 = _3468;
                        _3603 = _3470;
                        _3604 = _3605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3470;
                frontier_phi_57_58_ladder_1 = _3468;
                frontier_phi_57_58_ladder_2 = _3466;
                frontier_phi_57_58_ladder_3 = _3464;
                frontier_phi_57_58_ladder_4 = _3462;
                frontier_phi_57_58_ladder_5 = _3460;
            }
            else
            {
                frontier_phi_57_58_ladder = _3357;
                frontier_phi_57_58_ladder_1 = _3355;
                frontier_phi_57_58_ladder_2 = _3353;
                frontier_phi_57_58_ladder_3 = _3351;
                frontier_phi_57_58_ladder_4 = _3349;
                frontier_phi_57_58_ladder_5 = _3347;
            }
            _3459 = frontier_phi_57_58_ladder_5;
            _3461 = frontier_phi_57_58_ladder_4;
            _3463 = frontier_phi_57_58_ladder_3;
            _3465 = frontier_phi_57_58_ladder_2;
            _3467 = frontier_phi_57_58_ladder_1;
            _3469 = frontier_phi_57_58_ladder;
        }
        float _3474 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _3238 = (_3474 * _3465) + _2675;
        _3240 = (_3474 * _3467) + _2677;
        _3242 = (_3474 * _3469) + _2679;
        _3244 = ((_3459 * _1492) * _3474) + _3020;
        _3246 = ((_3461 * _1494) * _3474) + _3022;
        _3248 = ((_3463 * _1495) * _3474) + _3024;
    }
    else
    {
        _3238 = _2675;
        _3240 = _2677;
        _3242 = _2679;
        _3244 = _3020;
        _3246 = _3022;
        _3248 = _3024;
    }
    uint _3254 = _1468 + uint(cbMatDynParam._m0[0u].w);
    float _5350 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _5361 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
    float _5372 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    float _5383 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _3280 = (((isnan(1.0) ? _5350 : (isnan(_5350) ? 1.0 : min(_5350, 1.0))) * (_3238 + ((isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))) * _1507))) + ((_3244 + ((isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))) * _2315)) * cbPerFrame._m0[3u].x)) + (((((_870 * _865.x) + cbMtdParam._m0[26u].x) * ((_342 * TEXCOORD_13.x) + TEXCOORD_10.x)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3254].x);
    float _3282 = ((((((_870 * _865.y) + cbMtdParam._m0[26u].y) * ((_342 * TEXCOORD_13.y) + TEXCOORD_10.y)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3254].y) + ((_3246 + ((isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))) * _2315)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0))) * (_3240 + ((isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))) * _1507)));
    float _3284 = ((((((_870 * _865.z) + cbMtdParam._m0[26u].z) * ((_342 * TEXCOORD_13.z) + TEXCOORD_10.z)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3254].z) + ((_3248 + ((isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))) * _2315)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5372 : (isnan(_5372) ? 1.0 : min(_5372, 1.0))) * (_3242 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _1507)));
    float _3292 = cbInstanceData._m0[_1467 + 6u].w * (isnan(1.0) ? _5383 : (isnan(_5383) ? 1.0 : min(_5383, 1.0)));
    float _3297 = _1429 / cbSceneParam._m0[86u].x;
    float _3298 = _1430 / cbSceneParam._m0[86u].y;
    vec4 _3312 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3297, _3298, (log2((isnan(cbSceneParam._m0[77u].w) ? _1364 : (isnan(_1364) ? cbSceneParam._m0[77u].w : min(_1364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3314 = _3312.x;
    float _3315 = _3312.y;
    float _3316 = _3312.z;
    float _3317 = _3312.w;
    float _3409;
    float _3411;
    float _3413;
    float _3415;
    if (_1364 > cbSceneParam._m0[78u].w)
    {
        float _3372 = isnan(_1364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1364 : min(cbSceneParam._m0[80u].w, _1364));
        float _3373 = _3372 / _1364;
        float _3384 = _3373 * _1414;
        float _3385 = _1415 * _3373;
        float _3386 = (-0.0) - _3385;
        float _3387 = _3373 * _1416;
        float _3389 = (cbSceneParam._m0[77u].w * _3386) / _3372;
        float _3390 = _3389 + cbSceneParam._m0[79u].w;
        float _3391 = cbSceneParam._m0[79u].w - _3385;
        float _3397 = sqrt(((_3384 * _3384) + (_3385 * _3385)) + (_3387 * _3387));
        float _3400 = (1.0 - (cbSceneParam._m0[77u].w / _3372)) * _3397;
        float _3405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3560;
        if (abs((_3386 - _3389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3560 = ((((_3390 > 0.0) ? exp2(_3405 * _3390) : (2.0 - exp2(_3407 * _3390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3400;
        }
        else
        {
            float _3520 = 1.0 / cbSceneParam._m0[80u].x;
            float _3521 = isnan(_3391) ? _3390 : (isnan(_3390) ? _3391 : max(_3390, _3391));
            float _3522 = isnan(_3391) ? _3390 : (isnan(_3390) ? _3391 : min(_3390, _3391));
            float _3531 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : min(_3521, 0.0));
            float _3532 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : min(_3522, 0.0));
            _3560 = ((abs(_3397 / _3386) * cbSceneParam._m0[80u].y) * ((((_3531 - _3532) * 2.0) - ((exp2(_3405 * (isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0)))) - exp2(_3405 * (isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0))))) * _3520)) - ((exp2(_3407 * _3531) - exp2(_3407 * _3532)) * _3520))) + (_3400 * cbSceneParam._m0[80u].z);
        }
        vec4 _3562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3297, _3298, 1.0), 0.0);
        float _3571 = exp2((_3560 * (-1.44269502162933349609375)) * (1.0 - _3562.w));
        float _3572 = log2(_3571);
        float _3588 = log2(_3317);
        _3409 = (exp2(_3588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].x)) * _3562.x) / cbSceneParam._m0[78u].x)) + _3314;
        _3411 = (exp2(_3588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].y)) * _3562.y) / cbSceneParam._m0[78u].y)) + _3315;
        _3413 = (exp2(_3588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].z)) * _3562.z) / cbSceneParam._m0[78u].z)) + _3316;
        _3415 = _3571 * _3317;
    }
    else
    {
        _3409 = _3314;
        _3411 = _3315;
        _3413 = _3316;
        _3415 = _3317;
    }
    float _3427 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3428 = _3427 == 3.0;
    float _3429 = log2(_3415);
    float _3436 = exp2(_3429 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0)));
    float _3437 = exp2(_3429 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0)));
    float _3438 = exp2(_3429 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0)));
    float _3447 = (_3427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3447 * (_3428 ? _3436 : (_3436 + (cbSceneParam._m0[72u].w * _3409)));
    SV_Target.y = _3447 * (_3428 ? _3437 : (_3437 + (cbSceneParam._m0[72u].w * _3411)));
    SV_Target.z = _3447 * (_3428 ? _3438 : (_3438 + (cbSceneParam._m0[72u].w * _3413)));
    SV_Target.w = _3292;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3292;
}


