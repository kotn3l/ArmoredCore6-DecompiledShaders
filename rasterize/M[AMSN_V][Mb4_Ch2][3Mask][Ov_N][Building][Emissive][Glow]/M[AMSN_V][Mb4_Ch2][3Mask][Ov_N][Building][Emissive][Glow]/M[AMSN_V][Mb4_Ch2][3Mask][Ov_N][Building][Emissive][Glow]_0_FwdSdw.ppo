#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1801;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _255 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _256 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _257 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _261 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _262 = _261 * _255;
    float _263 = _261 * _256;
    float _264 = _261 * _257;
    float _268 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = _268 * NORMAL.x;
    float _270 = _268 * NORMAL.y;
    float _271 = _268 * NORMAL.z;
    float _275 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = _275 * TANGENT.x;
    float _277 = _275 * TANGENT.y;
    float _278 = _275 * TANGENT.z;
    float _282 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _283 = _282 * TANGENT_2.x;
    float _284 = _282 * TANGENT_2.y;
    float _285 = _282 * TANGENT_2.z;
    float _290;
    float _291;
    float _292;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _290 = (-0.0) - _269;
        _291 = (-0.0) - _270;
        _292 = (-0.0) - _271;
    }
    else
    {
        _290 = _269;
        _291 = _270;
        _292 = _271;
    }
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = 1.0 - ((1.0 - _312.z) * 1.39999997615814208984375);
    float _4415 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _327 = 1.0 - ((1.0 - _312.x) * 1.39999997615814208984375);
    float _4426 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _330 = 1.0 - ((1.0 - _312.y) * 1.39999997615814208984375);
    float _4437 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _333 = (_328 + _325) + _331;
    float _340 = (_333 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _341 = (_333 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _342 = (_333 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _367 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _376 = 1.0 - ((1.0 - _367.x) * 1.39999997615814208984375);
    float _4448 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _387 = (_377 * ((cbMtdParam._m0[9u].x - _340) + ((1.0 - cbMtdParam._m0[9u].x) * _333))) + _340;
    float _388 = (_377 * ((cbMtdParam._m0[9u].y - _341) + ((1.0 - cbMtdParam._m0[9u].y) * _333))) + _341;
    float _389 = (_377 * ((cbMtdParam._m0[9u].z - _342) + ((1.0 - cbMtdParam._m0[9u].z) * _333))) + _342;
    float _402 = 1.0 - ((1.0 - _367.y) * 1.39999997615814208984375);
    float _4459 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _413 = (((cbMtdParam._m0[17u].x - _387) + ((1.0 - cbMtdParam._m0[17u].x) * _333)) * _403) + _387;
    float _414 = (((cbMtdParam._m0[17u].y - _388) + ((1.0 - cbMtdParam._m0[17u].y) * _333)) * _403) + _388;
    float _415 = (((cbMtdParam._m0[17u].z - _389) + ((1.0 - cbMtdParam._m0[17u].z) * _333)) * _403) + _389;
    float _429 = 1.0 - ((1.0 - _367.z) * 1.39999997615814208984375);
    float _4470 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _461 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _475 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _461) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4481 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = 1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)));
    float _485 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _461) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4492 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = 1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)));
    vec4 _505 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _510 = cbMtdParam._m0[10u].x * _487;
    float _512 = cbMtdParam._m0[10u].y * _487;
    float _514 = cbMtdParam._m0[10u].z * _487;
    float _531 = ((_507 * (cbMtdParam._m0[16u].x - _510)) * _477) + (_510 * _507);
    float _532 = ((_508 * (cbMtdParam._m0[16u].y - _512)) * _477) + (_512 * _508);
    float _533 = ((_509 * (cbMtdParam._m0[16u].z - _514)) * _477) + (_514 * _509);
    float _556 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _560 = (_556 * ((TEXCOORD_7.x - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _561 = (_556 * ((TEXCOORD_7.y - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _562 = (_556 * ((TEXCOORD_7.z - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4503 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4514 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4525 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _571 = (1.0 - cbMtdParam._m0[25u].x) + _328;
    float _574 = _571 * (1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))));
    float _575 = _571 * (1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))));
    float _576 = ((_328 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))));
    float _586 = _487 + _477;
    float _587 = _586 + _574;
    float _588 = _586 + _575;
    float _589 = _586 + _576;
    float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _594 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
    float _595 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
    vec4 _613 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _618 = _613.w;
    float _619 = _613.x * cbMtdParam._m0[12u].x;
    float _620 = _613.y * cbMtdParam._m0[12u].y;
    float _621 = _613.z * cbMtdParam._m0[12u].z;
    vec4 _639 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _653 = (((_639.x * cbMtdParam._m0[13u].x) - _619) * _328) + _619;
    float _654 = (((_639.y * cbMtdParam._m0[13u].y) - _620) * _328) + _620;
    float _655 = (((_639.z * cbMtdParam._m0[13u].z) - _621) * _328) + _621;
    vec4 _674 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _688 = (((_674.x * cbMtdParam._m0[14u].x) - _653) * _331) + _653;
    float _689 = (((_674.y * cbMtdParam._m0[14u].y) - _654) * _331) + _654;
    float _690 = (((_674.z * cbMtdParam._m0[14u].z) - _655) * _331) + _655;
    vec4 _707 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _721 = (((_707.x * cbMtdParam._m0[15u].x) - _688) * _325) + _688;
    float _722 = (((_707.y * cbMtdParam._m0[15u].y) - _689) * _325) + _689;
    float _723 = (((_707.z * cbMtdParam._m0[15u].z) - _690) * _325) + _690;
    float _743 = ((_721 - (_721 * _593)) + (((_593 * 4.55000019073486328125) * ((_574 * ((cbMtdParam._m0[11u].x * _507) - _531)) + _531)) * _721)) * ((((cbMtdParam._m0[18u].x - _413) + ((1.0 - cbMtdParam._m0[18u].x) * _333)) * _430) + _413);
    float _744 = ((_722 - (_722 * _594)) + (((_594 * 4.55000019073486328125) * ((_575 * ((cbMtdParam._m0[11u].y * _508) - _532)) + _532)) * _722)) * ((((cbMtdParam._m0[18u].y - _414) + ((1.0 - cbMtdParam._m0[18u].y) * _333)) * _430) + _414);
    float _745 = ((_723 - (_595 * _723)) + (((_595 * 4.55000019073486328125) * ((_576 * ((cbMtdParam._m0[11u].z * _509) - _533)) + _533)) * _723)) * ((((cbMtdParam._m0[18u].z - _415) + ((1.0 - cbMtdParam._m0[18u].z) * _333)) * _430) + _415);
    float _756 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _593) + cbMtdParam._m0[25u].w;
    float _759 = ((cbMtdParam._m0[20u].x - _756) * _328) + _756;
    float _762 = ((cbMtdParam._m0[20u].y - _759) * _331) + _759;
    float _765 = ((cbMtdParam._m0[20u].z - _762) * _325) + _762;
    vec4 _777 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _781 = _777.z;
    float _785 = (_777.x * 2.0) + (-1.0);
    float _787 = (_777.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_785, _787), vec2(_785, _787));
    float _4566 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))));
    float _796 = fma(_793, _290, fma(_787, _283, _785 * _262));
    float _799 = fma(_793, _291, fma(_787, _284, _785 * _263));
    float _802 = fma(_793, _292, fma(_787, _285, _785 * _264));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    vec4 _822 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _828 = (_822.x * 2.0) + (-1.0);
    float _829 = (_822.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _4577 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _835 = sqrt(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))));
    float _838 = fma(_835, _290, fma(_829, _283, _828 * _262));
    float _841 = fma(_835, _291, fma(_829, _284, _828 * _263));
    float _844 = fma(_835, _292, fma(_829, _285, _828 * _264));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    float _849 = _848 * _838;
    float _850 = _848 * _841;
    float _851 = _848 * _844;
    float _854 = fma(_851, _245, fma(_850, _244, _849 * _243));
    float _857 = fma(_851, _278, fma(_850, _277, _849 * _276));
    float _860 = fma(_851, _292, fma(_850, _291, _849 * _290));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    vec4 _878 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _4588 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _891 = sqrt(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))));
    float _894 = fma(_891, _290, fma(_885, _283, _884 * _262));
    float _897 = fma(_891, _291, fma(_885, _284, _884 * _263));
    float _900 = fma(_891, _292, fma(_885, _285, _884 * _264));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _910 = fma(_907, _245, fma(_906, _244, _905 * _243));
    float _913 = fma(_907, _278, fma(_906, _277, _905 * _276));
    float _916 = fma(_907, _292, fma(_906, _291, _905 * _290));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    vec4 _933 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _939 = (_933.x * 2.0) + (-1.0);
    float _940 = (_933.y * 2.0) + (-1.0);
    float _941 = dot(vec2(_939, _940), vec2(_939, _940));
    float _4599 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _946 = sqrt(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))));
    float _949 = fma(_946, _290, fma(_940, _283, _939 * _262));
    float _952 = fma(_946, _291, fma(_940, _284, _939 * _263));
    float _955 = fma(_946, _292, fma(_940, _285, _939 * _264));
    float _959 = inversesqrt(dot(vec3(_949, _952, _955), vec3(_949, _952, _955)));
    float _960 = _959 * _949;
    float _961 = _959 * _952;
    float _962 = _959 * _955;
    float _965 = fma(_962, _245, fma(_961, _244, _960 * _243));
    float _968 = fma(_962, _278, fma(_961, _277, _960 * _276));
    float _971 = fma(_962, _292, fma(_961, _291, _960 * _290));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _981 = fma(_809, _245, fma(_808, _244, _807 * _243));
    float _984 = fma(_809, _278, fma(_808, _277, _807 * _276));
    float _987 = fma(_809, _292, fma(_808, _291, _807 * _290));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _1001 = (((_975 * _965) - _992) * _328) + _992;
    float _1002 = (((_975 * _968) - _993) * _328) + _993;
    float _1003 = (((_975 * _971) - _994) * _328) + _994;
    vec4 _1016 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4610 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1029 = sqrt(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))));
    float _1032 = fma(_1029, _290, fma(_1023, _283, _1022 * _262));
    float _1035 = fma(_1029, _291, fma(_1023, _284, _1022 * _263));
    float _1038 = fma(_1029, _292, fma(_1023, _285, _1022 * _264));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _1048 = fma(_1045, _245, fma(_1044, _244, _1043 * _243));
    float _1051 = fma(_1045, _278, fma(_1044, _277, _1043 * _276));
    float _1054 = fma(_1045, _292, fma(_1044, _291, _1043 * _290));
    float _1058 = inversesqrt(dot(vec3(_1048, _1051, _1054), vec3(_1048, _1051, _1054)));
    float _1068 = (((_1058 * _1048) - _1001) * _331) + _1001;
    float _1069 = (((_1058 * _1051) - _1002) * _331) + _1002;
    float _1070 = (((_1058 * _1054) - _1003) * _331) + _1003;
    vec4 _1083 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1089 = (_1083.x * 2.0) + (-1.0);
    float _1090 = (_1083.y * 2.0) + (-1.0);
    float _1091 = dot(vec2(_1089, _1090), vec2(_1089, _1090));
    float _4621 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1096 = sqrt(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))));
    float _1099 = fma(_1096, _290, fma(_1090, _283, _1089 * _262));
    float _1102 = fma(_1096, _291, fma(_1090, _284, _1089 * _263));
    float _1105 = fma(_1096, _292, fma(_1090, _285, _1089 * _264));
    float _1109 = inversesqrt(dot(vec3(_1099, _1102, _1105), vec3(_1099, _1102, _1105)));
    float _1110 = _1109 * _1099;
    float _1111 = _1109 * _1102;
    float _1112 = _1109 * _1105;
    float _1115 = fma(_1112, _245, fma(_1111, _244, _1110 * _243));
    float _1118 = fma(_1112, _278, fma(_1111, _277, _1110 * _276));
    float _1121 = fma(_1112, _292, fma(_1111, _291, _1110 * _290));
    float _1125 = inversesqrt(dot(vec3(_1115, _1118, _1121), vec3(_1115, _1118, _1121)));
    float _1135 = (((_1125 * _1121) - _1070) * _325) + _1070;
    vec4 _1147 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1153 = (_1147.x * 2.0) + (-1.0);
    float _1154 = (_1147.y * 2.0) + (-1.0);
    float _1155 = dot(vec2(_1153, _1154), vec2(_1153, _1154));
    float _4632 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1160 = sqrt(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))));
    float _1163 = fma(_1160, _290, fma(_1154, _283, _1153 * _262));
    float _1166 = fma(_1160, _291, fma(_1154, _284, _1153 * _263));
    float _1169 = fma(_1160, _292, fma(_1154, _285, _1153 * _264));
    float _1173 = inversesqrt(dot(vec3(_1163, _1166, _1169), vec3(_1163, _1166, _1169)));
    float _1174 = _1173 * _1163;
    float _1175 = _1173 * _1166;
    float _1176 = _1173 * _1169;
    float _1179 = fma(_1176, _245, fma(_1175, _244, _1174 * _243));
    float _1182 = fma(_1176, _278, fma(_1175, _277, _1174 * _276));
    float _1185 = fma(_1176, _292, fma(_1175, _291, _1174 * _290));
    float _1189 = inversesqrt(dot(vec3(_1179, _1182, _1185), vec3(_1179, _1182, _1185)));
    vec4 _1227 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1241 = (((((((_910 * _477) * _920) * cbMtdParam._m0[24u].z) + ((((_587 * _571) * _854) * _864) * cbMtdParam._m0[24u].w)) + _1068) + (((_1125 * _1115) - _1068) * _325)) + (((_1179 * _487) * _1189) * cbMtdParam._m0[23u].z)) + (((_1227.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1246 = (((((((_913 * _477) * _920) * cbMtdParam._m0[24u].z) + ((((_588 * _571) * _857) * _864) * cbMtdParam._m0[24u].w)) + _1069) + (((_1125 * _1118) - _1069) * _325)) + (((_1182 * _487) * _1189) * cbMtdParam._m0[23u].z)) + (((_1227.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1249 = fma(_1135, _290, fma(_1246, _276, _1241 * _243));
    float _1252 = fma(_1135, _291, fma(_1246, _277, _1241 * _244));
    float _1255 = fma(_1135, _292, fma(_1246, _278, _1241 * _245));
    float _1259 = inversesqrt(dot(vec3(_1249, _1252, _1255), vec3(_1249, _1252, _1255)));
    float _1260 = _1259 * _1249;
    float _1261 = _1259 * _1252;
    float _1262 = _1259 * _1255;
    float _4643 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1263 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _4654 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _1264 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _4665 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4676 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4687 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4698 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1268 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _1284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1324 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1334 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1324);
    float _1335 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1324);
    float _1336 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1324);
    float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
    float _1341 = _1334 * _1340;
    float _1342 = _1335 * _1340;
    float _1343 = _1336 * _1340;
    float _1349 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1350 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1368 = fma(_1262, cbSceneParam._m0[5u].z, fma(_1261, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1260));
    float _1371 = fma(_1262, cbSceneParam._m0[6u].z, fma(_1261, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1260));
    float _1374 = fma(_1262, cbSceneParam._m0[7u].z, fma(_1261, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1260));
    uint _1387 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1389 = (_1387 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1395 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * cbInstanceData._m0[_1389].x;
    float _1396 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * cbInstanceData._m0[_1389].y;
    float _1397 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * cbInstanceData._m0[_1389].z;
    float _4709 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
    float _1398 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _4720 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
    float _1399 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _4731 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1400 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _1401 = 1.0 - _1268;
    float _1402 = _1398 * _1401;
    float _1403 = _1399 * _1401;
    float _1404 = _1400 * _1401;
    float _1409 = (_1398 + (-0.039999999105930328369140625)) * _1268;
    float _1410 = (_1399 + (-0.039999999105930328369140625)) * _1268;
    float _1411 = (_1400 + (-0.039999999105930328369140625)) * _1268;
    float _1412 = _1409 + 0.039999999105930328369140625;
    float _1414 = _1410 + 0.039999999105930328369140625;
    float _1415 = _1411 + 0.039999999105930328369140625;
    vec4 _1424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1349, cbSceneParam._m0[86u].y * _1350));
    float _1427 = _1424.x * TEXCOORD_7.w;
    float _1428 = dot(vec3(_1260, _1261, _1262), vec3(_1341, _1342, _1343));
    float _1431 = _1428 * 2.0;
    float _1435 = (_1431 * _1260) - _1341;
    float _1436 = (_1431 * _1261) - _1342;
    float _1437 = (_1431 * _1262) - _1343;
    float _1441 = abs(dot(vec3(_1341, _1342, _1343), vec3(_1260, _1261, _1262)));
    float _4742 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    float _1443 = sqrt(_1264);
    float _1456 = exp2((_1443 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1443 * 3.0));
    float _1462 = (1.0 - _1456) * ((_1443 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1463 = _1456 * _1443;
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1499 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1800;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1525 = fma(_1499, cbModelParam._m0[26u].z, fma(_1495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1491));
        float _1529 = fma(_1499, cbModelParam._m0[27u].z, fma(_1495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1491));
        float _1533 = fma(_1499, cbModelParam._m0[28u].z, fma(_1495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1491));
        float _1558 = _1491 + _1260;
        float _1559 = _1495 + _1261;
        float _1560 = _1499 + _1262;
        float _1570 = fma(_1560, cbModelParam._m0[26u].z, fma(_1559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1558)) - _1525;
        float _1571 = fma(_1560, cbModelParam._m0[27u].z, fma(_1559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1558)) - _1529;
        float _1572 = fma(_1560, cbModelParam._m0[28u].z, fma(_1559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1558)) - _1533;
        float _1576 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
        float _1589 = ((_1576 * _1570) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1525 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1576 * _1571) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1529 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1576 * _1572) / cbModelParam._m0[34u].z) + ((((((_1533 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        float _1628 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1594.x + (-0.5));
        float _1630 = _1628 * (_1594.y + (-0.5));
        float _1631 = _1628 * (_1594.z + (-0.5));
        float _1638 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1601.x + (-0.5));
        float _1640 = _1638 * (_1601.y + (-0.5));
        float _1641 = _1638 * (_1601.z + (-0.5));
        float _1648 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1608.x + (-0.5));
        float _1650 = _1648 * (_1608.y + (-0.5));
        float _1651 = _1648 * (_1608.z + (-0.5));
        float _1658 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1615.x + (-0.5));
        float _1660 = _1658 * (_1615.y + (-0.5));
        float _1661 = _1658 * (_1615.z + (-0.5));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = _1629 * 0.5;
        float _1666 = _1639 * 0.5;
        float _1667 = _1649 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1682 = (dot(vec3(_1260, _1261, _1262), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4768 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1692 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4779 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4790 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_1694 + 1.0))) + _1699) * _1662;
        float _1709 = _1630 * 0.5;
        float _1710 = _1640 * 0.5;
        float _1711 = _1650 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_1260, _1261, _1262), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4801 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4812 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4823 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_1736 + 1.0))) + _1741) * _1663;
        float _1751 = _1631 * 0.5;
        float _1752 = _1641 * 0.5;
        float _1753 = _1651 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_1260, _1261, _1262), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4834 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4845 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4856 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_1778 + 1.0))) + _1783) * _1664;
        _1800 = _1631;
        _1802 = _1630;
        _1803 = _1629;
        _1804 = _1641;
        _1805 = _1640;
        _1806 = _1639;
        _1807 = _1651;
        _1808 = _1650;
        _1809 = _1649;
        _1810 = _1664;
        _1811 = _1663;
        _1812 = _1662;
        _1813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
    }
    else
    {
        _1800 = _1801;
        _1802 = _1801;
        _1803 = _1801;
        _1804 = _1801;
        _1805 = _1801;
        _1806 = _1801;
        _1807 = _1801;
        _1808 = _1801;
        _1809 = _1801;
        _1810 = _1801;
        _1811 = _1801;
        _1812 = _1801;
        _1813 = 0.0;
        _1814 = 0.0;
        _1815 = 0.0;
    }
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    float _2119;
    float _2120;
    float _2121;
    float _2122;
    float _2123;
    float _2124;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1841 = fma(_1499, cbModelParam._m0[30u].z, fma(_1495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491));
        float _1845 = fma(_1499, cbModelParam._m0[31u].z, fma(_1495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491));
        float _1849 = fma(_1499, cbModelParam._m0[32u].z, fma(_1495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491));
        float _1872 = _1491 + _1260;
        float _1873 = _1495 + _1261;
        float _1874 = _1499 + _1262;
        float _1884 = fma(_1874, cbModelParam._m0[30u].z, fma(_1873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1872)) - _1841;
        float _1885 = fma(_1874, cbModelParam._m0[31u].z, fma(_1873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1872)) - _1845;
        float _1886 = fma(_1874, cbModelParam._m0[32u].z, fma(_1873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1872)) - _1849;
        float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
        float _1903 = ((_1890 * _1884) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1841 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1904 = ((_1890 * _1885) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1845 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1905 = ((_1890 * _1886) / cbModelParam._m0[35u].z) + ((((((_1849 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1907 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1903, _1904, _1905), 0.0);
        vec4 _1914 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1903, _1904, _1905), 0.0);
        vec4 _1921 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1903, _1904, _1905), 0.0);
        vec4 _1928 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1903, _1904, _1905), 0.0);
        float _1940 = exp2((_1907.w + (-0.5)) * 20.0) * 2.0;
        float _1941 = _1940 * (_1907.x + (-0.5));
        float _1942 = _1940 * (_1907.y + (-0.5));
        float _1943 = _1940 * (_1907.z + (-0.5));
        float _1950 = exp2((_1914.w + (-0.5)) * 20.0) * 2.0;
        float _1951 = _1950 * (_1914.x + (-0.5));
        float _1952 = _1950 * (_1914.y + (-0.5));
        float _1953 = _1950 * (_1914.z + (-0.5));
        float _1960 = exp2((_1921.w + (-0.5)) * 20.0) * 2.0;
        float _1961 = _1960 * (_1921.x + (-0.5));
        float _1962 = _1960 * (_1921.y + (-0.5));
        float _1963 = _1960 * (_1921.z + (-0.5));
        float _1970 = exp2((_1928.w + (-0.5)) * 20.0) * 2.0;
        float _1971 = _1970 * (_1928.x + (-0.5));
        float _1972 = _1970 * (_1928.y + (-0.5));
        float _1973 = _1970 * (_1928.z + (-0.5));
        float _1974 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1975 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1976 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1977 = _1941 * 0.5;
        float _1978 = _1951 * 0.5;
        float _1979 = _1961 * 0.5;
        float _1980 = dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979));
        float _1985 = (_1980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1980);
        float _1993 = (dot(vec3(_1260, _1261, _1262), vec3(_1985 * _1977, _1985 * _1978, _1985 * _1979)) + 1.0) * 0.5;
        float _4897 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2002 = sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979)) / (_1974 + 9.9999997473787516355514526367188e-06);
        float _4908 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2004 = _2003 * 2.0;
        float _2008 = (1.0 - _2003) / (_2003 + 1.0);
        float _4919 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2018 = ((((1.0 - _2009) * (_2004 + 2.0)) * exp2(log2(isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2004 + 1.0))) + _2009) * _1974;
        float _2019 = _1942 * 0.5;
        float _2020 = _1952 * 0.5;
        float _2021 = _1962 * 0.5;
        float _2022 = dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021));
        float _2027 = (_2022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2022);
        float _2035 = (dot(vec3(_1260, _1261, _1262), vec3(_2027 * _2019, _2027 * _2020, _2027 * _2021)) + 1.0) * 0.5;
        float _4930 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2044 = sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021)) / (_1975 + 9.9999997473787516355514526367188e-06);
        float _4941 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
        float _2046 = _2045 * 2.0;
        float _2050 = (1.0 - _2045) / (_2045 + 1.0);
        float _4952 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
        float _2060 = ((((1.0 - _2051) * (_2046 + 2.0)) * exp2(log2(isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2046 + 1.0))) + _2051) * _1975;
        float _2061 = _1943 * 0.5;
        float _2062 = _1953 * 0.5;
        float _2063 = _1963 * 0.5;
        float _2064 = dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063));
        float _2069 = (_2064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2064);
        float _2077 = (dot(vec3(_1260, _1261, _1262), vec3(_2069 * _2061, _2069 * _2062, _2069 * _2063)) + 1.0) * 0.5;
        float _4963 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2086 = sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063)) / (_1976 + 9.9999997473787516355514526367188e-06);
        float _4974 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _2088 = _2087 * 2.0;
        float _2092 = (1.0 - _2087) / (_2087 + 1.0);
        float _4985 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _2102 = ((((1.0 - _2093) * (_2088 + 2.0)) * exp2(log2(isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2088 + 1.0))) + _2093) * _1976;
        _2110 = _1943;
        _2111 = _1942;
        _2112 = _1941;
        _2113 = _1953;
        _2114 = _1952;
        _2115 = _1951;
        _2116 = _1963;
        _2117 = _1962;
        _2118 = _1961;
        _2119 = _1976;
        _2120 = _1975;
        _2121 = _1974;
        _2122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)));
        _2123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)));
        _2124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)));
    }
    else
    {
        _2110 = _1801;
        _2111 = _1801;
        _2112 = _1801;
        _2113 = _1801;
        _2114 = _1801;
        _2115 = _1801;
        _2116 = _1801;
        _2117 = _1801;
        _2118 = _1801;
        _2119 = _1801;
        _2120 = _1801;
        _2121 = _1801;
        _2122 = 0.0;
        _2123 = 0.0;
        _2124 = 0.0;
    }
    float _2134 = (cbModelParam._m0[1u].x * (_2122 - _1813)) + _1813;
    float _2135 = (cbModelParam._m0[1u].x * (_2123 - _1814)) + _1814;
    float _2136 = (cbModelParam._m0[1u].x * (_2124 - _1815)) + _1815;
    float _2157 = fma(_2136, cbSceneParam._m0[89u].z, fma(_2135, cbSceneParam._m0[89u].y, _2134 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2136, cbSceneParam._m0[90u].z, fma(_2135, cbSceneParam._m0[90u].y, _2134 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2136, cbSceneParam._m0[91u].z, fma(_2135, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2134));
    float _2178 = _1435 * 0.5;
    float _2179 = _1436 * 0.5;
    float _2180 = _1437 * 0.5;
    float _2181 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_2112, _2115, _2118, _2121));
    float _2184 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_2111, _2114, _2117, _2120));
    float _2187 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_2110, _2113, _2116, _2119));
    float _2221;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2194 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_1800, _1804, _1807, _1810));
        float _2198 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_1802, _1805, _1808, _1811));
        float _2202 = dot(vec4(_2178, _2179, _2180, 1.0), vec4(_1803, _1806, _1809, _1812));
        float _2209 = dot(vec4(cbModelParam._m0[39u]), vec4(_2178, _2179, _2180, 1.0));
        _2221 = dot(vec3(isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0)), isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0)), isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2209) ? 0.0 : (isnan(0.0) ? _2209 : max(0.0, _2209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2221 = 1.0;
    }
    float _2232;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2223 = dot(vec4(cbModelParam._m0[40u]), vec4(_2178, _2179, _2180, 1.0));
        _2232 = dot(vec3(isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)), isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0)), isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2223) ? 0.0 : (isnan(0.0) ? _2223 : max(0.0, _2223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2232 = 1.0;
    }
    float _2236 = (_2232 * cbModelParam._m0[1u].x) + (_2221 * (1.0 - cbModelParam._m0[1u].x));
    float _2246 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1264);
    float _2247 = isnan(_2246) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2246 : min(cbModelParam._m0[25u].z, _2246));
    float _2327;
    float _2329;
    float _2331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2294 = fma(_1499, cbModelParam._m0[13u].z, fma(_1495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1491)) + cbModelParam._m0[13u].w;
        float _2298 = fma(_1499, cbModelParam._m0[14u].z, fma(_1495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1491)) + cbModelParam._m0[14u].w;
        float _2302 = fma(_1499, cbModelParam._m0[15u].z, fma(_1495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1491)) + cbModelParam._m0[15u].w;
        float _2305 = fma(_1437, cbModelParam._m0[13u].z, fma(_1436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1435));
        float _2308 = fma(_1437, cbModelParam._m0[14u].z, fma(_1436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1435));
        float _2311 = fma(_1437, cbModelParam._m0[15u].z, fma(_1436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1435));
        float _2339;
        if (_2305 > 0.0)
        {
            _2339 = abs((1.0 - _2294) / _2305);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2305 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2294 + 1.0) / _2305);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2339 = frontier_phi_16_14_ladder;
        }
        float _2511;
        if (_2308 > 0.0)
        {
            _2511 = abs((1.0 - _2298) / _2308);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2308 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2298 + 1.0) / _2308);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2511 = frontier_phi_25_21_ladder;
        }
        float _2806;
        if (_2311 > 0.0)
        {
            _2806 = abs((1.0 - _2302) / _2311);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2311 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2302 + 1.0) / _2311);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2806 = frontier_phi_37_32_ladder;
        }
        float _2808 = isnan(_2511) ? _2339 : (isnan(_2339) ? _2511 : min(_2339, _2511));
        float _2809 = isnan(_2806) ? _2808 : (isnan(_2808) ? _2806 : min(_2808, _2806));
        float _2813 = (_2809 * _2305) + _2294;
        float _2814 = (_2809 * _2308) + _2298;
        float _2815 = (_2809 * _2311) + _2302;
        float _2816 = _2809 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2816;
        float _2820 = _2816 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 > _2820) || ((_2814 < _2818) || ((_2813 < _2818) || (_2813 > _2820))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2815, cbModelParam._m0[9u].z, fma(_2814, cbModelParam._m0[9u].y, _2813 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2815, cbModelParam._m0[10u].z, fma(_2814, cbModelParam._m0[10u].y, _2813 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2815, cbModelParam._m0[11u].z, fma(_2814, cbModelParam._m0[11u].y, _2813 * cbModelParam._m0[11u].x))), _2247);
            frontier_phi_15_37_ladder = _2960.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2960.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2960.z * cbModelParam._m0[1u].y;
        }
        _2327 = frontier_phi_15_37_ladder_1;
        _2329 = frontier_phi_15_37_ladder;
        _2331 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1435, _1436, _1437), _2247);
        _2327 = _2315.x * cbModelParam._m0[1u].y;
        _2329 = _2315.y * cbModelParam._m0[1u].y;
        _2331 = _2315.z * cbModelParam._m0[1u].y;
    }
    float _2335 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1264);
    float _2336 = isnan(_2335) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2335 : min(cbModelParam._m0[25u].w, _2335));
    float _2426;
    float _2428;
    float _2430;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2390 = fma(_1499, cbModelParam._m0[21u].z, fma(_1495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1491)) + cbModelParam._m0[21u].w;
        float _2394 = fma(_1499, cbModelParam._m0[22u].z, fma(_1495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1491)) + cbModelParam._m0[22u].w;
        float _2398 = fma(_1499, cbModelParam._m0[23u].z, fma(_1495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1491)) + cbModelParam._m0[23u].w;
        float _2401 = fma(_1437, cbModelParam._m0[21u].z, fma(_1436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1435));
        float _2404 = fma(_1437, cbModelParam._m0[22u].z, fma(_1436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1435));
        float _2407 = fma(_1437, cbModelParam._m0[23u].z, fma(_1436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1435));
        float _2516;
        if (_2401 > 0.0)
        {
            _2516 = abs((1.0 - _2390) / _2401);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2401 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2390 + 1.0) / _2401);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2516 = frontier_phi_27_23_ladder;
        }
        float _2833;
        if (_2404 > 0.0)
        {
            _2833 = abs((1.0 - _2394) / _2404);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2404 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2394 + 1.0) / _2404);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2833 = frontier_phi_39_34_ladder;
        }
        float _3171;
        if (_2407 > 0.0)
        {
            _3171 = abs((1.0 - _2398) / _2407);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2407 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2398 + 1.0) / _2407);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3171 = frontier_phi_49_46_ladder;
        }
        float _3173 = isnan(_2833) ? _2516 : (isnan(_2516) ? _2833 : min(_2516, _2833));
        float _3174 = isnan(_3171) ? _3173 : (isnan(_3173) ? _3171 : min(_3173, _3171));
        float _3178 = (_3174 * _2401) + _2390;
        float _3179 = (_3174 * _2404) + _2394;
        float _3180 = (_3174 * _2407) + _2398;
        float _3181 = _3174 * 9.9999997473787516355514526367188e-05;
        float _3182 = (-1.0) - _3181;
        float _3184 = _3181 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_3180 > _3184) || ((_3180 < _3182) || ((_3179 > _3184) || ((_3179 < _3182) || ((_3178 < _3182) || (_3178 > _3184))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3302 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3180, cbModelParam._m0[17u].z, fma(_3179, cbModelParam._m0[17u].y, _3178 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3180, cbModelParam._m0[18u].z, fma(_3179, cbModelParam._m0[18u].y, _3178 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3180, cbModelParam._m0[19u].z, fma(_3179, cbModelParam._m0[19u].y, _3178 * cbModelParam._m0[19u].x))), _2336);
            frontier_phi_24_49_ladder = _3302.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _3302.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _3302.x * cbModelParam._m0[1u].z;
        }
        _2426 = frontier_phi_24_49_ladder_2;
        _2428 = frontier_phi_24_49_ladder_1;
        _2430 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1435, _1436, _1437), _2336);
        _2426 = _2410.x * cbModelParam._m0[1u].z;
        _2428 = _2410.y * cbModelParam._m0[1u].z;
        _2430 = _2410.z * cbModelParam._m0[1u].z;
    }
    float _2443 = (((_1462 * _1412) + _1463) * _1427) * ((cbModelParam._m0[1u].w * (_2426 - _2327)) + _2327);
    float _2445 = (((_1462 * _1414) + _1463) * _1427) * ((cbModelParam._m0[1u].w * (_2428 - _2329)) + _2329);
    float _2447 = (((_1462 * _1415) + _1463) * _1427) * ((cbModelParam._m0[1u].w * (_2430 - _2331)) + _2331);
    float _2450 = fma(_2447, cbSceneParam._m0[89u].z, fma(_2445, cbSceneParam._m0[89u].y, _2443 * cbSceneParam._m0[89u].x));
    float _2453 = fma(_2447, cbSceneParam._m0[90u].z, fma(_2445, cbSceneParam._m0[90u].y, _2443 * cbSceneParam._m0[90u].x));
    float _2456 = fma(_2447, cbSceneParam._m0[91u].z, fma(_2445, cbSceneParam._m0[91u].y, _2443 * cbSceneParam._m0[91u].x));
    float _2490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2494 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2503 = _2490 / _2502;
    float _2504 = _2494 / _2502;
    float _2505 = _2498 / _2502;
    float _2652;
    float _2653;
    float _2654;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2532 = ((uint(_2505 > cbSceneParam._m0[59u].y) + uint(_2505 > cbSceneParam._m0[59u].x)) + uint(_2505 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2533 = _2532 + 43u;
        uint _2541 = _2532 + 44u;
        uint _2549 = _2532 + 45u;
        uint _2557 = _2532 + 46u;
        float _2568 = fma(_2502, cbSceneParam._m0[_2533].w, fma(_2498, cbSceneParam._m0[_2533].z, fma(_2494, cbSceneParam._m0[_2533].y, _2490 * cbSceneParam._m0[_2533].x)));
        float _2572 = fma(_2502, cbSceneParam._m0[_2541].w, fma(_2498, cbSceneParam._m0[_2541].z, fma(_2494, cbSceneParam._m0[_2541].y, _2490 * cbSceneParam._m0[_2541].x)));
        float _2580 = fma(_2502, cbSceneParam._m0[_2557].w, fma(_2498, cbSceneParam._m0[_2557].z, fma(_2494, cbSceneParam._m0[_2557].y, _2490 * cbSceneParam._m0[_2557].x)));
        float _2585 = cbSceneParam._m0[33u].z * _2580;
        float _2587 = cbSceneParam._m0[33u].w * _2580;
        float _2590 = fma(_2502, cbSceneParam._m0[_2549].w, fma(_2498, cbSceneParam._m0[_2549].z, fma(_2494, cbSceneParam._m0[_2549].y, _2490 * cbSceneParam._m0[_2549].x))) / _2580;
        float _2638 = (cbSceneParam._m0[33u].x - sqrt(((_2504 * _2504) + (_2503 * _2503)) + (_2505 * _2505))) * cbSceneParam._m0[33u].y;
        float _5111 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2645 = (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2585 + _2568) / _2580, (_2587 + _2572) / _2580), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2587 + _2568) / _2580, (_2572 - _2585) / _2580), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2568 - _2585) / _2580, (_2572 - _2587) / _2580), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2568 - _2587) / _2580, (_2585 + _2572) / _2580), _2590), 0.0)).x), vec4(0.25)));
        _2652 = 1.0 - (_2645 * cbSceneParam._m0[34u].x);
        _2653 = 1.0 - (_2645 * cbSceneParam._m0[34u].y);
        _2654 = 1.0 - (_2645 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2652 = 1.0;
        _2653 = 1.0;
        _2654 = 1.0;
    }
    float _2718;
    float _2720;
    float _2722;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2706 = fma(_2502, cbSceneParam._m0[63u].w, fma(_2498, cbSceneParam._m0[63u].z, fma(_2494, cbSceneParam._m0[63u].y, _2490 * cbSceneParam._m0[63u].x)));
        float _2707 = fma(_2502, cbSceneParam._m0[60u].w, fma(_2498, cbSceneParam._m0[60u].z, fma(_2494, cbSceneParam._m0[60u].y, _2490 * cbSceneParam._m0[60u].x))) / _2706;
        float _2708 = fma(_2502, cbSceneParam._m0[61u].w, fma(_2498, cbSceneParam._m0[61u].z, fma(_2494, cbSceneParam._m0[61u].y, _2490 * cbSceneParam._m0[61u].x))) / _2706;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2707 >= cbSceneParam._m0[64u].x) && (_2708 >= cbSceneParam._m0[64u].y)) && (_2707 <= cbSceneParam._m0[64u].z)) && (_2708 <= cbSceneParam._m0[64u].w))
        {
            float _2846 = fma(_2502, cbSceneParam._m0[62u].w, fma(_2498, cbSceneParam._m0[62u].z, fma(_2494, cbSceneParam._m0[62u].y, _2490 * cbSceneParam._m0[62u].x))) / _2706;
            float _2850 = isnan(cbSceneParam._m0[41u].w) ? _2846 : (isnan(_2846) ? cbSceneParam._m0[41u].w : max(_2846, cbSceneParam._m0[41u].w));
            float _2893 = (cbSceneParam._m0[33u].x - sqrt(((_2504 * _2504) + (_2503 * _2503)) + (_2505 * _2505))) * cbSceneParam._m0[33u].y;
            float _5127 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
            float _2900 = (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2707, cbSceneParam._m0[33u].w + _2708), _2850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2707, _2708 - cbSceneParam._m0[33u].z), _2850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2707 - cbSceneParam._m0[33u].z, _2708 - cbSceneParam._m0[33u].w), _2850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2707 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2708), _2850), 0.0)).x), vec4(0.25)));
            float _2904 = 1.0 - (_2900 * cbSceneParam._m0[34u].x);
            float _2905 = 1.0 - (_2900 * cbSceneParam._m0[34u].y);
            float _2906 = 1.0 - (_2900 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2905) ? _2653 : (isnan(_2653) ? _2905 : min(_2653, _2905));
            frontier_phi_36_35_ladder_1 = isnan(_2906) ? _2654 : (isnan(_2654) ? _2906 : min(_2654, _2906));
            frontier_phi_36_35_ladder_2 = isnan(_2904) ? _2652 : (isnan(_2652) ? _2904 : min(_2652, _2904));
        }
        else
        {
            frontier_phi_36_35_ladder = _2653;
            frontier_phi_36_35_ladder_1 = _2654;
            frontier_phi_36_35_ladder_2 = _2652;
        }
        _2718 = frontier_phi_36_35_ladder_2;
        _2720 = frontier_phi_36_35_ladder;
        _2722 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2718 = _2652;
        _2720 = _2653;
        _2722 = _2654;
    }
    uvec4 _2727 = floatBitsToUint(cbInstanceData._m0[_1387 + 5u]);
    uint _2729 = _2727.x * 14u;
    uint _2730 = _2729 + 13u;
    float _2737 = _1427 + (-1.0);
    float _2742 = (cbLight._m0[_2730].x * _2737) + 1.0;
    float _2743 = (cbLight._m0[_2730].y * _2737) + 1.0;
    float _2744 = (cbLight._m0[_2730].z * _2737) + 1.0;
    float _2745 = (cbLight._m0[_2730].w * _2737) + 1.0;
    uint _2746 = _2729 + 5u;
    float _2752 = isnan(1.0) ? _2743 : (isnan(_2743) ? 1.0 : min(_2743, 1.0));
    uint _2756 = _2729 + 4u;
    float _2765 = isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0));
    uint _2769 = _2729 | 1u;
    float _2780 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_1260, _1261, _1262));
    float _2783 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_1260, _1261, _1262));
    float _5163 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _5174 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2788 = (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0))) * 0.3183098733425140380859375;
    float _2790 = (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * 0.3183098733425140380859375;
    float _2797 = ((cbLight._m0[_2746].x * _2752) * _2790) + (((cbLight._m0[_2756].x * _2718) * _2765) * _2788);
    float _2798 = ((_2752 * cbLight._m0[_2746].y) * _2790) + (((cbLight._m0[_2756].y * _2720) * _2765) * _2788);
    float _2799 = ((_2752 * cbLight._m0[_2746].z) * _2790) + (((cbLight._m0[_2756].z * _2722) * _2765) * _2788);
    uvec4 _2803 = floatBitsToUint(cbLight._m0[_2729 + 12u]);
    bool _2805 = _2803.x == 0u;
    float _2907;
    float _2909;
    float _2911;
    if (_2805)
    {
        _2907 = _2797;
        _2909 = _2798;
        _2911 = _2799;
    }
    else
    {
        uint _2915 = _2729 + 6u;
        float _2931 = (dot(vec3(cbLight._m0[_2729 + 2u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _2932 = _2931 * _2931;
        float _5185 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2933 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
        float _2934 = isnan(1.0) ? _2744 : (isnan(_2744) ? 1.0 : min(_2744, 1.0));
        _2907 = (((cbLight._m0[_2915].x * 0.3183098733425140380859375) * _2933) * _2934) + _2797;
        _2909 = (((cbLight._m0[_2915].y * 0.3183098733425140380859375) * _2933) * _2934) + _2798;
        _2911 = (((cbLight._m0[_2915].z * 0.3183098733425140380859375) * _2933) * _2934) + _2799;
    }
    bool _2914 = _2803.y == 0u;
    float _2969;
    float _2971;
    float _2973;
    if (_2914)
    {
        _2969 = _2907;
        _2971 = _2909;
        _2973 = _2911;
    }
    else
    {
        uint _3142 = _2729 + 7u;
        float _3158 = (dot(vec3(cbLight._m0[_2729 + 3u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _3159 = _3158 * _3158;
        float _5201 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3160 = isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0));
        float _3161 = isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0));
        _2969 = (((cbLight._m0[_3142].x * 0.3183098733425140380859375) * _3160) * _3161) + _2907;
        _2971 = (((cbLight._m0[_3142].y * 0.3183098733425140380859375) * _3160) * _3161) + _2909;
        _2973 = (((cbLight._m0[_3142].z * 0.3183098733425140380859375) * _3160) * _3161) + _2911;
    }
    uint _2976 = _2729 + 8u;
    float _2989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _1264) * 0.949999988079071044921875);
    float _2990 = _2989 * _2989;
    float _2991 = cbLight._m0[_2729].x + _1341;
    float _2992 = cbLight._m0[_2729].y + _1342;
    float _2993 = cbLight._m0[_2729].z + _1343;
    float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
    float _2998 = _2997 * _2991;
    float _2999 = _2997 * _2992;
    float _3000 = _2997 * _2993;
    float _3001 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2729].xyz));
    float _5217 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
    float _3004 = isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0));
    float _5228 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
    float _3005 = isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0));
    float _3006 = dot(vec3(_1260, _1261, _1262), vec3(_2998, _2999, _3000));
    float _5239 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
    float _3009 = isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0));
    float _3010 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2998, _2999, _3000));
    float _5250 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
    float _3014 = _2990 * _2990;
    float _3018 = ((_3009 * _3009) * (_3014 + (-1.0))) + 1.0;
    float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0)))) * 5.0);
    float _3027 = 0.959999978542327880859375 - _1409;
    float _3029 = 0.959999978542327880859375 - _1410;
    float _3030 = 0.959999978542327880859375 - _1411;
    float _3037 = 1.0 - _2990;
    float _3048 = (0.5 / (((_3005 * ((_3004 * _3037) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3037) + _2990) * _3004))) * _3004;
    float _5261 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
    float _3050 = (isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0))) * (_3014 / ((_3018 * _3018) * 3.141590118408203125));
    uint _3064 = _2729 + 9u;
    float _3075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _1264) * 0.949999988079071044921875);
    float _3076 = _3075 * _3075;
    float _3077 = cbLight._m0[_2769].x + _1341;
    float _3078 = cbLight._m0[_2769].y + _1342;
    float _3079 = cbLight._m0[_2769].z + _1343;
    float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
    float _3084 = _3083 * _3077;
    float _3085 = _3083 * _3078;
    float _3086 = _3083 * _3079;
    float _3087 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2769].xyz));
    float _5272 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
    float _3090 = isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0));
    float _3091 = dot(vec3(_1260, _1261, _1262), vec3(_3084, _3085, _3086));
    float _5283 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
    float _3094 = isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0));
    float _3095 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_3084, _3085, _3086));
    float _5294 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
    float _3099 = _3076 * _3076;
    float _3103 = ((_3094 * _3094) * (_3099 + (-1.0))) + 1.0;
    float _3110 = exp2(log2(1.0 - (isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0)))) * 5.0);
    float _3117 = 1.0 - _3076;
    float _3127 = (0.5 / (((_3005 * ((_3090 * _3117) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3117) + _3076) * _3090))) * _3090;
    float _5305 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
    float _3129 = (isnan(1.0) ? _5305 : (isnan(_5305) ? 1.0 : min(_5305, 1.0))) * (_3099 / ((_3103 * _3103) * 3.141590118408203125));
    float _3139 = (((((_3110 * _3027) + _1412) * cbLight._m0[_3064].x) * _3129) * _2752) + ((((cbLight._m0[_2976].x * _2718) * ((_3026 * _3027) + _1412)) * _3050) * _2765);
    float _3140 = (((((_3110 * _3029) + _1414) * cbLight._m0[_3064].y) * _3129) * _2752) + ((((cbLight._m0[_2976].y * _2720) * ((_3026 * _3029) + _1414)) * _3050) * _2765);
    float _3141 = (((((_3110 * _3030) + _1415) * cbLight._m0[_3064].z) * _3129) * _2752) + ((((cbLight._m0[_2976].z * _2722) * ((_3026 * _3030) + _1415)) * _3050) * _2765);
    float _3197;
    float _3199;
    float _3201;
    if (_2805)
    {
        _3197 = _3139;
        _3199 = _3140;
        _3201 = _3141;
    }
    else
    {
        uint _3203 = _2729 + 2u;
        uint _3207 = _2729 + 10u;
        float _3221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3203].w)) * _1264) * 0.949999988079071044921875);
        float _3222 = _3221 * _3221;
        float _3223 = cbLight._m0[_3203].x + _1341;
        float _3224 = cbLight._m0[_3203].y + _1342;
        float _3225 = cbLight._m0[_3203].z + _1343;
        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
        float _3230 = _3229 * _3223;
        float _3231 = _3229 * _3224;
        float _3232 = _3229 * _3225;
        float _3233 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_3203].xyz));
        float _5316 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
        float _3236 = isnan(1.0) ? _5316 : (isnan(_5316) ? 1.0 : min(_5316, 1.0));
        float _3237 = dot(vec3(_1260, _1261, _1262), vec3(_3230, _3231, _3232));
        float _5327 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
        float _3240 = isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0));
        float _3241 = dot(vec3(cbLight._m0[_3203].xyz), vec3(_3230, _3231, _3232));
        float _5338 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        float _3245 = _3222 * _3222;
        float _3249 = ((_3240 * _3240) * (_3245 + (-1.0))) + 1.0;
        float _3256 = exp2(log2(1.0 - (isnan(1.0) ? _5338 : (isnan(_5338) ? 1.0 : min(_5338, 1.0)))) * 5.0);
        float _3263 = 1.0 - _3222;
        float _3273 = (0.5 / (((_3005 * ((_3236 * _3263) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3263) + _3222) * _3236))) * _3236;
        float _5349 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
        float _3275 = (isnan(1.0) ? _5349 : (isnan(_5349) ? 1.0 : min(_5349, 1.0))) * (_3245 / ((_3249 * _3249) * 3.141590118408203125));
        float _3276 = isnan(1.0) ? _2744 : (isnan(_2744) ? 1.0 : min(_2744, 1.0));
        _3197 = (((((_3256 * _3027) + _1412) * cbLight._m0[_3207].x) * _3275) * _3276) + _3139;
        _3199 = (((((_3256 * _3029) + _1414) * cbLight._m0[_3207].y) * _3275) * _3276) + _3140;
        _3201 = (((((_3256 * _3030) + _1415) * cbLight._m0[_3207].z) * _3275) * _3276) + _3141;
    }
    float _3307;
    float _3309;
    float _3311;
    if (_2914)
    {
        _3307 = _3197;
        _3309 = _3199;
        _3311 = _3201;
    }
    else
    {
        uint _3318 = _2729 + 3u;
        uint _3322 = _2729 + 11u;
        float _3336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3318].w)) * _1264) * 0.949999988079071044921875);
        float _3337 = _3336 * _3336;
        float _3338 = cbLight._m0[_3318].x + _1341;
        float _3339 = cbLight._m0[_3318].y + _1342;
        float _3340 = cbLight._m0[_3318].z + _1343;
        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
        float _3345 = _3344 * _3338;
        float _3346 = _3344 * _3339;
        float _3347 = _3344 * _3340;
        float _3348 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_3318].xyz));
        float _5365 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
        float _3351 = isnan(1.0) ? _5365 : (isnan(_5365) ? 1.0 : min(_5365, 1.0));
        float _3352 = dot(vec3(_1260, _1261, _1262), vec3(_3345, _3346, _3347));
        float _5376 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
        float _3355 = isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0));
        float _3356 = dot(vec3(cbLight._m0[_3318].xyz), vec3(_3345, _3346, _3347));
        float _5387 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
        float _3360 = _3337 * _3337;
        float _3364 = ((_3355 * _3355) * (_3360 + (-1.0))) + 1.0;
        float _3371 = exp2(log2(1.0 - (isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0)))) * 5.0);
        float _3378 = 1.0 - _3337;
        float _3388 = (0.5 / (((_3005 * ((_3351 * _3378) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3378) + _3337) * _3351))) * _3351;
        float _5398 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
        float _3390 = (isnan(1.0) ? _5398 : (isnan(_5398) ? 1.0 : min(_5398, 1.0))) * (_3360 / ((_3364 * _3364) * 3.141590118408203125));
        float _3391 = isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0));
        _3307 = (((((_3371 * _3027) + _1412) * cbLight._m0[_3322].x) * _3390) * _3391) + _3197;
        _3309 = (((((_3371 * _3029) + _1414) * cbLight._m0[_3322].y) * _3390) * _3391) + _3199;
        _3311 = (((((_3371 * _3030) + _1415) * cbLight._m0[_3322].z) * _3390) * _3391) + _3201;
    }
    float _3456;
    float _3458;
    float _3460;
    float _3462;
    float _3464;
    float _3466;
    if (_2727.y == 0u)
    {
        uvec4 _3412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3413 = _3412.x;
        uint _3424 = uint((float(_3412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1350) / _3413))) + floor(float(uint(cbSceneParam._m0[85u].x * _1349) / _3413)));
        float _3434 = (log2(_2505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3435 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
        uint _3438 = uint(isnan(14.0) ? _3435 : (isnan(_3435) ? 14.0 : min(_3435, 14.0)));
        uvec4 _3443 = texelFetch(g_lightClusterGridBuffer, int(((_3438 << 2u) + (_3424 << 6u)) >> 2u));
        uint _3444 = _3443.x;
        uint _3445 = _3412.z;
        float _3528;
        float _3530;
        float _3532;
        float _3534;
        float _3536;
        float _3538;
        if (((((1u << ((_3445 >> 4u) & 15u)) + 4294967295u) & _3444) == 0u) || ((_3445 & 240u) == 0u))
        {
            _3528 = 0.0;
            _3530 = 0.0;
            _3532 = 0.0;
            _3534 = 0.0;
            _3536 = 0.0;
            _3538 = 0.0;
        }
        else
        {
            float _3529;
            float _3531;
            float _3533;
            float _3535;
            float _3537;
            float _3539;
            float _3672 = 0.0;
            float _3673 = 0.0;
            float _3674 = 0.0;
            float _3675 = 0.0;
            float _3676 = 0.0;
            float _3677 = 0.0;
            uint _3678 = 0u;
            uint _3687;
            bool _3688;
            for (;;)
            {
                _3687 = texelFetch(g_lightClassification, int((((_3438 << 5u) + (_3424 << 9u)) + (_3678 << 2u)) >> 2u)).x;
                _3688 = _3687 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3688)
                {
                    frontier_phi_68_pred = _3677;
                    frontier_phi_68_pred_1 = _3676;
                    frontier_phi_68_pred_2 = _3675;
                    frontier_phi_68_pred_3 = _3673;
                    frontier_phi_68_pred_4 = _3672;
                    frontier_phi_68_pred_5 = _3674;
                }
                else
                {
                    float _3796;
                    float _3797;
                    float _3798;
                    float _3799;
                    float _3800;
                    float _3801;
                    uint _3802;
                    _3796 = _3672;
                    _3797 = _3673;
                    _3798 = _3674;
                    _3799 = _3675;
                    _3800 = _3676;
                    _3801 = _3677;
                    _3802 = _3687;
                    float _3728;
                    float _3729;
                    float _3730;
                    float _3731;
                    float _3732;
                    float _3733;
                    for (;;)
                    {
                        uint _3806 = uint(findLSB(_3802)) + (_3678 << 5u);
                        uint _3803 = (_3802 + 4294967295u) & _3802;
                        uint _3808 = _3806 * 48u;
                        vec4 _3822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3808)).x, texelFetch(g_PointLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3808 + 3u)).x));
                        uint _3828 = (_3806 * 48u) + 4u;
                        vec4 _3841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3828)).x, texelFetch(g_PointLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3828 + 3u)).x));
                        uint _3847 = (_3806 * 48u) + 8u;
                        vec3 _3858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3847)).x, texelFetch(g_PointLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3847 + 2u)).x));
                        float _3862 = _3822.x - _2503;
                        float _3863 = _3822.y - _2504;
                        float _3864 = _3822.z - _2505;
                        float _3865 = dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864));
                        float _3868 = inversesqrt(_3865);
                        float _3869 = _3868 * _3862;
                        float _3870 = _3868 * _3863;
                        float _3871 = _3868 * _3864;
                        float _3872 = dot(vec3(_1368, _1371, _1374), vec3(_3869, _3870, _3871));
                        float _3877 = 1.0 - (_3865 * _3822.w);
                        float _5424 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                        float _3878 = isnan(1.0) ? _5424 : (isnan(_5424) ? 1.0 : min(_5424, 1.0));
                        float _3879 = sqrt(_3865) * _3841.w;
                        float _3881 = 1.39999997615814208984375 / (_3879 + 1.39999997615814208984375);
                        float _3882 = _3881 * _3881;
                        float _3885 = ((1.0 - _3882) * _3872) + _3882;
                        float _3888 = _3879 * _3879;
                        float _3892 = ((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3878) / ((_3888 * 0.699999988079071044921875) + 1.0);
                        float _3896 = (-0.0) - _2503;
                        float _3897 = (-0.0) - _2504;
                        float _3898 = (-0.0) - _2505;
                        float _3902 = inversesqrt(dot(vec3(_3896, _3897, _3898), vec3(_3896, _3897, _3898)));
                        float _3903 = _3902 * _3896;
                        float _3904 = _3902 * _3897;
                        float _3905 = _3902 * _3898;
                        float _3912 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                        float _3913 = 1.0 - _1443;
                        float _3920 = sqrt(1.0 - ((1.0 - (_3913 * _3913)) * (1.0 - (_3912 * _3912))));
                        float _3921 = _3920 * _3920;
                        float _3922 = _3921 * _3921;
                        float _3923 = _3903 + _3869;
                        float _3924 = _3904 + _3870;
                        float _3925 = _3905 + _3871;
                        float _3929 = inversesqrt(dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925)));
                        float _3933 = dot(vec3(_1368, _1371, _1374), vec3(_3903, _3904, _3905));
                        float _5440 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                        float _3936 = isnan(1.0) ? _5440 : (isnan(_5440) ? 1.0 : min(_5440, 1.0));
                        float _3937 = dot(vec3(_1368, _1371, _1374), vec3(_3929 * _3923, _3929 * _3924, _3929 * _3925));
                        float _5451 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                        float _3940 = isnan(1.0) ? _5451 : (isnan(_5451) ? 1.0 : min(_5451, 1.0));
                        float _3944 = ((_3940 * _3940) * (_3922 + (-1.0))) + 1.0;
                        float _3945 = _3881 * _3921;
                        float _3946 = _3945 * _3945;
                        float _3949 = ((1.0 - _3946) * _3872) + _3946;
                        float _5462 = isnan(0.0) ? _3949 : (isnan(_3949) ? 0.0 : max(_3949, 0.0));
                        float _3950 = isnan(1.0) ? _5462 : (isnan(_5462) ? 1.0 : min(_5462, 1.0));
                        float _3951 = 1.0 - _3921;
                        float _3961 = (0.5 / (((_3950 * ((_3936 * _3951) + _3921)) + 9.9999999392252902907785028219223e-09) + (((_3950 * _3951) + _3921) * _3936))) * _3950;
                        float _5473 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                        float _3972 = (((_3922 * 3.1415927410125732421875) * (isnan(1.0) ? _5473 : (isnan(_5473) ? 1.0 : min(_5473, 1.0)))) / ((_3944 * _3944) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125))) * _3878;
                        _3731 = (_3892 * _3841.x) + _3799;
                        _3732 = (_3892 * _3841.y) + _3800;
                        _3733 = (_3892 * _3841.z) + _3801;
                        _3728 = (_3972 * _3858.x) + _3796;
                        _3729 = (_3972 * _3858.y) + _3797;
                        _3730 = (_3972 * _3858.z) + _3798;
                        if (_3803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3796 = _3728;
                            _3797 = _3729;
                            _3798 = _3730;
                            _3799 = _3731;
                            _3800 = _3732;
                            _3801 = _3733;
                            _3802 = _3803;
                        }
                    }
                    frontier_phi_68_pred = _3733;
                    frontier_phi_68_pred_1 = _3732;
                    frontier_phi_68_pred_2 = _3731;
                    frontier_phi_68_pred_3 = _3729;
                    frontier_phi_68_pred_4 = _3728;
                    frontier_phi_68_pred_5 = _3730;
                }
                _3539 = frontier_phi_68_pred;
                _3537 = frontier_phi_68_pred_1;
                _3535 = frontier_phi_68_pred_2;
                _3531 = frontier_phi_68_pred_3;
                _3529 = frontier_phi_68_pred_4;
                _3533 = frontier_phi_68_pred_5;
                uint _3679 = _3678 + 1u;
                if (_3679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3672 = _3529;
                    _3673 = _3531;
                    _3674 = _3533;
                    _3675 = _3535;
                    _3676 = _3537;
                    _3677 = _3539;
                    _3678 = _3679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3528 = _3529;
            _3530 = _3531;
            _3532 = _3533;
            _3534 = _3535;
            _3536 = _3537;
            _3538 = _3539;
        }
        uvec4 _3542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3543 = _3542.z;
        uint _3545 = (_3543 >> 8u) & 15u;
        float _3640;
        float _3642;
        float _3644;
        float _3646;
        float _3648;
        float _3650;
        if (((4294967295u << _3545) & _3444) == 0u)
        {
            _3640 = _3528;
            _3642 = _3530;
            _3644 = _3532;
            _3646 = _3534;
            _3648 = _3536;
            _3650 = _3538;
        }
        else
        {
            float _3665 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
            float _3666 = _3665 * _2503;
            float _3667 = _3665 * _2504;
            float _3668 = _3665 * _2505;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3545 < ((_3543 >> 12u) & 15u))
            {
                float _3641;
                float _3643;
                float _3645;
                float _3647;
                float _3649;
                float _3651;
                float _3779 = _3528;
                float _3780 = _3530;
                float _3781 = _3532;
                float _3782 = _3534;
                float _3783 = _3536;
                float _3784 = _3538;
                uint _3785 = _3545;
                uint _3794;
                bool _3795;
                for (;;)
                {
                    _3794 = texelFetch(g_lightClassification, int((((_3438 << 5u) + (_3424 << 9u)) + (_3785 << 2u)) >> 2u)).x;
                    _3795 = _3794 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3795)
                    {
                        frontier_phi_74_pred = _3781;
                        frontier_phi_74_pred_1 = _3780;
                        frontier_phi_74_pred_2 = _3779;
                        frontier_phi_74_pred_3 = _3784;
                        frontier_phi_74_pred_4 = _3783;
                        frontier_phi_74_pred_5 = _3782;
                    }
                    else
                    {
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _4270;
                        float _4271;
                        float _4272;
                        float _4273;
                        float _4274;
                        float _4275;
                        float _3990 = _3779;
                        float _3991 = _3780;
                        float _3992 = _3781;
                        float _3993 = _3782;
                        float _3994 = _3783;
                        float _3995 = _3784;
                        uint _3996 = _3794;
                        uint _3997;
                        vec4 _4022;
                        float _4023;
                        vec4 _4038;
                        vec3 _4050;
                        vec4 _4065;
                        vec4 _4080;
                        float _4126;
                        bool _4127;
                        for (;;)
                        {
                            uint _4007 = ((_3785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3996));
                            _3997 = (_3996 + 4294967295u) & _3996;
                            uint _4009 = _4007 * 40u;
                            _4022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4009 + 3u)).x));
                            _4023 = _4022.w;
                            uint _4025 = (_4007 * 40u) + 4u;
                            _4038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 3u)).x));
                            uint _4040 = (_4007 * 40u) + 8u;
                            _4050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 2u)).x));
                            uint _4052 = (_4007 * 40u) + 16u;
                            _4065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 3u)).x));
                            uint _4067 = (_4007 * 40u) + 20u;
                            _4080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 3u)).x));
                            uint _4082 = (_4007 * 40u) + 24u;
                            vec4 _4095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 3u)).x));
                            uint _4101 = (_4007 * 40u) + 28u;
                            vec4 _4114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 3u)).x));
                            _4126 = fma(_2505, _4114.z, fma(_2504, _4114.y, _4114.x * _2503)) + _4114.w;
                            _4127 = !((fma(_2505, _4095.z, fma(_2504, _4095.y, _4095.x * _2503)) + _4095.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_4127)
                            {
                                float _4154 = _4022.x - _2503;
                                float _4155 = _4022.y - _2504;
                                float _4156 = _4022.z - _2505;
                                float _4157 = dot(vec3(_4154, _4155, _4156), vec3(_4154, _4155, _4156));
                                float _4160 = inversesqrt(_4157);
                                float _4161 = _4160 * _4154;
                                float _4162 = _4160 * _4155;
                                float _4163 = _4160 * _4156;
                                float _4167 = 1.0 - (_4157 / (_4023 * _4023));
                                float _5484 = isnan(0.0) ? _4167 : (isnan(_4167) ? 0.0 : max(_4167, 0.0));
                                float _4168 = isnan(1.0) ? _5484 : (isnan(_5484) ? 1.0 : min(_5484, 1.0));
                                float _4172 = sqrt(_4157) * _4038.w;
                                float _4174 = 1.39999997615814208984375 / (_4172 + 1.39999997615814208984375);
                                float _4175 = _4174 * _4174;
                                float _4178 = ((1.0 - _4175) * dot(vec3(_4161, _4162, _4163), vec3(_1368, _1371, _1374))) + _4175;
                                float _4181 = _4172 * _4172;
                                float _4185 = (fma(_2505, _4065.z, fma(_2504, _4065.y, _4065.x * _2503)) + _4065.w) / _4126;
                                float _4186 = (fma(_2505, _4080.z, fma(_2504, _4080.y, _4080.x * _2503)) + _4080.w) / _4126;
                                float _4190 = 1.0 - dot(vec2(_4185, _4186), vec2(_4185, _4186));
                                float _5500 = isnan(0.0) ? _4190 : (isnan(_4190) ? 0.0 : max(_4190, 0.0));
                                float _4191 = isnan(1.0) ? _5500 : (isnan(_5500) ? 1.0 : min(_5500, 1.0));
                                float _4192 = _4191 * (((isnan(0.0) ? _4178 : (isnan(_4178) ? 0.0 : max(_4178, 0.0))) * _4168) / ((_4181 * 0.699999988079071044921875) + 1.0));
                                float _4204 = exp2(log2(1.0 / ((_4181 * 3.5) + 5.0)) * 0.25);
                                float _4205 = 1.0 - _1443;
                                float _4212 = sqrt(1.0 - ((1.0 - (_4205 * _4205)) * (1.0 - (_4204 * _4204))));
                                float _4213 = _4212 * _4212;
                                float _4214 = _4213 * _4213;
                                float _4215 = _4161 - _3666;
                                float _4216 = _4162 - _3667;
                                float _4217 = _4163 - _3668;
                                float _4221 = inversesqrt(dot(vec3(_4215, _4216, _4217), vec3(_4215, _4216, _4217)));
                                float _4225 = dot(vec3(_1368, _1371, _1374), vec3((-0.0) - _3666, (-0.0) - _3667, (-0.0) - _3668));
                                float _5511 = isnan(0.0) ? _4225 : (isnan(_4225) ? 0.0 : max(_4225, 0.0));
                                float _4228 = isnan(1.0) ? _5511 : (isnan(_5511) ? 1.0 : min(_5511, 1.0));
                                float _4229 = dot(vec3(_1368, _1371, _1374), vec3(_4221 * _4215, _4221 * _4216, _4221 * _4217));
                                float _5522 = isnan(0.0) ? _4229 : (isnan(_4229) ? 0.0 : max(_4229, 0.0));
                                float _4232 = isnan(1.0) ? _5522 : (isnan(_5522) ? 1.0 : min(_5522, 1.0));
                                float _4236 = ((_4232 * _4232) * (_4214 + (-1.0))) + 1.0;
                                float _4237 = _4174 * _4213;
                                float _4238 = _4237 * _4237;
                                float _4244 = ((1.0 - _4238) * dot(vec3(_1368, _1371, _1374), vec3(_4161, _4162, _4163))) + _4238;
                                float _5533 = isnan(0.0) ? _4244 : (isnan(_4244) ? 0.0 : max(_4244, 0.0));
                                float _4245 = isnan(1.0) ? _5533 : (isnan(_5533) ? 1.0 : min(_5533, 1.0));
                                float _4246 = 1.0 - _4213;
                                float _4256 = (0.5 / (((_4245 * ((_4228 * _4246) + _4213)) + 9.9999999392252902907785028219223e-09) + (((_4245 * _4246) + _4213) * _4228))) * _4245;
                                float _5544 = isnan(0.0) ? _4256 : (isnan(_4256) ? 0.0 : max(_4256, 0.0));
                                float _4266 = (_4191 * _4168) * (((_4214 * 3.1415927410125732421875) * (isnan(1.0) ? _5544 : (isnan(_5544) ? 1.0 : min(_5544, 1.0)))) / ((_4236 * _4236) * ((_4181 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4266 * _4050.z;
                                frontier_phi_80_pred_1 = _4266 * _4050.y;
                                frontier_phi_80_pred_2 = _4266 * _4050.x;
                                frontier_phi_80_pred_3 = _4192 * _4038.z;
                                frontier_phi_80_pred_4 = _4192 * _4038.y;
                                frontier_phi_80_pred_5 = _4192 * _4038.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4272 = frontier_phi_80_pred;
                            _4271 = frontier_phi_80_pred_1;
                            _4270 = frontier_phi_80_pred_2;
                            _4275 = frontier_phi_80_pred_3;
                            _4274 = frontier_phi_80_pred_4;
                            _4273 = frontier_phi_80_pred_5;
                            _3980 = _4273 + _3993;
                            _3981 = _4274 + _3994;
                            _3982 = _4275 + _3995;
                            _3977 = _4270 + _3990;
                            _3978 = _4271 + _3991;
                            _3979 = _4272 + _3992;
                            if (_3997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3990 = _3977;
                                _3991 = _3978;
                                _3992 = _3979;
                                _3993 = _3980;
                                _3994 = _3981;
                                _3995 = _3982;
                                _3996 = _3997;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3979;
                        frontier_phi_74_pred_1 = _3978;
                        frontier_phi_74_pred_2 = _3977;
                        frontier_phi_74_pred_3 = _3982;
                        frontier_phi_74_pred_4 = _3981;
                        frontier_phi_74_pred_5 = _3980;
                    }
                    _3645 = frontier_phi_74_pred;
                    _3643 = frontier_phi_74_pred_1;
                    _3641 = frontier_phi_74_pred_2;
                    _3651 = frontier_phi_74_pred_3;
                    _3649 = frontier_phi_74_pred_4;
                    _3647 = frontier_phi_74_pred_5;
                    uint _3786 = _3785 + 1u;
                    if (_3786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3779 = _3641;
                        _3780 = _3643;
                        _3781 = _3645;
                        _3782 = _3647;
                        _3783 = _3649;
                        _3784 = _3651;
                        _3785 = _3786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3649;
                frontier_phi_62_63_ladder_1 = _3647;
                frontier_phi_62_63_ladder_2 = _3645;
                frontier_phi_62_63_ladder_3 = _3651;
                frontier_phi_62_63_ladder_4 = _3643;
                frontier_phi_62_63_ladder_5 = _3641;
            }
            else
            {
                frontier_phi_62_63_ladder = _3536;
                frontier_phi_62_63_ladder_1 = _3534;
                frontier_phi_62_63_ladder_2 = _3532;
                frontier_phi_62_63_ladder_3 = _3538;
                frontier_phi_62_63_ladder_4 = _3530;
                frontier_phi_62_63_ladder_5 = _3528;
            }
            _3640 = frontier_phi_62_63_ladder_5;
            _3642 = frontier_phi_62_63_ladder_4;
            _3644 = frontier_phi_62_63_ladder_2;
            _3646 = frontier_phi_62_63_ladder_1;
            _3648 = frontier_phi_62_63_ladder;
            _3650 = frontier_phi_62_63_ladder_3;
        }
        float _3655 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        _3456 = (_3655 * _3646) + _2969;
        _3458 = (_3655 * _3648) + _2971;
        _3460 = (_3655 * _3650) + _2973;
        _3462 = ((_3640 * _1412) * _3655) + _3307;
        _3464 = ((_3642 * _1414) * _3655) + _3309;
        _3466 = ((_3644 * _1415) * _3655) + _3311;
    }
    else
    {
        _3456 = _2969;
        _3458 = _2971;
        _3460 = _2973;
        _3462 = _3307;
        _3464 = _3309;
        _3466 = _3311;
    }
    float _5560 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
    float _5571 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
    float _5582 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
    float _5593 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _3484 = ((isnan(1.0) ? _5560 : (isnan(_5560) ? 1.0 : min(_5560, 1.0))) * (_3456 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1427))) + ((_3462 + ((isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0))) * _2236)) * cbPerFrame._m0[3u].x);
    float _3485 = ((isnan(1.0) ? _5571 : (isnan(_5571) ? 1.0 : min(_5571, 1.0))) * (_3458 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1427))) + ((_3464 + ((isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0))) * _2236)) * cbPerFrame._m0[3u].x);
    float _3486 = ((isnan(1.0) ? _5582 : (isnan(_5582) ? 1.0 : min(_5582, 1.0))) * (_3460 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1427))) + ((_3466 + ((isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0))) * _2236)) * cbPerFrame._m0[3u].x);
    float _3494 = cbInstanceData._m0[_1387 + 6u].w * (isnan(1.0) ? _5593 : (isnan(_5593) ? 1.0 : min(_5593, 1.0)));
    float _3499 = _1349 / cbSceneParam._m0[86u].x;
    float _3500 = _1350 / cbSceneParam._m0[86u].y;
    vec4 _3514 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3499, _3500, (log2((isnan(cbSceneParam._m0[77u].w) ? _1284 : (isnan(_1284) ? cbSceneParam._m0[77u].w : min(_1284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3516 = _3514.x;
    float _3517 = _3514.y;
    float _3518 = _3514.z;
    float _3519 = _3514.w;
    float _3590;
    float _3592;
    float _3594;
    float _3596;
    if (_1284 > cbSceneParam._m0[78u].w)
    {
        float _3553 = isnan(_1284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1284 : min(cbSceneParam._m0[80u].w, _1284));
        float _3554 = _3553 / _1284;
        float _3565 = _3554 * _1334;
        float _3566 = _1335 * _3554;
        float _3567 = (-0.0) - _3566;
        float _3568 = _3554 * _1336;
        float _3570 = (cbSceneParam._m0[77u].w * _3567) / _3553;
        float _3571 = _3570 + cbSceneParam._m0[79u].w;
        float _3572 = cbSceneParam._m0[79u].w - _3566;
        float _3578 = sqrt(((_3565 * _3565) + (_3566 * _3566)) + (_3568 * _3568));
        float _3581 = (1.0 - (cbSceneParam._m0[77u].w / _3553)) * _3578;
        float _3586 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3588 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3741;
        if (abs((_3567 - _3570) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3741 = ((((_3571 > 0.0) ? exp2(_3586 * _3571) : (2.0 - exp2(_3588 * _3571))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3581;
        }
        else
        {
            float _3701 = 1.0 / cbSceneParam._m0[80u].x;
            float _3702 = isnan(_3572) ? _3571 : (isnan(_3571) ? _3572 : max(_3571, _3572));
            float _3703 = isnan(_3572) ? _3571 : (isnan(_3571) ? _3572 : min(_3571, _3572));
            float _3712 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : min(_3702, 0.0));
            float _3713 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : min(_3703, 0.0));
            _3741 = ((abs(_3578 / _3567) * cbSceneParam._m0[80u].y) * ((((_3712 - _3713) * 2.0) - ((exp2(_3586 * (isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0)))) - exp2(_3586 * (isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))))) * _3701)) - ((exp2(_3588 * _3712) - exp2(_3588 * _3713)) * _3701))) + (_3581 * cbSceneParam._m0[80u].z);
        }
        vec4 _3743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3499, _3500, 1.0), 0.0);
        float _3752 = exp2((_3741 * (-1.44269502162933349609375)) * (1.0 - _3743.w));
        float _3753 = log2(_3752);
        float _3769 = log2(_3519);
        _3590 = (exp2(_3769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].x)) * _3743.x) / cbSceneParam._m0[78u].x)) + _3516;
        _3592 = (exp2(_3769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].y)) * _3743.y) / cbSceneParam._m0[78u].y)) + _3517;
        _3594 = (exp2(_3769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].z)) * _3743.z) / cbSceneParam._m0[78u].z)) + _3518;
        _3596 = _3752 * _3519;
    }
    else
    {
        _3590 = _3516;
        _3592 = _3517;
        _3594 = _3518;
        _3596 = _3519;
    }
    float _3608 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3609 = _3608 == 3.0;
    float _3610 = log2(_3596);
    float _3617 = exp2(_3610 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0)));
    float _3618 = exp2(_3610 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0)));
    float _3619 = exp2(_3610 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0)));
    float _3628 = (_3608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3628 * (_3609 ? _3617 : (_3617 + (cbSceneParam._m0[72u].w * _3590)));
    SV_Target.y = _3628 * (_3609 ? _3618 : (_3618 + (cbSceneParam._m0[72u].w * _3592)));
    SV_Target.z = _3628 * (_3609 ? _3619 : (_3619 + (cbSceneParam._m0[72u].w * _3594)));
    SV_Target.w = _3494;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3494;
}


