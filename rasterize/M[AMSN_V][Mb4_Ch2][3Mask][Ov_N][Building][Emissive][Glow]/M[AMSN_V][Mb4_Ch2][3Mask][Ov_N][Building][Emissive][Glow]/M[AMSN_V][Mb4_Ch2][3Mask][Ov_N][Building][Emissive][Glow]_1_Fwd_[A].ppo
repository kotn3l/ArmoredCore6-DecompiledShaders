#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1925;
float _4325;
float _4326;
float _4327;
float _4328;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _253 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _254 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _255 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _261 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _262 = _261 * _253;
    float _263 = _261 * _254;
    float _264 = _261 * _255;
    float _274 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _275 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _276 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _280 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _281 = _280 * _274;
    float _282 = _280 * _275;
    float _283 = _280 * _276;
    float _287 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _288 = _287 * NORMAL.x;
    float _289 = _287 * NORMAL.y;
    float _290 = _287 * NORMAL.z;
    float _294 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _295 = _294 * TANGENT.x;
    float _296 = _294 * TANGENT.y;
    float _297 = _294 * TANGENT.z;
    float _301 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _302 = _301 * TANGENT_2.x;
    float _303 = _301 * TANGENT_2.y;
    float _304 = _301 * TANGENT_2.z;
    float _309;
    float _310;
    float _311;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _309 = (-0.0) - _288;
        _310 = (-0.0) - _289;
        _311 = (-0.0) - _290;
    }
    else
    {
        _309 = _288;
        _310 = _289;
        _311 = _290;
    }
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = 1.0 - ((1.0 - _330.z) * 1.39999997615814208984375);
    float _4337 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _345 = 1.0 - ((1.0 - _330.x) * 1.39999997615814208984375);
    float _4348 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _348 = 1.0 - ((1.0 - _330.y) * 1.39999997615814208984375);
    float _4359 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _351 = (_346 + _343) + _349;
    float _358 = (_351 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _359 = (_351 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _360 = (_351 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _385 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _394 = 1.0 - ((1.0 - _385.x) * 1.39999997615814208984375);
    float _4370 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _405 = (_395 * ((cbMtdParam._m0[9u].x - _358) + ((1.0 - cbMtdParam._m0[9u].x) * _351))) + _358;
    float _406 = (_395 * ((cbMtdParam._m0[9u].y - _359) + ((1.0 - cbMtdParam._m0[9u].y) * _351))) + _359;
    float _407 = (_395 * ((cbMtdParam._m0[9u].z - _360) + ((1.0 - cbMtdParam._m0[9u].z) * _351))) + _360;
    float _420 = 1.0 - ((1.0 - _385.y) * 1.39999997615814208984375);
    float _4381 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _431 = (((cbMtdParam._m0[17u].x - _405) + ((1.0 - cbMtdParam._m0[17u].x) * _351)) * _421) + _405;
    float _432 = (((cbMtdParam._m0[17u].y - _406) + ((1.0 - cbMtdParam._m0[17u].y) * _351)) * _421) + _406;
    float _433 = (((cbMtdParam._m0[17u].z - _407) + ((1.0 - cbMtdParam._m0[17u].z) * _351)) * _421) + _407;
    float _447 = 1.0 - ((1.0 - _385.z) * 1.39999997615814208984375);
    float _4392 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _479 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _493 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _479) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4403 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = 1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)));
    float _503 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _479) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4414 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = 1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)));
    vec4 _523 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _528 = cbMtdParam._m0[10u].x * _505;
    float _530 = cbMtdParam._m0[10u].y * _505;
    float _532 = cbMtdParam._m0[10u].z * _505;
    float _549 = ((_525 * (cbMtdParam._m0[16u].x - _528)) * _495) + (_528 * _525);
    float _550 = ((_526 * (cbMtdParam._m0[16u].y - _530)) * _495) + (_530 * _526);
    float _551 = ((_527 * (cbMtdParam._m0[16u].z - _532)) * _495) + (_532 * _527);
    float _573 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _577 = (_573 * ((TEXCOORD_7.x - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _578 = (_573 * ((TEXCOORD_7.y - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _579 = (_573 * ((TEXCOORD_7.z - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4425 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4436 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4447 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _588 = (1.0 - cbMtdParam._m0[25u].x) + _346;
    float _591 = _588 * (1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))));
    float _592 = _588 * (1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))));
    float _593 = ((_346 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))));
    float _603 = _505 + _495;
    float _604 = _603 + _591;
    float _605 = _603 + _592;
    float _606 = _603 + _593;
    float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _610 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
    float _611 = isnan(1.0) ? _608 : (isnan(_608) ? 1.0 : min(_608, 1.0));
    float _612 = isnan(1.0) ? _609 : (isnan(_609) ? 1.0 : min(_609, 1.0));
    vec4 _630 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _635 = _630.w;
    float _636 = _630.x * cbMtdParam._m0[12u].x;
    float _637 = _630.y * cbMtdParam._m0[12u].y;
    float _638 = _630.z * cbMtdParam._m0[12u].z;
    vec4 _656 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _670 = (((_656.x * cbMtdParam._m0[13u].x) - _636) * _346) + _636;
    float _671 = (((_656.y * cbMtdParam._m0[13u].y) - _637) * _346) + _637;
    float _672 = (((_656.z * cbMtdParam._m0[13u].z) - _638) * _346) + _638;
    vec4 _691 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _705 = (((_691.x * cbMtdParam._m0[14u].x) - _670) * _349) + _670;
    float _706 = (((_691.y * cbMtdParam._m0[14u].y) - _671) * _349) + _671;
    float _707 = (((_691.z * cbMtdParam._m0[14u].z) - _672) * _349) + _672;
    vec4 _724 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _738 = (((_724.x * cbMtdParam._m0[15u].x) - _705) * _343) + _705;
    float _739 = (((_724.y * cbMtdParam._m0[15u].y) - _706) * _343) + _706;
    float _740 = (((_724.z * cbMtdParam._m0[15u].z) - _707) * _343) + _707;
    float _760 = ((_738 - (_738 * _610)) + (((_610 * 4.55000019073486328125) * ((_591 * ((cbMtdParam._m0[11u].x * _525) - _549)) + _549)) * _738)) * ((((cbMtdParam._m0[18u].x - _431) + ((1.0 - cbMtdParam._m0[18u].x) * _351)) * _448) + _431);
    float _761 = ((_739 - (_739 * _611)) + (((_611 * 4.55000019073486328125) * ((_592 * ((cbMtdParam._m0[11u].y * _526) - _550)) + _550)) * _739)) * ((((cbMtdParam._m0[18u].y - _432) + ((1.0 - cbMtdParam._m0[18u].y) * _351)) * _448) + _432);
    float _762 = ((_740 - (_612 * _740)) + (((_612 * 4.55000019073486328125) * ((_593 * ((cbMtdParam._m0[11u].z * _527) - _551)) + _551)) * _740)) * ((((cbMtdParam._m0[18u].z - _433) + ((1.0 - cbMtdParam._m0[18u].z) * _351)) * _448) + _433);
    float _773 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _610) + cbMtdParam._m0[25u].w;
    float _776 = ((cbMtdParam._m0[20u].x - _773) * _346) + _773;
    float _779 = ((cbMtdParam._m0[20u].y - _776) * _349) + _776;
    float _782 = ((cbMtdParam._m0[20u].z - _779) * _343) + _779;
    vec4 _794 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _798 = _794.z;
    float _802 = (_794.x * 2.0) + (-1.0);
    float _804 = (_794.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_802, _804), vec2(_802, _804));
    float _4488 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _810 = sqrt(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))));
    float _813 = fma(_810, _309, fma(_804, _302, _802 * _281));
    float _816 = fma(_810, _310, fma(_804, _303, _802 * _282));
    float _819 = fma(_810, _311, fma(_804, _304, _802 * _283));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _843 = abs((fract(cbMtdParam._m0[21u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4499 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _849 = (_844 * _844) * (3.0 - (_844 * 2.0));
    float _850 = isnan(cbMtdParam._m0[21u].y) ? _849 : (isnan(_849) ? cbMtdParam._m0[21u].y : max(_849, cbMtdParam._m0[21u].y));
    vec4 _869 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].x * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _874 = (isnan(cbMtdParam._m0[21u].x) ? _850 : (isnan(_850) ? cbMtdParam._m0[21u].x : min(_850, cbMtdParam._m0[21u].x))) * cbMtdParam._m0[22u].y;
    vec4 _906 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _4520 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _919 = sqrt(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))));
    float _922 = fma(_919, _309, fma(_913, _302, _912 * _281));
    float _925 = fma(_919, _310, fma(_913, _303, _912 * _282));
    float _928 = fma(_919, _311, fma(_913, _304, _912 * _283));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _938 = fma(_935, _264, fma(_934, _263, _933 * _262));
    float _941 = fma(_935, _297, fma(_934, _296, _933 * _295));
    float _944 = fma(_935, _311, fma(_934, _310, _933 * _309));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    vec4 _962 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _968 = (_962.x * 2.0) + (-1.0);
    float _969 = (_962.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4531 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _975 = sqrt(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))));
    float _978 = fma(_975, _309, fma(_969, _302, _968 * _281));
    float _981 = fma(_975, _310, fma(_969, _303, _968 * _282));
    float _984 = fma(_975, _311, fma(_969, _304, _968 * _283));
    float _988 = inversesqrt(dot(vec3(_978, _981, _984), vec3(_978, _981, _984)));
    float _989 = _988 * _978;
    float _990 = _988 * _981;
    float _991 = _988 * _984;
    float _994 = fma(_991, _264, fma(_990, _263, _989 * _262));
    float _997 = fma(_991, _297, fma(_990, _296, _989 * _295));
    float _1000 = fma(_991, _311, fma(_990, _310, _989 * _309));
    float _1004 = inversesqrt(dot(vec3(_994, _997, _1000), vec3(_994, _997, _1000)));
    vec4 _1017 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1023 = (_1017.x * 2.0) + (-1.0);
    float _1024 = (_1017.y * 2.0) + (-1.0);
    float _1025 = dot(vec2(_1023, _1024), vec2(_1023, _1024));
    float _4542 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1030 = sqrt(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))));
    float _1033 = fma(_1030, _309, fma(_1024, _302, _1023 * _281));
    float _1036 = fma(_1030, _310, fma(_1024, _303, _1023 * _282));
    float _1039 = fma(_1030, _311, fma(_1024, _304, _1023 * _283));
    float _1043 = inversesqrt(dot(vec3(_1033, _1036, _1039), vec3(_1033, _1036, _1039)));
    float _1044 = _1043 * _1033;
    float _1045 = _1043 * _1036;
    float _1046 = _1043 * _1039;
    float _1049 = fma(_1046, _264, fma(_1045, _263, _1044 * _262));
    float _1052 = fma(_1046, _297, fma(_1045, _296, _1044 * _295));
    float _1055 = fma(_1046, _311, fma(_1045, _310, _1044 * _309));
    float _1059 = inversesqrt(dot(vec3(_1049, _1052, _1055), vec3(_1049, _1052, _1055)));
    float _1065 = fma(_826, _264, fma(_825, _263, _824 * _262));
    float _1068 = fma(_826, _297, fma(_825, _296, _824 * _295));
    float _1071 = fma(_826, _311, fma(_825, _310, _824 * _309));
    float _1075 = inversesqrt(dot(vec3(_1065, _1068, _1071), vec3(_1065, _1068, _1071)));
    float _1076 = _1075 * _1065;
    float _1077 = _1075 * _1068;
    float _1078 = _1075 * _1071;
    float _1085 = (((_1059 * _1049) - _1076) * _346) + _1076;
    float _1086 = (((_1059 * _1052) - _1077) * _346) + _1077;
    float _1087 = (((_1059 * _1055) - _1078) * _346) + _1078;
    vec4 _1100 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1106 = (_1100.x * 2.0) + (-1.0);
    float _1107 = (_1100.y * 2.0) + (-1.0);
    float _1108 = dot(vec2(_1106, _1107), vec2(_1106, _1107));
    float _4553 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1113 = sqrt(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))));
    float _1116 = fma(_1113, _309, fma(_1107, _302, _1106 * _281));
    float _1119 = fma(_1113, _310, fma(_1107, _303, _1106 * _282));
    float _1122 = fma(_1113, _311, fma(_1107, _304, _1106 * _283));
    float _1126 = inversesqrt(dot(vec3(_1116, _1119, _1122), vec3(_1116, _1119, _1122)));
    float _1127 = _1126 * _1116;
    float _1128 = _1126 * _1119;
    float _1129 = _1126 * _1122;
    float _1132 = fma(_1129, _264, fma(_1128, _263, _1127 * _262));
    float _1135 = fma(_1129, _297, fma(_1128, _296, _1127 * _295));
    float _1138 = fma(_1129, _311, fma(_1128, _310, _1127 * _309));
    float _1142 = inversesqrt(dot(vec3(_1132, _1135, _1138), vec3(_1132, _1135, _1138)));
    float _1152 = (((_1142 * _1132) - _1085) * _349) + _1085;
    float _1153 = (((_1142 * _1135) - _1086) * _349) + _1086;
    float _1154 = (((_1142 * _1138) - _1087) * _349) + _1087;
    vec4 _1167 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1173 = (_1167.x * 2.0) + (-1.0);
    float _1174 = (_1167.y * 2.0) + (-1.0);
    float _1175 = dot(vec2(_1173, _1174), vec2(_1173, _1174));
    float _4564 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1180 = sqrt(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))));
    float _1183 = fma(_1180, _309, fma(_1174, _302, _1173 * _281));
    float _1186 = fma(_1180, _310, fma(_1174, _303, _1173 * _282));
    float _1189 = fma(_1180, _311, fma(_1174, _304, _1173 * _283));
    float _1193 = inversesqrt(dot(vec3(_1183, _1186, _1189), vec3(_1183, _1186, _1189)));
    float _1194 = _1193 * _1183;
    float _1195 = _1193 * _1186;
    float _1196 = _1193 * _1189;
    float _1199 = fma(_1196, _264, fma(_1195, _263, _1194 * _262));
    float _1202 = fma(_1196, _297, fma(_1195, _296, _1194 * _295));
    float _1205 = fma(_1196, _311, fma(_1195, _310, _1194 * _309));
    float _1209 = inversesqrt(dot(vec3(_1199, _1202, _1205), vec3(_1199, _1202, _1205)));
    float _1219 = (((_1209 * _1205) - _1154) * _343) + _1154;
    vec4 _1231 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1237 = (_1231.x * 2.0) + (-1.0);
    float _1238 = (_1231.y * 2.0) + (-1.0);
    float _1239 = dot(vec2(_1237, _1238), vec2(_1237, _1238));
    float _4575 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1244 = sqrt(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))));
    float _1247 = fma(_1244, _309, fma(_1238, _302, _1237 * _281));
    float _1250 = fma(_1244, _310, fma(_1238, _303, _1237 * _282));
    float _1253 = fma(_1244, _311, fma(_1238, _304, _1237 * _283));
    float _1257 = inversesqrt(dot(vec3(_1247, _1250, _1253), vec3(_1247, _1250, _1253)));
    float _1258 = _1257 * _1247;
    float _1259 = _1257 * _1250;
    float _1260 = _1257 * _1253;
    float _1263 = fma(_1260, _264, fma(_1259, _263, _1258 * _262));
    float _1266 = fma(_1260, _297, fma(_1259, _296, _1258 * _295));
    float _1269 = fma(_1260, _311, fma(_1259, _310, _1258 * _309));
    float _1273 = inversesqrt(dot(vec3(_1263, _1266, _1269), vec3(_1263, _1266, _1269)));
    vec4 _1311 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1325 = (((((((_994 * _495) * _1004) * cbMtdParam._m0[24u].z) + ((((_604 * _588) * _938) * _948) * cbMtdParam._m0[24u].w)) + _1152) + (((_1209 * _1199) - _1152) * _343)) + (((_1263 * _505) * _1273) * cbMtdParam._m0[23u].z)) + (((_1311.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1330 = (((((((_997 * _495) * _1004) * cbMtdParam._m0[24u].z) + ((((_605 * _588) * _941) * _948) * cbMtdParam._m0[24u].w)) + _1153) + (((_1209 * _1202) - _1153) * _343)) + (((_1266 * _505) * _1273) * cbMtdParam._m0[23u].z)) + (((_1311.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1333 = fma(_1219, _309, fma(_1330, _295, _1325 * _262));
    float _1336 = fma(_1219, _310, fma(_1330, _296, _1325 * _263));
    float _1339 = fma(_1219, _311, fma(_1330, _297, _1325 * _264));
    float _1343 = inversesqrt(dot(vec3(_1333, _1336, _1339), vec3(_1333, _1336, _1339)));
    float _1344 = _1343 * _1333;
    float _1345 = _1343 * _1336;
    float _1346 = _1343 * _1339;
    float _4586 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1347 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _1348 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _4608 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4619 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4630 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4641 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1352 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _1368 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1408 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1418 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1408);
    float _1419 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1408);
    float _1420 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1408);
    float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
    float _1425 = _1418 * _1424;
    float _1426 = _1419 * _1424;
    float _1427 = _1420 * _1424;
    vec4 _1432 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1434 = _1432.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1605 = sqrt(((_1418 * _1418) + (_1419 * _1419)) + (_1420 * _1420));
        float _1611 = (cbMatDynParam._m0[5u].x * _1605) + cbMatDynParam._m0[5u].y;
        float _4652 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _1616 = (cbMatDynParam._m0[5u].z * _1605) + cbMatDynParam._m0[5u].w;
        float _4663 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) - _1612)) + _1612) < ((_1434 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1464 = fma(_1346, cbSceneParam._m0[5u].z, fma(_1345, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1344));
    float _1467 = fma(_1346, cbSceneParam._m0[6u].z, fma(_1345, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1344));
    float _1470 = fma(_1346, cbSceneParam._m0[7u].z, fma(_1345, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1344));
    uint _1483 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1484 = _1483 + 9u;
    uint _1485 = _1484 + uint(cbMatDynParam._m0[0u].w);
    float _1491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * cbInstanceData._m0[_1485].x;
    float _1492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * cbInstanceData._m0[_1485].y;
    float _1493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * cbInstanceData._m0[_1485].z;
    float _4674 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1494 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _4685 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _1495 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _4696 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
    float _1496 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _1497 = 1.0 - _1352;
    float _1498 = _1494 * _1497;
    float _1499 = _1495 * _1497;
    float _1500 = _1496 * _1497;
    float _1505 = (_1494 + (-0.039999999105930328369140625)) * _1352;
    float _1506 = (_1495 + (-0.039999999105930328369140625)) * _1352;
    float _1507 = (_1496 + (-0.039999999105930328369140625)) * _1352;
    float _1508 = _1505 + 0.039999999105930328369140625;
    float _1510 = _1506 + 0.039999999105930328369140625;
    float _1511 = _1507 + 0.039999999105930328369140625;
    vec4 _1520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1445, cbSceneParam._m0[86u].y * _1446));
    float _1523 = _1520.x * TEXCOORD_7.w;
    float _1524 = dot(vec3(_1344, _1345, _1346), vec3(_1425, _1426, _1427));
    float _1527 = _1524 * 2.0;
    float _1531 = (_1527 * _1344) - _1425;
    float _1532 = (_1527 * _1345) - _1426;
    float _1533 = (_1527 * _1346) - _1427;
    float _1537 = abs(dot(vec3(_1425, _1426, _1427), vec3(_1344, _1345, _1346)));
    float _4707 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1539 = sqrt(_1348);
    float _1551 = exp2((_1539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1539 * 3.0));
    float _1557 = (1.0 - _1551) * ((_1539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1558 = _1551 * _1539;
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1924;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1649 = fma(_1594, cbModelParam._m0[26u].z, fma(_1590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1586));
        float _1653 = fma(_1594, cbModelParam._m0[27u].z, fma(_1590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1586));
        float _1657 = fma(_1594, cbModelParam._m0[28u].z, fma(_1590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1586));
        float _1682 = _1586 + _1344;
        float _1683 = _1590 + _1345;
        float _1684 = _1594 + _1346;
        float _1694 = fma(_1684, cbModelParam._m0[26u].z, fma(_1683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1682)) - _1649;
        float _1695 = fma(_1684, cbModelParam._m0[27u].z, fma(_1683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1682)) - _1653;
        float _1696 = fma(_1684, cbModelParam._m0[28u].z, fma(_1683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1682)) - _1657;
        float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
        float _1713 = ((_1700 * _1694) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1649 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1714 = ((_1700 * _1695) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1653 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1715 = ((_1700 * _1696) / cbModelParam._m0[34u].z) + ((((((_1657 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        float _1752 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1718.x + (-0.5));
        float _1754 = _1752 * (_1718.y + (-0.5));
        float _1755 = _1752 * (_1718.z + (-0.5));
        float _1762 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1725.x + (-0.5));
        float _1764 = _1762 * (_1725.y + (-0.5));
        float _1765 = _1762 * (_1725.z + (-0.5));
        float _1772 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1732.x + (-0.5));
        float _1774 = _1772 * (_1732.y + (-0.5));
        float _1775 = _1772 * (_1732.z + (-0.5));
        float _1782 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1739.x + (-0.5));
        float _1784 = _1782 * (_1739.y + (-0.5));
        float _1785 = _1782 * (_1739.z + (-0.5));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = _1753 * 0.5;
        float _1790 = _1763 * 0.5;
        float _1791 = _1773 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1806 = (dot(vec3(_1344, _1345, _1346), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4733 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1816 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4744 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4755 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_1818 + 1.0))) + _1823) * _1786;
        float _1833 = _1754 * 0.5;
        float _1834 = _1764 * 0.5;
        float _1835 = _1774 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1344, _1345, _1346), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4766 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4777 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4788 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_1860 + 1.0))) + _1865) * _1787;
        float _1875 = _1755 * 0.5;
        float _1876 = _1765 * 0.5;
        float _1877 = _1775 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1344, _1345, _1346), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4799 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4810 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4821 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_1902 + 1.0))) + _1907) * _1788;
        _1924 = _1755;
        _1926 = _1754;
        _1927 = _1753;
        _1928 = _1765;
        _1929 = _1764;
        _1930 = _1763;
        _1931 = _1775;
        _1932 = _1774;
        _1933 = _1773;
        _1934 = _1788;
        _1935 = _1787;
        _1936 = _1786;
        _1937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
        _1938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
        _1939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
    }
    else
    {
        _1924 = _1925;
        _1926 = _1925;
        _1927 = _1925;
        _1928 = _1925;
        _1929 = _1925;
        _1930 = _1925;
        _1931 = _1925;
        _1932 = _1925;
        _1933 = _1925;
        _1934 = _1925;
        _1935 = _1925;
        _1936 = _1925;
        _1937 = 0.0;
        _1938 = 0.0;
        _1939 = 0.0;
    }
    float _2237;
    float _2238;
    float _2239;
    float _2240;
    float _2241;
    float _2242;
    float _2243;
    float _2244;
    float _2245;
    float _2246;
    float _2247;
    float _2248;
    float _2249;
    float _2250;
    float _2251;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1968 = fma(_1594, cbModelParam._m0[30u].z, fma(_1590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1586));
        float _1972 = fma(_1594, cbModelParam._m0[31u].z, fma(_1590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1586));
        float _1976 = fma(_1594, cbModelParam._m0[32u].z, fma(_1590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1586));
        float _1999 = _1586 + _1344;
        float _2000 = _1590 + _1345;
        float _2001 = _1594 + _1346;
        float _2011 = fma(_2001, cbModelParam._m0[30u].z, fma(_2000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1999)) - _1968;
        float _2012 = fma(_2001, cbModelParam._m0[31u].z, fma(_2000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1999)) - _1972;
        float _2013 = fma(_2001, cbModelParam._m0[32u].z, fma(_2000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1999)) - _1976;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2030 = ((_2017 * _2011) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1968 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2031 = ((_2017 * _2012) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1972 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2032 = ((_2017 * _2013) / cbModelParam._m0[35u].z) + ((((((_1976 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2034 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2030, _2031, _2032), 0.0);
        vec4 _2041 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2030, _2031, _2032), 0.0);
        vec4 _2048 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2030, _2031, _2032), 0.0);
        vec4 _2055 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2030, _2031, _2032), 0.0);
        float _2067 = exp2((_2034.w + (-0.5)) * 20.0) * 2.0;
        float _2068 = _2067 * (_2034.x + (-0.5));
        float _2069 = _2067 * (_2034.y + (-0.5));
        float _2070 = _2067 * (_2034.z + (-0.5));
        float _2077 = exp2((_2041.w + (-0.5)) * 20.0) * 2.0;
        float _2078 = _2077 * (_2041.x + (-0.5));
        float _2079 = _2077 * (_2041.y + (-0.5));
        float _2080 = _2077 * (_2041.z + (-0.5));
        float _2087 = exp2((_2048.w + (-0.5)) * 20.0) * 2.0;
        float _2088 = _2087 * (_2048.x + (-0.5));
        float _2089 = _2087 * (_2048.y + (-0.5));
        float _2090 = _2087 * (_2048.z + (-0.5));
        float _2097 = exp2((_2055.w + (-0.5)) * 20.0) * 2.0;
        float _2098 = _2097 * (_2055.x + (-0.5));
        float _2099 = _2097 * (_2055.y + (-0.5));
        float _2100 = _2097 * (_2055.z + (-0.5));
        float _2101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2102 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2068 * 0.5;
        float _2105 = _2078 * 0.5;
        float _2106 = _2088 * 0.5;
        float _2107 = dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106));
        float _2112 = (_2107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2107);
        float _2120 = (dot(vec3(_1344, _1345, _1346), vec3(_2112 * _2104, _2112 * _2105, _2112 * _2106)) + 1.0) * 0.5;
        float _4862 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2129 = sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106)) / (_2101 + 9.9999997473787516355514526367188e-06);
        float _4873 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2131 = _2130 * 2.0;
        float _2135 = (1.0 - _2130) / (_2130 + 1.0);
        float _4884 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2145 = ((((1.0 - _2136) * (_2131 + 2.0)) * exp2(log2(isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2131 + 1.0))) + _2136) * _2101;
        float _2146 = _2069 * 0.5;
        float _2147 = _2079 * 0.5;
        float _2148 = _2089 * 0.5;
        float _2149 = dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148));
        float _2154 = (_2149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2149);
        float _2162 = (dot(vec3(_1344, _1345, _1346), vec3(_2154 * _2146, _2154 * _2147, _2154 * _2148)) + 1.0) * 0.5;
        float _4895 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2171 = sqrt(((_2147 * _2147) + (_2146 * _2146)) + (_2148 * _2148)) / (_2102 + 9.9999997473787516355514526367188e-06);
        float _4906 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2173 = _2172 * 2.0;
        float _2177 = (1.0 - _2172) / (_2172 + 1.0);
        float _4917 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _2187 = ((((1.0 - _2178) * (_2173 + 2.0)) * exp2(log2(isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2173 + 1.0))) + _2178) * _2102;
        float _2188 = _2070 * 0.5;
        float _2189 = _2080 * 0.5;
        float _2190 = _2090 * 0.5;
        float _2191 = dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190));
        float _2196 = (_2191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2191);
        float _2204 = (dot(vec3(_1344, _1345, _1346), vec3(_2196 * _2188, _2196 * _2189, _2196 * _2190)) + 1.0) * 0.5;
        float _4928 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2213 = sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190)) / (_2103 + 9.9999997473787516355514526367188e-06);
        float _4939 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2215 = _2214 * 2.0;
        float _2219 = (1.0 - _2214) / (_2214 + 1.0);
        float _4950 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2229 = ((((1.0 - _2220) * (_2215 + 2.0)) * exp2(log2(isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2215 + 1.0))) + _2220) * _2103;
        _2237 = _2070;
        _2238 = _2069;
        _2239 = _2068;
        _2240 = _2080;
        _2241 = _2079;
        _2242 = _2078;
        _2243 = _2090;
        _2244 = _2089;
        _2245 = _2088;
        _2246 = _2103;
        _2247 = _2102;
        _2248 = _2101;
        _2249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)));
        _2250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0)));
        _2251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0)));
    }
    else
    {
        _2237 = _1925;
        _2238 = _1925;
        _2239 = _1925;
        _2240 = _1925;
        _2241 = _1925;
        _2242 = _1925;
        _2243 = _1925;
        _2244 = _1925;
        _2245 = _1925;
        _2246 = _1925;
        _2247 = _1925;
        _2248 = _1925;
        _2249 = 0.0;
        _2250 = 0.0;
        _2251 = 0.0;
    }
    float _2261 = (cbModelParam._m0[1u].x * (_2249 - _1937)) + _1937;
    float _2262 = (cbModelParam._m0[1u].x * (_2250 - _1938)) + _1938;
    float _2263 = (cbModelParam._m0[1u].x * (_2251 - _1939)) + _1939;
    float _2284 = fma(_2263, cbSceneParam._m0[89u].z, fma(_2262, cbSceneParam._m0[89u].y, _2261 * cbSceneParam._m0[89u].x));
    float _2287 = fma(_2263, cbSceneParam._m0[90u].z, fma(_2262, cbSceneParam._m0[90u].y, _2261 * cbSceneParam._m0[90u].x));
    float _2290 = fma(_2263, cbSceneParam._m0[91u].z, fma(_2262, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2261));
    float _2305 = _1531 * 0.5;
    float _2306 = _1532 * 0.5;
    float _2307 = _1533 * 0.5;
    float _2308 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_2239, _2242, _2245, _2248));
    float _2311 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_2238, _2241, _2244, _2247));
    float _2314 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_2237, _2240, _2243, _2246));
    float _2348;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2321 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_1924, _1928, _1931, _1934));
        float _2325 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_1926, _1929, _1932, _1935));
        float _2329 = dot(vec4(_2305, _2306, _2307, 1.0), vec4(_1927, _1930, _1933, _1936));
        float _2336 = dot(vec4(cbModelParam._m0[39u]), vec4(_2305, _2306, _2307, 1.0));
        _2348 = dot(vec3(isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0)), isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)), isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2336) ? 0.0 : (isnan(0.0) ? _2336 : max(0.0, _2336))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2348 = 1.0;
    }
    float _2359;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2350 = dot(vec4(cbModelParam._m0[40u]), vec4(_2305, _2306, _2307, 1.0));
        _2359 = dot(vec3(isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)), isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0)), isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2350) ? 0.0 : (isnan(0.0) ? _2350 : max(0.0, _2350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2359 = 1.0;
    }
    float _2363 = (_2359 * cbModelParam._m0[1u].x) + (_2348 * (1.0 - cbModelParam._m0[1u].x));
    float _2373 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1348);
    float _2374 = isnan(_2373) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2373 : min(cbModelParam._m0[25u].z, _2373));
    float _2454;
    float _2456;
    float _2458;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2421 = fma(_1594, cbModelParam._m0[13u].z, fma(_1590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1586)) + cbModelParam._m0[13u].w;
        float _2425 = fma(_1594, cbModelParam._m0[14u].z, fma(_1590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1586)) + cbModelParam._m0[14u].w;
        float _2429 = fma(_1594, cbModelParam._m0[15u].z, fma(_1590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1586)) + cbModelParam._m0[15u].w;
        float _2432 = fma(_1533, cbModelParam._m0[13u].z, fma(_1532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1531));
        float _2435 = fma(_1533, cbModelParam._m0[14u].z, fma(_1532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1531));
        float _2438 = fma(_1533, cbModelParam._m0[15u].z, fma(_1532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1531));
        float _2466;
        if (_2432 > 0.0)
        {
            _2466 = abs((1.0 - _2421) / _2432);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2432 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2421 + 1.0) / _2432);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2466 = frontier_phi_19_17_ladder;
        }
        float _2668;
        if (_2435 > 0.0)
        {
            _2668 = abs((1.0 - _2425) / _2435);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2435 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2425 + 1.0) / _2435);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2668 = frontier_phi_28_24_ladder;
        }
        float _2922;
        if (_2438 > 0.0)
        {
            _2922 = abs((1.0 - _2429) / _2438);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2438 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2429 + 1.0) / _2438);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2922 = frontier_phi_40_35_ladder;
        }
        float _2924 = isnan(_2668) ? _2466 : (isnan(_2466) ? _2668 : min(_2466, _2668));
        float _2925 = isnan(_2922) ? _2924 : (isnan(_2924) ? _2922 : min(_2924, _2922));
        float _2929 = (_2925 * _2432) + _2421;
        float _2930 = (_2925 * _2435) + _2425;
        float _2931 = (_2925 * _2438) + _2429;
        float _2932 = _2925 * 9.9999997473787516355514526367188e-05;
        float _2934 = (-1.0) - _2932;
        float _2936 = _2932 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2931 > _2936) || ((_2931 < _2934) || ((_2930 > _2936) || ((_2930 < _2934) || ((_2929 < _2934) || (_2929 > _2936))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2931, cbModelParam._m0[9u].z, fma(_2930, cbModelParam._m0[9u].y, _2929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2931, cbModelParam._m0[10u].z, fma(_2930, cbModelParam._m0[10u].y, _2929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2931, cbModelParam._m0[11u].z, fma(_2930, cbModelParam._m0[11u].y, _2929 * cbModelParam._m0[11u].x))), _2374);
            frontier_phi_18_40_ladder = _3059.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3059.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3059.x * cbModelParam._m0[1u].y;
        }
        _2454 = frontier_phi_18_40_ladder_2;
        _2456 = frontier_phi_18_40_ladder_1;
        _2458 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1531, _1532, _1533), _2374);
        _2454 = _2442.x * cbModelParam._m0[1u].y;
        _2456 = _2442.y * cbModelParam._m0[1u].y;
        _2458 = _2442.z * cbModelParam._m0[1u].y;
    }
    float _2462 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1348);
    float _2463 = isnan(_2462) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2462 : min(cbModelParam._m0[25u].w, _2462));
    float _2552;
    float _2554;
    float _2556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2516 = fma(_1594, cbModelParam._m0[21u].z, fma(_1590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1586)) + cbModelParam._m0[21u].w;
        float _2520 = fma(_1594, cbModelParam._m0[22u].z, fma(_1590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1586)) + cbModelParam._m0[22u].w;
        float _2524 = fma(_1594, cbModelParam._m0[23u].z, fma(_1590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1586)) + cbModelParam._m0[23u].w;
        float _2527 = fma(_1533, cbModelParam._m0[21u].z, fma(_1532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1531));
        float _2530 = fma(_1533, cbModelParam._m0[22u].z, fma(_1532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1531));
        float _2533 = fma(_1533, cbModelParam._m0[23u].z, fma(_1532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1531));
        float _2673;
        if (_2527 > 0.0)
        {
            _2673 = abs((1.0 - _2516) / _2527);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2527 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2516 + 1.0) / _2527);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2673 = frontier_phi_30_26_ladder;
        }
        float _2949;
        if (_2530 > 0.0)
        {
            _2949 = abs((1.0 - _2520) / _2530);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2530 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2520 + 1.0) / _2530);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2949 = frontier_phi_42_37_ladder;
        }
        float _3162;
        if (_2533 > 0.0)
        {
            _3162 = abs((1.0 - _2524) / _2533);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2533 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2524 + 1.0) / _2533);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _3162 = frontier_phi_51_48_ladder;
        }
        float _3164 = isnan(_2949) ? _2673 : (isnan(_2673) ? _2949 : min(_2673, _2949));
        float _3165 = isnan(_3162) ? _3164 : (isnan(_3164) ? _3162 : min(_3164, _3162));
        float _3169 = (_3165 * _2527) + _2516;
        float _3170 = (_3165 * _2530) + _2520;
        float _3171 = (_3165 * _2533) + _2524;
        float _3172 = _3165 * 9.9999997473787516355514526367188e-05;
        float _3173 = (-1.0) - _3172;
        float _3175 = _3172 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_3171 > _3175) || ((_3171 < _3173) || ((_3170 > _3175) || ((_3170 < _3173) || ((_3169 < _3173) || (_3169 > _3175))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3171, cbModelParam._m0[17u].z, fma(_3170, cbModelParam._m0[17u].y, _3169 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3171, cbModelParam._m0[18u].z, fma(_3170, cbModelParam._m0[18u].y, _3169 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3171, cbModelParam._m0[19u].z, fma(_3170, cbModelParam._m0[19u].y, _3169 * cbModelParam._m0[19u].x))), _2463);
            frontier_phi_27_51_ladder = _3390.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3390.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3390.x * cbModelParam._m0[1u].z;
        }
        _2552 = frontier_phi_27_51_ladder_2;
        _2554 = frontier_phi_27_51_ladder_1;
        _2556 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1531, _1532, _1533), _2463);
        _2552 = _2536.x * cbModelParam._m0[1u].z;
        _2554 = _2536.y * cbModelParam._m0[1u].z;
        _2556 = _2536.z * cbModelParam._m0[1u].z;
    }
    float _2569 = (((_1557 * _1508) + _1558) * _1523) * ((cbModelParam._m0[1u].w * (_2552 - _2454)) + _2454);
    float _2571 = (((_1557 * _1510) + _1558) * _1523) * ((cbModelParam._m0[1u].w * (_2554 - _2456)) + _2456);
    float _2573 = (((_1557 * _1511) + _1558) * _1523) * ((cbModelParam._m0[1u].w * (_2556 - _2458)) + _2458);
    float _2576 = fma(_2573, cbSceneParam._m0[89u].z, fma(_2571, cbSceneParam._m0[89u].y, _2569 * cbSceneParam._m0[89u].x));
    float _2579 = fma(_2573, cbSceneParam._m0[90u].z, fma(_2571, cbSceneParam._m0[90u].y, _2569 * cbSceneParam._m0[90u].x));
    float _2582 = fma(_2573, cbSceneParam._m0[91u].z, fma(_2571, cbSceneParam._m0[91u].y, _2569 * cbSceneParam._m0[91u].x));
    uvec4 _2592 = floatBitsToUint(cbInstanceData._m0[_1483 + 5u]);
    uint _2594 = _2592.x * 14u;
    uint _2595 = _2594 + 13u;
    float _2602 = _1523 + (-1.0);
    float _2607 = (cbLight._m0[_2595].x * _2602) + 1.0;
    float _2608 = (cbLight._m0[_2595].y * _2602) + 1.0;
    float _2609 = (cbLight._m0[_2595].z * _2602) + 1.0;
    float _2610 = (cbLight._m0[_2595].w * _2602) + 1.0;
    uint _2611 = _2594 + 5u;
    float _2617 = isnan(1.0) ? _2608 : (isnan(_2608) ? 1.0 : min(_2608, 1.0));
    uint _2621 = _2594 + 4u;
    float _2627 = isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0));
    uint _2631 = _2594 | 1u;
    float _2642 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_1344, _1345, _1346));
    float _2645 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_1344, _1345, _1346));
    float _5086 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _5097 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2650 = (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * 0.3183098733425140380859375;
    float _2652 = (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * 0.3183098733425140380859375;
    float _2659 = ((cbLight._m0[_2611].x * _2617) * _2652) + ((cbLight._m0[_2621].x * _2627) * _2650);
    float _2660 = ((_2617 * cbLight._m0[_2611].y) * _2652) + ((_2627 * cbLight._m0[_2621].y) * _2650);
    float _2661 = ((_2617 * cbLight._m0[_2611].z) * _2652) + ((_2627 * cbLight._m0[_2621].z) * _2650);
    uvec4 _2665 = floatBitsToUint(cbLight._m0[_2594 + 12u]);
    bool _2667 = _2665.x == 0u;
    float _2678;
    float _2680;
    float _2682;
    if (_2667)
    {
        _2678 = _2659;
        _2680 = _2660;
        _2682 = _2661;
    }
    else
    {
        uint _2686 = _2594 + 6u;
        float _2702 = (dot(vec3(cbLight._m0[_2594 + 2u].xyz), vec3(_1344, _1345, _1346)) * 0.5) + 0.5;
        float _2703 = _2702 * _2702;
        float _5108 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2704 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
        float _2705 = isnan(1.0) ? _2609 : (isnan(_2609) ? 1.0 : min(_2609, 1.0));
        _2678 = (((cbLight._m0[_2686].x * 0.3183098733425140380859375) * _2704) * _2705) + _2659;
        _2680 = (((cbLight._m0[_2686].y * 0.3183098733425140380859375) * _2704) * _2705) + _2660;
        _2682 = (((cbLight._m0[_2686].z * 0.3183098733425140380859375) * _2704) * _2705) + _2661;
    }
    bool _2685 = _2665.y == 0u;
    float _2723;
    float _2725;
    float _2727;
    if (_2685)
    {
        _2723 = _2678;
        _2725 = _2680;
        _2727 = _2682;
    }
    else
    {
        uint _2893 = _2594 + 7u;
        float _2909 = (dot(vec3(cbLight._m0[_2594 + 3u].xyz), vec3(_1344, _1345, _1346)) * 0.5) + 0.5;
        float _2910 = _2909 * _2909;
        float _5124 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2911 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
        float _2912 = isnan(1.0) ? _2610 : (isnan(_2610) ? 1.0 : min(_2610, 1.0));
        _2723 = (((cbLight._m0[_2893].x * 0.3183098733425140380859375) * _2911) * _2912) + _2678;
        _2725 = (((cbLight._m0[_2893].y * 0.3183098733425140380859375) * _2911) * _2912) + _2680;
        _2727 = (((cbLight._m0[_2893].z * 0.3183098733425140380859375) * _2911) * _2912) + _2682;
    }
    uint _2730 = _2594 + 8u;
    float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _1348) * 0.949999988079071044921875);
    float _2744 = _2743 * _2743;
    float _2745 = cbLight._m0[_2594].x + _1425;
    float _2746 = cbLight._m0[_2594].y + _1426;
    float _2747 = cbLight._m0[_2594].z + _1427;
    float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
    float _2752 = _2751 * _2745;
    float _2753 = _2751 * _2746;
    float _2754 = _2751 * _2747;
    float _2755 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_2594].xyz));
    float _5140 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
    float _5151 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _2759 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
    float _2760 = dot(vec3(_1344, _1345, _1346), vec3(_2752, _2753, _2754));
    float _5162 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
    float _2764 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2752, _2753, _2754));
    float _5173 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2768 = _2744 * _2744;
    float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
    float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0)))) * 5.0);
    float _2781 = 0.959999978542327880859375 - _1505;
    float _2783 = 0.959999978542327880859375 - _1506;
    float _2784 = 0.959999978542327880859375 - _1507;
    float _2791 = 1.0 - _2744;
    float _2802 = (0.5 / (((_2759 * ((_2758 * _2791) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _2791) + _2744) * _2758))) * _2758;
    float _5184 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2804 = (isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
    uint _2815 = _2594 + 9u;
    float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _1348) * 0.949999988079071044921875);
    float _2827 = _2826 * _2826;
    float _2828 = cbLight._m0[_2631].x + _1425;
    float _2829 = cbLight._m0[_2631].y + _1426;
    float _2830 = cbLight._m0[_2631].z + _1427;
    float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
    float _2835 = _2834 * _2828;
    float _2836 = _2834 * _2829;
    float _2837 = _2834 * _2830;
    float _2838 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_2631].xyz));
    float _5195 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2841 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
    float _2842 = dot(vec3(_1344, _1345, _1346), vec3(_2835, _2836, _2837));
    float _5206 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2845 = isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0));
    float _2846 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2835, _2836, _2837));
    float _5217 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2850 = _2827 * _2827;
    float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
    float _2861 = exp2(log2(1.0 - (isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0)))) * 5.0);
    float _2868 = 1.0 - _2827;
    float _2878 = (0.5 / (((_2759 * ((_2841 * _2868) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _2868) + _2827) * _2841))) * _2841;
    float _5228 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2880 = (isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
    float _2890 = (((((_2861 * _2781) + _1508) * cbLight._m0[_2815].x) * _2880) * _2617) + (((((_2780 * _2781) + _1508) * cbLight._m0[_2730].x) * _2804) * _2627);
    float _2891 = (((((_2861 * _2783) + _1510) * cbLight._m0[_2815].y) * _2880) * _2617) + (((((_2780 * _2783) + _1510) * cbLight._m0[_2730].y) * _2804) * _2627);
    float _2892 = (((((_2861 * _2784) + _1511) * cbLight._m0[_2815].z) * _2880) * _2617) + (((((_2780 * _2784) + _1511) * cbLight._m0[_2730].z) * _2804) * _2627);
    float _2954;
    float _2956;
    float _2958;
    if (_2667)
    {
        _2954 = _2890;
        _2956 = _2891;
        _2958 = _2892;
    }
    else
    {
        uint _2960 = _2594 + 2u;
        uint _2964 = _2594 + 10u;
        float _2978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2960].w)) * _1348) * 0.949999988079071044921875);
        float _2979 = _2978 * _2978;
        float _2980 = cbLight._m0[_2960].x + _1425;
        float _2981 = cbLight._m0[_2960].y + _1426;
        float _2982 = cbLight._m0[_2960].z + _1427;
        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
        float _2987 = _2986 * _2980;
        float _2988 = _2986 * _2981;
        float _2989 = _2986 * _2982;
        float _2990 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_2960].xyz));
        float _5239 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2993 = isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0));
        float _2994 = dot(vec3(_1344, _1345, _1346), vec3(_2987, _2988, _2989));
        float _5250 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2997 = isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0));
        float _2998 = dot(vec3(cbLight._m0[_2960].xyz), vec3(_2987, _2988, _2989));
        float _5261 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3002 = _2979 * _2979;
        float _3006 = ((_2997 * _2997) * (_3002 + (-1.0))) + 1.0;
        float _3013 = exp2(log2(1.0 - (isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0)))) * 5.0);
        float _3020 = 1.0 - _2979;
        float _3030 = (0.5 / (((_2759 * ((_2993 * _3020) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _3020) + _2979) * _2993))) * _2993;
        float _5272 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        float _3032 = (isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0))) * (_3002 / ((_3006 * _3006) * 3.141590118408203125));
        float _3033 = isnan(1.0) ? _2609 : (isnan(_2609) ? 1.0 : min(_2609, 1.0));
        _2954 = (((((_3013 * _2781) + _1508) * cbLight._m0[_2964].x) * _3032) * _3033) + _2890;
        _2956 = (((((_3013 * _2783) + _1510) * cbLight._m0[_2964].y) * _3032) * _3033) + _2891;
        _2958 = (((((_3013 * _2784) + _1511) * cbLight._m0[_2964].z) * _3032) * _3033) + _2892;
    }
    float _3068;
    float _3070;
    float _3072;
    if (_2685)
    {
        _3068 = _2954;
        _3070 = _2956;
        _3072 = _2958;
    }
    else
    {
        uint _3079 = _2594 + 3u;
        uint _3083 = _2594 + 11u;
        float _3097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3079].w)) * _1348) * 0.949999988079071044921875);
        float _3098 = _3097 * _3097;
        float _3099 = cbLight._m0[_3079].x + _1425;
        float _3100 = cbLight._m0[_3079].y + _1426;
        float _3101 = cbLight._m0[_3079].z + _1427;
        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
        float _3106 = _3105 * _3099;
        float _3107 = _3105 * _3100;
        float _3108 = _3105 * _3101;
        float _3109 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_3079].xyz));
        float _5288 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3112 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
        float _3113 = dot(vec3(_1344, _1345, _1346), vec3(_3106, _3107, _3108));
        float _5299 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
        float _3116 = isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0));
        float _3117 = dot(vec3(cbLight._m0[_3079].xyz), vec3(_3106, _3107, _3108));
        float _5310 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        float _3121 = _3098 * _3098;
        float _3125 = ((_3116 * _3116) * (_3121 + (-1.0))) + 1.0;
        float _3132 = exp2(log2(1.0 - (isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0)))) * 5.0);
        float _3139 = 1.0 - _3098;
        float _3149 = (0.5 / (((_2759 * ((_3112 * _3139) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _3139) + _3098) * _3112))) * _3112;
        float _5321 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
        float _3151 = (isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0))) * (_3121 / ((_3125 * _3125) * 3.141590118408203125));
        float _3152 = isnan(1.0) ? _2610 : (isnan(_2610) ? 1.0 : min(_2610, 1.0));
        _3068 = (((((_3132 * _2781) + _1508) * cbLight._m0[_3083].x) * _3151) * _3152) + _2954;
        _3070 = (((((_3132 * _2783) + _1510) * cbLight._m0[_3083].y) * _3151) * _3152) + _2956;
        _3072 = (((((_3132 * _2784) + _1511) * cbLight._m0[_3083].z) * _3151) * _3152) + _2958;
    }
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    if (_2592.y == 0u)
    {
        float _3227 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3228 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3227;
        float _3229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3227;
        float _3230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3227;
        uvec4 _3242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3243 = _3242.x;
        uint _3254 = uint((float(_3242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1446) / _3243))) + floor(float(uint(cbSceneParam._m0[85u].x * _1445) / _3243)));
        float _3264 = (log2(_3230 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3265 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
        uint _3268 = uint(isnan(14.0) ? _3265 : (isnan(_3265) ? 14.0 : min(_3265, 14.0)));
        uvec4 _3273 = texelFetch(g_lightClusterGridBuffer, int(((_3268 << 2u) + (_3254 << 6u)) >> 2u));
        uint _3274 = _3273.x;
        uint _3275 = _3242.z;
        float _3395;
        float _3397;
        float _3399;
        float _3401;
        float _3403;
        float _3405;
        if (((((1u << ((_3275 >> 4u) & 15u)) + 4294967295u) & _3274) == 0u) || ((_3275 & 240u) == 0u))
        {
            _3395 = 0.0;
            _3397 = 0.0;
            _3399 = 0.0;
            _3401 = 0.0;
            _3403 = 0.0;
            _3405 = 0.0;
        }
        else
        {
            float _3396;
            float _3398;
            float _3400;
            float _3402;
            float _3404;
            float _3406;
            float _3547 = 0.0;
            float _3548 = 0.0;
            float _3549 = 0.0;
            float _3550 = 0.0;
            float _3551 = 0.0;
            float _3552 = 0.0;
            uint _3553 = 0u;
            uint _3562;
            bool _3563;
            for (;;)
            {
                _3562 = texelFetch(g_lightClassification, int((((_3268 << 5u) + (_3254 << 9u)) + (_3553 << 2u)) >> 2u)).x;
                _3563 = _3562 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3563)
                {
                    frontier_phi_68_pred = _3549;
                    frontier_phi_68_pred_1 = _3552;
                    frontier_phi_68_pred_2 = _3551;
                    frontier_phi_68_pred_3 = _3550;
                    frontier_phi_68_pred_4 = _3548;
                    frontier_phi_68_pred_5 = _3547;
                }
                else
                {
                    float _3692;
                    float _3693;
                    float _3694;
                    float _3695;
                    float _3696;
                    float _3697;
                    uint _3698;
                    _3692 = _3547;
                    _3693 = _3548;
                    _3694 = _3549;
                    _3695 = _3550;
                    _3696 = _3551;
                    _3697 = _3552;
                    _3698 = _3562;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    for (;;)
                    {
                        uint _3702 = uint(findLSB(_3698)) + (_3553 << 5u);
                        uint _3699 = (_3698 + 4294967295u) & _3698;
                        uint _3704 = _3702 * 48u;
                        vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3704)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 3u)).x));
                        uint _3724 = (_3702 * 48u) + 4u;
                        vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3724)).x, texelFetch(g_PointLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3724 + 3u)).x));
                        uint _3743 = (_3702 * 48u) + 8u;
                        vec3 _3754 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3743)).x, texelFetch(g_PointLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3743 + 2u)).x));
                        float _3758 = _3718.x - _3228;
                        float _3759 = _3718.y - _3229;
                        float _3760 = _3718.z - _3230;
                        float _3761 = dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760));
                        float _3764 = inversesqrt(_3761);
                        float _3765 = _3764 * _3758;
                        float _3766 = _3764 * _3759;
                        float _3767 = _3764 * _3760;
                        float _3768 = dot(vec3(_1464, _1467, _1470), vec3(_3765, _3766, _3767));
                        float _3773 = 1.0 - (_3761 * _3718.w);
                        float _5347 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                        float _3774 = isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0));
                        float _3775 = sqrt(_3761) * _3737.w;
                        float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                        float _3778 = _3777 * _3777;
                        float _3781 = ((1.0 - _3778) * _3768) + _3778;
                        float _3784 = _3775 * _3775;
                        float _3788 = ((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3774) / ((_3784 * 0.699999988079071044921875) + 1.0);
                        float _3792 = (-0.0) - _3228;
                        float _3793 = (-0.0) - _3229;
                        float _3794 = (-0.0) - _3230;
                        float _3798 = inversesqrt(dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794)));
                        float _3799 = _3798 * _3792;
                        float _3800 = _3798 * _3793;
                        float _3801 = _3798 * _3794;
                        float _3809 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                        float _3810 = 1.0 - _1539;
                        float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                        float _3818 = _3817 * _3817;
                        float _3819 = _3818 * _3818;
                        float _3820 = _3799 + _3765;
                        float _3821 = _3800 + _3766;
                        float _3822 = _3801 + _3767;
                        float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                        float _3830 = dot(vec3(_1464, _1467, _1470), vec3(_3799, _3800, _3801));
                        float _5363 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                        float _3833 = isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0));
                        float _3834 = dot(vec3(_1464, _1467, _1470), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                        float _5374 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                        float _3837 = isnan(1.0) ? _5374 : (isnan(_5374) ? 1.0 : min(_5374, 1.0));
                        float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                        float _3842 = _3777 * _3818;
                        float _3843 = _3842 * _3842;
                        float _3846 = ((1.0 - _3843) * _3768) + _3843;
                        float _5385 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                        float _3847 = isnan(1.0) ? _5385 : (isnan(_5385) ? 1.0 : min(_5385, 1.0));
                        float _3848 = 1.0 - _3818;
                        float _3858 = (0.5 / (((_3847 * ((_3833 * _3848) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3847 * _3848) + _3818) * _3833))) * _3847;
                        float _5396 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                        float _3869 = (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _5396 : (isnan(_5396) ? 1.0 : min(_5396, 1.0)))) / ((_3841 * _3841) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125))) * _3774;
                        _3622 = (_3788 * _3737.x) + _3695;
                        _3623 = (_3788 * _3737.y) + _3696;
                        _3624 = (_3788 * _3737.z) + _3697;
                        _3619 = (_3869 * _3754.x) + _3692;
                        _3620 = (_3869 * _3754.y) + _3693;
                        _3621 = (_3869 * _3754.z) + _3694;
                        if (_3699 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3692 = _3619;
                            _3693 = _3620;
                            _3694 = _3621;
                            _3695 = _3622;
                            _3696 = _3623;
                            _3697 = _3624;
                            _3698 = _3699;
                        }
                    }
                    frontier_phi_68_pred = _3621;
                    frontier_phi_68_pred_1 = _3624;
                    frontier_phi_68_pred_2 = _3623;
                    frontier_phi_68_pred_3 = _3622;
                    frontier_phi_68_pred_4 = _3620;
                    frontier_phi_68_pred_5 = _3619;
                }
                _3400 = frontier_phi_68_pred;
                _3406 = frontier_phi_68_pred_1;
                _3404 = frontier_phi_68_pred_2;
                _3402 = frontier_phi_68_pred_3;
                _3398 = frontier_phi_68_pred_4;
                _3396 = frontier_phi_68_pred_5;
                uint _3554 = _3553 + 1u;
                if (_3554 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3547 = _3396;
                    _3548 = _3398;
                    _3549 = _3400;
                    _3550 = _3402;
                    _3551 = _3404;
                    _3552 = _3406;
                    _3553 = _3554;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3395 = _3396;
            _3397 = _3398;
            _3399 = _3400;
            _3401 = _3402;
            _3403 = _3404;
            _3405 = _3406;
        }
        uvec4 _3409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3410 = _3409.z;
        uint _3412 = (_3410 >> 8u) & 15u;
        float _3515;
        float _3517;
        float _3519;
        float _3521;
        float _3523;
        float _3525;
        if (((4294967295u << _3412) & _3274) == 0u)
        {
            _3515 = _3395;
            _3517 = _3397;
            _3519 = _3399;
            _3521 = _3401;
            _3523 = _3403;
            _3525 = _3405;
        }
        else
        {
            float _3540 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
            float _3541 = _3540 * _3228;
            float _3542 = _3540 * _3229;
            float _3543 = _3540 * _3230;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3412 < ((_3410 >> 12u) & 15u))
            {
                float _3516;
                float _3518;
                float _3520;
                float _3522;
                float _3524;
                float _3526;
                float _3675 = _3395;
                float _3676 = _3397;
                float _3677 = _3399;
                float _3678 = _3401;
                float _3679 = _3403;
                float _3680 = _3405;
                uint _3681 = _3412;
                uint _3690;
                bool _3691;
                for (;;)
                {
                    _3690 = texelFetch(g_lightClassification, int((((_3268 << 5u) + (_3254 << 9u)) + (_3681 << 2u)) >> 2u)).x;
                    _3691 = _3690 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3691)
                    {
                        frontier_phi_79_pred = _3680;
                        frontier_phi_79_pred_1 = _3679;
                        frontier_phi_79_pred_2 = _3678;
                        frontier_phi_79_pred_3 = _3677;
                        frontier_phi_79_pred_4 = _3676;
                        frontier_phi_79_pred_5 = _3675;
                    }
                    else
                    {
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _4176;
                        float _4177;
                        float _4178;
                        float _4179;
                        float _4180;
                        float _4181;
                        float _3896 = _3675;
                        float _3897 = _3676;
                        float _3898 = _3677;
                        float _3899 = _3678;
                        float _3900 = _3679;
                        float _3901 = _3680;
                        uint _3902 = _3690;
                        uint _3903;
                        vec4 _3928;
                        float _3929;
                        vec4 _3944;
                        vec3 _3956;
                        vec4 _3971;
                        vec4 _3986;
                        float _4032;
                        bool _4033;
                        for (;;)
                        {
                            uint _3913 = ((_3681 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3902));
                            _3903 = (_3902 + 4294967295u) & _3902;
                            uint _3915 = _3913 * 40u;
                            _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            _3929 = _3928.w;
                            uint _3931 = (_3913 * 40u) + 4u;
                            _3944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 3u)).x));
                            uint _3946 = (_3913 * 40u) + 8u;
                            _3956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 2u)).x));
                            uint _3958 = (_3913 * 40u) + 16u;
                            _3971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 3u)).x));
                            uint _3973 = (_3913 * 40u) + 20u;
                            _3986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 3u)).x));
                            uint _3988 = (_3913 * 40u) + 24u;
                            vec4 _4001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 3u)).x));
                            uint _4007 = (_3913 * 40u) + 28u;
                            vec4 _4020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4007 + 3u)).x));
                            _4032 = fma(_3230, _4020.z, fma(_3229, _4020.y, _4020.x * _3228)) + _4020.w;
                            _4033 = !((fma(_3230, _4001.z, fma(_3229, _4001.y, _4001.x * _3228)) + _4001.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_4033)
                            {
                                float _4060 = _3928.x - _3228;
                                float _4061 = _3928.y - _3229;
                                float _4062 = _3928.z - _3230;
                                float _4063 = dot(vec3(_4060, _4061, _4062), vec3(_4060, _4061, _4062));
                                float _4066 = inversesqrt(_4063);
                                float _4067 = _4066 * _4060;
                                float _4068 = _4066 * _4061;
                                float _4069 = _4066 * _4062;
                                float _4073 = 1.0 - (_4063 / (_3929 * _3929));
                                float _5407 = isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0));
                                float _4074 = isnan(1.0) ? _5407 : (isnan(_5407) ? 1.0 : min(_5407, 1.0));
                                float _4078 = sqrt(_4063) * _3944.w;
                                float _4080 = 1.39999997615814208984375 / (_4078 + 1.39999997615814208984375);
                                float _4081 = _4080 * _4080;
                                float _4084 = ((1.0 - _4081) * dot(vec3(_4067, _4068, _4069), vec3(_1464, _1467, _1470))) + _4081;
                                float _4087 = _4078 * _4078;
                                float _4091 = (fma(_3230, _3971.z, fma(_3229, _3971.y, _3971.x * _3228)) + _3971.w) / _4032;
                                float _4092 = (fma(_3230, _3986.z, fma(_3229, _3986.y, _3986.x * _3228)) + _3986.w) / _4032;
                                float _4096 = 1.0 - dot(vec2(_4091, _4092), vec2(_4091, _4092));
                                float _5423 = isnan(0.0) ? _4096 : (isnan(_4096) ? 0.0 : max(_4096, 0.0));
                                float _4097 = isnan(1.0) ? _5423 : (isnan(_5423) ? 1.0 : min(_5423, 1.0));
                                float _4098 = _4097 * (((isnan(0.0) ? _4084 : (isnan(_4084) ? 0.0 : max(_4084, 0.0))) * _4074) / ((_4087 * 0.699999988079071044921875) + 1.0));
                                float _4110 = exp2(log2(1.0 / ((_4087 * 3.5) + 5.0)) * 0.25);
                                float _4111 = 1.0 - _1539;
                                float _4118 = sqrt(1.0 - ((1.0 - (_4111 * _4111)) * (1.0 - (_4110 * _4110))));
                                float _4119 = _4118 * _4118;
                                float _4120 = _4119 * _4119;
                                float _4121 = _4067 - _3541;
                                float _4122 = _4068 - _3542;
                                float _4123 = _4069 - _3543;
                                float _4127 = inversesqrt(dot(vec3(_4121, _4122, _4123), vec3(_4121, _4122, _4123)));
                                float _4131 = dot(vec3(_1464, _1467, _1470), vec3((-0.0) - _3541, (-0.0) - _3542, (-0.0) - _3543));
                                float _5434 = isnan(0.0) ? _4131 : (isnan(_4131) ? 0.0 : max(_4131, 0.0));
                                float _4134 = isnan(1.0) ? _5434 : (isnan(_5434) ? 1.0 : min(_5434, 1.0));
                                float _4135 = dot(vec3(_1464, _1467, _1470), vec3(_4127 * _4121, _4127 * _4122, _4127 * _4123));
                                float _5445 = isnan(0.0) ? _4135 : (isnan(_4135) ? 0.0 : max(_4135, 0.0));
                                float _4138 = isnan(1.0) ? _5445 : (isnan(_5445) ? 1.0 : min(_5445, 1.0));
                                float _4142 = ((_4138 * _4138) * (_4120 + (-1.0))) + 1.0;
                                float _4143 = _4080 * _4119;
                                float _4144 = _4143 * _4143;
                                float _4150 = ((1.0 - _4144) * dot(vec3(_1464, _1467, _1470), vec3(_4067, _4068, _4069))) + _4144;
                                float _5456 = isnan(0.0) ? _4150 : (isnan(_4150) ? 0.0 : max(_4150, 0.0));
                                float _4151 = isnan(1.0) ? _5456 : (isnan(_5456) ? 1.0 : min(_5456, 1.0));
                                float _4152 = 1.0 - _4119;
                                float _4162 = (0.5 / (((_4151 * ((_4134 * _4152) + _4119)) + 9.9999999392252902907785028219223e-09) + (((_4151 * _4152) + _4119) * _4134))) * _4151;
                                float _5467 = isnan(0.0) ? _4162 : (isnan(_4162) ? 0.0 : max(_4162, 0.0));
                                float _4172 = (_4097 * _4074) * (((_4120 * 3.1415927410125732421875) * (isnan(1.0) ? _5467 : (isnan(_5467) ? 1.0 : min(_5467, 1.0)))) / ((_4142 * _4142) * ((_4087 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _4098 * _3944.z;
                                frontier_phi_85_pred_1 = _4098 * _3944.y;
                                frontier_phi_85_pred_2 = _4098 * _3944.x;
                                frontier_phi_85_pred_3 = _4172 * _3956.z;
                                frontier_phi_85_pred_4 = _4172 * _3956.y;
                                frontier_phi_85_pred_5 = _4172 * _3956.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _4181 = frontier_phi_85_pred;
                            _4180 = frontier_phi_85_pred_1;
                            _4179 = frontier_phi_85_pred_2;
                            _4178 = frontier_phi_85_pred_3;
                            _4177 = frontier_phi_85_pred_4;
                            _4176 = frontier_phi_85_pred_5;
                            _3886 = _4179 + _3899;
                            _3887 = _4180 + _3900;
                            _3888 = _4181 + _3901;
                            _3883 = _4176 + _3896;
                            _3884 = _4177 + _3897;
                            _3885 = _4178 + _3898;
                            if (_3903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3896 = _3883;
                                _3897 = _3884;
                                _3898 = _3885;
                                _3899 = _3886;
                                _3900 = _3887;
                                _3901 = _3888;
                                _3902 = _3903;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3888;
                        frontier_phi_79_pred_1 = _3887;
                        frontier_phi_79_pred_2 = _3886;
                        frontier_phi_79_pred_3 = _3885;
                        frontier_phi_79_pred_4 = _3884;
                        frontier_phi_79_pred_5 = _3883;
                    }
                    _3526 = frontier_phi_79_pred;
                    _3524 = frontier_phi_79_pred_1;
                    _3522 = frontier_phi_79_pred_2;
                    _3520 = frontier_phi_79_pred_3;
                    _3518 = frontier_phi_79_pred_4;
                    _3516 = frontier_phi_79_pred_5;
                    uint _3682 = _3681 + 1u;
                    if (_3682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3675 = _3516;
                        _3676 = _3518;
                        _3677 = _3520;
                        _3678 = _3522;
                        _3679 = _3524;
                        _3680 = _3526;
                        _3681 = _3682;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3522;
                frontier_phi_60_61_ladder_1 = _3526;
                frontier_phi_60_61_ladder_2 = _3524;
                frontier_phi_60_61_ladder_3 = _3520;
                frontier_phi_60_61_ladder_4 = _3518;
                frontier_phi_60_61_ladder_5 = _3516;
            }
            else
            {
                frontier_phi_60_61_ladder = _3401;
                frontier_phi_60_61_ladder_1 = _3405;
                frontier_phi_60_61_ladder_2 = _3403;
                frontier_phi_60_61_ladder_3 = _3399;
                frontier_phi_60_61_ladder_4 = _3397;
                frontier_phi_60_61_ladder_5 = _3395;
            }
            _3515 = frontier_phi_60_61_ladder_5;
            _3517 = frontier_phi_60_61_ladder_4;
            _3519 = frontier_phi_60_61_ladder_3;
            _3521 = frontier_phi_60_61_ladder;
            _3523 = frontier_phi_60_61_ladder_2;
            _3525 = frontier_phi_60_61_ladder_1;
        }
        float _3530 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _3286 = (_3530 * _3521) + _2723;
        _3288 = (_3530 * _3523) + _2725;
        _3290 = (_3530 * _3525) + _2727;
        _3292 = ((_3515 * _1508) * _3530) + _3068;
        _3294 = ((_3517 * _1510) * _3530) + _3070;
        _3296 = ((_3519 * _1511) * _3530) + _3072;
    }
    else
    {
        _3286 = _2723;
        _3288 = _2725;
        _3290 = _2727;
        _3292 = _3068;
        _3294 = _3070;
        _3296 = _3072;
    }
    uint _3302 = _1484 + uint(cbMatDynParam._m0[0u].w);
    float _5483 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _5494 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _5505 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _5516 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _3328 = (((isnan(1.0) ? _5483 : (isnan(_5483) ? 1.0 : min(_5483, 1.0))) * (_3286 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _1523))) + ((_3292 + ((isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))) * _2363)) * cbPerFrame._m0[3u].x)) + (((((_874 * _869.x) + cbMtdParam._m0[26u].x) * ((_346 * TEXCOORD_13.x) + TEXCOORD_10.x)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3302].x);
    float _3330 = ((((((_874 * _869.y) + cbMtdParam._m0[26u].y) * ((_346 * TEXCOORD_13.y) + TEXCOORD_10.y)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3302].y) + ((_3294 + ((isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))) * _2363)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5494 : (isnan(_5494) ? 1.0 : min(_5494, 1.0))) * (_3288 + ((isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))) * _1523)));
    float _3332 = ((((((_874 * _869.z) + cbMtdParam._m0[26u].z) * ((_346 * TEXCOORD_13.z) + TEXCOORD_10.z)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3302].z) + ((_3296 + ((isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))) * _2363)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5505 : (isnan(_5505) ? 1.0 : min(_5505, 1.0))) * (_3290 + ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _1523)));
    float _3333 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
    float _3334 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
    float _3335 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
    float _3340 = cbInstanceData._m0[_1483 + 6u].w * (isnan(1.0) ? _5516 : (isnan(_5516) ? 1.0 : min(_5516, 1.0)));
    float _3345 = _1445 / cbSceneParam._m0[86u].x;
    float _3346 = _1446 / cbSceneParam._m0[86u].y;
    vec4 _3360 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3345, _3346, (log2((isnan(cbSceneParam._m0[77u].w) ? _1368 : (isnan(_1368) ? cbSceneParam._m0[77u].w : min(_1368, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3362 = _3360.x;
    float _3363 = _3360.y;
    float _3364 = _3360.z;
    float _3365 = _3360.w;
    float _3457;
    float _3459;
    float _3461;
    float _3463;
    if (_1368 > cbSceneParam._m0[78u].w)
    {
        float _3420 = isnan(_1368) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1368 : min(cbSceneParam._m0[80u].w, _1368));
        float _3421 = _3420 / _1368;
        float _3432 = _3421 * _1418;
        float _3433 = _1419 * _3421;
        float _3434 = (-0.0) - _3433;
        float _3435 = _3421 * _1420;
        float _3437 = (cbSceneParam._m0[77u].w * _3434) / _3420;
        float _3438 = _3437 + cbSceneParam._m0[79u].w;
        float _3439 = cbSceneParam._m0[79u].w - _3433;
        float _3445 = sqrt(((_3432 * _3432) + (_3433 * _3433)) + (_3435 * _3435));
        float _3448 = (1.0 - (cbSceneParam._m0[77u].w / _3420)) * _3445;
        float _3453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3455 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3632;
        if (abs((_3434 - _3437) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3632 = ((((_3438 > 0.0) ? exp2(_3453 * _3438) : (2.0 - exp2(_3455 * _3438))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3448;
        }
        else
        {
            float _3576 = 1.0 / cbSceneParam._m0[80u].x;
            float _3577 = isnan(_3439) ? _3438 : (isnan(_3438) ? _3439 : max(_3438, _3439));
            float _3578 = isnan(_3439) ? _3438 : (isnan(_3438) ? _3439 : min(_3438, _3439));
            float _3587 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : min(_3577, 0.0));
            float _3588 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : min(_3578, 0.0));
            _3632 = ((abs(_3445 / _3434) * cbSceneParam._m0[80u].y) * ((((_3587 - _3588) * 2.0) - ((exp2(_3453 * (isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0)))) - exp2(_3453 * (isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))))) * _3576)) - ((exp2(_3455 * _3587) - exp2(_3455 * _3588)) * _3576))) + (_3448 * cbSceneParam._m0[80u].z);
        }
        vec4 _3634 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3345, _3346, 1.0), 0.0);
        float _3643 = exp2((_3632 * (-1.44269502162933349609375)) * (1.0 - _3634.w));
        float _3644 = log2(_3643);
        float _3660 = log2(_3365);
        _3457 = (exp2(_3660 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].x)) * _3634.x) / cbSceneParam._m0[78u].x)) + _3362;
        _3459 = (exp2(_3660 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].y)) * _3634.y) / cbSceneParam._m0[78u].y)) + _3363;
        _3461 = (exp2(_3660 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].z)) * _3634.z) / cbSceneParam._m0[78u].z)) + _3364;
        _3463 = _3643 * _3365;
    }
    else
    {
        _3457 = _3362;
        _3459 = _3363;
        _3461 = _3364;
        _3463 = _3365;
    }
    bool _3670;
    vec4 _3473;
    vec4 _3495;
    float _3497;
    float _3501;
    float _3502;
    float _3503;
    float _3504;
    bool _3514;
    for (;;)
    {
        _3473 = cbMatDynParam._m0[0u];
        float _3475 = roundEven(_3473.y);
        bool _3476 = _3475 == 3.0;
        float _3477 = log2(_3463);
        float _3484 = exp2(_3477 * cbSceneParam._m0[78u].x) * _3333;
        float _3485 = exp2(_3477 * cbSceneParam._m0[78u].y) * _3334;
        float _3486 = exp2(_3477 * cbSceneParam._m0[78u].z) * _3335;
        float _3493 = _1434 + (-0.5);
        _3495 = cbMtdParam._m0[1u];
        _3497 = _3495.y * _3493;
        float _3500 = (_3475 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3501 = _3500 * (_3476 ? _3484 : (_3484 + (cbSceneParam._m0[72u].w * _3457)));
        _3502 = _3500 * (_3476 ? _3485 : (_3485 + (cbSceneParam._m0[72u].w * _3459)));
        _3503 = _3500 * (_3476 ? _3486 : (_3486 + (cbSceneParam._m0[72u].w * _3461)));
        _3504 = _3493 * 0.999000012874603271484375;
        _3514 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3514)
        {
            if ((cbInstanceData._m0[_1483 + 7u].x + _3504) < 0.5)
            {
                _3670 = true;
                break;
            }
        }
        uint _3611 = _1484 + uint(_3473.w);
        if ((cbInstanceData._m0[_3611].w < 1.0) && ((cbInstanceData._m0[_3611].w + _3504) < 0.5))
        {
            _3670 = true;
            break;
        }
        if ((_3497 + _635) < _3495.x)
        {
            _3670 = true;
            break;
        }
        _3670 = false;
        break;
    }
    float _3874;
    if (_3670)
    {
        discard_state = true;
        _3874 = 0.0;
    }
    else
    {
        _3874 = _3340;
    }
    SV_Target.x = _3501;
    SV_Target.y = _3502;
    SV_Target.z = _3503;
    SV_Target.w = _3874;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3340;
    discard_exit();
}


