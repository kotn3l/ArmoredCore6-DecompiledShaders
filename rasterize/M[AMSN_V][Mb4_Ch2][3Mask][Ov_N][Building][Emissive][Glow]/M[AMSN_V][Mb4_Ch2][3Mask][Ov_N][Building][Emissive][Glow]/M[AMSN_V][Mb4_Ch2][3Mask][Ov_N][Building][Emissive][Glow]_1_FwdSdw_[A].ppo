#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1929;
float _4612;
float _4613;
float _4614;
float _4615;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _257 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _258 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _259 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _265 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _266 = _265 * _257;
    float _267 = _265 * _258;
    float _268 = _265 * _259;
    float _278 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _279 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _280 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _284 * _278;
    float _286 = _284 * _279;
    float _287 = _284 * _280;
    float _291 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _292 = _291 * NORMAL.x;
    float _293 = _291 * NORMAL.y;
    float _294 = _291 * NORMAL.z;
    float _298 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _299 = _298 * TANGENT.x;
    float _300 = _298 * TANGENT.y;
    float _301 = _298 * TANGENT.z;
    float _305 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _306 = _305 * TANGENT_2.x;
    float _307 = _305 * TANGENT_2.y;
    float _308 = _305 * TANGENT_2.z;
    float _313;
    float _314;
    float _315;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _313 = (-0.0) - _292;
        _314 = (-0.0) - _293;
        _315 = (-0.0) - _294;
    }
    else
    {
        _313 = _292;
        _314 = _293;
        _315 = _294;
    }
    vec4 _334 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _346 = 1.0 - ((1.0 - _334.z) * 1.39999997615814208984375);
    float _4624 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _349 = 1.0 - ((1.0 - _334.x) * 1.39999997615814208984375);
    float _4635 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _352 = 1.0 - ((1.0 - _334.y) * 1.39999997615814208984375);
    float _4646 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _355 = (_350 + _347) + _353;
    float _362 = (_355 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _363 = (_355 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _364 = (_355 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _389 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _398 = 1.0 - ((1.0 - _389.x) * 1.39999997615814208984375);
    float _4657 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _409 = (_399 * ((cbMtdParam._m0[9u].x - _362) + ((1.0 - cbMtdParam._m0[9u].x) * _355))) + _362;
    float _410 = (_399 * ((cbMtdParam._m0[9u].y - _363) + ((1.0 - cbMtdParam._m0[9u].y) * _355))) + _363;
    float _411 = (_399 * ((cbMtdParam._m0[9u].z - _364) + ((1.0 - cbMtdParam._m0[9u].z) * _355))) + _364;
    float _424 = 1.0 - ((1.0 - _389.y) * 1.39999997615814208984375);
    float _4668 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _435 = (((cbMtdParam._m0[17u].x - _409) + ((1.0 - cbMtdParam._m0[17u].x) * _355)) * _425) + _409;
    float _436 = (((cbMtdParam._m0[17u].y - _410) + ((1.0 - cbMtdParam._m0[17u].y) * _355)) * _425) + _410;
    float _437 = (((cbMtdParam._m0[17u].z - _411) + ((1.0 - cbMtdParam._m0[17u].z) * _355)) * _425) + _411;
    float _451 = 1.0 - ((1.0 - _389.z) * 1.39999997615814208984375);
    float _4679 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _483 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _497 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _483) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4690 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = 1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)));
    float _507 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _483) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4701 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = 1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)));
    vec4 _527 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _532 = cbMtdParam._m0[10u].x * _509;
    float _534 = cbMtdParam._m0[10u].y * _509;
    float _536 = cbMtdParam._m0[10u].z * _509;
    float _553 = ((_529 * (cbMtdParam._m0[16u].x - _532)) * _499) + (_532 * _529);
    float _554 = ((_530 * (cbMtdParam._m0[16u].y - _534)) * _499) + (_534 * _530);
    float _555 = ((_531 * (cbMtdParam._m0[16u].z - _536)) * _499) + (_536 * _531);
    float _577 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _581 = (_577 * ((TEXCOORD_7.x - _483) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _582 = (_577 * ((TEXCOORD_7.y - _483) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _583 = (_577 * ((TEXCOORD_7.z - _483) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4712 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4723 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4734 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _592 = (1.0 - cbMtdParam._m0[25u].x) + _350;
    float _595 = _592 * (1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))));
    float _596 = _592 * (1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))));
    float _597 = ((_350 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))));
    float _607 = _509 + _499;
    float _608 = _607 + _595;
    float _609 = _607 + _596;
    float _610 = _607 + _597;
    float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _614 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
    float _615 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
    float _616 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
    vec4 _634 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _639 = _634.w;
    float _640 = _634.x * cbMtdParam._m0[12u].x;
    float _641 = _634.y * cbMtdParam._m0[12u].y;
    float _642 = _634.z * cbMtdParam._m0[12u].z;
    vec4 _660 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _674 = (((_660.x * cbMtdParam._m0[13u].x) - _640) * _350) + _640;
    float _675 = (((_660.y * cbMtdParam._m0[13u].y) - _641) * _350) + _641;
    float _676 = (((_660.z * cbMtdParam._m0[13u].z) - _642) * _350) + _642;
    vec4 _695 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _709 = (((_695.x * cbMtdParam._m0[14u].x) - _674) * _353) + _674;
    float _710 = (((_695.y * cbMtdParam._m0[14u].y) - _675) * _353) + _675;
    float _711 = (((_695.z * cbMtdParam._m0[14u].z) - _676) * _353) + _676;
    vec4 _728 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _742 = (((_728.x * cbMtdParam._m0[15u].x) - _709) * _347) + _709;
    float _743 = (((_728.y * cbMtdParam._m0[15u].y) - _710) * _347) + _710;
    float _744 = (((_728.z * cbMtdParam._m0[15u].z) - _711) * _347) + _711;
    float _764 = ((_742 - (_742 * _614)) + (((_614 * 4.55000019073486328125) * ((_595 * ((cbMtdParam._m0[11u].x * _529) - _553)) + _553)) * _742)) * ((((cbMtdParam._m0[18u].x - _435) + ((1.0 - cbMtdParam._m0[18u].x) * _355)) * _452) + _435);
    float _765 = ((_743 - (_743 * _615)) + (((_615 * 4.55000019073486328125) * ((_596 * ((cbMtdParam._m0[11u].y * _530) - _554)) + _554)) * _743)) * ((((cbMtdParam._m0[18u].y - _436) + ((1.0 - cbMtdParam._m0[18u].y) * _355)) * _452) + _436);
    float _766 = ((_744 - (_616 * _744)) + (((_616 * 4.55000019073486328125) * ((_597 * ((cbMtdParam._m0[11u].z * _531) - _555)) + _555)) * _744)) * ((((cbMtdParam._m0[18u].z - _437) + ((1.0 - cbMtdParam._m0[18u].z) * _355)) * _452) + _437);
    float _777 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _614) + cbMtdParam._m0[25u].w;
    float _780 = ((cbMtdParam._m0[20u].x - _777) * _350) + _777;
    float _783 = ((cbMtdParam._m0[20u].y - _780) * _353) + _780;
    float _786 = ((cbMtdParam._m0[20u].z - _783) * _347) + _783;
    vec4 _798 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _802 = _798.z;
    float _806 = (_798.x * 2.0) + (-1.0);
    float _808 = (_798.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_806, _808), vec2(_806, _808));
    float _4775 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _814 = sqrt(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))));
    float _817 = fma(_814, _313, fma(_808, _306, _806 * _285));
    float _820 = fma(_814, _314, fma(_808, _307, _806 * _286));
    float _823 = fma(_814, _315, fma(_808, _308, _806 * _287));
    float _827 = inversesqrt(dot(vec3(_817, _820, _823), vec3(_817, _820, _823)));
    float _828 = _827 * _817;
    float _829 = _827 * _820;
    float _830 = _827 * _823;
    float _847 = abs((fract(cbMtdParam._m0[21u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4786 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _848 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _853 = (_848 * _848) * (3.0 - (_848 * 2.0));
    float _854 = isnan(cbMtdParam._m0[21u].y) ? _853 : (isnan(_853) ? cbMtdParam._m0[21u].y : max(_853, cbMtdParam._m0[21u].y));
    vec4 _873 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].x * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _878 = (isnan(cbMtdParam._m0[21u].x) ? _854 : (isnan(_854) ? cbMtdParam._m0[21u].x : min(_854, cbMtdParam._m0[21u].x))) * cbMtdParam._m0[22u].y;
    vec4 _910 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _916 = (_910.x * 2.0) + (-1.0);
    float _917 = (_910.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4807 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _923 = sqrt(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))));
    float _926 = fma(_923, _313, fma(_917, _306, _916 * _285));
    float _929 = fma(_923, _314, fma(_917, _307, _916 * _286));
    float _932 = fma(_923, _315, fma(_917, _308, _916 * _287));
    float _936 = inversesqrt(dot(vec3(_926, _929, _932), vec3(_926, _929, _932)));
    float _937 = _936 * _926;
    float _938 = _936 * _929;
    float _939 = _936 * _932;
    float _942 = fma(_939, _268, fma(_938, _267, _937 * _266));
    float _945 = fma(_939, _301, fma(_938, _300, _937 * _299));
    float _948 = fma(_939, _315, fma(_938, _314, _937 * _313));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    vec4 _966 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _972 = (_966.x * 2.0) + (-1.0);
    float _973 = (_966.y * 2.0) + (-1.0);
    float _974 = dot(vec2(_972, _973), vec2(_972, _973));
    float _4818 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _979 = sqrt(1.0 - (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))));
    float _982 = fma(_979, _313, fma(_973, _306, _972 * _285));
    float _985 = fma(_979, _314, fma(_973, _307, _972 * _286));
    float _988 = fma(_979, _315, fma(_973, _308, _972 * _287));
    float _992 = inversesqrt(dot(vec3(_982, _985, _988), vec3(_982, _985, _988)));
    float _993 = _992 * _982;
    float _994 = _992 * _985;
    float _995 = _992 * _988;
    float _998 = fma(_995, _268, fma(_994, _267, _993 * _266));
    float _1001 = fma(_995, _301, fma(_994, _300, _993 * _299));
    float _1004 = fma(_995, _315, fma(_994, _314, _993 * _313));
    float _1008 = inversesqrt(dot(vec3(_998, _1001, _1004), vec3(_998, _1001, _1004)));
    vec4 _1021 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1027 = (_1021.x * 2.0) + (-1.0);
    float _1028 = (_1021.y * 2.0) + (-1.0);
    float _1029 = dot(vec2(_1027, _1028), vec2(_1027, _1028));
    float _4829 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1034 = sqrt(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))));
    float _1037 = fma(_1034, _313, fma(_1028, _306, _1027 * _285));
    float _1040 = fma(_1034, _314, fma(_1028, _307, _1027 * _286));
    float _1043 = fma(_1034, _315, fma(_1028, _308, _1027 * _287));
    float _1047 = inversesqrt(dot(vec3(_1037, _1040, _1043), vec3(_1037, _1040, _1043)));
    float _1048 = _1047 * _1037;
    float _1049 = _1047 * _1040;
    float _1050 = _1047 * _1043;
    float _1053 = fma(_1050, _268, fma(_1049, _267, _1048 * _266));
    float _1056 = fma(_1050, _301, fma(_1049, _300, _1048 * _299));
    float _1059 = fma(_1050, _315, fma(_1049, _314, _1048 * _313));
    float _1063 = inversesqrt(dot(vec3(_1053, _1056, _1059), vec3(_1053, _1056, _1059)));
    float _1069 = fma(_830, _268, fma(_829, _267, _828 * _266));
    float _1072 = fma(_830, _301, fma(_829, _300, _828 * _299));
    float _1075 = fma(_830, _315, fma(_829, _314, _828 * _313));
    float _1079 = inversesqrt(dot(vec3(_1069, _1072, _1075), vec3(_1069, _1072, _1075)));
    float _1080 = _1079 * _1069;
    float _1081 = _1079 * _1072;
    float _1082 = _1079 * _1075;
    float _1089 = (((_1063 * _1053) - _1080) * _350) + _1080;
    float _1090 = (((_1063 * _1056) - _1081) * _350) + _1081;
    float _1091 = (((_1063 * _1059) - _1082) * _350) + _1082;
    vec4 _1104 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1110 = (_1104.x * 2.0) + (-1.0);
    float _1111 = (_1104.y * 2.0) + (-1.0);
    float _1112 = dot(vec2(_1110, _1111), vec2(_1110, _1111));
    float _4840 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1117 = sqrt(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))));
    float _1120 = fma(_1117, _313, fma(_1111, _306, _1110 * _285));
    float _1123 = fma(_1117, _314, fma(_1111, _307, _1110 * _286));
    float _1126 = fma(_1117, _315, fma(_1111, _308, _1110 * _287));
    float _1130 = inversesqrt(dot(vec3(_1120, _1123, _1126), vec3(_1120, _1123, _1126)));
    float _1131 = _1130 * _1120;
    float _1132 = _1130 * _1123;
    float _1133 = _1130 * _1126;
    float _1136 = fma(_1133, _268, fma(_1132, _267, _1131 * _266));
    float _1139 = fma(_1133, _301, fma(_1132, _300, _1131 * _299));
    float _1142 = fma(_1133, _315, fma(_1132, _314, _1131 * _313));
    float _1146 = inversesqrt(dot(vec3(_1136, _1139, _1142), vec3(_1136, _1139, _1142)));
    float _1156 = (((_1146 * _1136) - _1089) * _353) + _1089;
    float _1157 = (((_1146 * _1139) - _1090) * _353) + _1090;
    float _1158 = (((_1146 * _1142) - _1091) * _353) + _1091;
    vec4 _1171 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1177 = (_1171.x * 2.0) + (-1.0);
    float _1178 = (_1171.y * 2.0) + (-1.0);
    float _1179 = dot(vec2(_1177, _1178), vec2(_1177, _1178));
    float _4851 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1184 = sqrt(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))));
    float _1187 = fma(_1184, _313, fma(_1178, _306, _1177 * _285));
    float _1190 = fma(_1184, _314, fma(_1178, _307, _1177 * _286));
    float _1193 = fma(_1184, _315, fma(_1178, _308, _1177 * _287));
    float _1197 = inversesqrt(dot(vec3(_1187, _1190, _1193), vec3(_1187, _1190, _1193)));
    float _1198 = _1197 * _1187;
    float _1199 = _1197 * _1190;
    float _1200 = _1197 * _1193;
    float _1203 = fma(_1200, _268, fma(_1199, _267, _1198 * _266));
    float _1206 = fma(_1200, _301, fma(_1199, _300, _1198 * _299));
    float _1209 = fma(_1200, _315, fma(_1199, _314, _1198 * _313));
    float _1213 = inversesqrt(dot(vec3(_1203, _1206, _1209), vec3(_1203, _1206, _1209)));
    float _1223 = (((_1213 * _1209) - _1158) * _347) + _1158;
    vec4 _1235 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1241 = (_1235.x * 2.0) + (-1.0);
    float _1242 = (_1235.y * 2.0) + (-1.0);
    float _1243 = dot(vec2(_1241, _1242), vec2(_1241, _1242));
    float _4862 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _1248 = sqrt(1.0 - (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))));
    float _1251 = fma(_1248, _313, fma(_1242, _306, _1241 * _285));
    float _1254 = fma(_1248, _314, fma(_1242, _307, _1241 * _286));
    float _1257 = fma(_1248, _315, fma(_1242, _308, _1241 * _287));
    float _1261 = inversesqrt(dot(vec3(_1251, _1254, _1257), vec3(_1251, _1254, _1257)));
    float _1262 = _1261 * _1251;
    float _1263 = _1261 * _1254;
    float _1264 = _1261 * _1257;
    float _1267 = fma(_1264, _268, fma(_1263, _267, _1262 * _266));
    float _1270 = fma(_1264, _301, fma(_1263, _300, _1262 * _299));
    float _1273 = fma(_1264, _315, fma(_1263, _314, _1262 * _313));
    float _1277 = inversesqrt(dot(vec3(_1267, _1270, _1273), vec3(_1267, _1270, _1273)));
    vec4 _1315 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1329 = (((((((_998 * _499) * _1008) * cbMtdParam._m0[24u].z) + ((((_608 * _592) * _942) * _952) * cbMtdParam._m0[24u].w)) + _1156) + (((_1213 * _1203) - _1156) * _347)) + (((_1267 * _509) * _1277) * cbMtdParam._m0[23u].z)) + (((_1315.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1334 = (((((((_1001 * _499) * _1008) * cbMtdParam._m0[24u].z) + ((((_609 * _592) * _945) * _952) * cbMtdParam._m0[24u].w)) + _1157) + (((_1213 * _1206) - _1157) * _347)) + (((_1270 * _509) * _1277) * cbMtdParam._m0[23u].z)) + (((_1315.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1337 = fma(_1223, _313, fma(_1334, _299, _1329 * _266));
    float _1340 = fma(_1223, _314, fma(_1334, _300, _1329 * _267));
    float _1343 = fma(_1223, _315, fma(_1334, _301, _1329 * _268));
    float _1347 = inversesqrt(dot(vec3(_1337, _1340, _1343), vec3(_1337, _1340, _1343)));
    float _1348 = _1347 * _1337;
    float _1349 = _1347 * _1340;
    float _1350 = _1347 * _1343;
    float _4873 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _1351 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
    float _4884 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _1352 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _4895 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4906 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4917 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4928 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _1356 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _1372 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1412 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1422 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1412);
    float _1423 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1412);
    float _1424 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1412);
    float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
    float _1429 = _1422 * _1428;
    float _1430 = _1423 * _1428;
    float _1431 = _1424 * _1428;
    vec4 _1436 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1438 = _1436.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1609 = sqrt(((_1422 * _1422) + (_1423 * _1423)) + (_1424 * _1424));
        float _1615 = (cbMatDynParam._m0[5u].x * _1609) + cbMatDynParam._m0[5u].y;
        float _4939 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _1620 = (cbMatDynParam._m0[5u].z * _1609) + cbMatDynParam._m0[5u].w;
        float _4950 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) - _1616)) + _1616) < ((_1438 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1468 = fma(_1350, cbSceneParam._m0[5u].z, fma(_1349, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1348));
    float _1471 = fma(_1350, cbSceneParam._m0[6u].z, fma(_1349, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1348));
    float _1474 = fma(_1350, cbSceneParam._m0[7u].z, fma(_1349, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1348));
    uint _1487 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1488 = _1487 + 9u;
    uint _1489 = _1488 + uint(cbMatDynParam._m0[0u].w);
    float _1495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * cbInstanceData._m0[_1489].x;
    float _1496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * cbInstanceData._m0[_1489].y;
    float _1497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * cbInstanceData._m0[_1489].z;
    float _4961 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _1498 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
    float _4972 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _1499 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
    float _4983 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
    float _1500 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
    float _1501 = 1.0 - _1356;
    float _1502 = _1498 * _1501;
    float _1503 = _1499 * _1501;
    float _1504 = _1500 * _1501;
    float _1509 = (_1498 + (-0.039999999105930328369140625)) * _1356;
    float _1510 = (_1499 + (-0.039999999105930328369140625)) * _1356;
    float _1511 = (_1500 + (-0.039999999105930328369140625)) * _1356;
    float _1512 = _1509 + 0.039999999105930328369140625;
    float _1514 = _1510 + 0.039999999105930328369140625;
    float _1515 = _1511 + 0.039999999105930328369140625;
    vec4 _1524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1449, cbSceneParam._m0[86u].y * _1450));
    float _1527 = _1524.x * TEXCOORD_7.w;
    float _1528 = dot(vec3(_1348, _1349, _1350), vec3(_1429, _1430, _1431));
    float _1531 = _1528 * 2.0;
    float _1535 = (_1531 * _1348) - _1429;
    float _1536 = (_1531 * _1349) - _1430;
    float _1537 = (_1531 * _1350) - _1431;
    float _1541 = abs(dot(vec3(_1429, _1430, _1431), vec3(_1348, _1349, _1350)));
    float _4994 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1543 = sqrt(_1352);
    float _1555 = exp2((_1543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1543 * 3.0));
    float _1561 = (1.0 - _1555) * ((_1543 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1562 = _1555 * _1543;
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1928;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1653 = fma(_1598, cbModelParam._m0[26u].z, fma(_1594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1590));
        float _1657 = fma(_1598, cbModelParam._m0[27u].z, fma(_1594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1590));
        float _1661 = fma(_1598, cbModelParam._m0[28u].z, fma(_1594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1590));
        float _1686 = _1590 + _1348;
        float _1687 = _1594 + _1349;
        float _1688 = _1598 + _1350;
        float _1698 = fma(_1688, cbModelParam._m0[26u].z, fma(_1687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1686)) - _1653;
        float _1699 = fma(_1688, cbModelParam._m0[27u].z, fma(_1687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1686)) - _1657;
        float _1700 = fma(_1688, cbModelParam._m0[28u].z, fma(_1687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1686)) - _1661;
        float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
        float _1717 = ((_1704 * _1698) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1718 = ((_1704 * _1699) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1719 = ((_1704 * _1700) / cbModelParam._m0[34u].z) + ((((((_1661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        float _1756 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1722.x + (-0.5));
        float _1758 = _1756 * (_1722.y + (-0.5));
        float _1759 = _1756 * (_1722.z + (-0.5));
        float _1766 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1729.x + (-0.5));
        float _1768 = _1766 * (_1729.y + (-0.5));
        float _1769 = _1766 * (_1729.z + (-0.5));
        float _1776 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1736.x + (-0.5));
        float _1778 = _1776 * (_1736.y + (-0.5));
        float _1779 = _1776 * (_1736.z + (-0.5));
        float _1786 = exp2((_1743.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1743.x + (-0.5));
        float _1788 = _1786 * (_1743.y + (-0.5));
        float _1789 = _1786 * (_1743.z + (-0.5));
        float _1790 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1791 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1792 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1793 = _1757 * 0.5;
        float _1794 = _1767 * 0.5;
        float _1795 = _1777 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1810 = (dot(vec3(_1348, _1349, _1350), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _5020 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1820 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1790 + 9.9999997473787516355514526367188e-06);
        float _5031 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _5042 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_1822 + 1.0))) + _1827) * _1790;
        float _1837 = _1758 * 0.5;
        float _1838 = _1768 * 0.5;
        float _1839 = _1778 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1348, _1349, _1350), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _5053 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1791 + 9.9999997473787516355514526367188e-06);
        float _5064 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _5075 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_1864 + 1.0))) + _1869) * _1791;
        float _1879 = _1759 * 0.5;
        float _1880 = _1769 * 0.5;
        float _1881 = _1779 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1348, _1349, _1350), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _5086 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1792 + 9.9999997473787516355514526367188e-06);
        float _5097 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _5108 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_1906 + 1.0))) + _1911) * _1792;
        _1928 = _1759;
        _1930 = _1758;
        _1931 = _1757;
        _1932 = _1769;
        _1933 = _1768;
        _1934 = _1767;
        _1935 = _1779;
        _1936 = _1778;
        _1937 = _1777;
        _1938 = _1792;
        _1939 = _1791;
        _1940 = _1790;
        _1941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
        _1942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
        _1943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
    }
    else
    {
        _1928 = _1929;
        _1930 = _1929;
        _1931 = _1929;
        _1932 = _1929;
        _1933 = _1929;
        _1934 = _1929;
        _1935 = _1929;
        _1936 = _1929;
        _1937 = _1929;
        _1938 = _1929;
        _1939 = _1929;
        _1940 = _1929;
        _1941 = 0.0;
        _1942 = 0.0;
        _1943 = 0.0;
    }
    float _2241;
    float _2242;
    float _2243;
    float _2244;
    float _2245;
    float _2246;
    float _2247;
    float _2248;
    float _2249;
    float _2250;
    float _2251;
    float _2252;
    float _2253;
    float _2254;
    float _2255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1972 = fma(_1598, cbModelParam._m0[30u].z, fma(_1594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1590));
        float _1976 = fma(_1598, cbModelParam._m0[31u].z, fma(_1594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1590));
        float _1980 = fma(_1598, cbModelParam._m0[32u].z, fma(_1594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1590));
        float _2003 = _1590 + _1348;
        float _2004 = _1594 + _1349;
        float _2005 = _1598 + _1350;
        float _2015 = fma(_2005, cbModelParam._m0[30u].z, fma(_2004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _2003)) - _1972;
        float _2016 = fma(_2005, cbModelParam._m0[31u].z, fma(_2004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _2003)) - _1976;
        float _2017 = fma(_2005, cbModelParam._m0[32u].z, fma(_2004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _2003)) - _1980;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2034 = ((_2021 * _2015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2035 = ((_2021 * _2016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2036 = ((_2021 * _2017) / cbModelParam._m0[35u].z) + ((((((_1980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2034, _2035, _2036), 0.0);
        vec4 _2045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2034, _2035, _2036), 0.0);
        vec4 _2052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2034, _2035, _2036), 0.0);
        vec4 _2059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2034, _2035, _2036), 0.0);
        float _2071 = exp2((_2038.w + (-0.5)) * 20.0) * 2.0;
        float _2072 = _2071 * (_2038.x + (-0.5));
        float _2073 = _2071 * (_2038.y + (-0.5));
        float _2074 = _2071 * (_2038.z + (-0.5));
        float _2081 = exp2((_2045.w + (-0.5)) * 20.0) * 2.0;
        float _2082 = _2081 * (_2045.x + (-0.5));
        float _2083 = _2081 * (_2045.y + (-0.5));
        float _2084 = _2081 * (_2045.z + (-0.5));
        float _2091 = exp2((_2052.w + (-0.5)) * 20.0) * 2.0;
        float _2092 = _2091 * (_2052.x + (-0.5));
        float _2093 = _2091 * (_2052.y + (-0.5));
        float _2094 = _2091 * (_2052.z + (-0.5));
        float _2101 = exp2((_2059.w + (-0.5)) * 20.0) * 2.0;
        float _2102 = _2101 * (_2059.x + (-0.5));
        float _2103 = _2101 * (_2059.y + (-0.5));
        float _2104 = _2101 * (_2059.z + (-0.5));
        float _2105 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2072 * 0.5;
        float _2109 = _2082 * 0.5;
        float _2110 = _2092 * 0.5;
        float _2111 = dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110));
        float _2116 = (_2111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2111);
        float _2124 = (dot(vec3(_1348, _1349, _1350), vec3(_2116 * _2108, _2116 * _2109, _2116 * _2110)) + 1.0) * 0.5;
        float _5149 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2133 = sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110)) / (_2105 + 9.9999997473787516355514526367188e-06);
        float _5160 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
        float _2135 = _2134 * 2.0;
        float _2139 = (1.0 - _2134) / (_2134 + 1.0);
        float _5171 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
        float _2149 = ((((1.0 - _2140) * (_2135 + 2.0)) * exp2(log2(isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0))) * (_2135 + 1.0))) + _2140) * _2105;
        float _2150 = _2073 * 0.5;
        float _2151 = _2083 * 0.5;
        float _2152 = _2093 * 0.5;
        float _2153 = dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152));
        float _2158 = (_2153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2153);
        float _2166 = (dot(vec3(_1348, _1349, _1350), vec3(_2158 * _2150, _2158 * _2151, _2158 * _2152)) + 1.0) * 0.5;
        float _5182 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2175 = sqrt(((_2151 * _2151) + (_2150 * _2150)) + (_2152 * _2152)) / (_2106 + 9.9999997473787516355514526367188e-06);
        float _5193 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
        float _2177 = _2176 * 2.0;
        float _2181 = (1.0 - _2176) / (_2176 + 1.0);
        float _5204 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
        float _2191 = ((((1.0 - _2182) * (_2177 + 2.0)) * exp2(log2(isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_2177 + 1.0))) + _2182) * _2106;
        float _2192 = _2074 * 0.5;
        float _2193 = _2084 * 0.5;
        float _2194 = _2094 * 0.5;
        float _2195 = dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194));
        float _2200 = (_2195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2195);
        float _2208 = (dot(vec3(_1348, _1349, _1350), vec3(_2200 * _2192, _2200 * _2193, _2200 * _2194)) + 1.0) * 0.5;
        float _5215 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2217 = sqrt(((_2193 * _2193) + (_2192 * _2192)) + (_2194 * _2194)) / (_2107 + 9.9999997473787516355514526367188e-06);
        float _5226 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0));
        float _2219 = _2218 * 2.0;
        float _2223 = (1.0 - _2218) / (_2218 + 1.0);
        float _5237 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0));
        float _2233 = ((((1.0 - _2224) * (_2219 + 2.0)) * exp2(log2(isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_2219 + 1.0))) + _2224) * _2107;
        _2241 = _2074;
        _2242 = _2073;
        _2243 = _2072;
        _2244 = _2084;
        _2245 = _2083;
        _2246 = _2082;
        _2247 = _2094;
        _2248 = _2093;
        _2249 = _2092;
        _2250 = _2107;
        _2251 = _2106;
        _2252 = _2105;
        _2253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)));
        _2254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0)));
        _2255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0)));
    }
    else
    {
        _2241 = _1929;
        _2242 = _1929;
        _2243 = _1929;
        _2244 = _1929;
        _2245 = _1929;
        _2246 = _1929;
        _2247 = _1929;
        _2248 = _1929;
        _2249 = _1929;
        _2250 = _1929;
        _2251 = _1929;
        _2252 = _1929;
        _2253 = 0.0;
        _2254 = 0.0;
        _2255 = 0.0;
    }
    float _2265 = (cbModelParam._m0[1u].x * (_2253 - _1941)) + _1941;
    float _2266 = (cbModelParam._m0[1u].x * (_2254 - _1942)) + _1942;
    float _2267 = (cbModelParam._m0[1u].x * (_2255 - _1943)) + _1943;
    float _2288 = fma(_2267, cbSceneParam._m0[89u].z, fma(_2266, cbSceneParam._m0[89u].y, _2265 * cbSceneParam._m0[89u].x));
    float _2291 = fma(_2267, cbSceneParam._m0[90u].z, fma(_2266, cbSceneParam._m0[90u].y, _2265 * cbSceneParam._m0[90u].x));
    float _2294 = fma(_2267, cbSceneParam._m0[91u].z, fma(_2266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2265));
    float _2309 = _1535 * 0.5;
    float _2310 = _1536 * 0.5;
    float _2311 = _1537 * 0.5;
    float _2312 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_2243, _2246, _2249, _2252));
    float _2315 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_2242, _2245, _2248, _2251));
    float _2318 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_2241, _2244, _2247, _2250));
    float _2352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2325 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_1928, _1932, _1935, _1938));
        float _2329 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_1930, _1933, _1936, _1939));
        float _2333 = dot(vec4(_2309, _2310, _2311, 1.0), vec4(_1931, _1934, _1937, _1940));
        float _2340 = dot(vec4(cbModelParam._m0[39u]), vec4(_2309, _2310, _2311, 1.0));
        _2352 = dot(vec3(isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)), isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0)), isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2340) ? 0.0 : (isnan(0.0) ? _2340 : max(0.0, _2340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2352 = 1.0;
    }
    float _2363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2354 = dot(vec4(cbModelParam._m0[40u]), vec4(_2309, _2310, _2311, 1.0));
        _2363 = dot(vec3(isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)), isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)), isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2354) ? 0.0 : (isnan(0.0) ? _2354 : max(0.0, _2354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2363 = 1.0;
    }
    float _2367 = (_2363 * cbModelParam._m0[1u].x) + (_2352 * (1.0 - cbModelParam._m0[1u].x));
    float _2377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1352);
    float _2378 = isnan(_2377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2377 : min(cbModelParam._m0[25u].z, _2377));
    float _2458;
    float _2460;
    float _2462;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2425 = fma(_1598, cbModelParam._m0[13u].z, fma(_1594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1590)) + cbModelParam._m0[13u].w;
        float _2429 = fma(_1598, cbModelParam._m0[14u].z, fma(_1594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1590)) + cbModelParam._m0[14u].w;
        float _2433 = fma(_1598, cbModelParam._m0[15u].z, fma(_1594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1590)) + cbModelParam._m0[15u].w;
        float _2436 = fma(_1537, cbModelParam._m0[13u].z, fma(_1536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1535));
        float _2439 = fma(_1537, cbModelParam._m0[14u].z, fma(_1536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1535));
        float _2442 = fma(_1537, cbModelParam._m0[15u].z, fma(_1536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1535));
        float _2470;
        if (_2436 > 0.0)
        {
            _2470 = abs((1.0 - _2425) / _2436);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2436 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2425 + 1.0) / _2436);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2470 = frontier_phi_19_17_ladder;
        }
        float _2641;
        if (_2439 > 0.0)
        {
            _2641 = abs((1.0 - _2429) / _2439);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2439 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2429 + 1.0) / _2439);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2641 = frontier_phi_28_24_ladder;
        }
        float _2936;
        if (_2442 > 0.0)
        {
            _2936 = abs((1.0 - _2433) / _2442);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2442 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2433 + 1.0) / _2442);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2936 = frontier_phi_40_35_ladder;
        }
        float _2938 = isnan(_2641) ? _2470 : (isnan(_2470) ? _2641 : min(_2470, _2641));
        float _2939 = isnan(_2936) ? _2938 : (isnan(_2938) ? _2936 : min(_2938, _2936));
        float _2943 = (_2939 * _2436) + _2425;
        float _2944 = (_2939 * _2439) + _2429;
        float _2945 = (_2939 * _2442) + _2433;
        float _2946 = _2939 * 9.9999997473787516355514526367188e-05;
        float _2948 = (-1.0) - _2946;
        float _2950 = _2946 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2945 > _2950) || ((_2945 < _2948) || ((_2944 > _2950) || ((_2944 < _2948) || ((_2943 < _2948) || (_2943 > _2950))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2945, cbModelParam._m0[9u].z, fma(_2944, cbModelParam._m0[9u].y, _2943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2945, cbModelParam._m0[10u].z, fma(_2944, cbModelParam._m0[10u].y, _2943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2945, cbModelParam._m0[11u].z, fma(_2944, cbModelParam._m0[11u].y, _2943 * cbModelParam._m0[11u].x))), _2378);
            frontier_phi_18_40_ladder = _3090.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3090.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3090.x * cbModelParam._m0[1u].y;
        }
        _2458 = frontier_phi_18_40_ladder_2;
        _2460 = frontier_phi_18_40_ladder_1;
        _2462 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1535, _1536, _1537), _2378);
        _2458 = _2446.x * cbModelParam._m0[1u].y;
        _2460 = _2446.y * cbModelParam._m0[1u].y;
        _2462 = _2446.z * cbModelParam._m0[1u].y;
    }
    float _2466 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1352);
    float _2467 = isnan(_2466) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2466 : min(cbModelParam._m0[25u].w, _2466));
    float _2556;
    float _2558;
    float _2560;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2520 = fma(_1598, cbModelParam._m0[21u].z, fma(_1594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1590)) + cbModelParam._m0[21u].w;
        float _2524 = fma(_1598, cbModelParam._m0[22u].z, fma(_1594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1590)) + cbModelParam._m0[22u].w;
        float _2528 = fma(_1598, cbModelParam._m0[23u].z, fma(_1594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1590)) + cbModelParam._m0[23u].w;
        float _2531 = fma(_1537, cbModelParam._m0[21u].z, fma(_1536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1535));
        float _2534 = fma(_1537, cbModelParam._m0[22u].z, fma(_1536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1535));
        float _2537 = fma(_1537, cbModelParam._m0[23u].z, fma(_1536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1535));
        float _2646;
        if (_2531 > 0.0)
        {
            _2646 = abs((1.0 - _2520) / _2531);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2531 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2520 + 1.0) / _2531);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2646 = frontier_phi_30_26_ladder;
        }
        float _2963;
        if (_2534 > 0.0)
        {
            _2963 = abs((1.0 - _2524) / _2534);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2534 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2524 + 1.0) / _2534);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2963 = frontier_phi_42_37_ladder;
        }
        float _3301;
        if (_2537 > 0.0)
        {
            _3301 = abs((1.0 - _2528) / _2537);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2537 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2528 + 1.0) / _2537);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _3301 = frontier_phi_52_49_ladder;
        }
        float _3303 = isnan(_2963) ? _2646 : (isnan(_2646) ? _2963 : min(_2646, _2963));
        float _3304 = isnan(_3301) ? _3303 : (isnan(_3303) ? _3301 : min(_3303, _3301));
        float _3308 = (_3304 * _2531) + _2520;
        float _3309 = (_3304 * _2534) + _2524;
        float _3310 = (_3304 * _2537) + _2528;
        float _3311 = _3304 * 9.9999997473787516355514526367188e-05;
        float _3312 = (-1.0) - _3311;
        float _3314 = _3311 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_3310 > _3314) || ((_3310 < _3312) || ((_3309 > _3314) || ((_3309 < _3312) || ((_3308 < _3312) || (_3308 > _3314))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3432 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3310, cbModelParam._m0[17u].z, fma(_3309, cbModelParam._m0[17u].y, _3308 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3310, cbModelParam._m0[18u].z, fma(_3309, cbModelParam._m0[18u].y, _3308 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3310, cbModelParam._m0[19u].z, fma(_3309, cbModelParam._m0[19u].y, _3308 * cbModelParam._m0[19u].x))), _2467);
            frontier_phi_27_52_ladder = _3432.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3432.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3432.x * cbModelParam._m0[1u].z;
        }
        _2556 = frontier_phi_27_52_ladder_2;
        _2558 = frontier_phi_27_52_ladder_1;
        _2560 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1535, _1536, _1537), _2467);
        _2556 = _2540.x * cbModelParam._m0[1u].z;
        _2558 = _2540.y * cbModelParam._m0[1u].z;
        _2560 = _2540.z * cbModelParam._m0[1u].z;
    }
    float _2573 = (((_1561 * _1512) + _1562) * _1527) * ((cbModelParam._m0[1u].w * (_2556 - _2458)) + _2458);
    float _2575 = (((_1561 * _1514) + _1562) * _1527) * ((cbModelParam._m0[1u].w * (_2558 - _2460)) + _2460);
    float _2577 = (((_1561 * _1515) + _1562) * _1527) * ((cbModelParam._m0[1u].w * (_2560 - _2462)) + _2462);
    float _2580 = fma(_2577, cbSceneParam._m0[89u].z, fma(_2575, cbSceneParam._m0[89u].y, _2573 * cbSceneParam._m0[89u].x));
    float _2583 = fma(_2577, cbSceneParam._m0[90u].z, fma(_2575, cbSceneParam._m0[90u].y, _2573 * cbSceneParam._m0[90u].x));
    float _2586 = fma(_2577, cbSceneParam._m0[91u].z, fma(_2575, cbSceneParam._m0[91u].y, _2573 * cbSceneParam._m0[91u].x));
    float _2620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2633 = _2620 / _2632;
    float _2634 = _2624 / _2632;
    float _2635 = _2628 / _2632;
    float _2782;
    float _2783;
    float _2784;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2662 = ((uint(_2635 > cbSceneParam._m0[59u].y) + uint(_2635 > cbSceneParam._m0[59u].x)) + uint(_2635 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2663 = _2662 + 43u;
        uint _2671 = _2662 + 44u;
        uint _2679 = _2662 + 45u;
        uint _2687 = _2662 + 46u;
        float _2698 = fma(_2632, cbSceneParam._m0[_2663].w, fma(_2628, cbSceneParam._m0[_2663].z, fma(_2624, cbSceneParam._m0[_2663].y, _2620 * cbSceneParam._m0[_2663].x)));
        float _2702 = fma(_2632, cbSceneParam._m0[_2671].w, fma(_2628, cbSceneParam._m0[_2671].z, fma(_2624, cbSceneParam._m0[_2671].y, _2620 * cbSceneParam._m0[_2671].x)));
        float _2710 = fma(_2632, cbSceneParam._m0[_2687].w, fma(_2628, cbSceneParam._m0[_2687].z, fma(_2624, cbSceneParam._m0[_2687].y, _2620 * cbSceneParam._m0[_2687].x)));
        float _2715 = cbSceneParam._m0[33u].z * _2710;
        float _2717 = cbSceneParam._m0[33u].w * _2710;
        float _2720 = fma(_2632, cbSceneParam._m0[_2679].w, fma(_2628, cbSceneParam._m0[_2679].z, fma(_2624, cbSceneParam._m0[_2679].y, _2620 * cbSceneParam._m0[_2679].x))) / _2710;
        float _2768 = (cbSceneParam._m0[33u].x - sqrt(((_2634 * _2634) + (_2633 * _2633)) + (_2635 * _2635))) * cbSceneParam._m0[33u].y;
        float _5363 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2775 = (isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2715 + _2698) / _2710, (_2717 + _2702) / _2710), _2720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2717 + _2698) / _2710, (_2702 - _2715) / _2710), _2720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2698 - _2715) / _2710, (_2702 - _2717) / _2710), _2720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2698 - _2717) / _2710, (_2715 + _2702) / _2710), _2720), 0.0)).x), vec4(0.25)));
        _2782 = 1.0 - (_2775 * cbSceneParam._m0[34u].x);
        _2783 = 1.0 - (_2775 * cbSceneParam._m0[34u].y);
        _2784 = 1.0 - (_2775 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2782 = 1.0;
        _2783 = 1.0;
        _2784 = 1.0;
    }
    float _2848;
    float _2850;
    float _2852;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2836 = fma(_2632, cbSceneParam._m0[63u].w, fma(_2628, cbSceneParam._m0[63u].z, fma(_2624, cbSceneParam._m0[63u].y, _2620 * cbSceneParam._m0[63u].x)));
        float _2837 = fma(_2632, cbSceneParam._m0[60u].w, fma(_2628, cbSceneParam._m0[60u].z, fma(_2624, cbSceneParam._m0[60u].y, _2620 * cbSceneParam._m0[60u].x))) / _2836;
        float _2838 = fma(_2632, cbSceneParam._m0[61u].w, fma(_2628, cbSceneParam._m0[61u].z, fma(_2624, cbSceneParam._m0[61u].y, _2620 * cbSceneParam._m0[61u].x))) / _2836;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2837 >= cbSceneParam._m0[64u].x) && (_2838 >= cbSceneParam._m0[64u].y)) && (_2837 <= cbSceneParam._m0[64u].z)) && (_2838 <= cbSceneParam._m0[64u].w))
        {
            float _2976 = fma(_2632, cbSceneParam._m0[62u].w, fma(_2628, cbSceneParam._m0[62u].z, fma(_2624, cbSceneParam._m0[62u].y, _2620 * cbSceneParam._m0[62u].x))) / _2836;
            float _2980 = isnan(cbSceneParam._m0[41u].w) ? _2976 : (isnan(_2976) ? cbSceneParam._m0[41u].w : max(_2976, cbSceneParam._m0[41u].w));
            float _3023 = (cbSceneParam._m0[33u].x - sqrt(((_2634 * _2634) + (_2633 * _2633)) + (_2635 * _2635))) * cbSceneParam._m0[33u].y;
            float _5379 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
            float _3030 = (isnan(1.0) ? _5379 : (isnan(_5379) ? 1.0 : min(_5379, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2837, cbSceneParam._m0[33u].w + _2838), _2980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2837, _2838 - cbSceneParam._m0[33u].z), _2980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2837 - cbSceneParam._m0[33u].z, _2838 - cbSceneParam._m0[33u].w), _2980), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2837 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2838), _2980), 0.0)).x), vec4(0.25)));
            float _3034 = 1.0 - (_3030 * cbSceneParam._m0[34u].x);
            float _3035 = 1.0 - (_3030 * cbSceneParam._m0[34u].y);
            float _3036 = 1.0 - (_3030 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_3035) ? _2783 : (isnan(_2783) ? _3035 : min(_2783, _3035));
            frontier_phi_39_38_ladder_1 = isnan(_3034) ? _2782 : (isnan(_2782) ? _3034 : min(_2782, _3034));
            frontier_phi_39_38_ladder_2 = isnan(_3036) ? _2784 : (isnan(_2784) ? _3036 : min(_2784, _3036));
        }
        else
        {
            frontier_phi_39_38_ladder = _2783;
            frontier_phi_39_38_ladder_1 = _2782;
            frontier_phi_39_38_ladder_2 = _2784;
        }
        _2848 = frontier_phi_39_38_ladder_1;
        _2850 = frontier_phi_39_38_ladder;
        _2852 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2848 = _2782;
        _2850 = _2783;
        _2852 = _2784;
    }
    uvec4 _2857 = floatBitsToUint(cbInstanceData._m0[_1487 + 5u]);
    uint _2859 = _2857.x * 14u;
    uint _2860 = _2859 + 13u;
    float _2867 = _1527 + (-1.0);
    float _2872 = (cbLight._m0[_2860].x * _2867) + 1.0;
    float _2873 = (cbLight._m0[_2860].y * _2867) + 1.0;
    float _2874 = (cbLight._m0[_2860].z * _2867) + 1.0;
    float _2875 = (cbLight._m0[_2860].w * _2867) + 1.0;
    uint _2876 = _2859 + 5u;
    float _2882 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    uint _2886 = _2859 + 4u;
    float _2895 = isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0));
    uint _2899 = _2859 | 1u;
    float _2910 = dot(vec3(cbLight._m0[_2859].xyz), vec3(_1348, _1349, _1350));
    float _2913 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_1348, _1349, _1350));
    float _5415 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
    float _5426 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2918 = (isnan(1.0) ? _5415 : (isnan(_5415) ? 1.0 : min(_5415, 1.0))) * 0.3183098733425140380859375;
    float _2920 = (isnan(1.0) ? _5426 : (isnan(_5426) ? 1.0 : min(_5426, 1.0))) * 0.3183098733425140380859375;
    float _2927 = ((cbLight._m0[_2876].x * _2882) * _2920) + (((cbLight._m0[_2886].x * _2848) * _2895) * _2918);
    float _2928 = ((_2882 * cbLight._m0[_2876].y) * _2920) + (((cbLight._m0[_2886].y * _2850) * _2895) * _2918);
    float _2929 = ((_2882 * cbLight._m0[_2876].z) * _2920) + (((cbLight._m0[_2886].z * _2852) * _2895) * _2918);
    uvec4 _2933 = floatBitsToUint(cbLight._m0[_2859 + 12u]);
    bool _2935 = _2933.x == 0u;
    float _3037;
    float _3039;
    float _3041;
    if (_2935)
    {
        _3037 = _2927;
        _3039 = _2928;
        _3041 = _2929;
    }
    else
    {
        uint _3045 = _2859 + 6u;
        float _3061 = (dot(vec3(cbLight._m0[_2859 + 2u].xyz), vec3(_1348, _1349, _1350)) * 0.5) + 0.5;
        float _3062 = _3061 * _3061;
        float _5437 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3063 = isnan(1.0) ? _5437 : (isnan(_5437) ? 1.0 : min(_5437, 1.0));
        float _3064 = isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0));
        _3037 = (((cbLight._m0[_3045].x * 0.3183098733425140380859375) * _3063) * _3064) + _2927;
        _3039 = (((cbLight._m0[_3045].y * 0.3183098733425140380859375) * _3063) * _3064) + _2928;
        _3041 = (((cbLight._m0[_3045].z * 0.3183098733425140380859375) * _3063) * _3064) + _2929;
    }
    bool _3044 = _2933.y == 0u;
    float _3099;
    float _3101;
    float _3103;
    if (_3044)
    {
        _3099 = _3037;
        _3101 = _3039;
        _3103 = _3041;
    }
    else
    {
        uint _3272 = _2859 + 7u;
        float _3288 = (dot(vec3(cbLight._m0[_2859 + 3u].xyz), vec3(_1348, _1349, _1350)) * 0.5) + 0.5;
        float _3289 = _3288 * _3288;
        float _5453 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
        float _3290 = isnan(1.0) ? _5453 : (isnan(_5453) ? 1.0 : min(_5453, 1.0));
        float _3291 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
        _3099 = (((cbLight._m0[_3272].x * 0.3183098733425140380859375) * _3290) * _3291) + _3037;
        _3101 = (((cbLight._m0[_3272].y * 0.3183098733425140380859375) * _3290) * _3291) + _3039;
        _3103 = (((cbLight._m0[_3272].z * 0.3183098733425140380859375) * _3290) * _3291) + _3041;
    }
    uint _3106 = _2859 + 8u;
    float _3119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2859].w)) * _1352) * 0.949999988079071044921875);
    float _3120 = _3119 * _3119;
    float _3121 = cbLight._m0[_2859].x + _1429;
    float _3122 = cbLight._m0[_2859].y + _1430;
    float _3123 = cbLight._m0[_2859].z + _1431;
    float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
    float _3128 = _3127 * _3121;
    float _3129 = _3127 * _3122;
    float _3130 = _3127 * _3123;
    float _3131 = dot(vec3(_1348, _1349, _1350), vec3(cbLight._m0[_2859].xyz));
    float _5469 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
    float _3134 = isnan(1.0) ? _5469 : (isnan(_5469) ? 1.0 : min(_5469, 1.0));
    float _5480 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _3135 = isnan(1.0) ? _5480 : (isnan(_5480) ? 1.0 : min(_5480, 1.0));
    float _3136 = dot(vec3(_1348, _1349, _1350), vec3(_3128, _3129, _3130));
    float _5491 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
    float _3139 = isnan(1.0) ? _5491 : (isnan(_5491) ? 1.0 : min(_5491, 1.0));
    float _3140 = dot(vec3(cbLight._m0[_2859].xyz), vec3(_3128, _3129, _3130));
    float _5502 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
    float _3144 = _3120 * _3120;
    float _3148 = ((_3139 * _3139) * (_3144 + (-1.0))) + 1.0;
    float _3156 = exp2(log2(1.0 - (isnan(1.0) ? _5502 : (isnan(_5502) ? 1.0 : min(_5502, 1.0)))) * 5.0);
    float _3157 = 0.959999978542327880859375 - _1509;
    float _3159 = 0.959999978542327880859375 - _1510;
    float _3160 = 0.959999978542327880859375 - _1511;
    float _3167 = 1.0 - _3120;
    float _3178 = (0.5 / (((_3135 * ((_3134 * _3167) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3167) + _3120) * _3134))) * _3134;
    float _5513 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
    float _3180 = (isnan(1.0) ? _5513 : (isnan(_5513) ? 1.0 : min(_5513, 1.0))) * (_3144 / ((_3148 * _3148) * 3.141590118408203125));
    uint _3194 = _2859 + 9u;
    float _3205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _1352) * 0.949999988079071044921875);
    float _3206 = _3205 * _3205;
    float _3207 = cbLight._m0[_2899].x + _1429;
    float _3208 = cbLight._m0[_2899].y + _1430;
    float _3209 = cbLight._m0[_2899].z + _1431;
    float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
    float _3214 = _3213 * _3207;
    float _3215 = _3213 * _3208;
    float _3216 = _3213 * _3209;
    float _3217 = dot(vec3(_1348, _1349, _1350), vec3(cbLight._m0[_2899].xyz));
    float _5524 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
    float _3220 = isnan(1.0) ? _5524 : (isnan(_5524) ? 1.0 : min(_5524, 1.0));
    float _3221 = dot(vec3(_1348, _1349, _1350), vec3(_3214, _3215, _3216));
    float _5535 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
    float _3224 = isnan(1.0) ? _5535 : (isnan(_5535) ? 1.0 : min(_5535, 1.0));
    float _3225 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_3214, _3215, _3216));
    float _5546 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
    float _3229 = _3206 * _3206;
    float _3233 = ((_3224 * _3224) * (_3229 + (-1.0))) + 1.0;
    float _3240 = exp2(log2(1.0 - (isnan(1.0) ? _5546 : (isnan(_5546) ? 1.0 : min(_5546, 1.0)))) * 5.0);
    float _3247 = 1.0 - _3206;
    float _3257 = (0.5 / (((_3135 * ((_3220 * _3247) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3247) + _3206) * _3220))) * _3220;
    float _5557 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
    float _3259 = (isnan(1.0) ? _5557 : (isnan(_5557) ? 1.0 : min(_5557, 1.0))) * (_3229 / ((_3233 * _3233) * 3.141590118408203125));
    float _3269 = (((((_3240 * _3157) + _1512) * cbLight._m0[_3194].x) * _3259) * _2882) + ((((cbLight._m0[_3106].x * _2848) * ((_3156 * _3157) + _1512)) * _3180) * _2895);
    float _3270 = (((((_3240 * _3159) + _1514) * cbLight._m0[_3194].y) * _3259) * _2882) + ((((cbLight._m0[_3106].y * _2850) * ((_3156 * _3159) + _1514)) * _3180) * _2895);
    float _3271 = (((((_3240 * _3160) + _1515) * cbLight._m0[_3194].z) * _3259) * _2882) + ((((cbLight._m0[_3106].z * _2852) * ((_3156 * _3160) + _1515)) * _3180) * _2895);
    float _3327;
    float _3329;
    float _3331;
    if (_2935)
    {
        _3327 = _3269;
        _3329 = _3270;
        _3331 = _3271;
    }
    else
    {
        uint _3333 = _2859 + 2u;
        uint _3337 = _2859 + 10u;
        float _3351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3333].w)) * _1352) * 0.949999988079071044921875);
        float _3352 = _3351 * _3351;
        float _3353 = cbLight._m0[_3333].x + _1429;
        float _3354 = cbLight._m0[_3333].y + _1430;
        float _3355 = cbLight._m0[_3333].z + _1431;
        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
        float _3360 = _3359 * _3353;
        float _3361 = _3359 * _3354;
        float _3362 = _3359 * _3355;
        float _3363 = dot(vec3(_1348, _1349, _1350), vec3(cbLight._m0[_3333].xyz));
        float _5568 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
        float _3366 = isnan(1.0) ? _5568 : (isnan(_5568) ? 1.0 : min(_5568, 1.0));
        float _3367 = dot(vec3(_1348, _1349, _1350), vec3(_3360, _3361, _3362));
        float _5579 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
        float _3370 = isnan(1.0) ? _5579 : (isnan(_5579) ? 1.0 : min(_5579, 1.0));
        float _3371 = dot(vec3(cbLight._m0[_3333].xyz), vec3(_3360, _3361, _3362));
        float _5590 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
        float _3375 = _3352 * _3352;
        float _3379 = ((_3370 * _3370) * (_3375 + (-1.0))) + 1.0;
        float _3386 = exp2(log2(1.0 - (isnan(1.0) ? _5590 : (isnan(_5590) ? 1.0 : min(_5590, 1.0)))) * 5.0);
        float _3393 = 1.0 - _3352;
        float _3403 = (0.5 / (((_3135 * ((_3366 * _3393) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3393) + _3352) * _3366))) * _3366;
        float _5601 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
        float _3405 = (isnan(1.0) ? _5601 : (isnan(_5601) ? 1.0 : min(_5601, 1.0))) * (_3375 / ((_3379 * _3379) * 3.141590118408203125));
        float _3406 = isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0));
        _3327 = (((((_3386 * _3157) + _1512) * cbLight._m0[_3337].x) * _3405) * _3406) + _3269;
        _3329 = (((((_3386 * _3159) + _1514) * cbLight._m0[_3337].y) * _3405) * _3406) + _3270;
        _3331 = (((((_3386 * _3160) + _1515) * cbLight._m0[_3337].z) * _3405) * _3406) + _3271;
    }
    float _3437;
    float _3439;
    float _3441;
    if (_3044)
    {
        _3437 = _3327;
        _3439 = _3329;
        _3441 = _3331;
    }
    else
    {
        uint _3448 = _2859 + 3u;
        uint _3452 = _2859 + 11u;
        float _3466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3448].w)) * _1352) * 0.949999988079071044921875);
        float _3467 = _3466 * _3466;
        float _3468 = cbLight._m0[_3448].x + _1429;
        float _3469 = cbLight._m0[_3448].y + _1430;
        float _3470 = cbLight._m0[_3448].z + _1431;
        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
        float _3475 = _3474 * _3468;
        float _3476 = _3474 * _3469;
        float _3477 = _3474 * _3470;
        float _3478 = dot(vec3(_1348, _1349, _1350), vec3(cbLight._m0[_3448].xyz));
        float _5617 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
        float _3481 = isnan(1.0) ? _5617 : (isnan(_5617) ? 1.0 : min(_5617, 1.0));
        float _3482 = dot(vec3(_1348, _1349, _1350), vec3(_3475, _3476, _3477));
        float _5628 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
        float _3485 = isnan(1.0) ? _5628 : (isnan(_5628) ? 1.0 : min(_5628, 1.0));
        float _3486 = dot(vec3(cbLight._m0[_3448].xyz), vec3(_3475, _3476, _3477));
        float _5639 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
        float _3490 = _3467 * _3467;
        float _3494 = ((_3485 * _3485) * (_3490 + (-1.0))) + 1.0;
        float _3501 = exp2(log2(1.0 - (isnan(1.0) ? _5639 : (isnan(_5639) ? 1.0 : min(_5639, 1.0)))) * 5.0);
        float _3508 = 1.0 - _3467;
        float _3518 = (0.5 / (((_3135 * ((_3481 * _3508) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3508) + _3467) * _3481))) * _3481;
        float _5650 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
        float _3520 = (isnan(1.0) ? _5650 : (isnan(_5650) ? 1.0 : min(_5650, 1.0))) * (_3490 / ((_3494 * _3494) * 3.141590118408203125));
        float _3521 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
        _3437 = (((((_3501 * _3157) + _1512) * cbLight._m0[_3452].x) * _3520) * _3521) + _3327;
        _3439 = (((((_3501 * _3159) + _1514) * cbLight._m0[_3452].y) * _3520) * _3521) + _3329;
        _3441 = (((((_3501 * _3160) + _1515) * cbLight._m0[_3452].z) * _3520) * _3521) + _3331;
    }
    float _3586;
    float _3588;
    float _3590;
    float _3592;
    float _3594;
    float _3596;
    if (_2857.y == 0u)
    {
        uvec4 _3542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3543 = _3542.x;
        uint _3554 = uint((float(_3542.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1450) / _3543))) + floor(float(uint(cbSceneParam._m0[85u].x * _1449) / _3543)));
        float _3564 = (log2(_2635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3565 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
        uint _3568 = uint(isnan(14.0) ? _3565 : (isnan(_3565) ? 14.0 : min(_3565, 14.0)));
        uvec4 _3573 = texelFetch(g_lightClusterGridBuffer, int(((_3568 << 2u) + (_3554 << 6u)) >> 2u));
        uint _3574 = _3573.x;
        uint _3575 = _3542.z;
        float _3674;
        float _3676;
        float _3678;
        float _3680;
        float _3682;
        float _3684;
        if (((((1u << ((_3575 >> 4u) & 15u)) + 4294967295u) & _3574) == 0u) || ((_3575 & 240u) == 0u))
        {
            _3674 = 0.0;
            _3676 = 0.0;
            _3678 = 0.0;
            _3680 = 0.0;
            _3682 = 0.0;
            _3684 = 0.0;
        }
        else
        {
            float _3675;
            float _3677;
            float _3679;
            float _3681;
            float _3683;
            float _3685;
            float _3826 = 0.0;
            float _3827 = 0.0;
            float _3828 = 0.0;
            float _3829 = 0.0;
            float _3830 = 0.0;
            float _3831 = 0.0;
            uint _3832 = 0u;
            uint _3841;
            bool _3842;
            for (;;)
            {
                _3841 = texelFetch(g_lightClassification, int((((_3568 << 5u) + (_3554 << 9u)) + (_3832 << 2u)) >> 2u)).x;
                _3842 = _3841 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3842)
                {
                    frontier_phi_73_pred = _3831;
                    frontier_phi_73_pred_1 = _3830;
                    frontier_phi_73_pred_2 = _3829;
                    frontier_phi_73_pred_3 = _3828;
                    frontier_phi_73_pred_4 = _3827;
                    frontier_phi_73_pred_5 = _3826;
                }
                else
                {
                    float _3971;
                    float _3972;
                    float _3973;
                    float _3974;
                    float _3975;
                    float _3976;
                    uint _3977;
                    _3971 = _3826;
                    _3972 = _3827;
                    _3973 = _3828;
                    _3974 = _3829;
                    _3975 = _3830;
                    _3976 = _3831;
                    _3977 = _3841;
                    float _3898;
                    float _3899;
                    float _3900;
                    float _3901;
                    float _3902;
                    float _3903;
                    for (;;)
                    {
                        uint _3981 = uint(findLSB(_3977)) + (_3832 << 5u);
                        uint _3978 = (_3977 + 4294967295u) & _3977;
                        uint _3983 = _3981 * 48u;
                        vec4 _3997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3983)).x, texelFetch(g_PointLightRenderingBuffer, int(_3983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3983 + 3u)).x));
                        uint _4003 = (_3981 * 48u) + 4u;
                        vec4 _4016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_4003)).x, texelFetch(g_PointLightRenderingBuffer, int(_4003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4003 + 3u)).x));
                        uint _4022 = (_3981 * 48u) + 8u;
                        vec3 _4033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_4022)).x, texelFetch(g_PointLightRenderingBuffer, int(_4022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4022 + 2u)).x));
                        float _4037 = _3997.x - _2633;
                        float _4038 = _3997.y - _2634;
                        float _4039 = _3997.z - _2635;
                        float _4040 = dot(vec3(_4037, _4038, _4039), vec3(_4037, _4038, _4039));
                        float _4043 = inversesqrt(_4040);
                        float _4044 = _4043 * _4037;
                        float _4045 = _4043 * _4038;
                        float _4046 = _4043 * _4039;
                        float _4047 = dot(vec3(_1468, _1471, _1474), vec3(_4044, _4045, _4046));
                        float _4052 = 1.0 - (_4040 * _3997.w);
                        float _5676 = isnan(0.0) ? _4052 : (isnan(_4052) ? 0.0 : max(_4052, 0.0));
                        float _4053 = isnan(1.0) ? _5676 : (isnan(_5676) ? 1.0 : min(_5676, 1.0));
                        float _4054 = sqrt(_4040) * _4016.w;
                        float _4056 = 1.39999997615814208984375 / (_4054 + 1.39999997615814208984375);
                        float _4057 = _4056 * _4056;
                        float _4060 = ((1.0 - _4057) * _4047) + _4057;
                        float _4063 = _4054 * _4054;
                        float _4067 = ((isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0))) * _4053) / ((_4063 * 0.699999988079071044921875) + 1.0);
                        float _4071 = (-0.0) - _2633;
                        float _4072 = (-0.0) - _2634;
                        float _4073 = (-0.0) - _2635;
                        float _4077 = inversesqrt(dot(vec3(_4071, _4072, _4073), vec3(_4071, _4072, _4073)));
                        float _4078 = _4077 * _4071;
                        float _4079 = _4077 * _4072;
                        float _4080 = _4077 * _4073;
                        float _4087 = exp2(log2(1.0 / ((_4063 * 3.5) + 5.0)) * 0.25);
                        float _4088 = 1.0 - _1543;
                        float _4095 = sqrt(1.0 - ((1.0 - (_4088 * _4088)) * (1.0 - (_4087 * _4087))));
                        float _4096 = _4095 * _4095;
                        float _4097 = _4096 * _4096;
                        float _4098 = _4078 + _4044;
                        float _4099 = _4079 + _4045;
                        float _4100 = _4080 + _4046;
                        float _4104 = inversesqrt(dot(vec3(_4098, _4099, _4100), vec3(_4098, _4099, _4100)));
                        float _4108 = dot(vec3(_1468, _1471, _1474), vec3(_4078, _4079, _4080));
                        float _5692 = isnan(0.0) ? _4108 : (isnan(_4108) ? 0.0 : max(_4108, 0.0));
                        float _4111 = isnan(1.0) ? _5692 : (isnan(_5692) ? 1.0 : min(_5692, 1.0));
                        float _4112 = dot(vec3(_1468, _1471, _1474), vec3(_4104 * _4098, _4104 * _4099, _4104 * _4100));
                        float _5703 = isnan(0.0) ? _4112 : (isnan(_4112) ? 0.0 : max(_4112, 0.0));
                        float _4115 = isnan(1.0) ? _5703 : (isnan(_5703) ? 1.0 : min(_5703, 1.0));
                        float _4119 = ((_4115 * _4115) * (_4097 + (-1.0))) + 1.0;
                        float _4120 = _4056 * _4096;
                        float _4121 = _4120 * _4120;
                        float _4124 = ((1.0 - _4121) * _4047) + _4121;
                        float _5714 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                        float _4125 = isnan(1.0) ? _5714 : (isnan(_5714) ? 1.0 : min(_5714, 1.0));
                        float _4126 = 1.0 - _4096;
                        float _4136 = (0.5 / (((_4125 * ((_4111 * _4126) + _4096)) + 9.9999999392252902907785028219223e-09) + (((_4125 * _4126) + _4096) * _4111))) * _4125;
                        float _5725 = isnan(0.0) ? _4136 : (isnan(_4136) ? 0.0 : max(_4136, 0.0));
                        float _4147 = (((_4097 * 3.1415927410125732421875) * (isnan(1.0) ? _5725 : (isnan(_5725) ? 1.0 : min(_5725, 1.0)))) / ((_4119 * _4119) * ((_4063 * 2.1991131305694580078125) + 3.141590118408203125))) * _4053;
                        _3901 = (_4067 * _4016.x) + _3974;
                        _3902 = (_4067 * _4016.y) + _3975;
                        _3903 = (_4067 * _4016.z) + _3976;
                        _3898 = (_4147 * _4033.x) + _3971;
                        _3899 = (_4147 * _4033.y) + _3972;
                        _3900 = (_4147 * _4033.z) + _3973;
                        if (_3978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3971 = _3898;
                            _3972 = _3899;
                            _3973 = _3900;
                            _3974 = _3901;
                            _3975 = _3902;
                            _3976 = _3903;
                            _3977 = _3978;
                        }
                    }
                    frontier_phi_73_pred = _3903;
                    frontier_phi_73_pred_1 = _3902;
                    frontier_phi_73_pred_2 = _3901;
                    frontier_phi_73_pred_3 = _3900;
                    frontier_phi_73_pred_4 = _3899;
                    frontier_phi_73_pred_5 = _3898;
                }
                _3685 = frontier_phi_73_pred;
                _3683 = frontier_phi_73_pred_1;
                _3681 = frontier_phi_73_pred_2;
                _3679 = frontier_phi_73_pred_3;
                _3677 = frontier_phi_73_pred_4;
                _3675 = frontier_phi_73_pred_5;
                uint _3833 = _3832 + 1u;
                if (_3833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3826 = _3675;
                    _3827 = _3677;
                    _3828 = _3679;
                    _3829 = _3681;
                    _3830 = _3683;
                    _3831 = _3685;
                    _3832 = _3833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3674 = _3675;
            _3676 = _3677;
            _3678 = _3679;
            _3680 = _3681;
            _3682 = _3683;
            _3684 = _3685;
        }
        uvec4 _3688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3689 = _3688.z;
        uint _3691 = (_3689 >> 8u) & 15u;
        float _3794;
        float _3796;
        float _3798;
        float _3800;
        float _3802;
        float _3804;
        if (((4294967295u << _3691) & _3574) == 0u)
        {
            _3794 = _3674;
            _3796 = _3676;
            _3798 = _3678;
            _3800 = _3680;
            _3802 = _3682;
            _3804 = _3684;
        }
        else
        {
            float _3819 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
            float _3820 = _3819 * _2633;
            float _3821 = _3819 * _2634;
            float _3822 = _3819 * _2635;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3691 < ((_3689 >> 12u) & 15u))
            {
                float _3795;
                float _3797;
                float _3799;
                float _3801;
                float _3803;
                float _3805;
                float _3954 = _3674;
                float _3955 = _3676;
                float _3956 = _3678;
                float _3957 = _3680;
                float _3958 = _3682;
                float _3959 = _3684;
                uint _3960 = _3691;
                uint _3969;
                bool _3970;
                for (;;)
                {
                    _3969 = texelFetch(g_lightClassification, int((((_3568 << 5u) + (_3554 << 9u)) + (_3960 << 2u)) >> 2u)).x;
                    _3970 = _3969 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3970)
                    {
                        frontier_phi_84_pred = _3958;
                        frontier_phi_84_pred_1 = _3957;
                        frontier_phi_84_pred_2 = _3956;
                        frontier_phi_84_pred_3 = _3955;
                        frontier_phi_84_pred_4 = _3954;
                        frontier_phi_84_pred_5 = _3959;
                    }
                    else
                    {
                        float _4161;
                        float _4162;
                        float _4163;
                        float _4164;
                        float _4165;
                        float _4166;
                        float _4454;
                        float _4455;
                        float _4456;
                        float _4457;
                        float _4458;
                        float _4459;
                        float _4174 = _3954;
                        float _4175 = _3955;
                        float _4176 = _3956;
                        float _4177 = _3957;
                        float _4178 = _3958;
                        float _4179 = _3959;
                        uint _4180 = _3969;
                        uint _4181;
                        vec4 _4206;
                        float _4207;
                        vec4 _4222;
                        vec3 _4234;
                        vec4 _4249;
                        vec4 _4264;
                        float _4310;
                        bool _4311;
                        for (;;)
                        {
                            uint _4191 = ((_3960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4180));
                            _4181 = (_4180 + 4294967295u) & _4180;
                            uint _4193 = _4191 * 40u;
                            _4206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 3u)).x));
                            _4207 = _4206.w;
                            uint _4209 = (_4191 * 40u) + 4u;
                            _4222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4209 + 3u)).x));
                            uint _4224 = (_4191 * 40u) + 8u;
                            _4234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4224 + 2u)).x));
                            uint _4236 = (_4191 * 40u) + 16u;
                            _4249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4236 + 3u)).x));
                            uint _4251 = (_4191 * 40u) + 20u;
                            _4264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4251 + 3u)).x));
                            uint _4266 = (_4191 * 40u) + 24u;
                            vec4 _4279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4266 + 3u)).x));
                            uint _4285 = (_4191 * 40u) + 28u;
                            vec4 _4298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4285 + 3u)).x));
                            _4310 = fma(_2635, _4298.z, fma(_2634, _4298.y, _4298.x * _2633)) + _4298.w;
                            _4311 = !((fma(_2635, _4279.z, fma(_2634, _4279.y, _4279.x * _2633)) + _4279.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_4311)
                            {
                                float _4338 = _4206.x - _2633;
                                float _4339 = _4206.y - _2634;
                                float _4340 = _4206.z - _2635;
                                float _4341 = dot(vec3(_4338, _4339, _4340), vec3(_4338, _4339, _4340));
                                float _4344 = inversesqrt(_4341);
                                float _4345 = _4344 * _4338;
                                float _4346 = _4344 * _4339;
                                float _4347 = _4344 * _4340;
                                float _4351 = 1.0 - (_4341 / (_4207 * _4207));
                                float _5736 = isnan(0.0) ? _4351 : (isnan(_4351) ? 0.0 : max(_4351, 0.0));
                                float _4352 = isnan(1.0) ? _5736 : (isnan(_5736) ? 1.0 : min(_5736, 1.0));
                                float _4356 = sqrt(_4341) * _4222.w;
                                float _4358 = 1.39999997615814208984375 / (_4356 + 1.39999997615814208984375);
                                float _4359 = _4358 * _4358;
                                float _4362 = ((1.0 - _4359) * dot(vec3(_4345, _4346, _4347), vec3(_1468, _1471, _1474))) + _4359;
                                float _4365 = _4356 * _4356;
                                float _4369 = (fma(_2635, _4249.z, fma(_2634, _4249.y, _4249.x * _2633)) + _4249.w) / _4310;
                                float _4370 = (fma(_2635, _4264.z, fma(_2634, _4264.y, _4264.x * _2633)) + _4264.w) / _4310;
                                float _4374 = 1.0 - dot(vec2(_4369, _4370), vec2(_4369, _4370));
                                float _5752 = isnan(0.0) ? _4374 : (isnan(_4374) ? 0.0 : max(_4374, 0.0));
                                float _4375 = isnan(1.0) ? _5752 : (isnan(_5752) ? 1.0 : min(_5752, 1.0));
                                float _4376 = _4375 * (((isnan(0.0) ? _4362 : (isnan(_4362) ? 0.0 : max(_4362, 0.0))) * _4352) / ((_4365 * 0.699999988079071044921875) + 1.0));
                                float _4388 = exp2(log2(1.0 / ((_4365 * 3.5) + 5.0)) * 0.25);
                                float _4389 = 1.0 - _1543;
                                float _4396 = sqrt(1.0 - ((1.0 - (_4389 * _4389)) * (1.0 - (_4388 * _4388))));
                                float _4397 = _4396 * _4396;
                                float _4398 = _4397 * _4397;
                                float _4399 = _4345 - _3820;
                                float _4400 = _4346 - _3821;
                                float _4401 = _4347 - _3822;
                                float _4405 = inversesqrt(dot(vec3(_4399, _4400, _4401), vec3(_4399, _4400, _4401)));
                                float _4409 = dot(vec3(_1468, _1471, _1474), vec3((-0.0) - _3820, (-0.0) - _3821, (-0.0) - _3822));
                                float _5763 = isnan(0.0) ? _4409 : (isnan(_4409) ? 0.0 : max(_4409, 0.0));
                                float _4412 = isnan(1.0) ? _5763 : (isnan(_5763) ? 1.0 : min(_5763, 1.0));
                                float _4413 = dot(vec3(_1468, _1471, _1474), vec3(_4405 * _4399, _4405 * _4400, _4405 * _4401));
                                float _5774 = isnan(0.0) ? _4413 : (isnan(_4413) ? 0.0 : max(_4413, 0.0));
                                float _4416 = isnan(1.0) ? _5774 : (isnan(_5774) ? 1.0 : min(_5774, 1.0));
                                float _4420 = ((_4416 * _4416) * (_4398 + (-1.0))) + 1.0;
                                float _4421 = _4358 * _4397;
                                float _4422 = _4421 * _4421;
                                float _4428 = ((1.0 - _4422) * dot(vec3(_1468, _1471, _1474), vec3(_4345, _4346, _4347))) + _4422;
                                float _5785 = isnan(0.0) ? _4428 : (isnan(_4428) ? 0.0 : max(_4428, 0.0));
                                float _4429 = isnan(1.0) ? _5785 : (isnan(_5785) ? 1.0 : min(_5785, 1.0));
                                float _4430 = 1.0 - _4397;
                                float _4440 = (0.5 / (((_4429 * ((_4412 * _4430) + _4397)) + 9.9999999392252902907785028219223e-09) + (((_4429 * _4430) + _4397) * _4412))) * _4429;
                                float _5796 = isnan(0.0) ? _4440 : (isnan(_4440) ? 0.0 : max(_4440, 0.0));
                                float _4450 = (_4375 * _4352) * (((_4398 * 3.1415927410125732421875) * (isnan(1.0) ? _5796 : (isnan(_5796) ? 1.0 : min(_5796, 1.0)))) / ((_4420 * _4420) * ((_4365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4376 * _4222.y;
                                frontier_phi_90_pred_1 = _4376 * _4222.x;
                                frontier_phi_90_pred_2 = _4450 * _4234.z;
                                frontier_phi_90_pred_3 = _4450 * _4234.y;
                                frontier_phi_90_pred_4 = _4450 * _4234.x;
                                frontier_phi_90_pred_5 = _4376 * _4222.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4458 = frontier_phi_90_pred;
                            _4457 = frontier_phi_90_pred_1;
                            _4456 = frontier_phi_90_pred_2;
                            _4455 = frontier_phi_90_pred_3;
                            _4454 = frontier_phi_90_pred_4;
                            _4459 = frontier_phi_90_pred_5;
                            _4164 = _4457 + _4177;
                            _4165 = _4458 + _4178;
                            _4166 = _4459 + _4179;
                            _4161 = _4454 + _4174;
                            _4162 = _4455 + _4175;
                            _4163 = _4456 + _4176;
                            if (_4181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4174 = _4161;
                                _4175 = _4162;
                                _4176 = _4163;
                                _4177 = _4164;
                                _4178 = _4165;
                                _4179 = _4166;
                                _4180 = _4181;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _4165;
                        frontier_phi_84_pred_1 = _4164;
                        frontier_phi_84_pred_2 = _4163;
                        frontier_phi_84_pred_3 = _4162;
                        frontier_phi_84_pred_4 = _4161;
                        frontier_phi_84_pred_5 = _4166;
                    }
                    _3803 = frontier_phi_84_pred;
                    _3801 = frontier_phi_84_pred_1;
                    _3799 = frontier_phi_84_pred_2;
                    _3797 = frontier_phi_84_pred_3;
                    _3795 = frontier_phi_84_pred_4;
                    _3805 = frontier_phi_84_pred_5;
                    uint _3961 = _3960 + 1u;
                    if (_3961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3954 = _3795;
                        _3955 = _3797;
                        _3956 = _3799;
                        _3957 = _3801;
                        _3958 = _3803;
                        _3959 = _3805;
                        _3960 = _3961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3805;
                frontier_phi_65_66_ladder_1 = _3801;
                frontier_phi_65_66_ladder_2 = _3803;
                frontier_phi_65_66_ladder_3 = _3797;
                frontier_phi_65_66_ladder_4 = _3795;
                frontier_phi_65_66_ladder_5 = _3799;
            }
            else
            {
                frontier_phi_65_66_ladder = _3684;
                frontier_phi_65_66_ladder_1 = _3680;
                frontier_phi_65_66_ladder_2 = _3682;
                frontier_phi_65_66_ladder_3 = _3676;
                frontier_phi_65_66_ladder_4 = _3674;
                frontier_phi_65_66_ladder_5 = _3678;
            }
            _3794 = frontier_phi_65_66_ladder_4;
            _3796 = frontier_phi_65_66_ladder_3;
            _3798 = frontier_phi_65_66_ladder_5;
            _3800 = frontier_phi_65_66_ladder_1;
            _3802 = frontier_phi_65_66_ladder_2;
            _3804 = frontier_phi_65_66_ladder;
        }
        float _3809 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _3586 = (_3809 * _3800) + _3099;
        _3588 = (_3809 * _3802) + _3101;
        _3590 = (_3809 * _3804) + _3103;
        _3592 = ((_3794 * _1512) * _3809) + _3437;
        _3594 = ((_3796 * _1514) * _3809) + _3439;
        _3596 = ((_3798 * _1515) * _3809) + _3441;
    }
    else
    {
        _3586 = _3099;
        _3588 = _3101;
        _3590 = _3103;
        _3592 = _3437;
        _3594 = _3439;
        _3596 = _3441;
    }
    uint _3602 = _1488 + uint(cbMatDynParam._m0[0u].w);
    float _5812 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    float _5823 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
    float _5834 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _5845 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _3628 = (((isnan(1.0) ? _5812 : (isnan(_5812) ? 1.0 : min(_5812, 1.0))) * (_3586 + ((isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))) * _1527))) + ((_3592 + ((isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))) * _2367)) * cbPerFrame._m0[3u].x)) + (((((_878 * _873.x) + cbMtdParam._m0[26u].x) * ((_350 * TEXCOORD_13.x) + TEXCOORD_10.x)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3602].x);
    float _3630 = ((((((_878 * _873.y) + cbMtdParam._m0[26u].y) * ((_350 * TEXCOORD_13.y) + TEXCOORD_10.y)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3602].y) + ((_3594 + ((isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0))) * _2367)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5823 : (isnan(_5823) ? 1.0 : min(_5823, 1.0))) * (_3588 + ((isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0))) * _1527)));
    float _3632 = ((((((_878 * _873.z) + cbMtdParam._m0[26u].z) * ((_350 * TEXCOORD_13.z) + TEXCOORD_10.z)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3602].z) + ((_3596 + ((isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0))) * _2367)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5834 : (isnan(_5834) ? 1.0 : min(_5834, 1.0))) * (_3590 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _1527)));
    float _3633 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
    float _3634 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
    float _3635 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
    float _3640 = cbInstanceData._m0[_1487 + 6u].w * (isnan(1.0) ? _5845 : (isnan(_5845) ? 1.0 : min(_5845, 1.0)));
    float _3645 = _1449 / cbSceneParam._m0[86u].x;
    float _3646 = _1450 / cbSceneParam._m0[86u].y;
    vec4 _3660 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3645, _3646, (log2((isnan(cbSceneParam._m0[77u].w) ? _1372 : (isnan(_1372) ? cbSceneParam._m0[77u].w : min(_1372, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3662 = _3660.x;
    float _3663 = _3660.y;
    float _3664 = _3660.z;
    float _3665 = _3660.w;
    float _3736;
    float _3738;
    float _3740;
    float _3742;
    if (_1372 > cbSceneParam._m0[78u].w)
    {
        float _3699 = isnan(_1372) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1372 : min(cbSceneParam._m0[80u].w, _1372));
        float _3700 = _3699 / _1372;
        float _3711 = _3700 * _1422;
        float _3712 = _1423 * _3700;
        float _3713 = (-0.0) - _3712;
        float _3714 = _3700 * _1424;
        float _3716 = (cbSceneParam._m0[77u].w * _3713) / _3699;
        float _3717 = _3716 + cbSceneParam._m0[79u].w;
        float _3718 = cbSceneParam._m0[79u].w - _3712;
        float _3724 = sqrt(((_3711 * _3711) + (_3712 * _3712)) + (_3714 * _3714));
        float _3727 = (1.0 - (cbSceneParam._m0[77u].w / _3699)) * _3724;
        float _3732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3911;
        if (abs((_3713 - _3716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3911 = ((((_3717 > 0.0) ? exp2(_3732 * _3717) : (2.0 - exp2(_3734 * _3717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3727;
        }
        else
        {
            float _3855 = 1.0 / cbSceneParam._m0[80u].x;
            float _3856 = isnan(_3718) ? _3717 : (isnan(_3717) ? _3718 : max(_3717, _3718));
            float _3857 = isnan(_3718) ? _3717 : (isnan(_3717) ? _3718 : min(_3717, _3718));
            float _3866 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : min(_3856, 0.0));
            float _3867 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : min(_3857, 0.0));
            _3911 = ((abs(_3724 / _3713) * cbSceneParam._m0[80u].y) * ((((_3866 - _3867) * 2.0) - ((exp2(_3732 * (isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0)))) - exp2(_3732 * (isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0))))) * _3855)) - ((exp2(_3734 * _3866) - exp2(_3734 * _3867)) * _3855))) + (_3727 * cbSceneParam._m0[80u].z);
        }
        vec4 _3913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3645, _3646, 1.0), 0.0);
        float _3922 = exp2((_3911 * (-1.44269502162933349609375)) * (1.0 - _3913.w));
        float _3923 = log2(_3922);
        float _3939 = log2(_3665);
        _3736 = (exp2(_3939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3923 * cbSceneParam._m0[78u].x)) * _3913.x) / cbSceneParam._m0[78u].x)) + _3662;
        _3738 = (exp2(_3939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3923 * cbSceneParam._m0[78u].y)) * _3913.y) / cbSceneParam._m0[78u].y)) + _3663;
        _3740 = (exp2(_3939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3923 * cbSceneParam._m0[78u].z)) * _3913.z) / cbSceneParam._m0[78u].z)) + _3664;
        _3742 = _3922 * _3665;
    }
    else
    {
        _3736 = _3662;
        _3738 = _3663;
        _3740 = _3664;
        _3742 = _3665;
    }
    bool _3949;
    vec4 _3752;
    vec4 _3774;
    float _3776;
    float _3780;
    float _3781;
    float _3782;
    float _3783;
    bool _3793;
    for (;;)
    {
        _3752 = cbMatDynParam._m0[0u];
        float _3754 = roundEven(_3752.y);
        bool _3755 = _3754 == 3.0;
        float _3756 = log2(_3742);
        float _3763 = exp2(_3756 * cbSceneParam._m0[78u].x) * _3633;
        float _3764 = exp2(_3756 * cbSceneParam._m0[78u].y) * _3634;
        float _3765 = exp2(_3756 * cbSceneParam._m0[78u].z) * _3635;
        float _3772 = _1438 + (-0.5);
        _3774 = cbMtdParam._m0[1u];
        _3776 = _3774.y * _3772;
        float _3779 = (_3754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3780 = _3779 * (_3755 ? _3763 : (_3763 + (cbSceneParam._m0[72u].w * _3736)));
        _3781 = _3779 * (_3755 ? _3764 : (_3764 + (cbSceneParam._m0[72u].w * _3738)));
        _3782 = _3779 * (_3755 ? _3765 : (_3765 + (cbSceneParam._m0[72u].w * _3740)));
        _3783 = _3772 * 0.999000012874603271484375;
        _3793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3793)
        {
            if ((cbInstanceData._m0[_1487 + 7u].x + _3783) < 0.5)
            {
                _3949 = true;
                break;
            }
        }
        uint _3890 = _1488 + uint(_3752.w);
        if ((cbInstanceData._m0[_3890].w < 1.0) && ((cbInstanceData._m0[_3890].w + _3783) < 0.5))
        {
            _3949 = true;
            break;
        }
        if ((_3776 + _639) < _3774.x)
        {
            _3949 = true;
            break;
        }
        _3949 = false;
        break;
    }
    float _4152;
    if (_3949)
    {
        discard_state = true;
        _4152 = 0.0;
    }
    else
    {
        _4152 = _3640;
    }
    SV_Target.x = _3780;
    SV_Target.y = _3781;
    SV_Target.z = _3782;
    SV_Target.w = _4152;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3640;
    discard_exit();
}


