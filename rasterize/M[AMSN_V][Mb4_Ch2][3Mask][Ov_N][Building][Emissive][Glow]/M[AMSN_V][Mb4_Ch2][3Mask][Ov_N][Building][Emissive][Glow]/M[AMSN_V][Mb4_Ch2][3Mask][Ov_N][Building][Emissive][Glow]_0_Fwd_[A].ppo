#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1842;
float _4227;
float _4228;
float _4229;
float _4230;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _255 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _256 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _257 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _261 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _262 = _261 * _255;
    float _263 = _261 * _256;
    float _264 = _261 * _257;
    float _268 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = _268 * NORMAL.x;
    float _270 = _268 * NORMAL.y;
    float _271 = _268 * NORMAL.z;
    float _275 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = _275 * TANGENT.x;
    float _277 = _275 * TANGENT.y;
    float _278 = _275 * TANGENT.z;
    float _282 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _283 = _282 * TANGENT_2.x;
    float _284 = _282 * TANGENT_2.y;
    float _285 = _282 * TANGENT_2.z;
    float _290;
    float _291;
    float _292;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _290 = (-0.0) - _269;
        _291 = (-0.0) - _270;
        _292 = (-0.0) - _271;
    }
    else
    {
        _290 = _269;
        _291 = _270;
        _292 = _271;
    }
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = 1.0 - ((1.0 - _312.z) * 1.39999997615814208984375);
    float _4239 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _327 = 1.0 - ((1.0 - _312.x) * 1.39999997615814208984375);
    float _4250 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _330 = 1.0 - ((1.0 - _312.y) * 1.39999997615814208984375);
    float _4261 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _333 = (_328 + _325) + _331;
    float _340 = (_333 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _341 = (_333 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _342 = (_333 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _367 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _376 = 1.0 - ((1.0 - _367.x) * 1.39999997615814208984375);
    float _4272 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _387 = (_377 * ((cbMtdParam._m0[9u].x - _340) + ((1.0 - cbMtdParam._m0[9u].x) * _333))) + _340;
    float _388 = (_377 * ((cbMtdParam._m0[9u].y - _341) + ((1.0 - cbMtdParam._m0[9u].y) * _333))) + _341;
    float _389 = (_377 * ((cbMtdParam._m0[9u].z - _342) + ((1.0 - cbMtdParam._m0[9u].z) * _333))) + _342;
    float _402 = 1.0 - ((1.0 - _367.y) * 1.39999997615814208984375);
    float _4283 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _413 = (((cbMtdParam._m0[17u].x - _387) + ((1.0 - cbMtdParam._m0[17u].x) * _333)) * _403) + _387;
    float _414 = (((cbMtdParam._m0[17u].y - _388) + ((1.0 - cbMtdParam._m0[17u].y) * _333)) * _403) + _388;
    float _415 = (((cbMtdParam._m0[17u].z - _389) + ((1.0 - cbMtdParam._m0[17u].z) * _333)) * _403) + _389;
    float _429 = 1.0 - ((1.0 - _367.z) * 1.39999997615814208984375);
    float _4294 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _461 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _475 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _461) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4305 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = 1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)));
    float _485 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _461) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4316 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = 1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)));
    vec4 _505 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _510 = cbMtdParam._m0[10u].x * _487;
    float _512 = cbMtdParam._m0[10u].y * _487;
    float _514 = cbMtdParam._m0[10u].z * _487;
    float _531 = ((_507 * (cbMtdParam._m0[16u].x - _510)) * _477) + (_510 * _507);
    float _532 = ((_508 * (cbMtdParam._m0[16u].y - _512)) * _477) + (_512 * _508);
    float _533 = ((_509 * (cbMtdParam._m0[16u].z - _514)) * _477) + (_514 * _509);
    float _556 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _560 = (_556 * ((TEXCOORD_7.x - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _561 = (_556 * ((TEXCOORD_7.y - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _562 = (_556 * ((TEXCOORD_7.z - _461) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4327 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4338 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4349 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _571 = (1.0 - cbMtdParam._m0[25u].x) + _328;
    float _574 = _571 * (1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))));
    float _575 = _571 * (1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))));
    float _576 = ((_328 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))));
    float _586 = _487 + _477;
    float _587 = _586 + _574;
    float _588 = _586 + _575;
    float _589 = _586 + _576;
    float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _594 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
    float _595 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
    vec4 _613 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _618 = _613.w;
    float _619 = _613.x * cbMtdParam._m0[12u].x;
    float _620 = _613.y * cbMtdParam._m0[12u].y;
    float _621 = _613.z * cbMtdParam._m0[12u].z;
    vec4 _639 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _653 = (((_639.x * cbMtdParam._m0[13u].x) - _619) * _328) + _619;
    float _654 = (((_639.y * cbMtdParam._m0[13u].y) - _620) * _328) + _620;
    float _655 = (((_639.z * cbMtdParam._m0[13u].z) - _621) * _328) + _621;
    vec4 _674 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _688 = (((_674.x * cbMtdParam._m0[14u].x) - _653) * _331) + _653;
    float _689 = (((_674.y * cbMtdParam._m0[14u].y) - _654) * _331) + _654;
    float _690 = (((_674.z * cbMtdParam._m0[14u].z) - _655) * _331) + _655;
    vec4 _707 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _721 = (((_707.x * cbMtdParam._m0[15u].x) - _688) * _325) + _688;
    float _722 = (((_707.y * cbMtdParam._m0[15u].y) - _689) * _325) + _689;
    float _723 = (((_707.z * cbMtdParam._m0[15u].z) - _690) * _325) + _690;
    float _743 = ((_721 - (_721 * _593)) + (((_593 * 4.55000019073486328125) * ((_574 * ((cbMtdParam._m0[11u].x * _507) - _531)) + _531)) * _721)) * ((((cbMtdParam._m0[18u].x - _413) + ((1.0 - cbMtdParam._m0[18u].x) * _333)) * _430) + _413);
    float _744 = ((_722 - (_722 * _594)) + (((_594 * 4.55000019073486328125) * ((_575 * ((cbMtdParam._m0[11u].y * _508) - _532)) + _532)) * _722)) * ((((cbMtdParam._m0[18u].y - _414) + ((1.0 - cbMtdParam._m0[18u].y) * _333)) * _430) + _414);
    float _745 = ((_723 - (_595 * _723)) + (((_595 * 4.55000019073486328125) * ((_576 * ((cbMtdParam._m0[11u].z * _509) - _533)) + _533)) * _723)) * ((((cbMtdParam._m0[18u].z - _415) + ((1.0 - cbMtdParam._m0[18u].z) * _333)) * _430) + _415);
    float _756 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _593) + cbMtdParam._m0[25u].w;
    float _759 = ((cbMtdParam._m0[20u].x - _756) * _328) + _756;
    float _762 = ((cbMtdParam._m0[20u].y - _759) * _331) + _759;
    float _765 = ((cbMtdParam._m0[20u].z - _762) * _325) + _762;
    vec4 _777 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _781 = _777.z;
    float _785 = (_777.x * 2.0) + (-1.0);
    float _787 = (_777.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_785, _787), vec2(_785, _787));
    float _4390 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))));
    float _796 = fma(_793, _290, fma(_787, _283, _785 * _262));
    float _799 = fma(_793, _291, fma(_787, _284, _785 * _263));
    float _802 = fma(_793, _292, fma(_787, _285, _785 * _264));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    vec4 _822 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _828 = (_822.x * 2.0) + (-1.0);
    float _829 = (_822.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _4401 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _835 = sqrt(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))));
    float _838 = fma(_835, _290, fma(_829, _283, _828 * _262));
    float _841 = fma(_835, _291, fma(_829, _284, _828 * _263));
    float _844 = fma(_835, _292, fma(_829, _285, _828 * _264));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    float _849 = _848 * _838;
    float _850 = _848 * _841;
    float _851 = _848 * _844;
    float _854 = fma(_851, _245, fma(_850, _244, _849 * _243));
    float _857 = fma(_851, _278, fma(_850, _277, _849 * _276));
    float _860 = fma(_851, _292, fma(_850, _291, _849 * _290));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    vec4 _878 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _4412 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _891 = sqrt(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))));
    float _894 = fma(_891, _290, fma(_885, _283, _884 * _262));
    float _897 = fma(_891, _291, fma(_885, _284, _884 * _263));
    float _900 = fma(_891, _292, fma(_885, _285, _884 * _264));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _910 = fma(_907, _245, fma(_906, _244, _905 * _243));
    float _913 = fma(_907, _278, fma(_906, _277, _905 * _276));
    float _916 = fma(_907, _292, fma(_906, _291, _905 * _290));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    vec4 _933 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _939 = (_933.x * 2.0) + (-1.0);
    float _940 = (_933.y * 2.0) + (-1.0);
    float _941 = dot(vec2(_939, _940), vec2(_939, _940));
    float _4423 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _946 = sqrt(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))));
    float _949 = fma(_946, _290, fma(_940, _283, _939 * _262));
    float _952 = fma(_946, _291, fma(_940, _284, _939 * _263));
    float _955 = fma(_946, _292, fma(_940, _285, _939 * _264));
    float _959 = inversesqrt(dot(vec3(_949, _952, _955), vec3(_949, _952, _955)));
    float _960 = _959 * _949;
    float _961 = _959 * _952;
    float _962 = _959 * _955;
    float _965 = fma(_962, _245, fma(_961, _244, _960 * _243));
    float _968 = fma(_962, _278, fma(_961, _277, _960 * _276));
    float _971 = fma(_962, _292, fma(_961, _291, _960 * _290));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _981 = fma(_809, _245, fma(_808, _244, _807 * _243));
    float _984 = fma(_809, _278, fma(_808, _277, _807 * _276));
    float _987 = fma(_809, _292, fma(_808, _291, _807 * _290));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _1001 = (((_975 * _965) - _992) * _328) + _992;
    float _1002 = (((_975 * _968) - _993) * _328) + _993;
    float _1003 = (((_975 * _971) - _994) * _328) + _994;
    vec4 _1016 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4434 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1029 = sqrt(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))));
    float _1032 = fma(_1029, _290, fma(_1023, _283, _1022 * _262));
    float _1035 = fma(_1029, _291, fma(_1023, _284, _1022 * _263));
    float _1038 = fma(_1029, _292, fma(_1023, _285, _1022 * _264));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _1048 = fma(_1045, _245, fma(_1044, _244, _1043 * _243));
    float _1051 = fma(_1045, _278, fma(_1044, _277, _1043 * _276));
    float _1054 = fma(_1045, _292, fma(_1044, _291, _1043 * _290));
    float _1058 = inversesqrt(dot(vec3(_1048, _1051, _1054), vec3(_1048, _1051, _1054)));
    float _1068 = (((_1058 * _1048) - _1001) * _331) + _1001;
    float _1069 = (((_1058 * _1051) - _1002) * _331) + _1002;
    float _1070 = (((_1058 * _1054) - _1003) * _331) + _1003;
    vec4 _1083 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1089 = (_1083.x * 2.0) + (-1.0);
    float _1090 = (_1083.y * 2.0) + (-1.0);
    float _1091 = dot(vec2(_1089, _1090), vec2(_1089, _1090));
    float _4445 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1096 = sqrt(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))));
    float _1099 = fma(_1096, _290, fma(_1090, _283, _1089 * _262));
    float _1102 = fma(_1096, _291, fma(_1090, _284, _1089 * _263));
    float _1105 = fma(_1096, _292, fma(_1090, _285, _1089 * _264));
    float _1109 = inversesqrt(dot(vec3(_1099, _1102, _1105), vec3(_1099, _1102, _1105)));
    float _1110 = _1109 * _1099;
    float _1111 = _1109 * _1102;
    float _1112 = _1109 * _1105;
    float _1115 = fma(_1112, _245, fma(_1111, _244, _1110 * _243));
    float _1118 = fma(_1112, _278, fma(_1111, _277, _1110 * _276));
    float _1121 = fma(_1112, _292, fma(_1111, _291, _1110 * _290));
    float _1125 = inversesqrt(dot(vec3(_1115, _1118, _1121), vec3(_1115, _1118, _1121)));
    float _1135 = (((_1125 * _1121) - _1070) * _325) + _1070;
    vec4 _1147 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1153 = (_1147.x * 2.0) + (-1.0);
    float _1154 = (_1147.y * 2.0) + (-1.0);
    float _1155 = dot(vec2(_1153, _1154), vec2(_1153, _1154));
    float _4456 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1160 = sqrt(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))));
    float _1163 = fma(_1160, _290, fma(_1154, _283, _1153 * _262));
    float _1166 = fma(_1160, _291, fma(_1154, _284, _1153 * _263));
    float _1169 = fma(_1160, _292, fma(_1154, _285, _1153 * _264));
    float _1173 = inversesqrt(dot(vec3(_1163, _1166, _1169), vec3(_1163, _1166, _1169)));
    float _1174 = _1173 * _1163;
    float _1175 = _1173 * _1166;
    float _1176 = _1173 * _1169;
    float _1179 = fma(_1176, _245, fma(_1175, _244, _1174 * _243));
    float _1182 = fma(_1176, _278, fma(_1175, _277, _1174 * _276));
    float _1185 = fma(_1176, _292, fma(_1175, _291, _1174 * _290));
    float _1189 = inversesqrt(dot(vec3(_1179, _1182, _1185), vec3(_1179, _1182, _1185)));
    vec4 _1227 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1241 = (((((((_910 * _477) * _920) * cbMtdParam._m0[24u].z) + ((((_587 * _571) * _854) * _864) * cbMtdParam._m0[24u].w)) + _1068) + (((_1125 * _1115) - _1068) * _325)) + (((_1179 * _487) * _1189) * cbMtdParam._m0[23u].z)) + (((_1227.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1246 = (((((((_913 * _477) * _920) * cbMtdParam._m0[24u].z) + ((((_588 * _571) * _857) * _864) * cbMtdParam._m0[24u].w)) + _1069) + (((_1125 * _1118) - _1069) * _325)) + (((_1182 * _487) * _1189) * cbMtdParam._m0[23u].z)) + (((_1227.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1249 = fma(_1135, _290, fma(_1246, _276, _1241 * _243));
    float _1252 = fma(_1135, _291, fma(_1246, _277, _1241 * _244));
    float _1255 = fma(_1135, _292, fma(_1246, _278, _1241 * _245));
    float _1259 = inversesqrt(dot(vec3(_1249, _1252, _1255), vec3(_1249, _1252, _1255)));
    float _1260 = _1259 * _1249;
    float _1261 = _1259 * _1252;
    float _1262 = _1259 * _1255;
    float _4467 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1263 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _4478 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _1264 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _4489 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4500 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4511 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4522 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1268 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _1284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1324 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1334 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1324);
    float _1335 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1324);
    float _1336 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1324);
    float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
    float _1341 = _1334 * _1340;
    float _1342 = _1335 * _1340;
    float _1343 = _1336 * _1340;
    vec4 _1348 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1350 = _1348.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1522 = sqrt(((_1334 * _1334) + (_1335 * _1335)) + (_1336 * _1336));
        float _1528 = (cbMatDynParam._m0[5u].x * _1522) + cbMatDynParam._m0[5u].y;
        float _4533 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1533 = (cbMatDynParam._m0[5u].z * _1522) + cbMatDynParam._m0[5u].w;
        float _4544 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) - _1529)) + _1529) < ((_1350 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1361 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1362 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1380 = fma(_1262, cbSceneParam._m0[5u].z, fma(_1261, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1260));
    float _1383 = fma(_1262, cbSceneParam._m0[6u].z, fma(_1261, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1260));
    float _1386 = fma(_1262, cbSceneParam._m0[7u].z, fma(_1261, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1260));
    uint _1399 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1400 = _1399 + 9u;
    uint _1401 = _1400 + uint(cbMatDynParam._m0[0u].w);
    float _1407 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * cbInstanceData._m0[_1401].x;
    float _1408 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * cbInstanceData._m0[_1401].y;
    float _1409 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * cbInstanceData._m0[_1401].z;
    float _4555 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1410 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _4566 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    float _1411 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _4577 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _1413 = 1.0 - _1268;
    float _1414 = _1410 * _1413;
    float _1415 = _1411 * _1413;
    float _1416 = _1412 * _1413;
    float _1421 = (_1410 + (-0.039999999105930328369140625)) * _1268;
    float _1422 = (_1411 + (-0.039999999105930328369140625)) * _1268;
    float _1423 = (_1412 + (-0.039999999105930328369140625)) * _1268;
    float _1424 = _1421 + 0.039999999105930328369140625;
    float _1426 = _1422 + 0.039999999105930328369140625;
    float _1427 = _1423 + 0.039999999105930328369140625;
    vec4 _1436 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1361, cbSceneParam._m0[86u].y * _1362));
    float _1439 = _1436.x * TEXCOORD_7.w;
    float _1440 = dot(vec3(_1260, _1261, _1262), vec3(_1341, _1342, _1343));
    float _1443 = _1440 * 2.0;
    float _1447 = (_1443 * _1260) - _1341;
    float _1448 = (_1443 * _1261) - _1342;
    float _1449 = (_1443 * _1262) - _1343;
    float _1453 = abs(dot(vec3(_1341, _1342, _1343), vec3(_1260, _1261, _1262)));
    float _4588 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
    float _1455 = sqrt(_1264);
    float _1468 = exp2((_1455 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1455 * 3.0));
    float _1474 = (1.0 - _1468) * ((_1455 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1475 = _1468 * _1455;
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1507 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1511 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1841;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1566 = fma(_1511, cbModelParam._m0[26u].z, fma(_1507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1503));
        float _1570 = fma(_1511, cbModelParam._m0[27u].z, fma(_1507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1503));
        float _1574 = fma(_1511, cbModelParam._m0[28u].z, fma(_1507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1503));
        float _1599 = _1503 + _1260;
        float _1600 = _1507 + _1261;
        float _1601 = _1511 + _1262;
        float _1611 = fma(_1601, cbModelParam._m0[26u].z, fma(_1600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1599)) - _1566;
        float _1612 = fma(_1601, cbModelParam._m0[27u].z, fma(_1600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1599)) - _1570;
        float _1613 = fma(_1601, cbModelParam._m0[28u].z, fma(_1600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1599)) - _1574;
        float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
        float _1630 = ((_1617 * _1611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1617 * _1612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1617 * _1613) / cbModelParam._m0[34u].z) + ((((((_1574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        float _1669 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1635.x + (-0.5));
        float _1671 = _1669 * (_1635.y + (-0.5));
        float _1672 = _1669 * (_1635.z + (-0.5));
        float _1679 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1642.x + (-0.5));
        float _1681 = _1679 * (_1642.y + (-0.5));
        float _1682 = _1679 * (_1642.z + (-0.5));
        float _1689 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1649.x + (-0.5));
        float _1691 = _1689 * (_1649.y + (-0.5));
        float _1692 = _1689 * (_1649.z + (-0.5));
        float _1699 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1656.x + (-0.5));
        float _1701 = _1699 * (_1656.y + (-0.5));
        float _1702 = _1699 * (_1656.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1723 = (dot(vec3(_1260, _1261, _1262), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4614 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1733 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4625 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4636 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_1735 + 1.0))) + _1740) * _1703;
        float _1750 = _1671 * 0.5;
        float _1751 = _1681 * 0.5;
        float _1752 = _1691 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_1260, _1261, _1262), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4647 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4658 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4669 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_1777 + 1.0))) + _1782) * _1704;
        float _1792 = _1672 * 0.5;
        float _1793 = _1682 * 0.5;
        float _1794 = _1692 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1260, _1261, _1262), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4680 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4691 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4702 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_1819 + 1.0))) + _1824) * _1705;
        _1841 = _1672;
        _1843 = _1671;
        _1844 = _1670;
        _1845 = _1682;
        _1846 = _1681;
        _1847 = _1680;
        _1848 = _1692;
        _1849 = _1691;
        _1850 = _1690;
        _1851 = _1705;
        _1852 = _1704;
        _1853 = _1703;
        _1854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1842;
        _1843 = _1842;
        _1844 = _1842;
        _1845 = _1842;
        _1846 = _1842;
        _1847 = _1842;
        _1848 = _1842;
        _1849 = _1842;
        _1850 = _1842;
        _1851 = _1842;
        _1852 = _1842;
        _1853 = _1842;
        _1854 = 0.0;
        _1855 = 0.0;
        _1856 = 0.0;
    }
    float _2154;
    float _2155;
    float _2156;
    float _2157;
    float _2158;
    float _2159;
    float _2160;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1885 = fma(_1511, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503));
        float _1889 = fma(_1511, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503));
        float _1893 = fma(_1511, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503));
        float _1916 = _1503 + _1260;
        float _1917 = _1507 + _1261;
        float _1918 = _1511 + _1262;
        float _1928 = fma(_1918, cbModelParam._m0[30u].z, fma(_1917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1916)) - _1885;
        float _1929 = fma(_1918, cbModelParam._m0[31u].z, fma(_1917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1916)) - _1889;
        float _1930 = fma(_1918, cbModelParam._m0[32u].z, fma(_1917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1916)) - _1893;
        float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
        float _1947 = ((_1934 * _1928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1948 = ((_1934 * _1929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1949 = ((_1934 * _1930) / cbModelParam._m0[35u].z) + ((((((_1893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1947, _1948, _1949), 0.0);
        vec4 _1958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1947, _1948, _1949), 0.0);
        vec4 _1965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1947, _1948, _1949), 0.0);
        vec4 _1972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1947, _1948, _1949), 0.0);
        float _1984 = exp2((_1951.w + (-0.5)) * 20.0) * 2.0;
        float _1985 = _1984 * (_1951.x + (-0.5));
        float _1986 = _1984 * (_1951.y + (-0.5));
        float _1987 = _1984 * (_1951.z + (-0.5));
        float _1994 = exp2((_1958.w + (-0.5)) * 20.0) * 2.0;
        float _1995 = _1994 * (_1958.x + (-0.5));
        float _1996 = _1994 * (_1958.y + (-0.5));
        float _1997 = _1994 * (_1958.z + (-0.5));
        float _2004 = exp2((_1965.w + (-0.5)) * 20.0) * 2.0;
        float _2005 = _2004 * (_1965.x + (-0.5));
        float _2006 = _2004 * (_1965.y + (-0.5));
        float _2007 = _2004 * (_1965.z + (-0.5));
        float _2014 = exp2((_1972.w + (-0.5)) * 20.0) * 2.0;
        float _2015 = _2014 * (_1972.x + (-0.5));
        float _2016 = _2014 * (_1972.y + (-0.5));
        float _2017 = _2014 * (_1972.z + (-0.5));
        float _2018 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2020 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = _1985 * 0.5;
        float _2022 = _1995 * 0.5;
        float _2023 = _2005 * 0.5;
        float _2024 = dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023));
        float _2029 = (_2024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2024);
        float _2037 = (dot(vec3(_1260, _1261, _1262), vec3(_2029 * _2021, _2029 * _2022, _2029 * _2023)) + 1.0) * 0.5;
        float _4743 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2046 = sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023)) / (_2018 + 9.9999997473787516355514526367188e-06);
        float _4754 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2048 = _2047 * 2.0;
        float _2052 = (1.0 - _2047) / (_2047 + 1.0);
        float _4765 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2062 = ((((1.0 - _2053) * (_2048 + 2.0)) * exp2(log2(isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2048 + 1.0))) + _2053) * _2018;
        float _2063 = _1986 * 0.5;
        float _2064 = _1996 * 0.5;
        float _2065 = _2006 * 0.5;
        float _2066 = dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065));
        float _2071 = (_2066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2066);
        float _2079 = (dot(vec3(_1260, _1261, _1262), vec3(_2071 * _2063, _2071 * _2064, _2071 * _2065)) + 1.0) * 0.5;
        float _4776 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2088 = sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065)) / (_2019 + 9.9999997473787516355514526367188e-06);
        float _4787 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2090 = _2089 * 2.0;
        float _2094 = (1.0 - _2089) / (_2089 + 1.0);
        float _4798 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2104 = ((((1.0 - _2095) * (_2090 + 2.0)) * exp2(log2(isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2090 + 1.0))) + _2095) * _2019;
        float _2105 = _1987 * 0.5;
        float _2106 = _1997 * 0.5;
        float _2107 = _2007 * 0.5;
        float _2108 = dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107));
        float _2113 = (_2108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2108);
        float _2121 = (dot(vec3(_1260, _1261, _1262), vec3(_2113 * _2105, _2113 * _2106, _2113 * _2107)) + 1.0) * 0.5;
        float _4809 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2130 = sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107)) / (_2020 + 9.9999997473787516355514526367188e-06);
        float _4820 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2132 = _2131 * 2.0;
        float _2136 = (1.0 - _2131) / (_2131 + 1.0);
        float _4831 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2146 = ((((1.0 - _2137) * (_2132 + 2.0)) * exp2(log2(isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2132 + 1.0))) + _2137) * _2020;
        _2154 = _1987;
        _2155 = _1986;
        _2156 = _1985;
        _2157 = _1997;
        _2158 = _1996;
        _2159 = _1995;
        _2160 = _2007;
        _2161 = _2006;
        _2162 = _2005;
        _2163 = _2020;
        _2164 = _2019;
        _2165 = _2018;
        _2166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)));
        _2167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)));
        _2168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0)));
    }
    else
    {
        _2154 = _1842;
        _2155 = _1842;
        _2156 = _1842;
        _2157 = _1842;
        _2158 = _1842;
        _2159 = _1842;
        _2160 = _1842;
        _2161 = _1842;
        _2162 = _1842;
        _2163 = _1842;
        _2164 = _1842;
        _2165 = _1842;
        _2166 = 0.0;
        _2167 = 0.0;
        _2168 = 0.0;
    }
    float _2178 = (cbModelParam._m0[1u].x * (_2166 - _1854)) + _1854;
    float _2179 = (cbModelParam._m0[1u].x * (_2167 - _1855)) + _1855;
    float _2180 = (cbModelParam._m0[1u].x * (_2168 - _1856)) + _1856;
    float _2201 = fma(_2180, cbSceneParam._m0[89u].z, fma(_2179, cbSceneParam._m0[89u].y, _2178 * cbSceneParam._m0[89u].x));
    float _2204 = fma(_2180, cbSceneParam._m0[90u].z, fma(_2179, cbSceneParam._m0[90u].y, _2178 * cbSceneParam._m0[90u].x));
    float _2207 = fma(_2180, cbSceneParam._m0[91u].z, fma(_2179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2178));
    float _2222 = _1447 * 0.5;
    float _2223 = _1448 * 0.5;
    float _2224 = _1449 * 0.5;
    float _2225 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_2156, _2159, _2162, _2165));
    float _2228 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_2155, _2158, _2161, _2164));
    float _2231 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_2154, _2157, _2160, _2163));
    float _2265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2238 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_1841, _1845, _1848, _1851));
        float _2242 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_1843, _1846, _1849, _1852));
        float _2246 = dot(vec4(_2222, _2223, _2224, 1.0), vec4(_1844, _1847, _1850, _1853));
        float _2253 = dot(vec4(cbModelParam._m0[39u]), vec4(_2222, _2223, _2224, 1.0));
        _2265 = dot(vec3(isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0)), isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0)), isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2253) ? 0.0 : (isnan(0.0) ? _2253 : max(0.0, _2253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2265 = 1.0;
    }
    float _2276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2267 = dot(vec4(cbModelParam._m0[40u]), vec4(_2222, _2223, _2224, 1.0));
        _2276 = dot(vec3(isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0)), isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0)), isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2267) ? 0.0 : (isnan(0.0) ? _2267 : max(0.0, _2267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2276 = 1.0;
    }
    float _2280 = (_2276 * cbModelParam._m0[1u].x) + (_2265 * (1.0 - cbModelParam._m0[1u].x));
    float _2290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1264);
    float _2291 = isnan(_2290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2290 : min(cbModelParam._m0[25u].z, _2290));
    float _2371;
    float _2373;
    float _2375;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2338 = fma(_1511, cbModelParam._m0[13u].z, fma(_1507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1503)) + cbModelParam._m0[13u].w;
        float _2342 = fma(_1511, cbModelParam._m0[14u].z, fma(_1507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1503)) + cbModelParam._m0[14u].w;
        float _2346 = fma(_1511, cbModelParam._m0[15u].z, fma(_1507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1503)) + cbModelParam._m0[15u].w;
        float _2349 = fma(_1449, cbModelParam._m0[13u].z, fma(_1448, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1447));
        float _2352 = fma(_1449, cbModelParam._m0[14u].z, fma(_1448, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1447));
        float _2355 = fma(_1449, cbModelParam._m0[15u].z, fma(_1448, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1447));
        float _2383;
        if (_2349 > 0.0)
        {
            _2383 = abs((1.0 - _2338) / _2349);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2338 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2383 = frontier_phi_19_17_ladder;
        }
        float _2586;
        if (_2352 > 0.0)
        {
            _2586 = abs((1.0 - _2342) / _2352);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2352 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2342 + 1.0) / _2352);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2586 = frontier_phi_28_24_ladder;
        }
        float _2840;
        if (_2355 > 0.0)
        {
            _2840 = abs((1.0 - _2346) / _2355);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2355 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2346 + 1.0) / _2355);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2840 = frontier_phi_40_35_ladder;
        }
        float _2842 = isnan(_2586) ? _2383 : (isnan(_2383) ? _2586 : min(_2383, _2586));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2349) + _2338;
        float _2848 = (_2843 * _2352) + _2342;
        float _2849 = (_2843 * _2355) + _2346;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2852 = (-1.0) - _2850;
        float _2854 = _2850 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2849 > _2854) || ((_2849 < _2852) || ((_2848 > _2854) || ((_2848 < _2852) || ((_2847 < _2852) || (_2847 > _2854))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2849, cbModelParam._m0[9u].z, fma(_2848, cbModelParam._m0[9u].y, _2847 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2849, cbModelParam._m0[10u].z, fma(_2848, cbModelParam._m0[10u].y, _2847 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2849, cbModelParam._m0[11u].z, fma(_2848, cbModelParam._m0[11u].y, _2847 * cbModelParam._m0[11u].x))), _2291);
            frontier_phi_18_40_ladder = _2977.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2977.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2977.x * cbModelParam._m0[1u].y;
        }
        _2371 = frontier_phi_18_40_ladder_2;
        _2373 = frontier_phi_18_40_ladder_1;
        _2375 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1447, _1448, _1449), _2291);
        _2371 = _2359.x * cbModelParam._m0[1u].y;
        _2373 = _2359.y * cbModelParam._m0[1u].y;
        _2375 = _2359.z * cbModelParam._m0[1u].y;
    }
    float _2379 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1264);
    float _2380 = isnan(_2379) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2379 : min(cbModelParam._m0[25u].w, _2379));
    float _2470;
    float _2472;
    float _2474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2434 = fma(_1511, cbModelParam._m0[21u].z, fma(_1507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1503)) + cbModelParam._m0[21u].w;
        float _2438 = fma(_1511, cbModelParam._m0[22u].z, fma(_1507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1503)) + cbModelParam._m0[22u].w;
        float _2442 = fma(_1511, cbModelParam._m0[23u].z, fma(_1507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1503)) + cbModelParam._m0[23u].w;
        float _2445 = fma(_1449, cbModelParam._m0[21u].z, fma(_1448, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1447));
        float _2448 = fma(_1449, cbModelParam._m0[22u].z, fma(_1448, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1447));
        float _2451 = fma(_1449, cbModelParam._m0[23u].z, fma(_1448, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1447));
        float _2591;
        if (_2445 > 0.0)
        {
            _2591 = abs((1.0 - _2434) / _2445);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2445 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2434 + 1.0) / _2445);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2591 = frontier_phi_30_26_ladder;
        }
        float _2867;
        if (_2448 > 0.0)
        {
            _2867 = abs((1.0 - _2438) / _2448);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2448 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2438 + 1.0) / _2448);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2867 = frontier_phi_42_37_ladder;
        }
        float _3080;
        if (_2451 > 0.0)
        {
            _3080 = abs((1.0 - _2442) / _2451);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2451 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2442 + 1.0) / _2451);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _3080 = frontier_phi_51_48_ladder;
        }
        float _3082 = isnan(_2867) ? _2591 : (isnan(_2591) ? _2867 : min(_2591, _2867));
        float _3083 = isnan(_3080) ? _3082 : (isnan(_3082) ? _3080 : min(_3082, _3080));
        float _3087 = (_3083 * _2445) + _2434;
        float _3088 = (_3083 * _2448) + _2438;
        float _3089 = (_3083 * _2451) + _2442;
        float _3090 = _3083 * 9.9999997473787516355514526367188e-05;
        float _3091 = (-1.0) - _3090;
        float _3093 = _3090 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_3089 > _3093) || ((_3089 < _3091) || ((_3088 > _3093) || ((_3088 < _3091) || ((_3087 < _3091) || (_3087 > _3093))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3292 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3089, cbModelParam._m0[17u].z, fma(_3088, cbModelParam._m0[17u].y, _3087 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3089, cbModelParam._m0[18u].z, fma(_3088, cbModelParam._m0[18u].y, _3087 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3089, cbModelParam._m0[19u].z, fma(_3088, cbModelParam._m0[19u].y, _3087 * cbModelParam._m0[19u].x))), _2380);
            frontier_phi_27_51_ladder = _3292.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3292.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3292.x * cbModelParam._m0[1u].z;
        }
        _2470 = frontier_phi_27_51_ladder_2;
        _2472 = frontier_phi_27_51_ladder_1;
        _2474 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1447, _1448, _1449), _2380);
        _2470 = _2454.x * cbModelParam._m0[1u].z;
        _2472 = _2454.y * cbModelParam._m0[1u].z;
        _2474 = _2454.z * cbModelParam._m0[1u].z;
    }
    float _2487 = (((_1474 * _1424) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2470 - _2371)) + _2371);
    float _2489 = (((_1474 * _1426) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2472 - _2373)) + _2373);
    float _2491 = (((_1474 * _1427) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2474 - _2375)) + _2375);
    float _2494 = fma(_2491, cbSceneParam._m0[89u].z, fma(_2489, cbSceneParam._m0[89u].y, _2487 * cbSceneParam._m0[89u].x));
    float _2497 = fma(_2491, cbSceneParam._m0[90u].z, fma(_2489, cbSceneParam._m0[90u].y, _2487 * cbSceneParam._m0[90u].x));
    float _2500 = fma(_2491, cbSceneParam._m0[91u].z, fma(_2489, cbSceneParam._m0[91u].y, _2487 * cbSceneParam._m0[91u].x));
    uvec4 _2510 = floatBitsToUint(cbInstanceData._m0[_1399 + 5u]);
    uint _2512 = _2510.x * 14u;
    uint _2513 = _2512 + 13u;
    float _2520 = _1439 + (-1.0);
    float _2525 = (cbLight._m0[_2513].x * _2520) + 1.0;
    float _2526 = (cbLight._m0[_2513].y * _2520) + 1.0;
    float _2527 = (cbLight._m0[_2513].z * _2520) + 1.0;
    float _2528 = (cbLight._m0[_2513].w * _2520) + 1.0;
    uint _2529 = _2512 + 5u;
    float _2535 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
    uint _2539 = _2512 + 4u;
    float _2545 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
    uint _2549 = _2512 | 1u;
    float _2560 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_1260, _1261, _1262));
    float _2563 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_1260, _1261, _1262));
    float _4967 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _4978 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2568 = (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * 0.3183098733425140380859375;
    float _2570 = (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * 0.3183098733425140380859375;
    float _2577 = ((cbLight._m0[_2529].x * _2535) * _2570) + ((cbLight._m0[_2539].x * _2545) * _2568);
    float _2578 = ((_2535 * cbLight._m0[_2529].y) * _2570) + ((_2545 * cbLight._m0[_2539].y) * _2568);
    float _2579 = ((_2535 * cbLight._m0[_2529].z) * _2570) + ((_2545 * cbLight._m0[_2539].z) * _2568);
    uvec4 _2583 = floatBitsToUint(cbLight._m0[_2512 + 12u]);
    bool _2585 = _2583.x == 0u;
    float _2596;
    float _2598;
    float _2600;
    if (_2585)
    {
        _2596 = _2577;
        _2598 = _2578;
        _2600 = _2579;
    }
    else
    {
        uint _2604 = _2512 + 6u;
        float _2620 = (dot(vec3(cbLight._m0[_2512 + 2u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _2621 = _2620 * _2620;
        float _4989 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2622 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _2623 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
        _2596 = (((cbLight._m0[_2604].x * 0.3183098733425140380859375) * _2622) * _2623) + _2577;
        _2598 = (((cbLight._m0[_2604].y * 0.3183098733425140380859375) * _2622) * _2623) + _2578;
        _2600 = (((cbLight._m0[_2604].z * 0.3183098733425140380859375) * _2622) * _2623) + _2579;
    }
    bool _2603 = _2583.y == 0u;
    float _2641;
    float _2643;
    float _2645;
    if (_2603)
    {
        _2641 = _2596;
        _2643 = _2598;
        _2645 = _2600;
    }
    else
    {
        uint _2811 = _2512 + 7u;
        float _2827 = (dot(vec3(cbLight._m0[_2512 + 3u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _2828 = _2827 * _2827;
        float _5005 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2829 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _2830 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _2641 = (((cbLight._m0[_2811].x * 0.3183098733425140380859375) * _2829) * _2830) + _2596;
        _2643 = (((cbLight._m0[_2811].y * 0.3183098733425140380859375) * _2829) * _2830) + _2598;
        _2645 = (((cbLight._m0[_2811].z * 0.3183098733425140380859375) * _2829) * _2830) + _2600;
    }
    uint _2648 = _2512 + 8u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _1264) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2512].x + _1341;
    float _2664 = cbLight._m0[_2512].y + _1342;
    float _2665 = cbLight._m0[_2512].z + _1343;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2512].xyz));
    float _5021 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
    float _5032 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _2677 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
    float _2678 = dot(vec3(_1260, _1261, _1262), vec3(_2670, _2671, _2672));
    float _5043 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
    float _2682 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2670, _2671, _2672));
    float _5054 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2686 = _2662 * _2662;
    float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
    float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)))) * 5.0);
    float _2699 = 0.959999978542327880859375 - _1421;
    float _2701 = 0.959999978542327880859375 - _1422;
    float _2702 = 0.959999978542327880859375 - _1423;
    float _2709 = 1.0 - _2662;
    float _2720 = (0.5 / (((_2677 * ((_2676 * _2709) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2709) + _2662) * _2676))) * _2676;
    float _5065 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2722 = (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
    uint _2733 = _2512 + 9u;
    float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _1264) * 0.949999988079071044921875);
    float _2745 = _2744 * _2744;
    float _2746 = cbLight._m0[_2549].x + _1341;
    float _2747 = cbLight._m0[_2549].y + _1342;
    float _2748 = cbLight._m0[_2549].z + _1343;
    float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
    float _2753 = _2752 * _2746;
    float _2754 = _2752 * _2747;
    float _2755 = _2752 * _2748;
    float _2756 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2549].xyz));
    float _5076 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
    float _2760 = dot(vec3(_1260, _1261, _1262), vec3(_2753, _2754, _2755));
    float _5087 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
    float _2764 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2753, _2754, _2755));
    float _5098 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2768 = _2745 * _2745;
    float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
    float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) * 5.0);
    float _2786 = 1.0 - _2745;
    float _2796 = (0.5 / (((_2677 * ((_2759 * _2786) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2786) + _2745) * _2759))) * _2759;
    float _5109 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
    float _2808 = (((((_2779 * _2699) + _1424) * cbLight._m0[_2733].x) * _2798) * _2535) + (((((_2698 * _2699) + _1424) * cbLight._m0[_2648].x) * _2722) * _2545);
    float _2809 = (((((_2779 * _2701) + _1426) * cbLight._m0[_2733].y) * _2798) * _2535) + (((((_2698 * _2701) + _1426) * cbLight._m0[_2648].y) * _2722) * _2545);
    float _2810 = (((((_2779 * _2702) + _1427) * cbLight._m0[_2733].z) * _2798) * _2535) + (((((_2698 * _2702) + _1427) * cbLight._m0[_2648].z) * _2722) * _2545);
    float _2872;
    float _2874;
    float _2876;
    if (_2585)
    {
        _2872 = _2808;
        _2874 = _2809;
        _2876 = _2810;
    }
    else
    {
        uint _2878 = _2512 + 2u;
        uint _2882 = _2512 + 10u;
        float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2878].w)) * _1264) * 0.949999988079071044921875);
        float _2897 = _2896 * _2896;
        float _2898 = cbLight._m0[_2878].x + _1341;
        float _2899 = cbLight._m0[_2878].y + _1342;
        float _2900 = cbLight._m0[_2878].z + _1343;
        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
        float _2905 = _2904 * _2898;
        float _2906 = _2904 * _2899;
        float _2907 = _2904 * _2900;
        float _2908 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2878].xyz));
        float _5120 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
        float _2912 = dot(vec3(_1260, _1261, _1262), vec3(_2905, _2906, _2907));
        float _5131 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
        float _2916 = dot(vec3(cbLight._m0[_2878].xyz), vec3(_2905, _2906, _2907));
        float _5142 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2920 = _2897 * _2897;
        float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
        float _2931 = exp2(log2(1.0 - (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) * 5.0);
        float _2938 = 1.0 - _2897;
        float _2948 = (0.5 / (((_2677 * ((_2911 * _2938) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _2938) + _2897) * _2911))) * _2911;
        float _5153 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2950 = (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
        float _2951 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
        _2872 = (((((_2931 * _2699) + _1424) * cbLight._m0[_2882].x) * _2950) * _2951) + _2808;
        _2874 = (((((_2931 * _2701) + _1426) * cbLight._m0[_2882].y) * _2950) * _2951) + _2809;
        _2876 = (((((_2931 * _2702) + _1427) * cbLight._m0[_2882].z) * _2950) * _2951) + _2810;
    }
    float _2986;
    float _2988;
    float _2990;
    if (_2603)
    {
        _2986 = _2872;
        _2988 = _2874;
        _2990 = _2876;
    }
    else
    {
        uint _2997 = _2512 + 3u;
        uint _3001 = _2512 + 11u;
        float _3015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2997].w)) * _1264) * 0.949999988079071044921875);
        float _3016 = _3015 * _3015;
        float _3017 = cbLight._m0[_2997].x + _1341;
        float _3018 = cbLight._m0[_2997].y + _1342;
        float _3019 = cbLight._m0[_2997].z + _1343;
        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
        float _3024 = _3023 * _3017;
        float _3025 = _3023 * _3018;
        float _3026 = _3023 * _3019;
        float _3027 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2997].xyz));
        float _5169 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3030 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
        float _3031 = dot(vec3(_1260, _1261, _1262), vec3(_3024, _3025, _3026));
        float _5180 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3034 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
        float _3035 = dot(vec3(cbLight._m0[_2997].xyz), vec3(_3024, _3025, _3026));
        float _5191 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3039 = _3016 * _3016;
        float _3043 = ((_3034 * _3034) * (_3039 + (-1.0))) + 1.0;
        float _3050 = exp2(log2(1.0 - (isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0)))) * 5.0);
        float _3057 = 1.0 - _3016;
        float _3067 = (0.5 / (((_2677 * ((_3030 * _3057) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_2677 * _3057) + _3016) * _3030))) * _3030;
        float _5202 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3069 = (isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3039 / ((_3043 * _3043) * 3.141590118408203125));
        float _3070 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _2986 = (((((_3050 * _2699) + _1424) * cbLight._m0[_3001].x) * _3069) * _3070) + _2872;
        _2988 = (((((_3050 * _2701) + _1426) * cbLight._m0[_3001].y) * _3069) * _3070) + _2874;
        _2990 = (((((_3050 * _2702) + _1427) * cbLight._m0[_3001].z) * _3069) * _3070) + _2876;
    }
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    float _3212;
    float _3214;
    if (_2510.y == 0u)
    {
        float _3145 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3146 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3145;
        float _3147 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3145;
        float _3148 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3145;
        uvec4 _3160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3161 = _3160.x;
        uint _3172 = uint((float(_3160.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1362) / _3161))) + floor(float(uint(cbSceneParam._m0[85u].x * _1361) / _3161)));
        float _3182 = (log2(_3148 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3183 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
        uint _3186 = uint(isnan(14.0) ? _3183 : (isnan(_3183) ? 14.0 : min(_3183, 14.0)));
        uvec4 _3191 = texelFetch(g_lightClusterGridBuffer, int(((_3186 << 2u) + (_3172 << 6u)) >> 2u));
        uint _3192 = _3191.x;
        uint _3193 = _3160.z;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        if (((((1u << ((_3193 >> 4u) & 15u)) + 4294967295u) & _3192) == 0u) || ((_3193 & 240u) == 0u))
        {
            _3297 = 0.0;
            _3299 = 0.0;
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
            _3307 = 0.0;
        }
        else
        {
            float _3298;
            float _3300;
            float _3302;
            float _3304;
            float _3306;
            float _3308;
            float _3449 = 0.0;
            float _3450 = 0.0;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            uint _3455 = 0u;
            uint _3464;
            bool _3465;
            for (;;)
            {
                _3464 = texelFetch(g_lightClassification, int((((_3186 << 5u) + (_3172 << 9u)) + (_3455 << 2u)) >> 2u)).x;
                _3465 = _3464 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3465)
                {
                    frontier_phi_68_pred = _3451;
                    frontier_phi_68_pred_1 = _3454;
                    frontier_phi_68_pred_2 = _3453;
                    frontier_phi_68_pred_3 = _3452;
                    frontier_phi_68_pred_4 = _3450;
                    frontier_phi_68_pred_5 = _3449;
                }
                else
                {
                    float _3594;
                    float _3595;
                    float _3596;
                    float _3597;
                    float _3598;
                    float _3599;
                    uint _3600;
                    _3594 = _3449;
                    _3595 = _3450;
                    _3596 = _3451;
                    _3597 = _3452;
                    _3598 = _3453;
                    _3599 = _3454;
                    _3600 = _3464;
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    for (;;)
                    {
                        uint _3604 = uint(findLSB(_3600)) + (_3455 << 5u);
                        uint _3601 = (_3600 + 4294967295u) & _3600;
                        uint _3606 = _3604 * 48u;
                        vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 3u)).x));
                        uint _3626 = (_3604 * 48u) + 4u;
                        vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3626)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 3u)).x));
                        uint _3645 = (_3604 * 48u) + 8u;
                        vec3 _3656 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3645)).x, texelFetch(g_PointLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3645 + 2u)).x));
                        float _3660 = _3620.x - _3146;
                        float _3661 = _3620.y - _3147;
                        float _3662 = _3620.z - _3148;
                        float _3663 = dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662));
                        float _3666 = inversesqrt(_3663);
                        float _3667 = _3666 * _3660;
                        float _3668 = _3666 * _3661;
                        float _3669 = _3666 * _3662;
                        float _3670 = dot(vec3(_1380, _1383, _1386), vec3(_3667, _3668, _3669));
                        float _3675 = 1.0 - (_3663 * _3620.w);
                        float _5228 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3676 = isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0));
                        float _3677 = sqrt(_3663) * _3639.w;
                        float _3679 = 1.39999997615814208984375 / (_3677 + 1.39999997615814208984375);
                        float _3680 = _3679 * _3679;
                        float _3683 = ((1.0 - _3680) * _3670) + _3680;
                        float _3686 = _3677 * _3677;
                        float _3690 = ((isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0))) * _3676) / ((_3686 * 0.699999988079071044921875) + 1.0);
                        float _3694 = (-0.0) - _3146;
                        float _3695 = (-0.0) - _3147;
                        float _3696 = (-0.0) - _3148;
                        float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                        float _3701 = _3700 * _3694;
                        float _3702 = _3700 * _3695;
                        float _3703 = _3700 * _3696;
                        float _3711 = exp2(log2(1.0 / ((_3686 * 3.5) + 5.0)) * 0.25);
                        float _3712 = 1.0 - _1455;
                        float _3719 = sqrt(1.0 - ((1.0 - (_3712 * _3712)) * (1.0 - (_3711 * _3711))));
                        float _3720 = _3719 * _3719;
                        float _3721 = _3720 * _3720;
                        float _3722 = _3701 + _3667;
                        float _3723 = _3702 + _3668;
                        float _3724 = _3703 + _3669;
                        float _3728 = inversesqrt(dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724)));
                        float _3732 = dot(vec3(_1380, _1383, _1386), vec3(_3701, _3702, _3703));
                        float _5244 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                        float _3735 = isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0));
                        float _3736 = dot(vec3(_1380, _1383, _1386), vec3(_3728 * _3722, _3728 * _3723, _3728 * _3724));
                        float _5255 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3739 = isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0));
                        float _3743 = ((_3739 * _3739) * (_3721 + (-1.0))) + 1.0;
                        float _3744 = _3679 * _3720;
                        float _3745 = _3744 * _3744;
                        float _3748 = ((1.0 - _3745) * _3670) + _3745;
                        float _5266 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                        float _3749 = isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0));
                        float _3750 = 1.0 - _3720;
                        float _3760 = (0.5 / (((_3749 * ((_3735 * _3750) + _3720)) + 9.9999999392252902907785028219223e-09) + (((_3749 * _3750) + _3720) * _3735))) * _3749;
                        float _5277 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                        float _3771 = (((_3721 * 3.1415927410125732421875) * (isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0)))) / ((_3743 * _3743) * ((_3686 * 2.1991131305694580078125) + 3.141590118408203125))) * _3676;
                        _3524 = (_3690 * _3639.x) + _3597;
                        _3525 = (_3690 * _3639.y) + _3598;
                        _3526 = (_3690 * _3639.z) + _3599;
                        _3521 = (_3771 * _3656.x) + _3594;
                        _3522 = (_3771 * _3656.y) + _3595;
                        _3523 = (_3771 * _3656.z) + _3596;
                        if (_3601 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3594 = _3521;
                            _3595 = _3522;
                            _3596 = _3523;
                            _3597 = _3524;
                            _3598 = _3525;
                            _3599 = _3526;
                            _3600 = _3601;
                        }
                    }
                    frontier_phi_68_pred = _3523;
                    frontier_phi_68_pred_1 = _3526;
                    frontier_phi_68_pred_2 = _3525;
                    frontier_phi_68_pred_3 = _3524;
                    frontier_phi_68_pred_4 = _3522;
                    frontier_phi_68_pred_5 = _3521;
                }
                _3302 = frontier_phi_68_pred;
                _3308 = frontier_phi_68_pred_1;
                _3306 = frontier_phi_68_pred_2;
                _3304 = frontier_phi_68_pred_3;
                _3300 = frontier_phi_68_pred_4;
                _3298 = frontier_phi_68_pred_5;
                uint _3456 = _3455 + 1u;
                if (_3456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3449 = _3298;
                    _3450 = _3300;
                    _3451 = _3302;
                    _3452 = _3304;
                    _3453 = _3306;
                    _3454 = _3308;
                    _3455 = _3456;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3297 = _3298;
            _3299 = _3300;
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
            _3307 = _3308;
        }
        uvec4 _3311 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3312 = _3311.z;
        uint _3314 = (_3312 >> 8u) & 15u;
        float _3417;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        if (((4294967295u << _3314) & _3192) == 0u)
        {
            _3417 = _3297;
            _3419 = _3299;
            _3421 = _3301;
            _3423 = _3303;
            _3425 = _3305;
            _3427 = _3307;
        }
        else
        {
            float _3442 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
            float _3443 = _3442 * _3146;
            float _3444 = _3442 * _3147;
            float _3445 = _3442 * _3148;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3314 < ((_3312 >> 12u) & 15u))
            {
                float _3418;
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3428;
                float _3577 = _3297;
                float _3578 = _3299;
                float _3579 = _3301;
                float _3580 = _3303;
                float _3581 = _3305;
                float _3582 = _3307;
                uint _3583 = _3314;
                uint _3592;
                bool _3593;
                for (;;)
                {
                    _3592 = texelFetch(g_lightClassification, int((((_3186 << 5u) + (_3172 << 9u)) + (_3583 << 2u)) >> 2u)).x;
                    _3593 = _3592 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3593)
                    {
                        frontier_phi_79_pred = _3582;
                        frontier_phi_79_pred_1 = _3581;
                        frontier_phi_79_pred_2 = _3580;
                        frontier_phi_79_pred_3 = _3579;
                        frontier_phi_79_pred_4 = _3578;
                        frontier_phi_79_pred_5 = _3577;
                    }
                    else
                    {
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _4078;
                        float _4079;
                        float _4080;
                        float _4081;
                        float _4082;
                        float _4083;
                        float _3798 = _3577;
                        float _3799 = _3578;
                        float _3800 = _3579;
                        float _3801 = _3580;
                        float _3802 = _3581;
                        float _3803 = _3582;
                        uint _3804 = _3592;
                        uint _3805;
                        vec4 _3830;
                        float _3831;
                        vec4 _3846;
                        vec3 _3858;
                        vec4 _3873;
                        vec4 _3888;
                        float _3934;
                        bool _3935;
                        for (;;)
                        {
                            uint _3815 = ((_3583 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3804));
                            _3805 = (_3804 + 4294967295u) & _3804;
                            uint _3817 = _3815 * 40u;
                            _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            _3831 = _3830.w;
                            uint _3833 = (_3815 * 40u) + 4u;
                            _3846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 3u)).x));
                            uint _3848 = (_3815 * 40u) + 8u;
                            _3858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x));
                            uint _3860 = (_3815 * 40u) + 16u;
                            _3873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 3u)).x));
                            uint _3875 = (_3815 * 40u) + 20u;
                            _3888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 3u)).x));
                            uint _3890 = (_3815 * 40u) + 24u;
                            vec4 _3903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 3u)).x));
                            uint _3909 = (_3815 * 40u) + 28u;
                            vec4 _3922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 3u)).x));
                            _3934 = fma(_3148, _3922.z, fma(_3147, _3922.y, _3922.x * _3146)) + _3922.w;
                            _3935 = !((fma(_3148, _3903.z, fma(_3147, _3903.y, _3903.x * _3146)) + _3903.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3935)
                            {
                                float _3962 = _3830.x - _3146;
                                float _3963 = _3830.y - _3147;
                                float _3964 = _3830.z - _3148;
                                float _3965 = dot(vec3(_3962, _3963, _3964), vec3(_3962, _3963, _3964));
                                float _3968 = inversesqrt(_3965);
                                float _3969 = _3968 * _3962;
                                float _3970 = _3968 * _3963;
                                float _3971 = _3968 * _3964;
                                float _3975 = 1.0 - (_3965 / (_3831 * _3831));
                                float _5288 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3976 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
                                float _3980 = sqrt(_3965) * _3846.w;
                                float _3982 = 1.39999997615814208984375 / (_3980 + 1.39999997615814208984375);
                                float _3983 = _3982 * _3982;
                                float _3986 = ((1.0 - _3983) * dot(vec3(_3969, _3970, _3971), vec3(_1380, _1383, _1386))) + _3983;
                                float _3989 = _3980 * _3980;
                                float _3993 = (fma(_3148, _3873.z, fma(_3147, _3873.y, _3873.x * _3146)) + _3873.w) / _3934;
                                float _3994 = (fma(_3148, _3888.z, fma(_3147, _3888.y, _3888.x * _3146)) + _3888.w) / _3934;
                                float _3998 = 1.0 - dot(vec2(_3993, _3994), vec2(_3993, _3994));
                                float _5304 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0));
                                float _4000 = _3999 * (((isnan(0.0) ? _3986 : (isnan(_3986) ? 0.0 : max(_3986, 0.0))) * _3976) / ((_3989 * 0.699999988079071044921875) + 1.0));
                                float _4012 = exp2(log2(1.0 / ((_3989 * 3.5) + 5.0)) * 0.25);
                                float _4013 = 1.0 - _1455;
                                float _4020 = sqrt(1.0 - ((1.0 - (_4013 * _4013)) * (1.0 - (_4012 * _4012))));
                                float _4021 = _4020 * _4020;
                                float _4022 = _4021 * _4021;
                                float _4023 = _3969 - _3443;
                                float _4024 = _3970 - _3444;
                                float _4025 = _3971 - _3445;
                                float _4029 = inversesqrt(dot(vec3(_4023, _4024, _4025), vec3(_4023, _4024, _4025)));
                                float _4033 = dot(vec3(_1380, _1383, _1386), vec3((-0.0) - _3443, (-0.0) - _3444, (-0.0) - _3445));
                                float _5315 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4036 = isnan(1.0) ? _5315 : (isnan(_5315) ? 1.0 : min(_5315, 1.0));
                                float _4037 = dot(vec3(_1380, _1383, _1386), vec3(_4029 * _4023, _4029 * _4024, _4029 * _4025));
                                float _5326 = isnan(0.0) ? _4037 : (isnan(_4037) ? 0.0 : max(_4037, 0.0));
                                float _4040 = isnan(1.0) ? _5326 : (isnan(_5326) ? 1.0 : min(_5326, 1.0));
                                float _4044 = ((_4040 * _4040) * (_4022 + (-1.0))) + 1.0;
                                float _4045 = _3982 * _4021;
                                float _4046 = _4045 * _4045;
                                float _4052 = ((1.0 - _4046) * dot(vec3(_1380, _1383, _1386), vec3(_3969, _3970, _3971))) + _4046;
                                float _5337 = isnan(0.0) ? _4052 : (isnan(_4052) ? 0.0 : max(_4052, 0.0));
                                float _4053 = isnan(1.0) ? _5337 : (isnan(_5337) ? 1.0 : min(_5337, 1.0));
                                float _4054 = 1.0 - _4021;
                                float _4064 = (0.5 / (((_4053 * ((_4036 * _4054) + _4021)) + 9.9999999392252902907785028219223e-09) + (((_4053 * _4054) + _4021) * _4036))) * _4053;
                                float _5348 = isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0));
                                float _4074 = (_3999 * _3976) * (((_4022 * 3.1415927410125732421875) * (isnan(1.0) ? _5348 : (isnan(_5348) ? 1.0 : min(_5348, 1.0)))) / ((_4044 * _4044) * ((_3989 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _4000 * _3846.z;
                                frontier_phi_85_pred_1 = _4000 * _3846.y;
                                frontier_phi_85_pred_2 = _4000 * _3846.x;
                                frontier_phi_85_pred_3 = _4074 * _3858.z;
                                frontier_phi_85_pred_4 = _4074 * _3858.y;
                                frontier_phi_85_pred_5 = _4074 * _3858.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _4083 = frontier_phi_85_pred;
                            _4082 = frontier_phi_85_pred_1;
                            _4081 = frontier_phi_85_pred_2;
                            _4080 = frontier_phi_85_pred_3;
                            _4079 = frontier_phi_85_pred_4;
                            _4078 = frontier_phi_85_pred_5;
                            _3788 = _4081 + _3801;
                            _3789 = _4082 + _3802;
                            _3790 = _4083 + _3803;
                            _3785 = _4078 + _3798;
                            _3786 = _4079 + _3799;
                            _3787 = _4080 + _3800;
                            if (_3805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3798 = _3785;
                                _3799 = _3786;
                                _3800 = _3787;
                                _3801 = _3788;
                                _3802 = _3789;
                                _3803 = _3790;
                                _3804 = _3805;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3790;
                        frontier_phi_79_pred_1 = _3789;
                        frontier_phi_79_pred_2 = _3788;
                        frontier_phi_79_pred_3 = _3787;
                        frontier_phi_79_pred_4 = _3786;
                        frontier_phi_79_pred_5 = _3785;
                    }
                    _3428 = frontier_phi_79_pred;
                    _3426 = frontier_phi_79_pred_1;
                    _3424 = frontier_phi_79_pred_2;
                    _3422 = frontier_phi_79_pred_3;
                    _3420 = frontier_phi_79_pred_4;
                    _3418 = frontier_phi_79_pred_5;
                    uint _3584 = _3583 + 1u;
                    if (_3584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3577 = _3418;
                        _3578 = _3420;
                        _3579 = _3422;
                        _3580 = _3424;
                        _3581 = _3426;
                        _3582 = _3428;
                        _3583 = _3584;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3424;
                frontier_phi_60_61_ladder_1 = _3428;
                frontier_phi_60_61_ladder_2 = _3426;
                frontier_phi_60_61_ladder_3 = _3422;
                frontier_phi_60_61_ladder_4 = _3420;
                frontier_phi_60_61_ladder_5 = _3418;
            }
            else
            {
                frontier_phi_60_61_ladder = _3303;
                frontier_phi_60_61_ladder_1 = _3307;
                frontier_phi_60_61_ladder_2 = _3305;
                frontier_phi_60_61_ladder_3 = _3301;
                frontier_phi_60_61_ladder_4 = _3299;
                frontier_phi_60_61_ladder_5 = _3297;
            }
            _3417 = frontier_phi_60_61_ladder_5;
            _3419 = frontier_phi_60_61_ladder_4;
            _3421 = frontier_phi_60_61_ladder_3;
            _3423 = frontier_phi_60_61_ladder;
            _3425 = frontier_phi_60_61_ladder_2;
            _3427 = frontier_phi_60_61_ladder_1;
        }
        float _3432 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _3204 = (_3432 * _3423) + _2641;
        _3206 = (_3432 * _3425) + _2643;
        _3208 = (_3432 * _3427) + _2645;
        _3210 = ((_3417 * _1424) * _3432) + _2986;
        _3212 = ((_3419 * _1426) * _3432) + _2988;
        _3214 = ((_3421 * _1427) * _3432) + _2990;
    }
    else
    {
        _3204 = _2641;
        _3206 = _2643;
        _3208 = _2645;
        _3210 = _2986;
        _3212 = _2988;
        _3214 = _2990;
    }
    float _5364 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _5375 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
    float _5386 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _5397 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _3232 = ((isnan(1.0) ? _5364 : (isnan(_5364) ? 1.0 : min(_5364, 1.0))) * (_3204 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1439))) + ((_3210 + ((isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))) * _2280)) * cbPerFrame._m0[3u].x);
    float _3233 = ((isnan(1.0) ? _5375 : (isnan(_5375) ? 1.0 : min(_5375, 1.0))) * (_3206 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1439))) + ((_3212 + ((isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0))) * _2280)) * cbPerFrame._m0[3u].x);
    float _3234 = ((isnan(1.0) ? _5386 : (isnan(_5386) ? 1.0 : min(_5386, 1.0))) * (_3208 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1439))) + ((_3214 + ((isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))) * _2280)) * cbPerFrame._m0[3u].x);
    float _3235 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
    float _3236 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
    float _3237 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
    float _3242 = cbInstanceData._m0[_1399 + 6u].w * (isnan(1.0) ? _5397 : (isnan(_5397) ? 1.0 : min(_5397, 1.0)));
    float _3247 = _1361 / cbSceneParam._m0[86u].x;
    float _3248 = _1362 / cbSceneParam._m0[86u].y;
    vec4 _3262 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, (log2((isnan(cbSceneParam._m0[77u].w) ? _1284 : (isnan(_1284) ? cbSceneParam._m0[77u].w : min(_1284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3264 = _3262.x;
    float _3265 = _3262.y;
    float _3266 = _3262.z;
    float _3267 = _3262.w;
    float _3359;
    float _3361;
    float _3363;
    float _3365;
    if (_1284 > cbSceneParam._m0[78u].w)
    {
        float _3322 = isnan(_1284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1284 : min(cbSceneParam._m0[80u].w, _1284));
        float _3323 = _3322 / _1284;
        float _3334 = _3323 * _1334;
        float _3335 = _1335 * _3323;
        float _3336 = (-0.0) - _3335;
        float _3337 = _3323 * _1336;
        float _3339 = (cbSceneParam._m0[77u].w * _3336) / _3322;
        float _3340 = _3339 + cbSceneParam._m0[79u].w;
        float _3341 = cbSceneParam._m0[79u].w - _3335;
        float _3347 = sqrt(((_3334 * _3334) + (_3335 * _3335)) + (_3337 * _3337));
        float _3350 = (1.0 - (cbSceneParam._m0[77u].w / _3322)) * _3347;
        float _3355 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3357 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3534;
        if (abs((_3336 - _3339) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3534 = ((((_3340 > 0.0) ? exp2(_3355 * _3340) : (2.0 - exp2(_3357 * _3340))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3350;
        }
        else
        {
            float _3478 = 1.0 / cbSceneParam._m0[80u].x;
            float _3479 = isnan(_3341) ? _3340 : (isnan(_3340) ? _3341 : max(_3340, _3341));
            float _3480 = isnan(_3341) ? _3340 : (isnan(_3340) ? _3341 : min(_3340, _3341));
            float _3489 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : min(_3479, 0.0));
            float _3490 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : min(_3480, 0.0));
            _3534 = ((abs(_3347 / _3336) * cbSceneParam._m0[80u].y) * ((((_3489 - _3490) * 2.0) - ((exp2(_3355 * (isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0)))) - exp2(_3355 * (isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))))) * _3478)) - ((exp2(_3357 * _3489) - exp2(_3357 * _3490)) * _3478))) + (_3350 * cbSceneParam._m0[80u].z);
        }
        vec4 _3536 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, 1.0), 0.0);
        float _3545 = exp2((_3534 * (-1.44269502162933349609375)) * (1.0 - _3536.w));
        float _3546 = log2(_3545);
        float _3562 = log2(_3267);
        _3359 = (exp2(_3562 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].x)) * _3536.x) / cbSceneParam._m0[78u].x)) + _3264;
        _3361 = (exp2(_3562 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].y)) * _3536.y) / cbSceneParam._m0[78u].y)) + _3265;
        _3363 = (exp2(_3562 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].z)) * _3536.z) / cbSceneParam._m0[78u].z)) + _3266;
        _3365 = _3545 * _3267;
    }
    else
    {
        _3359 = _3264;
        _3361 = _3265;
        _3363 = _3266;
        _3365 = _3267;
    }
    bool _3572;
    vec4 _3375;
    vec4 _3397;
    float _3399;
    float _3403;
    float _3404;
    float _3405;
    float _3406;
    bool _3416;
    for (;;)
    {
        _3375 = cbMatDynParam._m0[0u];
        float _3377 = roundEven(_3375.y);
        bool _3378 = _3377 == 3.0;
        float _3379 = log2(_3365);
        float _3386 = exp2(_3379 * cbSceneParam._m0[78u].x) * _3235;
        float _3387 = exp2(_3379 * cbSceneParam._m0[78u].y) * _3236;
        float _3388 = exp2(_3379 * cbSceneParam._m0[78u].z) * _3237;
        float _3395 = _1350 + (-0.5);
        _3397 = cbMtdParam._m0[1u];
        _3399 = _3397.y * _3395;
        float _3402 = (_3377 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3403 = _3402 * (_3378 ? _3386 : (_3386 + (cbSceneParam._m0[72u].w * _3359)));
        _3404 = _3402 * (_3378 ? _3387 : (_3387 + (cbSceneParam._m0[72u].w * _3361)));
        _3405 = _3402 * (_3378 ? _3388 : (_3388 + (cbSceneParam._m0[72u].w * _3363)));
        _3406 = _3395 * 0.999000012874603271484375;
        _3416 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3416)
        {
            if ((cbInstanceData._m0[_1399 + 7u].x + _3406) < 0.5)
            {
                _3572 = true;
                break;
            }
        }
        uint _3513 = _1400 + uint(_3375.w);
        if ((cbInstanceData._m0[_3513].w < 1.0) && ((cbInstanceData._m0[_3513].w + _3406) < 0.5))
        {
            _3572 = true;
            break;
        }
        if ((_3399 + _618) < _3397.x)
        {
            _3572 = true;
            break;
        }
        _3572 = false;
        break;
    }
    float _3776;
    if (_3572)
    {
        discard_state = true;
        _3776 = 0.0;
    }
    else
    {
        _3776 = _3242;
    }
    SV_Target.x = _3403;
    SV_Target.y = _3404;
    SV_Target.z = _3405;
    SV_Target.w = _3776;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3242;
    discard_exit();
}


