#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1797;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _251 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _252 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _253 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _257 = inversesqrt(dot(vec3(_251, _252, _253), vec3(_251, _252, _253)));
    float _258 = _257 * _251;
    float _259 = _257 * _252;
    float _260 = _257 * _253;
    float _264 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = _264 * NORMAL.x;
    float _266 = _264 * NORMAL.y;
    float _267 = _264 * NORMAL.z;
    float _271 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = _271 * TANGENT.x;
    float _273 = _271 * TANGENT.y;
    float _274 = _271 * TANGENT.z;
    float _278 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _279 = _278 * TANGENT_2.x;
    float _280 = _278 * TANGENT_2.y;
    float _281 = _278 * TANGENT_2.z;
    float _286;
    float _287;
    float _288;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _286 = (-0.0) - _265;
        _287 = (-0.0) - _266;
        _288 = (-0.0) - _267;
    }
    else
    {
        _286 = _265;
        _287 = _266;
        _288 = _267;
    }
    vec4 _308 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = 1.0 - ((1.0 - _308.z) * 1.39999997615814208984375);
    float _4128 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _321 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _323 = 1.0 - ((1.0 - _308.x) * 1.39999997615814208984375);
    float _4139 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _326 = 1.0 - ((1.0 - _308.y) * 1.39999997615814208984375);
    float _4150 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _327 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _329 = (_324 + _321) + _327;
    float _336 = (_329 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _337 = (_329 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _338 = (_329 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _363 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _372 = 1.0 - ((1.0 - _363.x) * 1.39999997615814208984375);
    float _4161 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _383 = (_373 * ((cbMtdParam._m0[9u].x - _336) + ((1.0 - cbMtdParam._m0[9u].x) * _329))) + _336;
    float _384 = (_373 * ((cbMtdParam._m0[9u].y - _337) + ((1.0 - cbMtdParam._m0[9u].y) * _329))) + _337;
    float _385 = (_373 * ((cbMtdParam._m0[9u].z - _338) + ((1.0 - cbMtdParam._m0[9u].z) * _329))) + _338;
    float _398 = 1.0 - ((1.0 - _363.y) * 1.39999997615814208984375);
    float _4172 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _409 = (((cbMtdParam._m0[17u].x - _383) + ((1.0 - cbMtdParam._m0[17u].x) * _329)) * _399) + _383;
    float _410 = (((cbMtdParam._m0[17u].y - _384) + ((1.0 - cbMtdParam._m0[17u].y) * _329)) * _399) + _384;
    float _411 = (((cbMtdParam._m0[17u].z - _385) + ((1.0 - cbMtdParam._m0[17u].z) * _329)) * _399) + _385;
    float _425 = 1.0 - ((1.0 - _363.z) * 1.39999997615814208984375);
    float _4183 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _457 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _471 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _457) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4194 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = 1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)));
    float _481 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _457) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4205 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _483 = 1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)));
    vec4 _501 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _506 = cbMtdParam._m0[10u].x * _483;
    float _508 = cbMtdParam._m0[10u].y * _483;
    float _510 = cbMtdParam._m0[10u].z * _483;
    float _527 = ((_503 * (cbMtdParam._m0[16u].x - _506)) * _473) + (_506 * _503);
    float _528 = ((_504 * (cbMtdParam._m0[16u].y - _508)) * _473) + (_508 * _504);
    float _529 = ((_505 * (cbMtdParam._m0[16u].z - _510)) * _473) + (_510 * _505);
    float _552 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _556 = (_552 * ((TEXCOORD_7.x - _457) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _557 = (_552 * ((TEXCOORD_7.y - _457) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _558 = (_552 * ((TEXCOORD_7.z - _457) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4216 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4227 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4238 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _567 = (1.0 - cbMtdParam._m0[25u].x) + _324;
    float _570 = _567 * (1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))));
    float _571 = _567 * (1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))));
    float _572 = ((_324 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))));
    float _582 = _483 + _473;
    float _583 = _582 + _570;
    float _584 = _582 + _571;
    float _585 = _582 + _572;
    float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _589 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
    float _590 = isnan(1.0) ? _587 : (isnan(_587) ? 1.0 : min(_587, 1.0));
    float _591 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
    vec4 _609 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _614 = _609.w;
    float _615 = _609.x * cbMtdParam._m0[12u].x;
    float _616 = _609.y * cbMtdParam._m0[12u].y;
    float _617 = _609.z * cbMtdParam._m0[12u].z;
    vec4 _635 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _649 = (((_635.x * cbMtdParam._m0[13u].x) - _615) * _324) + _615;
    float _650 = (((_635.y * cbMtdParam._m0[13u].y) - _616) * _324) + _616;
    float _651 = (((_635.z * cbMtdParam._m0[13u].z) - _617) * _324) + _617;
    vec4 _670 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _684 = (((_670.x * cbMtdParam._m0[14u].x) - _649) * _327) + _649;
    float _685 = (((_670.y * cbMtdParam._m0[14u].y) - _650) * _327) + _650;
    float _686 = (((_670.z * cbMtdParam._m0[14u].z) - _651) * _327) + _651;
    vec4 _703 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _717 = (((_703.x * cbMtdParam._m0[15u].x) - _684) * _321) + _684;
    float _718 = (((_703.y * cbMtdParam._m0[15u].y) - _685) * _321) + _685;
    float _719 = (((_703.z * cbMtdParam._m0[15u].z) - _686) * _321) + _686;
    float _739 = ((_717 - (_717 * _589)) + (((_589 * 4.55000019073486328125) * ((_570 * ((cbMtdParam._m0[11u].x * _503) - _527)) + _527)) * _717)) * ((((cbMtdParam._m0[18u].x - _409) + ((1.0 - cbMtdParam._m0[18u].x) * _329)) * _426) + _409);
    float _740 = ((_718 - (_718 * _590)) + (((_590 * 4.55000019073486328125) * ((_571 * ((cbMtdParam._m0[11u].y * _504) - _528)) + _528)) * _718)) * ((((cbMtdParam._m0[18u].y - _410) + ((1.0 - cbMtdParam._m0[18u].y) * _329)) * _426) + _410);
    float _741 = ((_719 - (_591 * _719)) + (((_591 * 4.55000019073486328125) * ((_572 * ((cbMtdParam._m0[11u].z * _505) - _529)) + _529)) * _719)) * ((((cbMtdParam._m0[18u].z - _411) + ((1.0 - cbMtdParam._m0[18u].z) * _329)) * _426) + _411);
    float _752 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _589) + cbMtdParam._m0[25u].w;
    float _755 = ((cbMtdParam._m0[20u].x - _752) * _324) + _752;
    float _758 = ((cbMtdParam._m0[20u].y - _755) * _327) + _755;
    float _761 = ((cbMtdParam._m0[20u].z - _758) * _321) + _758;
    vec4 _773 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _777 = _773.z;
    float _781 = (_773.x * 2.0) + (-1.0);
    float _783 = (_773.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_781, _783), vec2(_781, _783));
    float _4279 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))));
    float _792 = fma(_789, _286, fma(_783, _279, _781 * _258));
    float _795 = fma(_789, _287, fma(_783, _280, _781 * _259));
    float _798 = fma(_789, _288, fma(_783, _281, _781 * _260));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    vec4 _818 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _824 = (_818.x * 2.0) + (-1.0);
    float _825 = (_818.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _4290 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _831 = sqrt(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))));
    float _834 = fma(_831, _286, fma(_825, _279, _824 * _258));
    float _837 = fma(_831, _287, fma(_825, _280, _824 * _259));
    float _840 = fma(_831, _288, fma(_825, _281, _824 * _260));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _850 = fma(_847, _241, fma(_846, _240, _845 * _239));
    float _853 = fma(_847, _274, fma(_846, _273, _845 * _272));
    float _856 = fma(_847, _288, fma(_846, _287, _845 * _286));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    vec4 _874 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _880 = (_874.x * 2.0) + (-1.0);
    float _881 = (_874.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _4301 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _887 = sqrt(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))));
    float _890 = fma(_887, _286, fma(_881, _279, _880 * _258));
    float _893 = fma(_887, _287, fma(_881, _280, _880 * _259));
    float _896 = fma(_887, _288, fma(_881, _281, _880 * _260));
    float _900 = inversesqrt(dot(vec3(_890, _893, _896), vec3(_890, _893, _896)));
    float _901 = _900 * _890;
    float _902 = _900 * _893;
    float _903 = _900 * _896;
    float _906 = fma(_903, _241, fma(_902, _240, _901 * _239));
    float _909 = fma(_903, _274, fma(_902, _273, _901 * _272));
    float _912 = fma(_903, _288, fma(_902, _287, _901 * _286));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    vec4 _929 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _935 = (_929.x * 2.0) + (-1.0);
    float _936 = (_929.y * 2.0) + (-1.0);
    float _937 = dot(vec2(_935, _936), vec2(_935, _936));
    float _4312 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _942 = sqrt(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))));
    float _945 = fma(_942, _286, fma(_936, _279, _935 * _258));
    float _948 = fma(_942, _287, fma(_936, _280, _935 * _259));
    float _951 = fma(_942, _288, fma(_936, _281, _935 * _260));
    float _955 = inversesqrt(dot(vec3(_945, _948, _951), vec3(_945, _948, _951)));
    float _956 = _955 * _945;
    float _957 = _955 * _948;
    float _958 = _955 * _951;
    float _961 = fma(_958, _241, fma(_957, _240, _956 * _239));
    float _964 = fma(_958, _274, fma(_957, _273, _956 * _272));
    float _967 = fma(_958, _288, fma(_957, _287, _956 * _286));
    float _971 = inversesqrt(dot(vec3(_961, _964, _967), vec3(_961, _964, _967)));
    float _977 = fma(_805, _241, fma(_804, _240, _803 * _239));
    float _980 = fma(_805, _274, fma(_804, _273, _803 * _272));
    float _983 = fma(_805, _288, fma(_804, _287, _803 * _286));
    float _987 = inversesqrt(dot(vec3(_977, _980, _983), vec3(_977, _980, _983)));
    float _988 = _987 * _977;
    float _989 = _987 * _980;
    float _990 = _987 * _983;
    float _997 = (((_971 * _961) - _988) * _324) + _988;
    float _998 = (((_971 * _964) - _989) * _324) + _989;
    float _999 = (((_971 * _967) - _990) * _324) + _990;
    vec4 _1012 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1018 = (_1012.x * 2.0) + (-1.0);
    float _1019 = (_1012.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4323 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1025 = sqrt(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))));
    float _1028 = fma(_1025, _286, fma(_1019, _279, _1018 * _258));
    float _1031 = fma(_1025, _287, fma(_1019, _280, _1018 * _259));
    float _1034 = fma(_1025, _288, fma(_1019, _281, _1018 * _260));
    float _1038 = inversesqrt(dot(vec3(_1028, _1031, _1034), vec3(_1028, _1031, _1034)));
    float _1039 = _1038 * _1028;
    float _1040 = _1038 * _1031;
    float _1041 = _1038 * _1034;
    float _1044 = fma(_1041, _241, fma(_1040, _240, _1039 * _239));
    float _1047 = fma(_1041, _274, fma(_1040, _273, _1039 * _272));
    float _1050 = fma(_1041, _288, fma(_1040, _287, _1039 * _286));
    float _1054 = inversesqrt(dot(vec3(_1044, _1047, _1050), vec3(_1044, _1047, _1050)));
    float _1064 = (((_1054 * _1044) - _997) * _327) + _997;
    float _1065 = (((_1054 * _1047) - _998) * _327) + _998;
    float _1066 = (((_1054 * _1050) - _999) * _327) + _999;
    vec4 _1079 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1085 = (_1079.x * 2.0) + (-1.0);
    float _1086 = (_1079.y * 2.0) + (-1.0);
    float _1087 = dot(vec2(_1085, _1086), vec2(_1085, _1086));
    float _4334 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1092 = sqrt(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))));
    float _1095 = fma(_1092, _286, fma(_1086, _279, _1085 * _258));
    float _1098 = fma(_1092, _287, fma(_1086, _280, _1085 * _259));
    float _1101 = fma(_1092, _288, fma(_1086, _281, _1085 * _260));
    float _1105 = inversesqrt(dot(vec3(_1095, _1098, _1101), vec3(_1095, _1098, _1101)));
    float _1106 = _1105 * _1095;
    float _1107 = _1105 * _1098;
    float _1108 = _1105 * _1101;
    float _1111 = fma(_1108, _241, fma(_1107, _240, _1106 * _239));
    float _1114 = fma(_1108, _274, fma(_1107, _273, _1106 * _272));
    float _1117 = fma(_1108, _288, fma(_1107, _287, _1106 * _286));
    float _1121 = inversesqrt(dot(vec3(_1111, _1114, _1117), vec3(_1111, _1114, _1117)));
    float _1131 = (((_1121 * _1117) - _1066) * _321) + _1066;
    vec4 _1143 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1149 = (_1143.x * 2.0) + (-1.0);
    float _1150 = (_1143.y * 2.0) + (-1.0);
    float _1151 = dot(vec2(_1149, _1150), vec2(_1149, _1150));
    float _4345 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1156 = sqrt(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))));
    float _1159 = fma(_1156, _286, fma(_1150, _279, _1149 * _258));
    float _1162 = fma(_1156, _287, fma(_1150, _280, _1149 * _259));
    float _1165 = fma(_1156, _288, fma(_1150, _281, _1149 * _260));
    float _1169 = inversesqrt(dot(vec3(_1159, _1162, _1165), vec3(_1159, _1162, _1165)));
    float _1170 = _1169 * _1159;
    float _1171 = _1169 * _1162;
    float _1172 = _1169 * _1165;
    float _1175 = fma(_1172, _241, fma(_1171, _240, _1170 * _239));
    float _1178 = fma(_1172, _274, fma(_1171, _273, _1170 * _272));
    float _1181 = fma(_1172, _288, fma(_1171, _287, _1170 * _286));
    float _1185 = inversesqrt(dot(vec3(_1175, _1178, _1181), vec3(_1175, _1178, _1181)));
    vec4 _1223 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1237 = (((((((_906 * _473) * _916) * cbMtdParam._m0[24u].z) + ((((_583 * _567) * _850) * _860) * cbMtdParam._m0[24u].w)) + _1064) + (((_1121 * _1111) - _1064) * _321)) + (((_1175 * _483) * _1185) * cbMtdParam._m0[23u].z)) + (((_1223.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1242 = (((((((_909 * _473) * _916) * cbMtdParam._m0[24u].z) + ((((_584 * _567) * _853) * _860) * cbMtdParam._m0[24u].w)) + _1065) + (((_1121 * _1114) - _1065) * _321)) + (((_1178 * _483) * _1185) * cbMtdParam._m0[23u].z)) + (((_1223.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1245 = fma(_1131, _286, fma(_1242, _272, _1237 * _239));
    float _1248 = fma(_1131, _287, fma(_1242, _273, _1237 * _240));
    float _1251 = fma(_1131, _288, fma(_1242, _274, _1237 * _241));
    float _1255 = inversesqrt(dot(vec3(_1245, _1248, _1251), vec3(_1245, _1248, _1251)));
    float _1256 = _1255 * _1245;
    float _1257 = _1255 * _1248;
    float _1258 = _1255 * _1251;
    float _4356 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1259 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _1260 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4389 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4400 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4411 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _1264 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _1280 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1320 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1330 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1320);
    float _1331 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1320);
    float _1332 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1320);
    float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
    float _1337 = _1330 * _1336;
    float _1338 = _1331 * _1336;
    float _1339 = _1332 * _1336;
    float _1345 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1346 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1364 = fma(_1258, cbSceneParam._m0[5u].z, fma(_1257, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1256));
    float _1367 = fma(_1258, cbSceneParam._m0[6u].z, fma(_1257, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1256));
    float _1370 = fma(_1258, cbSceneParam._m0[7u].z, fma(_1257, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1256));
    uint _1383 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1385 = (_1383 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * cbInstanceData._m0[_1385].x;
    float _1392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * cbInstanceData._m0[_1385].y;
    float _1393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * cbInstanceData._m0[_1385].z;
    float _4422 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1394 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
    float _1395 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _4444 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1396 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _1397 = 1.0 - _1264;
    float _1398 = _1394 * _1397;
    float _1399 = _1395 * _1397;
    float _1400 = _1396 * _1397;
    float _1405 = (_1394 + (-0.039999999105930328369140625)) * _1264;
    float _1406 = (_1395 + (-0.039999999105930328369140625)) * _1264;
    float _1407 = (_1396 + (-0.039999999105930328369140625)) * _1264;
    float _1408 = _1405 + 0.039999999105930328369140625;
    float _1410 = _1406 + 0.039999999105930328369140625;
    float _1411 = _1407 + 0.039999999105930328369140625;
    vec4 _1420 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1345, cbSceneParam._m0[86u].y * _1346));
    float _1423 = _1420.x * TEXCOORD_7.w;
    float _1424 = dot(vec3(_1256, _1257, _1258), vec3(_1337, _1338, _1339));
    float _1427 = _1424 * 2.0;
    float _1431 = (_1427 * _1256) - _1337;
    float _1432 = (_1427 * _1257) - _1338;
    float _1433 = (_1427 * _1258) - _1339;
    float _1437 = abs(dot(vec3(_1337, _1338, _1339), vec3(_1256, _1257, _1258)));
    float _4455 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _1439 = sqrt(_1260);
    float _1452 = exp2((_1439 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1439 * 3.0));
    float _1458 = (1.0 - _1452) * ((_1439 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1459 = _1452 * _1439;
    float _1487 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1796;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1521 = fma(_1495, cbModelParam._m0[26u].z, fma(_1491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1487));
        float _1525 = fma(_1495, cbModelParam._m0[27u].z, fma(_1491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1487));
        float _1529 = fma(_1495, cbModelParam._m0[28u].z, fma(_1491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1487));
        float _1554 = _1487 + _1256;
        float _1555 = _1491 + _1257;
        float _1556 = _1495 + _1258;
        float _1566 = fma(_1556, cbModelParam._m0[26u].z, fma(_1555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1554)) - _1521;
        float _1567 = fma(_1556, cbModelParam._m0[27u].z, fma(_1555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1554)) - _1525;
        float _1568 = fma(_1556, cbModelParam._m0[28u].z, fma(_1555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1554)) - _1529;
        float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
        float _1585 = ((_1572 * _1566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1572 * _1567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1572 * _1568) / cbModelParam._m0[34u].z) + ((((((_1529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        float _1624 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1590.x + (-0.5));
        float _1626 = _1624 * (_1590.y + (-0.5));
        float _1627 = _1624 * (_1590.z + (-0.5));
        float _1634 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1597.x + (-0.5));
        float _1636 = _1634 * (_1597.y + (-0.5));
        float _1637 = _1634 * (_1597.z + (-0.5));
        float _1644 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1604.x + (-0.5));
        float _1646 = _1644 * (_1604.y + (-0.5));
        float _1647 = _1644 * (_1604.z + (-0.5));
        float _1654 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1611.x + (-0.5));
        float _1656 = _1654 * (_1611.y + (-0.5));
        float _1657 = _1654 * (_1611.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1678 = (dot(vec3(_1256, _1257, _1258), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1688 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4503 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1690 + 1.0))) + _1695) * _1658;
        float _1705 = _1626 * 0.5;
        float _1706 = _1636 * 0.5;
        float _1707 = _1646 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_1256, _1257, _1258), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4536 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1732 + 1.0))) + _1737) * _1659;
        float _1747 = _1627 * 0.5;
        float _1748 = _1637 * 0.5;
        float _1749 = _1647 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_1256, _1257, _1258), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4569 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1774 + 1.0))) + _1779) * _1660;
        _1796 = _1627;
        _1798 = _1626;
        _1799 = _1625;
        _1800 = _1637;
        _1801 = _1636;
        _1802 = _1635;
        _1803 = _1647;
        _1804 = _1646;
        _1805 = _1645;
        _1806 = _1660;
        _1807 = _1659;
        _1808 = _1658;
        _1809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
    }
    else
    {
        _1796 = _1797;
        _1798 = _1797;
        _1799 = _1797;
        _1800 = _1797;
        _1801 = _1797;
        _1802 = _1797;
        _1803 = _1797;
        _1804 = _1797;
        _1805 = _1797;
        _1806 = _1797;
        _1807 = _1797;
        _1808 = _1797;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _2106;
    float _2107;
    float _2108;
    float _2109;
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    float _2119;
    float _2120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1837 = fma(_1495, cbModelParam._m0[30u].z, fma(_1491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1487));
        float _1841 = fma(_1495, cbModelParam._m0[31u].z, fma(_1491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1487));
        float _1845 = fma(_1495, cbModelParam._m0[32u].z, fma(_1491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1487));
        float _1868 = _1487 + _1256;
        float _1869 = _1491 + _1257;
        float _1870 = _1495 + _1258;
        float _1880 = fma(_1870, cbModelParam._m0[30u].z, fma(_1869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1868)) - _1837;
        float _1881 = fma(_1870, cbModelParam._m0[31u].z, fma(_1869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1868)) - _1841;
        float _1882 = fma(_1870, cbModelParam._m0[32u].z, fma(_1869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1868)) - _1845;
        float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
        float _1899 = ((_1886 * _1880) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1837 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1900 = ((_1886 * _1881) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1841 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1901 = ((_1886 * _1882) / cbModelParam._m0[35u].z) + ((((((_1845 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        float _1936 = exp2((_1903.w + (-0.5)) * 20.0) * 2.0;
        float _1937 = _1936 * (_1903.x + (-0.5));
        float _1938 = _1936 * (_1903.y + (-0.5));
        float _1939 = _1936 * (_1903.z + (-0.5));
        float _1946 = exp2((_1910.w + (-0.5)) * 20.0) * 2.0;
        float _1947 = _1946 * (_1910.x + (-0.5));
        float _1948 = _1946 * (_1910.y + (-0.5));
        float _1949 = _1946 * (_1910.z + (-0.5));
        float _1956 = exp2((_1917.w + (-0.5)) * 20.0) * 2.0;
        float _1957 = _1956 * (_1917.x + (-0.5));
        float _1958 = _1956 * (_1917.y + (-0.5));
        float _1959 = _1956 * (_1917.z + (-0.5));
        float _1966 = exp2((_1924.w + (-0.5)) * 20.0) * 2.0;
        float _1967 = _1966 * (_1924.x + (-0.5));
        float _1968 = _1966 * (_1924.y + (-0.5));
        float _1969 = _1966 * (_1924.z + (-0.5));
        float _1970 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1972 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1937 * 0.5;
        float _1974 = _1947 * 0.5;
        float _1975 = _1957 * 0.5;
        float _1976 = dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975));
        float _1981 = (_1976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1976);
        float _1989 = (dot(vec3(_1256, _1257, _1258), vec3(_1981 * _1973, _1981 * _1974, _1981 * _1975)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1998 = sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975)) / (_1970 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2000 = _1999 * 2.0;
        float _2004 = (1.0 - _1999) / (_1999 + 1.0);
        float _4632 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2014 = ((((1.0 - _2005) * (_2000 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2000 + 1.0))) + _2005) * _1970;
        float _2015 = _1938 * 0.5;
        float _2016 = _1948 * 0.5;
        float _2017 = _1958 * 0.5;
        float _2018 = dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017));
        float _2023 = (_2018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2018);
        float _2031 = (dot(vec3(_1256, _1257, _1258), vec3(_2023 * _2015, _2023 * _2016, _2023 * _2017)) + 1.0) * 0.5;
        float _4643 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2040 = sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017)) / (_1971 + 9.9999997473787516355514526367188e-06);
        float _4654 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2042 = _2041 * 2.0;
        float _2046 = (1.0 - _2041) / (_2041 + 1.0);
        float _4665 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2056 = ((((1.0 - _2047) * (_2042 + 2.0)) * exp2(log2(isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2042 + 1.0))) + _2047) * _1971;
        float _2057 = _1939 * 0.5;
        float _2058 = _1949 * 0.5;
        float _2059 = _1959 * 0.5;
        float _2060 = dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059));
        float _2065 = (_2060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2060);
        float _2073 = (dot(vec3(_1256, _1257, _1258), vec3(_2065 * _2057, _2065 * _2058, _2065 * _2059)) + 1.0) * 0.5;
        float _4676 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2082 = sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059)) / (_1972 + 9.9999997473787516355514526367188e-06);
        float _4687 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2084 = _2083 * 2.0;
        float _2088 = (1.0 - _2083) / (_2083 + 1.0);
        float _4698 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2098 = ((((1.0 - _2089) * (_2084 + 2.0)) * exp2(log2(isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2084 + 1.0))) + _2089) * _1972;
        _2106 = _1939;
        _2107 = _1938;
        _2108 = _1937;
        _2109 = _1949;
        _2110 = _1948;
        _2111 = _1947;
        _2112 = _1959;
        _2113 = _1958;
        _2114 = _1957;
        _2115 = _1972;
        _2116 = _1971;
        _2117 = _1970;
        _2118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
        _2119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)));
        _2120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)));
    }
    else
    {
        _2106 = _1797;
        _2107 = _1797;
        _2108 = _1797;
        _2109 = _1797;
        _2110 = _1797;
        _2111 = _1797;
        _2112 = _1797;
        _2113 = _1797;
        _2114 = _1797;
        _2115 = _1797;
        _2116 = _1797;
        _2117 = _1797;
        _2118 = 0.0;
        _2119 = 0.0;
        _2120 = 0.0;
    }
    float _2130 = (cbModelParam._m0[1u].x * (_2118 - _1809)) + _1809;
    float _2131 = (cbModelParam._m0[1u].x * (_2119 - _1810)) + _1810;
    float _2132 = (cbModelParam._m0[1u].x * (_2120 - _1811)) + _1811;
    float _2153 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2130 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2130 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2130));
    float _2174 = _1431 * 0.5;
    float _2175 = _1432 * 0.5;
    float _2176 = _1433 * 0.5;
    float _2177 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2108, _2111, _2114, _2117));
    float _2180 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2107, _2110, _2113, _2116));
    float _2183 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2106, _2109, _2112, _2115));
    float _2217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2190 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1796, _1800, _1803, _1806));
        float _2194 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1798, _1801, _1804, _1807));
        float _2198 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1799, _1802, _1805, _1808));
        float _2205 = dot(vec4(cbModelParam._m0[39u]), vec4(_2174, _2175, _2176, 1.0));
        _2217 = dot(vec3(isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0)), isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0)), isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2205) ? 0.0 : (isnan(0.0) ? _2205 : max(0.0, _2205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2217 = 1.0;
    }
    float _2228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2219 = dot(vec4(cbModelParam._m0[40u]), vec4(_2174, _2175, _2176, 1.0));
        _2228 = dot(vec3(isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0)), isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0)), isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2219) ? 0.0 : (isnan(0.0) ? _2219 : max(0.0, _2219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2228 = 1.0;
    }
    float _2232 = (_2228 * cbModelParam._m0[1u].x) + (_2217 * (1.0 - cbModelParam._m0[1u].x));
    float _2242 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1260);
    float _2243 = isnan(_2242) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2242 : min(cbModelParam._m0[25u].z, _2242));
    float _2323;
    float _2325;
    float _2327;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2290 = fma(_1495, cbModelParam._m0[13u].z, fma(_1491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1487)) + cbModelParam._m0[13u].w;
        float _2294 = fma(_1495, cbModelParam._m0[14u].z, fma(_1491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1487)) + cbModelParam._m0[14u].w;
        float _2298 = fma(_1495, cbModelParam._m0[15u].z, fma(_1491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1487)) + cbModelParam._m0[15u].w;
        float _2301 = fma(_1433, cbModelParam._m0[13u].z, fma(_1432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1431));
        float _2304 = fma(_1433, cbModelParam._m0[14u].z, fma(_1432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1431));
        float _2307 = fma(_1433, cbModelParam._m0[15u].z, fma(_1432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1431));
        float _2335;
        if (_2301 > 0.0)
        {
            _2335 = abs((1.0 - _2290) / _2301);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2301 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2290 + 1.0) / _2301);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2335 = frontier_phi_16_14_ladder;
        }
        float _2538;
        if (_2304 > 0.0)
        {
            _2538 = abs((1.0 - _2294) / _2304);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2304 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2294 + 1.0) / _2304);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2538 = frontier_phi_25_21_ladder;
        }
        float _2792;
        if (_2307 > 0.0)
        {
            _2792 = abs((1.0 - _2298) / _2307);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2307 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2298 + 1.0) / _2307);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2792 = frontier_phi_37_32_ladder;
        }
        float _2794 = isnan(_2538) ? _2335 : (isnan(_2335) ? _2538 : min(_2335, _2538));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2301) + _2290;
        float _2800 = (_2795 * _2304) + _2294;
        float _2801 = (_2795 * _2307) + _2298;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2802;
        float _2806 = _2802 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 > _2806) || ((_2800 < _2804) || ((_2799 < _2804) || (_2799 > _2806))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2801, cbModelParam._m0[9u].z, fma(_2800, cbModelParam._m0[9u].y, _2799 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2801, cbModelParam._m0[10u].z, fma(_2800, cbModelParam._m0[10u].y, _2799 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2801, cbModelParam._m0[11u].z, fma(_2800, cbModelParam._m0[11u].y, _2799 * cbModelParam._m0[11u].x))), _2243);
            frontier_phi_15_37_ladder = _2929.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2929.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2929.x * cbModelParam._m0[1u].y;
        }
        _2323 = frontier_phi_15_37_ladder_2;
        _2325 = frontier_phi_15_37_ladder_1;
        _2327 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1431, _1432, _1433), _2243);
        _2323 = _2311.x * cbModelParam._m0[1u].y;
        _2325 = _2311.y * cbModelParam._m0[1u].y;
        _2327 = _2311.z * cbModelParam._m0[1u].y;
    }
    float _2331 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1260);
    float _2332 = isnan(_2331) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2331 : min(cbModelParam._m0[25u].w, _2331));
    float _2422;
    float _2424;
    float _2426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2386 = fma(_1495, cbModelParam._m0[21u].z, fma(_1491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1487)) + cbModelParam._m0[21u].w;
        float _2390 = fma(_1495, cbModelParam._m0[22u].z, fma(_1491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1487)) + cbModelParam._m0[22u].w;
        float _2394 = fma(_1495, cbModelParam._m0[23u].z, fma(_1491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1487)) + cbModelParam._m0[23u].w;
        float _2397 = fma(_1433, cbModelParam._m0[21u].z, fma(_1432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1431));
        float _2400 = fma(_1433, cbModelParam._m0[22u].z, fma(_1432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1431));
        float _2403 = fma(_1433, cbModelParam._m0[23u].z, fma(_1432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1431));
        float _2543;
        if (_2397 > 0.0)
        {
            _2543 = abs((1.0 - _2386) / _2397);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2397 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2386 + 1.0) / _2397);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2543 = frontier_phi_27_23_ladder;
        }
        float _2819;
        if (_2400 > 0.0)
        {
            _2819 = abs((1.0 - _2390) / _2400);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2400 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2390 + 1.0) / _2400);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2819 = frontier_phi_39_34_ladder;
        }
        float _3032;
        if (_2403 > 0.0)
        {
            _3032 = abs((1.0 - _2394) / _2403);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2403 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2394 + 1.0) / _2403);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _3032 = frontier_phi_48_45_ladder;
        }
        float _3034 = isnan(_2819) ? _2543 : (isnan(_2543) ? _2819 : min(_2543, _2819));
        float _3035 = isnan(_3032) ? _3034 : (isnan(_3034) ? _3032 : min(_3034, _3032));
        float _3039 = (_3035 * _2397) + _2386;
        float _3040 = (_3035 * _2400) + _2390;
        float _3041 = (_3035 * _2403) + _2394;
        float _3042 = _3035 * 9.9999997473787516355514526367188e-05;
        float _3043 = (-1.0) - _3042;
        float _3045 = _3042 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_3041 > _3045) || ((_3041 < _3043) || ((_3040 > _3045) || ((_3040 < _3043) || ((_3039 < _3043) || (_3039 > _3045))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3244 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3041, cbModelParam._m0[17u].z, fma(_3040, cbModelParam._m0[17u].y, _3039 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3041, cbModelParam._m0[18u].z, fma(_3040, cbModelParam._m0[18u].y, _3039 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3041, cbModelParam._m0[19u].z, fma(_3040, cbModelParam._m0[19u].y, _3039 * cbModelParam._m0[19u].x))), _2332);
            frontier_phi_24_48_ladder = _3244.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _3244.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _3244.x * cbModelParam._m0[1u].z;
        }
        _2422 = frontier_phi_24_48_ladder_2;
        _2424 = frontier_phi_24_48_ladder_1;
        _2426 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1431, _1432, _1433), _2332);
        _2422 = _2406.x * cbModelParam._m0[1u].z;
        _2424 = _2406.y * cbModelParam._m0[1u].z;
        _2426 = _2406.z * cbModelParam._m0[1u].z;
    }
    float _2439 = (((_1458 * _1408) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2422 - _2323)) + _2323);
    float _2441 = (((_1458 * _1410) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2424 - _2325)) + _2325);
    float _2443 = (((_1458 * _1411) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2426 - _2327)) + _2327);
    float _2446 = fma(_2443, cbSceneParam._m0[89u].z, fma(_2441, cbSceneParam._m0[89u].y, _2439 * cbSceneParam._m0[89u].x));
    float _2449 = fma(_2443, cbSceneParam._m0[90u].z, fma(_2441, cbSceneParam._m0[90u].y, _2439 * cbSceneParam._m0[90u].x));
    float _2452 = fma(_2443, cbSceneParam._m0[91u].z, fma(_2441, cbSceneParam._m0[91u].y, _2439 * cbSceneParam._m0[91u].x));
    uvec4 _2462 = floatBitsToUint(cbInstanceData._m0[_1383 + 5u]);
    uint _2464 = _2462.x * 14u;
    uint _2465 = _2464 + 13u;
    float _2472 = _1423 + (-1.0);
    float _2477 = (cbLight._m0[_2465].x * _2472) + 1.0;
    float _2478 = (cbLight._m0[_2465].y * _2472) + 1.0;
    float _2479 = (cbLight._m0[_2465].z * _2472) + 1.0;
    float _2480 = (cbLight._m0[_2465].w * _2472) + 1.0;
    uint _2481 = _2464 + 5u;
    float _2487 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
    uint _2491 = _2464 + 4u;
    float _2497 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
    uint _2501 = _2464 | 1u;
    float _2512 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_1256, _1257, _1258));
    float _2515 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_1256, _1257, _1258));
    float _4834 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _4845 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2520 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2522 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * 0.3183098733425140380859375;
    float _2529 = ((cbLight._m0[_2481].x * _2487) * _2522) + ((cbLight._m0[_2491].x * _2497) * _2520);
    float _2530 = ((_2487 * cbLight._m0[_2481].y) * _2522) + ((_2497 * cbLight._m0[_2491].y) * _2520);
    float _2531 = ((_2487 * cbLight._m0[_2481].z) * _2522) + ((_2497 * cbLight._m0[_2491].z) * _2520);
    uvec4 _2535 = floatBitsToUint(cbLight._m0[_2464 + 12u]);
    bool _2537 = _2535.x == 0u;
    float _2548;
    float _2550;
    float _2552;
    if (_2537)
    {
        _2548 = _2529;
        _2550 = _2530;
        _2552 = _2531;
    }
    else
    {
        uint _2556 = _2464 + 6u;
        float _2572 = (dot(vec3(cbLight._m0[_2464 + 2u].xyz), vec3(_1256, _1257, _1258)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4856 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2575 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2548 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2529;
        _2550 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2530;
        _2552 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2531;
    }
    bool _2555 = _2535.y == 0u;
    float _2593;
    float _2595;
    float _2597;
    if (_2555)
    {
        _2593 = _2548;
        _2595 = _2550;
        _2597 = _2552;
    }
    else
    {
        uint _2763 = _2464 + 7u;
        float _2779 = (dot(vec3(cbLight._m0[_2464 + 3u].xyz), vec3(_1256, _1257, _1258)) * 0.5) + 0.5;
        float _2780 = _2779 * _2779;
        float _4872 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2781 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2782 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _2593 = (((cbLight._m0[_2763].x * 0.3183098733425140380859375) * _2781) * _2782) + _2548;
        _2595 = (((cbLight._m0[_2763].y * 0.3183098733425140380859375) * _2781) * _2782) + _2550;
        _2597 = (((cbLight._m0[_2763].z * 0.3183098733425140380859375) * _2781) * _2782) + _2552;
    }
    uint _2600 = _2464 + 8u;
    float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _1260) * 0.949999988079071044921875);
    float _2614 = _2613 * _2613;
    float _2615 = cbLight._m0[_2464].x + _1337;
    float _2616 = cbLight._m0[_2464].y + _1338;
    float _2617 = cbLight._m0[_2464].z + _1339;
    float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
    float _2622 = _2621 * _2615;
    float _2623 = _2621 * _2616;
    float _2624 = _2621 * _2617;
    float _2625 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2464].xyz));
    float _4888 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _4899 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _2629 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2630 = dot(vec3(_1256, _1257, _1258), vec3(_2622, _2623, _2624));
    float _4910 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2634 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2622, _2623, _2624));
    float _4921 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2638 = _2614 * _2614;
    float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
    float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2651 = 0.959999978542327880859375 - _1405;
    float _2653 = 0.959999978542327880859375 - _1406;
    float _2654 = 0.959999978542327880859375 - _1407;
    float _2661 = 1.0 - _2614;
    float _2672 = (0.5 / (((_2629 * ((_2628 * _2661) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2661) + _2614) * _2628))) * _2628;
    float _4932 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
    uint _2685 = _2464 + 9u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _1260) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2501].x + _1337;
    float _2699 = cbLight._m0[_2501].y + _1338;
    float _2700 = cbLight._m0[_2501].z + _1339;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2501].xyz));
    float _4943 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2712 = dot(vec3(_1256, _1257, _1258), vec3(_2705, _2706, _2707));
    float _4954 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2705, _2706, _2707));
    float _4965 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2697 * _2697;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
    float _2738 = 1.0 - _2697;
    float _2748 = (0.5 / (((_2629 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2738) + _2697) * _2711))) * _2711;
    float _4976 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    float _2760 = (((((_2731 * _2651) + _1408) * cbLight._m0[_2685].x) * _2750) * _2487) + (((((_2650 * _2651) + _1408) * cbLight._m0[_2600].x) * _2674) * _2497);
    float _2761 = (((((_2731 * _2653) + _1410) * cbLight._m0[_2685].y) * _2750) * _2487) + (((((_2650 * _2653) + _1410) * cbLight._m0[_2600].y) * _2674) * _2497);
    float _2762 = (((((_2731 * _2654) + _1411) * cbLight._m0[_2685].z) * _2750) * _2487) + (((((_2650 * _2654) + _1411) * cbLight._m0[_2600].z) * _2674) * _2497);
    float _2824;
    float _2826;
    float _2828;
    if (_2537)
    {
        _2824 = _2760;
        _2826 = _2761;
        _2828 = _2762;
    }
    else
    {
        uint _2830 = _2464 + 2u;
        uint _2834 = _2464 + 10u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _1260) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _1337;
        float _2851 = cbLight._m0[_2830].y + _1338;
        float _2852 = cbLight._m0[_2830].z + _1339;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2830].xyz));
        float _4987 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _2864 = dot(vec3(_1256, _1257, _1258), vec3(_2857, _2858, _2859));
        float _4998 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _5009 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2883 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _2890 = 1.0 - _2849;
        float _2900 = (0.5 / (((_2629 * ((_2863 * _2890) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2890) + _2849) * _2863))) * _2863;
        float _5020 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2902 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2903 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2824 = (((((_2883 * _2651) + _1408) * cbLight._m0[_2834].x) * _2902) * _2903) + _2760;
        _2826 = (((((_2883 * _2653) + _1410) * cbLight._m0[_2834].y) * _2902) * _2903) + _2761;
        _2828 = (((((_2883 * _2654) + _1411) * cbLight._m0[_2834].z) * _2902) * _2903) + _2762;
    }
    float _2938;
    float _2940;
    float _2942;
    if (_2555)
    {
        _2938 = _2824;
        _2940 = _2826;
        _2942 = _2828;
    }
    else
    {
        uint _2949 = _2464 + 3u;
        uint _2953 = _2464 + 11u;
        float _2967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2949].w)) * _1260) * 0.949999988079071044921875);
        float _2968 = _2967 * _2967;
        float _2969 = cbLight._m0[_2949].x + _1337;
        float _2970 = cbLight._m0[_2949].y + _1338;
        float _2971 = cbLight._m0[_2949].z + _1339;
        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
        float _2976 = _2975 * _2969;
        float _2977 = _2975 * _2970;
        float _2978 = _2975 * _2971;
        float _2979 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2949].xyz));
        float _5036 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _2983 = dot(vec3(_1256, _1257, _1258), vec3(_2976, _2977, _2978));
        float _5047 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
        float _2987 = dot(vec3(cbLight._m0[_2949].xyz), vec3(_2976, _2977, _2978));
        float _5058 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2991 = _2968 * _2968;
        float _2995 = ((_2986 * _2986) * (_2991 + (-1.0))) + 1.0;
        float _3002 = exp2(log2(1.0 - (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) * 5.0);
        float _3009 = 1.0 - _2968;
        float _3019 = (0.5 / (((_2629 * ((_2982 * _3009) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _3009) + _2968) * _2982))) * _2982;
        float _5069 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3021 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_2991 / ((_2995 * _2995) * 3.141590118408203125));
        float _3022 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _2938 = (((((_3002 * _2651) + _1408) * cbLight._m0[_2953].x) * _3021) * _3022) + _2824;
        _2940 = (((((_3002 * _2653) + _1410) * cbLight._m0[_2953].y) * _3021) * _3022) + _2826;
        _2942 = (((((_3002 * _2654) + _1411) * cbLight._m0[_2953].z) * _3021) * _3022) + _2828;
    }
    float _3156;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    float _3166;
    if (_2462.y == 0u)
    {
        float _3097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3097;
        float _3099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3097;
        float _3100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3097;
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.x;
        uint _3124 = uint((float(_3112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1346) / _3113))) + floor(float(uint(cbSceneParam._m0[85u].x * _1345) / _3113)));
        float _3134 = (log2(_3100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3135 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        uint _3138 = uint(isnan(14.0) ? _3135 : (isnan(_3135) ? 14.0 : min(_3135, 14.0)));
        uvec4 _3143 = texelFetch(g_lightClusterGridBuffer, int(((_3138 << 2u) + (_3124 << 6u)) >> 2u));
        uint _3144 = _3143.x;
        uint _3145 = _3112.z;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        if (((((1u << ((_3145 >> 4u) & 15u)) + 4294967295u) & _3144) == 0u) || ((_3145 & 240u) == 0u))
        {
            _3249 = 0.0;
            _3251 = 0.0;
            _3253 = 0.0;
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
        }
        else
        {
            float _3250;
            float _3252;
            float _3254;
            float _3256;
            float _3258;
            float _3260;
            float _3393 = 0.0;
            float _3394 = 0.0;
            float _3395 = 0.0;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            uint _3399 = 0u;
            uint _3408;
            bool _3409;
            for (;;)
            {
                _3408 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3399 << 2u)) >> 2u)).x;
                _3409 = _3408 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3409)
                {
                    frontier_phi_63_pred = _3398;
                    frontier_phi_63_pred_1 = _3397;
                    frontier_phi_63_pred_2 = _3396;
                    frontier_phi_63_pred_3 = _3395;
                    frontier_phi_63_pred_4 = _3394;
                    frontier_phi_63_pred_5 = _3393;
                }
                else
                {
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    uint _3523;
                    _3517 = _3393;
                    _3518 = _3394;
                    _3519 = _3395;
                    _3520 = _3396;
                    _3521 = _3397;
                    _3522 = _3398;
                    _3523 = _3408;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    for (;;)
                    {
                        uint _3527 = uint(findLSB(_3523)) + (_3399 << 5u);
                        uint _3524 = (_3523 + 4294967295u) & _3523;
                        uint _3529 = _3527 * 48u;
                        vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3549 = (_3527 * 48u) + 4u;
                        vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 3u)).x));
                        uint _3568 = (_3527 * 48u) + 8u;
                        vec3 _3579 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x));
                        float _3583 = _3543.x - _3098;
                        float _3584 = _3543.y - _3099;
                        float _3585 = _3543.z - _3100;
                        float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                        float _3589 = inversesqrt(_3586);
                        float _3590 = _3589 * _3583;
                        float _3591 = _3589 * _3584;
                        float _3592 = _3589 * _3585;
                        float _3593 = dot(vec3(_1364, _1367, _1370), vec3(_3590, _3591, _3592));
                        float _3598 = 1.0 - (_3586 * _3543.w);
                        float _5095 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3600 = sqrt(_3586) * _3562.w;
                        float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3593) + _3603;
                        float _3609 = _3600 * _3600;
                        float _3613 = ((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3599) / ((_3609 * 0.699999988079071044921875) + 1.0);
                        float _3617 = (-0.0) - _3098;
                        float _3618 = (-0.0) - _3099;
                        float _3619 = (-0.0) - _3100;
                        float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                        float _3624 = _3623 * _3617;
                        float _3625 = _3623 * _3618;
                        float _3626 = _3623 * _3619;
                        float _3634 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                        float _3635 = 1.0 - _1439;
                        float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                        float _3643 = _3642 * _3642;
                        float _3644 = _3643 * _3643;
                        float _3645 = _3624 + _3590;
                        float _3646 = _3625 + _3591;
                        float _3647 = _3626 + _3592;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3655 = dot(vec3(_1364, _1367, _1370), vec3(_3624, _3625, _3626));
                        float _5111 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3659 = dot(vec3(_1364, _1367, _1370), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                        float _5122 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                        float _3667 = _3602 * _3643;
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3593) + _3668;
                        float _5133 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3672 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3673 = 1.0 - _3643;
                        float _3683 = (0.5 / (((_3672 * ((_3658 * _3673) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3643) * _3658))) * _3672;
                        float _5144 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3694 = (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3666 * _3666) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125))) * _3599;
                        _3452 = (_3613 * _3562.x) + _3520;
                        _3453 = (_3613 * _3562.y) + _3521;
                        _3454 = (_3613 * _3562.z) + _3522;
                        _3449 = (_3694 * _3579.x) + _3517;
                        _3450 = (_3694 * _3579.y) + _3518;
                        _3451 = (_3694 * _3579.z) + _3519;
                        if (_3524 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3517 = _3449;
                            _3518 = _3450;
                            _3519 = _3451;
                            _3520 = _3452;
                            _3521 = _3453;
                            _3522 = _3454;
                            _3523 = _3524;
                        }
                    }
                    frontier_phi_63_pred = _3454;
                    frontier_phi_63_pred_1 = _3453;
                    frontier_phi_63_pred_2 = _3452;
                    frontier_phi_63_pred_3 = _3451;
                    frontier_phi_63_pred_4 = _3450;
                    frontier_phi_63_pred_5 = _3449;
                }
                _3260 = frontier_phi_63_pred;
                _3258 = frontier_phi_63_pred_1;
                _3256 = frontier_phi_63_pred_2;
                _3254 = frontier_phi_63_pred_3;
                _3252 = frontier_phi_63_pred_4;
                _3250 = frontier_phi_63_pred_5;
                uint _3400 = _3399 + 1u;
                if (_3400 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3393 = _3250;
                    _3394 = _3252;
                    _3395 = _3254;
                    _3396 = _3256;
                    _3397 = _3258;
                    _3398 = _3260;
                    _3399 = _3400;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3249 = _3250;
            _3251 = _3252;
            _3253 = _3254;
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
        }
        uvec4 _3263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3264 = _3263.z;
        uint _3266 = (_3264 >> 8u) & 15u;
        float _3361;
        float _3363;
        float _3365;
        float _3367;
        float _3369;
        float _3371;
        if (((4294967295u << _3266) & _3144) == 0u)
        {
            _3361 = _3249;
            _3363 = _3251;
            _3365 = _3253;
            _3367 = _3255;
            _3369 = _3257;
            _3371 = _3259;
        }
        else
        {
            float _3386 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
            float _3387 = _3386 * _3098;
            float _3388 = _3386 * _3099;
            float _3389 = _3386 * _3100;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3266 < ((_3264 >> 12u) & 15u))
            {
                float _3362;
                float _3364;
                float _3366;
                float _3368;
                float _3370;
                float _3372;
                float _3500 = _3249;
                float _3501 = _3251;
                float _3502 = _3253;
                float _3503 = _3255;
                float _3504 = _3257;
                float _3505 = _3259;
                uint _3506 = _3266;
                uint _3515;
                bool _3516;
                for (;;)
                {
                    _3515 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3506 << 2u)) >> 2u)).x;
                    _3516 = _3515 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3516)
                    {
                        frontier_phi_69_pred = _3505;
                        frontier_phi_69_pred_1 = _3504;
                        frontier_phi_69_pred_2 = _3503;
                        frontier_phi_69_pred_3 = _3502;
                        frontier_phi_69_pred_4 = _3501;
                        frontier_phi_69_pred_5 = _3500;
                    }
                    else
                    {
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3712 = _3500;
                        float _3713 = _3501;
                        float _3714 = _3502;
                        float _3715 = _3503;
                        float _3716 = _3504;
                        float _3717 = _3505;
                        uint _3718 = _3515;
                        uint _3719;
                        vec4 _3744;
                        float _3745;
                        vec4 _3760;
                        vec3 _3772;
                        vec4 _3787;
                        vec4 _3802;
                        float _3848;
                        bool _3849;
                        for (;;)
                        {
                            uint _3729 = ((_3506 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3718));
                            _3719 = (_3718 + 4294967295u) & _3718;
                            uint _3731 = _3729 * 40u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3745 = _3744.w;
                            uint _3747 = (_3729 * 40u) + 4u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3729 * 40u) + 8u;
                            _3772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x));
                            uint _3774 = (_3729 * 40u) + 16u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3729 * 40u) + 20u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3729 * 40u) + 24u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3823 = (_3729 * 40u) + 28u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            _3848 = fma(_3100, _3836.z, fma(_3099, _3836.y, _3836.x * _3098)) + _3836.w;
                            _3849 = !((fma(_3100, _3817.z, fma(_3099, _3817.y, _3817.x * _3098)) + _3817.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3849)
                            {
                                float _3876 = _3744.x - _3098;
                                float _3877 = _3744.y - _3099;
                                float _3878 = _3744.z - _3100;
                                float _3879 = dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878));
                                float _3882 = inversesqrt(_3879);
                                float _3883 = _3882 * _3876;
                                float _3884 = _3882 * _3877;
                                float _3885 = _3882 * _3878;
                                float _3889 = 1.0 - (_3879 / (_3745 * _3745));
                                float _5155 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3894 = sqrt(_3879) * _3760.w;
                                float _3896 = 1.39999997615814208984375 / (_3894 + 1.39999997615814208984375);
                                float _3897 = _3896 * _3896;
                                float _3900 = ((1.0 - _3897) * dot(vec3(_3883, _3884, _3885), vec3(_1364, _1367, _1370))) + _3897;
                                float _3903 = _3894 * _3894;
                                float _3907 = (fma(_3100, _3787.z, fma(_3099, _3787.y, _3787.x * _3098)) + _3787.w) / _3848;
                                float _3908 = (fma(_3100, _3802.z, fma(_3099, _3802.y, _3802.x * _3098)) + _3802.w) / _3848;
                                float _3912 = 1.0 - dot(vec2(_3907, _3908), vec2(_3907, _3908));
                                float _5171 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3914 = _3913 * (((isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0))) * _3890) / ((_3903 * 0.699999988079071044921875) + 1.0));
                                float _3926 = exp2(log2(1.0 / ((_3903 * 3.5) + 5.0)) * 0.25);
                                float _3927 = 1.0 - _1439;
                                float _3934 = sqrt(1.0 - ((1.0 - (_3927 * _3927)) * (1.0 - (_3926 * _3926))));
                                float _3935 = _3934 * _3934;
                                float _3936 = _3935 * _3935;
                                float _3937 = _3883 - _3387;
                                float _3938 = _3884 - _3388;
                                float _3939 = _3885 - _3389;
                                float _3943 = inversesqrt(dot(vec3(_3937, _3938, _3939), vec3(_3937, _3938, _3939)));
                                float _3947 = dot(vec3(_1364, _1367, _1370), vec3((-0.0) - _3387, (-0.0) - _3388, (-0.0) - _3389));
                                float _5182 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _3951 = dot(vec3(_1364, _1367, _1370), vec3(_3943 * _3937, _3943 * _3938, _3943 * _3939));
                                float _5193 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _3958 = ((_3954 * _3954) * (_3936 + (-1.0))) + 1.0;
                                float _3959 = _3896 * _3935;
                                float _3960 = _3959 * _3959;
                                float _3966 = ((1.0 - _3960) * dot(vec3(_1364, _1367, _1370), vec3(_3883, _3884, _3885))) + _3960;
                                float _5204 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _3968 = 1.0 - _3935;
                                float _3978 = (0.5 / (((_3967 * ((_3950 * _3968) + _3935)) + 9.9999999392252902907785028219223e-09) + (((_3967 * _3968) + _3935) * _3950))) * _3967;
                                float _5215 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3988 = (_3913 * _3890) * (((_3936 * 3.1415927410125732421875) * (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0)))) / ((_3958 * _3958) * ((_3903 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3914 * _3760.z;
                                frontier_phi_75_pred_1 = _3914 * _3760.y;
                                frontier_phi_75_pred_2 = _3914 * _3760.x;
                                frontier_phi_75_pred_3 = _3988 * _3772.z;
                                frontier_phi_75_pred_4 = _3988 * _3772.y;
                                frontier_phi_75_pred_5 = _3988 * _3772.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3997 = frontier_phi_75_pred;
                            _3996 = frontier_phi_75_pred_1;
                            _3995 = frontier_phi_75_pred_2;
                            _3994 = frontier_phi_75_pred_3;
                            _3993 = frontier_phi_75_pred_4;
                            _3992 = frontier_phi_75_pred_5;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            if (_3719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3719;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3704;
                        frontier_phi_69_pred_1 = _3703;
                        frontier_phi_69_pred_2 = _3702;
                        frontier_phi_69_pred_3 = _3701;
                        frontier_phi_69_pred_4 = _3700;
                        frontier_phi_69_pred_5 = _3699;
                    }
                    _3372 = frontier_phi_69_pred;
                    _3370 = frontier_phi_69_pred_1;
                    _3368 = frontier_phi_69_pred_2;
                    _3366 = frontier_phi_69_pred_3;
                    _3364 = frontier_phi_69_pred_4;
                    _3362 = frontier_phi_69_pred_5;
                    uint _3507 = _3506 + 1u;
                    if (_3507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3500 = _3362;
                        _3501 = _3364;
                        _3502 = _3366;
                        _3503 = _3368;
                        _3504 = _3370;
                        _3505 = _3372;
                        _3506 = _3507;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3372;
                frontier_phi_57_58_ladder_1 = _3370;
                frontier_phi_57_58_ladder_2 = _3368;
                frontier_phi_57_58_ladder_3 = _3366;
                frontier_phi_57_58_ladder_4 = _3364;
                frontier_phi_57_58_ladder_5 = _3362;
            }
            else
            {
                frontier_phi_57_58_ladder = _3259;
                frontier_phi_57_58_ladder_1 = _3257;
                frontier_phi_57_58_ladder_2 = _3255;
                frontier_phi_57_58_ladder_3 = _3253;
                frontier_phi_57_58_ladder_4 = _3251;
                frontier_phi_57_58_ladder_5 = _3249;
            }
            _3361 = frontier_phi_57_58_ladder_5;
            _3363 = frontier_phi_57_58_ladder_4;
            _3365 = frontier_phi_57_58_ladder_3;
            _3367 = frontier_phi_57_58_ladder_2;
            _3369 = frontier_phi_57_58_ladder_1;
            _3371 = frontier_phi_57_58_ladder;
        }
        float _3376 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _3156 = (_3376 * _3367) + _2593;
        _3158 = (_3376 * _3369) + _2595;
        _3160 = (_3376 * _3371) + _2597;
        _3162 = ((_3361 * _1408) * _3376) + _2938;
        _3164 = ((_3363 * _1410) * _3376) + _2940;
        _3166 = ((_3365 * _1411) * _3376) + _2942;
    }
    else
    {
        _3156 = _2593;
        _3158 = _2595;
        _3160 = _2597;
        _3162 = _2938;
        _3164 = _2940;
        _3166 = _2942;
    }
    float _5231 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
    float _5242 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
    float _5253 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
    float _5264 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _3184 = ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3156 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1423))) + ((_3162 + ((isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    float _3185 = ((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3158 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1423))) + ((_3164 + ((isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3160 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1423))) + ((_3166 + ((isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    float _3194 = cbInstanceData._m0[_1383 + 6u].w * (isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0)));
    float _3199 = _1345 / cbSceneParam._m0[86u].x;
    float _3200 = _1346 / cbSceneParam._m0[86u].y;
    vec4 _3214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, (log2((isnan(cbSceneParam._m0[77u].w) ? _1280 : (isnan(_1280) ? cbSceneParam._m0[77u].w : min(_1280, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3216 = _3214.x;
    float _3217 = _3214.y;
    float _3218 = _3214.z;
    float _3219 = _3214.w;
    float _3311;
    float _3313;
    float _3315;
    float _3317;
    if (_1280 > cbSceneParam._m0[78u].w)
    {
        float _3274 = isnan(_1280) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1280 : min(cbSceneParam._m0[80u].w, _1280));
        float _3275 = _3274 / _1280;
        float _3286 = _3275 * _1330;
        float _3287 = _1331 * _3275;
        float _3288 = (-0.0) - _3287;
        float _3289 = _3275 * _1332;
        float _3291 = (cbSceneParam._m0[77u].w * _3288) / _3274;
        float _3292 = _3291 + cbSceneParam._m0[79u].w;
        float _3293 = cbSceneParam._m0[79u].w - _3287;
        float _3299 = sqrt(((_3286 * _3286) + (_3287 * _3287)) + (_3289 * _3289));
        float _3302 = (1.0 - (cbSceneParam._m0[77u].w / _3274)) * _3299;
        float _3307 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3309 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3462;
        if (abs((_3288 - _3291) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3462 = ((((_3292 > 0.0) ? exp2(_3307 * _3292) : (2.0 - exp2(_3309 * _3292))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3302;
        }
        else
        {
            float _3422 = 1.0 / cbSceneParam._m0[80u].x;
            float _3423 = isnan(_3293) ? _3292 : (isnan(_3292) ? _3293 : max(_3292, _3293));
            float _3424 = isnan(_3293) ? _3292 : (isnan(_3292) ? _3293 : min(_3292, _3293));
            float _3433 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : min(_3423, 0.0));
            float _3434 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : min(_3424, 0.0));
            _3462 = ((abs(_3299 / _3288) * cbSceneParam._m0[80u].y) * ((((_3433 - _3434) * 2.0) - ((exp2(_3307 * (isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0)))) - exp2(_3307 * (isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))))) * _3422)) - ((exp2(_3309 * _3433) - exp2(_3309 * _3434)) * _3422))) + (_3302 * cbSceneParam._m0[80u].z);
        }
        vec4 _3464 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, 1.0), 0.0);
        float _3473 = exp2((_3462 * (-1.44269502162933349609375)) * (1.0 - _3464.w));
        float _3474 = log2(_3473);
        float _3490 = log2(_3219);
        _3311 = (exp2(_3490 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].x)) * _3464.x) / cbSceneParam._m0[78u].x)) + _3216;
        _3313 = (exp2(_3490 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].y)) * _3464.y) / cbSceneParam._m0[78u].y)) + _3217;
        _3315 = (exp2(_3490 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].z)) * _3464.z) / cbSceneParam._m0[78u].z)) + _3218;
        _3317 = _3473 * _3219;
    }
    else
    {
        _3311 = _3216;
        _3313 = _3217;
        _3315 = _3218;
        _3317 = _3219;
    }
    float _3329 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3330 = _3329 == 3.0;
    float _3331 = log2(_3317);
    float _3338 = exp2(_3331 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0)));
    float _3339 = exp2(_3331 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)));
    float _3340 = exp2(_3331 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)));
    float _3349 = (_3329 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3349 * (_3330 ? _3338 : (_3338 + (cbSceneParam._m0[72u].w * _3311)));
    SV_Target.y = _3349 * (_3330 ? _3339 : (_3339 + (cbSceneParam._m0[72u].w * _3313)));
    SV_Target.z = _3349 * (_3330 ? _3340 : (_3340 + (cbSceneParam._m0[72u].w * _3315)));
    SV_Target.w = _3194;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3194;
}


