#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1844;
float _4253;
float _4254;
float _4255;
float _4256;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _257 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _258 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _259 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _263 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _264 = _263 * _257;
    float _265 = _263 * _258;
    float _266 = _263 * _259;
    float _270 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _271 = _270 * NORMAL.x;
    float _272 = _270 * NORMAL.y;
    float _273 = _270 * NORMAL.z;
    float _277 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = _277 * TANGENT.x;
    float _279 = _277 * TANGENT.y;
    float _280 = _277 * TANGENT.z;
    float _284 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _285 = _284 * TANGENT_2.x;
    float _286 = _284 * TANGENT_2.y;
    float _287 = _284 * TANGENT_2.z;
    float _292;
    float _293;
    float _294;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _292 = (-0.0) - _271;
        _293 = (-0.0) - _272;
        _294 = (-0.0) - _273;
    }
    else
    {
        _292 = _271;
        _293 = _272;
        _294 = _273;
    }
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = 1.0 - ((1.0 - _314.z) * 1.39999997615814208984375);
    float _4265 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _327 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _329 = 1.0 - ((1.0 - _314.x) * 1.39999997615814208984375);
    float _4276 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _332 = 1.0 - ((1.0 - _314.y) * 1.39999997615814208984375);
    float _4287 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _335 = (_330 + _327) + _333;
    float _342 = (_335 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _343 = (_335 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _344 = (_335 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _369 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _378 = 1.0 - ((1.0 - _369.x) * 1.39999997615814208984375);
    float _4298 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _389 = (_379 * ((cbMtdParam._m0[9u].x - _342) + ((1.0 - cbMtdParam._m0[9u].x) * _335))) + _342;
    float _390 = (_379 * ((cbMtdParam._m0[9u].y - _343) + ((1.0 - cbMtdParam._m0[9u].y) * _335))) + _343;
    float _391 = (_379 * ((cbMtdParam._m0[9u].z - _344) + ((1.0 - cbMtdParam._m0[9u].z) * _335))) + _344;
    float _404 = 1.0 - ((1.0 - _369.y) * 1.39999997615814208984375);
    float _4309 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _415 = (((cbMtdParam._m0[17u].x - _389) + ((1.0 - cbMtdParam._m0[17u].x) * _335)) * _405) + _389;
    float _416 = (((cbMtdParam._m0[17u].y - _390) + ((1.0 - cbMtdParam._m0[17u].y) * _335)) * _405) + _390;
    float _417 = (((cbMtdParam._m0[17u].z - _391) + ((1.0 - cbMtdParam._m0[17u].z) * _335)) * _405) + _391;
    float _431 = 1.0 - ((1.0 - _369.z) * 1.39999997615814208984375);
    float _4320 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _463 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _477 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _463) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4331 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _479 = 1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)));
    float _487 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _463) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4342 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = 1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)));
    vec4 _507 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _512 = cbMtdParam._m0[10u].x * _489;
    float _514 = cbMtdParam._m0[10u].y * _489;
    float _516 = cbMtdParam._m0[10u].z * _489;
    float _533 = ((_509 * (cbMtdParam._m0[16u].x - _512)) * _479) + (_512 * _509);
    float _534 = ((_510 * (cbMtdParam._m0[16u].y - _514)) * _479) + (_514 * _510);
    float _535 = ((_511 * (cbMtdParam._m0[16u].z - _516)) * _479) + (_516 * _511);
    float _558 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _562 = (_558 * ((TEXCOORD_7.x - _463) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _563 = (_558 * ((TEXCOORD_7.y - _463) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _564 = (_558 * ((TEXCOORD_7.z - _463) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4353 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4364 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4375 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _573 = (1.0 - cbMtdParam._m0[25u].x) + _330;
    float _576 = _573 * (1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))));
    float _577 = _573 * (1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))));
    float _578 = ((_330 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))));
    float _588 = _489 + _479;
    float _589 = _588 + _576;
    float _590 = _588 + _577;
    float _591 = _588 + _578;
    float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _595 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
    float _596 = isnan(1.0) ? _593 : (isnan(_593) ? 1.0 : min(_593, 1.0));
    float _597 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
    vec4 _615 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _620 = _615.w;
    float _621 = _615.x * cbMtdParam._m0[12u].x;
    float _622 = _615.y * cbMtdParam._m0[12u].y;
    float _623 = _615.z * cbMtdParam._m0[12u].z;
    vec4 _641 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _655 = (((_641.x * cbMtdParam._m0[13u].x) - _621) * _330) + _621;
    float _656 = (((_641.y * cbMtdParam._m0[13u].y) - _622) * _330) + _622;
    float _657 = (((_641.z * cbMtdParam._m0[13u].z) - _623) * _330) + _623;
    vec4 _676 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _690 = (((_676.x * cbMtdParam._m0[14u].x) - _655) * _333) + _655;
    float _691 = (((_676.y * cbMtdParam._m0[14u].y) - _656) * _333) + _656;
    float _692 = (((_676.z * cbMtdParam._m0[14u].z) - _657) * _333) + _657;
    vec4 _709 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _723 = (((_709.x * cbMtdParam._m0[15u].x) - _690) * _327) + _690;
    float _724 = (((_709.y * cbMtdParam._m0[15u].y) - _691) * _327) + _691;
    float _725 = (((_709.z * cbMtdParam._m0[15u].z) - _692) * _327) + _692;
    float _745 = ((_723 - (_723 * _595)) + (((_595 * 4.55000019073486328125) * ((_576 * ((cbMtdParam._m0[11u].x * _509) - _533)) + _533)) * _723)) * ((((cbMtdParam._m0[18u].x - _415) + ((1.0 - cbMtdParam._m0[18u].x) * _335)) * _432) + _415);
    float _746 = ((_724 - (_724 * _596)) + (((_596 * 4.55000019073486328125) * ((_577 * ((cbMtdParam._m0[11u].y * _510) - _534)) + _534)) * _724)) * ((((cbMtdParam._m0[18u].y - _416) + ((1.0 - cbMtdParam._m0[18u].y) * _335)) * _432) + _416);
    float _747 = ((_725 - (_597 * _725)) + (((_597 * 4.55000019073486328125) * ((_578 * ((cbMtdParam._m0[11u].z * _511) - _535)) + _535)) * _725)) * ((((cbMtdParam._m0[18u].z - _417) + ((1.0 - cbMtdParam._m0[18u].z) * _335)) * _432) + _417);
    float _758 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _595) + cbMtdParam._m0[25u].w;
    float _761 = ((cbMtdParam._m0[20u].x - _758) * _330) + _758;
    float _764 = ((cbMtdParam._m0[20u].y - _761) * _333) + _761;
    float _767 = ((cbMtdParam._m0[20u].z - _764) * _327) + _764;
    vec4 _779 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _783 = _779.z;
    float _787 = (_779.x * 2.0) + (-1.0);
    float _789 = (_779.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_787, _789), vec2(_787, _789));
    float _4416 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))));
    float _798 = fma(_795, _292, fma(_789, _285, _787 * _264));
    float _801 = fma(_795, _293, fma(_789, _286, _787 * _265));
    float _804 = fma(_795, _294, fma(_789, _287, _787 * _266));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    vec4 _824 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _830 = (_824.x * 2.0) + (-1.0);
    float _831 = (_824.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _4427 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _837 = sqrt(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))));
    float _840 = fma(_837, _292, fma(_831, _285, _830 * _264));
    float _843 = fma(_837, _293, fma(_831, _286, _830 * _265));
    float _846 = fma(_837, _294, fma(_831, _287, _830 * _266));
    float _850 = inversesqrt(dot(vec3(_840, _843, _846), vec3(_840, _843, _846)));
    float _851 = _850 * _840;
    float _852 = _850 * _843;
    float _853 = _850 * _846;
    float _856 = fma(_853, _247, fma(_852, _246, _851 * _245));
    float _859 = fma(_853, _280, fma(_852, _279, _851 * _278));
    float _862 = fma(_853, _294, fma(_852, _293, _851 * _292));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    vec4 _880 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _886 = (_880.x * 2.0) + (-1.0);
    float _887 = (_880.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _4438 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _893 = sqrt(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))));
    float _896 = fma(_893, _292, fma(_887, _285, _886 * _264));
    float _899 = fma(_893, _293, fma(_887, _286, _886 * _265));
    float _902 = fma(_893, _294, fma(_887, _287, _886 * _266));
    float _906 = inversesqrt(dot(vec3(_896, _899, _902), vec3(_896, _899, _902)));
    float _907 = _906 * _896;
    float _908 = _906 * _899;
    float _909 = _906 * _902;
    float _912 = fma(_909, _247, fma(_908, _246, _907 * _245));
    float _915 = fma(_909, _280, fma(_908, _279, _907 * _278));
    float _918 = fma(_909, _294, fma(_908, _293, _907 * _292));
    float _922 = inversesqrt(dot(vec3(_912, _915, _918), vec3(_912, _915, _918)));
    vec4 _935 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _941 = (_935.x * 2.0) + (-1.0);
    float _942 = (_935.y * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4449 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _948 = sqrt(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))));
    float _951 = fma(_948, _292, fma(_942, _285, _941 * _264));
    float _954 = fma(_948, _293, fma(_942, _286, _941 * _265));
    float _957 = fma(_948, _294, fma(_942, _287, _941 * _266));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _967 = fma(_964, _247, fma(_963, _246, _962 * _245));
    float _970 = fma(_964, _280, fma(_963, _279, _962 * _278));
    float _973 = fma(_964, _294, fma(_963, _293, _962 * _292));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _983 = fma(_811, _247, fma(_810, _246, _809 * _245));
    float _986 = fma(_811, _280, fma(_810, _279, _809 * _278));
    float _989 = fma(_811, _294, fma(_810, _293, _809 * _292));
    float _993 = inversesqrt(dot(vec3(_983, _986, _989), vec3(_983, _986, _989)));
    float _994 = _993 * _983;
    float _995 = _993 * _986;
    float _996 = _993 * _989;
    float _1003 = (((_977 * _967) - _994) * _330) + _994;
    float _1004 = (((_977 * _970) - _995) * _330) + _995;
    float _1005 = (((_977 * _973) - _996) * _330) + _996;
    vec4 _1018 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4460 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1031 = sqrt(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))));
    float _1034 = fma(_1031, _292, fma(_1025, _285, _1024 * _264));
    float _1037 = fma(_1031, _293, fma(_1025, _286, _1024 * _265));
    float _1040 = fma(_1031, _294, fma(_1025, _287, _1024 * _266));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _1050 = fma(_1047, _247, fma(_1046, _246, _1045 * _245));
    float _1053 = fma(_1047, _280, fma(_1046, _279, _1045 * _278));
    float _1056 = fma(_1047, _294, fma(_1046, _293, _1045 * _292));
    float _1060 = inversesqrt(dot(vec3(_1050, _1053, _1056), vec3(_1050, _1053, _1056)));
    float _1070 = (((_1060 * _1050) - _1003) * _333) + _1003;
    float _1071 = (((_1060 * _1053) - _1004) * _333) + _1004;
    float _1072 = (((_1060 * _1056) - _1005) * _333) + _1005;
    vec4 _1085 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1091 = (_1085.x * 2.0) + (-1.0);
    float _1092 = (_1085.y * 2.0) + (-1.0);
    float _1093 = dot(vec2(_1091, _1092), vec2(_1091, _1092));
    float _4471 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1098 = sqrt(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))));
    float _1101 = fma(_1098, _292, fma(_1092, _285, _1091 * _264));
    float _1104 = fma(_1098, _293, fma(_1092, _286, _1091 * _265));
    float _1107 = fma(_1098, _294, fma(_1092, _287, _1091 * _266));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _1117 = fma(_1114, _247, fma(_1113, _246, _1112 * _245));
    float _1120 = fma(_1114, _280, fma(_1113, _279, _1112 * _278));
    float _1123 = fma(_1114, _294, fma(_1113, _293, _1112 * _292));
    float _1127 = inversesqrt(dot(vec3(_1117, _1120, _1123), vec3(_1117, _1120, _1123)));
    float _1137 = (((_1127 * _1123) - _1072) * _327) + _1072;
    vec4 _1149 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1155 = (_1149.x * 2.0) + (-1.0);
    float _1156 = (_1149.y * 2.0) + (-1.0);
    float _1157 = dot(vec2(_1155, _1156), vec2(_1155, _1156));
    float _4482 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1162 = sqrt(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))));
    float _1165 = fma(_1162, _292, fma(_1156, _285, _1155 * _264));
    float _1168 = fma(_1162, _293, fma(_1156, _286, _1155 * _265));
    float _1171 = fma(_1162, _294, fma(_1156, _287, _1155 * _266));
    float _1175 = inversesqrt(dot(vec3(_1165, _1168, _1171), vec3(_1165, _1168, _1171)));
    float _1176 = _1175 * _1165;
    float _1177 = _1175 * _1168;
    float _1178 = _1175 * _1171;
    float _1181 = fma(_1178, _247, fma(_1177, _246, _1176 * _245));
    float _1184 = fma(_1178, _280, fma(_1177, _279, _1176 * _278));
    float _1187 = fma(_1178, _294, fma(_1177, _293, _1176 * _292));
    float _1191 = inversesqrt(dot(vec3(_1181, _1184, _1187), vec3(_1181, _1184, _1187)));
    vec4 _1229 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1243 = (((((((_912 * _479) * _922) * cbMtdParam._m0[24u].z) + ((((_589 * _573) * _856) * _866) * cbMtdParam._m0[24u].w)) + _1070) + (((_1127 * _1117) - _1070) * _327)) + (((_1181 * _489) * _1191) * cbMtdParam._m0[23u].z)) + (((_1229.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1248 = (((((((_915 * _479) * _922) * cbMtdParam._m0[24u].z) + ((((_590 * _573) * _859) * _866) * cbMtdParam._m0[24u].w)) + _1071) + (((_1127 * _1120) - _1071) * _327)) + (((_1184 * _489) * _1191) * cbMtdParam._m0[23u].z)) + (((_1229.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1251 = fma(_1137, _292, fma(_1248, _278, _1243 * _245));
    float _1254 = fma(_1137, _293, fma(_1248, _279, _1243 * _246));
    float _1257 = fma(_1137, _294, fma(_1248, _280, _1243 * _247));
    float _1261 = inversesqrt(dot(vec3(_1251, _1254, _1257), vec3(_1251, _1254, _1257)));
    float _1262 = _1261 * _1251;
    float _1263 = _1261 * _1254;
    float _1264 = _1261 * _1257;
    float _4493 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _1265 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _1266 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _4515 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4526 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4537 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4548 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _1270 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _1286 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1326);
    float _1337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1326);
    float _1338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1326);
    float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
    float _1343 = _1336 * _1342;
    float _1344 = _1337 * _1342;
    float _1345 = _1338 * _1342;
    vec4 _1350 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1352 = _1350.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1524 = sqrt(((_1336 * _1336) + (_1337 * _1337)) + (_1338 * _1338));
        float _1530 = (cbMatDynParam._m0[5u].x * _1524) + cbMatDynParam._m0[5u].y;
        float _4559 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1535 = (cbMatDynParam._m0[5u].z * _1524) + cbMatDynParam._m0[5u].w;
        float _4570 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) - _1531)) + _1531) < ((_1352 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1363 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1364 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1382 = fma(_1264, cbSceneParam._m0[5u].z, fma(_1263, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1262));
    float _1385 = fma(_1264, cbSceneParam._m0[6u].z, fma(_1263, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1262));
    float _1388 = fma(_1264, cbSceneParam._m0[7u].z, fma(_1263, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1262));
    uint _1401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1402 = _1401 + 9u;
    uint _1403 = _1402 + uint(cbMatDynParam._m0[0u].w);
    float _1409 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * cbInstanceData._m0[_1403].x;
    float _1410 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * cbInstanceData._m0[_1403].y;
    float _1411 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * cbInstanceData._m0[_1403].z;
    float _4581 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1413 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1414 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _1415 = 1.0 - _1270;
    float _1416 = _1412 * _1415;
    float _1417 = _1413 * _1415;
    float _1418 = _1414 * _1415;
    float _1423 = (_1412 + (-0.039999999105930328369140625)) * _1270;
    float _1424 = (_1413 + (-0.039999999105930328369140625)) * _1270;
    float _1425 = (_1414 + (-0.039999999105930328369140625)) * _1270;
    float _1426 = _1423 + 0.039999999105930328369140625;
    float _1428 = _1424 + 0.039999999105930328369140625;
    float _1429 = _1425 + 0.039999999105930328369140625;
    vec4 _1438 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1363, cbSceneParam._m0[86u].y * _1364));
    float _1441 = _1438.x * TEXCOORD_7.w;
    float _1442 = dot(vec3(_1262, _1263, _1264), vec3(_1343, _1344, _1345));
    float _1445 = _1442 * 2.0;
    float _1449 = (_1445 * _1262) - _1343;
    float _1450 = (_1445 * _1263) - _1344;
    float _1451 = (_1445 * _1264) - _1345;
    float _1455 = abs(dot(vec3(_1343, _1344, _1345), vec3(_1262, _1263, _1264)));
    float _4614 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1457 = sqrt(_1266);
    float _1470 = exp2((_1457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1457 * 3.0));
    float _1476 = (1.0 - _1470) * ((_1457 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1477 = _1470 * _1457;
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1843;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1568 = fma(_1513, cbModelParam._m0[26u].z, fma(_1509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1505));
        float _1572 = fma(_1513, cbModelParam._m0[27u].z, fma(_1509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1505));
        float _1576 = fma(_1513, cbModelParam._m0[28u].z, fma(_1509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1505));
        float _1601 = _1505 + _1262;
        float _1602 = _1509 + _1263;
        float _1603 = _1513 + _1264;
        float _1613 = fma(_1603, cbModelParam._m0[26u].z, fma(_1602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1601)) - _1568;
        float _1614 = fma(_1603, cbModelParam._m0[27u].z, fma(_1602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1601)) - _1572;
        float _1615 = fma(_1603, cbModelParam._m0[28u].z, fma(_1602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1601)) - _1576;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[34u].z) + ((((((_1576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1671 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1637.x + (-0.5));
        float _1673 = _1671 * (_1637.y + (-0.5));
        float _1674 = _1671 * (_1637.z + (-0.5));
        float _1681 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1644.x + (-0.5));
        float _1683 = _1681 * (_1644.y + (-0.5));
        float _1684 = _1681 * (_1644.z + (-0.5));
        float _1691 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1651.x + (-0.5));
        float _1693 = _1691 * (_1651.y + (-0.5));
        float _1694 = _1691 * (_1651.z + (-0.5));
        float _1701 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1658.x + (-0.5));
        float _1703 = _1701 * (_1658.y + (-0.5));
        float _1704 = _1701 * (_1658.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1725 = (dot(vec3(_1262, _1263, _1264), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4640 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1735 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4651 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4662 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_1737 + 1.0))) + _1742) * _1705;
        float _1752 = _1673 * 0.5;
        float _1753 = _1683 * 0.5;
        float _1754 = _1693 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_1262, _1263, _1264), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4673 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4684 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4695 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_1779 + 1.0))) + _1784) * _1706;
        float _1794 = _1674 * 0.5;
        float _1795 = _1684 * 0.5;
        float _1796 = _1694 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_1262, _1263, _1264), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4706 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4717 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4728 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_1821 + 1.0))) + _1826) * _1707;
        _1843 = _1674;
        _1845 = _1673;
        _1846 = _1672;
        _1847 = _1684;
        _1848 = _1683;
        _1849 = _1682;
        _1850 = _1694;
        _1851 = _1693;
        _1852 = _1692;
        _1853 = _1707;
        _1854 = _1706;
        _1855 = _1705;
        _1856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
    }
    else
    {
        _1843 = _1844;
        _1845 = _1844;
        _1846 = _1844;
        _1847 = _1844;
        _1848 = _1844;
        _1849 = _1844;
        _1850 = _1844;
        _1851 = _1844;
        _1852 = _1844;
        _1853 = _1844;
        _1854 = _1844;
        _1855 = _1844;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _2156;
    float _2157;
    float _2158;
    float _2159;
    float _2160;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    float _2169;
    float _2170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1887 = fma(_1513, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505));
        float _1891 = fma(_1513, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505));
        float _1895 = fma(_1513, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505));
        float _1918 = _1505 + _1262;
        float _1919 = _1509 + _1263;
        float _1920 = _1513 + _1264;
        float _1930 = fma(_1920, cbModelParam._m0[30u].z, fma(_1919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1918)) - _1887;
        float _1931 = fma(_1920, cbModelParam._m0[31u].z, fma(_1919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1918)) - _1891;
        float _1932 = fma(_1920, cbModelParam._m0[32u].z, fma(_1919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1918)) - _1895;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1949 = ((_1936 * _1930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1950 = ((_1936 * _1931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1951 = ((_1936 * _1932) / cbModelParam._m0[35u].z) + ((((((_1895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1949, _1950, _1951), 0.0);
        vec4 _1960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1949, _1950, _1951), 0.0);
        vec4 _1967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1949, _1950, _1951), 0.0);
        vec4 _1974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1949, _1950, _1951), 0.0);
        float _1986 = exp2((_1953.w + (-0.5)) * 20.0) * 2.0;
        float _1987 = _1986 * (_1953.x + (-0.5));
        float _1988 = _1986 * (_1953.y + (-0.5));
        float _1989 = _1986 * (_1953.z + (-0.5));
        float _1996 = exp2((_1960.w + (-0.5)) * 20.0) * 2.0;
        float _1997 = _1996 * (_1960.x + (-0.5));
        float _1998 = _1996 * (_1960.y + (-0.5));
        float _1999 = _1996 * (_1960.z + (-0.5));
        float _2006 = exp2((_1967.w + (-0.5)) * 20.0) * 2.0;
        float _2007 = _2006 * (_1967.x + (-0.5));
        float _2008 = _2006 * (_1967.y + (-0.5));
        float _2009 = _2006 * (_1967.z + (-0.5));
        float _2016 = exp2((_1974.w + (-0.5)) * 20.0) * 2.0;
        float _2017 = _2016 * (_1974.x + (-0.5));
        float _2018 = _2016 * (_1974.y + (-0.5));
        float _2019 = _2016 * (_1974.z + (-0.5));
        float _2020 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2022 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = _1987 * 0.5;
        float _2024 = _1997 * 0.5;
        float _2025 = _2007 * 0.5;
        float _2026 = dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025));
        float _2031 = (_2026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2026);
        float _2039 = (dot(vec3(_1262, _1263, _1264), vec3(_2031 * _2023, _2031 * _2024, _2031 * _2025)) + 1.0) * 0.5;
        float _4769 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2048 = sqrt(((_2024 * _2024) + (_2023 * _2023)) + (_2025 * _2025)) / (_2020 + 9.9999997473787516355514526367188e-06);
        float _4780 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2050 = _2049 * 2.0;
        float _2054 = (1.0 - _2049) / (_2049 + 1.0);
        float _4791 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2064 = ((((1.0 - _2055) * (_2050 + 2.0)) * exp2(log2(isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2050 + 1.0))) + _2055) * _2020;
        float _2065 = _1988 * 0.5;
        float _2066 = _1998 * 0.5;
        float _2067 = _2008 * 0.5;
        float _2068 = dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067));
        float _2073 = (_2068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2068);
        float _2081 = (dot(vec3(_1262, _1263, _1264), vec3(_2073 * _2065, _2073 * _2066, _2073 * _2067)) + 1.0) * 0.5;
        float _4802 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2090 = sqrt(((_2066 * _2066) + (_2065 * _2065)) + (_2067 * _2067)) / (_2021 + 9.9999997473787516355514526367188e-06);
        float _4813 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2092 = _2091 * 2.0;
        float _2096 = (1.0 - _2091) / (_2091 + 1.0);
        float _4824 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2106 = ((((1.0 - _2097) * (_2092 + 2.0)) * exp2(log2(isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2092 + 1.0))) + _2097) * _2021;
        float _2107 = _1989 * 0.5;
        float _2108 = _1999 * 0.5;
        float _2109 = _2009 * 0.5;
        float _2110 = dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109));
        float _2115 = (_2110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2110);
        float _2123 = (dot(vec3(_1262, _1263, _1264), vec3(_2115 * _2107, _2115 * _2108, _2115 * _2109)) + 1.0) * 0.5;
        float _4835 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2132 = sqrt(((_2108 * _2108) + (_2107 * _2107)) + (_2109 * _2109)) / (_2022 + 9.9999997473787516355514526367188e-06);
        float _4846 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2134 = _2133 * 2.0;
        float _2138 = (1.0 - _2133) / (_2133 + 1.0);
        float _4857 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2148 = ((((1.0 - _2139) * (_2134 + 2.0)) * exp2(log2(isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2134 + 1.0))) + _2139) * _2022;
        _2156 = _1989;
        _2157 = _1988;
        _2158 = _1987;
        _2159 = _1999;
        _2160 = _1998;
        _2161 = _1997;
        _2162 = _2009;
        _2163 = _2008;
        _2164 = _2007;
        _2165 = _2022;
        _2166 = _2021;
        _2167 = _2020;
        _2168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
        _2169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)));
        _2170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)));
    }
    else
    {
        _2156 = _1844;
        _2157 = _1844;
        _2158 = _1844;
        _2159 = _1844;
        _2160 = _1844;
        _2161 = _1844;
        _2162 = _1844;
        _2163 = _1844;
        _2164 = _1844;
        _2165 = _1844;
        _2166 = _1844;
        _2167 = _1844;
        _2168 = 0.0;
        _2169 = 0.0;
        _2170 = 0.0;
    }
    float _2180 = (cbModelParam._m0[1u].x * (_2168 - _1856)) + _1856;
    float _2181 = (cbModelParam._m0[1u].x * (_2169 - _1857)) + _1857;
    float _2182 = (cbModelParam._m0[1u].x * (_2170 - _1858)) + _1858;
    float _2203 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2181, cbSceneParam._m0[89u].y, _2180 * cbSceneParam._m0[89u].x));
    float _2206 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2181, cbSceneParam._m0[90u].y, _2180 * cbSceneParam._m0[90u].x));
    float _2209 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2180));
    float _2224 = _1449 * 0.5;
    float _2225 = _1450 * 0.5;
    float _2226 = _1451 * 0.5;
    float _2227 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_2158, _2161, _2164, _2167));
    float _2230 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_2157, _2160, _2163, _2166));
    float _2233 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_2156, _2159, _2162, _2165));
    float _2267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2240 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_1843, _1847, _1850, _1853));
        float _2244 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_1845, _1848, _1851, _1854));
        float _2248 = dot(vec4(_2224, _2225, _2226, 1.0), vec4(_1846, _1849, _1852, _1855));
        float _2255 = dot(vec4(cbModelParam._m0[39u]), vec4(_2224, _2225, _2226, 1.0));
        _2267 = dot(vec3(isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0)), isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0)), isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2255) ? 0.0 : (isnan(0.0) ? _2255 : max(0.0, _2255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2267 = 1.0;
    }
    float _2278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2269 = dot(vec4(cbModelParam._m0[40u]), vec4(_2224, _2225, _2226, 1.0));
        _2278 = dot(vec3(isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0)), isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0)), isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2269) ? 0.0 : (isnan(0.0) ? _2269 : max(0.0, _2269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2278 = 1.0;
    }
    float _2282 = (_2278 * cbModelParam._m0[1u].x) + (_2267 * (1.0 - cbModelParam._m0[1u].x));
    float _2292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1266);
    float _2293 = isnan(_2292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2292 : min(cbModelParam._m0[25u].z, _2292));
    float _2373;
    float _2375;
    float _2377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2340 = fma(_1513, cbModelParam._m0[13u].z, fma(_1509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1505)) + cbModelParam._m0[13u].w;
        float _2344 = fma(_1513, cbModelParam._m0[14u].z, fma(_1509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1505)) + cbModelParam._m0[14u].w;
        float _2348 = fma(_1513, cbModelParam._m0[15u].z, fma(_1509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1505)) + cbModelParam._m0[15u].w;
        float _2351 = fma(_1451, cbModelParam._m0[13u].z, fma(_1450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1449));
        float _2354 = fma(_1451, cbModelParam._m0[14u].z, fma(_1450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1449));
        float _2357 = fma(_1451, cbModelParam._m0[15u].z, fma(_1450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1449));
        float _2385;
        if (_2351 > 0.0)
        {
            _2385 = abs((1.0 - _2340) / _2351);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2340 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2385 = frontier_phi_19_17_ladder;
        }
        float _2609;
        if (_2354 > 0.0)
        {
            _2609 = abs((1.0 - _2344) / _2354);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2344 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2609 = frontier_phi_28_24_ladder;
        }
        float _2866;
        if (_2357 > 0.0)
        {
            _2866 = abs((1.0 - _2348) / _2357);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2357 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2348 + 1.0) / _2357);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2866 = frontier_phi_40_35_ladder;
        }
        float _2868 = isnan(_2609) ? _2385 : (isnan(_2385) ? _2609 : min(_2385, _2609));
        float _2869 = isnan(_2866) ? _2868 : (isnan(_2868) ? _2866 : min(_2868, _2866));
        float _2873 = (_2869 * _2351) + _2340;
        float _2874 = (_2869 * _2354) + _2344;
        float _2875 = (_2869 * _2357) + _2348;
        float _2876 = _2869 * 9.9999997473787516355514526367188e-05;
        float _2878 = (-1.0) - _2876;
        float _2880 = _2876 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2875 > _2880) || ((_2875 < _2878) || ((_2874 > _2880) || ((_2874 < _2878) || ((_2873 < _2878) || (_2873 > _2880))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2875, cbModelParam._m0[9u].z, fma(_2874, cbModelParam._m0[9u].y, _2873 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2875, cbModelParam._m0[10u].z, fma(_2874, cbModelParam._m0[10u].y, _2873 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2875, cbModelParam._m0[11u].z, fma(_2874, cbModelParam._m0[11u].y, _2873 * cbModelParam._m0[11u].x))), _2293);
            frontier_phi_18_40_ladder = _3003.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3003.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3003.x * cbModelParam._m0[1u].y;
        }
        _2373 = frontier_phi_18_40_ladder_2;
        _2375 = frontier_phi_18_40_ladder_1;
        _2377 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1449, _1450, _1451), _2293);
        _2373 = _2361.x * cbModelParam._m0[1u].y;
        _2375 = _2361.y * cbModelParam._m0[1u].y;
        _2377 = _2361.z * cbModelParam._m0[1u].y;
    }
    float _2381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1266);
    float _2382 = isnan(_2381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2381 : min(cbModelParam._m0[25u].w, _2381));
    float _2472;
    float _2474;
    float _2476;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2436 = fma(_1513, cbModelParam._m0[21u].z, fma(_1509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1505)) + cbModelParam._m0[21u].w;
        float _2440 = fma(_1513, cbModelParam._m0[22u].z, fma(_1509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1505)) + cbModelParam._m0[22u].w;
        float _2444 = fma(_1513, cbModelParam._m0[23u].z, fma(_1509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1505)) + cbModelParam._m0[23u].w;
        float _2447 = fma(_1451, cbModelParam._m0[21u].z, fma(_1450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1449));
        float _2450 = fma(_1451, cbModelParam._m0[22u].z, fma(_1450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1449));
        float _2453 = fma(_1451, cbModelParam._m0[23u].z, fma(_1450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1449));
        float _2614;
        if (_2447 > 0.0)
        {
            _2614 = abs((1.0 - _2436) / _2447);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2447 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2436 + 1.0) / _2447);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2614 = frontier_phi_30_26_ladder;
        }
        float _2893;
        if (_2450 > 0.0)
        {
            _2893 = abs((1.0 - _2440) / _2450);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2450 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2440 + 1.0) / _2450);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2893 = frontier_phi_42_37_ladder;
        }
        float _3106;
        if (_2453 > 0.0)
        {
            _3106 = abs((1.0 - _2444) / _2453);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2453 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2444 + 1.0) / _2453);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _3106 = frontier_phi_51_48_ladder;
        }
        float _3108 = isnan(_2893) ? _2614 : (isnan(_2614) ? _2893 : min(_2614, _2893));
        float _3109 = isnan(_3106) ? _3108 : (isnan(_3108) ? _3106 : min(_3108, _3106));
        float _3113 = (_3109 * _2447) + _2436;
        float _3114 = (_3109 * _2450) + _2440;
        float _3115 = (_3109 * _2453) + _2444;
        float _3116 = _3109 * 9.9999997473787516355514526367188e-05;
        float _3117 = (-1.0) - _3116;
        float _3119 = _3116 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_3115 > _3119) || ((_3115 < _3117) || ((_3114 > _3119) || ((_3114 < _3117) || ((_3113 < _3117) || (_3113 > _3119))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3115, cbModelParam._m0[17u].z, fma(_3114, cbModelParam._m0[17u].y, _3113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3115, cbModelParam._m0[18u].z, fma(_3114, cbModelParam._m0[18u].y, _3113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3115, cbModelParam._m0[19u].z, fma(_3114, cbModelParam._m0[19u].y, _3113 * cbModelParam._m0[19u].x))), _2382);
            frontier_phi_27_51_ladder = _3318.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3318.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3318.x * cbModelParam._m0[1u].z;
        }
        _2472 = frontier_phi_27_51_ladder_2;
        _2474 = frontier_phi_27_51_ladder_1;
        _2476 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1449, _1450, _1451), _2382);
        _2472 = _2456.x * cbModelParam._m0[1u].z;
        _2474 = _2456.y * cbModelParam._m0[1u].z;
        _2476 = _2456.z * cbModelParam._m0[1u].z;
    }
    float _2489 = (((_1476 * _1426) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2472 - _2373)) + _2373);
    float _2491 = (((_1476 * _1428) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2474 - _2375)) + _2375);
    float _2493 = (((_1476 * _1429) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2476 - _2377)) + _2377);
    float _2496 = fma(_2493, cbSceneParam._m0[89u].z, fma(_2491, cbSceneParam._m0[89u].y, _2489 * cbSceneParam._m0[89u].x));
    float _2499 = fma(_2493, cbSceneParam._m0[90u].z, fma(_2491, cbSceneParam._m0[90u].y, _2489 * cbSceneParam._m0[90u].x));
    float _2502 = fma(_2493, cbSceneParam._m0[91u].z, fma(_2491, cbSceneParam._m0[91u].y, _2489 * cbSceneParam._m0[91u].x));
    vec4 _2510 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1363, _1364));
    float _2512 = _2510.w;
    float _2524 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2512);
    float _2525 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2512);
    float _2526 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2512);
    uvec4 _2530 = floatBitsToUint(cbInstanceData._m0[_1401 + 5u]);
    uint _2532 = _2530.x * 14u;
    uint _2533 = _2532 + 13u;
    float _2540 = _1441 + (-1.0);
    float _2545 = (cbLight._m0[_2533].x * _2540) + 1.0;
    float _2546 = (cbLight._m0[_2533].y * _2540) + 1.0;
    float _2547 = (cbLight._m0[_2533].z * _2540) + 1.0;
    float _2548 = (cbLight._m0[_2533].w * _2540) + 1.0;
    uint _2549 = _2532 + 5u;
    float _2555 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
    uint _2559 = _2532 + 4u;
    float _2568 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
    uint _2572 = _2532 | 1u;
    float _2583 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_1262, _1263, _1264));
    float _2586 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_1262, _1263, _1264));
    float _4993 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _5004 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2591 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * 0.3183098733425140380859375;
    float _2593 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * 0.3183098733425140380859375;
    float _2600 = ((cbLight._m0[_2549].x * _2555) * _2593) + (((cbLight._m0[_2559].x * _2524) * _2568) * _2591);
    float _2601 = ((_2555 * cbLight._m0[_2549].y) * _2593) + (((cbLight._m0[_2559].y * _2525) * _2568) * _2591);
    float _2602 = ((_2555 * cbLight._m0[_2549].z) * _2593) + (((cbLight._m0[_2559].z * _2526) * _2568) * _2591);
    uvec4 _2606 = floatBitsToUint(cbLight._m0[_2532 + 12u]);
    bool _2608 = _2606.x == 0u;
    float _2619;
    float _2621;
    float _2623;
    if (_2608)
    {
        _2619 = _2600;
        _2621 = _2601;
        _2623 = _2602;
    }
    else
    {
        uint _2627 = _2532 + 6u;
        float _2643 = (dot(vec3(cbLight._m0[_2532 + 2u].xyz), vec3(_1262, _1263, _1264)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _5015 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _2646 = isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0));
        _2619 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2600;
        _2621 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2601;
        _2623 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2602;
    }
    bool _2626 = _2606.y == 0u;
    float _2664;
    float _2666;
    float _2668;
    if (_2626)
    {
        _2664 = _2619;
        _2666 = _2621;
        _2668 = _2623;
    }
    else
    {
        uint _2837 = _2532 + 7u;
        float _2853 = (dot(vec3(cbLight._m0[_2532 + 3u].xyz), vec3(_1262, _1263, _1264)) * 0.5) + 0.5;
        float _2854 = _2853 * _2853;
        float _5031 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2855 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
        float _2856 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
        _2664 = (((cbLight._m0[_2837].x * 0.3183098733425140380859375) * _2855) * _2856) + _2619;
        _2666 = (((cbLight._m0[_2837].y * 0.3183098733425140380859375) * _2855) * _2856) + _2621;
        _2668 = (((cbLight._m0[_2837].z * 0.3183098733425140380859375) * _2855) * _2856) + _2623;
    }
    uint _2671 = _2532 + 8u;
    float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _1266) * 0.949999988079071044921875);
    float _2685 = _2684 * _2684;
    float _2686 = cbLight._m0[_2532].x + _1343;
    float _2687 = cbLight._m0[_2532].y + _1344;
    float _2688 = cbLight._m0[_2532].z + _1345;
    float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
    float _2693 = _2692 * _2686;
    float _2694 = _2692 * _2687;
    float _2695 = _2692 * _2688;
    float _2696 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_2532].xyz));
    float _5047 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
    float _5058 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _2700 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
    float _2701 = dot(vec3(_1262, _1263, _1264), vec3(_2693, _2694, _2695));
    float _5069 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2693, _2694, _2695));
    float _5080 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2685 * _2685;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) * 5.0);
    float _2722 = 0.959999978542327880859375 - _1423;
    float _2724 = 0.959999978542327880859375 - _1424;
    float _2725 = 0.959999978542327880859375 - _1425;
    float _2732 = 1.0 - _2685;
    float _2743 = (0.5 / (((_2700 * ((_2699 * _2732) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2732) + _2685) * _2699))) * _2699;
    float _5091 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    uint _2759 = _2532 + 9u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _1266) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2572].x + _1343;
    float _2773 = cbLight._m0[_2572].y + _1344;
    float _2774 = cbLight._m0[_2572].z + _1345;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_2572].xyz));
    float _5102 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
    float _2786 = dot(vec3(_1262, _1263, _1264), vec3(_2779, _2780, _2781));
    float _5113 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
    float _2790 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2779, _2780, _2781));
    float _5124 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2794 = _2771 * _2771;
    float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
    float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0)))) * 5.0);
    float _2812 = 1.0 - _2771;
    float _2822 = (0.5 / (((_2700 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2812) + _2771) * _2785))) * _2785;
    float _5135 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
    float _2834 = (((((_2805 * _2722) + _1426) * cbLight._m0[_2759].x) * _2824) * _2555) + ((((cbLight._m0[_2671].x * _2524) * ((_2721 * _2722) + _1426)) * _2745) * _2568);
    float _2835 = (((((_2805 * _2724) + _1428) * cbLight._m0[_2759].y) * _2824) * _2555) + ((((cbLight._m0[_2671].y * _2525) * ((_2721 * _2724) + _1428)) * _2745) * _2568);
    float _2836 = (((((_2805 * _2725) + _1429) * cbLight._m0[_2759].z) * _2824) * _2555) + ((((cbLight._m0[_2671].z * _2526) * ((_2721 * _2725) + _1429)) * _2745) * _2568);
    float _2898;
    float _2900;
    float _2902;
    if (_2608)
    {
        _2898 = _2834;
        _2900 = _2835;
        _2902 = _2836;
    }
    else
    {
        uint _2904 = _2532 + 2u;
        uint _2908 = _2532 + 10u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _1266) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _1343;
        float _2925 = cbLight._m0[_2904].y + _1344;
        float _2926 = cbLight._m0[_2904].z + _1345;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_2904].xyz));
        float _5146 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
        float _2938 = dot(vec3(_1262, _1263, _1264), vec3(_2931, _2932, _2933));
        float _5157 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _5168 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2957 = exp2(log2(1.0 - (isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0)))) * 5.0);
        float _2964 = 1.0 - _2923;
        float _2974 = (0.5 / (((_2700 * ((_2937 * _2964) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2964) + _2923) * _2937))) * _2937;
        float _5179 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0));
        _2898 = (((((_2957 * _2722) + _1426) * cbLight._m0[_2908].x) * _2976) * _2977) + _2834;
        _2900 = (((((_2957 * _2724) + _1428) * cbLight._m0[_2908].y) * _2976) * _2977) + _2835;
        _2902 = (((((_2957 * _2725) + _1429) * cbLight._m0[_2908].z) * _2976) * _2977) + _2836;
    }
    float _3012;
    float _3014;
    float _3016;
    if (_2626)
    {
        _3012 = _2898;
        _3014 = _2900;
        _3016 = _2902;
    }
    else
    {
        uint _3023 = _2532 + 3u;
        uint _3027 = _2532 + 11u;
        float _3041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3023].w)) * _1266) * 0.949999988079071044921875);
        float _3042 = _3041 * _3041;
        float _3043 = cbLight._m0[_3023].x + _1343;
        float _3044 = cbLight._m0[_3023].y + _1344;
        float _3045 = cbLight._m0[_3023].z + _1345;
        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
        float _3050 = _3049 * _3043;
        float _3051 = _3049 * _3044;
        float _3052 = _3049 * _3045;
        float _3053 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_3023].xyz));
        float _5195 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
        float _3057 = dot(vec3(_1262, _1263, _1264), vec3(_3050, _3051, _3052));
        float _5206 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3060 = isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0));
        float _3061 = dot(vec3(cbLight._m0[_3023].xyz), vec3(_3050, _3051, _3052));
        float _5217 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3065 = _3042 * _3042;
        float _3069 = ((_3060 * _3060) * (_3065 + (-1.0))) + 1.0;
        float _3076 = exp2(log2(1.0 - (isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0)))) * 5.0);
        float _3083 = 1.0 - _3042;
        float _3093 = (0.5 / (((_2700 * ((_3056 * _3083) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _3083) + _3042) * _3056))) * _3056;
        float _5228 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3095 = (isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0))) * (_3065 / ((_3069 * _3069) * 3.141590118408203125));
        float _3096 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
        _3012 = (((((_3076 * _2722) + _1426) * cbLight._m0[_3027].x) * _3095) * _3096) + _2898;
        _3014 = (((((_3076 * _2724) + _1428) * cbLight._m0[_3027].y) * _3095) * _3096) + _2900;
        _3016 = (((((_3076 * _2725) + _1429) * cbLight._m0[_3027].z) * _3095) * _3096) + _2902;
    }
    float _3230;
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    if (_2530.y == 0u)
    {
        float _3171 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3172 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3171;
        float _3173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3171;
        float _3174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3171;
        uvec4 _3186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3187 = _3186.x;
        uint _3198 = uint((float(_3186.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1364) / _3187))) + floor(float(uint(cbSceneParam._m0[85u].x * _1363) / _3187)));
        float _3208 = (log2(_3174 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3209 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
        uint _3212 = uint(isnan(14.0) ? _3209 : (isnan(_3209) ? 14.0 : min(_3209, 14.0)));
        uvec4 _3217 = texelFetch(g_lightClusterGridBuffer, int(((_3212 << 2u) + (_3198 << 6u)) >> 2u));
        uint _3218 = _3217.x;
        uint _3219 = _3186.z;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        if (((((1u << ((_3219 >> 4u) & 15u)) + 4294967295u) & _3218) == 0u) || ((_3219 & 240u) == 0u))
        {
            _3323 = 0.0;
            _3325 = 0.0;
            _3327 = 0.0;
            _3329 = 0.0;
            _3331 = 0.0;
            _3333 = 0.0;
        }
        else
        {
            float _3324;
            float _3326;
            float _3328;
            float _3330;
            float _3332;
            float _3334;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            uint _3481 = 0u;
            uint _3490;
            bool _3491;
            for (;;)
            {
                _3490 = texelFetch(g_lightClassification, int((((_3212 << 5u) + (_3198 << 9u)) + (_3481 << 2u)) >> 2u)).x;
                _3491 = _3490 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3491)
                {
                    frontier_phi_68_pred = _3477;
                    frontier_phi_68_pred_1 = _3480;
                    frontier_phi_68_pred_2 = _3479;
                    frontier_phi_68_pred_3 = _3478;
                    frontier_phi_68_pred_4 = _3476;
                    frontier_phi_68_pred_5 = _3475;
                }
                else
                {
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    uint _3626;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3490;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    for (;;)
                    {
                        uint _3630 = uint(findLSB(_3626)) + (_3481 << 5u);
                        uint _3627 = (_3626 + 4294967295u) & _3626;
                        uint _3632 = _3630 * 48u;
                        vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3632)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 3u)).x));
                        uint _3652 = (_3630 * 48u) + 4u;
                        vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3652)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 3u)).x));
                        uint _3671 = (_3630 * 48u) + 8u;
                        vec3 _3682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3671)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 2u)).x));
                        float _3686 = _3646.x - _3172;
                        float _3687 = _3646.y - _3173;
                        float _3688 = _3646.z - _3174;
                        float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                        float _3692 = inversesqrt(_3689);
                        float _3693 = _3692 * _3686;
                        float _3694 = _3692 * _3687;
                        float _3695 = _3692 * _3688;
                        float _3696 = dot(vec3(_1382, _1385, _1388), vec3(_3693, _3694, _3695));
                        float _3701 = 1.0 - (_3689 * _3646.w);
                        float _5254 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3702 = isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0));
                        float _3703 = sqrt(_3689) * _3665.w;
                        float _3705 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                        float _3706 = _3705 * _3705;
                        float _3709 = ((1.0 - _3706) * _3696) + _3706;
                        float _3712 = _3703 * _3703;
                        float _3716 = ((isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0))) * _3702) / ((_3712 * 0.699999988079071044921875) + 1.0);
                        float _3720 = (-0.0) - _3172;
                        float _3721 = (-0.0) - _3173;
                        float _3722 = (-0.0) - _3174;
                        float _3726 = inversesqrt(dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722)));
                        float _3727 = _3726 * _3720;
                        float _3728 = _3726 * _3721;
                        float _3729 = _3726 * _3722;
                        float _3737 = exp2(log2(1.0 / ((_3712 * 3.5) + 5.0)) * 0.25);
                        float _3738 = 1.0 - _1457;
                        float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                        float _3746 = _3745 * _3745;
                        float _3747 = _3746 * _3746;
                        float _3748 = _3727 + _3693;
                        float _3749 = _3728 + _3694;
                        float _3750 = _3729 + _3695;
                        float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                        float _3758 = dot(vec3(_1382, _1385, _1388), vec3(_3727, _3728, _3729));
                        float _5270 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                        float _3761 = isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0));
                        float _3762 = dot(vec3(_1382, _1385, _1388), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                        float _5281 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3765 = isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0));
                        float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                        float _3770 = _3705 * _3746;
                        float _3771 = _3770 * _3770;
                        float _3774 = ((1.0 - _3771) * _3696) + _3771;
                        float _5292 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                        float _3775 = isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0));
                        float _3776 = 1.0 - _3746;
                        float _3786 = (0.5 / (((_3775 * ((_3761 * _3776) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3775 * _3776) + _3746) * _3761))) * _3775;
                        float _5303 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                        float _3797 = (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0)))) / ((_3769 * _3769) * ((_3712 * 2.1991131305694580078125) + 3.141590118408203125))) * _3702;
                        _3550 = (_3716 * _3665.x) + _3623;
                        _3551 = (_3716 * _3665.y) + _3624;
                        _3552 = (_3716 * _3665.z) + _3625;
                        _3547 = (_3797 * _3682.x) + _3620;
                        _3548 = (_3797 * _3682.y) + _3621;
                        _3549 = (_3797 * _3682.z) + _3622;
                        if (_3627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3627;
                        }
                    }
                    frontier_phi_68_pred = _3549;
                    frontier_phi_68_pred_1 = _3552;
                    frontier_phi_68_pred_2 = _3551;
                    frontier_phi_68_pred_3 = _3550;
                    frontier_phi_68_pred_4 = _3548;
                    frontier_phi_68_pred_5 = _3547;
                }
                _3328 = frontier_phi_68_pred;
                _3334 = frontier_phi_68_pred_1;
                _3332 = frontier_phi_68_pred_2;
                _3330 = frontier_phi_68_pred_3;
                _3326 = frontier_phi_68_pred_4;
                _3324 = frontier_phi_68_pred_5;
                uint _3482 = _3481 + 1u;
                if (_3482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3475 = _3324;
                    _3476 = _3326;
                    _3477 = _3328;
                    _3478 = _3330;
                    _3479 = _3332;
                    _3480 = _3334;
                    _3481 = _3482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3323 = _3324;
            _3325 = _3326;
            _3327 = _3328;
            _3329 = _3330;
            _3331 = _3332;
            _3333 = _3334;
        }
        uvec4 _3337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3338 = _3337.z;
        uint _3340 = (_3338 >> 8u) & 15u;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        if (((4294967295u << _3340) & _3218) == 0u)
        {
            _3443 = _3323;
            _3445 = _3325;
            _3447 = _3327;
            _3449 = _3329;
            _3451 = _3331;
            _3453 = _3333;
        }
        else
        {
            float _3468 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
            float _3469 = _3468 * _3172;
            float _3470 = _3468 * _3173;
            float _3471 = _3468 * _3174;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3340 < ((_3338 >> 12u) & 15u))
            {
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3603 = _3323;
                float _3604 = _3325;
                float _3605 = _3327;
                float _3606 = _3329;
                float _3607 = _3331;
                float _3608 = _3333;
                uint _3609 = _3340;
                uint _3618;
                bool _3619;
                for (;;)
                {
                    _3618 = texelFetch(g_lightClassification, int((((_3212 << 5u) + (_3198 << 9u)) + (_3609 << 2u)) >> 2u)).x;
                    _3619 = _3618 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3619)
                    {
                        frontier_phi_79_pred = _3608;
                        frontier_phi_79_pred_1 = _3607;
                        frontier_phi_79_pred_2 = _3606;
                        frontier_phi_79_pred_3 = _3605;
                        frontier_phi_79_pred_4 = _3604;
                        frontier_phi_79_pred_5 = _3603;
                    }
                    else
                    {
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _4109;
                        float _3824 = _3603;
                        float _3825 = _3604;
                        float _3826 = _3605;
                        float _3827 = _3606;
                        float _3828 = _3607;
                        float _3829 = _3608;
                        uint _3830 = _3618;
                        uint _3831;
                        vec4 _3856;
                        float _3857;
                        vec4 _3872;
                        vec3 _3884;
                        vec4 _3899;
                        vec4 _3914;
                        float _3960;
                        bool _3961;
                        for (;;)
                        {
                            uint _3841 = ((_3609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3830));
                            _3831 = (_3830 + 4294967295u) & _3830;
                            uint _3843 = _3841 * 40u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3857 = _3856.w;
                            uint _3859 = (_3841 * 40u) + 4u;
                            _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            uint _3874 = (_3841 * 40u) + 8u;
                            _3884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x));
                            uint _3886 = (_3841 * 40u) + 16u;
                            _3899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 3u)).x));
                            uint _3901 = (_3841 * 40u) + 20u;
                            _3914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 3u)).x));
                            uint _3916 = (_3841 * 40u) + 24u;
                            vec4 _3929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 3u)).x));
                            uint _3935 = (_3841 * 40u) + 28u;
                            vec4 _3948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 3u)).x));
                            _3960 = fma(_3174, _3948.z, fma(_3173, _3948.y, _3948.x * _3172)) + _3948.w;
                            _3961 = !((fma(_3174, _3929.z, fma(_3173, _3929.y, _3929.x * _3172)) + _3929.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3961)
                            {
                                float _3988 = _3856.x - _3172;
                                float _3989 = _3856.y - _3173;
                                float _3990 = _3856.z - _3174;
                                float _3991 = dot(vec3(_3988, _3989, _3990), vec3(_3988, _3989, _3990));
                                float _3994 = inversesqrt(_3991);
                                float _3995 = _3994 * _3988;
                                float _3996 = _3994 * _3989;
                                float _3997 = _3994 * _3990;
                                float _4001 = 1.0 - (_3991 / (_3857 * _3857));
                                float _5314 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4002 = isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0));
                                float _4006 = sqrt(_3991) * _3872.w;
                                float _4008 = 1.39999997615814208984375 / (_4006 + 1.39999997615814208984375);
                                float _4009 = _4008 * _4008;
                                float _4012 = ((1.0 - _4009) * dot(vec3(_3995, _3996, _3997), vec3(_1382, _1385, _1388))) + _4009;
                                float _4015 = _4006 * _4006;
                                float _4019 = (fma(_3174, _3899.z, fma(_3173, _3899.y, _3899.x * _3172)) + _3899.w) / _3960;
                                float _4020 = (fma(_3174, _3914.z, fma(_3173, _3914.y, _3914.x * _3172)) + _3914.w) / _3960;
                                float _4024 = 1.0 - dot(vec2(_4019, _4020), vec2(_4019, _4020));
                                float _5330 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4025 = isnan(1.0) ? _5330 : (isnan(_5330) ? 1.0 : min(_5330, 1.0));
                                float _4026 = _4025 * (((isnan(0.0) ? _4012 : (isnan(_4012) ? 0.0 : max(_4012, 0.0))) * _4002) / ((_4015 * 0.699999988079071044921875) + 1.0));
                                float _4038 = exp2(log2(1.0 / ((_4015 * 3.5) + 5.0)) * 0.25);
                                float _4039 = 1.0 - _1457;
                                float _4046 = sqrt(1.0 - ((1.0 - (_4039 * _4039)) * (1.0 - (_4038 * _4038))));
                                float _4047 = _4046 * _4046;
                                float _4048 = _4047 * _4047;
                                float _4049 = _3995 - _3469;
                                float _4050 = _3996 - _3470;
                                float _4051 = _3997 - _3471;
                                float _4055 = inversesqrt(dot(vec3(_4049, _4050, _4051), vec3(_4049, _4050, _4051)));
                                float _4059 = dot(vec3(_1382, _1385, _1388), vec3((-0.0) - _3469, (-0.0) - _3470, (-0.0) - _3471));
                                float _5341 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                                float _4062 = isnan(1.0) ? _5341 : (isnan(_5341) ? 1.0 : min(_5341, 1.0));
                                float _4063 = dot(vec3(_1382, _1385, _1388), vec3(_4055 * _4049, _4055 * _4050, _4055 * _4051));
                                float _5352 = isnan(0.0) ? _4063 : (isnan(_4063) ? 0.0 : max(_4063, 0.0));
                                float _4066 = isnan(1.0) ? _5352 : (isnan(_5352) ? 1.0 : min(_5352, 1.0));
                                float _4070 = ((_4066 * _4066) * (_4048 + (-1.0))) + 1.0;
                                float _4071 = _4008 * _4047;
                                float _4072 = _4071 * _4071;
                                float _4078 = ((1.0 - _4072) * dot(vec3(_1382, _1385, _1388), vec3(_3995, _3996, _3997))) + _4072;
                                float _5363 = isnan(0.0) ? _4078 : (isnan(_4078) ? 0.0 : max(_4078, 0.0));
                                float _4079 = isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0));
                                float _4080 = 1.0 - _4047;
                                float _4090 = (0.5 / (((_4079 * ((_4062 * _4080) + _4047)) + 9.9999999392252902907785028219223e-09) + (((_4079 * _4080) + _4047) * _4062))) * _4079;
                                float _5374 = isnan(0.0) ? _4090 : (isnan(_4090) ? 0.0 : max(_4090, 0.0));
                                float _4100 = (_4025 * _4002) * (((_4048 * 3.1415927410125732421875) * (isnan(1.0) ? _5374 : (isnan(_5374) ? 1.0 : min(_5374, 1.0)))) / ((_4070 * _4070) * ((_4015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _4026 * _3872.z;
                                frontier_phi_85_pred_1 = _4026 * _3872.y;
                                frontier_phi_85_pred_2 = _4026 * _3872.x;
                                frontier_phi_85_pred_3 = _4100 * _3884.z;
                                frontier_phi_85_pred_4 = _4100 * _3884.y;
                                frontier_phi_85_pred_5 = _4100 * _3884.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _4109 = frontier_phi_85_pred;
                            _4108 = frontier_phi_85_pred_1;
                            _4107 = frontier_phi_85_pred_2;
                            _4106 = frontier_phi_85_pred_3;
                            _4105 = frontier_phi_85_pred_4;
                            _4104 = frontier_phi_85_pred_5;
                            _3814 = _4107 + _3827;
                            _3815 = _4108 + _3828;
                            _3816 = _4109 + _3829;
                            _3811 = _4104 + _3824;
                            _3812 = _4105 + _3825;
                            _3813 = _4106 + _3826;
                            if (_3831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3831;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3816;
                        frontier_phi_79_pred_1 = _3815;
                        frontier_phi_79_pred_2 = _3814;
                        frontier_phi_79_pred_3 = _3813;
                        frontier_phi_79_pred_4 = _3812;
                        frontier_phi_79_pred_5 = _3811;
                    }
                    _3454 = frontier_phi_79_pred;
                    _3452 = frontier_phi_79_pred_1;
                    _3450 = frontier_phi_79_pred_2;
                    _3448 = frontier_phi_79_pred_3;
                    _3446 = frontier_phi_79_pred_4;
                    _3444 = frontier_phi_79_pred_5;
                    uint _3610 = _3609 + 1u;
                    if (_3610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3603 = _3444;
                        _3604 = _3446;
                        _3605 = _3448;
                        _3606 = _3450;
                        _3607 = _3452;
                        _3608 = _3454;
                        _3609 = _3610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3450;
                frontier_phi_60_61_ladder_1 = _3454;
                frontier_phi_60_61_ladder_2 = _3452;
                frontier_phi_60_61_ladder_3 = _3448;
                frontier_phi_60_61_ladder_4 = _3446;
                frontier_phi_60_61_ladder_5 = _3444;
            }
            else
            {
                frontier_phi_60_61_ladder = _3329;
                frontier_phi_60_61_ladder_1 = _3333;
                frontier_phi_60_61_ladder_2 = _3331;
                frontier_phi_60_61_ladder_3 = _3327;
                frontier_phi_60_61_ladder_4 = _3325;
                frontier_phi_60_61_ladder_5 = _3323;
            }
            _3443 = frontier_phi_60_61_ladder_5;
            _3445 = frontier_phi_60_61_ladder_4;
            _3447 = frontier_phi_60_61_ladder_3;
            _3449 = frontier_phi_60_61_ladder;
            _3451 = frontier_phi_60_61_ladder_2;
            _3453 = frontier_phi_60_61_ladder_1;
        }
        float _3458 = isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0));
        _3230 = (_3458 * _3449) + _2664;
        _3232 = (_3458 * _3451) + _2666;
        _3234 = (_3458 * _3453) + _2668;
        _3236 = ((_3443 * _1426) * _3458) + _3012;
        _3238 = ((_3445 * _1428) * _3458) + _3014;
        _3240 = ((_3447 * _1429) * _3458) + _3016;
    }
    else
    {
        _3230 = _2664;
        _3232 = _2666;
        _3234 = _2668;
        _3236 = _3012;
        _3238 = _3014;
        _3240 = _3016;
    }
    float _5390 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _5401 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _5412 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
    float _5423 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _3258 = ((isnan(1.0) ? _5390 : (isnan(_5390) ? 1.0 : min(_5390, 1.0))) * (_3230 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1441))) + ((_3236 + ((isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))) * _2282)) * cbPerFrame._m0[3u].x);
    float _3259 = ((isnan(1.0) ? _5401 : (isnan(_5401) ? 1.0 : min(_5401, 1.0))) * (_3232 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1441))) + ((_3238 + ((isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))) * _2282)) * cbPerFrame._m0[3u].x);
    float _3260 = ((isnan(1.0) ? _5412 : (isnan(_5412) ? 1.0 : min(_5412, 1.0))) * (_3234 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1441))) + ((_3240 + ((isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))) * _2282)) * cbPerFrame._m0[3u].x);
    float _3261 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
    float _3262 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
    float _3263 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
    float _3268 = cbInstanceData._m0[_1401 + 6u].w * (isnan(1.0) ? _5423 : (isnan(_5423) ? 1.0 : min(_5423, 1.0)));
    float _3273 = _1363 / cbSceneParam._m0[86u].x;
    float _3274 = _1364 / cbSceneParam._m0[86u].y;
    vec4 _3288 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, (log2((isnan(cbSceneParam._m0[77u].w) ? _1286 : (isnan(_1286) ? cbSceneParam._m0[77u].w : min(_1286, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3290 = _3288.x;
    float _3291 = _3288.y;
    float _3292 = _3288.z;
    float _3293 = _3288.w;
    float _3385;
    float _3387;
    float _3389;
    float _3391;
    if (_1286 > cbSceneParam._m0[78u].w)
    {
        float _3348 = isnan(_1286) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1286 : min(cbSceneParam._m0[80u].w, _1286));
        float _3349 = _3348 / _1286;
        float _3360 = _3349 * _1336;
        float _3361 = _1337 * _3349;
        float _3362 = (-0.0) - _3361;
        float _3363 = _3349 * _1338;
        float _3365 = (cbSceneParam._m0[77u].w * _3362) / _3348;
        float _3366 = _3365 + cbSceneParam._m0[79u].w;
        float _3367 = cbSceneParam._m0[79u].w - _3361;
        float _3373 = sqrt(((_3360 * _3360) + (_3361 * _3361)) + (_3363 * _3363));
        float _3376 = (1.0 - (cbSceneParam._m0[77u].w / _3348)) * _3373;
        float _3381 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3383 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3560;
        if (abs((_3362 - _3365) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3560 = ((((_3366 > 0.0) ? exp2(_3381 * _3366) : (2.0 - exp2(_3383 * _3366))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3376;
        }
        else
        {
            float _3504 = 1.0 / cbSceneParam._m0[80u].x;
            float _3505 = isnan(_3367) ? _3366 : (isnan(_3366) ? _3367 : max(_3366, _3367));
            float _3506 = isnan(_3367) ? _3366 : (isnan(_3366) ? _3367 : min(_3366, _3367));
            float _3515 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : min(_3505, 0.0));
            float _3516 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : min(_3506, 0.0));
            _3560 = ((abs(_3373 / _3362) * cbSceneParam._m0[80u].y) * ((((_3515 - _3516) * 2.0) - ((exp2(_3381 * (isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0)))) - exp2(_3381 * (isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))))) * _3504)) - ((exp2(_3383 * _3515) - exp2(_3383 * _3516)) * _3504))) + (_3376 * cbSceneParam._m0[80u].z);
        }
        vec4 _3562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, 1.0), 0.0);
        float _3571 = exp2((_3560 * (-1.44269502162933349609375)) * (1.0 - _3562.w));
        float _3572 = log2(_3571);
        float _3588 = log2(_3293);
        _3385 = (exp2(_3588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].x)) * _3562.x) / cbSceneParam._m0[78u].x)) + _3290;
        _3387 = (exp2(_3588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].y)) * _3562.y) / cbSceneParam._m0[78u].y)) + _3291;
        _3389 = (exp2(_3588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].z)) * _3562.z) / cbSceneParam._m0[78u].z)) + _3292;
        _3391 = _3571 * _3293;
    }
    else
    {
        _3385 = _3290;
        _3387 = _3291;
        _3389 = _3292;
        _3391 = _3293;
    }
    bool _3598;
    vec4 _3401;
    vec4 _3423;
    float _3425;
    float _3429;
    float _3430;
    float _3431;
    float _3432;
    bool _3442;
    for (;;)
    {
        _3401 = cbMatDynParam._m0[0u];
        float _3403 = roundEven(_3401.y);
        bool _3404 = _3403 == 3.0;
        float _3405 = log2(_3391);
        float _3412 = exp2(_3405 * cbSceneParam._m0[78u].x) * _3261;
        float _3413 = exp2(_3405 * cbSceneParam._m0[78u].y) * _3262;
        float _3414 = exp2(_3405 * cbSceneParam._m0[78u].z) * _3263;
        float _3421 = _1352 + (-0.5);
        _3423 = cbMtdParam._m0[1u];
        _3425 = _3423.y * _3421;
        float _3428 = (_3403 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3429 = _3428 * (_3404 ? _3412 : (_3412 + (cbSceneParam._m0[72u].w * _3385)));
        _3430 = _3428 * (_3404 ? _3413 : (_3413 + (cbSceneParam._m0[72u].w * _3387)));
        _3431 = _3428 * (_3404 ? _3414 : (_3414 + (cbSceneParam._m0[72u].w * _3389)));
        _3432 = _3421 * 0.999000012874603271484375;
        _3442 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3442)
        {
            if ((cbInstanceData._m0[_1401 + 7u].x + _3432) < 0.5)
            {
                _3598 = true;
                break;
            }
        }
        uint _3539 = _1402 + uint(_3401.w);
        if ((cbInstanceData._m0[_3539].w < 1.0) && ((cbInstanceData._m0[_3539].w + _3432) < 0.5))
        {
            _3598 = true;
            break;
        }
        if ((_3425 + _620) < _3423.x)
        {
            _3598 = true;
            break;
        }
        _3598 = false;
        break;
    }
    float _3802;
    if (_3598)
    {
        discard_state = true;
        _3802 = 0.0;
    }
    else
    {
        _3802 = _3268;
    }
    SV_Target.x = _3429;
    SV_Target.y = _3430;
    SV_Target.z = _3431;
    SV_Target.w = _3802;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3268;
    discard_exit();
}


