#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec4 TEXCOORD_10;
layout(location = 8) in vec4 TEXCOORD_13;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1884;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _253 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _254 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _255 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _261 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _262 = _261 * _253;
    float _263 = _261 * _254;
    float _264 = _261 * _255;
    float _274 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _275 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _276 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _280 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _281 = _280 * _274;
    float _282 = _280 * _275;
    float _283 = _280 * _276;
    float _287 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _288 = _287 * NORMAL.x;
    float _289 = _287 * NORMAL.y;
    float _290 = _287 * NORMAL.z;
    float _294 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _295 = _294 * TANGENT.x;
    float _296 = _294 * TANGENT.y;
    float _297 = _294 * TANGENT.z;
    float _301 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _302 = _301 * TANGENT_2.x;
    float _303 = _301 * TANGENT_2.y;
    float _304 = _301 * TANGENT_2.z;
    float _309;
    float _310;
    float _311;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _309 = (-0.0) - _288;
        _310 = (-0.0) - _289;
        _311 = (-0.0) - _290;
    }
    else
    {
        _309 = _288;
        _310 = _289;
        _311 = _290;
    }
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = 1.0 - ((1.0 - _330.z) * 1.39999997615814208984375);
    float _4513 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _345 = 1.0 - ((1.0 - _330.x) * 1.39999997615814208984375);
    float _4524 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _348 = 1.0 - ((1.0 - _330.y) * 1.39999997615814208984375);
    float _4535 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _351 = (_346 + _343) + _349;
    float _358 = (_351 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _359 = (_351 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _360 = (_351 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _385 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _394 = 1.0 - ((1.0 - _385.x) * 1.39999997615814208984375);
    float _4546 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _405 = (_395 * ((cbMtdParam._m0[9u].x - _358) + ((1.0 - cbMtdParam._m0[9u].x) * _351))) + _358;
    float _406 = (_395 * ((cbMtdParam._m0[9u].y - _359) + ((1.0 - cbMtdParam._m0[9u].y) * _351))) + _359;
    float _407 = (_395 * ((cbMtdParam._m0[9u].z - _360) + ((1.0 - cbMtdParam._m0[9u].z) * _351))) + _360;
    float _420 = 1.0 - ((1.0 - _385.y) * 1.39999997615814208984375);
    float _4557 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _431 = (((cbMtdParam._m0[17u].x - _405) + ((1.0 - cbMtdParam._m0[17u].x) * _351)) * _421) + _405;
    float _432 = (((cbMtdParam._m0[17u].y - _406) + ((1.0 - cbMtdParam._m0[17u].y) * _351)) * _421) + _406;
    float _433 = (((cbMtdParam._m0[17u].z - _407) + ((1.0 - cbMtdParam._m0[17u].z) * _351)) * _421) + _407;
    float _447 = 1.0 - ((1.0 - _385.z) * 1.39999997615814208984375);
    float _4568 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _479 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x * cbMtdParam._m0[25u].z;
    float _493 = ((cbMtdParam._m0[23u].y * (-1.39999997615814208984375)) * ((TEXCOORD_13.w - _479) + (cbMtdParam._m0[24u].x * TEXCOORD_13.w))) + 1.0;
    float _4579 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = 1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)));
    float _503 = ((cbMtdParam._m0[23u].x * (-1.39999997615814208984375)) * ((TEXCOORD_10.w - _479) + (cbMtdParam._m0[24u].y * TEXCOORD_10.w))) + 1.0;
    float _4590 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = 1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)));
    vec4 _523 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _528 = cbMtdParam._m0[10u].x * _505;
    float _530 = cbMtdParam._m0[10u].y * _505;
    float _532 = cbMtdParam._m0[10u].z * _505;
    float _549 = ((_525 * (cbMtdParam._m0[16u].x - _528)) * _495) + (_528 * _525);
    float _550 = ((_526 * (cbMtdParam._m0[16u].y - _530)) * _495) + (_530 * _526);
    float _551 = ((_527 * (cbMtdParam._m0[16u].z - _532)) * _495) + (_532 * _527);
    float _573 = cbMtdParam._m0[23u].w * (-1.39999997615814208984375);
    float _577 = (_573 * ((TEXCOORD_7.x - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.x))) + 1.0;
    float _578 = (_573 * ((TEXCOORD_7.y - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.y))) + 1.0;
    float _579 = (_573 * ((TEXCOORD_7.z - _479) + (cbMtdParam._m0[22u].w * TEXCOORD_7.z))) + 1.0;
    float _4601 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4612 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4623 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _588 = (1.0 - cbMtdParam._m0[25u].x) + _346;
    float _591 = _588 * (1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))));
    float _592 = _588 * (1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))));
    float _593 = ((_346 + 1.0) - cbMtdParam._m0[25u].x) * (1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))));
    float _603 = _505 + _495;
    float _604 = _603 + _591;
    float _605 = _603 + _592;
    float _606 = _603 + _593;
    float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _610 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
    float _611 = isnan(1.0) ? _608 : (isnan(_608) ? 1.0 : min(_608, 1.0));
    float _612 = isnan(1.0) ? _609 : (isnan(_609) ? 1.0 : min(_609, 1.0));
    vec4 _630 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _635 = _630.w;
    float _636 = _630.x * cbMtdParam._m0[12u].x;
    float _637 = _630.y * cbMtdParam._m0[12u].y;
    float _638 = _630.z * cbMtdParam._m0[12u].z;
    vec4 _656 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _670 = (((_656.x * cbMtdParam._m0[13u].x) - _636) * _346) + _636;
    float _671 = (((_656.y * cbMtdParam._m0[13u].y) - _637) * _346) + _637;
    float _672 = (((_656.z * cbMtdParam._m0[13u].z) - _638) * _346) + _638;
    vec4 _691 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _705 = (((_691.x * cbMtdParam._m0[14u].x) - _670) * _349) + _670;
    float _706 = (((_691.y * cbMtdParam._m0[14u].y) - _671) * _349) + _671;
    float _707 = (((_691.z * cbMtdParam._m0[14u].z) - _672) * _349) + _672;
    vec4 _724 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _738 = (((_724.x * cbMtdParam._m0[15u].x) - _705) * _343) + _705;
    float _739 = (((_724.y * cbMtdParam._m0[15u].y) - _706) * _343) + _706;
    float _740 = (((_724.z * cbMtdParam._m0[15u].z) - _707) * _343) + _707;
    float _760 = ((_738 - (_738 * _610)) + (((_610 * 4.55000019073486328125) * ((_591 * ((cbMtdParam._m0[11u].x * _525) - _549)) + _549)) * _738)) * ((((cbMtdParam._m0[18u].x - _431) + ((1.0 - cbMtdParam._m0[18u].x) * _351)) * _448) + _431);
    float _761 = ((_739 - (_739 * _611)) + (((_611 * 4.55000019073486328125) * ((_592 * ((cbMtdParam._m0[11u].y * _526) - _550)) + _550)) * _739)) * ((((cbMtdParam._m0[18u].y - _432) + ((1.0 - cbMtdParam._m0[18u].y) * _351)) * _448) + _432);
    float _762 = ((_740 - (_612 * _740)) + (((_612 * 4.55000019073486328125) * ((_593 * ((cbMtdParam._m0[11u].z * _527) - _551)) + _551)) * _740)) * ((((cbMtdParam._m0[18u].z - _433) + ((1.0 - cbMtdParam._m0[18u].z) * _351)) * _448) + _433);
    float _773 = ((cbMtdParam._m0[22u].z - cbMtdParam._m0[25u].w) * _610) + cbMtdParam._m0[25u].w;
    float _776 = ((cbMtdParam._m0[20u].x - _773) * _346) + _773;
    float _779 = ((cbMtdParam._m0[20u].y - _776) * _349) + _776;
    float _782 = ((cbMtdParam._m0[20u].z - _779) * _343) + _779;
    vec4 _794 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _798 = _794.z;
    float _802 = (_794.x * 2.0) + (-1.0);
    float _804 = (_794.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_802, _804), vec2(_802, _804));
    float _4664 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _810 = sqrt(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))));
    float _813 = fma(_810, _309, fma(_804, _302, _802 * _281));
    float _816 = fma(_810, _310, fma(_804, _303, _802 * _282));
    float _819 = fma(_810, _311, fma(_804, _304, _802 * _283));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _843 = abs((fract(cbMtdParam._m0[21u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4675 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _849 = (_844 * _844) * (3.0 - (_844 * 2.0));
    float _850 = isnan(cbMtdParam._m0[21u].y) ? _849 : (isnan(_849) ? cbMtdParam._m0[21u].y : max(_849, cbMtdParam._m0[21u].y));
    vec4 _869 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_10, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].x * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[21u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _874 = (isnan(cbMtdParam._m0[21u].x) ? _850 : (isnan(_850) ? cbMtdParam._m0[21u].x : min(_850, cbMtdParam._m0[21u].x))) * cbMtdParam._m0[22u].y;
    vec4 _906 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _4696 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _919 = sqrt(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))));
    float _922 = fma(_919, _309, fma(_913, _302, _912 * _281));
    float _925 = fma(_919, _310, fma(_913, _303, _912 * _282));
    float _928 = fma(_919, _311, fma(_913, _304, _912 * _283));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _938 = fma(_935, _264, fma(_934, _263, _933 * _262));
    float _941 = fma(_935, _297, fma(_934, _296, _933 * _295));
    float _944 = fma(_935, _311, fma(_934, _310, _933 * _309));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    vec4 _962 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _968 = (_962.x * 2.0) + (-1.0);
    float _969 = (_962.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4707 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _975 = sqrt(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))));
    float _978 = fma(_975, _309, fma(_969, _302, _968 * _281));
    float _981 = fma(_975, _310, fma(_969, _303, _968 * _282));
    float _984 = fma(_975, _311, fma(_969, _304, _968 * _283));
    float _988 = inversesqrt(dot(vec3(_978, _981, _984), vec3(_978, _981, _984)));
    float _989 = _988 * _978;
    float _990 = _988 * _981;
    float _991 = _988 * _984;
    float _994 = fma(_991, _264, fma(_990, _263, _989 * _262));
    float _997 = fma(_991, _297, fma(_990, _296, _989 * _295));
    float _1000 = fma(_991, _311, fma(_990, _310, _989 * _309));
    float _1004 = inversesqrt(dot(vec3(_994, _997, _1000), vec3(_994, _997, _1000)));
    vec4 _1017 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1023 = (_1017.x * 2.0) + (-1.0);
    float _1024 = (_1017.y * 2.0) + (-1.0);
    float _1025 = dot(vec2(_1023, _1024), vec2(_1023, _1024));
    float _4718 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1030 = sqrt(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))));
    float _1033 = fma(_1030, _309, fma(_1024, _302, _1023 * _281));
    float _1036 = fma(_1030, _310, fma(_1024, _303, _1023 * _282));
    float _1039 = fma(_1030, _311, fma(_1024, _304, _1023 * _283));
    float _1043 = inversesqrt(dot(vec3(_1033, _1036, _1039), vec3(_1033, _1036, _1039)));
    float _1044 = _1043 * _1033;
    float _1045 = _1043 * _1036;
    float _1046 = _1043 * _1039;
    float _1049 = fma(_1046, _264, fma(_1045, _263, _1044 * _262));
    float _1052 = fma(_1046, _297, fma(_1045, _296, _1044 * _295));
    float _1055 = fma(_1046, _311, fma(_1045, _310, _1044 * _309));
    float _1059 = inversesqrt(dot(vec3(_1049, _1052, _1055), vec3(_1049, _1052, _1055)));
    float _1065 = fma(_826, _264, fma(_825, _263, _824 * _262));
    float _1068 = fma(_826, _297, fma(_825, _296, _824 * _295));
    float _1071 = fma(_826, _311, fma(_825, _310, _824 * _309));
    float _1075 = inversesqrt(dot(vec3(_1065, _1068, _1071), vec3(_1065, _1068, _1071)));
    float _1076 = _1075 * _1065;
    float _1077 = _1075 * _1068;
    float _1078 = _1075 * _1071;
    float _1085 = (((_1059 * _1049) - _1076) * _346) + _1076;
    float _1086 = (((_1059 * _1052) - _1077) * _346) + _1077;
    float _1087 = (((_1059 * _1055) - _1078) * _346) + _1078;
    vec4 _1100 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1106 = (_1100.x * 2.0) + (-1.0);
    float _1107 = (_1100.y * 2.0) + (-1.0);
    float _1108 = dot(vec2(_1106, _1107), vec2(_1106, _1107));
    float _4729 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1113 = sqrt(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))));
    float _1116 = fma(_1113, _309, fma(_1107, _302, _1106 * _281));
    float _1119 = fma(_1113, _310, fma(_1107, _303, _1106 * _282));
    float _1122 = fma(_1113, _311, fma(_1107, _304, _1106 * _283));
    float _1126 = inversesqrt(dot(vec3(_1116, _1119, _1122), vec3(_1116, _1119, _1122)));
    float _1127 = _1126 * _1116;
    float _1128 = _1126 * _1119;
    float _1129 = _1126 * _1122;
    float _1132 = fma(_1129, _264, fma(_1128, _263, _1127 * _262));
    float _1135 = fma(_1129, _297, fma(_1128, _296, _1127 * _295));
    float _1138 = fma(_1129, _311, fma(_1128, _310, _1127 * _309));
    float _1142 = inversesqrt(dot(vec3(_1132, _1135, _1138), vec3(_1132, _1135, _1138)));
    float _1152 = (((_1142 * _1132) - _1085) * _349) + _1085;
    float _1153 = (((_1142 * _1135) - _1086) * _349) + _1086;
    float _1154 = (((_1142 * _1138) - _1087) * _349) + _1087;
    vec4 _1167 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _1173 = (_1167.x * 2.0) + (-1.0);
    float _1174 = (_1167.y * 2.0) + (-1.0);
    float _1175 = dot(vec2(_1173, _1174), vec2(_1173, _1174));
    float _4740 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1180 = sqrt(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))));
    float _1183 = fma(_1180, _309, fma(_1174, _302, _1173 * _281));
    float _1186 = fma(_1180, _310, fma(_1174, _303, _1173 * _282));
    float _1189 = fma(_1180, _311, fma(_1174, _304, _1173 * _283));
    float _1193 = inversesqrt(dot(vec3(_1183, _1186, _1189), vec3(_1183, _1186, _1189)));
    float _1194 = _1193 * _1183;
    float _1195 = _1193 * _1186;
    float _1196 = _1193 * _1189;
    float _1199 = fma(_1196, _264, fma(_1195, _263, _1194 * _262));
    float _1202 = fma(_1196, _297, fma(_1195, _296, _1194 * _295));
    float _1205 = fma(_1196, _311, fma(_1195, _310, _1194 * _309));
    float _1209 = inversesqrt(dot(vec3(_1199, _1202, _1205), vec3(_1199, _1202, _1205)));
    float _1219 = (((_1209 * _1205) - _1154) * _343) + _1154;
    vec4 _1231 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1237 = (_1231.x * 2.0) + (-1.0);
    float _1238 = (_1231.y * 2.0) + (-1.0);
    float _1239 = dot(vec2(_1237, _1238), vec2(_1237, _1238));
    float _4751 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1244 = sqrt(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))));
    float _1247 = fma(_1244, _309, fma(_1238, _302, _1237 * _281));
    float _1250 = fma(_1244, _310, fma(_1238, _303, _1237 * _282));
    float _1253 = fma(_1244, _311, fma(_1238, _304, _1237 * _283));
    float _1257 = inversesqrt(dot(vec3(_1247, _1250, _1253), vec3(_1247, _1250, _1253)));
    float _1258 = _1257 * _1247;
    float _1259 = _1257 * _1250;
    float _1260 = _1257 * _1253;
    float _1263 = fma(_1260, _264, fma(_1259, _263, _1258 * _262));
    float _1266 = fma(_1260, _297, fma(_1259, _296, _1258 * _295));
    float _1269 = fma(_1260, _311, fma(_1259, _310, _1258 * _309));
    float _1273 = inversesqrt(dot(vec3(_1263, _1266, _1269), vec3(_1263, _1266, _1269)));
    vec4 _1311 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _1325 = (((((((_994 * _495) * _1004) * cbMtdParam._m0[24u].z) + ((((_604 * _588) * _938) * _948) * cbMtdParam._m0[24u].w)) + _1152) + (((_1209 * _1199) - _1152) * _343)) + (((_1263 * _505) * _1273) * cbMtdParam._m0[23u].z)) + (((_1311.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1330 = (((((((_997 * _495) * _1004) * cbMtdParam._m0[24u].z) + ((((_605 * _588) * _941) * _948) * cbMtdParam._m0[24u].w)) + _1153) + (((_1209 * _1202) - _1153) * _343)) + (((_1266 * _505) * _1273) * cbMtdParam._m0[23u].z)) + (((_1311.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].y);
    float _1333 = fma(_1219, _309, fma(_1330, _295, _1325 * _262));
    float _1336 = fma(_1219, _310, fma(_1330, _296, _1325 * _263));
    float _1339 = fma(_1219, _311, fma(_1330, _297, _1325 * _264));
    float _1343 = inversesqrt(dot(vec3(_1333, _1336, _1339), vec3(_1333, _1336, _1339)));
    float _1344 = _1343 * _1333;
    float _1345 = _1343 * _1336;
    float _1346 = _1343 * _1339;
    float _4762 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1347 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _4773 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _1348 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _4784 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4795 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4806 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4817 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1352 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _1368 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1408 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1418 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1408);
    float _1419 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1408);
    float _1420 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1408);
    float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
    float _1425 = _1418 * _1424;
    float _1426 = _1419 * _1424;
    float _1427 = _1420 * _1424;
    float _1433 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1434 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1452 = fma(_1346, cbSceneParam._m0[5u].z, fma(_1345, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1344));
    float _1455 = fma(_1346, cbSceneParam._m0[6u].z, fma(_1345, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1344));
    float _1458 = fma(_1346, cbSceneParam._m0[7u].z, fma(_1345, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1344));
    uint _1471 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1472 = _1471 + 9u;
    uint _1473 = _1472 + uint(cbMatDynParam._m0[0u].w);
    float _1479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * cbInstanceData._m0[_1473].x;
    float _1480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * cbInstanceData._m0[_1473].y;
    float _1481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * cbInstanceData._m0[_1473].z;
    float _4828 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _1482 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _4839 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    float _1483 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _4850 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
    float _1484 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _1485 = 1.0 - _1352;
    float _1486 = _1482 * _1485;
    float _1487 = _1483 * _1485;
    float _1488 = _1484 * _1485;
    float _1493 = (_1482 + (-0.039999999105930328369140625)) * _1352;
    float _1494 = (_1483 + (-0.039999999105930328369140625)) * _1352;
    float _1495 = (_1484 + (-0.039999999105930328369140625)) * _1352;
    float _1496 = _1493 + 0.039999999105930328369140625;
    float _1498 = _1494 + 0.039999999105930328369140625;
    float _1499 = _1495 + 0.039999999105930328369140625;
    vec4 _1508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1433, cbSceneParam._m0[86u].y * _1434));
    float _1511 = _1508.x * TEXCOORD_7.w;
    float _1512 = dot(vec3(_1344, _1345, _1346), vec3(_1425, _1426, _1427));
    float _1515 = _1512 * 2.0;
    float _1519 = (_1515 * _1344) - _1425;
    float _1520 = (_1515 * _1345) - _1426;
    float _1521 = (_1515 * _1346) - _1427;
    float _1525 = abs(dot(vec3(_1425, _1426, _1427), vec3(_1344, _1345, _1346)));
    float _4861 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _1527 = sqrt(_1348);
    float _1539 = exp2((_1527 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1527 * 3.0));
    float _1545 = (1.0 - _1539) * ((_1527 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1546 = _1539 * _1527;
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1883;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1608 = fma(_1582, cbModelParam._m0[26u].z, fma(_1578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1574));
        float _1612 = fma(_1582, cbModelParam._m0[27u].z, fma(_1578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1574));
        float _1616 = fma(_1582, cbModelParam._m0[28u].z, fma(_1578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1574));
        float _1641 = _1574 + _1344;
        float _1642 = _1578 + _1345;
        float _1643 = _1582 + _1346;
        float _1653 = fma(_1643, cbModelParam._m0[26u].z, fma(_1642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1641)) - _1608;
        float _1654 = fma(_1643, cbModelParam._m0[27u].z, fma(_1642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1641)) - _1612;
        float _1655 = fma(_1643, cbModelParam._m0[28u].z, fma(_1642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1641)) - _1616;
        float _1659 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
        float _1672 = ((_1659 * _1653) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1608 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1673 = ((_1659 * _1654) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1612 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1674 = ((_1659 * _1655) / cbModelParam._m0[34u].z) + ((((((_1616 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        float _1711 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1677.x + (-0.5));
        float _1713 = _1711 * (_1677.y + (-0.5));
        float _1714 = _1711 * (_1677.z + (-0.5));
        float _1721 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1684.x + (-0.5));
        float _1723 = _1721 * (_1684.y + (-0.5));
        float _1724 = _1721 * (_1684.z + (-0.5));
        float _1731 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1691.x + (-0.5));
        float _1733 = _1731 * (_1691.y + (-0.5));
        float _1734 = _1731 * (_1691.z + (-0.5));
        float _1741 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1698.x + (-0.5));
        float _1743 = _1741 * (_1698.y + (-0.5));
        float _1744 = _1741 * (_1698.z + (-0.5));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = _1712 * 0.5;
        float _1749 = _1722 * 0.5;
        float _1750 = _1732 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1765 = (dot(vec3(_1344, _1345, _1346), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4887 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1775 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4898 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4909 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_1777 + 1.0))) + _1782) * _1745;
        float _1792 = _1713 * 0.5;
        float _1793 = _1723 * 0.5;
        float _1794 = _1733 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1344, _1345, _1346), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4920 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4931 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4942 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_1819 + 1.0))) + _1824) * _1746;
        float _1834 = _1714 * 0.5;
        float _1835 = _1724 * 0.5;
        float _1836 = _1734 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_1344, _1345, _1346), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4953 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4964 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4975 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_1861 + 1.0))) + _1866) * _1747;
        _1883 = _1714;
        _1885 = _1713;
        _1886 = _1712;
        _1887 = _1724;
        _1888 = _1723;
        _1889 = _1722;
        _1890 = _1734;
        _1891 = _1733;
        _1892 = _1732;
        _1893 = _1747;
        _1894 = _1746;
        _1895 = _1745;
        _1896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1884;
        _1885 = _1884;
        _1886 = _1884;
        _1887 = _1884;
        _1888 = _1884;
        _1889 = _1884;
        _1890 = _1884;
        _1891 = _1884;
        _1892 = _1884;
        _1893 = _1884;
        _1894 = _1884;
        _1895 = _1884;
        _1896 = 0.0;
        _1897 = 0.0;
        _1898 = 0.0;
    }
    float _2193;
    float _2194;
    float _2195;
    float _2196;
    float _2197;
    float _2198;
    float _2199;
    float _2200;
    float _2201;
    float _2202;
    float _2203;
    float _2204;
    float _2205;
    float _2206;
    float _2207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1924 = fma(_1582, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1574));
        float _1928 = fma(_1582, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1574));
        float _1932 = fma(_1582, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1574));
        float _1955 = _1574 + _1344;
        float _1956 = _1578 + _1345;
        float _1957 = _1582 + _1346;
        float _1967 = fma(_1957, cbModelParam._m0[30u].z, fma(_1956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1955)) - _1924;
        float _1968 = fma(_1957, cbModelParam._m0[31u].z, fma(_1956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1955)) - _1928;
        float _1969 = fma(_1957, cbModelParam._m0[32u].z, fma(_1956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1955)) - _1932;
        float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
        float _1986 = ((_1973 * _1967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1987 = ((_1973 * _1968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1988 = ((_1973 * _1969) / cbModelParam._m0[35u].z) + ((((((_1932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1986, _1987, _1988), 0.0);
        vec4 _1997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1986, _1987, _1988), 0.0);
        vec4 _2004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1986, _1987, _1988), 0.0);
        vec4 _2011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1986, _1987, _1988), 0.0);
        float _2023 = exp2((_1990.w + (-0.5)) * 20.0) * 2.0;
        float _2024 = _2023 * (_1990.x + (-0.5));
        float _2025 = _2023 * (_1990.y + (-0.5));
        float _2026 = _2023 * (_1990.z + (-0.5));
        float _2033 = exp2((_1997.w + (-0.5)) * 20.0) * 2.0;
        float _2034 = _2033 * (_1997.x + (-0.5));
        float _2035 = _2033 * (_1997.y + (-0.5));
        float _2036 = _2033 * (_1997.z + (-0.5));
        float _2043 = exp2((_2004.w + (-0.5)) * 20.0) * 2.0;
        float _2044 = _2043 * (_2004.x + (-0.5));
        float _2045 = _2043 * (_2004.y + (-0.5));
        float _2046 = _2043 * (_2004.z + (-0.5));
        float _2053 = exp2((_2011.w + (-0.5)) * 20.0) * 2.0;
        float _2054 = _2053 * (_2011.x + (-0.5));
        float _2055 = _2053 * (_2011.y + (-0.5));
        float _2056 = _2053 * (_2011.z + (-0.5));
        float _2057 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2060 = _2024 * 0.5;
        float _2061 = _2034 * 0.5;
        float _2062 = _2044 * 0.5;
        float _2063 = dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062));
        float _2068 = (_2063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2063);
        float _2076 = (dot(vec3(_1344, _1345, _1346), vec3(_2068 * _2060, _2068 * _2061, _2068 * _2062)) + 1.0) * 0.5;
        float _5016 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2085 = sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062)) / (_2057 + 9.9999997473787516355514526367188e-06);
        float _5027 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _2087 = _2086 * 2.0;
        float _2091 = (1.0 - _2086) / (_2086 + 1.0);
        float _5038 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
        float _2101 = ((((1.0 - _2092) * (_2087 + 2.0)) * exp2(log2(isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2087 + 1.0))) + _2092) * _2057;
        float _2102 = _2025 * 0.5;
        float _2103 = _2035 * 0.5;
        float _2104 = _2045 * 0.5;
        float _2105 = dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104));
        float _2110 = (_2105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2105);
        float _2118 = (dot(vec3(_1344, _1345, _1346), vec3(_2110 * _2102, _2110 * _2103, _2110 * _2104)) + 1.0) * 0.5;
        float _5049 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2127 = sqrt(((_2103 * _2103) + (_2102 * _2102)) + (_2104 * _2104)) / (_2058 + 9.9999997473787516355514526367188e-06);
        float _5060 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
        float _2129 = _2128 * 2.0;
        float _2133 = (1.0 - _2128) / (_2128 + 1.0);
        float _5071 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
        float _2143 = ((((1.0 - _2134) * (_2129 + 2.0)) * exp2(log2(isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2129 + 1.0))) + _2134) * _2058;
        float _2144 = _2026 * 0.5;
        float _2145 = _2036 * 0.5;
        float _2146 = _2046 * 0.5;
        float _2147 = dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146));
        float _2152 = (_2147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2147);
        float _2160 = (dot(vec3(_1344, _1345, _1346), vec3(_2152 * _2144, _2152 * _2145, _2152 * _2146)) + 1.0) * 0.5;
        float _5082 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2169 = sqrt(((_2145 * _2145) + (_2144 * _2144)) + (_2146 * _2146)) / (_2059 + 9.9999997473787516355514526367188e-06);
        float _5093 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
        float _2171 = _2170 * 2.0;
        float _2175 = (1.0 - _2170) / (_2170 + 1.0);
        float _5104 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
        float _2185 = ((((1.0 - _2176) * (_2171 + 2.0)) * exp2(log2(isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_2171 + 1.0))) + _2176) * _2059;
        _2193 = _2026;
        _2194 = _2025;
        _2195 = _2024;
        _2196 = _2036;
        _2197 = _2035;
        _2198 = _2034;
        _2199 = _2046;
        _2200 = _2045;
        _2201 = _2044;
        _2202 = _2059;
        _2203 = _2058;
        _2204 = _2057;
        _2205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)));
        _2206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)));
        _2207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0)));
    }
    else
    {
        _2193 = _1884;
        _2194 = _1884;
        _2195 = _1884;
        _2196 = _1884;
        _2197 = _1884;
        _2198 = _1884;
        _2199 = _1884;
        _2200 = _1884;
        _2201 = _1884;
        _2202 = _1884;
        _2203 = _1884;
        _2204 = _1884;
        _2205 = 0.0;
        _2206 = 0.0;
        _2207 = 0.0;
    }
    float _2217 = (cbModelParam._m0[1u].x * (_2205 - _1896)) + _1896;
    float _2218 = (cbModelParam._m0[1u].x * (_2206 - _1897)) + _1897;
    float _2219 = (cbModelParam._m0[1u].x * (_2207 - _1898)) + _1898;
    float _2240 = fma(_2219, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2217 * cbSceneParam._m0[89u].x));
    float _2243 = fma(_2219, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2217 * cbSceneParam._m0[90u].x));
    float _2246 = fma(_2219, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2217));
    float _2261 = _1519 * 0.5;
    float _2262 = _1520 * 0.5;
    float _2263 = _1521 * 0.5;
    float _2264 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_2195, _2198, _2201, _2204));
    float _2267 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_2194, _2197, _2200, _2203));
    float _2270 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_2193, _2196, _2199, _2202));
    float _2304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2277 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_1883, _1887, _1890, _1893));
        float _2281 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_1885, _1888, _1891, _1894));
        float _2285 = dot(vec4(_2261, _2262, _2263, 1.0), vec4(_1886, _1889, _1892, _1895));
        float _2292 = dot(vec4(cbModelParam._m0[39u]), vec4(_2261, _2262, _2263, 1.0));
        _2304 = dot(vec3(isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)), isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)), isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2292) ? 0.0 : (isnan(0.0) ? _2292 : max(0.0, _2292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2304 = 1.0;
    }
    float _2315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2306 = dot(vec4(cbModelParam._m0[40u]), vec4(_2261, _2262, _2263, 1.0));
        _2315 = dot(vec3(isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0)), isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0)), isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2306) ? 0.0 : (isnan(0.0) ? _2306 : max(0.0, _2306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2315 = 1.0;
    }
    float _2319 = (_2315 * cbModelParam._m0[1u].x) + (_2304 * (1.0 - cbModelParam._m0[1u].x));
    float _2329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1348);
    float _2330 = isnan(_2329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2329 : min(cbModelParam._m0[25u].z, _2329));
    float _2410;
    float _2412;
    float _2414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2377 = fma(_1582, cbModelParam._m0[13u].z, fma(_1578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1574)) + cbModelParam._m0[13u].w;
        float _2381 = fma(_1582, cbModelParam._m0[14u].z, fma(_1578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1574)) + cbModelParam._m0[14u].w;
        float _2385 = fma(_1582, cbModelParam._m0[15u].z, fma(_1578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1574)) + cbModelParam._m0[15u].w;
        float _2388 = fma(_1521, cbModelParam._m0[13u].z, fma(_1520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1519));
        float _2391 = fma(_1521, cbModelParam._m0[14u].z, fma(_1520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1519));
        float _2394 = fma(_1521, cbModelParam._m0[15u].z, fma(_1520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1519));
        float _2422;
        if (_2388 > 0.0)
        {
            _2422 = abs((1.0 - _2377) / _2388);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2388 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2377 + 1.0) / _2388);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2422 = frontier_phi_16_14_ladder;
        }
        float _2593;
        if (_2391 > 0.0)
        {
            _2593 = abs((1.0 - _2381) / _2391);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2391 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2381 + 1.0) / _2391);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2593 = frontier_phi_25_21_ladder;
        }
        float _2888;
        if (_2394 > 0.0)
        {
            _2888 = abs((1.0 - _2385) / _2394);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2394 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2385 + 1.0) / _2394);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2888 = frontier_phi_37_32_ladder;
        }
        float _2890 = isnan(_2593) ? _2422 : (isnan(_2422) ? _2593 : min(_2422, _2593));
        float _2891 = isnan(_2888) ? _2890 : (isnan(_2890) ? _2888 : min(_2890, _2888));
        float _2895 = (_2891 * _2388) + _2377;
        float _2896 = (_2891 * _2391) + _2381;
        float _2897 = (_2891 * _2394) + _2385;
        float _2898 = _2891 * 9.9999997473787516355514526367188e-05;
        float _2900 = (-1.0) - _2898;
        float _2902 = _2898 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2897 > _2902) || ((_2897 < _2900) || ((_2896 > _2902) || ((_2896 < _2900) || ((_2895 < _2900) || (_2895 > _2902))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2897, cbModelParam._m0[9u].z, fma(_2896, cbModelParam._m0[9u].y, _2895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2897, cbModelParam._m0[10u].z, fma(_2896, cbModelParam._m0[10u].y, _2895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2897, cbModelParam._m0[11u].z, fma(_2896, cbModelParam._m0[11u].y, _2895 * cbModelParam._m0[11u].x))), _2330);
            frontier_phi_15_37_ladder = _3042.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _3042.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _3042.z * cbModelParam._m0[1u].y;
        }
        _2410 = frontier_phi_15_37_ladder_1;
        _2412 = frontier_phi_15_37_ladder;
        _2414 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1519, _1520, _1521), _2330);
        _2410 = _2398.x * cbModelParam._m0[1u].y;
        _2412 = _2398.y * cbModelParam._m0[1u].y;
        _2414 = _2398.z * cbModelParam._m0[1u].y;
    }
    float _2418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1348);
    float _2419 = isnan(_2418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2418 : min(cbModelParam._m0[25u].w, _2418));
    float _2508;
    float _2510;
    float _2512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2472 = fma(_1582, cbModelParam._m0[21u].z, fma(_1578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1574)) + cbModelParam._m0[21u].w;
        float _2476 = fma(_1582, cbModelParam._m0[22u].z, fma(_1578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1574)) + cbModelParam._m0[22u].w;
        float _2480 = fma(_1582, cbModelParam._m0[23u].z, fma(_1578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1574)) + cbModelParam._m0[23u].w;
        float _2483 = fma(_1521, cbModelParam._m0[21u].z, fma(_1520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1519));
        float _2486 = fma(_1521, cbModelParam._m0[22u].z, fma(_1520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1519));
        float _2489 = fma(_1521, cbModelParam._m0[23u].z, fma(_1520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1519));
        float _2598;
        if (_2483 > 0.0)
        {
            _2598 = abs((1.0 - _2472) / _2483);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2483 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2472 + 1.0) / _2483);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2598 = frontier_phi_27_23_ladder;
        }
        float _2915;
        if (_2486 > 0.0)
        {
            _2915 = abs((1.0 - _2476) / _2486);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2486 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2476 + 1.0) / _2486);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2915 = frontier_phi_39_34_ladder;
        }
        float _3253;
        if (_2489 > 0.0)
        {
            _3253 = abs((1.0 - _2480) / _2489);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2489 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2480 + 1.0) / _2489);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3253 = frontier_phi_49_46_ladder;
        }
        float _3255 = isnan(_2915) ? _2598 : (isnan(_2598) ? _2915 : min(_2598, _2915));
        float _3256 = isnan(_3253) ? _3255 : (isnan(_3255) ? _3253 : min(_3255, _3253));
        float _3260 = (_3256 * _2483) + _2472;
        float _3261 = (_3256 * _2486) + _2476;
        float _3262 = (_3256 * _2489) + _2480;
        float _3263 = _3256 * 9.9999997473787516355514526367188e-05;
        float _3264 = (-1.0) - _3263;
        float _3266 = _3263 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_3262 > _3266) || ((_3262 < _3264) || ((_3261 > _3266) || ((_3261 < _3264) || ((_3260 < _3264) || (_3260 > _3266))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3262, cbModelParam._m0[17u].z, fma(_3261, cbModelParam._m0[17u].y, _3260 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3262, cbModelParam._m0[18u].z, fma(_3261, cbModelParam._m0[18u].y, _3260 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3262, cbModelParam._m0[19u].z, fma(_3261, cbModelParam._m0[19u].y, _3260 * cbModelParam._m0[19u].x))), _2419);
            frontier_phi_24_49_ladder = _3384.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _3384.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _3384.x * cbModelParam._m0[1u].z;
        }
        _2508 = frontier_phi_24_49_ladder_2;
        _2510 = frontier_phi_24_49_ladder_1;
        _2512 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1519, _1520, _1521), _2419);
        _2508 = _2492.x * cbModelParam._m0[1u].z;
        _2510 = _2492.y * cbModelParam._m0[1u].z;
        _2512 = _2492.z * cbModelParam._m0[1u].z;
    }
    float _2525 = (((_1545 * _1496) + _1546) * _1511) * ((cbModelParam._m0[1u].w * (_2508 - _2410)) + _2410);
    float _2527 = (((_1545 * _1498) + _1546) * _1511) * ((cbModelParam._m0[1u].w * (_2510 - _2412)) + _2412);
    float _2529 = (((_1545 * _1499) + _1546) * _1511) * ((cbModelParam._m0[1u].w * (_2512 - _2414)) + _2414);
    float _2532 = fma(_2529, cbSceneParam._m0[89u].z, fma(_2527, cbSceneParam._m0[89u].y, _2525 * cbSceneParam._m0[89u].x));
    float _2535 = fma(_2529, cbSceneParam._m0[90u].z, fma(_2527, cbSceneParam._m0[90u].y, _2525 * cbSceneParam._m0[90u].x));
    float _2538 = fma(_2529, cbSceneParam._m0[91u].z, fma(_2527, cbSceneParam._m0[91u].y, _2525 * cbSceneParam._m0[91u].x));
    float _2572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2585 = _2572 / _2584;
    float _2586 = _2576 / _2584;
    float _2587 = _2580 / _2584;
    float _2734;
    float _2735;
    float _2736;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2614 = ((uint(_2587 > cbSceneParam._m0[59u].y) + uint(_2587 > cbSceneParam._m0[59u].x)) + uint(_2587 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2615 = _2614 + 43u;
        uint _2623 = _2614 + 44u;
        uint _2631 = _2614 + 45u;
        uint _2639 = _2614 + 46u;
        float _2650 = fma(_2584, cbSceneParam._m0[_2615].w, fma(_2580, cbSceneParam._m0[_2615].z, fma(_2576, cbSceneParam._m0[_2615].y, _2572 * cbSceneParam._m0[_2615].x)));
        float _2654 = fma(_2584, cbSceneParam._m0[_2623].w, fma(_2580, cbSceneParam._m0[_2623].z, fma(_2576, cbSceneParam._m0[_2623].y, _2572 * cbSceneParam._m0[_2623].x)));
        float _2662 = fma(_2584, cbSceneParam._m0[_2639].w, fma(_2580, cbSceneParam._m0[_2639].z, fma(_2576, cbSceneParam._m0[_2639].y, _2572 * cbSceneParam._m0[_2639].x)));
        float _2667 = cbSceneParam._m0[33u].z * _2662;
        float _2669 = cbSceneParam._m0[33u].w * _2662;
        float _2672 = fma(_2584, cbSceneParam._m0[_2631].w, fma(_2580, cbSceneParam._m0[_2631].z, fma(_2576, cbSceneParam._m0[_2631].y, _2572 * cbSceneParam._m0[_2631].x))) / _2662;
        float _2720 = (cbSceneParam._m0[33u].x - sqrt(((_2586 * _2586) + (_2585 * _2585)) + (_2587 * _2587))) * cbSceneParam._m0[33u].y;
        float _5230 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2727 = (isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2667 + _2650) / _2662, (_2669 + _2654) / _2662), _2672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2669 + _2650) / _2662, (_2654 - _2667) / _2662), _2672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2650 - _2667) / _2662, (_2654 - _2669) / _2662), _2672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2650 - _2669) / _2662, (_2667 + _2654) / _2662), _2672), 0.0)).x), vec4(0.25)));
        _2734 = 1.0 - (_2727 * cbSceneParam._m0[34u].x);
        _2735 = 1.0 - (_2727 * cbSceneParam._m0[34u].y);
        _2736 = 1.0 - (_2727 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2734 = 1.0;
        _2735 = 1.0;
        _2736 = 1.0;
    }
    float _2800;
    float _2802;
    float _2804;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2788 = fma(_2584, cbSceneParam._m0[63u].w, fma(_2580, cbSceneParam._m0[63u].z, fma(_2576, cbSceneParam._m0[63u].y, _2572 * cbSceneParam._m0[63u].x)));
        float _2789 = fma(_2584, cbSceneParam._m0[60u].w, fma(_2580, cbSceneParam._m0[60u].z, fma(_2576, cbSceneParam._m0[60u].y, _2572 * cbSceneParam._m0[60u].x))) / _2788;
        float _2790 = fma(_2584, cbSceneParam._m0[61u].w, fma(_2580, cbSceneParam._m0[61u].z, fma(_2576, cbSceneParam._m0[61u].y, _2572 * cbSceneParam._m0[61u].x))) / _2788;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2789 >= cbSceneParam._m0[64u].x) && (_2790 >= cbSceneParam._m0[64u].y)) && (_2789 <= cbSceneParam._m0[64u].z)) && (_2790 <= cbSceneParam._m0[64u].w))
        {
            float _2928 = fma(_2584, cbSceneParam._m0[62u].w, fma(_2580, cbSceneParam._m0[62u].z, fma(_2576, cbSceneParam._m0[62u].y, _2572 * cbSceneParam._m0[62u].x))) / _2788;
            float _2932 = isnan(cbSceneParam._m0[41u].w) ? _2928 : (isnan(_2928) ? cbSceneParam._m0[41u].w : max(_2928, cbSceneParam._m0[41u].w));
            float _2975 = (cbSceneParam._m0[33u].x - sqrt(((_2586 * _2586) + (_2585 * _2585)) + (_2587 * _2587))) * cbSceneParam._m0[33u].y;
            float _5246 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
            float _2982 = (isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2789, cbSceneParam._m0[33u].w + _2790), _2932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2789, _2790 - cbSceneParam._m0[33u].z), _2932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2789 - cbSceneParam._m0[33u].z, _2790 - cbSceneParam._m0[33u].w), _2932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2789 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2790), _2932), 0.0)).x), vec4(0.25)));
            float _2986 = 1.0 - (_2982 * cbSceneParam._m0[34u].x);
            float _2987 = 1.0 - (_2982 * cbSceneParam._m0[34u].y);
            float _2988 = 1.0 - (_2982 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2987) ? _2735 : (isnan(_2735) ? _2987 : min(_2735, _2987));
            frontier_phi_36_35_ladder_1 = isnan(_2988) ? _2736 : (isnan(_2736) ? _2988 : min(_2736, _2988));
            frontier_phi_36_35_ladder_2 = isnan(_2986) ? _2734 : (isnan(_2734) ? _2986 : min(_2734, _2986));
        }
        else
        {
            frontier_phi_36_35_ladder = _2735;
            frontier_phi_36_35_ladder_1 = _2736;
            frontier_phi_36_35_ladder_2 = _2734;
        }
        _2800 = frontier_phi_36_35_ladder_2;
        _2802 = frontier_phi_36_35_ladder;
        _2804 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2800 = _2734;
        _2802 = _2735;
        _2804 = _2736;
    }
    uvec4 _2809 = floatBitsToUint(cbInstanceData._m0[_1471 + 5u]);
    uint _2811 = _2809.x * 14u;
    uint _2812 = _2811 + 13u;
    float _2819 = _1511 + (-1.0);
    float _2824 = (cbLight._m0[_2812].x * _2819) + 1.0;
    float _2825 = (cbLight._m0[_2812].y * _2819) + 1.0;
    float _2826 = (cbLight._m0[_2812].z * _2819) + 1.0;
    float _2827 = (cbLight._m0[_2812].w * _2819) + 1.0;
    uint _2828 = _2811 + 5u;
    float _2834 = isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0));
    uint _2838 = _2811 + 4u;
    float _2847 = isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0));
    uint _2851 = _2811 | 1u;
    float _2862 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_1344, _1345, _1346));
    float _2865 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_1344, _1345, _1346));
    float _5282 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _5293 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
    float _2870 = (isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0))) * 0.3183098733425140380859375;
    float _2872 = (isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0))) * 0.3183098733425140380859375;
    float _2879 = ((cbLight._m0[_2828].x * _2834) * _2872) + (((cbLight._m0[_2838].x * _2800) * _2847) * _2870);
    float _2880 = ((_2834 * cbLight._m0[_2828].y) * _2872) + (((cbLight._m0[_2838].y * _2802) * _2847) * _2870);
    float _2881 = ((_2834 * cbLight._m0[_2828].z) * _2872) + (((cbLight._m0[_2838].z * _2804) * _2847) * _2870);
    uvec4 _2885 = floatBitsToUint(cbLight._m0[_2811 + 12u]);
    bool _2887 = _2885.x == 0u;
    float _2989;
    float _2991;
    float _2993;
    if (_2887)
    {
        _2989 = _2879;
        _2991 = _2880;
        _2993 = _2881;
    }
    else
    {
        uint _2997 = _2811 + 6u;
        float _3013 = (dot(vec3(cbLight._m0[_2811 + 2u].xyz), vec3(_1344, _1345, _1346)) * 0.5) + 0.5;
        float _3014 = _3013 * _3013;
        float _5304 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3015 = isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0));
        float _3016 = isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0));
        _2989 = (((cbLight._m0[_2997].x * 0.3183098733425140380859375) * _3015) * _3016) + _2879;
        _2991 = (((cbLight._m0[_2997].y * 0.3183098733425140380859375) * _3015) * _3016) + _2880;
        _2993 = (((cbLight._m0[_2997].z * 0.3183098733425140380859375) * _3015) * _3016) + _2881;
    }
    bool _2996 = _2885.y == 0u;
    float _3051;
    float _3053;
    float _3055;
    if (_2996)
    {
        _3051 = _2989;
        _3053 = _2991;
        _3055 = _2993;
    }
    else
    {
        uint _3224 = _2811 + 7u;
        float _3240 = (dot(vec3(cbLight._m0[_2811 + 3u].xyz), vec3(_1344, _1345, _1346)) * 0.5) + 0.5;
        float _3241 = _3240 * _3240;
        float _5320 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        float _3242 = isnan(1.0) ? _5320 : (isnan(_5320) ? 1.0 : min(_5320, 1.0));
        float _3243 = isnan(1.0) ? _2827 : (isnan(_2827) ? 1.0 : min(_2827, 1.0));
        _3051 = (((cbLight._m0[_3224].x * 0.3183098733425140380859375) * _3242) * _3243) + _2989;
        _3053 = (((cbLight._m0[_3224].y * 0.3183098733425140380859375) * _3242) * _3243) + _2991;
        _3055 = (((cbLight._m0[_3224].z * 0.3183098733425140380859375) * _3242) * _3243) + _2993;
    }
    uint _3058 = _2811 + 8u;
    float _3071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _1348) * 0.949999988079071044921875);
    float _3072 = _3071 * _3071;
    float _3073 = cbLight._m0[_2811].x + _1425;
    float _3074 = cbLight._m0[_2811].y + _1426;
    float _3075 = cbLight._m0[_2811].z + _1427;
    float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
    float _3080 = _3079 * _3073;
    float _3081 = _3079 * _3074;
    float _3082 = _3079 * _3075;
    float _3083 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_2811].xyz));
    float _5336 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
    float _3086 = isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0));
    float _5347 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _3087 = isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0));
    float _3088 = dot(vec3(_1344, _1345, _1346), vec3(_3080, _3081, _3082));
    float _5358 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
    float _3091 = isnan(1.0) ? _5358 : (isnan(_5358) ? 1.0 : min(_5358, 1.0));
    float _3092 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_3080, _3081, _3082));
    float _5369 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
    float _3096 = _3072 * _3072;
    float _3100 = ((_3091 * _3091) * (_3096 + (-1.0))) + 1.0;
    float _3108 = exp2(log2(1.0 - (isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0)))) * 5.0);
    float _3109 = 0.959999978542327880859375 - _1493;
    float _3111 = 0.959999978542327880859375 - _1494;
    float _3112 = 0.959999978542327880859375 - _1495;
    float _3119 = 1.0 - _3072;
    float _3130 = (0.5 / (((_3087 * ((_3086 * _3119) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3119) + _3072) * _3086))) * _3086;
    float _5380 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
    float _3132 = (isnan(1.0) ? _5380 : (isnan(_5380) ? 1.0 : min(_5380, 1.0))) * (_3096 / ((_3100 * _3100) * 3.141590118408203125));
    uint _3146 = _2811 + 9u;
    float _3157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _1348) * 0.949999988079071044921875);
    float _3158 = _3157 * _3157;
    float _3159 = cbLight._m0[_2851].x + _1425;
    float _3160 = cbLight._m0[_2851].y + _1426;
    float _3161 = cbLight._m0[_2851].z + _1427;
    float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
    float _3166 = _3165 * _3159;
    float _3167 = _3165 * _3160;
    float _3168 = _3165 * _3161;
    float _3169 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_2851].xyz));
    float _5391 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
    float _3172 = isnan(1.0) ? _5391 : (isnan(_5391) ? 1.0 : min(_5391, 1.0));
    float _3173 = dot(vec3(_1344, _1345, _1346), vec3(_3166, _3167, _3168));
    float _5402 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
    float _3176 = isnan(1.0) ? _5402 : (isnan(_5402) ? 1.0 : min(_5402, 1.0));
    float _3177 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_3166, _3167, _3168));
    float _5413 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
    float _3181 = _3158 * _3158;
    float _3185 = ((_3176 * _3176) * (_3181 + (-1.0))) + 1.0;
    float _3192 = exp2(log2(1.0 - (isnan(1.0) ? _5413 : (isnan(_5413) ? 1.0 : min(_5413, 1.0)))) * 5.0);
    float _3199 = 1.0 - _3158;
    float _3209 = (0.5 / (((_3087 * ((_3172 * _3199) + _3158)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3199) + _3158) * _3172))) * _3172;
    float _5424 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
    float _3211 = (isnan(1.0) ? _5424 : (isnan(_5424) ? 1.0 : min(_5424, 1.0))) * (_3181 / ((_3185 * _3185) * 3.141590118408203125));
    float _3221 = (((((_3192 * _3109) + _1496) * cbLight._m0[_3146].x) * _3211) * _2834) + ((((cbLight._m0[_3058].x * _2800) * ((_3108 * _3109) + _1496)) * _3132) * _2847);
    float _3222 = (((((_3192 * _3111) + _1498) * cbLight._m0[_3146].y) * _3211) * _2834) + ((((cbLight._m0[_3058].y * _2802) * ((_3108 * _3111) + _1498)) * _3132) * _2847);
    float _3223 = (((((_3192 * _3112) + _1499) * cbLight._m0[_3146].z) * _3211) * _2834) + ((((cbLight._m0[_3058].z * _2804) * ((_3108 * _3112) + _1499)) * _3132) * _2847);
    float _3279;
    float _3281;
    float _3283;
    if (_2887)
    {
        _3279 = _3221;
        _3281 = _3222;
        _3283 = _3223;
    }
    else
    {
        uint _3285 = _2811 + 2u;
        uint _3289 = _2811 + 10u;
        float _3303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3285].w)) * _1348) * 0.949999988079071044921875);
        float _3304 = _3303 * _3303;
        float _3305 = cbLight._m0[_3285].x + _1425;
        float _3306 = cbLight._m0[_3285].y + _1426;
        float _3307 = cbLight._m0[_3285].z + _1427;
        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
        float _3312 = _3311 * _3305;
        float _3313 = _3311 * _3306;
        float _3314 = _3311 * _3307;
        float _3315 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_3285].xyz));
        float _5435 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
        float _3318 = isnan(1.0) ? _5435 : (isnan(_5435) ? 1.0 : min(_5435, 1.0));
        float _3319 = dot(vec3(_1344, _1345, _1346), vec3(_3312, _3313, _3314));
        float _5446 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
        float _3322 = isnan(1.0) ? _5446 : (isnan(_5446) ? 1.0 : min(_5446, 1.0));
        float _3323 = dot(vec3(cbLight._m0[_3285].xyz), vec3(_3312, _3313, _3314));
        float _5457 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
        float _3327 = _3304 * _3304;
        float _3331 = ((_3322 * _3322) * (_3327 + (-1.0))) + 1.0;
        float _3338 = exp2(log2(1.0 - (isnan(1.0) ? _5457 : (isnan(_5457) ? 1.0 : min(_5457, 1.0)))) * 5.0);
        float _3345 = 1.0 - _3304;
        float _3355 = (0.5 / (((_3087 * ((_3318 * _3345) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3345) + _3304) * _3318))) * _3318;
        float _5468 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
        float _3357 = (isnan(1.0) ? _5468 : (isnan(_5468) ? 1.0 : min(_5468, 1.0))) * (_3327 / ((_3331 * _3331) * 3.141590118408203125));
        float _3358 = isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0));
        _3279 = (((((_3338 * _3109) + _1496) * cbLight._m0[_3289].x) * _3357) * _3358) + _3221;
        _3281 = (((((_3338 * _3111) + _1498) * cbLight._m0[_3289].y) * _3357) * _3358) + _3222;
        _3283 = (((((_3338 * _3112) + _1499) * cbLight._m0[_3289].z) * _3357) * _3358) + _3223;
    }
    float _3389;
    float _3391;
    float _3393;
    if (_2996)
    {
        _3389 = _3279;
        _3391 = _3281;
        _3393 = _3283;
    }
    else
    {
        uint _3400 = _2811 + 3u;
        uint _3404 = _2811 + 11u;
        float _3418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3400].w)) * _1348) * 0.949999988079071044921875);
        float _3419 = _3418 * _3418;
        float _3420 = cbLight._m0[_3400].x + _1425;
        float _3421 = cbLight._m0[_3400].y + _1426;
        float _3422 = cbLight._m0[_3400].z + _1427;
        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
        float _3427 = _3426 * _3420;
        float _3428 = _3426 * _3421;
        float _3429 = _3426 * _3422;
        float _3430 = dot(vec3(_1344, _1345, _1346), vec3(cbLight._m0[_3400].xyz));
        float _5484 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
        float _3433 = isnan(1.0) ? _5484 : (isnan(_5484) ? 1.0 : min(_5484, 1.0));
        float _3434 = dot(vec3(_1344, _1345, _1346), vec3(_3427, _3428, _3429));
        float _5495 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
        float _3437 = isnan(1.0) ? _5495 : (isnan(_5495) ? 1.0 : min(_5495, 1.0));
        float _3438 = dot(vec3(cbLight._m0[_3400].xyz), vec3(_3427, _3428, _3429));
        float _5506 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
        float _3442 = _3419 * _3419;
        float _3446 = ((_3437 * _3437) * (_3442 + (-1.0))) + 1.0;
        float _3453 = exp2(log2(1.0 - (isnan(1.0) ? _5506 : (isnan(_5506) ? 1.0 : min(_5506, 1.0)))) * 5.0);
        float _3460 = 1.0 - _3419;
        float _3470 = (0.5 / (((_3087 * ((_3433 * _3460) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3460) + _3419) * _3433))) * _3433;
        float _5517 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
        float _3472 = (isnan(1.0) ? _5517 : (isnan(_5517) ? 1.0 : min(_5517, 1.0))) * (_3442 / ((_3446 * _3446) * 3.141590118408203125));
        float _3473 = isnan(1.0) ? _2827 : (isnan(_2827) ? 1.0 : min(_2827, 1.0));
        _3389 = (((((_3453 * _3109) + _1496) * cbLight._m0[_3404].x) * _3472) * _3473) + _3279;
        _3391 = (((((_3453 * _3111) + _1498) * cbLight._m0[_3404].y) * _3472) * _3473) + _3281;
        _3393 = (((((_3453 * _3112) + _1499) * cbLight._m0[_3404].z) * _3472) * _3473) + _3283;
    }
    float _3538;
    float _3540;
    float _3542;
    float _3544;
    float _3546;
    float _3548;
    if (_2809.y == 0u)
    {
        uvec4 _3494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3495 = _3494.x;
        uint _3506 = uint((float(_3494.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1434) / _3495))) + floor(float(uint(cbSceneParam._m0[85u].x * _1433) / _3495)));
        float _3516 = (log2(_2587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3517 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
        uint _3520 = uint(isnan(14.0) ? _3517 : (isnan(_3517) ? 14.0 : min(_3517, 14.0)));
        uvec4 _3525 = texelFetch(g_lightClusterGridBuffer, int(((_3520 << 2u) + (_3506 << 6u)) >> 2u));
        uint _3526 = _3525.x;
        uint _3527 = _3494.z;
        float _3626;
        float _3628;
        float _3630;
        float _3632;
        float _3634;
        float _3636;
        if (((((1u << ((_3527 >> 4u) & 15u)) + 4294967295u) & _3526) == 0u) || ((_3527 & 240u) == 0u))
        {
            _3626 = 0.0;
            _3628 = 0.0;
            _3630 = 0.0;
            _3632 = 0.0;
            _3634 = 0.0;
            _3636 = 0.0;
        }
        else
        {
            float _3627;
            float _3629;
            float _3631;
            float _3633;
            float _3635;
            float _3637;
            float _3770 = 0.0;
            float _3771 = 0.0;
            float _3772 = 0.0;
            float _3773 = 0.0;
            float _3774 = 0.0;
            float _3775 = 0.0;
            uint _3776 = 0u;
            uint _3785;
            bool _3786;
            for (;;)
            {
                _3785 = texelFetch(g_lightClassification, int((((_3520 << 5u) + (_3506 << 9u)) + (_3776 << 2u)) >> 2u)).x;
                _3786 = _3785 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3786)
                {
                    frontier_phi_68_pred = _3775;
                    frontier_phi_68_pred_1 = _3774;
                    frontier_phi_68_pred_2 = _3773;
                    frontier_phi_68_pred_3 = _3771;
                    frontier_phi_68_pred_4 = _3770;
                    frontier_phi_68_pred_5 = _3772;
                }
                else
                {
                    float _3894;
                    float _3895;
                    float _3896;
                    float _3897;
                    float _3898;
                    float _3899;
                    uint _3900;
                    _3894 = _3770;
                    _3895 = _3771;
                    _3896 = _3772;
                    _3897 = _3773;
                    _3898 = _3774;
                    _3899 = _3775;
                    _3900 = _3785;
                    float _3826;
                    float _3827;
                    float _3828;
                    float _3829;
                    float _3830;
                    float _3831;
                    for (;;)
                    {
                        uint _3904 = uint(findLSB(_3900)) + (_3776 << 5u);
                        uint _3901 = (_3900 + 4294967295u) & _3900;
                        uint _3906 = _3904 * 48u;
                        vec4 _3920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3906)).x, texelFetch(g_PointLightRenderingBuffer, int(_3906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3906 + 3u)).x));
                        uint _3926 = (_3904 * 48u) + 4u;
                        vec4 _3939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3926)).x, texelFetch(g_PointLightRenderingBuffer, int(_3926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3926 + 3u)).x));
                        uint _3945 = (_3904 * 48u) + 8u;
                        vec3 _3956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3945)).x, texelFetch(g_PointLightRenderingBuffer, int(_3945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3945 + 2u)).x));
                        float _3960 = _3920.x - _2585;
                        float _3961 = _3920.y - _2586;
                        float _3962 = _3920.z - _2587;
                        float _3963 = dot(vec3(_3960, _3961, _3962), vec3(_3960, _3961, _3962));
                        float _3966 = inversesqrt(_3963);
                        float _3967 = _3966 * _3960;
                        float _3968 = _3966 * _3961;
                        float _3969 = _3966 * _3962;
                        float _3970 = dot(vec3(_1452, _1455, _1458), vec3(_3967, _3968, _3969));
                        float _3975 = 1.0 - (_3963 * _3920.w);
                        float _5543 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                        float _3976 = isnan(1.0) ? _5543 : (isnan(_5543) ? 1.0 : min(_5543, 1.0));
                        float _3977 = sqrt(_3963) * _3939.w;
                        float _3979 = 1.39999997615814208984375 / (_3977 + 1.39999997615814208984375);
                        float _3980 = _3979 * _3979;
                        float _3983 = ((1.0 - _3980) * _3970) + _3980;
                        float _3986 = _3977 * _3977;
                        float _3990 = ((isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0))) * _3976) / ((_3986 * 0.699999988079071044921875) + 1.0);
                        float _3994 = (-0.0) - _2585;
                        float _3995 = (-0.0) - _2586;
                        float _3996 = (-0.0) - _2587;
                        float _4000 = inversesqrt(dot(vec3(_3994, _3995, _3996), vec3(_3994, _3995, _3996)));
                        float _4001 = _4000 * _3994;
                        float _4002 = _4000 * _3995;
                        float _4003 = _4000 * _3996;
                        float _4010 = exp2(log2(1.0 / ((_3986 * 3.5) + 5.0)) * 0.25);
                        float _4011 = 1.0 - _1527;
                        float _4018 = sqrt(1.0 - ((1.0 - (_4011 * _4011)) * (1.0 - (_4010 * _4010))));
                        float _4019 = _4018 * _4018;
                        float _4020 = _4019 * _4019;
                        float _4021 = _4001 + _3967;
                        float _4022 = _4002 + _3968;
                        float _4023 = _4003 + _3969;
                        float _4027 = inversesqrt(dot(vec3(_4021, _4022, _4023), vec3(_4021, _4022, _4023)));
                        float _4031 = dot(vec3(_1452, _1455, _1458), vec3(_4001, _4002, _4003));
                        float _5559 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                        float _4034 = isnan(1.0) ? _5559 : (isnan(_5559) ? 1.0 : min(_5559, 1.0));
                        float _4035 = dot(vec3(_1452, _1455, _1458), vec3(_4027 * _4021, _4027 * _4022, _4027 * _4023));
                        float _5570 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                        float _4038 = isnan(1.0) ? _5570 : (isnan(_5570) ? 1.0 : min(_5570, 1.0));
                        float _4042 = ((_4038 * _4038) * (_4020 + (-1.0))) + 1.0;
                        float _4043 = _3979 * _4019;
                        float _4044 = _4043 * _4043;
                        float _4047 = ((1.0 - _4044) * _3970) + _4044;
                        float _5581 = isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0));
                        float _4048 = isnan(1.0) ? _5581 : (isnan(_5581) ? 1.0 : min(_5581, 1.0));
                        float _4049 = 1.0 - _4019;
                        float _4059 = (0.5 / (((_4048 * ((_4034 * _4049) + _4019)) + 9.9999999392252902907785028219223e-09) + (((_4048 * _4049) + _4019) * _4034))) * _4048;
                        float _5592 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                        float _4070 = (((_4020 * 3.1415927410125732421875) * (isnan(1.0) ? _5592 : (isnan(_5592) ? 1.0 : min(_5592, 1.0)))) / ((_4042 * _4042) * ((_3986 * 2.1991131305694580078125) + 3.141590118408203125))) * _3976;
                        _3829 = (_3990 * _3939.x) + _3897;
                        _3830 = (_3990 * _3939.y) + _3898;
                        _3831 = (_3990 * _3939.z) + _3899;
                        _3826 = (_4070 * _3956.x) + _3894;
                        _3827 = (_4070 * _3956.y) + _3895;
                        _3828 = (_4070 * _3956.z) + _3896;
                        if (_3901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3894 = _3826;
                            _3895 = _3827;
                            _3896 = _3828;
                            _3897 = _3829;
                            _3898 = _3830;
                            _3899 = _3831;
                            _3900 = _3901;
                        }
                    }
                    frontier_phi_68_pred = _3831;
                    frontier_phi_68_pred_1 = _3830;
                    frontier_phi_68_pred_2 = _3829;
                    frontier_phi_68_pred_3 = _3827;
                    frontier_phi_68_pred_4 = _3826;
                    frontier_phi_68_pred_5 = _3828;
                }
                _3637 = frontier_phi_68_pred;
                _3635 = frontier_phi_68_pred_1;
                _3633 = frontier_phi_68_pred_2;
                _3629 = frontier_phi_68_pred_3;
                _3627 = frontier_phi_68_pred_4;
                _3631 = frontier_phi_68_pred_5;
                uint _3777 = _3776 + 1u;
                if (_3777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3770 = _3627;
                    _3771 = _3629;
                    _3772 = _3631;
                    _3773 = _3633;
                    _3774 = _3635;
                    _3775 = _3637;
                    _3776 = _3777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3626 = _3627;
            _3628 = _3629;
            _3630 = _3631;
            _3632 = _3633;
            _3634 = _3635;
            _3636 = _3637;
        }
        uvec4 _3640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3641 = _3640.z;
        uint _3643 = (_3641 >> 8u) & 15u;
        float _3738;
        float _3740;
        float _3742;
        float _3744;
        float _3746;
        float _3748;
        if (((4294967295u << _3643) & _3526) == 0u)
        {
            _3738 = _3626;
            _3740 = _3628;
            _3742 = _3630;
            _3744 = _3632;
            _3746 = _3634;
            _3748 = _3636;
        }
        else
        {
            float _3763 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
            float _3764 = _3763 * _2585;
            float _3765 = _3763 * _2586;
            float _3766 = _3763 * _2587;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3643 < ((_3641 >> 12u) & 15u))
            {
                float _3739;
                float _3741;
                float _3743;
                float _3745;
                float _3747;
                float _3749;
                float _3877 = _3626;
                float _3878 = _3628;
                float _3879 = _3630;
                float _3880 = _3632;
                float _3881 = _3634;
                float _3882 = _3636;
                uint _3883 = _3643;
                uint _3892;
                bool _3893;
                for (;;)
                {
                    _3892 = texelFetch(g_lightClassification, int((((_3520 << 5u) + (_3506 << 9u)) + (_3883 << 2u)) >> 2u)).x;
                    _3893 = _3892 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3893)
                    {
                        frontier_phi_74_pred = _3879;
                        frontier_phi_74_pred_1 = _3878;
                        frontier_phi_74_pred_2 = _3877;
                        frontier_phi_74_pred_3 = _3882;
                        frontier_phi_74_pred_4 = _3881;
                        frontier_phi_74_pred_5 = _3880;
                    }
                    else
                    {
                        float _4075;
                        float _4076;
                        float _4077;
                        float _4078;
                        float _4079;
                        float _4080;
                        float _4368;
                        float _4369;
                        float _4370;
                        float _4371;
                        float _4372;
                        float _4373;
                        float _4088 = _3877;
                        float _4089 = _3878;
                        float _4090 = _3879;
                        float _4091 = _3880;
                        float _4092 = _3881;
                        float _4093 = _3882;
                        uint _4094 = _3892;
                        uint _4095;
                        vec4 _4120;
                        float _4121;
                        vec4 _4136;
                        vec3 _4148;
                        vec4 _4163;
                        vec4 _4178;
                        float _4224;
                        bool _4225;
                        for (;;)
                        {
                            uint _4105 = ((_3883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4094));
                            _4095 = (_4094 + 4294967295u) & _4094;
                            uint _4107 = _4105 * 40u;
                            _4120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4107 + 3u)).x));
                            _4121 = _4120.w;
                            uint _4123 = (_4105 * 40u) + 4u;
                            _4136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4123 + 3u)).x));
                            uint _4138 = (_4105 * 40u) + 8u;
                            _4148 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4138 + 2u)).x));
                            uint _4150 = (_4105 * 40u) + 16u;
                            _4163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4150 + 3u)).x));
                            uint _4165 = (_4105 * 40u) + 20u;
                            _4178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4165 + 3u)).x));
                            uint _4180 = (_4105 * 40u) + 24u;
                            vec4 _4193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4180 + 3u)).x));
                            uint _4199 = (_4105 * 40u) + 28u;
                            vec4 _4212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4199 + 3u)).x));
                            _4224 = fma(_2587, _4212.z, fma(_2586, _4212.y, _4212.x * _2585)) + _4212.w;
                            _4225 = !((fma(_2587, _4193.z, fma(_2586, _4193.y, _4193.x * _2585)) + _4193.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_4225)
                            {
                                float _4252 = _4120.x - _2585;
                                float _4253 = _4120.y - _2586;
                                float _4254 = _4120.z - _2587;
                                float _4255 = dot(vec3(_4252, _4253, _4254), vec3(_4252, _4253, _4254));
                                float _4258 = inversesqrt(_4255);
                                float _4259 = _4258 * _4252;
                                float _4260 = _4258 * _4253;
                                float _4261 = _4258 * _4254;
                                float _4265 = 1.0 - (_4255 / (_4121 * _4121));
                                float _5603 = isnan(0.0) ? _4265 : (isnan(_4265) ? 0.0 : max(_4265, 0.0));
                                float _4266 = isnan(1.0) ? _5603 : (isnan(_5603) ? 1.0 : min(_5603, 1.0));
                                float _4270 = sqrt(_4255) * _4136.w;
                                float _4272 = 1.39999997615814208984375 / (_4270 + 1.39999997615814208984375);
                                float _4273 = _4272 * _4272;
                                float _4276 = ((1.0 - _4273) * dot(vec3(_4259, _4260, _4261), vec3(_1452, _1455, _1458))) + _4273;
                                float _4279 = _4270 * _4270;
                                float _4283 = (fma(_2587, _4163.z, fma(_2586, _4163.y, _4163.x * _2585)) + _4163.w) / _4224;
                                float _4284 = (fma(_2587, _4178.z, fma(_2586, _4178.y, _4178.x * _2585)) + _4178.w) / _4224;
                                float _4288 = 1.0 - dot(vec2(_4283, _4284), vec2(_4283, _4284));
                                float _5619 = isnan(0.0) ? _4288 : (isnan(_4288) ? 0.0 : max(_4288, 0.0));
                                float _4289 = isnan(1.0) ? _5619 : (isnan(_5619) ? 1.0 : min(_5619, 1.0));
                                float _4290 = _4289 * (((isnan(0.0) ? _4276 : (isnan(_4276) ? 0.0 : max(_4276, 0.0))) * _4266) / ((_4279 * 0.699999988079071044921875) + 1.0));
                                float _4302 = exp2(log2(1.0 / ((_4279 * 3.5) + 5.0)) * 0.25);
                                float _4303 = 1.0 - _1527;
                                float _4310 = sqrt(1.0 - ((1.0 - (_4303 * _4303)) * (1.0 - (_4302 * _4302))));
                                float _4311 = _4310 * _4310;
                                float _4312 = _4311 * _4311;
                                float _4313 = _4259 - _3764;
                                float _4314 = _4260 - _3765;
                                float _4315 = _4261 - _3766;
                                float _4319 = inversesqrt(dot(vec3(_4313, _4314, _4315), vec3(_4313, _4314, _4315)));
                                float _4323 = dot(vec3(_1452, _1455, _1458), vec3((-0.0) - _3764, (-0.0) - _3765, (-0.0) - _3766));
                                float _5630 = isnan(0.0) ? _4323 : (isnan(_4323) ? 0.0 : max(_4323, 0.0));
                                float _4326 = isnan(1.0) ? _5630 : (isnan(_5630) ? 1.0 : min(_5630, 1.0));
                                float _4327 = dot(vec3(_1452, _1455, _1458), vec3(_4319 * _4313, _4319 * _4314, _4319 * _4315));
                                float _5641 = isnan(0.0) ? _4327 : (isnan(_4327) ? 0.0 : max(_4327, 0.0));
                                float _4330 = isnan(1.0) ? _5641 : (isnan(_5641) ? 1.0 : min(_5641, 1.0));
                                float _4334 = ((_4330 * _4330) * (_4312 + (-1.0))) + 1.0;
                                float _4335 = _4272 * _4311;
                                float _4336 = _4335 * _4335;
                                float _4342 = ((1.0 - _4336) * dot(vec3(_1452, _1455, _1458), vec3(_4259, _4260, _4261))) + _4336;
                                float _5652 = isnan(0.0) ? _4342 : (isnan(_4342) ? 0.0 : max(_4342, 0.0));
                                float _4343 = isnan(1.0) ? _5652 : (isnan(_5652) ? 1.0 : min(_5652, 1.0));
                                float _4344 = 1.0 - _4311;
                                float _4354 = (0.5 / (((_4343 * ((_4326 * _4344) + _4311)) + 9.9999999392252902907785028219223e-09) + (((_4343 * _4344) + _4311) * _4326))) * _4343;
                                float _5663 = isnan(0.0) ? _4354 : (isnan(_4354) ? 0.0 : max(_4354, 0.0));
                                float _4364 = (_4289 * _4266) * (((_4312 * 3.1415927410125732421875) * (isnan(1.0) ? _5663 : (isnan(_5663) ? 1.0 : min(_5663, 1.0)))) / ((_4334 * _4334) * ((_4279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4364 * _4148.z;
                                frontier_phi_80_pred_1 = _4364 * _4148.y;
                                frontier_phi_80_pred_2 = _4364 * _4148.x;
                                frontier_phi_80_pred_3 = _4290 * _4136.z;
                                frontier_phi_80_pred_4 = _4290 * _4136.y;
                                frontier_phi_80_pred_5 = _4290 * _4136.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4370 = frontier_phi_80_pred;
                            _4369 = frontier_phi_80_pred_1;
                            _4368 = frontier_phi_80_pred_2;
                            _4373 = frontier_phi_80_pred_3;
                            _4372 = frontier_phi_80_pred_4;
                            _4371 = frontier_phi_80_pred_5;
                            _4078 = _4371 + _4091;
                            _4079 = _4372 + _4092;
                            _4080 = _4373 + _4093;
                            _4075 = _4368 + _4088;
                            _4076 = _4369 + _4089;
                            _4077 = _4370 + _4090;
                            if (_4095 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4088 = _4075;
                                _4089 = _4076;
                                _4090 = _4077;
                                _4091 = _4078;
                                _4092 = _4079;
                                _4093 = _4080;
                                _4094 = _4095;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _4077;
                        frontier_phi_74_pred_1 = _4076;
                        frontier_phi_74_pred_2 = _4075;
                        frontier_phi_74_pred_3 = _4080;
                        frontier_phi_74_pred_4 = _4079;
                        frontier_phi_74_pred_5 = _4078;
                    }
                    _3743 = frontier_phi_74_pred;
                    _3741 = frontier_phi_74_pred_1;
                    _3739 = frontier_phi_74_pred_2;
                    _3749 = frontier_phi_74_pred_3;
                    _3747 = frontier_phi_74_pred_4;
                    _3745 = frontier_phi_74_pred_5;
                    uint _3884 = _3883 + 1u;
                    if (_3884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3877 = _3739;
                        _3878 = _3741;
                        _3879 = _3743;
                        _3880 = _3745;
                        _3881 = _3747;
                        _3882 = _3749;
                        _3883 = _3884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3747;
                frontier_phi_62_63_ladder_1 = _3745;
                frontier_phi_62_63_ladder_2 = _3743;
                frontier_phi_62_63_ladder_3 = _3749;
                frontier_phi_62_63_ladder_4 = _3741;
                frontier_phi_62_63_ladder_5 = _3739;
            }
            else
            {
                frontier_phi_62_63_ladder = _3634;
                frontier_phi_62_63_ladder_1 = _3632;
                frontier_phi_62_63_ladder_2 = _3630;
                frontier_phi_62_63_ladder_3 = _3636;
                frontier_phi_62_63_ladder_4 = _3628;
                frontier_phi_62_63_ladder_5 = _3626;
            }
            _3738 = frontier_phi_62_63_ladder_5;
            _3740 = frontier_phi_62_63_ladder_4;
            _3742 = frontier_phi_62_63_ladder_2;
            _3744 = frontier_phi_62_63_ladder_1;
            _3746 = frontier_phi_62_63_ladder;
            _3748 = frontier_phi_62_63_ladder_3;
        }
        float _3753 = isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0));
        _3538 = (_3753 * _3744) + _3051;
        _3540 = (_3753 * _3746) + _3053;
        _3542 = (_3753 * _3748) + _3055;
        _3544 = ((_3738 * _1496) * _3753) + _3389;
        _3546 = ((_3740 * _1498) * _3753) + _3391;
        _3548 = ((_3742 * _1499) * _3753) + _3393;
    }
    else
    {
        _3538 = _3051;
        _3540 = _3053;
        _3542 = _3055;
        _3544 = _3389;
        _3546 = _3391;
        _3548 = _3393;
    }
    uint _3554 = _1472 + uint(cbMatDynParam._m0[0u].w);
    float _5679 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
    float _5690 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _5701 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _5712 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _3580 = (((isnan(1.0) ? _5679 : (isnan(_5679) ? 1.0 : min(_5679, 1.0))) * (_3538 + ((isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))) * _1511))) + ((_3544 + ((isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))) * _2319)) * cbPerFrame._m0[3u].x)) + (((((_874 * _869.x) + cbMtdParam._m0[26u].x) * ((_346 * TEXCOORD_13.x) + TEXCOORD_10.x)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3554].x);
    float _3582 = ((((((_874 * _869.y) + cbMtdParam._m0[26u].y) * ((_346 * TEXCOORD_13.y) + TEXCOORD_10.y)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3554].y) + ((_3546 + ((isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))) * _2319)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5690 : (isnan(_5690) ? 1.0 : min(_5690, 1.0))) * (_3540 + ((isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * _1511)));
    float _3584 = ((((((_874 * _869.z) + cbMtdParam._m0[26u].z) * ((_346 * TEXCOORD_13.z) + TEXCOORD_10.z)) * cbMtdParam._m0[20u].w) * cbInstanceData._m0[_3554].z) + ((_3548 + ((isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))) * _2319)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5701 : (isnan(_5701) ? 1.0 : min(_5701, 1.0))) * (_3542 + ((isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0))) * _1511)));
    float _3592 = cbInstanceData._m0[_1471 + 6u].w * (isnan(1.0) ? _5712 : (isnan(_5712) ? 1.0 : min(_5712, 1.0)));
    float _3597 = _1433 / cbSceneParam._m0[86u].x;
    float _3598 = _1434 / cbSceneParam._m0[86u].y;
    vec4 _3612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3597, _3598, (log2((isnan(cbSceneParam._m0[77u].w) ? _1368 : (isnan(_1368) ? cbSceneParam._m0[77u].w : min(_1368, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3614 = _3612.x;
    float _3615 = _3612.y;
    float _3616 = _3612.z;
    float _3617 = _3612.w;
    float _3688;
    float _3690;
    float _3692;
    float _3694;
    if (_1368 > cbSceneParam._m0[78u].w)
    {
        float _3651 = isnan(_1368) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1368 : min(cbSceneParam._m0[80u].w, _1368));
        float _3652 = _3651 / _1368;
        float _3663 = _3652 * _1418;
        float _3664 = _1419 * _3652;
        float _3665 = (-0.0) - _3664;
        float _3666 = _3652 * _1420;
        float _3668 = (cbSceneParam._m0[77u].w * _3665) / _3651;
        float _3669 = _3668 + cbSceneParam._m0[79u].w;
        float _3670 = cbSceneParam._m0[79u].w - _3664;
        float _3676 = sqrt(((_3663 * _3663) + (_3664 * _3664)) + (_3666 * _3666));
        float _3679 = (1.0 - (cbSceneParam._m0[77u].w / _3651)) * _3676;
        float _3684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3839;
        if (abs((_3665 - _3668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3839 = ((((_3669 > 0.0) ? exp2(_3684 * _3669) : (2.0 - exp2(_3686 * _3669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3679;
        }
        else
        {
            float _3799 = 1.0 / cbSceneParam._m0[80u].x;
            float _3800 = isnan(_3670) ? _3669 : (isnan(_3669) ? _3670 : max(_3669, _3670));
            float _3801 = isnan(_3670) ? _3669 : (isnan(_3669) ? _3670 : min(_3669, _3670));
            float _3810 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : min(_3800, 0.0));
            float _3811 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : min(_3801, 0.0));
            _3839 = ((abs(_3676 / _3665) * cbSceneParam._m0[80u].y) * ((((_3810 - _3811) * 2.0) - ((exp2(_3684 * (isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0)))) - exp2(_3684 * (isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))))) * _3799)) - ((exp2(_3686 * _3810) - exp2(_3686 * _3811)) * _3799))) + (_3679 * cbSceneParam._m0[80u].z);
        }
        vec4 _3841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3597, _3598, 1.0), 0.0);
        float _3850 = exp2((_3839 * (-1.44269502162933349609375)) * (1.0 - _3841.w));
        float _3851 = log2(_3850);
        float _3867 = log2(_3617);
        _3688 = (exp2(_3867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3851 * cbSceneParam._m0[78u].x)) * _3841.x) / cbSceneParam._m0[78u].x)) + _3614;
        _3690 = (exp2(_3867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3851 * cbSceneParam._m0[78u].y)) * _3841.y) / cbSceneParam._m0[78u].y)) + _3615;
        _3692 = (exp2(_3867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3851 * cbSceneParam._m0[78u].z)) * _3841.z) / cbSceneParam._m0[78u].z)) + _3616;
        _3694 = _3850 * _3617;
    }
    else
    {
        _3688 = _3614;
        _3690 = _3615;
        _3692 = _3616;
        _3694 = _3617;
    }
    float _3706 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3707 = _3706 == 3.0;
    float _3708 = log2(_3694);
    float _3715 = exp2(_3708 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0)));
    float _3716 = exp2(_3708 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0)));
    float _3717 = exp2(_3708 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0)));
    float _3726 = (_3706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3726 * (_3707 ? _3715 : (_3715 + (cbSceneParam._m0[72u].w * _3688)));
    SV_Target.y = _3726 * (_3707 ? _3716 : (_3716 + (cbSceneParam._m0[72u].w * _3690)));
    SV_Target.z = _3726 * (_3707 ? _3717 : (_3717 + (cbSceneParam._m0[72u].w * _3692)));
    SV_Target.w = _3592;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3592;
}


