#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1355;
float _4024;
float _4025;
float _4026;
float _4027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _248 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _249 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _250 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _254 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _275 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _283;
    float _284;
    float _285;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _283 = (-0.0) - _262;
        _284 = (-0.0) - _263;
        _285 = (-0.0) - _264;
    }
    else
    {
        _283 = _262;
        _284 = _263;
        _285 = _264;
    }
    vec4 _306 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _332 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _337 = _332.x * cbMtdParam._m0[13u].x;
    float _338 = _332.y * cbMtdParam._m0[13u].y;
    float _339 = _332.z * cbMtdParam._m0[13u].z;
    vec4 _351 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _379 = cbMtdParam._m0[15u].y * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _390 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _351.x) * 2.0) - _379)) + 1.0;
    float _4036 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[11u].x) - _337)) + _337;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[11u].y) - _338)) + _338;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[11u].z) - _339)) + _339;
    vec4 _417 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _430 = (((((1.0 - _351.y) * 2.0) - _379) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _4047 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[9u].x) - _398) * _431) + _398;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[9u].y) - _399)) + _399;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[9u].z) - _400)) + _400;
    vec4 _457 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _470 = (((((1.0 - _351.z) * 2.0) - _379) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _4058 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    vec4 _499 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _507 = ((((((_457.x * cbMtdParam._m0[10u].x) - _438) * _471) + _438) * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _499.x;
    float _510 = ((((_471 * ((_457.y * cbMtdParam._m0[10u].y) - _439)) + _439) * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _499.y;
    float _513 = ((((_471 * ((_457.z * cbMtdParam._m0[10u].z) - _440)) + _440) * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _499.z;
    vec4 _526 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    vec4 _542 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _553 = ((_542.x - _528) * _391) + _528;
    float _554 = ((_542.y - _529) * _391) + _529;
    float _555 = ((_542.z - _530) * _391) + _530;
    vec4 _568 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _579 = ((_568.x - _553) * _431) + _553;
    float _580 = ((_568.y - _554) * _431) + _554;
    float _581 = ((_568.z - _555) * _431) + _555;
    vec4 _594 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _607 = ((_594.z - _581) * _471) + _581;
    vec4 _633 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _635 = _633.x;
    float _638 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x - _635) * _391) + _635;
    float _656 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x - _638) * _431) + _638;
    vec4 _686 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _688 = _686.x;
    float _4069 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _692 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x - _656) * _471) + _656) - _688) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) + _688;
    float _695 = ((((_594.x - _579) * _471) + _579) * 2.0) + (-1.0);
    float _697 = ((((_594.y - _580) * _471) + _580) * 2.0) + (-1.0);
    float _698 = dot(vec2(_695, _697), vec2(_695, _697));
    float _4080 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))));
    float _706 = fma(_703, _283, fma(_697, _275 * TANGENT_2.x, (_254 * _248) * _695));
    float _709 = fma(_703, _284, fma(_697, _275 * TANGENT_2.y, (_254 * _249) * _695));
    float _712 = fma(_703, _285, fma(_697, _275 * TANGENT_2.z, (_254 * _250) * _695));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _722 = fma(_719, _238, fma(_718, _237, _717 * _236));
    float _725 = fma(_719, _271, fma(_718, _270, _717 * _269));
    float _728 = fma(_719, _285, fma(_718, _284, _717 * _283));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _735 = _732 * _728;
    vec4 _748 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _758 = (((_748.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z) + (_732 * _722);
    float _759 = (((_748.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z) + (_732 * _725);
    float _762 = fma(_735, _283, fma(_759, _269, _758 * _236));
    float _765 = fma(_735, _284, fma(_759, _270, _758 * _237));
    float _768 = fma(_735, _285, fma(_759, _271, _758 * _238));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _773 = _772 * _762;
    float _774 = _772 * _765;
    float _775 = _772 * _768;
    float _4091 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _776 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4113 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4124 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4135 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _780 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _796 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _846 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _836);
    float _847 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _836);
    float _848 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _836);
    float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
    float _853 = _846 * _852;
    float _854 = _847 * _852;
    float _855 = _848 * _852;
    vec4 _860 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _862 = _860.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1034 = sqrt(((_846 * _846) + (_847 * _847)) + (_848 * _848));
        float _1040 = (cbMatDynParam._m0[5u].x * _1034) + cbMatDynParam._m0[5u].y;
        float _4146 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1045 = (cbMatDynParam._m0[5u].z * _1034) + cbMatDynParam._m0[5u].w;
        float _4157 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) - _1041)) + _1041) < ((_862 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_775, cbSceneParam._m0[5u].z, fma(_774, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _773));
    float _895 = fma(_775, cbSceneParam._m0[6u].z, fma(_774, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _773));
    float _898 = fma(_775, cbSceneParam._m0[7u].z, fma(_774, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _773));
    uint _911 = uint(roundEven(NORMAL.w)) * 13u;
    uint _912 = _911 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4168 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _925 = 1.0 - _780;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _780;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _780;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _780;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _951 = _948.x * TEXCOORD_4;
    float _952 = dot(vec3(_773, _774, _775), vec3(_853, _854, _855));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _773) - _853;
    float _960 = (_955 * _774) - _854;
    float _961 = (_955 * _775) - _855;
    float _965 = abs(dot(vec3(_853, _854, _855), vec3(_773, _774, _775)));
    float _4201 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_776);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _986 = (1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _987 = _980 * _967;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1083 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1087 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1112 = _1015 + _773;
        float _1113 = _1019 + _774;
        float _1114 = _1023 + _775;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_773, _774, _775), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4249 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_773, _774, _775), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4282 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_773, _774, _775), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4315 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1402 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1406 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1429 = _1015 + _773;
        float _1430 = _1019 + _774;
        float _1431 = _1023 + _775;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_773, _774, _775), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4378 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_773, _774, _775), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4411 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_773, _774, _775), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4444 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = _1355;
        _1676 = _1355;
        _1677 = _1355;
        _1678 = _1355;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1367)) + _1367;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1368)) + _1368;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1369)) + _1369;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _959 * 0.5;
    float _1736 = _960 * 0.5;
    float _1737 = _961 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1865 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1868 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1896 = frontier_phi_19_17_ladder;
        }
        float _2071;
        if (_1865 > 0.0)
        {
            _2071 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2071 = frontier_phi_28_24_ladder;
        }
        float _2366;
        if (_1868 > 0.0)
        {
            _2366 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2366 = frontier_phi_40_35_ladder;
        }
        float _2368 = isnan(_2071) ? _1896 : (isnan(_1896) ? _2071 : min(_1896, _2071));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1862) + _1851;
        float _2374 = (_2369 * _1865) + _1855;
        float _2375 = (_2369 * _1868) + _1859;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_18_40_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_18_40_ladder_2;
        _1886 = frontier_phi_18_40_ladder_1;
        _1888 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1804);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1964 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1967 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2076;
        if (_1961 > 0.0)
        {
            _2076 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2076 = frontier_phi_30_26_ladder;
        }
        float _2393;
        if (_1964 > 0.0)
        {
            _2393 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2393 = frontier_phi_42_37_ladder;
        }
        float _2731;
        if (_1967 > 0.0)
        {
            _2731 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2731 = frontier_phi_52_49_ladder;
        }
        float _2733 = isnan(_2393) ? _2076 : (isnan(_2076) ? _2393 : min(_2076, _2393));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _1961) + _1950;
        float _2739 = (_2734 * _1964) + _1954;
        float _2740 = (_2734 * _1967) + _1958;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_27_52_ladder = _2862.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2862.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2862.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_27_52_ladder_2;
        _1988 = frontier_phi_27_52_ladder_1;
        _1990 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1893);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2003 = (((_986 * _936) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1986 - _1884)) + _1884);
    float _2005 = (((_986 * _938) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1988 - _1886)) + _1886);
    float _2007 = (((_986 * _939) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1990 - _1888)) + _1888);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2063 = _2050 / _2062;
    float _2064 = _2054 / _2062;
    float _2065 = _2058 / _2062;
    float _2212;
    float _2213;
    float _2214;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2092 = ((uint(_2065 > cbSceneParam._m0[59u].y) + uint(_2065 > cbSceneParam._m0[59u].x)) + uint(_2065 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2093 = _2092 + 43u;
        uint _2101 = _2092 + 44u;
        uint _2109 = _2092 + 45u;
        uint _2117 = _2092 + 46u;
        float _2128 = fma(_2062, cbSceneParam._m0[_2093].w, fma(_2058, cbSceneParam._m0[_2093].z, fma(_2054, cbSceneParam._m0[_2093].y, _2050 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2062, cbSceneParam._m0[_2101].w, fma(_2058, cbSceneParam._m0[_2101].z, fma(_2054, cbSceneParam._m0[_2101].y, _2050 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2062, cbSceneParam._m0[_2117].w, fma(_2058, cbSceneParam._m0[_2117].z, fma(_2054, cbSceneParam._m0[_2117].y, _2050 * cbSceneParam._m0[_2117].x)));
        float _2145 = cbSceneParam._m0[33u].z * _2140;
        float _2147 = cbSceneParam._m0[33u].w * _2140;
        float _2150 = fma(_2062, cbSceneParam._m0[_2109].w, fma(_2058, cbSceneParam._m0[_2109].z, fma(_2054, cbSceneParam._m0[_2109].y, _2050 * cbSceneParam._m0[_2109].x))) / _2140;
        float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
        float _4570 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2205 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2128) / _2140, (_2147 + _2132) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2128) / _2140, (_2132 - _2145) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2145) / _2140, (_2132 - _2147) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2147) / _2140, (_2145 + _2132) / _2140), _2150), 0.0)).x), vec4(0.25)));
        _2212 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
        _2213 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
        _2214 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2212 = 1.0;
        _2213 = 1.0;
        _2214 = 1.0;
    }
    float _2278;
    float _2280;
    float _2282;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2266 = fma(_2062, cbSceneParam._m0[63u].w, fma(_2058, cbSceneParam._m0[63u].z, fma(_2054, cbSceneParam._m0[63u].y, _2050 * cbSceneParam._m0[63u].x)));
        float _2267 = fma(_2062, cbSceneParam._m0[60u].w, fma(_2058, cbSceneParam._m0[60u].z, fma(_2054, cbSceneParam._m0[60u].y, _2050 * cbSceneParam._m0[60u].x))) / _2266;
        float _2268 = fma(_2062, cbSceneParam._m0[61u].w, fma(_2058, cbSceneParam._m0[61u].z, fma(_2054, cbSceneParam._m0[61u].y, _2050 * cbSceneParam._m0[61u].x))) / _2266;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2267 >= cbSceneParam._m0[64u].x) && (_2268 >= cbSceneParam._m0[64u].y)) && (_2267 <= cbSceneParam._m0[64u].z)) && (_2268 <= cbSceneParam._m0[64u].w))
        {
            float _2406 = fma(_2062, cbSceneParam._m0[62u].w, fma(_2058, cbSceneParam._m0[62u].z, fma(_2054, cbSceneParam._m0[62u].y, _2050 * cbSceneParam._m0[62u].x))) / _2266;
            float _2410 = isnan(cbSceneParam._m0[41u].w) ? _2406 : (isnan(_2406) ? cbSceneParam._m0[41u].w : max(_2406, cbSceneParam._m0[41u].w));
            float _2453 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
            float _4586 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
            float _2460 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2267, cbSceneParam._m0[33u].w + _2268), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2267, _2268 - cbSceneParam._m0[33u].z), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].z, _2268 - cbSceneParam._m0[33u].w), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2268), _2410), 0.0)).x), vec4(0.25)));
            float _2464 = 1.0 - (_2460 * cbSceneParam._m0[34u].x);
            float _2465 = 1.0 - (_2460 * cbSceneParam._m0[34u].y);
            float _2466 = 1.0 - (_2460 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_39_38_ladder_1 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_39_38_ladder_2 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
        }
        else
        {
            frontier_phi_39_38_ladder = _2213;
            frontier_phi_39_38_ladder_1 = _2212;
            frontier_phi_39_38_ladder_2 = _2214;
        }
        _2278 = frontier_phi_39_38_ladder_1;
        _2280 = frontier_phi_39_38_ladder;
        _2282 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2278 = _2212;
        _2280 = _2213;
        _2282 = _2214;
    }
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_911 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _951 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2325 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2329 = _2289 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_773, _774, _775));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_773, _774, _775));
    float _4622 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4633 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2306].x * _2312) * _2350) + (((cbLight._m0[_2316].x * _2278) * _2325) * _2348);
    float _2358 = ((_2312 * cbLight._m0[_2306].y) * _2350) + (((cbLight._m0[_2316].y * _2280) * _2325) * _2348);
    float _2359 = ((_2312 * cbLight._m0[_2306].z) * _2350) + (((cbLight._m0[_2316].z * _2282) * _2325) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2365)
    {
        _2467 = _2357;
        _2469 = _2358;
        _2471 = _2359;
    }
    else
    {
        uint _2475 = _2289 + 6u;
        float _2491 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4644 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2494 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2467 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2357;
        _2469 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2358;
        _2471 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2359;
    }
    bool _2474 = _2363.y == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2474)
    {
        _2529 = _2467;
        _2531 = _2469;
        _2533 = _2471;
    }
    else
    {
        uint _2702 = _2289 + 7u;
        float _2718 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2719 = _2718 * _2718;
        float _4660 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2720 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2721 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2529 = (((cbLight._m0[_2702].x * 0.3183098733425140380859375) * _2720) * _2721) + _2467;
        _2531 = (((cbLight._m0[_2702].y * 0.3183098733425140380859375) * _2720) * _2721) + _2469;
        _2533 = (((cbLight._m0[_2702].z * 0.3183098733425140380859375) * _2720) * _2721) + _2471;
    }
    uint _2536 = _2289 + 8u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _776) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2289].x + _853;
    float _2552 = cbLight._m0[_2289].y + _854;
    float _2553 = cbLight._m0[_2289].z + _855;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2289].xyz));
    float _4676 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _4687 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2565 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2566 = dot(vec3(_773, _774, _775), vec3(_2558, _2559, _2560));
    float _4698 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2558, _2559, _2560));
    float _4709 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2550 * _2550;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
    float _2587 = 0.959999978542327880859375 - _933;
    float _2589 = 0.959999978542327880859375 - _934;
    float _2590 = 0.959999978542327880859375 - _935;
    float _2597 = 1.0 - _2550;
    float _2608 = (0.5 / (((_2565 * ((_2564 * _2597) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2597) + _2550) * _2564))) * _2564;
    float _4720 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    uint _2624 = _2289 + 9u;
    float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _776) * 0.949999988079071044921875);
    float _2636 = _2635 * _2635;
    float _2637 = cbLight._m0[_2329].x + _853;
    float _2638 = cbLight._m0[_2329].y + _854;
    float _2639 = cbLight._m0[_2329].z + _855;
    float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
    float _2644 = _2643 * _2637;
    float _2645 = _2643 * _2638;
    float _2646 = _2643 * _2639;
    float _2647 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2329].xyz));
    float _4731 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2651 = dot(vec3(_773, _774, _775), vec3(_2644, _2645, _2646));
    float _4742 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2655 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2644, _2645, _2646));
    float _4753 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = _2636 * _2636;
    float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
    float _2677 = 1.0 - _2636;
    float _2687 = (0.5 / (((_2565 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2677) + _2636) * _2650))) * _2650;
    float _4764 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2689 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
    float _2699 = (((((_2670 * _2587) + _936) * cbLight._m0[_2624].x) * _2689) * _2312) + ((((cbLight._m0[_2536].x * _2278) * ((_2586 * _2587) + _936)) * _2610) * _2325);
    float _2700 = (((((_2670 * _2589) + _938) * cbLight._m0[_2624].y) * _2689) * _2312) + ((((cbLight._m0[_2536].y * _2280) * ((_2586 * _2589) + _938)) * _2610) * _2325);
    float _2701 = (((((_2670 * _2590) + _939) * cbLight._m0[_2624].z) * _2689) * _2312) + ((((cbLight._m0[_2536].z * _2282) * ((_2586 * _2590) + _939)) * _2610) * _2325);
    float _2757;
    float _2759;
    float _2761;
    if (_2365)
    {
        _2757 = _2699;
        _2759 = _2700;
        _2761 = _2701;
    }
    else
    {
        uint _2763 = _2289 + 2u;
        uint _2767 = _2289 + 10u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _776) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _853;
        float _2784 = cbLight._m0[_2763].y + _854;
        float _2785 = cbLight._m0[_2763].z + _855;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2763].xyz));
        float _4775 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2797 = dot(vec3(_773, _774, _775), vec3(_2790, _2791, _2792));
        float _4786 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4797 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
        float _2823 = 1.0 - _2782;
        float _2833 = (0.5 / (((_2565 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2823) + _2782) * _2796))) * _2796;
        float _4808 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2757 = (((((_2816 * _2587) + _936) * cbLight._m0[_2767].x) * _2835) * _2836) + _2699;
        _2759 = (((((_2816 * _2589) + _938) * cbLight._m0[_2767].y) * _2835) * _2836) + _2700;
        _2761 = (((((_2816 * _2590) + _939) * cbLight._m0[_2767].z) * _2835) * _2836) + _2701;
    }
    float _2867;
    float _2869;
    float _2871;
    if (_2474)
    {
        _2867 = _2757;
        _2869 = _2759;
        _2871 = _2761;
    }
    else
    {
        uint _2878 = _2289 + 3u;
        uint _2882 = _2289 + 11u;
        float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2878].w)) * _776) * 0.949999988079071044921875);
        float _2897 = _2896 * _2896;
        float _2898 = cbLight._m0[_2878].x + _853;
        float _2899 = cbLight._m0[_2878].y + _854;
        float _2900 = cbLight._m0[_2878].z + _855;
        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
        float _2905 = _2904 * _2898;
        float _2906 = _2904 * _2899;
        float _2907 = _2904 * _2900;
        float _2908 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2878].xyz));
        float _4824 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2912 = dot(vec3(_773, _774, _775), vec3(_2905, _2906, _2907));
        float _4835 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2916 = dot(vec3(cbLight._m0[_2878].xyz), vec3(_2905, _2906, _2907));
        float _4846 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2920 = _2897 * _2897;
        float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
        float _2931 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2938 = 1.0 - _2897;
        float _2948 = (0.5 / (((_2565 * ((_2911 * _2938) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2938) + _2897) * _2911))) * _2911;
        float _4857 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2950 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
        float _2951 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2867 = (((((_2931 * _2587) + _936) * cbLight._m0[_2882].x) * _2950) * _2951) + _2757;
        _2869 = (((((_2931 * _2589) + _938) * cbLight._m0[_2882].y) * _2950) * _2951) + _2759;
        _2871 = (((((_2931 * _2590) + _939) * cbLight._m0[_2882].z) * _2950) * _2951) + _2761;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2287.y == 0u)
    {
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.x;
        uint _2984 = uint((float(_2972.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2973))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2973)));
        float _2994 = (log2(_2065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2995 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        uint _2998 = uint(isnan(14.0) ? _2995 : (isnan(_2995) ? 14.0 : min(_2995, 14.0)));
        uvec4 _3003 = texelFetch(g_lightClusterGridBuffer, int(((_2998 << 2u) + (_2984 << 6u)) >> 2u));
        uint _3004 = _3003.x;
        uint _3005 = _2972.z;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((((1u << ((_3005 >> 4u) & 15u)) + 4294967295u) & _3004) == 0u) || ((_3005 & 240u) == 0u))
        {
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
        }
        else
        {
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            uint _3241 = 0u;
            uint _3250;
            bool _3251;
            for (;;)
            {
                _3250 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                _3251 = _3250 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3251)
                {
                    frontier_phi_73_pred = _3240;
                    frontier_phi_73_pred_1 = _3239;
                    frontier_phi_73_pred_2 = _3238;
                    frontier_phi_73_pred_3 = _3237;
                    frontier_phi_73_pred_4 = _3236;
                    frontier_phi_73_pred_5 = _3235;
                }
                else
                {
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    uint _3386;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3250;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    for (;;)
                    {
                        uint _3390 = uint(findLSB(_3386)) + (_3241 << 5u);
                        uint _3387 = (_3386 + 4294967295u) & _3386;
                        uint _3392 = _3390 * 48u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3412 = (_3390 * 48u) + 4u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3431 = (_3390 * 48u) + 8u;
                        vec3 _3442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x));
                        float _3446 = _3406.x - _2063;
                        float _3447 = _3406.y - _2064;
                        float _3448 = _3406.z - _2065;
                        float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                        float _3452 = inversesqrt(_3449);
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3456 = dot(vec3(_892, _895, _898), vec3(_3453, _3454, _3455));
                        float _3461 = 1.0 - (_3449 * _3406.w);
                        float _4883 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3463 = sqrt(_3449) * _3425.w;
                        float _3466 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3456) + _3467;
                        float _3473 = _3463 * _3463;
                        float _3477 = ((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3462) / ((_3473 * 0.699999988079071044921875) + 1.0);
                        float _3481 = (-0.0) - _2063;
                        float _3482 = (-0.0) - _2064;
                        float _3483 = (-0.0) - _2065;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3497 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _967;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3488 + _3453;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_892, _895, _898), vec3(_3488, _3489, _3490));
                        float _4899 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3522 = dot(vec3(_892, _895, _898), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4910 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3466 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3456) + _3531;
                        float _4921 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4932 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) / ((_3529 * _3529) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125))) * _3462;
                        _3310 = (_3477 * _3425.x) + _3383;
                        _3311 = (_3477 * _3425.y) + _3384;
                        _3312 = (_3477 * _3425.z) + _3385;
                        _3307 = (_3557 * _3442.x) + _3380;
                        _3308 = (_3557 * _3442.y) + _3381;
                        _3309 = (_3557 * _3442.z) + _3382;
                        if (_3387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3387;
                        }
                    }
                    frontier_phi_73_pred = _3312;
                    frontier_phi_73_pred_1 = _3311;
                    frontier_phi_73_pred_2 = _3310;
                    frontier_phi_73_pred_3 = _3309;
                    frontier_phi_73_pred_4 = _3308;
                    frontier_phi_73_pred_5 = _3307;
                }
                _3094 = frontier_phi_73_pred;
                _3092 = frontier_phi_73_pred_1;
                _3090 = frontier_phi_73_pred_2;
                _3088 = frontier_phi_73_pred_3;
                _3086 = frontier_phi_73_pred_4;
                _3084 = frontier_phi_73_pred_5;
                uint _3242 = _3241 + 1u;
                if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3235 = _3084;
                    _3236 = _3086;
                    _3237 = _3088;
                    _3238 = _3090;
                    _3239 = _3092;
                    _3240 = _3094;
                    _3241 = _3242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
        }
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.z;
        uint _3100 = (_3098 >> 8u) & 15u;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((4294967295u << _3100) & _3004) == 0u)
        {
            _3203 = _3083;
            _3205 = _3085;
            _3207 = _3087;
            _3209 = _3089;
            _3211 = _3091;
            _3213 = _3093;
        }
        else
        {
            float _3228 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
            float _3229 = _3228 * _2063;
            float _3230 = _3228 * _2064;
            float _3231 = _3228 * _2065;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3100 < ((_3098 >> 12u) & 15u))
            {
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3363 = _3083;
                float _3364 = _3085;
                float _3365 = _3087;
                float _3366 = _3089;
                float _3367 = _3091;
                float _3368 = _3093;
                uint _3369 = _3100;
                uint _3378;
                bool _3379;
                for (;;)
                {
                    _3378 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                    _3379 = _3378 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3379)
                    {
                        frontier_phi_84_pred = _3367;
                        frontier_phi_84_pred_1 = _3366;
                        frontier_phi_84_pred_2 = _3365;
                        frontier_phi_84_pred_3 = _3364;
                        frontier_phi_84_pred_4 = _3363;
                        frontier_phi_84_pred_5 = _3368;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        uint _3590 = _3378;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3675;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3601 = ((_3369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3662 = (_3601 * 40u) + 20u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3678 = (_3601 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3601 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2065, _3710.z, fma(_2064, _3710.y, _3710.x * _2063)) + _3710.w;
                            _3723 = !((fma(_2065, _3691.z, fma(_2064, _3691.y, _3691.x * _2063)) + _3691.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3616.x - _2063;
                                float _3751 = _3616.y - _2064;
                                float _3752 = _3616.z - _2065;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3617 * _3617));
                                float _4943 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3768 = sqrt(_3753) * _3632.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_892, _895, _898))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2065, _3659.z, fma(_2064, _3659.y, _3659.x * _2063)) + _3659.w) / _3722;
                                float _3782 = (fma(_2065, _3675.z, fma(_2064, _3675.y, _3675.x * _2063)) + _3675.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _4959 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _967;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3229;
                                float _3812 = _3758 - _3230;
                                float _3813 = _3759 - _3231;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_892, _895, _898), vec3((-0.0) - _3229, (-0.0) - _3230, (-0.0) - _3231));
                                float _4970 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3825 = dot(vec3(_892, _895, _898), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _4981 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_892, _895, _898), vec3(_3757, _3758, _3759))) + _3834;
                                float _4992 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _5003 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3788 * _3632.y;
                                frontier_phi_90_pred_1 = _3788 * _3632.x;
                                frontier_phi_90_pred_2 = _3862 * _3644.z;
                                frontier_phi_90_pred_3 = _3862 * _3644.y;
                                frontier_phi_90_pred_4 = _3862 * _3644.x;
                                frontier_phi_90_pred_5 = _3788 * _3632.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3870 = frontier_phi_90_pred;
                            _3869 = frontier_phi_90_pred_1;
                            _3868 = frontier_phi_90_pred_2;
                            _3867 = frontier_phi_90_pred_3;
                            _3866 = frontier_phi_90_pred_4;
                            _3871 = frontier_phi_90_pred_5;
                            _3574 = _3869 + _3587;
                            _3575 = _3870 + _3588;
                            _3576 = _3871 + _3589;
                            _3571 = _3866 + _3584;
                            _3572 = _3867 + _3585;
                            _3573 = _3868 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3575;
                        frontier_phi_84_pred_1 = _3574;
                        frontier_phi_84_pred_2 = _3573;
                        frontier_phi_84_pred_3 = _3572;
                        frontier_phi_84_pred_4 = _3571;
                        frontier_phi_84_pred_5 = _3576;
                    }
                    _3212 = frontier_phi_84_pred;
                    _3210 = frontier_phi_84_pred_1;
                    _3208 = frontier_phi_84_pred_2;
                    _3206 = frontier_phi_84_pred_3;
                    _3204 = frontier_phi_84_pred_4;
                    _3214 = frontier_phi_84_pred_5;
                    uint _3370 = _3369 + 1u;
                    if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3363 = _3204;
                        _3364 = _3206;
                        _3365 = _3208;
                        _3366 = _3210;
                        _3367 = _3212;
                        _3368 = _3214;
                        _3369 = _3370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3214;
                frontier_phi_65_66_ladder_1 = _3210;
                frontier_phi_65_66_ladder_2 = _3212;
                frontier_phi_65_66_ladder_3 = _3206;
                frontier_phi_65_66_ladder_4 = _3204;
                frontier_phi_65_66_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_65_66_ladder = _3093;
                frontier_phi_65_66_ladder_1 = _3089;
                frontier_phi_65_66_ladder_2 = _3091;
                frontier_phi_65_66_ladder_3 = _3085;
                frontier_phi_65_66_ladder_4 = _3083;
                frontier_phi_65_66_ladder_5 = _3087;
            }
            _3203 = frontier_phi_65_66_ladder_4;
            _3205 = frontier_phi_65_66_ladder_3;
            _3207 = frontier_phi_65_66_ladder_5;
            _3209 = frontier_phi_65_66_ladder_1;
            _3211 = frontier_phi_65_66_ladder_2;
            _3213 = frontier_phi_65_66_ladder;
        }
        float _3218 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _3016 = (_3218 * _3209) + _2529;
        _3018 = (_3218 * _3211) + _2531;
        _3020 = (_3218 * _3213) + _2533;
        _3022 = ((_3203 * _936) * _3218) + _2867;
        _3024 = ((_3205 * _938) * _3218) + _2869;
        _3026 = ((_3207 * _939) * _3218) + _2871;
    }
    else
    {
        _3016 = _2529;
        _3018 = _2531;
        _3020 = _2533;
        _3022 = _2867;
        _3024 = _2869;
        _3026 = _2871;
    }
    float _5019 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _5030 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _5041 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3043 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_3016 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _951))) + ((_3022 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _3044 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3018 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _951))) + ((_3024 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _3045 = ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3020 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _951))) + ((_3026 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    uint _3046 = _911 + 6u;
    float _3054 = _873 / cbSceneParam._m0[86u].x;
    float _3055 = _874 / cbSceneParam._m0[86u].y;
    vec4 _3069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, (log2((isnan(cbSceneParam._m0[77u].w) ? _796 : (isnan(_796) ? cbSceneParam._m0[77u].w : min(_796, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3071 = _3069.x;
    float _3072 = _3069.y;
    float _3073 = _3069.z;
    float _3074 = _3069.w;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    if (_796 > cbSceneParam._m0[78u].w)
    {
        float _3108 = isnan(_796) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _796 : min(cbSceneParam._m0[80u].w, _796));
        float _3109 = _3108 / _796;
        float _3120 = _3109 * _846;
        float _3121 = _847 * _3109;
        float _3122 = (-0.0) - _3121;
        float _3123 = _3109 * _848;
        float _3125 = (cbSceneParam._m0[77u].w * _3122) / _3108;
        float _3126 = _3125 + cbSceneParam._m0[79u].w;
        float _3127 = cbSceneParam._m0[79u].w - _3121;
        float _3133 = sqrt(((_3120 * _3120) + (_3121 * _3121)) + (_3123 * _3123));
        float _3136 = (1.0 - (cbSceneParam._m0[77u].w / _3108)) * _3133;
        float _3141 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3143 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3320;
        if (abs((_3122 - _3125) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3320 = ((((_3126 > 0.0) ? exp2(_3141 * _3126) : (2.0 - exp2(_3143 * _3126))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3136;
        }
        else
        {
            float _3264 = 1.0 / cbSceneParam._m0[80u].x;
            float _3265 = isnan(_3127) ? _3126 : (isnan(_3126) ? _3127 : max(_3126, _3127));
            float _3266 = isnan(_3127) ? _3126 : (isnan(_3126) ? _3127 : min(_3126, _3127));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            _3320 = ((abs(_3133 / _3122) * cbSceneParam._m0[80u].y) * ((((_3275 - _3276) * 2.0) - ((exp2(_3141 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0)))) - exp2(_3141 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))))) * _3264)) - ((exp2(_3143 * _3275) - exp2(_3143 * _3276)) * _3264))) + (_3136 * cbSceneParam._m0[80u].z);
        }
        vec4 _3322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, 1.0), 0.0);
        float _3331 = exp2((_3320 * (-1.44269502162933349609375)) * (1.0 - _3322.w));
        float _3332 = log2(_3331);
        float _3348 = log2(_3074);
        _3145 = (exp2(_3348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].x)) * _3322.x) / cbSceneParam._m0[78u].x)) + _3071;
        _3147 = (exp2(_3348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].y)) * _3322.y) / cbSceneParam._m0[78u].y)) + _3072;
        _3149 = (exp2(_3348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].z)) * _3322.z) / cbSceneParam._m0[78u].z)) + _3073;
        _3151 = _3331 * _3074;
    }
    else
    {
        _3145 = _3071;
        _3147 = _3072;
        _3149 = _3073;
        _3151 = _3074;
    }
    bool _3358;
    vec4 _3161;
    vec4 _3183;
    float _3185;
    float _3189;
    float _3190;
    float _3191;
    float _3192;
    bool _3202;
    for (;;)
    {
        _3161 = cbMatDynParam._m0[0u];
        float _3163 = roundEven(_3161.y);
        bool _3164 = _3163 == 3.0;
        float _3165 = log2(_3151);
        float _3172 = exp2(_3165 * cbSceneParam._m0[78u].x) * _3043;
        float _3173 = exp2(_3165 * cbSceneParam._m0[78u].y) * _3044;
        float _3174 = exp2(_3165 * cbSceneParam._m0[78u].z) * _3045;
        float _3181 = _862 + (-0.5);
        _3183 = cbMtdParam._m0[1u];
        _3185 = _3183.y * _3181;
        float _3188 = (_3163 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3189 = _3188 * (_3164 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3145)));
        _3190 = _3188 * (_3164 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3147)));
        _3191 = _3188 * (_3164 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3149)));
        _3192 = _3181 * 0.999000012874603271484375;
        _3202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3202)
        {
            if ((cbInstanceData._m0[_911 + 7u].x + _3192) < 0.5)
            {
                _3358 = true;
                break;
            }
        }
        uint _3299 = _912 + uint(_3161.w);
        if ((cbInstanceData._m0[_3299].w < 1.0) && ((cbInstanceData._m0[_3299].w + _3192) < 0.5))
        {
            _3358 = true;
            break;
        }
        if ((_3185 + 1.0) < _3183.x)
        {
            _3358 = true;
            break;
        }
        _3358 = false;
        break;
    }
    float _3562;
    if (_3358)
    {
        discard_state = true;
        _3562 = 0.0;
    }
    else
    {
        _3562 = cbInstanceData._m0[_3046].w;
    }
    SV_Target.x = _3189;
    SV_Target.y = _3190;
    SV_Target.z = _3191;
    SV_Target.w = _3562;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3046].w;
    discard_exit();
}


