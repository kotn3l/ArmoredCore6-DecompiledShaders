#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _4072;
float _4073;
float _4074;
float _4075;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _283 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _311 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = _337.x * cbMatDynParam._m0[17u].x;
    float _344 = _337.y * cbMatDynParam._m0[17u].y;
    float _345 = _337.z * cbMatDynParam._m0[17u].z;
    vec4 _364 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _383 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _394 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _396 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _383.x))) * _394;
    float _4084 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _404 = (_397 * ((_364.x * cbMatDynParam._m0[18u].x) - _343)) + _343;
    float _405 = (_397 * ((_364.y * cbMatDynParam._m0[18u].y) - _344)) + _344;
    float _406 = (_397 * ((_364.z * cbMatDynParam._m0[18u].z) - _345)) + _345;
    float _411 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _383.y))) * _394;
    float _4095 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _419 = (((_311.x * cbMatDynParam._m0[19u].x) - _404) * _412) + _404;
    float _420 = (((_311.y * cbMatDynParam._m0[19u].y) - _405) * _412) + _405;
    float _421 = (((_311.z * cbMatDynParam._m0[19u].z) - _406) * _412) + _406;
    float _426 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _383.z))) * _394;
    float _4106 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _434 = (((_283.x * cbMatDynParam._m0[20u].x) - _419) * _427) + _419;
    float _435 = (((_283.y * cbMatDynParam._m0[20u].y) - _420) * _427) + _420;
    float _436 = (((_283.z * cbMatDynParam._m0[20u].z) - _421) * _427) + _421;
    vec4 _448 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _451 = _448.x * _337.w;
    float _467 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _468 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _489 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _490 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _507 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _508 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
    float _526 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _527 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = (_397 * ((isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0))) - _509)) + _509;
    float _534 = (((isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0))) - _531) * _412) + _531;
    float _537 = (((isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0))) - _534) * _427) + _534;
    vec4 _554 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _573 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _592 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _597 = _592.z * cbMatDynParam._m0[22u].x;
    vec4 _611 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _619 = (((_611.z * cbMatDynParam._m0[21u].w) - _597) * _397) + _597;
    float _622 = (((_573.z * cbMatDynParam._m0[21u].z) - _619) * _412) + _619;
    float _625 = (((_554.z * cbMatDynParam._m0[24u].x) - _622) * _427) + _622;
    vec4 _638 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _652 = (_397 * (_611.x - _594)) + _594;
    float _653 = (_397 * (_611.y - _595)) + _595;
    float _658 = ((_573.x - _652) * _412) + _652;
    float _659 = ((_573.y - _653) * _412) + _653;
    float _668 = ((((_554.x - _658) * _427) + _658) * 2.0) + (-1.0);
    float _669 = ((((_554.y - _659) * _427) + _659) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _4157 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))));
    float _679 = _668 + (cbMatDynParam._m0[23u].y * ((_638.x * 2.0) + (-1.0)));
    float _680 = _669 + (cbMatDynParam._m0[23u].y * ((_638.y * 2.0) + (-1.0)));
    float _683 = fma(_675, _252, fma(_680, _244 * TANGENT.x, (_230 * _222) * _679));
    float _686 = fma(_675, _253, fma(_680, _244 * TANGENT.y, (_230 * _223) * _679));
    float _689 = fma(_675, _254, fma(_680, _244 * TANGENT.z, (_230 * _224) * _679));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _4168 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _697 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _698 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _699 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _700 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _701 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _702 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    vec4 _782 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _784 = _782.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1090 = sqrt(((_768 * _768) + (_769 * _769)) + (_770 * _770));
        float _1096 = (cbMatDynParam._m0[5u].x * _1090) + cbMatDynParam._m0[5u].y;
        float _4234 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1101 = (cbMatDynParam._m0[5u].z * _1090) + cbMatDynParam._m0[5u].w;
        float _4245 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) - _1097)) + _1097) < ((_784 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _798 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _800 = _798.w;
    float _818 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _821 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _824 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _828 = _826.x;
    float _840 = (((_826.y - _698) + (_826.w * _698)) * cbMtdParam._m0[3u].x) + _698;
    vec4 _841 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _857 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_828 * _828)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _841.z;
    float _866 = (((cbMatDynParam._m0[15u].x - _702) * cbMatDynParam._m0[15u].w) * _857) + _702;
    float _875 = ((_857 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _840)) + _840;
    uint _899 = uint(roundEven(NORMAL.w)) * 13u;
    uint _900 = _899 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * _699) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * _700) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * _701) * cbInstanceData._m0[_901].z;
    float _4256 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    vec4 _913 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _929 = (((_918.x - _866) + (_918.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    float _942 = (cbMtdParam._m0[3u].x * (((_910 * _800) - _910) + _913.x)) + _910;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _800) - _911) + _913.y)) + _911;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _800) - _912) + _913.z)) + _912;
    float _958 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_866 * (_699 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_700 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_701 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _962 = _958 * cbMatDynParam._m0[13u].w;
    float _972 = (_962 * (cbMatDynParam._m0[13u].x - _942)) + _942;
    float _973 = (_962 * (cbMatDynParam._m0[13u].y - _943)) + _943;
    float _974 = (_962 * (cbMatDynParam._m0[13u].z - _944)) + _944;
    float _982 = ((_958 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _929)) + _929;
    float _983 = 1.0 - _982;
    float _984 = _983 * _972;
    float _985 = _983 * _973;
    float _986 = _983 * _974;
    float _990 = (_972 + (-0.039999999105930328369140625)) * _982;
    float _991 = (_973 + (-0.039999999105930328369140625)) * _982;
    float _992 = (_974 + (-0.039999999105930328369140625)) * _982;
    float _993 = _990 + 0.039999999105930328369140625;
    float _994 = _991 + 0.039999999105930328369140625;
    float _995 = _992 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _1007 = _1004.x * TEXCOORD_8;
    float _1008 = dot(vec3(_694, _695, _696), vec3(_775, _776, _777));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _694) - _775;
    float _1016 = (_1011 * _695) - _776;
    float _1017 = (_1011 * _696) - _777;
    float _1021 = abs(dot(vec3(_775, _776, _777), vec3(_694, _695, _696)));
    float _4289 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_875);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1042 = (1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1043 = _1036 * _1023;
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1139 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1143 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1167 = _1071 + _694;
        float _1168 = _1075 + _695;
        float _1169 = _1079 + _696;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1135;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1139;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1143;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_694, _695, _696), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4337 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_694, _695, _696), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4370 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_694, _695, _696), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4403 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1457 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1461 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1484 = _1071 + _694;
        float _1485 = _1075 + _695;
        float _1486 = _1079 + _696;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_694, _695, _696), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4466 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_694, _695, _696), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4499 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_694, _695, _696), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4532 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = _1410;
        _1733 = _1410;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1422)) + _1422;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1423)) + _1423;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1424)) + _1424;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1015 * 0.5;
    float _1791 = _1016 * 0.5;
    float _1792 = _1017 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1917 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1920 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1948 = frontier_phi_19_17_ladder;
        }
        float _2119;
        if (_1917 > 0.0)
        {
            _2119 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1920 > 0.0)
        {
            _2414 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2416 = isnan(_2119) ? _1948 : (isnan(_1948) ? _2119 : min(_1948, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1914) + _1903;
        float _2422 = (_2417 * _1917) + _1907;
        float _2423 = (_2417 * _1920) + _1911;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_18_40_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_18_40_ladder_2;
        _1938 = frontier_phi_18_40_ladder_1;
        _1940 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _2012 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _2015 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2124;
        if (_2009 > 0.0)
        {
            _2124 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2124 = frontier_phi_30_26_ladder;
        }
        float _2441;
        if (_2012 > 0.0)
        {
            _2441 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2441 = frontier_phi_42_37_ladder;
        }
        float _2779;
        if (_2015 > 0.0)
        {
            _2779 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2779 = frontier_phi_52_49_ladder;
        }
        float _2781 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2009) + _1998;
        float _2787 = (_2782 * _2012) + _2002;
        float _2788 = (_2782 * _2015) + _2006;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_27_52_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_27_52_ladder_2;
        _2036 = frontier_phi_27_52_ladder_1;
        _2038 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1042 * _993) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1042 * _994) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1042 * _995) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4658 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4674 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_39_38_ladder_1 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_39_38_ladder_2 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
        }
        else
        {
            frontier_phi_39_38_ladder = _2261;
            frontier_phi_39_38_ladder_1 = _2260;
            frontier_phi_39_38_ladder_2 = _2262;
        }
        _2326 = frontier_phi_39_38_ladder_1;
        _2328 = frontier_phi_39_38_ladder;
        _2330 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_899 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1007 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_694, _695, _696));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_694, _695, _696));
    float _4710 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4721 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4732 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2750 = _2337 + 7u;
        float _2766 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4748 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2769 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2515;
        _2579 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2517;
        _2581 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _875) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _775;
    float _2600 = cbLight._m0[_2337].y + _776;
    float _2601 = cbLight._m0[_2337].z + _777;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2337].xyz));
    float _4764 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _4775 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2613 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2614 = dot(vec3(_694, _695, _696), vec3(_2606, _2607, _2608));
    float _4786 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4797 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
    float _2635 = 0.959999978542327880859375 - _990;
    float _2637 = 0.959999978542327880859375 - _991;
    float _2638 = 0.959999978542327880859375 - _992;
    float _2645 = 1.0 - _2598;
    float _2656 = (0.5 / (((_2613 * ((_2612 * _2645) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2645) + _2598) * _2612))) * _2612;
    float _4808 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2672 = _2337 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _875) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2377].x + _775;
    float _2686 = cbLight._m0[_2377].y + _776;
    float _2687 = cbLight._m0[_2377].z + _777;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2377].xyz));
    float _4819 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2699 = dot(vec3(_694, _695, _696), vec3(_2692, _2693, _2694));
    float _4830 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2692, _2693, _2694));
    float _4841 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0);
    float _2725 = 1.0 - _2684;
    float _2735 = (0.5 / (((_2613 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2725) + _2684) * _2698))) * _2698;
    float _4852 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2747 = (((((_2718 * _2635) + _993) * cbLight._m0[_2672].x) * _2737) * _2360) + ((((cbLight._m0[_2584].x * _2326) * ((_2634 * _2635) + _993)) * _2658) * _2373);
    float _2748 = (((((_2718 * _2637) + _994) * cbLight._m0[_2672].y) * _2737) * _2360) + ((((cbLight._m0[_2584].y * _2328) * ((_2634 * _2637) + _994)) * _2658) * _2373);
    float _2749 = (((((_2718 * _2638) + _995) * cbLight._m0[_2672].z) * _2737) * _2360) + ((((cbLight._m0[_2584].z * _2330) * ((_2634 * _2638) + _995)) * _2658) * _2373);
    float _2805;
    float _2807;
    float _2809;
    if (_2413)
    {
        _2805 = _2747;
        _2807 = _2748;
        _2809 = _2749;
    }
    else
    {
        uint _2811 = _2337 + 2u;
        uint _2815 = _2337 + 10u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _875) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _775;
        float _2832 = cbLight._m0[_2811].y + _776;
        float _2833 = cbLight._m0[_2811].z + _777;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2811].xyz));
        float _4863 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2845 = dot(vec3(_694, _695, _696), vec3(_2838, _2839, _2840));
        float _4874 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4885 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2613 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2871) + _2830) * _2844))) * _2844;
        float _4896 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2805 = (((((_2864 * _2635) + _993) * cbLight._m0[_2815].x) * _2883) * _2884) + _2747;
        _2807 = (((((_2864 * _2637) + _994) * cbLight._m0[_2815].y) * _2883) * _2884) + _2748;
        _2809 = (((((_2864 * _2638) + _995) * cbLight._m0[_2815].z) * _2883) * _2884) + _2749;
    }
    float _2915;
    float _2917;
    float _2919;
    if (_2522)
    {
        _2915 = _2805;
        _2917 = _2807;
        _2919 = _2809;
    }
    else
    {
        uint _2926 = _2337 + 3u;
        uint _2930 = _2337 + 11u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _875) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _775;
        float _2947 = cbLight._m0[_2926].y + _776;
        float _2948 = cbLight._m0[_2926].z + _777;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2926].xyz));
        float _4912 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2960 = dot(vec3(_694, _695, _696), vec3(_2953, _2954, _2955));
        float _4923 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _4934 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2613 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2986) + _2945) * _2959))) * _2959;
        float _4945 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2915 = (((((_2979 * _2635) + _993) * cbLight._m0[_2930].x) * _2998) * _2999) + _2805;
        _2917 = (((((_2979 * _2637) + _994) * cbLight._m0[_2930].y) * _2998) * _2999) + _2807;
        _2919 = (((((_2979 * _2638) + _995) * cbLight._m0[_2930].z) * _2998) * _2999) + _2809;
    }
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_2335.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _3021)));
        float _3042 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
        }
        else
        {
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            uint _3291 = 0u;
            uint _3300;
            bool _3301;
            for (;;)
            {
                _3300 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                _3301 = _3300 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3301)
                {
                    frontier_phi_73_pred = _3290;
                    frontier_phi_73_pred_1 = _3289;
                    frontier_phi_73_pred_2 = _3288;
                    frontier_phi_73_pred_3 = _3287;
                    frontier_phi_73_pred_4 = _3286;
                    frontier_phi_73_pred_5 = _3285;
                }
                else
                {
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    uint _3436;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3300;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    for (;;)
                    {
                        uint _3440 = uint(findLSB(_3436)) + (_3291 << 5u);
                        uint _3437 = (_3436 + 4294967295u) & _3436;
                        uint _3442 = _3440 * 48u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3462 = (_3440 * 48u) + 4u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 3u)).x));
                        uint _3481 = (_3440 * 48u) + 8u;
                        vec3 _3492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x));
                        float _3496 = _3456.x - _2111;
                        float _3497 = _3456.y - _2112;
                        float _3498 = _3456.z - _2113;
                        float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                        float _3502 = inversesqrt(_3499);
                        float _3503 = _3502 * _3496;
                        float _3504 = _3502 * _3497;
                        float _3505 = _3502 * _3498;
                        float _3506 = dot(vec3(_818, _821, _824), vec3(_3503, _3504, _3505));
                        float _3511 = 1.0 - (_3499 * _3456.w);
                        float _4971 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3513 = sqrt(_3499) * _3475.w;
                        float _3516 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3506) + _3517;
                        float _3523 = _3513 * _3513;
                        float _3527 = ((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3512) / ((_3523 * 0.699999988079071044921875) + 1.0);
                        float _3531 = (-0.0) - _2111;
                        float _3532 = (-0.0) - _2112;
                        float _3533 = (-0.0) - _2113;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3547 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                        float _3548 = 1.0 - _1023;
                        float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                        float _3556 = _3555 * _3555;
                        float _3557 = _3556 * _3556;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3568 = dot(vec3(_818, _821, _824), vec3(_3538, _3539, _3540));
                        float _4987 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3572 = dot(vec3(_818, _821, _824), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                        float _4998 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                        float _3580 = _3516 * _3556;
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3506) + _3581;
                        float _5009 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                        float _3586 = 1.0 - _3556;
                        float _3596 = (0.5 / (((_3585 * ((_3571 * _3586) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3556) * _3571))) * _3585;
                        float _5020 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3607 = (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3579 * _3579) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125))) * _3512;
                        _3360 = (_3527 * _3475.x) + _3433;
                        _3361 = (_3527 * _3475.y) + _3434;
                        _3362 = (_3527 * _3475.z) + _3435;
                        _3357 = (_3607 * _3492.x) + _3430;
                        _3358 = (_3607 * _3492.y) + _3431;
                        _3359 = (_3607 * _3492.z) + _3432;
                        if (_3437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3437;
                        }
                    }
                    frontier_phi_73_pred = _3362;
                    frontier_phi_73_pred_1 = _3361;
                    frontier_phi_73_pred_2 = _3360;
                    frontier_phi_73_pred_3 = _3359;
                    frontier_phi_73_pred_4 = _3358;
                    frontier_phi_73_pred_5 = _3357;
                }
                _3144 = frontier_phi_73_pred;
                _3142 = frontier_phi_73_pred_1;
                _3140 = frontier_phi_73_pred_2;
                _3138 = frontier_phi_73_pred_3;
                _3136 = frontier_phi_73_pred_4;
                _3134 = frontier_phi_73_pred_5;
                uint _3292 = _3291 + 1u;
                if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3285 = _3134;
                    _3286 = _3136;
                    _3287 = _3138;
                    _3288 = _3140;
                    _3289 = _3142;
                    _3290 = _3144;
                    _3291 = _3292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
        }
        uvec4 _3147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3148 = _3147.z;
        uint _3150 = (_3148 >> 8u) & 15u;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((4294967295u << _3150) & _3052) == 0u)
        {
            _3253 = _3133;
            _3255 = _3135;
            _3257 = _3137;
            _3259 = _3139;
            _3261 = _3141;
            _3263 = _3143;
        }
        else
        {
            float _3278 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3279 = _3278 * _2111;
            float _3280 = _3278 * _2112;
            float _3281 = _3278 * _2113;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3150 < ((_3148 >> 12u) & 15u))
            {
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3413 = _3133;
                float _3414 = _3135;
                float _3415 = _3137;
                float _3416 = _3139;
                float _3417 = _3141;
                float _3418 = _3143;
                uint _3419 = _3150;
                uint _3428;
                bool _3429;
                for (;;)
                {
                    _3428 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                    _3429 = _3428 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3429)
                    {
                        frontier_phi_84_pred = _3417;
                        frontier_phi_84_pred_1 = _3416;
                        frontier_phi_84_pred_2 = _3415;
                        frontier_phi_84_pred_3 = _3414;
                        frontier_phi_84_pred_4 = _3413;
                        frontier_phi_84_pred_5 = _3418;
                    }
                    else
                    {
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        uint _3640 = _3428;
                        uint _3641;
                        vec4 _3666;
                        float _3667;
                        vec4 _3682;
                        vec3 _3694;
                        vec4 _3709;
                        vec4 _3724;
                        float _3770;
                        bool _3771;
                        for (;;)
                        {
                            uint _3651 = ((_3419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3640));
                            _3641 = (_3640 + 4294967295u) & _3640;
                            uint _3653 = _3651 * 40u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3667 = _3666.w;
                            uint _3669 = (_3651 * 40u) + 4u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3651 * 40u) + 8u;
                            _3694 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x));
                            uint _3696 = (_3651 * 40u) + 16u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3651 * 40u) + 20u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3651 * 40u) + 24u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3745 = (_3651 * 40u) + 28u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3770 = fma(_2113, _3758.z, fma(_2112, _3758.y, _3758.x * _2111)) + _3758.w;
                            _3771 = !((fma(_2113, _3739.z, fma(_2112, _3739.y, _3739.x * _2111)) + _3739.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3771)
                            {
                                float _3798 = _3666.x - _2111;
                                float _3799 = _3666.y - _2112;
                                float _3800 = _3666.z - _2113;
                                float _3801 = dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800));
                                float _3804 = inversesqrt(_3801);
                                float _3805 = _3804 * _3798;
                                float _3806 = _3804 * _3799;
                                float _3807 = _3804 * _3800;
                                float _3811 = 1.0 - (_3801 / (_3667 * _3667));
                                float _5031 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3816 = sqrt(_3801) * _3682.w;
                                float _3818 = 1.39999997615814208984375 / (_3816 + 1.39999997615814208984375);
                                float _3819 = _3818 * _3818;
                                float _3822 = ((1.0 - _3819) * dot(vec3(_3805, _3806, _3807), vec3(_818, _821, _824))) + _3819;
                                float _3825 = _3816 * _3816;
                                float _3829 = (fma(_2113, _3709.z, fma(_2112, _3709.y, _3709.x * _2111)) + _3709.w) / _3770;
                                float _3830 = (fma(_2113, _3724.z, fma(_2112, _3724.y, _3724.x * _2111)) + _3724.w) / _3770;
                                float _3834 = 1.0 - dot(vec2(_3829, _3830), vec2(_3829, _3830));
                                float _5047 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3836 = _3835 * (((isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0))) * _3812) / ((_3825 * 0.699999988079071044921875) + 1.0));
                                float _3848 = exp2(log2(1.0 / ((_3825 * 3.5) + 5.0)) * 0.25);
                                float _3849 = 1.0 - _1023;
                                float _3856 = sqrt(1.0 - ((1.0 - (_3849 * _3849)) * (1.0 - (_3848 * _3848))));
                                float _3857 = _3856 * _3856;
                                float _3858 = _3857 * _3857;
                                float _3859 = _3805 - _3279;
                                float _3860 = _3806 - _3280;
                                float _3861 = _3807 - _3281;
                                float _3865 = inversesqrt(dot(vec3(_3859, _3860, _3861), vec3(_3859, _3860, _3861)));
                                float _3869 = dot(vec3(_818, _821, _824), vec3((-0.0) - _3279, (-0.0) - _3280, (-0.0) - _3281));
                                float _5058 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3873 = dot(vec3(_818, _821, _824), vec3(_3865 * _3859, _3865 * _3860, _3865 * _3861));
                                float _5069 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3880 = ((_3876 * _3876) * (_3858 + (-1.0))) + 1.0;
                                float _3881 = _3818 * _3857;
                                float _3882 = _3881 * _3881;
                                float _3888 = ((1.0 - _3882) * dot(vec3(_818, _821, _824), vec3(_3805, _3806, _3807))) + _3882;
                                float _5080 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3890 = 1.0 - _3857;
                                float _3900 = (0.5 / (((_3889 * ((_3872 * _3890) + _3857)) + 9.9999999392252902907785028219223e-09) + (((_3889 * _3890) + _3857) * _3872))) * _3889;
                                float _5091 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3910 = (_3835 * _3812) * (((_3858 * 3.1415927410125732421875) * (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0)))) / ((_3880 * _3880) * ((_3825 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3836 * _3682.y;
                                frontier_phi_90_pred_1 = _3836 * _3682.x;
                                frontier_phi_90_pred_2 = _3910 * _3694.z;
                                frontier_phi_90_pred_3 = _3910 * _3694.y;
                                frontier_phi_90_pred_4 = _3910 * _3694.x;
                                frontier_phi_90_pred_5 = _3836 * _3682.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3918 = frontier_phi_90_pred;
                            _3917 = frontier_phi_90_pred_1;
                            _3916 = frontier_phi_90_pred_2;
                            _3915 = frontier_phi_90_pred_3;
                            _3914 = frontier_phi_90_pred_4;
                            _3919 = frontier_phi_90_pred_5;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            if (_3641 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3641;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3625;
                        frontier_phi_84_pred_1 = _3624;
                        frontier_phi_84_pred_2 = _3623;
                        frontier_phi_84_pred_3 = _3622;
                        frontier_phi_84_pred_4 = _3621;
                        frontier_phi_84_pred_5 = _3626;
                    }
                    _3262 = frontier_phi_84_pred;
                    _3260 = frontier_phi_84_pred_1;
                    _3258 = frontier_phi_84_pred_2;
                    _3256 = frontier_phi_84_pred_3;
                    _3254 = frontier_phi_84_pred_4;
                    _3264 = frontier_phi_84_pred_5;
                    uint _3420 = _3419 + 1u;
                    if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3413 = _3254;
                        _3414 = _3256;
                        _3415 = _3258;
                        _3416 = _3260;
                        _3417 = _3262;
                        _3418 = _3264;
                        _3419 = _3420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3264;
                frontier_phi_65_66_ladder_1 = _3260;
                frontier_phi_65_66_ladder_2 = _3262;
                frontier_phi_65_66_ladder_3 = _3256;
                frontier_phi_65_66_ladder_4 = _3254;
                frontier_phi_65_66_ladder_5 = _3258;
            }
            else
            {
                frontier_phi_65_66_ladder = _3143;
                frontier_phi_65_66_ladder_1 = _3139;
                frontier_phi_65_66_ladder_2 = _3141;
                frontier_phi_65_66_ladder_3 = _3135;
                frontier_phi_65_66_ladder_4 = _3133;
                frontier_phi_65_66_ladder_5 = _3137;
            }
            _3253 = frontier_phi_65_66_ladder_4;
            _3255 = frontier_phi_65_66_ladder_3;
            _3257 = frontier_phi_65_66_ladder_5;
            _3259 = frontier_phi_65_66_ladder_1;
            _3261 = frontier_phi_65_66_ladder_2;
            _3263 = frontier_phi_65_66_ladder;
        }
        float _3268 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3064 = (_3268 * _3259) + _2577;
        _3066 = (_3268 * _3261) + _2579;
        _3068 = (_3268 * _3263) + _2581;
        _3070 = ((_3253 * _993) * _3268) + _2915;
        _3072 = ((_3255 * _994) * _3268) + _2917;
        _3074 = ((_3257 * _995) * _3268) + _2919;
    }
    else
    {
        _3064 = _2577;
        _3066 = _2579;
        _3068 = _2581;
        _3070 = _2915;
        _3072 = _2917;
        _3074 = _2919;
    }
    float _5107 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _5118 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _5129 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _5140 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3092 = ((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3064 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1007))) + ((_3070 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3093 = ((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3066 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1007))) + ((_3072 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3094 = ((isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0))) * (_3068 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1007))) + ((_3074 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3099 = cbInstanceData._m0[_899 + 6u].w * (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)));
    float _3104 = _795 / cbSceneParam._m0[86u].x;
    float _3105 = _796 / cbSceneParam._m0[86u].y;
    vec4 _3119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3121 = _3119.x;
    float _3122 = _3119.y;
    float _3123 = _3119.z;
    float _3124 = _3119.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3158 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3159 = _3158 / _718;
        float _3170 = _3159 * _768;
        float _3171 = _769 * _3159;
        float _3172 = (-0.0) - _3171;
        float _3173 = _3159 * _770;
        float _3175 = (cbSceneParam._m0[77u].w * _3172) / _3158;
        float _3176 = _3175 + cbSceneParam._m0[79u].w;
        float _3177 = cbSceneParam._m0[79u].w - _3171;
        float _3183 = sqrt(((_3170 * _3170) + (_3171 * _3171)) + (_3173 * _3173));
        float _3186 = (1.0 - (cbSceneParam._m0[77u].w / _3158)) * _3183;
        float _3191 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3193 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3370;
        if (abs((_3172 - _3175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3370 = ((((_3176 > 0.0) ? exp2(_3191 * _3176) : (2.0 - exp2(_3193 * _3176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3186;
        }
        else
        {
            float _3314 = 1.0 / cbSceneParam._m0[80u].x;
            float _3315 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : max(_3176, _3177));
            float _3316 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : min(_3176, _3177));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            _3370 = ((abs(_3183 / _3172) * cbSceneParam._m0[80u].y) * ((((_3325 - _3326) * 2.0) - ((exp2(_3191 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0)))) - exp2(_3191 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))))) * _3314)) - ((exp2(_3193 * _3325) - exp2(_3193 * _3326)) * _3314))) + (_3186 * cbSceneParam._m0[80u].z);
        }
        vec4 _3372 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, 1.0), 0.0);
        float _3381 = exp2((_3370 * (-1.44269502162933349609375)) * (1.0 - _3372.w));
        float _3382 = log2(_3381);
        float _3398 = log2(_3124);
        _3195 = (exp2(_3398 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].x)) * _3372.x) / cbSceneParam._m0[78u].x)) + _3121;
        _3197 = (exp2(_3398 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].y)) * _3372.y) / cbSceneParam._m0[78u].y)) + _3122;
        _3199 = (exp2(_3398 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].z)) * _3372.z) / cbSceneParam._m0[78u].z)) + _3123;
        _3201 = _3381 * _3124;
    }
    else
    {
        _3195 = _3121;
        _3197 = _3122;
        _3199 = _3123;
        _3201 = _3124;
    }
    bool _3408;
    vec4 _3211;
    vec4 _3233;
    float _3235;
    float _3239;
    float _3240;
    float _3241;
    float _3242;
    bool _3252;
    for (;;)
    {
        _3211 = cbMatDynParam._m0[0u];
        float _3213 = roundEven(_3211.y);
        bool _3214 = _3213 == 3.0;
        float _3215 = log2(_3201);
        float _3222 = exp2(_3215 * cbSceneParam._m0[78u].x) * _3092;
        float _3223 = exp2(_3215 * cbSceneParam._m0[78u].y) * _3093;
        float _3224 = exp2(_3215 * cbSceneParam._m0[78u].z) * _3094;
        float _3231 = _784 + (-0.5);
        _3233 = cbMtdParam._m0[1u];
        _3235 = _3233.y * _3231;
        float _3238 = (_3213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3239 = _3238 * (_3214 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3195)));
        _3240 = _3238 * (_3214 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3197)));
        _3241 = _3238 * (_3214 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3199)));
        _3242 = _3231 * 0.999000012874603271484375;
        _3252 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3252)
        {
            if ((cbInstanceData._m0[_899 + 7u].x + _3242) < 0.5)
            {
                _3408 = true;
                break;
            }
        }
        uint _3349 = _900 + uint(_3211.w);
        if ((cbInstanceData._m0[_3349].w < 1.0) && ((cbInstanceData._m0[_3349].w + _3242) < 0.5))
        {
            _3408 = true;
            break;
        }
        if ((_3235 + _451) < _3233.x)
        {
            _3408 = true;
            break;
        }
        _3408 = false;
        break;
    }
    float _3612;
    if (_3408)
    {
        discard_state = true;
        _3612 = 0.0;
    }
    else
    {
        _3612 = _3099;
    }
    SV_Target.x = _3239;
    SV_Target.y = _3240;
    SV_Target.z = _3241;
    SV_Target.w = _3612;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3099;
    discard_exit();
}


