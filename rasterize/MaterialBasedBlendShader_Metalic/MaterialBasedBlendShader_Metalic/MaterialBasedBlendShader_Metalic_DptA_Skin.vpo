#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_1;
layout(location = 4) out vec4 TEXCOORD_4;
layout(location = 5) out float TEXCOORD_8;
layout(location = 5, component = 1) out vec2 TEXCOORD_10;
layout(location = 5, component = 3) out float TEXCOORD_14;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_4.w = 0.0;
    TEXCOORD_8 = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_14 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _199 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _213 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _223 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _225 = texelFetch(g_InstanceIndexBuffer, int(_223));
    uint _226 = _225.x;
    precise float _227 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _232 = isnan(_227) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _227 : max(0.001000000047497451305389404296875, _227));
    precise float _234 = BLENDWEIGHT.x / _232;
    precise float _235 = BLENDWEIGHT.y / _232;
    precise float _236 = BLENDWEIGHT.z / _232;
    precise float _237 = BLENDWEIGHT.w / _232;
    uint _239 = _226 * 13u;
    uvec4 _244 = floatBitsToUint(cbInstanceData._m0[_239 + 4u]);
    uint _245 = _244.x;
    uint _247 = (_245 + uint(float(BLENDINDICES.x))) * 3u;
    uint _254 = _247 + 1u;
    uint _261 = _247 + 2u;
    precise float _268 = _234 * cbObjMatrix._m0[_247].x;
    precise float _269 = _234 * cbObjMatrix._m0[_254].x;
    precise float _270 = _234 * cbObjMatrix._m0[_261].x;
    precise float _271 = _234 * cbObjMatrix._m0[_247].y;
    precise float _272 = _234 * cbObjMatrix._m0[_254].y;
    precise float _273 = _234 * cbObjMatrix._m0[_261].y;
    precise float _274 = _234 * cbObjMatrix._m0[_247].z;
    precise float _275 = _234 * cbObjMatrix._m0[_254].z;
    precise float _276 = _234 * cbObjMatrix._m0[_261].z;
    precise float _277 = _234 * cbObjMatrix._m0[_247].w;
    precise float _278 = _234 * cbObjMatrix._m0[_254].w;
    precise float _279 = _234 * cbObjMatrix._m0[_261].w;
    uint _282 = (_245 + uint(float(BLENDINDICES.y))) * 3u;
    uint _289 = _282 + 1u;
    uint _296 = _282 + 2u;
    precise float _303 = _235 * cbObjMatrix._m0[_282].x;
    precise float _304 = _235 * cbObjMatrix._m0[_289].x;
    precise float _305 = _235 * cbObjMatrix._m0[_296].x;
    precise float _306 = _235 * cbObjMatrix._m0[_282].y;
    precise float _307 = _235 * cbObjMatrix._m0[_289].y;
    precise float _308 = _235 * cbObjMatrix._m0[_296].y;
    precise float _309 = _235 * cbObjMatrix._m0[_282].z;
    precise float _310 = _235 * cbObjMatrix._m0[_289].z;
    precise float _311 = _235 * cbObjMatrix._m0[_296].z;
    precise float _312 = _235 * cbObjMatrix._m0[_282].w;
    precise float _313 = _235 * cbObjMatrix._m0[_289].w;
    precise float _314 = _235 * cbObjMatrix._m0[_296].w;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    uint _329 = (_245 + uint(float(BLENDINDICES.z))) * 3u;
    uint _336 = _329 + 1u;
    uint _343 = _329 + 2u;
    precise float _350 = _236 * cbObjMatrix._m0[_329].x;
    precise float _351 = _236 * cbObjMatrix._m0[_336].x;
    precise float _352 = _236 * cbObjMatrix._m0[_343].x;
    precise float _353 = _236 * cbObjMatrix._m0[_329].y;
    precise float _354 = _236 * cbObjMatrix._m0[_336].y;
    precise float _355 = _236 * cbObjMatrix._m0[_343].y;
    precise float _356 = _236 * cbObjMatrix._m0[_329].z;
    precise float _357 = _236 * cbObjMatrix._m0[_336].z;
    precise float _358 = _236 * cbObjMatrix._m0[_343].z;
    precise float _359 = _236 * cbObjMatrix._m0[_329].w;
    precise float _360 = _236 * cbObjMatrix._m0[_336].w;
    precise float _361 = _236 * cbObjMatrix._m0[_343].w;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    uint _376 = (_245 + uint(float(BLENDINDICES.w))) * 3u;
    uint _383 = _376 + 1u;
    uint _390 = _376 + 2u;
    precise float _397 = _237 * cbObjMatrix._m0[_376].x;
    precise float _398 = _237 * cbObjMatrix._m0[_383].x;
    precise float _399 = _237 * cbObjMatrix._m0[_390].x;
    precise float _400 = _237 * cbObjMatrix._m0[_376].y;
    precise float _401 = _237 * cbObjMatrix._m0[_383].y;
    precise float _402 = _237 * cbObjMatrix._m0[_390].y;
    precise float _403 = _237 * cbObjMatrix._m0[_376].z;
    precise float _404 = _237 * cbObjMatrix._m0[_383].z;
    precise float _405 = _237 * cbObjMatrix._m0[_390].z;
    precise float _406 = _237 * cbObjMatrix._m0[_376].w;
    precise float _407 = _237 * cbObjMatrix._m0[_383].w;
    precise float _408 = _237 * cbObjMatrix._m0[_390].w;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = POSITION.x * _409;
    precise float _422 = POSITION.y * _412;
    precise float _423 = _422 + _421;
    precise float _424 = POSITION.z * _415;
    precise float _425 = _424 + _423;
    precise float _426 = 1.0 * _418;
    precise float _427 = _426 + _425;
    precise float _428 = POSITION.x * _410;
    precise float _429 = POSITION.y * _413;
    precise float _430 = _429 + _428;
    precise float _431 = POSITION.z * _416;
    precise float _432 = _431 + _430;
    precise float _433 = 1.0 * _419;
    precise float _434 = _433 + _432;
    precise float _435 = POSITION.x * _411;
    precise float _436 = POSITION.y * _414;
    precise float _437 = _436 + _435;
    precise float _438 = POSITION.z * _417;
    precise float _439 = _438 + _437;
    precise float _440 = 1.0 * _420;
    precise float _441 = _440 + _439;
    float _447 = cbSceneParam._m0[3u].x - _427;
    float _448 = cbSceneParam._m0[3u].y - _434;
    float _449 = cbSceneParam._m0[3u].z - _441;
    precise float _475 = _427 - cbSceneParam._m0[3u].x;
    precise float _476 = _434 - cbSceneParam._m0[3u].y;
    precise float _477 = _441 - cbSceneParam._m0[3u].z;
    precise float _505 = _475 * cbSceneParam._m0[24u].x;
    precise float _506 = _476 * cbSceneParam._m0[24u].y;
    precise float _507 = _506 + _505;
    precise float _508 = _477 * cbSceneParam._m0[24u].z;
    precise float _509 = _508 + _507;
    precise float _510 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _511 = _510 + _509;
    precise float _512 = _475 * cbSceneParam._m0[25u].x;
    precise float _513 = _476 * cbSceneParam._m0[25u].y;
    precise float _514 = _513 + _512;
    precise float _515 = _477 * cbSceneParam._m0[25u].z;
    precise float _516 = _515 + _514;
    precise float _517 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _518 = _517 + _516;
    precise float _519 = _475 * cbSceneParam._m0[26u].x;
    precise float _520 = _476 * cbSceneParam._m0[26u].y;
    precise float _521 = _520 + _519;
    precise float _522 = _477 * cbSceneParam._m0[26u].z;
    precise float _523 = _522 + _521;
    precise float _524 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _525 = _524 + _523;
    precise float _526 = _475 * cbSceneParam._m0[27u].x;
    precise float _527 = _476 * cbSceneParam._m0[27u].y;
    precise float _528 = _527 + _526;
    precise float _529 = _477 * cbSceneParam._m0[27u].z;
    precise float _530 = _529 + _528;
    precise float _531 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _532 = _531 + _530;
    gl_Position.x = _511;
    gl_Position.y = _518;
    gl_Position.z = _525;
    gl_Position.w = _532;
    NORMAL_1.x = fma(_202, _415, fma(_201, _412, _409 * _199));
    NORMAL_1.y = fma(_202, _416, fma(_201, _413, _410 * _199));
    NORMAL_1.z = fma(_202, _417, fma(_201, _414, _411 * _199));
    NORMAL_1.w = float(_226);
    TANGENT_1.x = fma(_213, _415, fma(_212, _412, _409 * _211));
    TANGENT_1.y = fma(_213, _416, fma(_212, _413, _410 * _211));
    TANGENT_1.z = fma(_213, _417, fma(_212, _414, _411 * _211));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = COLOR.x;
    TEXCOORD_1.y = COLOR.y;
    TEXCOORD_1.z = COLOR.z;
    TEXCOORD_1.w = COLOR.w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_4.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_8 = COLOR_1.x;
    TEXCOORD_10.x = _525;
    TEXCOORD_10.y = _532;
    TEXCOORD_14 = sqrt(((_447 * _447) + (_448 * _448)) + (_449 * _449));
    gl_ClipDistance[0u] = dot(vec4(_511, _518, _525, _532), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_511, _518, _525, _532), vec4(cbInstanceData._m0[_239 + 3u]));
}


