#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _834;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3454 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))));
    float _277 = fma(_274, _211, fma(_267, _203 * TANGENT.x, (_189 * _182) * _265));
    float _280 = fma(_274, _212, fma(_267, _203 * TANGENT.y, (_189 * _183) * _265));
    float _283 = fma(_274, _213, fma(_267, _203 * TANGENT.z, (_189 * _184) * _265));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3465 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _291 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3487 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3498 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3509 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _295 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _402 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _405 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3520 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _433 = 1.0 - _295;
    float _434 = _430 * _433;
    float _435 = _431 * _433;
    float _436 = _432 * _433;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _295;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _295;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    vec4 _456 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _459 = _456.x * TEXCOORD.z;
    float _460 = dot(vec3(_288, _289, _290), vec3(_369, _370, _371));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _288) - _369;
    float _468 = (_463 * _289) - _370;
    float _469 = (_463 * _290) - _371;
    float _473 = abs(dot(vec3(_369, _370, _371), vec3(_288, _289, _290)));
    float _3553 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_291);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _494 = (1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _495 = _488 * _475;
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _562 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _566 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _591 = _523 + _288;
        float _592 = _527 + _289;
        float _593 = _531 + _290;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_288, _289, _290), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3601 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_288, _289, _290), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3634 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_288, _289, _290), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3667 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _874 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _878 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _882 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _905 = _523 + _288;
        float _906 = _527 + _289;
        float _907 = _531 + _290;
        float _917 = fma(_907, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905)) - _874;
        float _918 = fma(_907, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905)) - _878;
        float _919 = fma(_907, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905)) - _882;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_874 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_878 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[35u].z) + ((((((_882 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_288, _289, _290), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3730 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_288, _289, _290), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3763 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_288, _289, _290), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3796 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _834;
        _1144 = _834;
        _1145 = _834;
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_833, _837, _840, _843));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_835, _838, _841, _844));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_836, _839, _842, _845));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1280 = isnan(_1279) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1279 : min(cbModelParam._m0[25u].z, _1279));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1329 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1333 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1337 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1340 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1343 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1346 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1374;
        if (_1340 > 0.0)
        {
            _1374 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1374 = frontier_phi_16_14_ladder;
        }
        float _1550;
        if (_1343 > 0.0)
        {
            _1550 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1550 = frontier_phi_25_21_ladder;
        }
        float _1846;
        if (_1346 > 0.0)
        {
            _1846 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1846 = frontier_phi_37_32_ladder;
        }
        float _1848 = isnan(_1550) ? _1374 : (isnan(_1374) ? _1550 : min(_1374, _1550));
        float _1849 = isnan(_1846) ? _1848 : (isnan(_1848) ? _1846 : min(_1848, _1846));
        float _1853 = (_1849 * _1340) + _1329;
        float _1854 = (_1849 * _1343) + _1333;
        float _1855 = (_1849 * _1346) + _1337;
        float _1856 = _1849 * 9.9999997473787516355514526367188e-05;
        float _1858 = (-1.0) - _1856;
        float _1860 = _1856 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1855 > _1860) || ((_1855 < _1858) || ((_1854 > _1860) || ((_1854 < _1858) || ((_1853 < _1858) || (_1853 > _1860))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1855, cbModelParam._m0[9u].z, fma(_1854, cbModelParam._m0[9u].y, _1853 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1855, cbModelParam._m0[10u].z, fma(_1854, cbModelParam._m0[10u].y, _1853 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1855, cbModelParam._m0[11u].z, fma(_1854, cbModelParam._m0[11u].y, _1853 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_15_37_ladder = _2000.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2000.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2000.z * cbModelParam._m0[1u].y;
        }
        _1362 = frontier_phi_15_37_ladder_1;
        _1364 = frontier_phi_15_37_ladder;
        _1366 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1280);
        _1362 = _1350.x * cbModelParam._m0[1u].y;
        _1364 = _1350.y * cbModelParam._m0[1u].y;
        _1366 = _1350.z * cbModelParam._m0[1u].y;
    }
    float _1370 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1370 : min(cbModelParam._m0[25u].w, _1370));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1428 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1432 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1436 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1439 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1442 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1445 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1555;
        if (_1439 > 0.0)
        {
            _1555 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1555 = frontier_phi_27_23_ladder;
        }
        float _1873;
        if (_1442 > 0.0)
        {
            _1873 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1873 = frontier_phi_39_34_ladder;
        }
        float _2211;
        if (_1445 > 0.0)
        {
            _2211 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2211 = frontier_phi_49_46_ladder;
        }
        float _2213 = isnan(_1873) ? _1555 : (isnan(_1555) ? _1873 : min(_1555, _1873));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1439) + _1428;
        float _2219 = (_2214 * _1442) + _1432;
        float _2220 = (_2214 * _1445) + _1436;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1371);
            frontier_phi_24_49_ladder = _2342.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2342.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2342.x * cbModelParam._m0[1u].z;
        }
        _1464 = frontier_phi_24_49_ladder_2;
        _1466 = frontier_phi_24_49_ladder_1;
        _1468 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1371);
        _1464 = _1448.x * cbModelParam._m0[1u].z;
        _1466 = _1448.y * cbModelParam._m0[1u].z;
        _1468 = _1448.z * cbModelParam._m0[1u].z;
    }
    float _1481 = (((_494 * _444) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_494 * _446) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_494 * _447) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1488 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1481 * cbSceneParam._m0[91u].x));
    float _1529 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1541 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1542 = _1529 / _1541;
    float _1543 = _1533 / _1541;
    float _1544 = _1537 / _1541;
    float _1691;
    float _1692;
    float _1693;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1571 = ((uint(_1544 > cbSceneParam._m0[59u].y) + uint(_1544 > cbSceneParam._m0[59u].x)) + uint(_1544 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1572 = _1571 + 43u;
        uint _1580 = _1571 + 44u;
        uint _1588 = _1571 + 45u;
        uint _1596 = _1571 + 46u;
        float _1607 = fma(_1541, cbSceneParam._m0[_1572].w, fma(_1537, cbSceneParam._m0[_1572].z, fma(_1533, cbSceneParam._m0[_1572].y, _1529 * cbSceneParam._m0[_1572].x)));
        float _1611 = fma(_1541, cbSceneParam._m0[_1580].w, fma(_1537, cbSceneParam._m0[_1580].z, fma(_1533, cbSceneParam._m0[_1580].y, _1529 * cbSceneParam._m0[_1580].x)));
        float _1619 = fma(_1541, cbSceneParam._m0[_1596].w, fma(_1537, cbSceneParam._m0[_1596].z, fma(_1533, cbSceneParam._m0[_1596].y, _1529 * cbSceneParam._m0[_1596].x)));
        float _1624 = cbSceneParam._m0[33u].z * _1619;
        float _1626 = cbSceneParam._m0[33u].w * _1619;
        float _1629 = fma(_1541, cbSceneParam._m0[_1588].w, fma(_1537, cbSceneParam._m0[_1588].z, fma(_1533, cbSceneParam._m0[_1588].y, _1529 * cbSceneParam._m0[_1588].x))) / _1619;
        float _1677 = (cbSceneParam._m0[33u].x - sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544))) * cbSceneParam._m0[33u].y;
        float _3922 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1684 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1624 + _1607) / _1619, (_1626 + _1611) / _1619), _1629), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1626 + _1607) / _1619, (_1611 - _1624) / _1619), _1629), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1607 - _1624) / _1619, (_1611 - _1626) / _1619), _1629), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1607 - _1626) / _1619, (_1624 + _1611) / _1619), _1629), 0.0)).x), vec4(0.25)));
        _1691 = 1.0 - (_1684 * cbSceneParam._m0[34u].x);
        _1692 = 1.0 - (_1684 * cbSceneParam._m0[34u].y);
        _1693 = 1.0 - (_1684 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1691 = 1.0;
        _1692 = 1.0;
        _1693 = 1.0;
    }
    float _1757;
    float _1759;
    float _1761;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1745 = fma(_1541, cbSceneParam._m0[63u].w, fma(_1537, cbSceneParam._m0[63u].z, fma(_1533, cbSceneParam._m0[63u].y, _1529 * cbSceneParam._m0[63u].x)));
        float _1746 = fma(_1541, cbSceneParam._m0[60u].w, fma(_1537, cbSceneParam._m0[60u].z, fma(_1533, cbSceneParam._m0[60u].y, _1529 * cbSceneParam._m0[60u].x))) / _1745;
        float _1747 = fma(_1541, cbSceneParam._m0[61u].w, fma(_1537, cbSceneParam._m0[61u].z, fma(_1533, cbSceneParam._m0[61u].y, _1529 * cbSceneParam._m0[61u].x))) / _1745;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1746 >= cbSceneParam._m0[64u].x) && (_1747 >= cbSceneParam._m0[64u].y)) && (_1746 <= cbSceneParam._m0[64u].z)) && (_1747 <= cbSceneParam._m0[64u].w))
        {
            float _1886 = fma(_1541, cbSceneParam._m0[62u].w, fma(_1537, cbSceneParam._m0[62u].z, fma(_1533, cbSceneParam._m0[62u].y, _1529 * cbSceneParam._m0[62u].x))) / _1745;
            float _1890 = isnan(cbSceneParam._m0[41u].w) ? _1886 : (isnan(_1886) ? cbSceneParam._m0[41u].w : max(_1886, cbSceneParam._m0[41u].w));
            float _1933 = (cbSceneParam._m0[33u].x - sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544))) * cbSceneParam._m0[33u].y;
            float _3938 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
            float _1940 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1746, cbSceneParam._m0[33u].w + _1747), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1746, _1747 - cbSceneParam._m0[33u].z), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1746 - cbSceneParam._m0[33u].z, _1747 - cbSceneParam._m0[33u].w), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1746 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1747), _1890), 0.0)).x), vec4(0.25)));
            float _1944 = 1.0 - (_1940 * cbSceneParam._m0[34u].x);
            float _1945 = 1.0 - (_1940 * cbSceneParam._m0[34u].y);
            float _1946 = 1.0 - (_1940 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1945) ? _1692 : (isnan(_1692) ? _1945 : min(_1692, _1945));
            frontier_phi_36_35_ladder_1 = isnan(_1946) ? _1693 : (isnan(_1693) ? _1946 : min(_1693, _1946));
            frontier_phi_36_35_ladder_2 = isnan(_1944) ? _1691 : (isnan(_1691) ? _1944 : min(_1691, _1944));
        }
        else
        {
            frontier_phi_36_35_ladder = _1692;
            frontier_phi_36_35_ladder_1 = _1693;
            frontier_phi_36_35_ladder_2 = _1691;
        }
        _1757 = frontier_phi_36_35_ladder_2;
        _1759 = frontier_phi_36_35_ladder;
        _1761 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1757 = _1691;
        _1759 = _1692;
        _1761 = _1693;
    }
    uvec4 _1766 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1768 = _1766.x * 14u;
    uint _1769 = _1768 + 13u;
    float _1776 = _459 + (-1.0);
    float _1781 = (cbLight._m0[_1769].x * _1776) + 1.0;
    float _1782 = (cbLight._m0[_1769].y * _1776) + 1.0;
    float _1783 = (cbLight._m0[_1769].z * _1776) + 1.0;
    float _1784 = (cbLight._m0[_1769].w * _1776) + 1.0;
    uint _1785 = _1768 + 5u;
    float _1791 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1795 = _1768 + 4u;
    float _1805 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1809 = _1768 | 1u;
    float _1820 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_288, _289, _290));
    float _1823 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_288, _289, _290));
    float _3974 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _3985 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.3183098733425140380859375;
    float _1830 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.3183098733425140380859375;
    float _1837 = ((cbLight._m0[_1785].x * _1791) * _1830) + (((cbLight._m0[_1795].x * _1757) * _1805) * _1828);
    float _1838 = ((_1791 * cbLight._m0[_1785].y) * _1830) + (((cbLight._m0[_1795].y * _1759) * _1805) * _1828);
    float _1839 = ((_1791 * cbLight._m0[_1785].z) * _1830) + (((cbLight._m0[_1795].z * _1761) * _1805) * _1828);
    uvec4 _1843 = floatBitsToUint(cbLight._m0[_1768 + 12u]);
    bool _1845 = _1843.x == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1845)
    {
        _1947 = _1837;
        _1949 = _1838;
        _1951 = _1839;
    }
    else
    {
        uint _1955 = _1768 + 6u;
        float _1971 = (dot(vec3(cbLight._m0[_1768 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _3996 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1974 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _1947 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1837;
        _1949 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1838;
        _1951 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1839;
    }
    bool _1954 = _1843.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1954)
    {
        _2009 = _1947;
        _2011 = _1949;
        _2013 = _1951;
    }
    else
    {
        uint _2182 = _1768 + 7u;
        float _2198 = (dot(vec3(cbLight._m0[_1768 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4012 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2201 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2009 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _1947;
        _2011 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _1949;
        _2013 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _1951;
    }
    uint _2016 = _1768 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _291) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1768].x + _369;
    float _2032 = cbLight._m0[_1768].y + _370;
    float _2033 = cbLight._m0[_1768].z + _371;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1768].xyz));
    float _4028 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2045 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2046 = dot(vec3(_288, _289, _290), vec3(_2038, _2039, _2040));
    float _4050 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_2038, _2039, _2040));
    float _4061 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
    float _2067 = 0.959999978542327880859375 - _441;
    float _2069 = 0.959999978542327880859375 - _442;
    float _2070 = 0.959999978542327880859375 - _443;
    float _2077 = 1.0 - _2030;
    float _2088 = (0.5 / (((_2045 * ((_2044 * _2077) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2077) + _2030) * _2044))) * _2044;
    float _4072 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2104 = _1768 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _291) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1809].x + _369;
    float _2118 = cbLight._m0[_1809].y + _370;
    float _2119 = cbLight._m0[_1809].z + _371;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1809].xyz));
    float _4083 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2131 = dot(vec3(_288, _289, _290), vec3(_2124, _2125, _2126));
    float _4094 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2124, _2125, _2126));
    float _4105 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
    float _2157 = 1.0 - _2116;
    float _2167 = (0.5 / (((_2045 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2157) + _2116) * _2130))) * _2130;
    float _4116 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2179 = (((((_2150 * _2067) + _444) * cbLight._m0[_2104].x) * _2169) * _1791) + ((((cbLight._m0[_2016].x * _1757) * ((_2066 * _2067) + _444)) * _2090) * _1805);
    float _2180 = (((((_2150 * _2069) + _446) * cbLight._m0[_2104].y) * _2169) * _1791) + ((((cbLight._m0[_2016].y * _1759) * ((_2066 * _2069) + _446)) * _2090) * _1805);
    float _2181 = (((((_2150 * _2070) + _447) * cbLight._m0[_2104].z) * _2169) * _1791) + ((((cbLight._m0[_2016].z * _1761) * ((_2066 * _2070) + _447)) * _2090) * _1805);
    float _2237;
    float _2239;
    float _2241;
    if (_1845)
    {
        _2237 = _2179;
        _2239 = _2180;
        _2241 = _2181;
    }
    else
    {
        uint _2243 = _1768 + 2u;
        uint _2247 = _1768 + 10u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _291) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _369;
        float _2264 = cbLight._m0[_2243].y + _370;
        float _2265 = cbLight._m0[_2243].z + _371;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2243].xyz));
        float _4127 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2277 = dot(vec3(_288, _289, _290), vec3(_2270, _2271, _2272));
        float _4138 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4149 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
        float _2303 = 1.0 - _2262;
        float _2313 = (0.5 / (((_2045 * ((_2276 * _2303) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2303) + _2262) * _2276))) * _2276;
        float _4160 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _2237 = (((((_2296 * _2067) + _444) * cbLight._m0[_2247].x) * _2315) * _2316) + _2179;
        _2239 = (((((_2296 * _2069) + _446) * cbLight._m0[_2247].y) * _2315) * _2316) + _2180;
        _2241 = (((((_2296 * _2070) + _447) * cbLight._m0[_2247].z) * _2315) * _2316) + _2181;
    }
    float _2347;
    float _2349;
    float _2351;
    if (_1954)
    {
        _2347 = _2237;
        _2349 = _2239;
        _2351 = _2241;
    }
    else
    {
        uint _2358 = _1768 + 3u;
        uint _2362 = _1768 + 11u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _291) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _369;
        float _2379 = cbLight._m0[_2358].y + _370;
        float _2380 = cbLight._m0[_2358].z + _371;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2358].xyz));
        float _4176 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2392 = dot(vec3(_288, _289, _290), vec3(_2385, _2386, _2387));
        float _4187 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4198 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
        float _2418 = 1.0 - _2377;
        float _2428 = (0.5 / (((_2045 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2418) + _2377) * _2391))) * _2391;
        float _4209 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2347 = (((((_2411 * _2067) + _444) * cbLight._m0[_2362].x) * _2430) * _2431) + _2237;
        _2349 = (((((_2411 * _2069) + _446) * cbLight._m0[_2362].y) * _2430) * _2431) + _2239;
        _2351 = (((((_2411 * _2070) + _447) * cbLight._m0[_2362].z) * _2430) * _2431) + _2241;
    }
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_1766.y == 0u)
    {
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.x;
        uint _2464 = uint((float(_2452.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2453))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2453)));
        float _2474 = (log2(_1544 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2475 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        uint _2478 = uint(isnan(14.0) ? _2475 : (isnan(_2475) ? 14.0 : min(_2475, 14.0)));
        uvec4 _2483 = texelFetch(g_lightClusterGridBuffer, int(((_2478 << 2u) + (_2464 << 6u)) >> 2u));
        uint _2484 = _2483.x;
        uint _2485 = _2452.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2485 >> 4u) & 15u)) + 4294967295u) & _2484) == 0u) || ((_2485 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2723)
                {
                    frontier_phi_68_pred = _2712;
                    frontier_phi_68_pred_1 = _2711;
                    frontier_phi_68_pred_2 = _2710;
                    frontier_phi_68_pred_3 = _2708;
                    frontier_phi_68_pred_4 = _2707;
                    frontier_phi_68_pred_5 = _2709;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2722;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2713 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _1542;
                        float _2898 = _2857.y - _1543;
                        float _2899 = _2857.z - _1544;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_399, _402, _405), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4235 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _1542;
                        float _2933 = (-0.0) - _1543;
                        float _2934 = (-0.0) - _1544;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2948 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2949 = 1.0 - _475;
                        float _2956 = sqrt(1.0 - ((1.0 - (_2949 * _2949)) * (1.0 - (_2948 * _2948))));
                        float _2957 = _2956 * _2956;
                        float _2958 = _2957 * _2957;
                        float _2959 = _2939 + _2904;
                        float _2960 = _2940 + _2905;
                        float _2961 = _2941 + _2906;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2969 = dot(vec3(_399, _402, _405), vec3(_2939, _2940, _2941));
                        float _4251 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2973 = dot(vec3(_399, _402, _405), vec3(_2965 * _2959, _2965 * _2960, _2965 * _2961));
                        float _4262 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2980 = ((_2976 * _2976) * (_2958 + (-1.0))) + 1.0;
                        float _2981 = _2917 * _2957;
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2907) + _2982;
                        float _4273 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2987 = 1.0 - _2957;
                        float _2997 = (0.5 / (((_2986 * ((_2972 * _2987) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2986 * _2987) + _2957) * _2972))) * _2986;
                        float _4284 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3008 = (((_2958 * 3.1415927410125732421875) * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) / ((_2980 * _2980) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2766 = (_2928 * _2876.x) + _2834;
                        _2767 = (_2928 * _2876.y) + _2835;
                        _2768 = (_2928 * _2876.z) + _2836;
                        _2763 = (_3008 * _2893.x) + _2831;
                        _2764 = (_3008 * _2893.y) + _2832;
                        _2765 = (_3008 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_68_pred = _2768;
                    frontier_phi_68_pred_1 = _2767;
                    frontier_phi_68_pred_2 = _2766;
                    frontier_phi_68_pred_3 = _2764;
                    frontier_phi_68_pred_4 = _2763;
                    frontier_phi_68_pred_5 = _2765;
                }
                _2574 = frontier_phi_68_pred;
                _2572 = frontier_phi_68_pred_1;
                _2570 = frontier_phi_68_pred_2;
                _2566 = frontier_phi_68_pred_3;
                _2564 = frontier_phi_68_pred_4;
                _2568 = frontier_phi_68_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2564;
                    _2708 = _2566;
                    _2709 = _2568;
                    _2710 = _2570;
                    _2711 = _2572;
                    _2712 = _2574;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2580) & _2484) == 0u)
        {
            _2675 = _2563;
            _2677 = _2565;
            _2679 = _2567;
            _2681 = _2569;
            _2683 = _2571;
            _2685 = _2573;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
            float _2701 = _2700 * _1542;
            float _2702 = _2700 * _1543;
            float _2703 = _2700 * _1544;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2814 = _2563;
                float _2815 = _2565;
                float _2816 = _2567;
                float _2817 = _2569;
                float _2818 = _2571;
                float _2819 = _2573;
                uint _2820 = _2580;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2478 << 5u) + (_2464 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2830)
                    {
                        frontier_phi_74_pred = _2816;
                        frontier_phi_74_pred_1 = _2815;
                        frontier_phi_74_pred_2 = _2814;
                        frontier_phi_74_pred_3 = _2819;
                        frontier_phi_74_pred_4 = _2818;
                        frontier_phi_74_pred_5 = _2817;
                    }
                    else
                    {
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3026 = _2814;
                        float _3027 = _2815;
                        float _3028 = _2816;
                        float _3029 = _2817;
                        float _3030 = _2818;
                        float _3031 = _2819;
                        uint _3032 = _2829;
                        uint _3033;
                        vec4 _3058;
                        float _3059;
                        vec4 _3074;
                        vec3 _3086;
                        vec4 _3102;
                        vec4 _3118;
                        float _3165;
                        bool _3166;
                        for (;;)
                        {
                            uint _3043 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3032));
                            _3033 = (_3032 + 4294967295u) & _3032;
                            uint _3045 = _3043 * 40u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3059 = _3058.w;
                            uint _3061 = (_3043 * 40u) + 4u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3043 * 40u) + 8u;
                            _3086 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x));
                            uint _3089 = (_3043 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3043 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3043 * 40u) + 24u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3140 = (_3043 * 40u) + 28u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3165 = fma(_1544, _3153.z, fma(_1543, _3153.y, _3153.x * _1542)) + _3153.w;
                            _3166 = !((fma(_1544, _3134.z, fma(_1543, _3134.y, _3134.x * _1542)) + _3134.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3166)
                            {
                                float _3193 = _3058.x - _1542;
                                float _3194 = _3058.y - _1543;
                                float _3195 = _3058.z - _1544;
                                float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                                float _3199 = inversesqrt(_3196);
                                float _3200 = _3199 * _3193;
                                float _3201 = _3199 * _3194;
                                float _3202 = _3199 * _3195;
                                float _3206 = 1.0 - (_3196 / (_3059 * _3059));
                                float _4295 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3211 = sqrt(_3196) * _3074.w;
                                float _3213 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                                float _3214 = _3213 * _3213;
                                float _3217 = ((1.0 - _3214) * dot(vec3(_3200, _3201, _3202), vec3(_399, _402, _405))) + _3214;
                                float _3220 = _3211 * _3211;
                                float _3224 = (fma(_1544, _3102.z, fma(_1543, _3102.y, _3102.x * _1542)) + _3102.w) / _3165;
                                float _3225 = (fma(_1544, _3118.z, fma(_1543, _3118.y, _3118.x * _1542)) + _3118.w) / _3165;
                                float _3229 = 1.0 - dot(vec2(_3224, _3225), vec2(_3224, _3225));
                                float _4311 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3231 = _3230 * (((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3207) / ((_3220 * 0.699999988079071044921875) + 1.0));
                                float _3243 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                                float _3244 = 1.0 - _475;
                                float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                                float _3252 = _3251 * _3251;
                                float _3253 = _3252 * _3252;
                                float _3254 = _3200 - _2701;
                                float _3255 = _3201 - _2702;
                                float _3256 = _3202 - _2703;
                                float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                                float _3264 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4322 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3268 = dot(vec3(_399, _402, _405), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                                float _4333 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                                float _3276 = _3213 * _3252;
                                float _3277 = _3276 * _3276;
                                float _3283 = ((1.0 - _3277) * dot(vec3(_399, _402, _405), vec3(_3200, _3201, _3202))) + _3277;
                                float _4344 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3285 = 1.0 - _3252;
                                float _3295 = (0.5 / (((_3284 * ((_3267 * _3285) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3252) * _3267))) * _3284;
                                float _4355 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3305 = (_3230 * _3207) * (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3275 * _3275) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3305 * _3086.z;
                                frontier_phi_80_pred_1 = _3305 * _3086.y;
                                frontier_phi_80_pred_2 = _3305 * _3086.x;
                                frontier_phi_80_pred_3 = _3231 * _3074.z;
                                frontier_phi_80_pred_4 = _3231 * _3074.y;
                                frontier_phi_80_pred_5 = _3231 * _3074.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_80_pred;
                            _3310 = frontier_phi_80_pred_1;
                            _3309 = frontier_phi_80_pred_2;
                            _3314 = frontier_phi_80_pred_3;
                            _3313 = frontier_phi_80_pred_4;
                            _3312 = frontier_phi_80_pred_5;
                            _3016 = _3312 + _3029;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            _3013 = _3309 + _3026;
                            _3014 = _3310 + _3027;
                            _3015 = _3311 + _3028;
                            if (_3033 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3033;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3015;
                        frontier_phi_74_pred_1 = _3014;
                        frontier_phi_74_pred_2 = _3013;
                        frontier_phi_74_pred_3 = _3018;
                        frontier_phi_74_pred_4 = _3017;
                        frontier_phi_74_pred_5 = _3016;
                    }
                    _2680 = frontier_phi_74_pred;
                    _2678 = frontier_phi_74_pred_1;
                    _2676 = frontier_phi_74_pred_2;
                    _2686 = frontier_phi_74_pred_3;
                    _2684 = frontier_phi_74_pred_4;
                    _2682 = frontier_phi_74_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2676;
                        _2815 = _2678;
                        _2816 = _2680;
                        _2817 = _2682;
                        _2818 = _2684;
                        _2819 = _2686;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2684;
                frontier_phi_62_63_ladder_1 = _2682;
                frontier_phi_62_63_ladder_2 = _2680;
                frontier_phi_62_63_ladder_3 = _2686;
                frontier_phi_62_63_ladder_4 = _2678;
                frontier_phi_62_63_ladder_5 = _2676;
            }
            else
            {
                frontier_phi_62_63_ladder = _2571;
                frontier_phi_62_63_ladder_1 = _2569;
                frontier_phi_62_63_ladder_2 = _2567;
                frontier_phi_62_63_ladder_3 = _2573;
                frontier_phi_62_63_ladder_4 = _2565;
                frontier_phi_62_63_ladder_5 = _2563;
            }
            _2675 = frontier_phi_62_63_ladder_5;
            _2677 = frontier_phi_62_63_ladder_4;
            _2679 = frontier_phi_62_63_ladder_2;
            _2681 = frontier_phi_62_63_ladder_1;
            _2683 = frontier_phi_62_63_ladder;
            _2685 = frontier_phi_62_63_ladder_3;
        }
        float _2690 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2496 = (_2690 * _2681) + _2009;
        _2498 = (_2690 * _2683) + _2011;
        _2500 = (_2690 * _2685) + _2013;
        _2502 = ((_2675 * _444) * _2690) + _2347;
        _2504 = ((_2677 * _446) * _2690) + _2349;
        _2506 = ((_2679 * _447) * _2690) + _2351;
    }
    else
    {
        _2496 = _2009;
        _2498 = _2011;
        _2500 = _2013;
        _2502 = _2347;
        _2504 = _2349;
        _2506 = _2351;
    }
    float _4371 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4382 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4393 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    uint _2526 = _418 + 6u;
    float _2534 = _377 / cbSceneParam._m0[86u].x;
    float _2535 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2589 = _2588 / _311;
        float _2600 = _2589 * _362;
        float _2601 = _363 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2603 = _2589 * _364;
        float _2605 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2601;
        float _2613 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2776;
        if (abs((_2602 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2776 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2738 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2776 = ((abs(_2613 / _2602) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2623 * _2747) - exp2(_2623 * _2748)) * _2736))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2778 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2787 = exp2((_2776 * (-1.44269502162933349609375)) * (1.0 - _2778.w));
        float _2788 = log2(_2787);
        float _2804 = log2(_2554);
        _2625 = (exp2(_2804 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].x)) * _2778.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2627 = (exp2(_2804 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].y)) * _2778.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2629 = (exp2(_2804 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].z)) * _2778.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2631 = _2787 * _2554;
    }
    else
    {
        _2625 = _2551;
        _2627 = _2552;
        _2629 = _2553;
        _2631 = _2554;
    }
    float _2643 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2644 = _2643 == 3.0;
    float _2645 = log2(_2631);
    float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2496 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _459))) + ((_2502 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2498 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _459))) + ((_2504 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2500 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _459))) + ((_2506 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2663 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2663 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.y = _2663 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.z = _2663 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.w = cbInstanceData._m0[_2526].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
}


