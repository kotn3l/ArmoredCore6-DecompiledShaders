#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _830;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3167 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))));
    float _273 = fma(_270, _207, fma(_263, _199 * TANGENT.x, (_185 * _178) * _261));
    float _276 = fma(_270, _208, fma(_263, _199 * TANGENT.y, (_185 * _179) * _261));
    float _279 = fma(_270, _209, fma(_263, _199 * TANGENT.z, (_185 * _180) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3178 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3200 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3211 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3222 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _291 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _398 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _401 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _423 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_417].x;
    float _424 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_417].y;
    float _425 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0)))) * cbInstanceData._m0[_417].z;
    float _3233 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _3244 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _3255 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _429 = 1.0 - _291;
    float _430 = _426 * _429;
    float _431 = _427 * _429;
    float _432 = _428 * _429;
    float _437 = (_426 + (-0.039999999105930328369140625)) * _291;
    float _438 = (_427 + (-0.039999999105930328369140625)) * _291;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _291;
    float _440 = _437 + 0.039999999105930328369140625;
    float _442 = _438 + 0.039999999105930328369140625;
    float _443 = _439 + 0.039999999105930328369140625;
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _455 = _452.x * TEXCOORD.z;
    float _456 = dot(vec3(_284, _285, _286), vec3(_365, _366, _367));
    float _459 = _456 * 2.0;
    float _463 = (_459 * _284) - _365;
    float _464 = (_459 * _285) - _366;
    float _465 = (_459 * _286) - _367;
    float _469 = abs(dot(vec3(_365, _366, _367), vec3(_284, _285, _286)));
    float _3266 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _471 = sqrt(_287);
    float _484 = exp2((_471 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_471 * 3.0));
    float _490 = (1.0 - _484) * ((_471 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _491 = _484 * _471;
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _829;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _554 = fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519));
        float _558 = fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519));
        float _562 = fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519));
        float _587 = _519 + _284;
        float _588 = _523 + _285;
        float _589 = _527 + _286;
        float _599 = fma(_589, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _587)) - _554;
        float _600 = fma(_589, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _587)) - _558;
        float _601 = fma(_589, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _587)) - _562;
        float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
        float _618 = ((_605 * _599) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_554 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _619 = ((_605 * _600) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_558 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _620 = ((_605 * _601) / cbModelParam._m0[34u].z) + ((((((_562 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_618, _619, _620), 0.0);
        float _657 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_623.x + (-0.5));
        float _659 = _657 * (_623.y + (-0.5));
        float _660 = _657 * (_623.z + (-0.5));
        float _667 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_630.x + (-0.5));
        float _669 = _667 * (_630.y + (-0.5));
        float _670 = _667 * (_630.z + (-0.5));
        float _677 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_637.x + (-0.5));
        float _679 = _677 * (_637.y + (-0.5));
        float _680 = _677 * (_637.z + (-0.5));
        float _687 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_644.x + (-0.5));
        float _689 = _687 * (_644.y + (-0.5));
        float _690 = _687 * (_644.z + (-0.5));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = _658 * 0.5;
        float _695 = _668 * 0.5;
        float _696 = _678 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _711 = (dot(vec3(_284, _285, _286), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _721 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3314 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_723 + 1.0))) + _728) * _691;
        float _738 = _659 * 0.5;
        float _739 = _669 * 0.5;
        float _740 = _679 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _754 = (dot(vec3(_284, _285, _286), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3325 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _763 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3336 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3347 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_765 + 1.0))) + _770) * _692;
        float _780 = _660 * 0.5;
        float _781 = _670 * 0.5;
        float _782 = _680 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_284, _285, _286), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3380 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_807 + 1.0))) + _812) * _693;
        _829 = _660;
        _831 = _659;
        _832 = _658;
        _833 = _670;
        _834 = _669;
        _835 = _668;
        _836 = _680;
        _837 = _679;
        _838 = _678;
        _839 = _693;
        _840 = _692;
        _841 = _691;
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
    }
    else
    {
        _829 = _830;
        _831 = _830;
        _832 = _830;
        _833 = _830;
        _834 = _830;
        _835 = _830;
        _836 = _830;
        _837 = _830;
        _838 = _830;
        _839 = _830;
        _840 = _830;
        _841 = _830;
        _842 = 0.0;
        _843 = 0.0;
        _844 = 0.0;
    }
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _870 = fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519));
        float _874 = fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519));
        float _878 = fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519));
        float _901 = _519 + _284;
        float _902 = _523 + _285;
        float _903 = _527 + _286;
        float _913 = fma(_903, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901)) - _870;
        float _914 = fma(_903, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901)) - _874;
        float _915 = fma(_903, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901)) - _878;
        float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
        float _932 = ((_919 * _913) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_870 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_919 * _914) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_874 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_919 * _915) / cbModelParam._m0[35u].z) + ((((((_878 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        float _969 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_936.x + (-0.5));
        float _971 = _969 * (_936.y + (-0.5));
        float _972 = _969 * (_936.z + (-0.5));
        float _979 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_943.x + (-0.5));
        float _981 = _979 * (_943.y + (-0.5));
        float _982 = _979 * (_943.z + (-0.5));
        float _989 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_950.x + (-0.5));
        float _991 = _989 * (_950.y + (-0.5));
        float _992 = _989 * (_950.z + (-0.5));
        float _999 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_957.x + (-0.5));
        float _1001 = _999 * (_957.y + (-0.5));
        float _1002 = _999 * (_957.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_284, _285, _286), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3443 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_1033 + 1.0))) + _1038) * _1003;
        float _1048 = _971 * 0.5;
        float _1049 = _981 * 0.5;
        float _1050 = _991 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_284, _285, _286), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3476 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_1075 + 1.0))) + _1080) * _1004;
        float _1090 = _972 * 0.5;
        float _1091 = _982 * 0.5;
        float _1092 = _992 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_284, _285, _286), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3509 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1117 + 1.0))) + _1122) * _1005;
        _1139 = _972;
        _1140 = _971;
        _1141 = _970;
        _1142 = _982;
        _1143 = _981;
        _1144 = _980;
        _1145 = _992;
        _1146 = _991;
        _1147 = _990;
        _1148 = _1005;
        _1149 = _1004;
        _1150 = _1003;
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _830;
        _1140 = _830;
        _1141 = _830;
        _1142 = _830;
        _1143 = _830;
        _1144 = _830;
        _1145 = _830;
        _1146 = _830;
        _1147 = _830;
        _1148 = _830;
        _1149 = _830;
        _1150 = _830;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _842)) + _842;
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _843)) + _843;
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1186 = fma(_1165, cbSceneParam._m0[89u].z, fma(_1164, cbSceneParam._m0[89u].y, _1163 * cbSceneParam._m0[89u].x));
    float _1189 = fma(_1165, cbSceneParam._m0[90u].z, fma(_1164, cbSceneParam._m0[90u].y, _1163 * cbSceneParam._m0[90u].x));
    float _1192 = fma(_1165, cbSceneParam._m0[91u].z, fma(_1164, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1163));
    float _1207 = _463 * 0.5;
    float _1208 = _464 * 0.5;
    float _1209 = _465 * 0.5;
    float _1210 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1213 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1140, _1143, _1146, _1149));
    float _1216 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1250;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1223 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_829, _833, _836, _839));
        float _1227 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_831, _834, _837, _840));
        float _1231 = dot(vec4(_1207, _1208, _1209, 1.0), vec4(_832, _835, _838, _841));
        float _1238 = dot(vec4(cbModelParam._m0[39u]), vec4(_1207, _1208, _1209, 1.0));
        _1250 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1238) ? 0.0 : (isnan(0.0) ? _1238 : max(0.0, _1238))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1250 = 1.0;
    }
    float _1261;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1252 = dot(vec4(cbModelParam._m0[40u]), vec4(_1207, _1208, _1209, 1.0));
        _1261 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1261 = 1.0;
    }
    float _1265 = (_1261 * cbModelParam._m0[1u].x) + (_1250 * (1.0 - cbModelParam._m0[1u].x));
    float _1275 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1276 = isnan(_1275) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1275 : min(cbModelParam._m0[25u].z, _1275));
    float _1358;
    float _1360;
    float _1362;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1325 = fma(_527, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519)) + cbModelParam._m0[13u].w;
        float _1329 = fma(_527, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519)) + cbModelParam._m0[14u].w;
        float _1333 = fma(_527, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519)) + cbModelParam._m0[15u].w;
        float _1336 = fma(_465, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _463));
        float _1339 = fma(_465, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _463));
        float _1342 = fma(_465, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _463));
        float _1370;
        if (_1336 > 0.0)
        {
            _1370 = abs((1.0 - _1325) / _1336);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1325 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1370 = frontier_phi_16_14_ladder;
        }
        float _1578;
        if (_1339 > 0.0)
        {
            _1578 = abs((1.0 - _1329) / _1339);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1329 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_21_ladder;
        }
        float _1832;
        if (_1342 > 0.0)
        {
            _1832 = abs((1.0 - _1333) / _1342);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1333 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1832 = frontier_phi_37_32_ladder;
        }
        float _1834 = isnan(_1578) ? _1370 : (isnan(_1370) ? _1578 : min(_1370, _1578));
        float _1835 = isnan(_1832) ? _1834 : (isnan(_1834) ? _1832 : min(_1834, _1832));
        float _1839 = (_1835 * _1336) + _1325;
        float _1840 = (_1835 * _1339) + _1329;
        float _1841 = (_1835 * _1342) + _1333;
        float _1842 = _1835 * 9.9999997473787516355514526367188e-05;
        float _1844 = (-1.0) - _1842;
        float _1846 = _1842 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1841 > _1846) || ((_1841 < _1844) || ((_1840 > _1846) || ((_1840 < _1844) || ((_1839 < _1844) || (_1839 > _1846))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1841, cbModelParam._m0[9u].z, fma(_1840, cbModelParam._m0[9u].y, _1839 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1841, cbModelParam._m0[10u].z, fma(_1840, cbModelParam._m0[10u].y, _1839 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1841, cbModelParam._m0[11u].z, fma(_1840, cbModelParam._m0[11u].y, _1839 * cbModelParam._m0[11u].x))), _1276);
            frontier_phi_15_37_ladder = _1969.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1969.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1969.x * cbModelParam._m0[1u].y;
        }
        _1358 = frontier_phi_15_37_ladder_2;
        _1360 = frontier_phi_15_37_ladder_1;
        _1362 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_463, _464, _465), _1276);
        _1358 = _1346.x * cbModelParam._m0[1u].y;
        _1360 = _1346.y * cbModelParam._m0[1u].y;
        _1362 = _1346.z * cbModelParam._m0[1u].y;
    }
    float _1366 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1366 : min(cbModelParam._m0[25u].w, _1366));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1424 = fma(_527, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519)) + cbModelParam._m0[21u].w;
        float _1428 = fma(_527, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519)) + cbModelParam._m0[22u].w;
        float _1432 = fma(_527, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519)) + cbModelParam._m0[23u].w;
        float _1435 = fma(_465, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _463));
        float _1438 = fma(_465, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _463));
        float _1441 = fma(_465, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _463));
        float _1583;
        if (_1435 > 0.0)
        {
            _1583 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1583 = frontier_phi_27_23_ladder;
        }
        float _1859;
        if (_1438 > 0.0)
        {
            _1859 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1859 = frontier_phi_39_34_ladder;
        }
        float _2072;
        if (_1441 > 0.0)
        {
            _2072 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2072 = frontier_phi_48_45_ladder;
        }
        float _2074 = isnan(_1859) ? _1583 : (isnan(_1583) ? _1859 : min(_1583, _1859));
        float _2075 = isnan(_2072) ? _2074 : (isnan(_2074) ? _2072 : min(_2074, _2072));
        float _2079 = (_2075 * _1435) + _1424;
        float _2080 = (_2075 * _1438) + _1428;
        float _2081 = (_2075 * _1441) + _1432;
        float _2082 = _2075 * 9.9999997473787516355514526367188e-05;
        float _2083 = (-1.0) - _2082;
        float _2085 = _2082 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2081 > _2085) || ((_2081 < _2083) || ((_2080 > _2085) || ((_2080 < _2083) || ((_2079 < _2083) || (_2079 > _2085))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2279 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2081, cbModelParam._m0[17u].z, fma(_2080, cbModelParam._m0[17u].y, _2079 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2081, cbModelParam._m0[18u].z, fma(_2080, cbModelParam._m0[18u].y, _2079 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2081, cbModelParam._m0[19u].z, fma(_2080, cbModelParam._m0[19u].y, _2079 * cbModelParam._m0[19u].x))), _1367);
            frontier_phi_24_48_ladder = _2279.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2279.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2279.x * cbModelParam._m0[1u].z;
        }
        _1460 = frontier_phi_24_48_ladder_2;
        _1462 = frontier_phi_24_48_ladder_1;
        _1464 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_463, _464, _465), _1367);
        _1460 = _1444.x * cbModelParam._m0[1u].z;
        _1462 = _1444.y * cbModelParam._m0[1u].z;
        _1464 = _1444.z * cbModelParam._m0[1u].z;
    }
    float _1477 = (((_490 * _440) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1479 = (((_490 * _442) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1481 = (((_490 * _443) + _491) * _455) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1484 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, _1477 * cbSceneParam._m0[91u].x));
    uvec4 _1500 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1502 = _1500.x * 14u;
    uint _1503 = _1502 + 13u;
    float _1510 = _455 + (-1.0);
    float _1515 = (cbLight._m0[_1503].x * _1510) + 1.0;
    float _1516 = (cbLight._m0[_1503].y * _1510) + 1.0;
    float _1517 = (cbLight._m0[_1503].z * _1510) + 1.0;
    float _1518 = (cbLight._m0[_1503].w * _1510) + 1.0;
    uint _1519 = _1502 + 5u;
    float _1525 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
    uint _1529 = _1502 + 4u;
    float _1536 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    uint _1540 = _1502 | 1u;
    float _1551 = dot(vec3(cbLight._m0[_1502].xyz), vec3(_284, _285, _286));
    float _1554 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_284, _285, _286));
    float _3645 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
    float _3656 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1559 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.3183098733425140380859375;
    float _1561 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 0.3183098733425140380859375;
    float _1568 = ((cbLight._m0[_1519].x * _1525) * _1561) + ((cbLight._m0[_1529].x * _1536) * _1559);
    float _1569 = ((_1525 * cbLight._m0[_1519].y) * _1561) + ((_1536 * cbLight._m0[_1529].y) * _1559);
    float _1570 = ((_1525 * cbLight._m0[_1519].z) * _1561) + ((_1536 * cbLight._m0[_1529].z) * _1559);
    uvec4 _1575 = floatBitsToUint(cbLight._m0[_1502 + 12u]);
    bool _1577 = _1575.x == 0u;
    float _1588;
    float _1590;
    float _1592;
    if (_1577)
    {
        _1588 = _1568;
        _1590 = _1569;
        _1592 = _1570;
    }
    else
    {
        uint _1596 = _1502 + 6u;
        float _1612 = (dot(vec3(cbLight._m0[_1502 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1613 = _1612 * _1612;
        float _3667 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1615 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1588 = (((cbLight._m0[_1596].x * 0.3183098733425140380859375) * _1614) * _1615) + _1568;
        _1590 = (((cbLight._m0[_1596].y * 0.3183098733425140380859375) * _1614) * _1615) + _1569;
        _1592 = (((cbLight._m0[_1596].z * 0.3183098733425140380859375) * _1614) * _1615) + _1570;
    }
    bool _1595 = _1575.y == 0u;
    float _1633;
    float _1635;
    float _1637;
    if (_1595)
    {
        _1633 = _1588;
        _1635 = _1590;
        _1637 = _1592;
    }
    else
    {
        uint _1803 = _1502 + 7u;
        float _1819 = (dot(vec3(cbLight._m0[_1502 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _3683 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1822 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1633 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1588;
        _1635 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1590;
        _1637 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1592;
    }
    uint _1640 = _1502 + 8u;
    float _1653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1502].w)) * _287) * 0.949999988079071044921875);
    float _1654 = _1653 * _1653;
    float _1655 = cbLight._m0[_1502].x + _365;
    float _1656 = cbLight._m0[_1502].y + _366;
    float _1657 = cbLight._m0[_1502].z + _367;
    float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
    float _1662 = _1661 * _1655;
    float _1663 = _1661 * _1656;
    float _1664 = _1661 * _1657;
    float _1665 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1502].xyz));
    float _3699 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _1669 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1670 = dot(vec3(_284, _285, _286), vec3(_1662, _1663, _1664));
    float _3721 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1673 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _1674 = dot(vec3(cbLight._m0[_1502].xyz), vec3(_1662, _1663, _1664));
    float _3732 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1678 = _1654 * _1654;
    float _1682 = ((_1673 * _1673) * (_1678 + (-1.0))) + 1.0;
    float _1690 = exp2(log2(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * 5.0);
    float _1691 = 0.959999978542327880859375 - _437;
    float _1693 = 0.959999978542327880859375 - _438;
    float _1694 = 0.959999978542327880859375 - _439;
    float _1701 = 1.0 - _1654;
    float _1712 = (0.5 / (((_1669 * ((_1668 * _1701) + _1654)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1701) + _1654) * _1668))) * _1668;
    float _3743 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1714 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1678 / ((_1682 * _1682) * 3.141590118408203125));
    uint _1725 = _1502 + 9u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1540].w)) * _287) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1540].x + _365;
    float _1739 = cbLight._m0[_1540].y + _366;
    float _1740 = cbLight._m0[_1540].z + _367;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1540].xyz));
    float _3754 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1752 = dot(vec3(_284, _285, _286), vec3(_1745, _1746, _1747));
    float _3765 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1745, _1746, _1747));
    float _3776 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1737 * _1737;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1771 = exp2(log2(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * 5.0);
    float _1778 = 1.0 - _1737;
    float _1788 = (0.5 / (((_1669 * ((_1751 * _1778) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1778) + _1737) * _1751))) * _1751;
    float _3787 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    float _1800 = (((((_1771 * _1691) + _440) * cbLight._m0[_1725].x) * _1790) * _1525) + (((((_1690 * _1691) + _440) * cbLight._m0[_1640].x) * _1714) * _1536);
    float _1801 = (((((_1771 * _1693) + _442) * cbLight._m0[_1725].y) * _1790) * _1525) + (((((_1690 * _1693) + _442) * cbLight._m0[_1640].y) * _1714) * _1536);
    float _1802 = (((((_1771 * _1694) + _443) * cbLight._m0[_1725].z) * _1790) * _1525) + (((((_1690 * _1694) + _443) * cbLight._m0[_1640].z) * _1714) * _1536);
    float _1864;
    float _1866;
    float _1868;
    if (_1577)
    {
        _1864 = _1800;
        _1866 = _1801;
        _1868 = _1802;
    }
    else
    {
        uint _1870 = _1502 + 2u;
        uint _1874 = _1502 + 10u;
        float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _287) * 0.949999988079071044921875);
        float _1889 = _1888 * _1888;
        float _1890 = cbLight._m0[_1870].x + _365;
        float _1891 = cbLight._m0[_1870].y + _366;
        float _1892 = cbLight._m0[_1870].z + _367;
        float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
        float _1897 = _1896 * _1890;
        float _1898 = _1896 * _1891;
        float _1899 = _1896 * _1892;
        float _1900 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1870].xyz));
        float _3798 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1903 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1904 = dot(vec3(_284, _285, _286), vec3(_1897, _1898, _1899));
        float _3809 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1907 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1908 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_1897, _1898, _1899));
        float _3820 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1912 = _1889 * _1889;
        float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
        float _1923 = exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0);
        float _1930 = 1.0 - _1889;
        float _1940 = (0.5 / (((_1669 * ((_1903 * _1930) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1930) + _1889) * _1903))) * _1903;
        float _3831 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1942 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
        float _1943 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1864 = (((((_1923 * _1691) + _440) * cbLight._m0[_1874].x) * _1942) * _1943) + _1800;
        _1866 = (((((_1923 * _1693) + _442) * cbLight._m0[_1874].y) * _1942) * _1943) + _1801;
        _1868 = (((((_1923 * _1694) + _443) * cbLight._m0[_1874].z) * _1942) * _1943) + _1802;
    }
    float _1978;
    float _1980;
    float _1982;
    if (_1595)
    {
        _1978 = _1864;
        _1980 = _1866;
        _1982 = _1868;
    }
    else
    {
        uint _1989 = _1502 + 3u;
        uint _1993 = _1502 + 11u;
        float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _287) * 0.949999988079071044921875);
        float _2008 = _2007 * _2007;
        float _2009 = cbLight._m0[_1989].x + _365;
        float _2010 = cbLight._m0[_1989].y + _366;
        float _2011 = cbLight._m0[_1989].z + _367;
        float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
        float _2016 = _2015 * _2009;
        float _2017 = _2015 * _2010;
        float _2018 = _2015 * _2011;
        float _2019 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1989].xyz));
        float _3847 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _2023 = dot(vec3(_284, _285, _286), vec3(_2016, _2017, _2018));
        float _3858 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _2027 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2016, _2017, _2018));
        float _3869 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2031 = _2008 * _2008;
        float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
        float _2042 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
        float _2049 = 1.0 - _2008;
        float _2059 = (0.5 / (((_1669 * ((_2022 * _2049) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _2049) + _2008) * _2022))) * _2022;
        float _3880 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2061 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
        float _2062 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
        _1978 = (((((_2042 * _1691) + _440) * cbLight._m0[_1993].x) * _2061) * _2062) + _1864;
        _1980 = (((((_2042 * _1693) + _442) * cbLight._m0[_1993].y) * _2061) * _2062) + _1866;
        _1982 = (((((_2042 * _1694) + _443) * cbLight._m0[_1993].z) * _2061) * _2062) + _1868;
    }
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    if (_1500.y == 0u)
    {
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2137;
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2137;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2137;
        uvec4 _2152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2153 = _2152.x;
        uint _2164 = uint((float(_2152.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2153))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2153)));
        float _2174 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2175 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        uint _2178 = uint(isnan(14.0) ? _2175 : (isnan(_2175) ? 14.0 : min(_2175, 14.0)));
        uvec4 _2183 = texelFetch(g_lightClusterGridBuffer, int(((_2178 << 2u) + (_2164 << 6u)) >> 2u));
        uint _2184 = _2183.x;
        uint _2185 = _2152.z;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        float _2294;
        if (((((1u << ((_2185 >> 4u) & 15u)) + 4294967295u) & _2184) == 0u) || ((_2185 & 240u) == 0u))
        {
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
        }
        else
        {
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2295;
            float _2428 = 0.0;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            uint _2434 = 0u;
            uint _2443;
            bool _2444;
            for (;;)
            {
                _2443 = texelFetch(g_lightClassification, int((((_2178 << 5u) + (_2164 << 9u)) + (_2434 << 2u)) >> 2u)).x;
                _2444 = _2443 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2444)
                {
                    frontier_phi_63_pred = _2433;
                    frontier_phi_63_pred_1 = _2432;
                    frontier_phi_63_pred_2 = _2431;
                    frontier_phi_63_pred_3 = _2430;
                    frontier_phi_63_pred_4 = _2429;
                    frontier_phi_63_pred_5 = _2428;
                }
                else
                {
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    uint _2558;
                    _2552 = _2428;
                    _2553 = _2429;
                    _2554 = _2430;
                    _2555 = _2431;
                    _2556 = _2432;
                    _2557 = _2433;
                    _2558 = _2443;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    for (;;)
                    {
                        uint _2562 = uint(findLSB(_2558)) + (_2434 << 5u);
                        uint _2559 = (_2558 + 4294967295u) & _2558;
                        uint _2564 = _2562 * 48u;
                        vec4 _2578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2564)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 3u)).x));
                        uint _2584 = (_2562 * 48u) + 4u;
                        vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 3u)).x));
                        uint _2603 = (_2562 * 48u) + 8u;
                        vec3 _2614 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x));
                        float _2618 = _2578.x - _2138;
                        float _2619 = _2578.y - _2139;
                        float _2620 = _2578.z - _2140;
                        float _2621 = dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620));
                        float _2624 = inversesqrt(_2621);
                        float _2625 = _2624 * _2618;
                        float _2626 = _2624 * _2619;
                        float _2627 = _2624 * _2620;
                        float _2628 = dot(vec3(_395, _398, _401), vec3(_2625, _2626, _2627));
                        float _2633 = 1.0 - (_2621 * _2578.w);
                        float _3906 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2634 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2635 = sqrt(_2621) * _2597.w;
                        float _2638 = 1.39999997615814208984375 / (_2635 + 1.39999997615814208984375);
                        float _2639 = _2638 * _2638;
                        float _2642 = ((1.0 - _2639) * _2628) + _2639;
                        float _2645 = _2635 * _2635;
                        float _2649 = ((isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0))) * _2634) / ((_2645 * 0.699999988079071044921875) + 1.0);
                        float _2653 = (-0.0) - _2138;
                        float _2654 = (-0.0) - _2139;
                        float _2655 = (-0.0) - _2140;
                        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
                        float _2660 = _2659 * _2653;
                        float _2661 = _2659 * _2654;
                        float _2662 = _2659 * _2655;
                        float _2670 = exp2(log2(1.0 / ((_2645 * 3.5) + 5.0)) * 0.25);
                        float _2671 = 1.0 - _471;
                        float _2678 = sqrt(1.0 - ((1.0 - (_2671 * _2671)) * (1.0 - (_2670 * _2670))));
                        float _2679 = _2678 * _2678;
                        float _2680 = _2679 * _2679;
                        float _2681 = _2660 + _2625;
                        float _2682 = _2661 + _2626;
                        float _2683 = _2662 + _2627;
                        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
                        float _2691 = dot(vec3(_395, _398, _401), vec3(_2660, _2661, _2662));
                        float _3922 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2694 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2695 = dot(vec3(_395, _398, _401), vec3(_2687 * _2681, _2687 * _2682, _2687 * _2683));
                        float _3933 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2698 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2702 = ((_2698 * _2698) * (_2680 + (-1.0))) + 1.0;
                        float _2703 = _2638 * _2679;
                        float _2704 = _2703 * _2703;
                        float _2707 = ((1.0 - _2704) * _2628) + _2704;
                        float _3944 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2708 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                        float _2709 = 1.0 - _2679;
                        float _2719 = (0.5 / (((_2708 * ((_2694 * _2709) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2709) + _2679) * _2694))) * _2708;
                        float _3955 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2730 = (((_2680 * 3.1415927410125732421875) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) / ((_2702 * _2702) * ((_2645 * 2.1991131305694580078125) + 3.141590118408203125))) * _2634;
                        _2487 = (_2649 * _2597.x) + _2555;
                        _2488 = (_2649 * _2597.y) + _2556;
                        _2489 = (_2649 * _2597.z) + _2557;
                        _2484 = (_2730 * _2614.x) + _2552;
                        _2485 = (_2730 * _2614.y) + _2553;
                        _2486 = (_2730 * _2614.z) + _2554;
                        if (_2559 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2552 = _2484;
                            _2553 = _2485;
                            _2554 = _2486;
                            _2555 = _2487;
                            _2556 = _2488;
                            _2557 = _2489;
                            _2558 = _2559;
                        }
                    }
                    frontier_phi_63_pred = _2489;
                    frontier_phi_63_pred_1 = _2488;
                    frontier_phi_63_pred_2 = _2487;
                    frontier_phi_63_pred_3 = _2486;
                    frontier_phi_63_pred_4 = _2485;
                    frontier_phi_63_pred_5 = _2484;
                }
                _2295 = frontier_phi_63_pred;
                _2293 = frontier_phi_63_pred_1;
                _2291 = frontier_phi_63_pred_2;
                _2289 = frontier_phi_63_pred_3;
                _2287 = frontier_phi_63_pred_4;
                _2285 = frontier_phi_63_pred_5;
                uint _2435 = _2434 + 1u;
                if (_2435 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2428 = _2285;
                    _2429 = _2287;
                    _2430 = _2289;
                    _2431 = _2291;
                    _2432 = _2293;
                    _2433 = _2295;
                    _2434 = _2435;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
        }
        uvec4 _2298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2299 = _2298.z;
        uint _2301 = (_2299 >> 8u) & 15u;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((4294967295u << _2301) & _2184) == 0u)
        {
            _2396 = _2284;
            _2398 = _2286;
            _2400 = _2288;
            _2402 = _2290;
            _2404 = _2292;
            _2406 = _2294;
        }
        else
        {
            float _2421 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
            float _2422 = _2421 * _2138;
            float _2423 = _2421 * _2139;
            float _2424 = _2421 * _2140;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2301 < ((_2299 >> 12u) & 15u))
            {
                float _2397;
                float _2399;
                float _2401;
                float _2403;
                float _2405;
                float _2407;
                float _2535 = _2284;
                float _2536 = _2286;
                float _2537 = _2288;
                float _2538 = _2290;
                float _2539 = _2292;
                float _2540 = _2294;
                uint _2541 = _2301;
                uint _2550;
                bool _2551;
                for (;;)
                {
                    _2550 = texelFetch(g_lightClassification, int((((_2178 << 5u) + (_2164 << 9u)) + (_2541 << 2u)) >> 2u)).x;
                    _2551 = _2550 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2551)
                    {
                        frontier_phi_69_pred = _2540;
                        frontier_phi_69_pred_1 = _2539;
                        frontier_phi_69_pred_2 = _2538;
                        frontier_phi_69_pred_3 = _2537;
                        frontier_phi_69_pred_4 = _2536;
                        frontier_phi_69_pred_5 = _2535;
                    }
                    else
                    {
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2739;
                        float _2740;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _2748 = _2535;
                        float _2749 = _2536;
                        float _2750 = _2537;
                        float _2751 = _2538;
                        float _2752 = _2539;
                        float _2753 = _2540;
                        uint _2754 = _2550;
                        uint _2755;
                        vec4 _2780;
                        float _2781;
                        vec4 _2796;
                        vec3 _2808;
                        vec4 _2824;
                        vec4 _2840;
                        float _2887;
                        bool _2888;
                        for (;;)
                        {
                            uint _2765 = ((_2541 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2754));
                            _2755 = (_2754 + 4294967295u) & _2754;
                            uint _2767 = _2765 * 40u;
                            _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            _2781 = _2780.w;
                            uint _2783 = (_2765 * 40u) + 4u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            uint _2798 = (_2765 * 40u) + 8u;
                            _2808 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x));
                            uint _2811 = (_2765 * 40u) + 16u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            uint _2827 = (_2765 * 40u) + 20u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2843 = (_2765 * 40u) + 24u;
                            vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2862 = (_2765 * 40u) + 28u;
                            vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2887 = fma(_2140, _2875.z, fma(_2139, _2875.y, _2875.x * _2138)) + _2875.w;
                            _2888 = !((fma(_2140, _2856.z, fma(_2139, _2856.y, _2856.x * _2138)) + _2856.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2888)
                            {
                                float _2915 = _2780.x - _2138;
                                float _2916 = _2780.y - _2139;
                                float _2917 = _2780.z - _2140;
                                float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                                float _2921 = inversesqrt(_2918);
                                float _2922 = _2921 * _2915;
                                float _2923 = _2921 * _2916;
                                float _2924 = _2921 * _2917;
                                float _2928 = 1.0 - (_2918 / (_2781 * _2781));
                                float _3966 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                                float _2929 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _2933 = sqrt(_2918) * _2796.w;
                                float _2935 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                                float _2936 = _2935 * _2935;
                                float _2939 = ((1.0 - _2936) * dot(vec3(_2922, _2923, _2924), vec3(_395, _398, _401))) + _2936;
                                float _2942 = _2933 * _2933;
                                float _2946 = (fma(_2140, _2824.z, fma(_2139, _2824.y, _2824.x * _2138)) + _2824.w) / _2887;
                                float _2947 = (fma(_2140, _2840.z, fma(_2139, _2840.y, _2840.x * _2138)) + _2840.w) / _2887;
                                float _2951 = 1.0 - dot(vec2(_2946, _2947), vec2(_2946, _2947));
                                float _3982 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2952 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2953 = _2952 * (((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2929) / ((_2942 * 0.699999988079071044921875) + 1.0));
                                float _2965 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                                float _2966 = 1.0 - _471;
                                float _2973 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * (1.0 - (_2965 * _2965))));
                                float _2974 = _2973 * _2973;
                                float _2975 = _2974 * _2974;
                                float _2976 = _2922 - _2422;
                                float _2977 = _2923 - _2423;
                                float _2978 = _2924 - _2424;
                                float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                                float _2986 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2422, (-0.0) - _2423, (-0.0) - _2424));
                                float _3993 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2989 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2990 = dot(vec3(_395, _398, _401), vec3(_2982 * _2976, _2982 * _2977, _2982 * _2978));
                                float _4004 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2993 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _2997 = ((_2993 * _2993) * (_2975 + (-1.0))) + 1.0;
                                float _2998 = _2935 * _2974;
                                float _2999 = _2998 * _2998;
                                float _3005 = ((1.0 - _2999) * dot(vec3(_395, _398, _401), vec3(_2922, _2923, _2924))) + _2999;
                                float _4015 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _3007 = 1.0 - _2974;
                                float _3017 = (0.5 / (((_3006 * ((_2989 * _3007) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2974) * _2989))) * _3006;
                                float _4026 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3027 = (_2952 * _2929) * (((_2975 * 3.1415927410125732421875) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) / ((_2997 * _2997) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2953 * _2796.z;
                                frontier_phi_75_pred_1 = _2953 * _2796.y;
                                frontier_phi_75_pred_2 = _2953 * _2796.x;
                                frontier_phi_75_pred_3 = _3027 * _2808.z;
                                frontier_phi_75_pred_4 = _3027 * _2808.y;
                                frontier_phi_75_pred_5 = _3027 * _2808.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3036 = frontier_phi_75_pred;
                            _3035 = frontier_phi_75_pred_1;
                            _3034 = frontier_phi_75_pred_2;
                            _3033 = frontier_phi_75_pred_3;
                            _3032 = frontier_phi_75_pred_4;
                            _3031 = frontier_phi_75_pred_5;
                            _2738 = _3034 + _2751;
                            _2739 = _3035 + _2752;
                            _2740 = _3036 + _2753;
                            _2735 = _3031 + _2748;
                            _2736 = _3032 + _2749;
                            _2737 = _3033 + _2750;
                            if (_2755 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2755;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2740;
                        frontier_phi_69_pred_1 = _2739;
                        frontier_phi_69_pred_2 = _2738;
                        frontier_phi_69_pred_3 = _2737;
                        frontier_phi_69_pred_4 = _2736;
                        frontier_phi_69_pred_5 = _2735;
                    }
                    _2407 = frontier_phi_69_pred;
                    _2405 = frontier_phi_69_pred_1;
                    _2403 = frontier_phi_69_pred_2;
                    _2401 = frontier_phi_69_pred_3;
                    _2399 = frontier_phi_69_pred_4;
                    _2397 = frontier_phi_69_pred_5;
                    uint _2542 = _2541 + 1u;
                    if (_2542 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2535 = _2397;
                        _2536 = _2399;
                        _2537 = _2401;
                        _2538 = _2403;
                        _2539 = _2405;
                        _2540 = _2407;
                        _2541 = _2542;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2407;
                frontier_phi_57_58_ladder_1 = _2405;
                frontier_phi_57_58_ladder_2 = _2403;
                frontier_phi_57_58_ladder_3 = _2401;
                frontier_phi_57_58_ladder_4 = _2399;
                frontier_phi_57_58_ladder_5 = _2397;
            }
            else
            {
                frontier_phi_57_58_ladder = _2294;
                frontier_phi_57_58_ladder_1 = _2292;
                frontier_phi_57_58_ladder_2 = _2290;
                frontier_phi_57_58_ladder_3 = _2288;
                frontier_phi_57_58_ladder_4 = _2286;
                frontier_phi_57_58_ladder_5 = _2284;
            }
            _2396 = frontier_phi_57_58_ladder_5;
            _2398 = frontier_phi_57_58_ladder_4;
            _2400 = frontier_phi_57_58_ladder_3;
            _2402 = frontier_phi_57_58_ladder_2;
            _2404 = frontier_phi_57_58_ladder_1;
            _2406 = frontier_phi_57_58_ladder;
        }
        float _2411 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2196 = (_2411 * _2402) + _1633;
        _2198 = (_2411 * _2404) + _1635;
        _2200 = (_2411 * _2406) + _1637;
        _2202 = ((_2396 * _440) * _2411) + _1978;
        _2204 = ((_2398 * _442) * _2411) + _1980;
        _2206 = ((_2400 * _443) * _2411) + _1982;
    }
    else
    {
        _2196 = _1633;
        _2198 = _1635;
        _2200 = _1637;
        _2202 = _1978;
        _2204 = _1980;
        _2206 = _1982;
    }
    float _4042 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4053 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4064 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    uint _2226 = _414 + 6u;
    float _2234 = _373 / cbSceneParam._m0[86u].x;
    float _2235 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2249 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2234, _2235, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2251 = _2249.x;
    float _2252 = _2249.y;
    float _2253 = _2249.z;
    float _2254 = _2249.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _2309 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _2310 = _2309 / _307;
        float _2321 = _2310 * _358;
        float _2322 = _359 * _2310;
        float _2323 = (-0.0) - _2322;
        float _2324 = _2310 * _360;
        float _2326 = (cbSceneParam._m0[77u].w * _2323) / _2309;
        float _2327 = _2326 + cbSceneParam._m0[79u].w;
        float _2328 = cbSceneParam._m0[79u].w - _2322;
        float _2334 = sqrt(((_2321 * _2321) + (_2322 * _2322)) + (_2324 * _2324));
        float _2337 = (1.0 - (cbSceneParam._m0[77u].w / _2309)) * _2334;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2497;
        if (abs((_2323 - _2326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2497 = ((((_2327 > 0.0) ? exp2(_2342 * _2327) : (2.0 - exp2(_2344 * _2327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2337;
        }
        else
        {
            float _2457 = 1.0 / cbSceneParam._m0[80u].x;
            float _2458 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : max(_2327, _2328));
            float _2459 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : min(_2327, _2328));
            float _2468 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : min(_2458, 0.0));
            float _2469 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : min(_2459, 0.0));
            _2497 = ((abs(_2334 / _2323) * cbSceneParam._m0[80u].y) * ((((_2468 - _2469) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0))))) * _2457)) - ((exp2(_2344 * _2468) - exp2(_2344 * _2469)) * _2457))) + (_2337 * cbSceneParam._m0[80u].z);
        }
        vec4 _2499 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2234, _2235, 1.0), 0.0);
        float _2508 = exp2((_2497 * (-1.44269502162933349609375)) * (1.0 - _2499.w));
        float _2509 = log2(_2508);
        float _2525 = log2(_2254);
        _2346 = (exp2(_2525 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].x)) * _2499.x) / cbSceneParam._m0[78u].x)) + _2251;
        _2348 = (exp2(_2525 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].y)) * _2499.y) / cbSceneParam._m0[78u].y)) + _2252;
        _2350 = (exp2(_2525 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].z)) * _2499.z) / cbSceneParam._m0[78u].z)) + _2253;
        _2352 = _2508 * _2254;
    }
    else
    {
        _2346 = _2251;
        _2348 = _2252;
        _2350 = _2253;
        _2352 = _2254;
    }
    float _2364 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2365 = _2364 == 3.0;
    float _2366 = log2(_2352);
    float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2196 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _455))) + ((_2202 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1265)) * cbPerFrame._m0[3u].x));
    float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2198 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _455))) + ((_2204 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1265)) * cbPerFrame._m0[3u].x));
    float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2200 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _455))) + ((_2206 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1265)) * cbPerFrame._m0[3u].x));
    float _2384 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2384 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
    SV_Target.y = _2384 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
    SV_Target.z = _2384 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
    SV_Target.w = cbInstanceData._m0[_2226].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2226].w;
}


