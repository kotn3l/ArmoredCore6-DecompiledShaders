#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _832;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3193 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))));
    float _275 = fma(_272, _209, fma(_265, _201 * TANGENT.x, (_187 * _180) * _263));
    float _278 = fma(_272, _210, fma(_265, _201 * TANGENT.y, (_187 * _181) * _263));
    float _281 = fma(_272, _211, fma(_265, _201 * TANGENT.z, (_187 * _182) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3204 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _289 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3226 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3237 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3248 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _293 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _400 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _403 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3259 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _431 = 1.0 - _293;
    float _432 = _428 * _431;
    float _433 = _429 * _431;
    float _434 = _430 * _431;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _293;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _293;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = _439 + 0.039999999105930328369140625;
    float _444 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _457 = _454.x * TEXCOORD.z;
    float _458 = dot(vec3(_286, _287, _288), vec3(_367, _368, _369));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _286) - _367;
    float _466 = (_461 * _287) - _368;
    float _467 = (_461 * _288) - _369;
    float _471 = abs(dot(vec3(_367, _368, _369), vec3(_286, _287, _288)));
    float _3292 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_289);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _492 = (1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _493 = _486 * _473;
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _560 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _564 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _589 = _521 + _286;
        float _590 = _525 + _287;
        float _591 = _529 + _288;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_286, _287, _288), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3340 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_286, _287, _288), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3373 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_286, _287, _288), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3406 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _872 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _876 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _880 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _903 = _521 + _286;
        float _904 = _525 + _287;
        float _905 = _529 + _288;
        float _915 = fma(_905, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903)) - _872;
        float _916 = fma(_905, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903)) - _876;
        float _917 = fma(_905, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903)) - _880;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_872 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_876 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[35u].z) + ((((((_880 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_286, _287, _288), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3469 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_286, _287, _288), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3502 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_286, _287, _288), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3535 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _832;
        _1142 = _832;
        _1143 = _832;
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _465 * 0.5;
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_831, _835, _838, _841));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_833, _836, _839, _842));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_834, _837, _840, _843));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1278 = isnan(_1277) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1277 : min(cbModelParam._m0[25u].z, _1277));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1327 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1331 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1335 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1338 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1341 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1344 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1372;
        if (_1338 > 0.0)
        {
            _1372 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1372 = frontier_phi_16_14_ladder;
        }
        float _1601;
        if (_1341 > 0.0)
        {
            _1601 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1601 = frontier_phi_25_21_ladder;
        }
        float _1858;
        if (_1344 > 0.0)
        {
            _1858 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1858 = frontier_phi_37_32_ladder;
        }
        float _1860 = isnan(_1601) ? _1372 : (isnan(_1372) ? _1601 : min(_1372, _1601));
        float _1861 = isnan(_1858) ? _1860 : (isnan(_1860) ? _1858 : min(_1860, _1858));
        float _1865 = (_1861 * _1338) + _1327;
        float _1866 = (_1861 * _1341) + _1331;
        float _1867 = (_1861 * _1344) + _1335;
        float _1868 = _1861 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1868;
        float _1872 = _1868 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 > _1872) || ((_1866 < _1870) || ((_1865 < _1870) || (_1865 > _1872))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1867, cbModelParam._m0[9u].z, fma(_1866, cbModelParam._m0[9u].y, _1865 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1867, cbModelParam._m0[10u].z, fma(_1866, cbModelParam._m0[10u].y, _1865 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1867, cbModelParam._m0[11u].z, fma(_1866, cbModelParam._m0[11u].y, _1865 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_15_37_ladder = _1995.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1995.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1995.x * cbModelParam._m0[1u].y;
        }
        _1360 = frontier_phi_15_37_ladder_2;
        _1362 = frontier_phi_15_37_ladder_1;
        _1364 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1278);
        _1360 = _1348.x * cbModelParam._m0[1u].y;
        _1362 = _1348.y * cbModelParam._m0[1u].y;
        _1364 = _1348.z * cbModelParam._m0[1u].y;
    }
    float _1368 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1368 : min(cbModelParam._m0[25u].w, _1368));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1426 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1430 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1434 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1437 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1440 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1443 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1606;
        if (_1437 > 0.0)
        {
            _1606 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1606 = frontier_phi_27_23_ladder;
        }
        float _1885;
        if (_1440 > 0.0)
        {
            _1885 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1885 = frontier_phi_39_34_ladder;
        }
        float _2098;
        if (_1443 > 0.0)
        {
            _2098 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2098 = frontier_phi_48_45_ladder;
        }
        float _2100 = isnan(_1885) ? _1606 : (isnan(_1606) ? _1885 : min(_1606, _1885));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1437) + _1426;
        float _2106 = (_2101 * _1440) + _1430;
        float _2107 = (_2101 * _1443) + _1434;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2109 = (-1.0) - _2108;
        float _2111 = _2108 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2107 > _2111) || ((_2107 < _2109) || ((_2106 > _2111) || ((_2106 < _2109) || ((_2105 < _2109) || (_2105 > _2111))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2107, cbModelParam._m0[17u].z, fma(_2106, cbModelParam._m0[17u].y, _2105 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2107, cbModelParam._m0[18u].z, fma(_2106, cbModelParam._m0[18u].y, _2105 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2107, cbModelParam._m0[19u].z, fma(_2106, cbModelParam._m0[19u].y, _2105 * cbModelParam._m0[19u].x))), _1369);
            frontier_phi_24_48_ladder = _2305.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2305.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2305.x * cbModelParam._m0[1u].z;
        }
        _1462 = frontier_phi_24_48_ladder_2;
        _1464 = frontier_phi_24_48_ladder_1;
        _1466 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1369);
        _1462 = _1446.x * cbModelParam._m0[1u].z;
        _1464 = _1446.y * cbModelParam._m0[1u].z;
        _1466 = _1446.z * cbModelParam._m0[1u].z;
    }
    float _1479 = (((_492 * _442) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1481 = (((_492 * _444) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_492 * _445) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1486 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, _1479 * cbSceneParam._m0[91u].x));
    vec4 _1500 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_375, _376));
    float _1502 = _1500.w;
    float _1514 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1502);
    float _1515 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1502);
    float _1516 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1502);
    uvec4 _1520 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1522 = _1520.x * 14u;
    uint _1523 = _1522 + 13u;
    float _1530 = _457 + (-1.0);
    float _1535 = (cbLight._m0[_1523].x * _1530) + 1.0;
    float _1536 = (cbLight._m0[_1523].y * _1530) + 1.0;
    float _1537 = (cbLight._m0[_1523].z * _1530) + 1.0;
    float _1538 = (cbLight._m0[_1523].w * _1530) + 1.0;
    uint _1539 = _1522 + 5u;
    float _1545 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1549 = _1522 + 4u;
    float _1559 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1563 = _1522 | 1u;
    float _1574 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_286, _287, _288));
    float _1577 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_286, _287, _288));
    float _3671 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _3682 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1582 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1584 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1591 = ((cbLight._m0[_1539].x * _1545) * _1584) + (((cbLight._m0[_1549].x * _1514) * _1559) * _1582);
    float _1592 = ((_1545 * cbLight._m0[_1539].y) * _1584) + (((cbLight._m0[_1549].y * _1515) * _1559) * _1582);
    float _1593 = ((_1545 * cbLight._m0[_1539].z) * _1584) + (((cbLight._m0[_1549].z * _1516) * _1559) * _1582);
    uvec4 _1598 = floatBitsToUint(cbLight._m0[_1522 + 12u]);
    bool _1600 = _1598.x == 0u;
    float _1611;
    float _1613;
    float _1615;
    if (_1600)
    {
        _1611 = _1591;
        _1613 = _1592;
        _1615 = _1593;
    }
    else
    {
        uint _1619 = _1522 + 6u;
        float _1635 = (dot(vec3(cbLight._m0[_1522 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1636 = _1635 * _1635;
        float _3693 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1638 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1611 = (((cbLight._m0[_1619].x * 0.3183098733425140380859375) * _1637) * _1638) + _1591;
        _1613 = (((cbLight._m0[_1619].y * 0.3183098733425140380859375) * _1637) * _1638) + _1592;
        _1615 = (((cbLight._m0[_1619].z * 0.3183098733425140380859375) * _1637) * _1638) + _1593;
    }
    bool _1618 = _1598.y == 0u;
    float _1656;
    float _1658;
    float _1660;
    if (_1618)
    {
        _1656 = _1611;
        _1658 = _1613;
        _1660 = _1615;
    }
    else
    {
        uint _1829 = _1522 + 7u;
        float _1845 = (dot(vec3(cbLight._m0[_1522 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3709 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1848 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1656 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1611;
        _1658 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1613;
        _1660 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1615;
    }
    uint _1663 = _1522 + 8u;
    float _1676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1522].w)) * _289) * 0.949999988079071044921875);
    float _1677 = _1676 * _1676;
    float _1678 = cbLight._m0[_1522].x + _367;
    float _1679 = cbLight._m0[_1522].y + _368;
    float _1680 = cbLight._m0[_1522].z + _369;
    float _1684 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
    float _1685 = _1684 * _1678;
    float _1686 = _1684 * _1679;
    float _1687 = _1684 * _1680;
    float _1688 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1522].xyz));
    float _3725 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1692 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1693 = dot(vec3(_286, _287, _288), vec3(_1685, _1686, _1687));
    float _3747 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1696 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1697 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1685, _1686, _1687));
    float _3758 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1701 = _1677 * _1677;
    float _1705 = ((_1696 * _1696) * (_1701 + (-1.0))) + 1.0;
    float _1713 = exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * 5.0);
    float _1714 = 0.959999978542327880859375 - _439;
    float _1716 = 0.959999978542327880859375 - _440;
    float _1717 = 0.959999978542327880859375 - _441;
    float _1724 = 1.0 - _1677;
    float _1735 = (0.5 / (((_1692 * ((_1691 * _1724) + _1677)) + 9.9999999392252902907785028219223e-09) + (((_1692 * _1724) + _1677) * _1691))) * _1691;
    float _3769 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1737 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1701 / ((_1705 * _1705) * 3.141590118408203125));
    uint _1751 = _1522 + 9u;
    float _1762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1563].w)) * _289) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1563].x + _367;
    float _1765 = cbLight._m0[_1563].y + _368;
    float _1766 = cbLight._m0[_1563].z + _369;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1563].xyz));
    float _3780 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1778 = dot(vec3(_286, _287, _288), vec3(_1771, _1772, _1773));
    float _3791 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1782 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_1771, _1772, _1773));
    float _3802 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1786 = _1763 * _1763;
    float _1790 = ((_1781 * _1781) * (_1786 + (-1.0))) + 1.0;
    float _1797 = exp2(log2(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * 5.0);
    float _1804 = 1.0 - _1763;
    float _1814 = (0.5 / (((_1692 * ((_1777 * _1804) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1692 * _1804) + _1763) * _1777))) * _1777;
    float _3813 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1786 / ((_1790 * _1790) * 3.141590118408203125));
    float _1826 = (((((_1797 * _1714) + _442) * cbLight._m0[_1751].x) * _1816) * _1545) + ((((cbLight._m0[_1663].x * _1514) * ((_1713 * _1714) + _442)) * _1737) * _1559);
    float _1827 = (((((_1797 * _1716) + _444) * cbLight._m0[_1751].y) * _1816) * _1545) + ((((cbLight._m0[_1663].y * _1515) * ((_1713 * _1716) + _444)) * _1737) * _1559);
    float _1828 = (((((_1797 * _1717) + _445) * cbLight._m0[_1751].z) * _1816) * _1545) + ((((cbLight._m0[_1663].z * _1516) * ((_1713 * _1717) + _445)) * _1737) * _1559);
    float _1890;
    float _1892;
    float _1894;
    if (_1600)
    {
        _1890 = _1826;
        _1892 = _1827;
        _1894 = _1828;
    }
    else
    {
        uint _1896 = _1522 + 2u;
        uint _1900 = _1522 + 10u;
        float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _289) * 0.949999988079071044921875);
        float _1915 = _1914 * _1914;
        float _1916 = cbLight._m0[_1896].x + _367;
        float _1917 = cbLight._m0[_1896].y + _368;
        float _1918 = cbLight._m0[_1896].z + _369;
        float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
        float _1923 = _1922 * _1916;
        float _1924 = _1922 * _1917;
        float _1925 = _1922 * _1918;
        float _1926 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1896].xyz));
        float _3824 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1930 = dot(vec3(_286, _287, _288), vec3(_1923, _1924, _1925));
        float _3835 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1934 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_1923, _1924, _1925));
        float _3846 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = _1915 * _1915;
        float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
        float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0);
        float _1956 = 1.0 - _1915;
        float _1966 = (0.5 / (((_1692 * ((_1929 * _1956) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1692 * _1956) + _1915) * _1929))) * _1929;
        float _3857 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1968 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
        float _1969 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1890 = (((((_1949 * _1714) + _442) * cbLight._m0[_1900].x) * _1968) * _1969) + _1826;
        _1892 = (((((_1949 * _1716) + _444) * cbLight._m0[_1900].y) * _1968) * _1969) + _1827;
        _1894 = (((((_1949 * _1717) + _445) * cbLight._m0[_1900].z) * _1968) * _1969) + _1828;
    }
    float _2004;
    float _2006;
    float _2008;
    if (_1618)
    {
        _2004 = _1890;
        _2006 = _1892;
        _2008 = _1894;
    }
    else
    {
        uint _2015 = _1522 + 3u;
        uint _2019 = _1522 + 11u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _289) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _367;
        float _2036 = cbLight._m0[_2015].y + _368;
        float _2037 = cbLight._m0[_2015].z + _369;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2015].xyz));
        float _3873 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2049 = dot(vec3(_286, _287, _288), vec3(_2042, _2043, _2044));
        float _3884 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _3895 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
        float _2075 = 1.0 - _2034;
        float _2085 = (0.5 / (((_1692 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1692 * _2075) + _2034) * _2048))) * _2048;
        float _3906 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _2004 = (((((_2068 * _1714) + _442) * cbLight._m0[_2019].x) * _2087) * _2088) + _1890;
        _2006 = (((((_2068 * _1716) + _444) * cbLight._m0[_2019].y) * _2087) * _2088) + _1892;
        _2008 = (((((_2068 * _1717) + _445) * cbLight._m0[_2019].z) * _2087) * _2088) + _1894;
    }
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    if (_1520.y == 0u)
    {
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2163;
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2163;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2163;
        uvec4 _2178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2179 = _2178.x;
        uint _2190 = uint((float(_2178.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2179))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2179)));
        float _2200 = (log2(_2166 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2201 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        uint _2204 = uint(isnan(14.0) ? _2201 : (isnan(_2201) ? 14.0 : min(_2201, 14.0)));
        uvec4 _2209 = texelFetch(g_lightClusterGridBuffer, int(((_2204 << 2u) + (_2190 << 6u)) >> 2u));
        uint _2210 = _2209.x;
        uint _2211 = _2178.z;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        if (((((1u << ((_2211 >> 4u) & 15u)) + 4294967295u) & _2210) == 0u) || ((_2211 & 240u) == 0u))
        {
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
        }
        else
        {
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2321;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            uint _2460 = 0u;
            uint _2469;
            bool _2470;
            for (;;)
            {
                _2469 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2460 << 2u)) >> 2u)).x;
                _2470 = _2469 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2470)
                {
                    frontier_phi_63_pred = _2459;
                    frontier_phi_63_pred_1 = _2458;
                    frontier_phi_63_pred_2 = _2457;
                    frontier_phi_63_pred_3 = _2456;
                    frontier_phi_63_pred_4 = _2455;
                    frontier_phi_63_pred_5 = _2454;
                }
                else
                {
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    uint _2584;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2469;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    for (;;)
                    {
                        uint _2588 = uint(findLSB(_2584)) + (_2460 << 5u);
                        uint _2585 = (_2584 + 4294967295u) & _2584;
                        uint _2590 = _2588 * 48u;
                        vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2610 = (_2588 * 48u) + 4u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2629 = (_2588 * 48u) + 8u;
                        vec3 _2640 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x));
                        float _2644 = _2604.x - _2164;
                        float _2645 = _2604.y - _2165;
                        float _2646 = _2604.z - _2166;
                        float _2647 = dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646));
                        float _2650 = inversesqrt(_2647);
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2654 = dot(vec3(_397, _400, _403), vec3(_2651, _2652, _2653));
                        float _2659 = 1.0 - (_2647 * _2604.w);
                        float _3932 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                        float _2661 = sqrt(_2647) * _2623.w;
                        float _2664 = 1.39999997615814208984375 / (_2661 + 1.39999997615814208984375);
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * _2654) + _2665;
                        float _2671 = _2661 * _2661;
                        float _2675 = ((isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))) * _2660) / ((_2671 * 0.699999988079071044921875) + 1.0);
                        float _2679 = (-0.0) - _2164;
                        float _2680 = (-0.0) - _2165;
                        float _2681 = (-0.0) - _2166;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2686 = _2685 * _2679;
                        float _2687 = _2685 * _2680;
                        float _2688 = _2685 * _2681;
                        float _2696 = exp2(log2(1.0 / ((_2671 * 3.5) + 5.0)) * 0.25);
                        float _2697 = 1.0 - _473;
                        float _2704 = sqrt(1.0 - ((1.0 - (_2697 * _2697)) * (1.0 - (_2696 * _2696))));
                        float _2705 = _2704 * _2704;
                        float _2706 = _2705 * _2705;
                        float _2707 = _2686 + _2651;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2717 = dot(vec3(_397, _400, _403), vec3(_2686, _2687, _2688));
                        float _3948 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2721 = dot(vec3(_397, _400, _403), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709));
                        float _3959 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2724 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2728 = ((_2724 * _2724) * (_2706 + (-1.0))) + 1.0;
                        float _2729 = _2664 * _2705;
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2654) + _2730;
                        float _3970 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2735 = 1.0 - _2705;
                        float _2745 = (0.5 / (((_2734 * ((_2720 * _2735) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2735) + _2705) * _2720))) * _2734;
                        float _3981 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2756 = (((_2706 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_2728 * _2728) * ((_2671 * 2.1991131305694580078125) + 3.141590118408203125))) * _2660;
                        _2513 = (_2675 * _2623.x) + _2581;
                        _2514 = (_2675 * _2623.y) + _2582;
                        _2515 = (_2675 * _2623.z) + _2583;
                        _2510 = (_2756 * _2640.x) + _2578;
                        _2511 = (_2756 * _2640.y) + _2579;
                        _2512 = (_2756 * _2640.z) + _2580;
                        if (_2585 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2585;
                        }
                    }
                    frontier_phi_63_pred = _2515;
                    frontier_phi_63_pred_1 = _2514;
                    frontier_phi_63_pred_2 = _2513;
                    frontier_phi_63_pred_3 = _2512;
                    frontier_phi_63_pred_4 = _2511;
                    frontier_phi_63_pred_5 = _2510;
                }
                _2321 = frontier_phi_63_pred;
                _2319 = frontier_phi_63_pred_1;
                _2317 = frontier_phi_63_pred_2;
                _2315 = frontier_phi_63_pred_3;
                _2313 = frontier_phi_63_pred_4;
                _2311 = frontier_phi_63_pred_5;
                uint _2461 = _2460 + 1u;
                if (_2461 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2454 = _2311;
                    _2455 = _2313;
                    _2456 = _2315;
                    _2457 = _2317;
                    _2458 = _2319;
                    _2459 = _2321;
                    _2460 = _2461;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
        }
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.z;
        uint _2327 = (_2325 >> 8u) & 15u;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((4294967295u << _2327) & _2210) == 0u)
        {
            _2422 = _2310;
            _2424 = _2312;
            _2426 = _2314;
            _2428 = _2316;
            _2430 = _2318;
            _2432 = _2320;
        }
        else
        {
            float _2447 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
            float _2448 = _2447 * _2164;
            float _2449 = _2447 * _2165;
            float _2450 = _2447 * _2166;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2327 < ((_2325 >> 12u) & 15u))
            {
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2433;
                float _2561 = _2310;
                float _2562 = _2312;
                float _2563 = _2314;
                float _2564 = _2316;
                float _2565 = _2318;
                float _2566 = _2320;
                uint _2567 = _2327;
                uint _2576;
                bool _2577;
                for (;;)
                {
                    _2576 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                    _2577 = _2576 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2577)
                    {
                        frontier_phi_69_pred = _2566;
                        frontier_phi_69_pred_1 = _2565;
                        frontier_phi_69_pred_2 = _2564;
                        frontier_phi_69_pred_3 = _2563;
                        frontier_phi_69_pred_4 = _2562;
                        frontier_phi_69_pred_5 = _2561;
                    }
                    else
                    {
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        uint _2780 = _2576;
                        uint _2781;
                        vec4 _2806;
                        float _2807;
                        vec4 _2822;
                        vec3 _2834;
                        vec4 _2850;
                        vec4 _2866;
                        float _2913;
                        bool _2914;
                        for (;;)
                        {
                            uint _2791 = ((_2567 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2780));
                            _2781 = (_2780 + 4294967295u) & _2780;
                            uint _2793 = _2791 * 40u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2807 = _2806.w;
                            uint _2809 = (_2791 * 40u) + 4u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2824 = (_2791 * 40u) + 8u;
                            _2834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x));
                            uint _2837 = (_2791 * 40u) + 16u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2853 = (_2791 * 40u) + 20u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2869 = (_2791 * 40u) + 24u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2888 = (_2791 * 40u) + 28u;
                            vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2913 = fma(_2166, _2901.z, fma(_2165, _2901.y, _2901.x * _2164)) + _2901.w;
                            _2914 = !((fma(_2166, _2882.z, fma(_2165, _2882.y, _2882.x * _2164)) + _2882.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2914)
                            {
                                float _2941 = _2806.x - _2164;
                                float _2942 = _2806.y - _2165;
                                float _2943 = _2806.z - _2166;
                                float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                                float _2947 = inversesqrt(_2944);
                                float _2948 = _2947 * _2941;
                                float _2949 = _2947 * _2942;
                                float _2950 = _2947 * _2943;
                                float _2954 = 1.0 - (_2944 / (_2807 * _2807));
                                float _3992 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                                float _2959 = sqrt(_2944) * _2822.w;
                                float _2961 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                                float _2962 = _2961 * _2961;
                                float _2965 = ((1.0 - _2962) * dot(vec3(_2948, _2949, _2950), vec3(_397, _400, _403))) + _2962;
                                float _2968 = _2959 * _2959;
                                float _2972 = (fma(_2166, _2850.z, fma(_2165, _2850.y, _2850.x * _2164)) + _2850.w) / _2913;
                                float _2973 = (fma(_2166, _2866.z, fma(_2165, _2866.y, _2866.x * _2164)) + _2866.w) / _2913;
                                float _2977 = 1.0 - dot(vec2(_2972, _2973), vec2(_2972, _2973));
                                float _4008 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2979 = _2978 * (((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2955) / ((_2968 * 0.699999988079071044921875) + 1.0));
                                float _2991 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                                float _2992 = 1.0 - _473;
                                float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                                float _3000 = _2999 * _2999;
                                float _3001 = _3000 * _3000;
                                float _3002 = _2948 - _2448;
                                float _3003 = _2949 - _2449;
                                float _3004 = _2950 - _2450;
                                float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                                float _3012 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2448, (-0.0) - _2449, (-0.0) - _2450));
                                float _4019 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3016 = dot(vec3(_397, _400, _403), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                                float _4030 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3019 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                                float _3024 = _2961 * _3000;
                                float _3025 = _3024 * _3024;
                                float _3031 = ((1.0 - _3025) * dot(vec3(_397, _400, _403), vec3(_2948, _2949, _2950))) + _3025;
                                float _4041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3033 = 1.0 - _3000;
                                float _3043 = (0.5 / (((_3032 * ((_3015 * _3033) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3000) * _3015))) * _3032;
                                float _4052 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3053 = (_2978 * _2955) * (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_3023 * _3023) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2979 * _2822.z;
                                frontier_phi_75_pred_1 = _2979 * _2822.y;
                                frontier_phi_75_pred_2 = _2979 * _2822.x;
                                frontier_phi_75_pred_3 = _3053 * _2834.z;
                                frontier_phi_75_pred_4 = _3053 * _2834.y;
                                frontier_phi_75_pred_5 = _3053 * _2834.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3062 = frontier_phi_75_pred;
                            _3061 = frontier_phi_75_pred_1;
                            _3060 = frontier_phi_75_pred_2;
                            _3059 = frontier_phi_75_pred_3;
                            _3058 = frontier_phi_75_pred_4;
                            _3057 = frontier_phi_75_pred_5;
                            _2764 = _3060 + _2777;
                            _2765 = _3061 + _2778;
                            _2766 = _3062 + _2779;
                            _2761 = _3057 + _2774;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            if (_2781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2781;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2766;
                        frontier_phi_69_pred_1 = _2765;
                        frontier_phi_69_pred_2 = _2764;
                        frontier_phi_69_pred_3 = _2763;
                        frontier_phi_69_pred_4 = _2762;
                        frontier_phi_69_pred_5 = _2761;
                    }
                    _2433 = frontier_phi_69_pred;
                    _2431 = frontier_phi_69_pred_1;
                    _2429 = frontier_phi_69_pred_2;
                    _2427 = frontier_phi_69_pred_3;
                    _2425 = frontier_phi_69_pred_4;
                    _2423 = frontier_phi_69_pred_5;
                    uint _2568 = _2567 + 1u;
                    if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2561 = _2423;
                        _2562 = _2425;
                        _2563 = _2427;
                        _2564 = _2429;
                        _2565 = _2431;
                        _2566 = _2433;
                        _2567 = _2568;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2433;
                frontier_phi_57_58_ladder_1 = _2431;
                frontier_phi_57_58_ladder_2 = _2429;
                frontier_phi_57_58_ladder_3 = _2427;
                frontier_phi_57_58_ladder_4 = _2425;
                frontier_phi_57_58_ladder_5 = _2423;
            }
            else
            {
                frontier_phi_57_58_ladder = _2320;
                frontier_phi_57_58_ladder_1 = _2318;
                frontier_phi_57_58_ladder_2 = _2316;
                frontier_phi_57_58_ladder_3 = _2314;
                frontier_phi_57_58_ladder_4 = _2312;
                frontier_phi_57_58_ladder_5 = _2310;
            }
            _2422 = frontier_phi_57_58_ladder_5;
            _2424 = frontier_phi_57_58_ladder_4;
            _2426 = frontier_phi_57_58_ladder_3;
            _2428 = frontier_phi_57_58_ladder_2;
            _2430 = frontier_phi_57_58_ladder_1;
            _2432 = frontier_phi_57_58_ladder;
        }
        float _2437 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2222 = (_2437 * _2428) + _1656;
        _2224 = (_2437 * _2430) + _1658;
        _2226 = (_2437 * _2432) + _1660;
        _2228 = ((_2422 * _442) * _2437) + _2004;
        _2230 = ((_2424 * _444) * _2437) + _2006;
        _2232 = ((_2426 * _445) * _2437) + _2008;
    }
    else
    {
        _2222 = _1656;
        _2224 = _1658;
        _2226 = _1660;
        _2228 = _2004;
        _2230 = _2006;
        _2232 = _2008;
    }
    float _4068 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4079 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4090 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    uint _2252 = _416 + 6u;
    float _2260 = _375 / cbSceneParam._m0[86u].x;
    float _2261 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2275 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2277 = _2275.x;
    float _2278 = _2275.y;
    float _2279 = _2275.z;
    float _2280 = _2275.w;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2335 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2336 = _2335 / _309;
        float _2347 = _2336 * _360;
        float _2348 = _361 * _2336;
        float _2349 = (-0.0) - _2348;
        float _2350 = _2336 * _362;
        float _2352 = (cbSceneParam._m0[77u].w * _2349) / _2335;
        float _2353 = _2352 + cbSceneParam._m0[79u].w;
        float _2354 = cbSceneParam._m0[79u].w - _2348;
        float _2360 = sqrt(((_2347 * _2347) + (_2348 * _2348)) + (_2350 * _2350));
        float _2363 = (1.0 - (cbSceneParam._m0[77u].w / _2335)) * _2360;
        float _2368 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2370 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2523;
        if (abs((_2349 - _2352) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2523 = ((((_2353 > 0.0) ? exp2(_2368 * _2353) : (2.0 - exp2(_2370 * _2353))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2363;
        }
        else
        {
            float _2483 = 1.0 / cbSceneParam._m0[80u].x;
            float _2484 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : max(_2353, _2354));
            float _2485 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : min(_2353, _2354));
            float _2494 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : min(_2484, 0.0));
            float _2495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : min(_2485, 0.0));
            _2523 = ((abs(_2360 / _2349) * cbSceneParam._m0[80u].y) * ((((_2494 - _2495) * 2.0) - ((exp2(_2368 * (isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0)))) - exp2(_2368 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))))) * _2483)) - ((exp2(_2370 * _2494) - exp2(_2370 * _2495)) * _2483))) + (_2363 * cbSceneParam._m0[80u].z);
        }
        vec4 _2525 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, 1.0), 0.0);
        float _2534 = exp2((_2523 * (-1.44269502162933349609375)) * (1.0 - _2525.w));
        float _2535 = log2(_2534);
        float _2551 = log2(_2280);
        _2372 = (exp2(_2551 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].x)) * _2525.x) / cbSceneParam._m0[78u].x)) + _2277;
        _2374 = (exp2(_2551 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].y)) * _2525.y) / cbSceneParam._m0[78u].y)) + _2278;
        _2376 = (exp2(_2551 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].z)) * _2525.z) / cbSceneParam._m0[78u].z)) + _2279;
        _2378 = _2534 * _2280;
    }
    else
    {
        _2372 = _2277;
        _2374 = _2278;
        _2376 = _2279;
        _2378 = _2280;
    }
    float _2390 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2391 = _2390 == 3.0;
    float _2392 = log2(_2378);
    float _2399 = exp2(_2392 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2222 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _457))) + ((_2228 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2400 = exp2(_2392 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2224 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _457))) + ((_2230 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2401 = exp2(_2392 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2226 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _457))) + ((_2232 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2410 = (_2390 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2410 * (_2391 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.y = _2410 * (_2391 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2374)));
    SV_Target.z = _2410 * (_2391 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2376)));
    SV_Target.w = cbInstanceData._m0[_2252].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2252].w;
}


