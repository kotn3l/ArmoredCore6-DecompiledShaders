#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1603;
uint _3323;
uint _3324;
uint _3325;
uint _3592;
uint _3593;
uint _3594;
float _3856;
float _3857;
float _3858;
float _3859;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _321 = cbMtdParam._m0[18u].z - cbMtdParam._m0[18u].y;
    float _323 = (sqrt(((_303 * _303) + (_304 * _304)) + (_305 * _305)) - cbMtdParam._m0[18u].y) / (isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0)));
    float _325 = cbMtdParam._m0[18u].w + _323;
    float _330 = _325 * cbMtdParam._m0[19u].y;
    float _3873 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _333 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * cbMtdParam._m0[23u].y;
    float _3884 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _339 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _342 = ((cbMtdParam._m0[17u].w - cbMtdParam._m0[17u].x) * _339) + cbMtdParam._m0[17u].x;
    float _363 = cbMtdParam._m0[20u].z * _325;
    float _3906 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    vec4 _381 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _384 = _381.x;
    float _408 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _384)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _384))) - POSITION_1.w) / cbMtdParam._m0[17u].z;
    float _3917 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _414 = 1.0 - (isnan(cbMtdParam._m0[21u].w) ? _409 : (isnan(_409) ? cbMtdParam._m0[21u].w : max(_409, cbMtdParam._m0[21u].w)));
    float _433 = (cbMtdParam._m0[24u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _441 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _442 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _456 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_433 * cbMtdParam._m0[31u].w) + _441) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_442 + (_433 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _462 = _456.z - _339;
    float _3933 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _475 = (_463 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _477 = (_463 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _490 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_475 + (cbMtdParam._m0[27u].y * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_477 + (cbMtdParam._m0[27u].z * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _494 = _490.z;
    vec4 _507 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_475 + (cbMtdParam._m0[26u].w * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_477 + (cbMtdParam._m0[27u].x * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _511 = _507.z;
    float _514 = (_414 - _456.w) + (isnan(_511) ? _494 : (isnan(_494) ? _511 : max(_494, _511)));
    float _3949 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = (((cbMtdParam._m0[21u].z + TEXCOORD_3.x) - (_414 * cbMtdParam._m0[18u].x)) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)));
    float _518 = _516 - (_516 * TEXCOORD_7.w);
    float _526 = (POSITION_1.w - cbMtdParam._m0[24u].y) * (1.0 / cbMtdParam._m0[24u].x);
    float _3960 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _541 = (cbMtdParam._m0[29u].w * _433) + _441;
    float _542 = (cbMtdParam._m0[30u].x * _433) + _442;
    float _549 = cbMtdParam._m0[29u].y * _433;
    float _550 = cbMtdParam._m0[29u].z * _433;
    vec4 _570 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_549 + (_441 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_550 + (_442 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _579 = (_570.y * 2.0) + (-1.0);
    float _583 = 1.0 - dot(vec2(_577, _579), vec2(_577, _579));
    float _3971 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _585 = sqrt(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)));
    float _588 = fma(_585, _240, fma(_579, _247, _577 * _233));
    float _591 = fma(_585, _241, fma(_579, _248, _577 * _234));
    float _594 = fma(_585, _242, fma(_579, _249, _577 * _235));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = cbPerFrame._m0[22u].x * 2.0;
    float _600 = _599 * cbMtdParam._m0[22u].w;
    float _604 = ((_588 * 0.5) * _598) + (-0.25);
    float _608 = ((_591 * 0.5) * _598) + (-0.25);
    float _609 = _608 * cbMtdParam._m0[23u].x;
    float _611 = (-0.0) - (cbMtdParam._m0[23u].x * _604);
    float _612 = fract(_600);
    float _614 = fract(_600 + 0.5);
    float _625 = abs((_612 * 2.0) + (-1.0));
    vec4 _642 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_612 * _611) + _541) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_609 * _612) + _542) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    vec4 _647 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_614 * _611) + _541) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_609 * _614) + _542) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _658 = ((_647.x - _644) * _625) + _644;
    float _659 = ((_647.y - _645) * _625) + _645;
    float _660 = ((_647.z - _646) * _625) + _646;
    float _676 = (cbMtdParam._m0[28u].w * _433) + _441;
    float _677 = (cbMtdParam._m0[29u].x * _433) + _442;
    float _680 = _599 * cbMtdParam._m0[22u].z;
    float _681 = _608 * cbMtdParam._m0[22u].y;
    float _683 = (-0.0) - (cbMtdParam._m0[22u].y * _604);
    float _684 = fract(_680);
    float _686 = fract(_680 + 0.5);
    float _697 = abs((_684 * 2.0) + (-1.0));
    vec4 _714 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_684 * _683) + _676) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_681 * _684) + _677) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    vec4 _719 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_686 * _683) + _676) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_681 * _686) + _677) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _753 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _658) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].x) * (((_719.x - _716) * _697) + _716)) + (_658 * cbMtdParam._m0[15u].x);
    float _756 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _659) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].y) * (((_719.y - _717) * _697) + _717)) + (_659 * cbMtdParam._m0[15u].y);
    float _759 = ((((cbMtdParam._m0[25u].x * _660) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_719.z - _718) * _697) + _718)) + (_660 * cbMtdParam._m0[15u].z);
    float _763 = _753 - (_753 * _527);
    float _764 = _756 - (_756 * _527);
    float _765 = _759 - (_759 * _527);
    float _770 = (POSITION_1.w - cbMtdParam._m0[23u].w) * (1.0 / cbMtdParam._m0[23u].z);
    float _3982 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _781 = (cbMtdParam._m0[30u].y * _433) + _441;
    float _782 = (cbMtdParam._m0[30u].z * _433) + _442;
    vec4 _795 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_441 * cbMtdParam._m0[32u].y) + _549)) + cbTextureTilingScale._m0[3u].z, (((_442 * cbMtdParam._m0[32u].z) + _550) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _801 = (_795.x * 2.0) + (-1.0);
    float _802 = (_795.y * 2.0) + (-1.0);
    float _806 = 1.0 - dot(vec2(_801, _802), vec2(_801, _802));
    float _3993 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = sqrt(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)));
    float _811 = fma(_808, _240, fma(_802, _247, _801 * _233));
    float _814 = fma(_808, _241, fma(_802, _248, _801 * _234));
    float _817 = fma(_808, _242, fma(_802, _249, _801 * _235));
    float _821 = inversesqrt(dot(vec3(_811, _814, _817), vec3(_811, _814, _817)));
    float _822 = _599 * cbMtdParam._m0[25u].w;
    float _829 = (((_814 * 0.5) * _821) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _831 = (-0.0) - (cbMtdParam._m0[25u].z * (((_811 * 0.5) * _821) + (-0.25)));
    float _832 = fract(_822);
    float _834 = fract(_822 + 0.5);
    float _837 = (_832 * _831) + _781;
    float _838 = (_829 * _832) + _782;
    float _841 = (_834 * _831) + _781;
    float _842 = (_829 * _834) + _782;
    float _845 = abs((_832 * 2.0) + (-1.0));
    vec4 _862 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_838 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _864 = _862.x;
    float _865 = _862.y;
    float _866 = _862.z;
    vec4 _867 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_841 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_842 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _878 = ((_867.x - _864) * _845) + _864;
    float _879 = ((_867.y - _865) * _845) + _865;
    float _880 = ((_867.z - _866) * _845) + _866;
    vec4 _905 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_838 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _907 = _905.x;
    float _908 = _905.y;
    float _909 = _905.z;
    vec4 _910 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_841 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_842 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _961 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].x) * ((_763 + (_518 * cbMtdParam._m0[12u].x)) + ((((_878 * cbMtdParam._m0[9u].x) - _763) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _878) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].x) * (((_910.x - _907) * _845) + _907))) * _771));
    float _963 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].y) * ((_764 + (_518 * cbMtdParam._m0[12u].y)) + ((((_879 * cbMtdParam._m0[9u].y) - _764) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _879) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].y) * (((_910.y - _908) * _845) + _908))) * _771));
    float _965 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].z) * ((_765 + (_518 * cbMtdParam._m0[12u].z)) + ((((_880 * cbMtdParam._m0[9u].z) - _765) + ((((cbMtdParam._m0[25u].y * _880) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_910.z - _909) * _845) + _909))) * _771));
    float _4004 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _972 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _982 = _323 / cbMtdParam._m0[20u].x;
    float _4015 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _983 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1031 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1011 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[32u].w * _433))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1015 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[33u].x * _433))) + cbTextureTilingScale._m0[1u].w));
    float _1035 = _463 * 0.23999999463558197021484375;
    float _1037 = _463 * (-0.20000000298023223876953125);
    float _1048 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1049 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1064 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _433) + _1035) + _1048) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _433) + _1037) + _1049) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1080 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1048 + _1035) + (cbMtdParam._m0[34u].y * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1049 + _1037) + (cbMtdParam._m0[34u].z * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1100 = (((_507.x + (-0.5)) * 0.5) + _490.x) + (((_1064.x + (-1.0)) + _1080.x) * cbMtdParam._m0[21u].y);
    float _1101 = (((_507.y + (-0.5)) * 0.5) + _490.y) + (((_1064.y + (-1.0)) + _1080.y) * cbMtdParam._m0[21u].y);
    float _1106 = ((_1031.x - _1100) * _983) + _1100;
    float _1107 = ((_1031.y - _1101) * _983) + _1101;
    float _1109 = _323 / cbMtdParam._m0[19u].w;
    float _4026 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1110 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1126 = ((((_972 * (0.5 - _458)) + _458) + (((_1106 + (-0.5)) + ((0.5 - _1106) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1127 = ((((_972 * (0.5 - _459)) + _459) + (((_1107 + (-0.5)) + ((0.5 - _1107) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1128 = dot(vec2(_1126, _1127), vec2(_1126, _1127));
    float _4037 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1133 = sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))));
    float _1135 = cbMtdParam._m0[20u].w * _325;
    float _4048 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1141 = ((cbMtdParam._m0[21u].x - cbMtdParam._m0[19u].z) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) + cbMtdParam._m0[19u].z;
    float _1146 = _1126 - (_1141 * _1126);
    float _1147 = _1127 - (_1141 * _1127);
    float _1148 = (_1141 * (1.0 - _1133)) + _1133;
    float _1158 = fma(_1133, _240, fma(_1127, _247, _1126 * _233));
    float _1161 = fma(_1133, _241, fma(_1127, _248, _1126 * _234));
    float _1164 = fma(_1133, _242, fma(_1127, _249, _1126 * _235));
    float _1168 = inversesqrt(dot(vec3(_1158, _1161, _1164), vec3(_1158, _1161, _1164)));
    float _1169 = _1168 * _1158;
    float _1170 = _1168 * _1161;
    float _1171 = _1168 * _1164;
    float _1174 = fma(_1148, _240, fma(_1147, _247, _1146 * _233));
    float _1177 = fma(_1148, _241, fma(_1147, _248, _1146 * _234));
    float _1180 = fma(_1148, _242, fma(_1147, _249, _1146 * _235));
    float _1184 = inversesqrt(dot(vec3(_1174, _1177, _1180), vec3(_1174, _1177, _1180)));
    float _1185 = _1184 * _1174;
    float _1186 = _1184 * _1177;
    float _1187 = _1184 * _1180;
    float _4059 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _4070 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _1189 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1203 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1232 = cbSceneParam._m0[71u].x - (_1011 / _1223);
    float _1233 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1223);
    float _1234 = cbSceneParam._m0[71u].z - (_1015 / _1223);
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1239 = _1232 * _1238;
    float _1240 = _1233 * _1238;
    float _1241 = _1234 * _1238;
    vec4 _1246 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1248 = _1246.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1422 = sqrt(((_1232 * _1232) + (_1233 * _1233)) + (_1234 * _1234));
        float _1428 = (cbMatDynParam._m0[5u].x * _1422) + cbMatDynParam._m0[5u].y;
        float _4081 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1433 = (cbMatDynParam._m0[5u].z * _1422) + cbMatDynParam._m0[5u].w;
        float _4092 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) - _1429)) + _1429) < ((_1248 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1258 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1259 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1261 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1270 = (_1261.x * 2.0) + (-1.0);
    float _1271 = (_1261.y * 2.0) + (-1.0);
    float _1272 = (_1261.z * 2.0) + (-1.0);
    float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
    float _1287 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1261.w;
    float _1294 = (((_1270 * _1276) - _1169) * _1287) + _1169;
    float _1295 = (((_1271 * _1276) - _1170) * _1287) + _1170;
    float _1296 = (((_1272 * _1276) - _1171) * _1287) + _1171;
    float _1314 = fma(_1296, cbSceneParam._m0[5u].z, fma(_1295, cbSceneParam._m0[5u].y, _1294 * cbSceneParam._m0[5u].x));
    float _1317 = fma(_1296, cbSceneParam._m0[6u].z, fma(_1295, cbSceneParam._m0[6u].y, _1294 * cbSceneParam._m0[6u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[7u].z, fma(_1295, cbSceneParam._m0[7u].y, _1294 * cbSceneParam._m0[7u].x));
    vec4 _1329 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1258, cbSceneParam._m0[86u].y * _1259));
    float _1332 = _1329.x * TEXCOORD_3.w;
    float _1336 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1294, _1295, _1296)));
    float _4103 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1348 = dot(vec3(_1185, _1186, _1187), vec3(_1239, _1240, _1241)) * 2.0;
    float _1352 = (_1348 * _1185) - _1239;
    float _1353 = (_1348 * _1186) - _1240;
    float _1354 = (_1348 * _1187) - _1241;
    float _1358 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1185, _1186, _1187)));
    float _4114 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
    float _1360 = sqrt(_1189);
    float _1372 = exp2((_1360 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1360 * 3.0));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1602;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1465 = fma(_1411, cbModelParam._m0[26u].z, fma(_1407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1403));
        float _1469 = fma(_1411, cbModelParam._m0[27u].z, fma(_1407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1403));
        float _1473 = fma(_1411, cbModelParam._m0[28u].z, fma(_1407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1403));
        float _1496 = _1403 + _1185;
        float _1497 = _1407 + _1186;
        float _1498 = _1411 + _1187;
        float _1508 = fma(_1498, cbModelParam._m0[26u].z, fma(_1497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1496)) - _1465;
        float _1509 = fma(_1498, cbModelParam._m0[27u].z, fma(_1497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1496)) - _1469;
        float _1510 = fma(_1498, cbModelParam._m0[28u].z, fma(_1497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1496)) - _1473;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1526 = ((_1514 * _1508) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1465 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1514 * _1509) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1469 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1514 * _1510) / cbModelParam._m0[34u].z) + ((((((_1473 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1565 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1552.x + (-0.5));
        float _1597 = _1595 * (_1552.y + (-0.5));
        float _1598 = _1595 * (_1552.z + (-0.5));
        _1602 = _1565 * (_1531.z + (-0.5));
        _1604 = _1565 * (_1531.y + (-0.5));
        _1605 = _1565 * (_1531.x + (-0.5));
        _1606 = _1575 * (_1538.z + (-0.5));
        _1607 = _1575 * (_1538.y + (-0.5));
        _1608 = _1575 * (_1538.x + (-0.5));
        _1609 = _1585 * (_1545.z + (-0.5));
        _1610 = _1585 * (_1545.y + (-0.5));
        _1611 = _1585 * (_1545.x + (-0.5));
        _1612 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        _1613 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        _1614 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    }
    else
    {
        _1602 = _1603;
        _1604 = _1603;
        _1605 = _1603;
        _1606 = _1603;
        _1607 = _1603;
        _1608 = _1603;
        _1609 = _1603;
        _1610 = _1603;
        _1611 = _1603;
        _1612 = _1603;
        _1613 = _1603;
        _1614 = _1603;
    }
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1640 = fma(_1411, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403));
        float _1644 = fma(_1411, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403));
        float _1648 = fma(_1411, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403));
        float _1671 = _1403 + _1185;
        float _1672 = _1407 + _1186;
        float _1673 = _1411 + _1187;
        float _1683 = fma(_1673, cbModelParam._m0[30u].z, fma(_1672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1671)) - _1640;
        float _1684 = fma(_1673, cbModelParam._m0[31u].z, fma(_1672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1671)) - _1644;
        float _1685 = fma(_1673, cbModelParam._m0[32u].z, fma(_1672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1671)) - _1648;
        float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
        float _1701 = ((_1689 * _1683) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1640 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1689 * _1684) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1644 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1703 = ((_1689 * _1685) / cbModelParam._m0[35u].z) + ((((((_1648 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        float _1738 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1726.x + (-0.5));
        float _1770 = _1768 * (_1726.y + (-0.5));
        float _1771 = _1768 * (_1726.z + (-0.5));
        _1775 = _1738 * (_1705.z + (-0.5));
        _1776 = _1738 * (_1705.y + (-0.5));
        _1777 = _1738 * (_1705.x + (-0.5));
        _1778 = _1748 * (_1712.z + (-0.5));
        _1779 = _1748 * (_1712.y + (-0.5));
        _1780 = _1748 * (_1712.x + (-0.5));
        _1781 = _1758 * (_1719.z + (-0.5));
        _1782 = _1758 * (_1719.y + (-0.5));
        _1783 = _1758 * (_1719.x + (-0.5));
        _1784 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        _1785 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        _1786 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    }
    else
    {
        _1775 = _1603;
        _1776 = _1603;
        _1777 = _1603;
        _1778 = _1603;
        _1779 = _1603;
        _1780 = _1603;
        _1781 = _1603;
        _1782 = _1603;
        _1783 = _1603;
        _1784 = _1603;
        _1785 = _1603;
        _1786 = _1603;
    }
    float _1800 = _1352 * 0.5;
    float _1801 = _1353 * 0.5;
    float _1802 = _1354 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1602, _1606, _1609, _1612));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1604, _1607, _1610, _1613));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1605, _1608, _1611, _1614));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1189);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1914 = fma(_1411, cbModelParam._m0[13u].z, fma(_1407, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1403)) + cbModelParam._m0[13u].w;
        float _1918 = fma(_1411, cbModelParam._m0[14u].z, fma(_1407, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1403)) + cbModelParam._m0[14u].w;
        float _1922 = fma(_1411, cbModelParam._m0[15u].z, fma(_1407, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1403)) + cbModelParam._m0[15u].w;
        float _1925 = fma(_1354, cbModelParam._m0[13u].z, fma(_1353, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1352));
        float _1928 = fma(_1354, cbModelParam._m0[14u].z, fma(_1353, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1352));
        float _1931 = fma(_1354, cbModelParam._m0[15u].z, fma(_1353, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1352));
        float _1959;
        if (_1925 > 0.0)
        {
            _1959 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1959 = frontier_phi_17_15_ladder;
        }
        float _2146;
        if (_1928 > 0.0)
        {
            _2146 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2146 = frontier_phi_26_22_ladder;
        }
        float _2552;
        if (_1931 > 0.0)
        {
            _2552 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2552 = frontier_phi_38_33_ladder;
        }
        float _2554 = isnan(_2146) ? _1959 : (isnan(_1959) ? _2146 : min(_1959, _2146));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1925) + _1914;
        float _2560 = (_2555 * _1928) + _1918;
        float _2561 = (_2555 * _1931) + _1922;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_16_38_ladder = _2921.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2921.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2921.x * cbModelParam._m0[1u].y;
        }
        _1947 = frontier_phi_16_38_ladder_2;
        _1949 = frontier_phi_16_38_ladder_1;
        _1951 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1352, _1353, _1354), _1867);
        _1947 = _1935.x * cbModelParam._m0[1u].y;
        _1949 = _1935.y * cbModelParam._m0[1u].y;
        _1951 = _1935.z * cbModelParam._m0[1u].y;
    }
    float _1955 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1189);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1955 : min(cbModelParam._m0[25u].w, _1955));
    float _2045;
    float _2047;
    float _2049;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2009 = fma(_1411, cbModelParam._m0[21u].z, fma(_1407, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1403)) + cbModelParam._m0[21u].w;
        float _2013 = fma(_1411, cbModelParam._m0[22u].z, fma(_1407, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1403)) + cbModelParam._m0[22u].w;
        float _2017 = fma(_1411, cbModelParam._m0[23u].z, fma(_1407, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1403)) + cbModelParam._m0[23u].w;
        float _2020 = fma(_1354, cbModelParam._m0[21u].z, fma(_1353, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1352));
        float _2023 = fma(_1354, cbModelParam._m0[22u].z, fma(_1353, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1352));
        float _2026 = fma(_1354, cbModelParam._m0[23u].z, fma(_1353, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1352));
        float _2151;
        if (_2020 > 0.0)
        {
            _2151 = abs((1.0 - _2009) / _2020);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2009 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2151 = frontier_phi_28_24_ladder;
        }
        float _2579;
        if (_2023 > 0.0)
        {
            _2579 = abs((1.0 - _2013) / _2023);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2013 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2579 = frontier_phi_40_35_ladder;
        }
        float _3087;
        if (_2026 > 0.0)
        {
            _3087 = abs((1.0 - _2017) / _2026);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_2017 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _3087 = frontier_phi_52_47_ladder;
        }
        float _3089 = isnan(_2579) ? _2151 : (isnan(_2151) ? _2579 : min(_2151, _2579));
        float _3090 = isnan(_3087) ? _3089 : (isnan(_3089) ? _3087 : min(_3089, _3087));
        float _3094 = (_3090 * _2020) + _2009;
        float _3095 = (_3090 * _2023) + _2013;
        float _3096 = (_3090 * _2026) + _2017;
        float _3097 = _3090 * 9.9999997473787516355514526367188e-05;
        float _3098 = (-1.0) - _3097;
        float _3100 = _3097 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_3096 > _3100) || ((_3096 < _3098) || ((_3095 > _3100) || ((_3095 < _3098) || ((_3094 < _3098) || (_3094 > _3100))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3221 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3096, cbModelParam._m0[17u].z, fma(_3095, cbModelParam._m0[17u].y, _3094 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3096, cbModelParam._m0[18u].z, fma(_3095, cbModelParam._m0[18u].y, _3094 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3096, cbModelParam._m0[19u].z, fma(_3095, cbModelParam._m0[19u].y, _3094 * cbModelParam._m0[19u].x))), _1956);
            frontier_phi_25_52_ladder = _3221.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _3221.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _3221.x * cbModelParam._m0[1u].z;
        }
        _2045 = frontier_phi_25_52_ladder_2;
        _2047 = frontier_phi_25_52_ladder_1;
        _2049 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1352, _1353, _1354), _1956);
        _2045 = _2029.x * cbModelParam._m0[1u].z;
        _2047 = _2029.y * cbModelParam._m0[1u].z;
        _2049 = _2029.z * cbModelParam._m0[1u].z;
    }
    float _2061 = ((((1.0 - _1372) * ((_1360 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1372 * _1360)) * _1332;
    float _2062 = _2061 * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2063 = _2061 * ((cbModelParam._m0[1u].w * (_2047 - _1949)) + _1949);
    float _2064 = _2061 * ((cbModelParam._m0[1u].w * (_2049 - _1951)) + _1951);
    float _2085 = fma(_2064, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2062 * cbSceneParam._m0[89u].x));
    float _2088 = fma(_2064, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2062 * cbSceneParam._m0[90u].x));
    float _2091 = fma(_2064, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2062 * cbSceneParam._m0[91u].x));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2138 = _2125 / _2137;
    float _2139 = _2129 / _2137;
    float _2140 = _2133 / _2137;
    float _2286;
    float _2287;
    float _2288;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2167 = ((uint(_2140 > cbSceneParam._m0[59u].y) + uint(_2140 > cbSceneParam._m0[59u].x)) + uint(_2140 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2168 = _2167 + 43u;
        uint _2176 = _2167 + 44u;
        uint _2184 = _2167 + 45u;
        uint _2192 = _2167 + 46u;
        float _2203 = fma(_2137, cbSceneParam._m0[_2168].w, fma(_2133, cbSceneParam._m0[_2168].z, fma(_2129, cbSceneParam._m0[_2168].y, _2125 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2137, cbSceneParam._m0[_2176].w, fma(_2133, cbSceneParam._m0[_2176].z, fma(_2129, cbSceneParam._m0[_2176].y, _2125 * cbSceneParam._m0[_2176].x)));
        float _2215 = fma(_2137, cbSceneParam._m0[_2192].w, fma(_2133, cbSceneParam._m0[_2192].z, fma(_2129, cbSceneParam._m0[_2192].y, _2125 * cbSceneParam._m0[_2192].x)));
        float _2219 = cbSceneParam._m0[33u].z * _2215;
        float _2221 = cbSceneParam._m0[33u].w * _2215;
        float _2224 = fma(_2137, cbSceneParam._m0[_2184].w, fma(_2133, cbSceneParam._m0[_2184].z, fma(_2129, cbSceneParam._m0[_2184].y, _2125 * cbSceneParam._m0[_2184].x))) / _2215;
        float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
        float _4240 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2279 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 + _2203) / _2215, (_2221 + _2207) / _2215), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 + _2203) / _2215, (_2207 - _2219) / _2215), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2219) / _2215, (_2207 - _2221) / _2215), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2221) / _2215, (_2219 + _2207) / _2215), _2224), 0.0)).x), vec4(0.25)));
        _2286 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
        _2287 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
        _2288 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2286 = 1.0;
        _2287 = 1.0;
        _2288 = 1.0;
    }
    float _2352;
    float _2354;
    float _2356;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2340 = fma(_2137, cbSceneParam._m0[63u].w, fma(_2133, cbSceneParam._m0[63u].z, fma(_2129, cbSceneParam._m0[63u].y, _2125 * cbSceneParam._m0[63u].x)));
        float _2341 = fma(_2137, cbSceneParam._m0[60u].w, fma(_2133, cbSceneParam._m0[60u].z, fma(_2129, cbSceneParam._m0[60u].y, _2125 * cbSceneParam._m0[60u].x))) / _2340;
        float _2342 = fma(_2137, cbSceneParam._m0[61u].w, fma(_2133, cbSceneParam._m0[61u].z, fma(_2129, cbSceneParam._m0[61u].y, _2125 * cbSceneParam._m0[61u].x))) / _2340;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2341 >= cbSceneParam._m0[64u].x) && (_2342 >= cbSceneParam._m0[64u].y)) && (_2341 <= cbSceneParam._m0[64u].z)) && (_2342 <= cbSceneParam._m0[64u].w))
        {
            float _2592 = fma(_2137, cbSceneParam._m0[62u].w, fma(_2133, cbSceneParam._m0[62u].z, fma(_2129, cbSceneParam._m0[62u].y, _2125 * cbSceneParam._m0[62u].x))) / _2340;
            float _2596 = isnan(cbSceneParam._m0[41u].w) ? _2592 : (isnan(_2592) ? cbSceneParam._m0[41u].w : max(_2592, cbSceneParam._m0[41u].w));
            float _2639 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
            float _4256 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
            float _2646 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2341, cbSceneParam._m0[33u].w + _2342), _2596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2341, _2342 - cbSceneParam._m0[33u].z), _2596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2341 - cbSceneParam._m0[33u].z, _2342 - cbSceneParam._m0[33u].w), _2596), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2341 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2342), _2596), 0.0)).x), vec4(0.25)));
            float _2650 = 1.0 - (_2646 * cbSceneParam._m0[34u].x);
            float _2651 = 1.0 - (_2646 * cbSceneParam._m0[34u].y);
            float _2652 = 1.0 - (_2646 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2650) ? _2286 : (isnan(_2286) ? _2650 : min(_2286, _2650));
            frontier_phi_37_36_ladder_1 = isnan(_2651) ? _2287 : (isnan(_2287) ? _2651 : min(_2287, _2651));
            frontier_phi_37_36_ladder_2 = isnan(_2652) ? _2288 : (isnan(_2288) ? _2652 : min(_2288, _2652));
        }
        else
        {
            frontier_phi_37_36_ladder = _2286;
            frontier_phi_37_36_ladder_1 = _2287;
            frontier_phi_37_36_ladder_2 = _2288;
        }
        _2352 = frontier_phi_37_36_ladder;
        _2354 = frontier_phi_37_36_ladder_1;
        _2356 = frontier_phi_37_36_ladder_2;
    }
    else
    {
        _2352 = _2286;
        _2354 = _2287;
        _2356 = _2288;
    }
    uint _2358 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2362 = floatBitsToUint(cbInstanceData._m0[_2358 + 5u]);
    uint _2364 = _2362.x * 14u;
    uint _2365 = _2364 + 13u;
    float _2370 = _1332 + (-1.0);
    float _2373 = (cbLight._m0[_2365].x * _2370) + 1.0;
    float _2374 = (cbLight._m0[_2365].y * _2370) + 1.0;
    uint _2378 = _2364 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _1189) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2364].x + _1239;
    float _2397 = cbLight._m0[_2364].y + _1240;
    float _2398 = cbLight._m0[_2364].z + _1241;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2364].xyz));
    float _4282 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2410 = dot(vec3(_1294, _1295, _1296), vec3(_1239, _1240, _1241));
    float _4293 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2414 = dot(vec3(_1294, _1295, _1296), vec3(_2403, _2404, _2405));
    float _4304 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2403, _2404, _2405));
    float _4315 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2395 * _2395;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2395;
    float _2449 = (0.5 / (((_2413 * ((_2409 * _2438) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2438) + _2395) * _2409))) * _2409;
    float _4326 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2452 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2465 = _2364 | 1u;
    uint _2469 = _2364 + 9u;
    float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _1189) * 0.949999988079071044921875);
    float _2484 = _2483 * _2483;
    float _2485 = cbLight._m0[_2465].x + _1239;
    float _2486 = cbLight._m0[_2465].y + _1240;
    float _2487 = cbLight._m0[_2465].z + _1241;
    float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
    float _2492 = _2491 * _2485;
    float _2493 = _2491 * _2486;
    float _2494 = _2491 * _2487;
    float _2495 = dot(vec3(_1294, _1295, _1296), vec3(cbLight._m0[_2465].xyz));
    float _4342 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2499 = dot(vec3(_1294, _1295, _1296), vec3(_2492, _2493, _2494));
    float _4353 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
    float _4364 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2484 * _2484;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2520 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2521 = 1.0 - _2484;
    float _2531 = (0.5 / (((_2413 * ((_2498 * _2521) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2521) + _2484) * _2498))) * _2498;
    float _4375 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    float _2534 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    float _2544 = (((_2520 * cbLight._m0[_2469].x) * _2533) * _2534) + ((((cbLight._m0[_2378].x * _2352) * _2437) * _2451) * _2452);
    float _2545 = (((_2520 * cbLight._m0[_2469].y) * _2533) * _2534) + ((((cbLight._m0[_2378].y * _2354) * _2437) * _2451) * _2452);
    float _2546 = (((_2520 * cbLight._m0[_2469].z) * _2533) * _2534) + ((((cbLight._m0[_2378].z * _2356) * _2437) * _2451) * _2452);
    float _2709;
    float _2711;
    float _2713;
    if (_2362.y == 0u)
    {
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.x;
        uint _2676 = uint((float(_2664.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1259) / _2665))) + floor(float(uint(cbSceneParam._m0[85u].x * _1258) / _2665)));
        float _2686 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        uint _2690 = uint(isnan(14.0) ? _2687 : (isnan(_2687) ? 14.0 : min(_2687, 14.0)));
        uvec4 _2695 = texelFetch(g_lightClusterGridBuffer, int(((_2690 << 2u) + (_2676 << 6u)) >> 2u));
        uint _2696 = _2695.x;
        uint _2697 = _2664.z;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2697 >> 4u) & 15u)) + 4294967295u) & _2696) == 0u) || ((_2697 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_3149)
                {
                    frontier_phi_63_pred = _3138;
                    frontier_phi_63_pred_1 = _3137;
                    frontier_phi_63_pred_2 = _3136;
                }
                else
                {
                    float _3293;
                    float _3294;
                    float _3295;
                    uint _3296;
                    _3293 = _3136;
                    _3294 = _3137;
                    _3295 = _3138;
                    _3296 = _3148;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3300 = uint(findLSB(_3296)) + (_3139 << 5u);
                        uint _3297 = (_3296 + 4294967295u) & _3296;
                        uint _3302 = _3300 * 48u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3333 = (_3300 * 48u) + 8u;
                        vec3 _3344 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x));
                        float _3348 = _3316.x - _2138;
                        float _3349 = _3316.y - _2139;
                        float _3350 = _3316.z - _2140;
                        float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                        float _3354 = inversesqrt(_3351);
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3363 = 1.0 - (_3351 * _3316.w);
                        float _4401 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3365 = sqrt(_3351) * uintBitsToFloat(uvec4(_3323, _3324, _3325, texelFetch(g_PointLightRenderingBuffer, int(((_3300 * 48u) + 4u) + 3u)).x)).w;
                        float _3369 = _3365 * _3365;
                        float _3370 = (-0.0) - _2138;
                        float _3371 = (-0.0) - _2139;
                        float _3372 = (-0.0) - _2140;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3386 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3387 = 1.0 - _1360;
                        float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                        float _3395 = _3394 * _3394;
                        float _3396 = _3395 * _3395;
                        float _3397 = _3377 + _3355;
                        float _3398 = _3378 + _3356;
                        float _3399 = _3379 + _3357;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3407 = dot(vec3(_1314, _1317, _1320), vec3(_3377, _3378, _3379));
                        float _4412 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3411 = dot(vec3(_1314, _1317, _1320), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                        float _4423 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                        float _3419 = (1.39999997615814208984375 / (_3365 + 1.39999997615814208984375)) * _3395;
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * dot(vec3(_1314, _1317, _1320), vec3(_3355, _3356, _3357))) + _3420;
                        float _4434 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3425 = 1.0 - _3395;
                        float _3435 = (0.5 / (((_3424 * ((_3410 * _3425) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3395) * _3410))) * _3424;
                        float _4445 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3446 = (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3418 * _3418) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)));
                        _3226 = (_3446 * _3344.x) + _3293;
                        _3227 = (_3446 * _3344.y) + _3294;
                        _3228 = (_3446 * _3344.z) + _3295;
                        if (_3297 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3293 = _3226;
                            _3294 = _3227;
                            _3295 = _3228;
                            _3296 = _3297;
                        }
                    }
                    frontier_phi_63_pred = _3228;
                    frontier_phi_63_pred_1 = _3227;
                    frontier_phi_63_pred_2 = _3226;
                }
                _2935 = frontier_phi_63_pred;
                _2933 = frontier_phi_63_pred_1;
                _2931 = frontier_phi_63_pred_2;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2931;
                    _3137 = _2933;
                    _3138 = _2935;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _2941) & _2696) == 0u)
        {
            _3113 = _2930;
            _3115 = _2932;
            _3117 = _2934;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
            float _3130 = _3129 * _2138;
            float _3131 = _3129 * _2139;
            float _3132 = _3129 * _2140;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3114;
                float _3116;
                float _3118;
                float _3279 = _2930;
                float _3280 = _2932;
                float _3281 = _2934;
                uint _3282 = _2941;
                uint _3291;
                bool _3292;
                for (;;)
                {
                    _3291 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                    _3292 = _3291 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    if (_3292)
                    {
                        frontier_phi_74_pred = _3281;
                        frontier_phi_74_pred_1 = _3280;
                        frontier_phi_74_pred_2 = _3279;
                    }
                    else
                    {
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3470 = _3279;
                        float _3471 = _3280;
                        float _3472 = _3281;
                        uint _3473 = _3291;
                        uint _3474;
                        uint _3484;
                        vec4 _3499;
                        float _3500;
                        vec3 _3512;
                        vec4 _3527;
                        vec4 _3542;
                        float _3588;
                        bool _3589;
                        for (;;)
                        {
                            _3484 = ((_3282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 8u;
                            _3512 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x));
                            uint _3514 = (_3484 * 40u) + 16u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3484 * 40u) + 20u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3484 * 40u) + 24u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3563 = (_3484 * 40u) + 28u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3588 = fma(_2140, _3576.z, fma(_2139, _3576.y, _3576.x * _2138)) + _3576.w;
                            _3589 = !((fma(_2140, _3557.z, fma(_2139, _3557.y, _3557.x * _2138)) + _3557.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            if (_3589)
                            {
                                float _3623 = _3499.x - _2138;
                                float _3624 = _3499.y - _2139;
                                float _3625 = _3499.z - _2140;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3500 * _3500));
                                float _4456 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3638 = sqrt(_3626) * uintBitsToFloat(uvec4(_3592, _3593, _3594, texelFetch(g_SpotLightRenderingBuffer, int(((_3484 * 40u) + 4u) + 3u)).x)).w;
                                float _3641 = _3638 * _3638;
                                float _3642 = (fma(_2140, _3527.z, fma(_2139, _3527.y, _3527.x * _2138)) + _3527.w) / _3588;
                                float _3643 = (fma(_2140, _3542.z, fma(_2139, _3542.y, _3542.x * _2138)) + _3542.w) / _3588;
                                float _3647 = 1.0 - dot(vec2(_3642, _3643), vec2(_3642, _3643));
                                float _4467 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = exp2(log2(1.0 / ((_3641 * 3.5) + 5.0)) * 0.25);
                                float _3658 = 1.0 - _1360;
                                float _3665 = sqrt(1.0 - ((1.0 - (_3658 * _3658)) * (1.0 - (_3657 * _3657))));
                                float _3666 = _3665 * _3665;
                                float _3667 = _3666 * _3666;
                                float _3668 = _3630 - _3130;
                                float _3669 = _3631 - _3131;
                                float _3670 = _3632 - _3132;
                                float _3674 = inversesqrt(dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670)));
                                float _3678 = dot(vec3(_1314, _1317, _1320), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4478 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3682 = dot(vec3(_1314, _1317, _1320), vec3(_3674 * _3668, _3674 * _3669, _3674 * _3670));
                                float _4489 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3689 = ((_3685 * _3685) * (_3667 + (-1.0))) + 1.0;
                                float _3690 = (1.39999997615814208984375 / (_3638 + 1.39999997615814208984375)) * _3666;
                                float _3691 = _3690 * _3690;
                                float _3697 = ((1.0 - _3691) * dot(vec3(_1314, _1317, _1320), vec3(_3630, _3631, _3632))) + _3691;
                                float _4500 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3699 = 1.0 - _3666;
                                float _3709 = (0.5 / (((_3698 * ((_3681 * _3699) + _3666)) + 9.9999999392252902907785028219223e-09) + (((_3698 * _3699) + _3666) * _3681))) * _3698;
                                float _4511 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3719 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * (((_3667 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3689 * _3689) * ((_3641 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3719 * _3512.z;
                                frontier_phi_80_pred_1 = _3719 * _3512.y;
                                frontier_phi_80_pred_2 = _3719 * _3512.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                            }
                            _3725 = frontier_phi_80_pred;
                            _3724 = frontier_phi_80_pred_1;
                            _3723 = frontier_phi_80_pred_2;
                            _3460 = _3723 + _3470;
                            _3461 = _3724 + _3471;
                            _3462 = _3725 + _3472;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3460;
                                _3471 = _3461;
                                _3472 = _3462;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3462;
                        frontier_phi_74_pred_1 = _3461;
                        frontier_phi_74_pred_2 = _3460;
                    }
                    _3118 = frontier_phi_74_pred;
                    _3116 = frontier_phi_74_pred_1;
                    _3114 = frontier_phi_74_pred_2;
                    uint _3283 = _3282 + 1u;
                    if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3279 = _3114;
                        _3280 = _3116;
                        _3281 = _3118;
                        _3282 = _3283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _3118;
                frontier_phi_54_55_ladder_1 = _3116;
                frontier_phi_54_55_ladder_2 = _3114;
            }
            else
            {
                frontier_phi_54_55_ladder = _2934;
                frontier_phi_54_55_ladder_1 = _2932;
                frontier_phi_54_55_ladder_2 = _2930;
            }
            _3113 = frontier_phi_54_55_ladder_2;
            _3115 = frontier_phi_54_55_ladder_1;
            _3117 = frontier_phi_54_55_ladder;
        }
        float _3122 = isnan(1.0) ? _1332 : (isnan(_1332) ? 1.0 : min(_1332, 1.0));
        _2709 = ((_3113 * 0.039999999105930328369140625) * _3122) + _2544;
        _2711 = ((_3115 * 0.039999999105930328369140625) * _3122) + _2545;
        _2713 = ((_3117 * 0.039999999105930328369140625) * _3122) + _2546;
    }
    else
    {
        _2709 = _2544;
        _2711 = _2545;
        _2713 = _2546;
    }
    uint _2719 = _2358 + 9u;
    uint _2720 = _2719 + uint(cbMatDynParam._m0[0u].w);
    float _2726 = cbInstanceData._m0[_2720].x * (_961 - (_961 * TEXCOORD_7.x));
    float _2727 = cbInstanceData._m0[_2720].y * (_963 - (_963 * TEXCOORD_7.y));
    float _2728 = cbInstanceData._m0[_2720].z * (_965 - (_965 * TEXCOORD_7.z));
    float _2748 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2749 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2750 = cbSceneParam._m0[86u].x * ((_1258 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1203 + 10.0)) * dot(vec3(_1294, _1295, _1296), vec3(_233, _234, _235))));
    float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
    float _2752 = isnan(_2749) ? _1259 : (isnan(_1259) ? _2749 : min(_1259, _2749));
    vec4 _2754 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2751, _2752), 0.0);
    float _2756 = _2754.x;
    bool _2776 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2756)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2756))) > _1203;
    float _2777 = _2776 ? _2751 : _1258;
    float _2778 = _2776 ? _2752 : _1259;
    vec4 _2780 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2777, _2778));
    vec4 _2785 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2777, _2778));
    float _2787 = _2785.x;
    float _2807 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2787)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2787))) - _1203;
    bool _2814 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2818 = (isnan(_2807) ? 0.0 : (isnan(0.0) ? _2807 : max(0.0, _2807))) * (-1.44269502162933349609375);
    float _2838 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2849 = (_2726 + ((_2709 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + (((_2838 * _2780.x) * exp2(_2818 * (_2814 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2851 = (_2727 + ((_2711 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + (((_2838 * _2780.y) * exp2(_2818 * (_2814 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2853 = (_2728 + ((_2713 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + (((_2838 * _2780.z) * exp2(_2818 * (_2814 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2854 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2855 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2856 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2862 = cbMtdParam._m0[2u].x * _2726;
    float _2863 = cbMtdParam._m0[2u].y * _2727;
    float _2864 = cbMtdParam._m0[2u].z * _2728;
    float _4557 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2866 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2871 = cbInstanceData._m0[_2358 + 6u].w * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)));
    float _2876 = _1258 / cbSceneParam._m0[86u].x;
    float _2877 = _1259 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _1203 : (isnan(_1203) ? cbSceneParam._m0[77u].w : min(_1203, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_1203 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_1203) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1203 : min(cbSceneParam._m0[80u].w, _1203));
        float _2950 = _2949 / _1203;
        float _2961 = _2950 * _1232;
        float _2962 = _1233 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2964 = _2950 * _1234;
        float _2966 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2967 = _2966 + cbSceneParam._m0[79u].w;
        float _2968 = cbSceneParam._m0[79u].w - _2962;
        float _2974 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2964 * _2964));
        float _2977 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2974;
        float _2982 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_2963 - _2966) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_2967 > 0.0) ? exp2(_2982 * _2967) : (2.0 - exp2(_2983 * _2967))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2977;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : max(_2967, _2968));
            float _3164 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : min(_2967, _2968));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3236 = ((abs(_2974 / _2963) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_2982 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_2982 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_2983 * _3173) - exp2(_2983 * _3174)) * _3162))) + (_2977 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_2896);
        _2985 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2987 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2989 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2991 = _3247 * _2896;
    }
    else
    {
        _2985 = _2893;
        _2987 = _2894;
        _2989 = _2895;
        _2991 = _2896;
    }
    bool _3274;
    float _3046;
    vec4 _3049;
    float _3051;
    vec4 _3053;
    float _3061;
    float _3062;
    float _3063;
    float _3067;
    float _3071;
    float _3075;
    float _3076;
    bool _3086;
    for (;;)
    {
        bool _3003 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3004 = log2(_2991);
        float _3008 = exp2(_3004 * cbSceneParam._m0[78u].x);
        float _3009 = exp2(_3004 * cbSceneParam._m0[78u].y);
        float _3010 = exp2(_3004 * cbSceneParam._m0[78u].z);
        float _3011 = _3008 * _2854;
        float _3012 = _3009 * _2855;
        float _3013 = _3010 * _2856;
        vec4 _3021 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1258, _1259));
        float _3023 = _3021.x;
        float _3044 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3023)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3023))) - _1203) * cbMtdParam._m0[20u].y;
        float _4608 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3045 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        _3046 = _2871 * _3045;
        float _3047 = _1248 + (-0.5);
        _3049 = cbMtdParam._m0[1u];
        _3051 = _3049.y * _3047;
        _3053 = cbMatDynParam._m0[0u];
        float _3060 = (roundEven(_3053.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3061 = _3060 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2985)));
        _3062 = _3060 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2987)));
        _3063 = _3060 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2989)));
        _3067 = (((_2862 * _2866) * _3008) * _3045) * _3060;
        _3071 = (((_2863 * _2866) * _3009) * _3045) * _3060;
        _3075 = (((_2864 * _2866) * _3010) * _3045) * _3060;
        _3076 = _3047 * 0.999000012874603271484375;
        _3086 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3086)
        {
            if ((cbInstanceData._m0[_2358 + 7u].x + _3076) < 0.5)
            {
                _3274 = true;
                break;
            }
        }
        uint _3197 = _2719 + uint(_3053.w);
        if ((cbInstanceData._m0[_3197].w < 1.0) && ((cbInstanceData._m0[_3197].w + _3076) < 0.5))
        {
            _3274 = true;
            break;
        }
        if ((_3051 + 1.0) < _3049.x)
        {
            _3274 = true;
            break;
        }
        _3274 = false;
        break;
    }
    float _3451;
    if (_3274)
    {
        discard_state = true;
        _3451 = 0.0;
    }
    else
    {
        _3451 = _3046;
    }
    SV_Target.x = _3061;
    SV_Target.y = _3062;
    SV_Target.z = _3063;
    SV_Target.w = _3451;
    SV_Target_1.x = _3067;
    SV_Target_1.y = _3071;
    SV_Target_1.z = _3075;
    SV_Target_1.w = _3046;
    discard_exit();
}


