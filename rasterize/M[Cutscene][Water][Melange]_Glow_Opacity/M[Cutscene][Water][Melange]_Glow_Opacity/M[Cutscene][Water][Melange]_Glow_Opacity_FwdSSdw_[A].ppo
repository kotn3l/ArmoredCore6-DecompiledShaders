#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1601;
uint _3050;
uint _3051;
uint _3052;
uint _3341;
uint _3342;
uint _3343;
float _3596;
float _3597;
float _3598;
float _3599;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _319 = cbMtdParam._m0[18u].z - cbMtdParam._m0[18u].y;
    float _321 = (sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303)) - cbMtdParam._m0[18u].y) / (isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0)));
    float _323 = cbMtdParam._m0[18u].w + _321;
    float _328 = _323 * cbMtdParam._m0[19u].y;
    float _3613 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _331 = (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * cbMtdParam._m0[23u].y;
    float _3624 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _337 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _340 = ((cbMtdParam._m0[17u].w - cbMtdParam._m0[17u].x) * _337) + cbMtdParam._m0[17u].x;
    float _361 = cbMtdParam._m0[20u].z * _323;
    float _3646 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    vec4 _379 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _382 = _379.x;
    float _406 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _382)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _382))) - POSITION_1.w) / cbMtdParam._m0[17u].z;
    float _3657 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _412 = 1.0 - (isnan(cbMtdParam._m0[21u].w) ? _407 : (isnan(_407) ? cbMtdParam._m0[21u].w : max(_407, cbMtdParam._m0[21u].w)));
    float _431 = (cbMtdParam._m0[24u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _439 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _440 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _454 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_431 * cbMtdParam._m0[31u].w) + _439) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_440 + (_431 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _460 = _454.z - _337;
    float _3673 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _473 = (_461 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _475 = (_461 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _488 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_473 + (cbMtdParam._m0[27u].y * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_475 + (cbMtdParam._m0[27u].z * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _492 = _488.z;
    vec4 _505 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_473 + (cbMtdParam._m0[26u].w * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_475 + (cbMtdParam._m0[27u].x * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _509 = _505.z;
    float _512 = (_412 - _454.w) + (isnan(_509) ? _492 : (isnan(_492) ? _509 : max(_492, _509)));
    float _3689 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = (((cbMtdParam._m0[21u].z + TEXCOORD_3.x) - (_412 * cbMtdParam._m0[18u].x)) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)));
    float _516 = _514 - (_514 * TEXCOORD_7.w);
    float _524 = (POSITION_1.w - cbMtdParam._m0[24u].y) * (1.0 / cbMtdParam._m0[24u].x);
    float _3700 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _539 = (cbMtdParam._m0[29u].w * _431) + _439;
    float _540 = (cbMtdParam._m0[30u].x * _431) + _440;
    float _547 = cbMtdParam._m0[29u].y * _431;
    float _548 = cbMtdParam._m0[29u].z * _431;
    vec4 _568 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_547 + (_439 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_548 + (_440 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _577 = (_568.y * 2.0) + (-1.0);
    float _581 = 1.0 - dot(vec2(_575, _577), vec2(_575, _577));
    float _3711 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _583 = sqrt(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)));
    float _586 = fma(_583, _238, fma(_577, _245, _575 * _231));
    float _589 = fma(_583, _239, fma(_577, _246, _575 * _232));
    float _592 = fma(_583, _240, fma(_577, _247, _575 * _233));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = cbPerFrame._m0[22u].x * 2.0;
    float _598 = _597 * cbMtdParam._m0[22u].w;
    float _602 = ((_586 * 0.5) * _596) + (-0.25);
    float _606 = ((_589 * 0.5) * _596) + (-0.25);
    float _607 = _606 * cbMtdParam._m0[23u].x;
    float _609 = (-0.0) - (cbMtdParam._m0[23u].x * _602);
    float _610 = fract(_598);
    float _612 = fract(_598 + 0.5);
    float _623 = abs((_610 * 2.0) + (-1.0));
    vec4 _640 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_610 * _609) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_607 * _610) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    vec4 _645 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_612 * _609) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_607 * _612) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _656 = ((_645.x - _642) * _623) + _642;
    float _657 = ((_645.y - _643) * _623) + _643;
    float _658 = ((_645.z - _644) * _623) + _644;
    float _674 = (cbMtdParam._m0[28u].w * _431) + _439;
    float _675 = (cbMtdParam._m0[29u].x * _431) + _440;
    float _678 = _597 * cbMtdParam._m0[22u].z;
    float _679 = _606 * cbMtdParam._m0[22u].y;
    float _681 = (-0.0) - (cbMtdParam._m0[22u].y * _602);
    float _682 = fract(_678);
    float _684 = fract(_678 + 0.5);
    float _695 = abs((_682 * 2.0) + (-1.0));
    vec4 _712 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_682 * _681) + _674) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_679 * _682) + _675) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _714 = _712.x;
    float _715 = _712.y;
    float _716 = _712.z;
    vec4 _717 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_684 * _681) + _674) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_679 * _684) + _675) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _751 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _656) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].x) * (((_717.x - _714) * _695) + _714)) + (_656 * cbMtdParam._m0[15u].x);
    float _754 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _657) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].y) * (((_717.y - _715) * _695) + _715)) + (_657 * cbMtdParam._m0[15u].y);
    float _757 = ((((cbMtdParam._m0[25u].x * _658) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_717.z - _716) * _695) + _716)) + (_658 * cbMtdParam._m0[15u].z);
    float _761 = _751 - (_751 * _525);
    float _762 = _754 - (_754 * _525);
    float _763 = _757 - (_757 * _525);
    float _768 = (POSITION_1.w - cbMtdParam._m0[23u].w) * (1.0 / cbMtdParam._m0[23u].z);
    float _3722 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _779 = (cbMtdParam._m0[30u].y * _431) + _439;
    float _780 = (cbMtdParam._m0[30u].z * _431) + _440;
    vec4 _793 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_439 * cbMtdParam._m0[32u].y) + _547)) + cbTextureTilingScale._m0[3u].z, (((_440 * cbMtdParam._m0[32u].z) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _799 = (_793.x * 2.0) + (-1.0);
    float _800 = (_793.y * 2.0) + (-1.0);
    float _804 = 1.0 - dot(vec2(_799, _800), vec2(_799, _800));
    float _3733 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _806 = sqrt(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)));
    float _809 = fma(_806, _238, fma(_800, _245, _799 * _231));
    float _812 = fma(_806, _239, fma(_800, _246, _799 * _232));
    float _815 = fma(_806, _240, fma(_800, _247, _799 * _233));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _597 * cbMtdParam._m0[25u].w;
    float _827 = (((_812 * 0.5) * _819) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _829 = (-0.0) - (cbMtdParam._m0[25u].z * (((_809 * 0.5) * _819) + (-0.25)));
    float _830 = fract(_820);
    float _832 = fract(_820 + 0.5);
    float _835 = (_830 * _829) + _779;
    float _836 = (_827 * _830) + _780;
    float _839 = (_832 * _829) + _779;
    float _840 = (_827 * _832) + _780;
    float _843 = abs((_830 * 2.0) + (-1.0));
    vec4 _860 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_836 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _862 = _860.x;
    float _863 = _860.y;
    float _864 = _860.z;
    vec4 _865 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_839 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_840 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _876 = ((_865.x - _862) * _843) + _862;
    float _877 = ((_865.y - _863) * _843) + _863;
    float _878 = ((_865.z - _864) * _843) + _864;
    vec4 _903 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_836 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _905 = _903.x;
    float _906 = _903.y;
    float _907 = _903.z;
    vec4 _908 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_839 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_840 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _959 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].x) * ((_761 + (_516 * cbMtdParam._m0[12u].x)) + ((((_876 * cbMtdParam._m0[9u].x) - _761) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _876) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].x) * (((_908.x - _905) * _843) + _905))) * _769));
    float _961 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].y) * ((_762 + (_516 * cbMtdParam._m0[12u].y)) + ((((_877 * cbMtdParam._m0[9u].y) - _762) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _877) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].y) * (((_908.y - _906) * _843) + _906))) * _769));
    float _963 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].z) * ((_763 + (_516 * cbMtdParam._m0[12u].z)) + ((((_878 * cbMtdParam._m0[9u].z) - _763) + ((((cbMtdParam._m0[25u].y * _878) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_908.z - _907) * _843) + _907))) * _769));
    float _3744 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _970 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _980 = _321 / cbMtdParam._m0[20u].x;
    float _3755 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _981 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1029 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1009 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[32u].w * _431))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1013 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[33u].x * _431))) + cbTextureTilingScale._m0[1u].w));
    float _1033 = _461 * 0.23999999463558197021484375;
    float _1035 = _461 * (-0.20000000298023223876953125);
    float _1046 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1047 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1062 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _431) + _1033) + _1046) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _431) + _1035) + _1047) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1078 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1046 + _1033) + (cbMtdParam._m0[34u].y * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1047 + _1035) + (cbMtdParam._m0[34u].z * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1098 = (((_505.x + (-0.5)) * 0.5) + _488.x) + (((_1062.x + (-1.0)) + _1078.x) * cbMtdParam._m0[21u].y);
    float _1099 = (((_505.y + (-0.5)) * 0.5) + _488.y) + (((_1062.y + (-1.0)) + _1078.y) * cbMtdParam._m0[21u].y);
    float _1104 = ((_1029.x - _1098) * _981) + _1098;
    float _1105 = ((_1029.y - _1099) * _981) + _1099;
    float _1107 = _321 / cbMtdParam._m0[19u].w;
    float _3766 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1108 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _1124 = ((((_970 * (0.5 - _456)) + _456) + (((_1104 + (-0.5)) + ((0.5 - _1104) * _1108)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1125 = ((((_970 * (0.5 - _457)) + _457) + (((_1105 + (-0.5)) + ((0.5 - _1105) * _1108)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1126 = dot(vec2(_1124, _1125), vec2(_1124, _1125));
    float _3777 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1131 = sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))));
    float _1133 = cbMtdParam._m0[20u].w * _323;
    float _3788 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1139 = ((cbMtdParam._m0[21u].x - cbMtdParam._m0[19u].z) * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) + cbMtdParam._m0[19u].z;
    float _1144 = _1124 - (_1139 * _1124);
    float _1145 = _1125 - (_1139 * _1125);
    float _1146 = (_1139 * (1.0 - _1131)) + _1131;
    float _1156 = fma(_1131, _238, fma(_1125, _245, _1124 * _231));
    float _1159 = fma(_1131, _239, fma(_1125, _246, _1124 * _232));
    float _1162 = fma(_1131, _240, fma(_1125, _247, _1124 * _233));
    float _1166 = inversesqrt(dot(vec3(_1156, _1159, _1162), vec3(_1156, _1159, _1162)));
    float _1167 = _1166 * _1156;
    float _1168 = _1166 * _1159;
    float _1169 = _1166 * _1162;
    float _1172 = fma(_1146, _238, fma(_1145, _245, _1144 * _231));
    float _1175 = fma(_1146, _239, fma(_1145, _246, _1144 * _232));
    float _1178 = fma(_1146, _240, fma(_1145, _247, _1144 * _233));
    float _1182 = inversesqrt(dot(vec3(_1172, _1175, _1178), vec3(_1172, _1175, _1178)));
    float _1183 = _1182 * _1172;
    float _1184 = _1182 * _1175;
    float _1185 = _1182 * _1178;
    float _3799 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3810 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _1187 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1201 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1230 = cbSceneParam._m0[71u].x - (_1009 / _1221);
    float _1231 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1221);
    float _1232 = cbSceneParam._m0[71u].z - (_1013 / _1221);
    float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
    float _1237 = _1230 * _1236;
    float _1238 = _1231 * _1236;
    float _1239 = _1232 * _1236;
    vec4 _1244 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1246 = _1244.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1420 = sqrt(((_1230 * _1230) + (_1231 * _1231)) + (_1232 * _1232));
        float _1426 = (cbMatDynParam._m0[5u].x * _1420) + cbMatDynParam._m0[5u].y;
        float _3821 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1431 = (cbMatDynParam._m0[5u].z * _1420) + cbMatDynParam._m0[5u].w;
        float _3832 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) - _1427)) + _1427) < ((_1246 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1256 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1257 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1259 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1268 = (_1259.x * 2.0) + (-1.0);
    float _1269 = (_1259.y * 2.0) + (-1.0);
    float _1270 = (_1259.z * 2.0) + (-1.0);
    float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
    float _1285 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1259.w;
    float _1292 = (((_1268 * _1274) - _1167) * _1285) + _1167;
    float _1293 = (((_1269 * _1274) - _1168) * _1285) + _1168;
    float _1294 = (((_1270 * _1274) - _1169) * _1285) + _1169;
    float _1312 = fma(_1294, cbSceneParam._m0[5u].z, fma(_1293, cbSceneParam._m0[5u].y, _1292 * cbSceneParam._m0[5u].x));
    float _1315 = fma(_1294, cbSceneParam._m0[6u].z, fma(_1293, cbSceneParam._m0[6u].y, _1292 * cbSceneParam._m0[6u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[7u].z, fma(_1293, cbSceneParam._m0[7u].y, _1292 * cbSceneParam._m0[7u].x));
    vec4 _1327 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1256, cbSceneParam._m0[86u].y * _1257));
    float _1330 = _1327.x * TEXCOORD_3.w;
    float _1334 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1292, _1293, _1294)));
    float _3843 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1346 = dot(vec3(_1183, _1184, _1185), vec3(_1237, _1238, _1239)) * 2.0;
    float _1350 = (_1346 * _1183) - _1237;
    float _1351 = (_1346 * _1184) - _1238;
    float _1352 = (_1346 * _1185) - _1239;
    float _1356 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1183, _1184, _1185)));
    float _3854 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _1358 = sqrt(_1187);
    float _1370 = exp2((_1358 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1358 * 3.0));
    float _1401 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1463 = fma(_1409, cbModelParam._m0[26u].z, fma(_1405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401));
        float _1467 = fma(_1409, cbModelParam._m0[27u].z, fma(_1405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401));
        float _1471 = fma(_1409, cbModelParam._m0[28u].z, fma(_1405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401));
        float _1494 = _1401 + _1183;
        float _1495 = _1405 + _1184;
        float _1496 = _1409 + _1185;
        float _1506 = fma(_1496, cbModelParam._m0[26u].z, fma(_1495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[27u].z, fma(_1495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[28u].z, fma(_1495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1524 = ((_1512 * _1506) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1512 * _1507) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1508) / cbModelParam._m0[34u].z) + ((((((_1471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1563 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1550.x + (-0.5));
        float _1595 = _1593 * (_1550.y + (-0.5));
        float _1596 = _1593 * (_1550.z + (-0.5));
        _1600 = _1563 * (_1529.z + (-0.5));
        _1602 = _1563 * (_1529.y + (-0.5));
        _1603 = _1563 * (_1529.x + (-0.5));
        _1604 = _1573 * (_1536.z + (-0.5));
        _1605 = _1573 * (_1536.y + (-0.5));
        _1606 = _1573 * (_1536.x + (-0.5));
        _1607 = _1583 * (_1543.z + (-0.5));
        _1608 = _1583 * (_1543.y + (-0.5));
        _1609 = _1583 * (_1543.x + (-0.5));
        _1610 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        _1611 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        _1612 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1638 = fma(_1409, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401));
        float _1642 = fma(_1409, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401));
        float _1646 = fma(_1409, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401));
        float _1669 = _1401 + _1183;
        float _1670 = _1405 + _1184;
        float _1671 = _1409 + _1185;
        float _1681 = fma(_1671, cbModelParam._m0[30u].z, fma(_1670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1669)) - _1638;
        float _1682 = fma(_1671, cbModelParam._m0[31u].z, fma(_1670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1669)) - _1642;
        float _1683 = fma(_1671, cbModelParam._m0[32u].z, fma(_1670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1669)) - _1646;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1699 = ((_1687 * _1681) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1638 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1687 * _1682) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1642 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1683) / cbModelParam._m0[35u].z) + ((((((_1646 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        float _1736 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1724.x + (-0.5));
        float _1768 = _1766 * (_1724.y + (-0.5));
        float _1769 = _1766 * (_1724.z + (-0.5));
        _1773 = _1736 * (_1703.z + (-0.5));
        _1774 = _1736 * (_1703.y + (-0.5));
        _1775 = _1736 * (_1703.x + (-0.5));
        _1776 = _1746 * (_1710.z + (-0.5));
        _1777 = _1746 * (_1710.y + (-0.5));
        _1778 = _1746 * (_1710.x + (-0.5));
        _1779 = _1756 * (_1717.z + (-0.5));
        _1780 = _1756 * (_1717.y + (-0.5));
        _1781 = _1756 * (_1717.x + (-0.5));
        _1782 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        _1783 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        _1784 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    }
    else
    {
        _1773 = _1601;
        _1774 = _1601;
        _1775 = _1601;
        _1776 = _1601;
        _1777 = _1601;
        _1778 = _1601;
        _1779 = _1601;
        _1780 = _1601;
        _1781 = _1601;
        _1782 = _1601;
        _1783 = _1601;
        _1784 = _1601;
    }
    float _1798 = _1350 * 0.5;
    float _1799 = _1351 * 0.5;
    float _1800 = _1352 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1864 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1187);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1864 : min(cbModelParam._m0[25u].z, _1864));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1409, cbModelParam._m0[13u].z, fma(_1405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1401)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1409, cbModelParam._m0[14u].z, fma(_1405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1401)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1409, cbModelParam._m0[15u].z, fma(_1405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1401)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1352, cbModelParam._m0[13u].z, fma(_1351, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1350));
        float _1926 = fma(_1352, cbModelParam._m0[14u].z, fma(_1351, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1350));
        float _1929 = fma(_1352, cbModelParam._m0[15u].z, fma(_1351, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1350));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1957 = frontier_phi_17_15_ladder;
        }
        float _2308;
        if (_1926 > 0.0)
        {
            _2308 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2308 = frontier_phi_26_22_ladder;
        }
        float _2779;
        if (_1929 > 0.0)
        {
            _2779 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2779 = frontier_phi_40_33_ladder;
        }
        float _2781 = isnan(_2308) ? _1957 : (isnan(_1957) ? _2308 : min(_1957, _2308));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _1923) + _1912;
        float _2787 = (_2782 * _1926) + _1916;
        float _2788 = (_2782 * _1929) + _1920;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2788, cbModelParam._m0[9u].z, fma(_2787, cbModelParam._m0[9u].y, _2786 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2788, cbModelParam._m0[10u].z, fma(_2787, cbModelParam._m0[10u].y, _2786 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2788, cbModelParam._m0[11u].z, fma(_2787, cbModelParam._m0[11u].y, _2786 * cbModelParam._m0[11u].x))), _1865);
            frontier_phi_16_40_ladder = _2918.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2918.x * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2918.y * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_16_40_ladder_1;
        _1947 = frontier_phi_16_40_ladder_2;
        _1949 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1350, _1351, _1352), _1865);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1187);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1409, cbModelParam._m0[21u].z, fma(_1405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1401)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1409, cbModelParam._m0[22u].z, fma(_1405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1401)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1409, cbModelParam._m0[23u].z, fma(_1405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1401)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1352, cbModelParam._m0[21u].z, fma(_1351, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1350));
        float _2021 = fma(_1352, cbModelParam._m0[22u].z, fma(_1351, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1350));
        float _2024 = fma(_1352, cbModelParam._m0[23u].z, fma(_1351, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1350));
        float _2313;
        if (_2018 > 0.0)
        {
            _2313 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2313 = frontier_phi_28_24_ladder;
        }
        float _2805;
        if (_2021 > 0.0)
        {
            _2805 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2805 = frontier_phi_42_35_ladder;
        }
        float _2980;
        if (_2024 > 0.0)
        {
            _2980 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2980 = frontier_phi_60_53_ladder;
        }
        float _2982 = isnan(_2805) ? _2313 : (isnan(_2313) ? _2805 : min(_2313, _2805));
        float _2983 = isnan(_2980) ? _2982 : (isnan(_2982) ? _2980 : min(_2982, _2980));
        float _2987 = (_2983 * _2018) + _2007;
        float _2988 = (_2983 * _2021) + _2011;
        float _2989 = (_2983 * _2024) + _2015;
        float _2990 = _2983 * 9.9999997473787516355514526367188e-05;
        float _2991 = (-1.0) - _2990;
        float _2993 = _2990 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2989 > _2993) || ((_2989 < _2991) || ((_2988 > _2993) || ((_2988 < _2991) || ((_2987 < _2991) || (_2987 > _2993))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2989, cbModelParam._m0[17u].z, fma(_2988, cbModelParam._m0[17u].y, _2987 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2989, cbModelParam._m0[18u].z, fma(_2988, cbModelParam._m0[18u].y, _2987 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2989, cbModelParam._m0[19u].z, fma(_2988, cbModelParam._m0[19u].y, _2987 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_25_60_ladder = _3204.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3204.y * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3204.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_25_60_ladder_2;
        _2045 = frontier_phi_25_60_ladder_1;
        _2047 = frontier_phi_25_60_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1350, _1351, _1352), _1954);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2059 = ((((1.0 - _1370) * ((_1358 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1370 * _1358)) * _1330;
    float _2060 = _2059 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2061 = _2059 * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2062 = _2059 * ((cbModelParam._m0[1u].w * (_2047 - _1949)) + _1949);
    float _2083 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2061, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2061, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2061, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    vec4 _2097 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1256, _1257));
    float _2099 = _2097.w;
    uint _2114 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2118 = floatBitsToUint(cbInstanceData._m0[_2114 + 5u]);
    uint _2120 = _2118.x * 14u;
    uint _2121 = _2120 + 13u;
    float _2126 = _1330 + (-1.0);
    float _2129 = (cbLight._m0[_2121].x * _2126) + 1.0;
    float _2130 = (cbLight._m0[_2121].y * _2126) + 1.0;
    uint _2134 = _2120 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _1187) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_2120].x + _1237;
    float _2153 = cbLight._m0[_2120].y + _1238;
    float _2154 = cbLight._m0[_2120].z + _1239;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_1292, _1293, _1294), vec3(cbLight._m0[_2120].xyz));
    float _3980 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _2166 = dot(vec3(_1292, _1293, _1294), vec3(_1237, _1238, _1239));
    float _3991 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _2170 = dot(vec3(_1292, _1293, _1294), vec3(_2159, _2160, _2161));
    float _4002 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2159, _2160, _2161));
    float _4013 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2151 * _2151;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2151;
    float _2205 = (0.5 / (((_2169 * ((_2165 * _2194) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2151) * _2165))) * _2165;
    float _4024 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    float _2208 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2221 = _2120 | 1u;
    uint _2225 = _2120 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _1187) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2221].x + _1237;
    float _2242 = cbLight._m0[_2221].y + _1238;
    float _2243 = cbLight._m0[_2221].z + _1239;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_1292, _1293, _1294), vec3(cbLight._m0[_2221].xyz));
    float _4040 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _2255 = dot(vec3(_1292, _1293, _1294), vec3(_2248, _2249, _2250));
    float _4051 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
    float _4062 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2277 = 1.0 - _2240;
    float _2287 = (0.5 / (((_2169 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2277) + _2240) * _2254))) * _2254;
    float _4073 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2290 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    float _2300 = (((_2276 * cbLight._m0[_2225].x) * _2289) * _2290) + ((((cbLight._m0[_2134].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2099))) * _2193) * _2207) * _2208);
    float _2301 = (((_2276 * cbLight._m0[_2225].y) * _2289) * _2290) + ((((cbLight._m0[_2134].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2099))) * _2193) * _2207) * _2208);
    float _2302 = (((_2276 * cbLight._m0[_2225].z) * _2289) * _2290) + ((((cbLight._m0[_2134].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2099))) * _2193) * _2207) * _2208);
    float _2417;
    float _2419;
    float _2421;
    if (_2118.y == 0u)
    {
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2357;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2357;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2357;
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.x;
        uint _2384 = uint((float(_2372.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1257) / _2373))) + floor(float(uint(cbSceneParam._m0[85u].x * _1256) / _2373)));
        float _2394 = (log2(_2360 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2395 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        uint _2398 = uint(isnan(14.0) ? _2395 : (isnan(_2395) ? 14.0 : min(_2395, 14.0)));
        uvec4 _2403 = texelFetch(g_lightClusterGridBuffer, int(((_2398 << 2u) + (_2384 << 6u)) >> 2u));
        uint _2404 = _2403.x;
        uint _2405 = _2372.z;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2405 >> 4u) & 15u)) + 4294967295u) & _2404) == 0u) || ((_2405 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                if (_2846)
                {
                    frontier_phi_55_pred = _2835;
                    frontier_phi_55_pred_1 = _2834;
                    frontier_phi_55_pred_2 = _2833;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3020 = _2833;
                    _3021 = _2834;
                    _3022 = _2835;
                    _3023 = _2845;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2836 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3060 = (_3027 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3043.x - _2358;
                        float _3076 = _3043.y - _2359;
                        float _3077 = _3043.z - _2360;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3090 = 1.0 - (_3078 * _3043.w);
                        float _4099 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3092 = sqrt(_3078) * uintBitsToFloat(uvec4(_3050, _3051, _3052, texelFetch(g_PointLightRenderingBuffer, int(((_3027 * 48u) + 4u) + 3u)).x)).w;
                        float _3096 = _3092 * _3092;
                        float _3097 = (-0.0) - _2358;
                        float _3098 = (-0.0) - _2359;
                        float _3099 = (-0.0) - _2360;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3114 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _1358;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3104 + _3082;
                        float _3126 = _3105 + _3083;
                        float _3127 = _3106 + _3084;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_1312, _1315, _1318), vec3(_3104, _3105, _3106));
                        float _4110 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _3139 = dot(vec3(_1312, _1315, _1318), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4121 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = (1.39999997615814208984375 / (_3092 + 1.39999997615814208984375)) * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * dot(vec3(_1312, _1315, _1318), vec3(_3082, _3083, _3084))) + _3148;
                        float _4132 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4143 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3146 * _3146) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)));
                        _2927 = (_3174 * _3071.x) + _3020;
                        _2928 = (_3174 * _3071.y) + _3021;
                        _2929 = (_3174 * _3071.z) + _3022;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2927;
                            _3021 = _2928;
                            _3022 = _2929;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_55_pred = _2929;
                    frontier_phi_55_pred_1 = _2928;
                    frontier_phi_55_pred_2 = _2927;
                }
                _2626 = frontier_phi_55_pred;
                _2624 = frontier_phi_55_pred_1;
                _2622 = frontier_phi_55_pred_2;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2833 = _2622;
                    _2834 = _2624;
                    _2835 = _2626;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2632) & _2404) == 0u)
        {
            _2810 = _2621;
            _2812 = _2623;
            _2814 = _2625;
        }
        else
        {
            float _2826 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
            float _2827 = _2826 * _2358;
            float _2828 = _2826 * _2359;
            float _2829 = _2826 * _2360;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _3006 = _2621;
                float _3007 = _2623;
                float _3008 = _2625;
                uint _3009 = _2632;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    if (_3019)
                    {
                        frontier_phi_69_pred = _3006;
                        frontier_phi_69_pred_1 = _3007;
                        frontier_phi_69_pred_2 = _3008;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        uint _3222 = _3018;
                        uint _3223;
                        uint _3233;
                        vec4 _3248;
                        float _3249;
                        vec3 _3261;
                        vec4 _3276;
                        vec4 _3291;
                        float _3337;
                        bool _3338;
                        for (;;)
                        {
                            _3233 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3222));
                            _3223 = (_3222 + 4294967295u) & _3222;
                            uint _3235 = _3233 * 40u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3249 = _3248.w;
                            uint _3251 = (_3233 * 40u) + 8u;
                            _3261 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x));
                            uint _3263 = (_3233 * 40u) + 16u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3233 * 40u) + 20u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3233 * 40u) + 24u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3312 = (_3233 * 40u) + 28u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3337 = fma(_2360, _3325.z, fma(_2359, _3325.y, _3325.x * _2358)) + _3325.w;
                            _3338 = !((fma(_2360, _3306.z, fma(_2359, _3306.y, _3306.x * _2358)) + _3306.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            if (_3338)
                            {
                                float _3372 = _3248.x - _2358;
                                float _3373 = _3248.y - _2359;
                                float _3374 = _3248.z - _2360;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3249 * _3249));
                                float _4154 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3387 = sqrt(_3375) * uintBitsToFloat(uvec4(_3341, _3342, _3343, texelFetch(g_SpotLightRenderingBuffer, int(((_3233 * 40u) + 4u) + 3u)).x)).w;
                                float _3390 = _3387 * _3387;
                                float _3391 = (fma(_2360, _3276.z, fma(_2359, _3276.y, _3276.x * _2358)) + _3276.w) / _3337;
                                float _3392 = (fma(_2360, _3291.z, fma(_2359, _3291.y, _3291.x * _2358)) + _3291.w) / _3337;
                                float _3396 = 1.0 - dot(vec2(_3391, _3392), vec2(_3391, _3392));
                                float _4165 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3406 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3407 = 1.0 - _1358;
                                float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                                float _3415 = _3414 * _3414;
                                float _3416 = _3415 * _3415;
                                float _3417 = _3379 - _2827;
                                float _3418 = _3380 - _2828;
                                float _3419 = _3381 - _2829;
                                float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                                float _3427 = dot(vec3(_1312, _1315, _1318), vec3((-0.0) - _2827, (-0.0) - _2828, (-0.0) - _2829));
                                float _4176 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3431 = dot(vec3(_1312, _1315, _1318), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                                float _4187 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                                float _3439 = (1.39999997615814208984375 / (_3387 + 1.39999997615814208984375)) * _3415;
                                float _3440 = _3439 * _3439;
                                float _3446 = ((1.0 - _3440) * dot(vec3(_1312, _1315, _1318), vec3(_3379, _3380, _3381))) + _3440;
                                float _4198 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3448 = 1.0 - _3415;
                                float _3458 = (0.5 / (((_3447 * ((_3430 * _3448) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3415) * _3430))) * _3447;
                                float _4209 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3468 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_3438 * _3438) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3468 * _3261.z;
                                frontier_phi_75_pred_1 = _3468 * _3261.x;
                                frontier_phi_75_pred_2 = _3468 * _3261.y;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                            }
                            _3474 = frontier_phi_75_pred;
                            _3472 = frontier_phi_75_pred_1;
                            _3473 = frontier_phi_75_pred_2;
                            _3209 = _3472 + _3219;
                            _3210 = _3473 + _3220;
                            _3211 = _3474 + _3221;
                            if (_3223 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3209;
                                _3220 = _3210;
                                _3221 = _3211;
                                _3222 = _3223;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3209;
                        frontier_phi_69_pred_1 = _3210;
                        frontier_phi_69_pred_2 = _3211;
                    }
                    _2811 = frontier_phi_69_pred;
                    _2813 = frontier_phi_69_pred_1;
                    _2815 = frontier_phi_69_pred_2;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3006 = _2811;
                        _3007 = _2813;
                        _3008 = _2815;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2815;
                frontier_phi_44_45_ladder_1 = _2813;
                frontier_phi_44_45_ladder_2 = _2811;
            }
            else
            {
                frontier_phi_44_45_ladder = _2625;
                frontier_phi_44_45_ladder_1 = _2623;
                frontier_phi_44_45_ladder_2 = _2621;
            }
            _2810 = frontier_phi_44_45_ladder_2;
            _2812 = frontier_phi_44_45_ladder_1;
            _2814 = frontier_phi_44_45_ladder;
        }
        float _2819 = isnan(1.0) ? _1330 : (isnan(_1330) ? 1.0 : min(_1330, 1.0));
        _2417 = ((_2810 * 0.039999999105930328369140625) * _2819) + _2300;
        _2419 = ((_2812 * 0.039999999105930328369140625) * _2819) + _2301;
        _2421 = ((_2814 * 0.039999999105930328369140625) * _2819) + _2302;
    }
    else
    {
        _2417 = _2300;
        _2419 = _2301;
        _2421 = _2302;
    }
    uint _2427 = _2114 + 9u;
    uint _2428 = _2427 + uint(cbMatDynParam._m0[0u].w);
    float _2434 = cbInstanceData._m0[_2428].x * (_959 - (_959 * TEXCOORD_7.x));
    float _2435 = cbInstanceData._m0[_2428].y * (_961 - (_961 * TEXCOORD_7.y));
    float _2436 = cbInstanceData._m0[_2428].z * (_963 - (_963 * TEXCOORD_7.z));
    float _2456 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2457 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2458 = cbSceneParam._m0[86u].x * ((_1256 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1201 + 10.0)) * dot(vec3(_1292, _1293, _1294), vec3(_231, _232, _233))));
    float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
    float _2460 = isnan(_2457) ? _1257 : (isnan(_1257) ? _2457 : min(_1257, _2457));
    vec4 _2462 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2459, _2460), 0.0);
    float _2464 = _2462.x;
    bool _2484 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2464)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2464))) > _1201;
    float _2485 = _2484 ? _2459 : _1256;
    float _2486 = _2484 ? _2460 : _1257;
    vec4 _2488 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2485, _2486));
    vec4 _2493 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2485, _2486));
    float _2495 = _2493.x;
    float _2515 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2495)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2495))) - _1201;
    bool _2522 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2526 = (isnan(_2515) ? 0.0 : (isnan(0.0) ? _2515 : max(0.0, _2515))) * (-1.44269502162933349609375);
    float _2546 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2557 = (_2434 + ((_2417 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2546 * _2488.x) * exp2(_2526 * (_2522 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2559 = (_2435 + ((_2419 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2546 * _2488.y) * exp2(_2526 * (_2522 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2561 = (_2436 + ((_2421 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2546 * _2488.z) * exp2(_2526 * (_2522 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2562 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2563 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2564 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2570 = cbMtdParam._m0[2u].x * _2434;
    float _2571 = cbMtdParam._m0[2u].y * _2435;
    float _2572 = cbMtdParam._m0[2u].z * _2436;
    float _4255 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2574 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2579 = cbInstanceData._m0[_2114 + 6u].w * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)));
    float _2584 = _1256 / cbSceneParam._m0[86u].x;
    float _2585 = _1257 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _1201 : (isnan(_1201) ? cbSceneParam._m0[77u].w : min(_1201, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1201 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_1201) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1201 : min(cbSceneParam._m0[80u].w, _1201));
        float _2641 = _2640 / _1201;
        float _2652 = _2641 * _1230;
        float _2653 = _1231 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2655 = _2641 * _1232;
        float _2657 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2658 = _2657 + cbSceneParam._m0[79u].w;
        float _2659 = cbSceneParam._m0[79u].w - _2653;
        float _2665 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2655 * _2655));
        float _2668 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2665;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2675 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2654 - _2657) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2658 > 0.0) ? exp2(_2674 * _2658) : (2.0 - exp2(_2675 * _2658))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2668;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : max(_2658, _2659));
            float _2861 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : min(_2658, _2659));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2937 = ((abs(_2665 / _2654) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2675 * _2870) - exp2(_2675 * _2871)) * _2859))) + (_2668 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2604);
        _2677 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2679 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2681 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2683 = _2948 * _2604;
    }
    else
    {
        _2677 = _2601;
        _2679 = _2602;
        _2681 = _2603;
        _2683 = _2604;
    }
    bool _2975;
    float _2738;
    vec4 _2741;
    float _2743;
    vec4 _2745;
    float _2753;
    float _2754;
    float _2755;
    float _2759;
    float _2763;
    float _2767;
    float _2768;
    bool _2778;
    for (;;)
    {
        bool _2695 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2696 = log2(_2683);
        float _2700 = exp2(_2696 * cbSceneParam._m0[78u].x);
        float _2701 = exp2(_2696 * cbSceneParam._m0[78u].y);
        float _2702 = exp2(_2696 * cbSceneParam._m0[78u].z);
        float _2703 = _2700 * _2562;
        float _2704 = _2701 * _2563;
        float _2705 = _2702 * _2564;
        vec4 _2713 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1256, _1257));
        float _2715 = _2713.x;
        float _2736 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2715)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2715))) - _1201) * cbMtdParam._m0[20u].y;
        float _4306 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        _2738 = _2579 * _2737;
        float _2739 = _1246 + (-0.5);
        _2741 = cbMtdParam._m0[1u];
        _2743 = _2741.y * _2739;
        _2745 = cbMatDynParam._m0[0u];
        float _2752 = (roundEven(_2745.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2753 = _2752 * (_2695 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
        _2754 = _2752 * (_2695 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
        _2755 = _2752 * (_2695 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2681)));
        _2759 = (((_2570 * _2574) * _2700) * _2737) * _2752;
        _2763 = (((_2571 * _2574) * _2701) * _2737) * _2752;
        _2767 = (((_2572 * _2574) * _2702) * _2737) * _2752;
        _2768 = _2739 * 0.999000012874603271484375;
        _2778 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2778)
        {
            if ((cbInstanceData._m0[_2114 + 7u].x + _2768) < 0.5)
            {
                _2975 = true;
                break;
            }
        }
        uint _2894 = _2427 + uint(_2745.w);
        if ((cbInstanceData._m0[_2894].w < 1.0) && ((cbInstanceData._m0[_2894].w + _2768) < 0.5))
        {
            _2975 = true;
            break;
        }
        if ((_2743 + 1.0) < _2741.x)
        {
            _2975 = true;
            break;
        }
        _2975 = false;
        break;
    }
    float _3179;
    if (_2975)
    {
        discard_state = true;
        _3179 = 0.0;
    }
    else
    {
        _3179 = _2738;
    }
    SV_Target.x = _2753;
    SV_Target.y = _2754;
    SV_Target.z = _2755;
    SV_Target.w = _3179;
    SV_Target_1.x = _2759;
    SV_Target_1.y = _2763;
    SV_Target_1.z = _2767;
    SV_Target_1.w = _2738;
    discard_exit();
}


