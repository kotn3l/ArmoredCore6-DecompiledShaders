#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1599;
uint _3027;
uint _3028;
uint _3029;
uint _3318;
uint _3319;
uint _3320;
float _3573;
float _3574;
float _3575;
float _3576;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _317 = cbMtdParam._m0[18u].z - cbMtdParam._m0[18u].y;
    float _319 = (sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301)) - cbMtdParam._m0[18u].y) / (isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0)));
    float _321 = cbMtdParam._m0[18u].w + _319;
    float _326 = _321 * cbMtdParam._m0[19u].y;
    float _3590 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _329 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * cbMtdParam._m0[23u].y;
    float _3601 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _335 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _338 = ((cbMtdParam._m0[17u].w - cbMtdParam._m0[17u].x) * _335) + cbMtdParam._m0[17u].x;
    float _359 = cbMtdParam._m0[20u].z * _321;
    float _3623 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    vec4 _377 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _380 = _377.x;
    float _404 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _380)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _380))) - POSITION_1.w) / cbMtdParam._m0[17u].z;
    float _3634 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[21u].w) ? _405 : (isnan(_405) ? cbMtdParam._m0[21u].w : max(_405, cbMtdParam._m0[21u].w)));
    float _429 = (cbMtdParam._m0[24u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _437 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _438 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _452 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_429 * cbMtdParam._m0[31u].w) + _437) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_438 + (_429 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _458 = _452.z - _335;
    float _3650 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _471 = (_459 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _473 = (_459 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _486 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[27u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _490 = _486.z;
    vec4 _503 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[26u].w * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].x * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _507 = _503.z;
    float _510 = (_410 - _452.w) + (isnan(_507) ? _490 : (isnan(_490) ? _507 : max(_490, _507)));
    float _3666 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = (((cbMtdParam._m0[21u].z + TEXCOORD_3.x) - (_410 * cbMtdParam._m0[18u].x)) * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)));
    float _514 = _512 - (_512 * TEXCOORD_7.w);
    float _522 = (POSITION_1.w - cbMtdParam._m0[24u].y) * (1.0 / cbMtdParam._m0[24u].x);
    float _3677 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _537 = (cbMtdParam._m0[29u].w * _429) + _437;
    float _538 = (cbMtdParam._m0[30u].x * _429) + _438;
    float _545 = cbMtdParam._m0[29u].y * _429;
    float _546 = cbMtdParam._m0[29u].z * _429;
    vec4 _566 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_545 + (_437 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_546 + (_438 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _575 = (_566.y * 2.0) + (-1.0);
    float _579 = 1.0 - dot(vec2(_573, _575), vec2(_573, _575));
    float _3688 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)));
    float _584 = fma(_581, _236, fma(_575, _243, _573 * _229));
    float _587 = fma(_581, _237, fma(_575, _244, _573 * _230));
    float _590 = fma(_581, _238, fma(_575, _245, _573 * _231));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = cbPerFrame._m0[22u].x * 2.0;
    float _596 = _595 * cbMtdParam._m0[22u].w;
    float _600 = ((_584 * 0.5) * _594) + (-0.25);
    float _604 = ((_587 * 0.5) * _594) + (-0.25);
    float _605 = _604 * cbMtdParam._m0[23u].x;
    float _607 = (-0.0) - (cbMtdParam._m0[23u].x * _600);
    float _608 = fract(_596);
    float _610 = fract(_596 + 0.5);
    float _621 = abs((_608 * 2.0) + (-1.0));
    vec4 _638 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_608 * _607) + _537) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _608) + _538) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    vec4 _643 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_610 * _607) + _537) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _610) + _538) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _654 = ((_643.x - _640) * _621) + _640;
    float _655 = ((_643.y - _641) * _621) + _641;
    float _656 = ((_643.z - _642) * _621) + _642;
    float _672 = (cbMtdParam._m0[28u].w * _429) + _437;
    float _673 = (cbMtdParam._m0[29u].x * _429) + _438;
    float _676 = _595 * cbMtdParam._m0[22u].z;
    float _677 = _604 * cbMtdParam._m0[22u].y;
    float _679 = (-0.0) - (cbMtdParam._m0[22u].y * _600);
    float _680 = fract(_676);
    float _682 = fract(_676 + 0.5);
    float _693 = abs((_680 * 2.0) + (-1.0));
    vec4 _710 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_680 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _680) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    vec4 _715 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_682 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _682) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _749 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _654) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].x) * (((_715.x - _712) * _693) + _712)) + (_654 * cbMtdParam._m0[15u].x);
    float _752 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _655) * cbMtdParam._m0[25u].x) + cbMtdParam._m0[16u].y) * (((_715.y - _713) * _693) + _713)) + (_655 * cbMtdParam._m0[15u].y);
    float _755 = ((((cbMtdParam._m0[25u].x * _656) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_715.z - _714) * _693) + _714)) + (_656 * cbMtdParam._m0[15u].z);
    float _759 = _749 - (_749 * _523);
    float _760 = _752 - (_752 * _523);
    float _761 = _755 - (_755 * _523);
    float _766 = (POSITION_1.w - cbMtdParam._m0[23u].w) * (1.0 / cbMtdParam._m0[23u].z);
    float _3699 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _777 = (cbMtdParam._m0[30u].y * _429) + _437;
    float _778 = (cbMtdParam._m0[30u].z * _429) + _438;
    vec4 _791 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_437 * cbMtdParam._m0[32u].y) + _545)) + cbTextureTilingScale._m0[3u].z, (((_438 * cbMtdParam._m0[32u].z) + _546) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _797 = (_791.x * 2.0) + (-1.0);
    float _798 = (_791.y * 2.0) + (-1.0);
    float _802 = 1.0 - dot(vec2(_797, _798), vec2(_797, _798));
    float _3710 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)));
    float _807 = fma(_804, _236, fma(_798, _243, _797 * _229));
    float _810 = fma(_804, _237, fma(_798, _244, _797 * _230));
    float _813 = fma(_804, _238, fma(_798, _245, _797 * _231));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _595 * cbMtdParam._m0[25u].w;
    float _825 = (((_810 * 0.5) * _817) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _827 = (-0.0) - (cbMtdParam._m0[25u].z * (((_807 * 0.5) * _817) + (-0.25)));
    float _828 = fract(_818);
    float _830 = fract(_818 + 0.5);
    float _833 = (_828 * _827) + _777;
    float _834 = (_825 * _828) + _778;
    float _837 = (_830 * _827) + _777;
    float _838 = (_825 * _830) + _778;
    float _841 = abs((_828 * 2.0) + (-1.0));
    vec4 _858 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_834 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _860 = _858.x;
    float _861 = _858.y;
    float _862 = _858.z;
    vec4 _863 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_838 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _874 = ((_863.x - _860) * _841) + _860;
    float _875 = ((_863.y - _861) * _841) + _861;
    float _876 = ((_863.z - _862) * _841) + _862;
    vec4 _901 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_834 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _903 = _901.x;
    float _904 = _901.y;
    float _905 = _901.z;
    vec4 _906 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_838 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _957 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].x) * ((_759 + (_514 * cbMtdParam._m0[12u].x)) + ((((_874 * cbMtdParam._m0[9u].x) - _759) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _874) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].x) * (((_906.x - _903) * _841) + _903))) * _767));
    float _959 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].y) * ((_760 + (_514 * cbMtdParam._m0[12u].y)) + ((((_875 * cbMtdParam._m0[9u].y) - _760) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _875) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[10u].y) * (((_906.y - _904) * _841) + _904))) * _767));
    float _961 = (cbMtdParam._m0[24u].z * cbMtdParam._m0[13u].z) * ((_761 + (_514 * cbMtdParam._m0[12u].z)) + ((((_876 * cbMtdParam._m0[9u].z) - _761) + ((((cbMtdParam._m0[25u].y * _876) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_906.z - _905) * _841) + _905))) * _767));
    float _3721 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _968 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _978 = _319 / cbMtdParam._m0[20u].x;
    float _3732 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _979 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1027 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1007 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[32u].w * _429))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1011 / cbMtdParam._m0[19u].x) + (cbMtdParam._m0[33u].x * _429))) + cbTextureTilingScale._m0[1u].w));
    float _1031 = _459 * 0.23999999463558197021484375;
    float _1033 = _459 * (-0.20000000298023223876953125);
    float _1044 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1045 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1060 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _429) + _1031) + _1044) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _429) + _1033) + _1045) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1076 = texture(sampler2D(M_Cutscene_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1044 + _1031) + (cbMtdParam._m0[34u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1045 + _1033) + (cbMtdParam._m0[34u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1096 = (((_503.x + (-0.5)) * 0.5) + _486.x) + (((_1060.x + (-1.0)) + _1076.x) * cbMtdParam._m0[21u].y);
    float _1097 = (((_503.y + (-0.5)) * 0.5) + _486.y) + (((_1060.y + (-1.0)) + _1076.y) * cbMtdParam._m0[21u].y);
    float _1102 = ((_1027.x - _1096) * _979) + _1096;
    float _1103 = ((_1027.y - _1097) * _979) + _1097;
    float _1105 = _319 / cbMtdParam._m0[19u].w;
    float _3743 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1106 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1122 = ((((_968 * (0.5 - _454)) + _454) + (((_1102 + (-0.5)) + ((0.5 - _1102) * _1106)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1123 = ((((_968 * (0.5 - _455)) + _455) + (((_1103 + (-0.5)) + ((0.5 - _1103) * _1106)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1124 = dot(vec2(_1122, _1123), vec2(_1122, _1123));
    float _3754 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1129 = sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))));
    float _1131 = cbMtdParam._m0[20u].w * _321;
    float _3765 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1137 = ((cbMtdParam._m0[21u].x - cbMtdParam._m0[19u].z) * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) + cbMtdParam._m0[19u].z;
    float _1142 = _1122 - (_1137 * _1122);
    float _1143 = _1123 - (_1137 * _1123);
    float _1144 = (_1137 * (1.0 - _1129)) + _1129;
    float _1154 = fma(_1129, _236, fma(_1123, _243, _1122 * _229));
    float _1157 = fma(_1129, _237, fma(_1123, _244, _1122 * _230));
    float _1160 = fma(_1129, _238, fma(_1123, _245, _1122 * _231));
    float _1164 = inversesqrt(dot(vec3(_1154, _1157, _1160), vec3(_1154, _1157, _1160)));
    float _1165 = _1164 * _1154;
    float _1166 = _1164 * _1157;
    float _1167 = _1164 * _1160;
    float _1170 = fma(_1144, _236, fma(_1143, _243, _1142 * _229));
    float _1173 = fma(_1144, _237, fma(_1143, _244, _1142 * _230));
    float _1176 = fma(_1144, _238, fma(_1143, _245, _1142 * _231));
    float _1180 = inversesqrt(dot(vec3(_1170, _1173, _1176), vec3(_1170, _1173, _1176)));
    float _1181 = _1180 * _1170;
    float _1182 = _1180 * _1173;
    float _1183 = _1180 * _1176;
    float _3776 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3787 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _1185 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1199 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1228 = cbSceneParam._m0[71u].x - (_1007 / _1219);
    float _1229 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1219);
    float _1230 = cbSceneParam._m0[71u].z - (_1011 / _1219);
    float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
    float _1235 = _1228 * _1234;
    float _1236 = _1229 * _1234;
    float _1237 = _1230 * _1234;
    vec4 _1242 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1244 = _1242.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1418 = sqrt(((_1228 * _1228) + (_1229 * _1229)) + (_1230 * _1230));
        float _1424 = (cbMatDynParam._m0[5u].x * _1418) + cbMatDynParam._m0[5u].y;
        float _3798 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1429 = (cbMatDynParam._m0[5u].z * _1418) + cbMatDynParam._m0[5u].w;
        float _3809 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) - _1425)) + _1425) < ((_1244 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1254 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1255 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1257 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1266 = (_1257.x * 2.0) + (-1.0);
    float _1267 = (_1257.y * 2.0) + (-1.0);
    float _1268 = (_1257.z * 2.0) + (-1.0);
    float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
    float _1283 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1257.w;
    float _1290 = (((_1266 * _1272) - _1165) * _1283) + _1165;
    float _1291 = (((_1267 * _1272) - _1166) * _1283) + _1166;
    float _1292 = (((_1268 * _1272) - _1167) * _1283) + _1167;
    float _1310 = fma(_1292, cbSceneParam._m0[5u].z, fma(_1291, cbSceneParam._m0[5u].y, _1290 * cbSceneParam._m0[5u].x));
    float _1313 = fma(_1292, cbSceneParam._m0[6u].z, fma(_1291, cbSceneParam._m0[6u].y, _1290 * cbSceneParam._m0[6u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[7u].z, fma(_1291, cbSceneParam._m0[7u].y, _1290 * cbSceneParam._m0[7u].x));
    vec4 _1325 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1254, cbSceneParam._m0[86u].y * _1255));
    float _1328 = _1325.x * TEXCOORD_3.w;
    float _1332 = abs(dot(vec3(_1235, _1236, _1237), vec3(_1290, _1291, _1292)));
    float _3820 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1344 = dot(vec3(_1181, _1182, _1183), vec3(_1235, _1236, _1237)) * 2.0;
    float _1348 = (_1344 * _1181) - _1235;
    float _1349 = (_1344 * _1182) - _1236;
    float _1350 = (_1344 * _1183) - _1237;
    float _1354 = abs(dot(vec3(_1235, _1236, _1237), vec3(_1181, _1182, _1183)));
    float _3831 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1356 = sqrt(_1185);
    float _1368 = exp2((_1356 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1356 * 3.0));
    float _1399 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1598;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1461 = fma(_1407, cbModelParam._m0[26u].z, fma(_1403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399));
        float _1465 = fma(_1407, cbModelParam._m0[27u].z, fma(_1403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399));
        float _1469 = fma(_1407, cbModelParam._m0[28u].z, fma(_1403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399));
        float _1492 = _1399 + _1181;
        float _1493 = _1403 + _1182;
        float _1494 = _1407 + _1183;
        float _1504 = fma(_1494, cbModelParam._m0[26u].z, fma(_1493, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[27u].z, fma(_1493, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[28u].z, fma(_1493, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1522 = ((_1510 * _1504) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1461 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1510 * _1505) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1465 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1506) / cbModelParam._m0[34u].z) + ((((((_1469 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1561 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1548.x + (-0.5));
        float _1593 = _1591 * (_1548.y + (-0.5));
        float _1594 = _1591 * (_1548.z + (-0.5));
        _1598 = _1561 * (_1527.z + (-0.5));
        _1600 = _1561 * (_1527.y + (-0.5));
        _1601 = _1561 * (_1527.x + (-0.5));
        _1602 = _1571 * (_1534.z + (-0.5));
        _1603 = _1571 * (_1534.y + (-0.5));
        _1604 = _1571 * (_1534.x + (-0.5));
        _1605 = _1581 * (_1541.z + (-0.5));
        _1606 = _1581 * (_1541.y + (-0.5));
        _1607 = _1581 * (_1541.x + (-0.5));
        _1608 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        _1609 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        _1610 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    }
    else
    {
        _1598 = _1599;
        _1600 = _1599;
        _1601 = _1599;
        _1602 = _1599;
        _1603 = _1599;
        _1604 = _1599;
        _1605 = _1599;
        _1606 = _1599;
        _1607 = _1599;
        _1608 = _1599;
        _1609 = _1599;
        _1610 = _1599;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1636 = fma(_1407, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399));
        float _1640 = fma(_1407, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399));
        float _1644 = fma(_1407, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399));
        float _1667 = _1399 + _1181;
        float _1668 = _1403 + _1182;
        float _1669 = _1407 + _1183;
        float _1679 = fma(_1669, cbModelParam._m0[30u].z, fma(_1668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1667)) - _1636;
        float _1680 = fma(_1669, cbModelParam._m0[31u].z, fma(_1668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1667)) - _1640;
        float _1681 = fma(_1669, cbModelParam._m0[32u].z, fma(_1668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1667)) - _1644;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1697 = ((_1685 * _1679) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1636 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1685 * _1680) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1640 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1685 * _1681) / cbModelParam._m0[35u].z) + ((((((_1644 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        float _1734 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1722.x + (-0.5));
        float _1766 = _1764 * (_1722.y + (-0.5));
        float _1767 = _1764 * (_1722.z + (-0.5));
        _1771 = _1734 * (_1701.z + (-0.5));
        _1772 = _1734 * (_1701.y + (-0.5));
        _1773 = _1734 * (_1701.x + (-0.5));
        _1774 = _1744 * (_1708.z + (-0.5));
        _1775 = _1744 * (_1708.y + (-0.5));
        _1776 = _1744 * (_1708.x + (-0.5));
        _1777 = _1754 * (_1715.z + (-0.5));
        _1778 = _1754 * (_1715.y + (-0.5));
        _1779 = _1754 * (_1715.x + (-0.5));
        _1780 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        _1781 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        _1782 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    }
    else
    {
        _1771 = _1599;
        _1772 = _1599;
        _1773 = _1599;
        _1774 = _1599;
        _1775 = _1599;
        _1776 = _1599;
        _1777 = _1599;
        _1778 = _1599;
        _1779 = _1599;
        _1780 = _1599;
        _1781 = _1599;
        _1782 = _1599;
    }
    float _1796 = _1348 * 0.5;
    float _1797 = _1349 * 0.5;
    float _1798 = _1350 * 0.5;
    float _1799 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1802 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1805 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1812 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1598, _1602, _1605, _1608));
        float _1816 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _1820 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _1827 = dot(vec4(cbModelParam._m0[39u]), vec4(_1796, _1797, _1798, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1796, _1797, _1798, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1185);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1407, cbModelParam._m0[13u].z, fma(_1403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1399)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1407, cbModelParam._m0[14u].z, fma(_1403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1399)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1407, cbModelParam._m0[15u].z, fma(_1403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1399)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1350, cbModelParam._m0[13u].z, fma(_1349, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1348));
        float _1924 = fma(_1350, cbModelParam._m0[14u].z, fma(_1349, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1348));
        float _1927 = fma(_1350, cbModelParam._m0[15u].z, fma(_1349, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1348));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1955 = frontier_phi_17_15_ladder;
        }
        float _2285;
        if (_1924 > 0.0)
        {
            _2285 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2285 = frontier_phi_26_22_ladder;
        }
        float _2756;
        if (_1927 > 0.0)
        {
            _2756 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2756 = frontier_phi_40_33_ladder;
        }
        float _2758 = isnan(_2285) ? _1955 : (isnan(_1955) ? _2285 : min(_1955, _2285));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1921) + _1910;
        float _2764 = (_2759 * _1924) + _1914;
        float _2765 = (_2759 * _1927) + _1918;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2765, cbModelParam._m0[9u].z, fma(_2764, cbModelParam._m0[9u].y, _2763 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2765, cbModelParam._m0[10u].z, fma(_2764, cbModelParam._m0[10u].y, _2763 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2765, cbModelParam._m0[11u].z, fma(_2764, cbModelParam._m0[11u].y, _2763 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_16_40_ladder = _2895.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2895.x * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2895.y * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_16_40_ladder_1;
        _1945 = frontier_phi_16_40_ladder_2;
        _1947 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1348, _1349, _1350), _1863);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1185);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1407, cbModelParam._m0[21u].z, fma(_1403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1399)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1407, cbModelParam._m0[22u].z, fma(_1403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1399)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1407, cbModelParam._m0[23u].z, fma(_1403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1399)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1350, cbModelParam._m0[21u].z, fma(_1349, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1348));
        float _2019 = fma(_1350, cbModelParam._m0[22u].z, fma(_1349, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1348));
        float _2022 = fma(_1350, cbModelParam._m0[23u].z, fma(_1349, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1348));
        float _2290;
        if (_2016 > 0.0)
        {
            _2290 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2290 = frontier_phi_28_24_ladder;
        }
        float _2782;
        if (_2019 > 0.0)
        {
            _2782 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2782 = frontier_phi_42_35_ladder;
        }
        float _2957;
        if (_2022 > 0.0)
        {
            _2957 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2957 = frontier_phi_60_53_ladder;
        }
        float _2959 = isnan(_2782) ? _2290 : (isnan(_2290) ? _2782 : min(_2290, _2782));
        float _2960 = isnan(_2957) ? _2959 : (isnan(_2959) ? _2957 : min(_2959, _2957));
        float _2964 = (_2960 * _2016) + _2005;
        float _2965 = (_2960 * _2019) + _2009;
        float _2966 = (_2960 * _2022) + _2013;
        float _2967 = _2960 * 9.9999997473787516355514526367188e-05;
        float _2968 = (-1.0) - _2967;
        float _2970 = _2967 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2966 > _2970) || ((_2966 < _2968) || ((_2965 > _2970) || ((_2965 < _2968) || ((_2964 < _2968) || (_2964 > _2970))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2966, cbModelParam._m0[17u].z, fma(_2965, cbModelParam._m0[17u].y, _2964 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2966, cbModelParam._m0[18u].z, fma(_2965, cbModelParam._m0[18u].y, _2964 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2966, cbModelParam._m0[19u].z, fma(_2965, cbModelParam._m0[19u].y, _2964 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_25_60_ladder = _3181.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3181.y * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3181.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_25_60_ladder_2;
        _2043 = frontier_phi_25_60_ladder_1;
        _2045 = frontier_phi_25_60_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1348, _1349, _1350), _1952);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2057 = ((((1.0 - _1368) * ((_1356 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1368 * _1356)) * _1328;
    float _2058 = _2057 * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2059 = _2057 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2060 = _2057 * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2081 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    uint _2094 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2098 = floatBitsToUint(cbInstanceData._m0[_2094 + 5u]);
    uint _2100 = _2098.x * 14u;
    uint _2101 = _2100 + 13u;
    float _2106 = _1328 + (-1.0);
    float _2109 = (cbLight._m0[_2101].x * _2106) + 1.0;
    float _2110 = (cbLight._m0[_2101].y * _2106) + 1.0;
    uint _2114 = _2100 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _1185) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_2100].x + _1235;
    float _2133 = cbLight._m0[_2100].y + _1236;
    float _2134 = cbLight._m0[_2100].z + _1237;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_1290, _1291, _1292), vec3(cbLight._m0[_2100].xyz));
    float _3957 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _2146 = dot(vec3(_1290, _1291, _1292), vec3(_1235, _1236, _1237));
    float _3968 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _2150 = dot(vec3(_1290, _1291, _1292), vec3(_2139, _2140, _2141));
    float _3979 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2139, _2140, _2141));
    float _3990 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2131 * _2131;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2174 = 1.0 - _2131;
    float _2185 = (0.5 / (((_2149 * ((_2145 * _2174) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2174) + _2131) * _2145))) * _2145;
    float _4001 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2188 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2198 = _2100 | 1u;
    uint _2202 = _2100 + 9u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _1185) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2198].x + _1235;
    float _2219 = cbLight._m0[_2198].y + _1236;
    float _2220 = cbLight._m0[_2198].z + _1237;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_1290, _1291, _1292), vec3(cbLight._m0[_2198].xyz));
    float _4017 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _2232 = dot(vec3(_1290, _1291, _1292), vec3(_2225, _2226, _2227));
    float _4028 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
    float _4039 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2217 * _2217;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2254 = 1.0 - _2217;
    float _2264 = (0.5 / (((_2149 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2254) + _2217) * _2231))) * _2231;
    float _4050 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    float _2267 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    float _2277 = (((_2253 * cbLight._m0[_2202].x) * _2266) * _2267) + (((_2173 * cbLight._m0[_2114].x) * _2187) * _2188);
    float _2278 = (((_2253 * cbLight._m0[_2202].y) * _2266) * _2267) + (((_2173 * cbLight._m0[_2114].y) * _2187) * _2188);
    float _2279 = (((_2253 * cbLight._m0[_2202].z) * _2266) * _2267) + (((_2173 * cbLight._m0[_2114].z) * _2187) * _2188);
    float _2394;
    float _2396;
    float _2398;
    if (_2098.y == 0u)
    {
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2334;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2334;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2334;
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.x;
        uint _2361 = uint((float(_2349.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1255) / _2350))) + floor(float(uint(cbSceneParam._m0[85u].x * _1254) / _2350)));
        float _2371 = (log2(_2337 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2372 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        uint _2375 = uint(isnan(14.0) ? _2372 : (isnan(_2372) ? 14.0 : min(_2372, 14.0)));
        uvec4 _2380 = texelFetch(g_lightClusterGridBuffer, int(((_2375 << 2u) + (_2361 << 6u)) >> 2u));
        uint _2381 = _2380.x;
        uint _2382 = _2349.z;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2382 >> 4u) & 15u)) + 4294967295u) & _2381) == 0u) || ((_2382 & 240u) == 0u))
        {
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2599;
            float _2601;
            float _2603;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                if (_2823)
                {
                    frontier_phi_55_pred = _2812;
                    frontier_phi_55_pred_1 = _2811;
                    frontier_phi_55_pred_2 = _2810;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2997 = _2810;
                    _2998 = _2811;
                    _2999 = _2812;
                    _3000 = _2822;
                    float _2904;
                    float _2905;
                    float _2906;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2813 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3037 = (_3004 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3020.x - _2335;
                        float _3053 = _3020.y - _2336;
                        float _3054 = _3020.z - _2337;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3067 = 1.0 - (_3055 * _3020.w);
                        float _4076 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3069 = sqrt(_3055) * uintBitsToFloat(uvec4(_3027, _3028, _3029, texelFetch(g_PointLightRenderingBuffer, int(((_3004 * 48u) + 4u) + 3u)).x)).w;
                        float _3073 = _3069 * _3069;
                        float _3074 = (-0.0) - _2335;
                        float _3075 = (-0.0) - _2336;
                        float _3076 = (-0.0) - _2337;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3091 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3092 = 1.0 - _1356;
                        float _3099 = sqrt(1.0 - ((1.0 - (_3092 * _3092)) * (1.0 - (_3091 * _3091))));
                        float _3100 = _3099 * _3099;
                        float _3101 = _3100 * _3100;
                        float _3102 = _3081 + _3059;
                        float _3103 = _3082 + _3060;
                        float _3104 = _3083 + _3061;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3112 = dot(vec3(_1310, _1313, _1316), vec3(_3081, _3082, _3083));
                        float _4087 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _3116 = dot(vec3(_1310, _1313, _1316), vec3(_3108 * _3102, _3108 * _3103, _3108 * _3104));
                        float _4098 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3119 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _3123 = ((_3119 * _3119) * (_3101 + (-1.0))) + 1.0;
                        float _3124 = (1.39999997615814208984375 / (_3069 + 1.39999997615814208984375)) * _3100;
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * dot(vec3(_1310, _1313, _1316), vec3(_3059, _3060, _3061))) + _3125;
                        float _4109 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _3130 = 1.0 - _3100;
                        float _3140 = (0.5 / (((_3129 * ((_3115 * _3130) + _3100)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3100) * _3115))) * _3129;
                        float _4120 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3151 = (((_3101 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_3123 * _3123) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)));
                        _2904 = (_3151 * _3048.x) + _2997;
                        _2905 = (_3151 * _3048.y) + _2998;
                        _2906 = (_3151 * _3048.z) + _2999;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2904;
                            _2998 = _2905;
                            _2999 = _2906;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_55_pred = _2906;
                    frontier_phi_55_pred_1 = _2905;
                    frontier_phi_55_pred_2 = _2904;
                }
                _2603 = frontier_phi_55_pred;
                _2601 = frontier_phi_55_pred_1;
                _2599 = frontier_phi_55_pred_2;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2810 = _2599;
                    _2811 = _2601;
                    _2812 = _2603;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2609) & _2381) == 0u)
        {
            _2787 = _2598;
            _2789 = _2600;
            _2791 = _2602;
        }
        else
        {
            float _2803 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
            float _2804 = _2803 * _2335;
            float _2805 = _2803 * _2336;
            float _2806 = _2803 * _2337;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2983 = _2598;
                float _2984 = _2600;
                float _2985 = _2602;
                uint _2986 = _2609;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    if (_2996)
                    {
                        frontier_phi_69_pred = _2983;
                        frontier_phi_69_pred_1 = _2984;
                        frontier_phi_69_pred_2 = _2985;
                    }
                    else
                    {
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        uint _3199 = _2995;
                        uint _3200;
                        uint _3210;
                        vec4 _3225;
                        float _3226;
                        vec3 _3238;
                        vec4 _3253;
                        vec4 _3268;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            _3210 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3199));
                            _3200 = (_3199 + 4294967295u) & _3199;
                            uint _3212 = _3210 * 40u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3226 = _3225.w;
                            uint _3228 = (_3210 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3240 = (_3210 * 40u) + 16u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3210 * 40u) + 20u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3210 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3210 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2337, _3302.z, fma(_2336, _3302.y, _3302.x * _2335)) + _3302.w;
                            _3315 = !((fma(_2337, _3283.z, fma(_2336, _3283.y, _3283.x * _2335)) + _3283.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            if (_3315)
                            {
                                float _3349 = _3225.x - _2335;
                                float _3350 = _3225.y - _2336;
                                float _3351 = _3225.z - _2337;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3226 * _3226));
                                float _4131 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3364 = sqrt(_3352) * uintBitsToFloat(uvec4(_3318, _3319, _3320, texelFetch(g_SpotLightRenderingBuffer, int(((_3210 * 40u) + 4u) + 3u)).x)).w;
                                float _3367 = _3364 * _3364;
                                float _3368 = (fma(_2337, _3253.z, fma(_2336, _3253.y, _3253.x * _2335)) + _3253.w) / _3314;
                                float _3369 = (fma(_2337, _3268.z, fma(_2336, _3268.y, _3268.x * _2335)) + _3268.w) / _3314;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4142 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _1356;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3356 - _2804;
                                float _3395 = _3357 - _2805;
                                float _3396 = _3358 - _2806;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_1310, _1313, _1316), vec3((-0.0) - _2804, (-0.0) - _2805, (-0.0) - _2806));
                                float _4153 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3408 = dot(vec3(_1310, _1313, _1316), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4164 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = (1.39999997615814208984375 / (_3364 + 1.39999997615814208984375)) * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_1310, _1313, _1316), vec3(_3356, _3357, _3358))) + _3417;
                                float _4175 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4186 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3415 * _3415) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3445 * _3238.z;
                                frontier_phi_75_pred_1 = _3445 * _3238.x;
                                frontier_phi_75_pred_2 = _3445 * _3238.y;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                            }
                            _3451 = frontier_phi_75_pred;
                            _3449 = frontier_phi_75_pred_1;
                            _3450 = frontier_phi_75_pred_2;
                            _3186 = _3449 + _3196;
                            _3187 = _3450 + _3197;
                            _3188 = _3451 + _3198;
                            if (_3200 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3196 = _3186;
                                _3197 = _3187;
                                _3198 = _3188;
                                _3199 = _3200;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3186;
                        frontier_phi_69_pred_1 = _3187;
                        frontier_phi_69_pred_2 = _3188;
                    }
                    _2788 = frontier_phi_69_pred;
                    _2790 = frontier_phi_69_pred_1;
                    _2792 = frontier_phi_69_pred_2;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2788;
                        _2984 = _2790;
                        _2985 = _2792;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2792;
                frontier_phi_44_45_ladder_1 = _2790;
                frontier_phi_44_45_ladder_2 = _2788;
            }
            else
            {
                frontier_phi_44_45_ladder = _2602;
                frontier_phi_44_45_ladder_1 = _2600;
                frontier_phi_44_45_ladder_2 = _2598;
            }
            _2787 = frontier_phi_44_45_ladder_2;
            _2789 = frontier_phi_44_45_ladder_1;
            _2791 = frontier_phi_44_45_ladder;
        }
        float _2796 = isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0));
        _2394 = ((_2787 * 0.039999999105930328369140625) * _2796) + _2277;
        _2396 = ((_2789 * 0.039999999105930328369140625) * _2796) + _2278;
        _2398 = ((_2791 * 0.039999999105930328369140625) * _2796) + _2279;
    }
    else
    {
        _2394 = _2277;
        _2396 = _2278;
        _2398 = _2279;
    }
    uint _2404 = _2094 + 9u;
    uint _2405 = _2404 + uint(cbMatDynParam._m0[0u].w);
    float _2411 = cbInstanceData._m0[_2405].x * (_957 - (_957 * TEXCOORD_7.x));
    float _2412 = cbInstanceData._m0[_2405].y * (_959 - (_959 * TEXCOORD_7.y));
    float _2413 = cbInstanceData._m0[_2405].z * (_961 - (_961 * TEXCOORD_7.z));
    float _2433 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2434 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2435 = cbSceneParam._m0[86u].x * ((_1254 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1199 + 10.0)) * dot(vec3(_1290, _1291, _1292), vec3(_229, _230, _231))));
    float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
    float _2437 = isnan(_2434) ? _1255 : (isnan(_1255) ? _2434 : min(_1255, _2434));
    vec4 _2439 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2436, _2437), 0.0);
    float _2441 = _2439.x;
    bool _2461 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2441)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2441))) > _1199;
    float _2462 = _2461 ? _2436 : _1254;
    float _2463 = _2461 ? _2437 : _1255;
    vec4 _2465 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2462, _2463));
    vec4 _2470 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2462, _2463));
    float _2472 = _2470.x;
    float _2492 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2472)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2472))) - _1199;
    bool _2499 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2503 = (isnan(_2492) ? 0.0 : (isnan(0.0) ? _2492 : max(0.0, _2492))) * (-1.44269502162933349609375);
    float _2523 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2534 = (_2411 + ((_2394 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2523 * _2465.x) * exp2(_2503 * (_2499 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2536 = (_2412 + ((_2396 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2523 * _2465.y) * exp2(_2503 * (_2499 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2538 = (_2413 + ((_2398 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2523 * _2465.z) * exp2(_2503 * (_2499 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2539 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2540 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2541 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2547 = cbMtdParam._m0[2u].x * _2411;
    float _2548 = cbMtdParam._m0[2u].y * _2412;
    float _2549 = cbMtdParam._m0[2u].z * _2413;
    float _4232 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2551 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2556 = cbInstanceData._m0[_2094 + 6u].w * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)));
    float _2561 = _1254 / cbSceneParam._m0[86u].x;
    float _2562 = _1255 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _1199 : (isnan(_1199) ? cbSceneParam._m0[77u].w : min(_1199, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_1199 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_1199) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1199 : min(cbSceneParam._m0[80u].w, _1199));
        float _2618 = _2617 / _1199;
        float _2629 = _2618 * _1228;
        float _2630 = _1229 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2632 = _2618 * _1230;
        float _2634 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2635 = _2634 + cbSceneParam._m0[79u].w;
        float _2636 = cbSceneParam._m0[79u].w - _2630;
        float _2642 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2632 * _2632));
        float _2645 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2642;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2652 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2631 - _2634) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2635 > 0.0) ? exp2(_2651 * _2635) : (2.0 - exp2(_2652 * _2635))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2645;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : max(_2635, _2636));
            float _2838 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : min(_2635, _2636));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2914 = ((abs(_2642 / _2631) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2652 * _2847) - exp2(_2652 * _2848)) * _2836))) + (_2645 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2581);
        _2654 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2656 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2658 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2660 = _2925 * _2581;
    }
    else
    {
        _2654 = _2578;
        _2656 = _2579;
        _2658 = _2580;
        _2660 = _2581;
    }
    bool _2952;
    float _2715;
    vec4 _2718;
    float _2720;
    vec4 _2722;
    float _2730;
    float _2731;
    float _2732;
    float _2736;
    float _2740;
    float _2744;
    float _2745;
    bool _2755;
    for (;;)
    {
        bool _2672 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2673 = log2(_2660);
        float _2677 = exp2(_2673 * cbSceneParam._m0[78u].x);
        float _2678 = exp2(_2673 * cbSceneParam._m0[78u].y);
        float _2679 = exp2(_2673 * cbSceneParam._m0[78u].z);
        float _2680 = _2677 * _2539;
        float _2681 = _2678 * _2540;
        float _2682 = _2679 * _2541;
        vec4 _2690 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1254, _1255));
        float _2692 = _2690.x;
        float _2713 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2692)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2692))) - _1199) * cbMtdParam._m0[20u].y;
        float _4283 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        _2715 = _2556 * _2714;
        float _2716 = _1244 + (-0.5);
        _2718 = cbMtdParam._m0[1u];
        _2720 = _2718.y * _2716;
        _2722 = cbMatDynParam._m0[0u];
        float _2729 = (roundEven(_2722.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2730 = _2729 * (_2672 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
        _2731 = _2729 * (_2672 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
        _2732 = _2729 * (_2672 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2658)));
        _2736 = (((_2547 * _2551) * _2677) * _2714) * _2729;
        _2740 = (((_2548 * _2551) * _2678) * _2714) * _2729;
        _2744 = (((_2549 * _2551) * _2679) * _2714) * _2729;
        _2745 = _2716 * 0.999000012874603271484375;
        _2755 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2755)
        {
            if ((cbInstanceData._m0[_2094 + 7u].x + _2745) < 0.5)
            {
                _2952 = true;
                break;
            }
        }
        uint _2871 = _2404 + uint(_2722.w);
        if ((cbInstanceData._m0[_2871].w < 1.0) && ((cbInstanceData._m0[_2871].w + _2745) < 0.5))
        {
            _2952 = true;
            break;
        }
        if ((_2720 + 1.0) < _2718.x)
        {
            _2952 = true;
            break;
        }
        _2952 = false;
        break;
    }
    float _3156;
    if (_2952)
    {
        discard_state = true;
        _3156 = 0.0;
    }
    else
    {
        _3156 = _2715;
    }
    SV_Target.x = _2730;
    SV_Target.y = _2731;
    SV_Target.z = _2732;
    SV_Target.w = _3156;
    SV_Target_1.x = _2736;
    SV_Target_1.y = _2740;
    SV_Target_1.z = _2744;
    SV_Target_1.w = _2715;
    discard_exit();
}


