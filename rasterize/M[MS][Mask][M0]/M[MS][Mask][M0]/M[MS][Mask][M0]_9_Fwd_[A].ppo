#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _3661;
float _3662;
float _3663;
float _3664;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3673 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3684 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3695 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _362 = _357.x * cbMtdParam._m0[11u].x;
    float _363 = _357.y * cbMtdParam._m0[11u].y;
    float _364 = _357.z * cbMtdParam._m0[11u].z;
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[24u].z) + _448) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3706 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _476 = (_331.x * cbMtdParam._m0[9u].x) * ((_466 * ((_383.x * cbMtdParam._m0[12u].x) - _362)) + _362);
    float _477 = (_331.y * cbMtdParam._m0[9u].y) * ((_466 * ((_383.y * cbMtdParam._m0[12u].y) - _363)) + _363);
    float _478 = (_331.z * cbMtdParam._m0[9u].z) * ((_466 * ((_383.z * cbMtdParam._m0[12u].z) - _364)) + _364);
    float _482 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _476;
    float _485 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _477;
    float _488 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _478;
    float _496 = (((_476 - _482) * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) + _482) * 4.55000019073486328125;
    float _498 = (((_477 - _485) * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) + _485) * 4.55000019073486328125;
    float _500 = (((_478 - _488) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _488) * 4.55000019073486328125;
    vec4 _513 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _568 = ((_538.z - _559) * _466) + _559;
    float _571 = ((((_538.x - _557) * _466) + _557) * 2.0) + (-1.0);
    float _572 = ((((_538.y - _558) * _466) + _558) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3717 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _612 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_513.x * 2.0) + (-1.0)))) + (((_600.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _613 = (_572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_513.y * 2.0) + (-1.0)))) + (((_600.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _654 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_627 - _628) * cbMtdParam._m0[24u].y) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3728 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _663 = ((((cbMtdParam._m0[10u].x - _496) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _655) + _496;
    float _664 = ((((cbMtdParam._m0[10u].y - _498) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _655) + _498;
    float _665 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _500)) * _655) + _500;
    float _670 = (((_513.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    float _674 = ((_600.z - _670) * cbMtdParam._m0[19u].w) + _670;
    float _678 = ((cbMtdParam._m0[23u].y - _674) * _655) + _674;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _703 = (_697.x * 2.0) + (-1.0);
    float _704 = (_697.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3739 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _721 = (_655 * (((cbMtdParam._m0[22u].z * _612) - _612) + _703)) + _612;
    float _722 = (_655 * (((cbMtdParam._m0[22u].z * _613) - _613) + _704)) + _613;
    float _723 = (_655 * (sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) - _578)) + _578;
    float _725 = cbMtdParam._m0[22u].x + _600.w;
    float _728 = fma(_723, _243 * NORMAL.x, fma(_722, _250 * TANGENT.x, (_236 * _228) * _721));
    float _731 = fma(_723, _243 * NORMAL.y, fma(_722, _250 * TANGENT.y, (_236 * _229) * _721));
    float _734 = fma(_723, _243 * NORMAL.z, fma(_722, _250 * TANGENT.z, (_236 * _230) * _721));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    float _739 = _738 * _728;
    float _740 = _738 * _731;
    float _741 = _738 * _734;
    float _3750 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _742 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3772 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3783 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3794 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _760 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _980 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _986 = (cbMatDynParam._m0[5u].x * _980) + cbMatDynParam._m0[5u].y;
        float _3805 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _991 = (cbMatDynParam._m0[5u].z * _980) + cbMatDynParam._m0[5u].w;
        float _3816 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) - _987)) + _987) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_741, cbSceneParam._m0[5u].z, fma(_740, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _739));
    float _859 = fma(_741, cbSceneParam._m0[6u].z, fma(_740, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _739));
    float _862 = fma(_741, cbSceneParam._m0[7u].z, fma(_740, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _739));
    uint _875 = _275 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3827 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _900 = ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * TEXCOORD_5.w) * _896.x;
    float _901 = dot(vec3(_739, _740, _741), vec3(_817, _818, _819));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _739) - _817;
    float _909 = (_904 * _740) - _818;
    float _910 = (_904 * _741) - _819;
    float _914 = abs(dot(vec3(_817, _818, _819), vec3(_739, _740, _741)));
    float _3860 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_742);
    float _929 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1027 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1031 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1056 = _961 + _739;
        float _1057 = _965 + _740;
        float _1058 = _969 + _741;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_739, _740, _741), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3908 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_739, _740, _741), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3941 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_739, _740, _741), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3974 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1345 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1349 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1372 = _961 + _739;
        float _1373 = _965 + _740;
        float _1374 = _969 + _741;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_739, _740, _741), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4037 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_739, _740, _741), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4070 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_739, _740, _741), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4103 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1311)) + _1311;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1312)) + _1312;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _908 * 0.5;
    float _1679 = _909 * 0.5;
    float _1680 = _910 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _742);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1810 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1813 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1841 = frontier_phi_17_15_ladder;
        }
        float _2043;
        if (_1810 > 0.0)
        {
            _2043 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2043 = frontier_phi_26_22_ladder;
        }
        float _2286;
        if (_1813 > 0.0)
        {
            _2286 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2286 = frontier_phi_38_33_ladder;
        }
        float _2288 = isnan(_2043) ? _1841 : (isnan(_1841) ? _2043 : min(_1841, _2043));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1807) + _1796;
        float _2294 = (_2289 * _1810) + _1800;
        float _2295 = (_2289 * _1813) + _1804;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_16_38_ladder = _2419.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2419.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2419.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_16_38_ladder_2;
        _1831 = frontier_phi_16_38_ladder_1;
        _1833 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1747);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _742);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1907 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1910 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2048;
        if (_1904 > 0.0)
        {
            _2048 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2048 = frontier_phi_28_24_ladder;
        }
        float _2313;
        if (_1907 > 0.0)
        {
            _2313 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2313 = frontier_phi_40_35_ladder;
        }
        float _2518;
        if (_1910 > 0.0)
        {
            _2518 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2518 = frontier_phi_49_46_ladder;
        }
        float _2520 = isnan(_2313) ? _2048 : (isnan(_2048) ? _2313 : min(_2048, _2313));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1904) + _1893;
        float _2526 = (_2521 * _1907) + _1897;
        float _2527 = (_2521 * _1910) + _1901;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_25_49_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_25_49_ladder_2;
        _1931 = frontier_phi_25_49_ladder_1;
        _1933 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1838);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1945 = ((((1.0 - _929) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_929 * _916)) * _900;
    float _1946 = _1945 * ((cbModelParam._m0[1u].w * (_1929 - _1829)) + _1829);
    float _1947 = _1945 * ((cbModelParam._m0[1u].w * (_1931 - _1831)) + _1831);
    float _1948 = _1945 * ((cbModelParam._m0[1u].w * (_1933 - _1833)) + _1833);
    float _1951 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1977 = _900 + (-1.0);
    float _1982 = (cbLight._m0[_1970].x * _1977) + 1.0;
    float _1983 = (cbLight._m0[_1970].y * _1977) + 1.0;
    float _1984 = (cbLight._m0[_1970].z * _1977) + 1.0;
    float _1985 = (cbLight._m0[_1970].w * _1977) + 1.0;
    uint _1986 = _1969 + 5u;
    float _1992 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _1996 = _1969 + 4u;
    float _2002 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _2006 = _1969 | 1u;
    float _2017 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_739, _740, _741));
    float _2020 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_739, _740, _741));
    float _4239 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _4250 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2025 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2027 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2034 = ((cbLight._m0[_1986].x * _1992) * _2027) + ((cbLight._m0[_1996].x * _2002) * _2025);
    float _2035 = ((_1992 * cbLight._m0[_1986].y) * _2027) + ((_2002 * cbLight._m0[_1996].y) * _2025);
    float _2036 = ((_1992 * cbLight._m0[_1986].z) * _2027) + ((_2002 * cbLight._m0[_1996].z) * _2025);
    uvec4 _2040 = floatBitsToUint(cbLight._m0[_1969 + 12u]);
    bool _2042 = _2040.x == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2042)
    {
        _2053 = _2034;
        _2055 = _2035;
        _2057 = _2036;
    }
    else
    {
        uint _2061 = _1969 + 6u;
        float _2077 = (dot(vec3(cbLight._m0[_1969 + 2u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _4261 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2080 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2053 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _2034;
        _2055 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _2035;
        _2057 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _2036;
    }
    bool _2060 = _2040.y == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2060)
    {
        _2098 = _2053;
        _2100 = _2055;
        _2102 = _2057;
    }
    else
    {
        uint _2257 = _1969 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1969 + 3u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4277 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2276 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2098 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2053;
        _2100 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2055;
        _2102 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2057;
    }
    uint _2105 = _1969 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _742) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1969].x + _817;
    float _2121 = cbLight._m0[_1969].y + _818;
    float _2122 = cbLight._m0[_1969].z + _819;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_1969].xyz));
    float _4293 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2134 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2135 = dot(vec3(_739, _740, _741), vec3(_2127, _2128, _2129));
    float _4315 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2127, _2128, _2129));
    float _4326 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2134 * ((_2133 * _2159) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2159) + _2119) * _2133))) * _2133;
    float _4337 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2183 = _1969 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _742) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2006].x + _817;
    float _2197 = cbLight._m0[_2006].y + _818;
    float _2198 = cbLight._m0[_2006].z + _819;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2006].xyz));
    float _4348 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2210 = dot(vec3(_739, _740, _741), vec3(_2203, _2204, _2205));
    float _4359 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2203, _2204, _2205));
    float _4370 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2195;
    float _2242 = (0.5 / (((_2134 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2232) + _2195) * _2209))) * _2209;
    float _4381 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2254 = (((_2231 * cbLight._m0[_2183].x) * _2244) * _1992) + (((_2158 * cbLight._m0[_2105].x) * _2172) * _2002);
    float _2255 = (((_2231 * cbLight._m0[_2183].y) * _2244) * _1992) + (((_2158 * cbLight._m0[_2105].y) * _2172) * _2002);
    float _2256 = (((_2231 * cbLight._m0[_2183].z) * _2244) * _1992) + (((_2158 * cbLight._m0[_2105].z) * _2172) * _2002);
    float _2318;
    float _2320;
    float _2322;
    if (_2042)
    {
        _2318 = _2254;
        _2320 = _2255;
        _2322 = _2256;
    }
    else
    {
        uint _2324 = _1969 + 2u;
        uint _2328 = _1969 + 10u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _742) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _817;
        float _2345 = cbLight._m0[_2324].y + _818;
        float _2346 = cbLight._m0[_2324].z + _819;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2324].xyz));
        float _4392 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2358 = dot(vec3(_739, _740, _741), vec3(_2351, _2352, _2353));
        float _4403 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4414 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2380 = 1.0 - _2343;
        float _2390 = (0.5 / (((_2134 * ((_2357 * _2380) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2380) + _2343) * _2357))) * _2357;
        float _4425 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2318 = (((_2379 * cbLight._m0[_2328].x) * _2392) * _2393) + _2254;
        _2320 = (((_2379 * cbLight._m0[_2328].y) * _2392) * _2393) + _2255;
        _2322 = (((_2379 * cbLight._m0[_2328].z) * _2392) * _2393) + _2256;
    }
    float _2428;
    float _2430;
    float _2432;
    if (_2060)
    {
        _2428 = _2318;
        _2430 = _2320;
        _2432 = _2322;
    }
    else
    {
        uint _2439 = _1969 + 3u;
        uint _2443 = _1969 + 11u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _742) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _817;
        float _2460 = cbLight._m0[_2439].y + _818;
        float _2461 = cbLight._m0[_2439].z + _819;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2439].xyz));
        float _4441 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2473 = dot(vec3(_739, _740, _741), vec3(_2466, _2467, _2468));
        float _4452 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4463 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2494 = (exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2495 = 1.0 - _2458;
        float _2505 = (0.5 / (((_2134 * ((_2472 * _2495) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2495) + _2458) * _2472))) * _2472;
        float _4474 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2428 = (((_2494 * cbLight._m0[_2443].x) * _2507) * _2508) + _2318;
        _2430 = (((_2494 * cbLight._m0[_2443].y) * _2507) * _2508) + _2320;
        _2432 = (((_2494 * cbLight._m0[_2443].z) * _2507) * _2508) + _2322;
    }
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_1967.y == 0u)
    {
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2583;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2583;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2583;
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.x;
        uint _2610 = uint((float(_2598.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2599))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2599)));
        float _2620 = (log2(_2586 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2621 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        uint _2624 = uint(isnan(14.0) ? _2621 : (isnan(_2621) ? 14.0 : min(_2621, 14.0)));
        uvec4 _2629 = texelFetch(g_lightClusterGridBuffer, int(((_2624 << 2u) + (_2610 << 6u)) >> 2u));
        uint _2630 = _2629.x;
        uint _2631 = _2598.z;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((((1u << ((_2631 >> 4u) & 15u)) + 4294967295u) & _2630) == 0u) || ((_2631 & 240u) == 0u))
        {
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
        }
        else
        {
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            uint _2890 = 0u;
            uint _2899;
            bool _2900;
            for (;;)
            {
                _2899 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                _2900 = _2899 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2900)
                {
                    frontier_phi_66_pred = _2884;
                    frontier_phi_66_pred_1 = _2889;
                    frontier_phi_66_pred_2 = _2888;
                    frontier_phi_66_pred_3 = _2887;
                    frontier_phi_66_pred_4 = _2886;
                    frontier_phi_66_pred_5 = _2885;
                }
                else
                {
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    uint _3035;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2899;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    for (;;)
                    {
                        uint _3039 = uint(findLSB(_3035)) + (_2890 << 5u);
                        uint _3036 = (_3035 + 4294967295u) & _3035;
                        uint _3041 = _3039 * 48u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3061 = (_3039 * 48u) + 4u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3080 = (_3039 * 48u) + 8u;
                        vec3 _3091 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x));
                        float _3095 = _3055.x - _2584;
                        float _3096 = _3055.y - _2585;
                        float _3097 = _3055.z - _2586;
                        float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                        float _3101 = inversesqrt(_3098);
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3105 = dot(vec3(_856, _859, _862), vec3(_3102, _3103, _3104));
                        float _3110 = 1.0 - (_3098 * _3055.w);
                        float _4500 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3112 = sqrt(_3098) * _3074.w;
                        float _3115 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3105) + _3116;
                        float _3122 = _3112 * _3112;
                        float _3126 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3111) / ((_3122 * 0.699999988079071044921875) + 1.0);
                        float _3130 = (-0.0) - _2584;
                        float _3131 = (-0.0) - _2585;
                        float _3132 = (-0.0) - _2586;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3147 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _916;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_856, _859, _862), vec3(_3137, _3138, _3139));
                        float _4516 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3172 = dot(vec3(_856, _859, _862), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4527 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3115 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3105) + _3181;
                        float _4538 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4549 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3179 * _3179) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125))) * _3111;
                        _2959 = (_3126 * _3074.x) + _3032;
                        _2960 = (_3126 * _3074.y) + _3033;
                        _2961 = (_3126 * _3074.z) + _3034;
                        _2956 = (_3207 * _3091.x) + _3029;
                        _2957 = (_3207 * _3091.y) + _3030;
                        _2958 = (_3207 * _3091.z) + _3031;
                        if (_3036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _3036;
                        }
                    }
                    frontier_phi_66_pred = _2956;
                    frontier_phi_66_pred_1 = _2961;
                    frontier_phi_66_pred_2 = _2960;
                    frontier_phi_66_pred_3 = _2959;
                    frontier_phi_66_pred_4 = _2958;
                    frontier_phi_66_pred_5 = _2957;
                }
                _2732 = frontier_phi_66_pred;
                _2742 = frontier_phi_66_pred_1;
                _2740 = frontier_phi_66_pred_2;
                _2738 = frontier_phi_66_pred_3;
                _2736 = frontier_phi_66_pred_4;
                _2734 = frontier_phi_66_pred_5;
                uint _2891 = _2890 + 1u;
                if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2884 = _2732;
                    _2885 = _2734;
                    _2886 = _2736;
                    _2887 = _2738;
                    _2888 = _2740;
                    _2889 = _2742;
                    _2890 = _2891;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
        }
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.z;
        uint _2748 = (_2746 >> 8u) & 15u;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((4294967295u << _2748) & _2630) == 0u)
        {
            _2852 = _2731;
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
        }
        else
        {
            float _2877 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
            float _2878 = _2877 * _2584;
            float _2879 = _2877 * _2585;
            float _2880 = _2877 * _2586;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2748 < ((_2746 >> 12u) & 15u))
            {
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _3012 = _2731;
                float _3013 = _2733;
                float _3014 = _2735;
                float _3015 = _2737;
                float _3016 = _2739;
                float _3017 = _2741;
                uint _3018 = _2748;
                uint _3027;
                bool _3028;
                for (;;)
                {
                    _3027 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                    _3028 = _3027 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3028)
                    {
                        frontier_phi_77_pred = _3017;
                        frontier_phi_77_pred_1 = _3016;
                        frontier_phi_77_pred_2 = _3015;
                        frontier_phi_77_pred_3 = _3014;
                        frontier_phi_77_pred_4 = _3013;
                        frontier_phi_77_pred_5 = _3012;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        uint _3240 = _3027;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3309;
                        vec4 _3324;
                        float _3370;
                        bool _3371;
                        for (;;)
                        {
                            uint _3251 = ((_3018 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3296 = (_3251 * 40u) + 16u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3251 * 40u) + 20u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3251 * 40u) + 24u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3345 = (_3251 * 40u) + 28u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3370 = fma(_2586, _3358.z, fma(_2585, _3358.y, _3358.x * _2584)) + _3358.w;
                            _3371 = !((fma(_2586, _3339.z, fma(_2585, _3339.y, _3339.x * _2584)) + _3339.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3371)
                            {
                                float _3398 = _3266.x - _2584;
                                float _3399 = _3266.y - _2585;
                                float _3400 = _3266.z - _2586;
                                float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                                float _3404 = inversesqrt(_3401);
                                float _3405 = _3404 * _3398;
                                float _3406 = _3404 * _3399;
                                float _3407 = _3404 * _3400;
                                float _3411 = 1.0 - (_3401 / (_3267 * _3267));
                                float _4560 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3416 = sqrt(_3401) * _3282.w;
                                float _3418 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                                float _3419 = _3418 * _3418;
                                float _3422 = ((1.0 - _3419) * dot(vec3(_3405, _3406, _3407), vec3(_856, _859, _862))) + _3419;
                                float _3425 = _3416 * _3416;
                                float _3429 = (fma(_2586, _3309.z, fma(_2585, _3309.y, _3309.x * _2584)) + _3309.w) / _3370;
                                float _3430 = (fma(_2586, _3324.z, fma(_2585, _3324.y, _3324.x * _2584)) + _3324.w) / _3370;
                                float _3434 = 1.0 - dot(vec2(_3429, _3430), vec2(_3429, _3430));
                                float _4576 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3436 = _3435 * (((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3412) / ((_3425 * 0.699999988079071044921875) + 1.0));
                                float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                                float _3449 = 1.0 - _916;
                                float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                                float _3457 = _3456 * _3456;
                                float _3458 = _3457 * _3457;
                                float _3459 = _3405 - _2878;
                                float _3460 = _3406 - _2879;
                                float _3461 = _3407 - _2880;
                                float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                                float _3469 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2878, (-0.0) - _2879, (-0.0) - _2880));
                                float _4587 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3473 = dot(vec3(_856, _859, _862), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                                float _4598 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                                float _3481 = _3418 * _3457;
                                float _3482 = _3481 * _3481;
                                float _3488 = ((1.0 - _3482) * dot(vec3(_856, _859, _862), vec3(_3405, _3406, _3407))) + _3482;
                                float _4609 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3490 = 1.0 - _3457;
                                float _3500 = (0.5 / (((_3489 * ((_3472 * _3490) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3457) * _3472))) * _3489;
                                float _4620 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3510 = (_3435 * _3412) * (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3436 * _3282.y;
                                frontier_phi_83_pred_1 = _3436 * _3282.x;
                                frontier_phi_83_pred_2 = _3510 * _3294.z;
                                frontier_phi_83_pred_3 = _3510 * _3294.y;
                                frontier_phi_83_pred_4 = _3510 * _3294.x;
                                frontier_phi_83_pred_5 = _3436 * _3282.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_83_pred;
                            _3517 = frontier_phi_83_pred_1;
                            _3516 = frontier_phi_83_pred_2;
                            _3515 = frontier_phi_83_pred_3;
                            _3514 = frontier_phi_83_pred_4;
                            _3519 = frontier_phi_83_pred_5;
                            _3224 = _3517 + _3237;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3226;
                        frontier_phi_77_pred_1 = _3225;
                        frontier_phi_77_pred_2 = _3224;
                        frontier_phi_77_pred_3 = _3223;
                        frontier_phi_77_pred_4 = _3222;
                        frontier_phi_77_pred_5 = _3221;
                    }
                    _2863 = frontier_phi_77_pred;
                    _2861 = frontier_phi_77_pred_1;
                    _2859 = frontier_phi_77_pred_2;
                    _2857 = frontier_phi_77_pred_3;
                    _2855 = frontier_phi_77_pred_4;
                    _2853 = frontier_phi_77_pred_5;
                    uint _3019 = _3018 + 1u;
                    if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3012 = _2853;
                        _3013 = _2855;
                        _3014 = _2857;
                        _3015 = _2859;
                        _3016 = _2861;
                        _3017 = _2863;
                        _3018 = _3019;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2857;
                frontier_phi_58_59_ladder_1 = _2863;
                frontier_phi_58_59_ladder_2 = _2861;
                frontier_phi_58_59_ladder_3 = _2859;
                frontier_phi_58_59_ladder_4 = _2855;
                frontier_phi_58_59_ladder_5 = _2853;
            }
            else
            {
                frontier_phi_58_59_ladder = _2735;
                frontier_phi_58_59_ladder_1 = _2741;
                frontier_phi_58_59_ladder_2 = _2739;
                frontier_phi_58_59_ladder_3 = _2737;
                frontier_phi_58_59_ladder_4 = _2733;
                frontier_phi_58_59_ladder_5 = _2731;
            }
            _2852 = frontier_phi_58_59_ladder_5;
            _2854 = frontier_phi_58_59_ladder_4;
            _2856 = frontier_phi_58_59_ladder;
            _2858 = frontier_phi_58_59_ladder_3;
            _2860 = frontier_phi_58_59_ladder_2;
            _2862 = frontier_phi_58_59_ladder_1;
        }
        float _2867 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2643 = (_2867 * _2858) + _2098;
        _2645 = (_2867 * _2860) + _2100;
        _2647 = (_2867 * _2862) + _2102;
        _2649 = ((_2852 * 0.039999999105930328369140625) * _2867) + _2428;
        _2651 = ((_2854 * 0.039999999105930328369140625) * _2867) + _2430;
        _2653 = ((_2856 * 0.039999999105930328369140625) * _2867) + _2432;
    }
    else
    {
        _2643 = _2098;
        _2645 = _2100;
        _2647 = _2102;
        _2649 = _2428;
        _2651 = _2430;
        _2653 = _2432;
    }
    float _4636 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4647 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4658 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2670 = ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2643 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _900))) + ((_2649 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2671 = ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2645 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _900))) + ((_2651 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    float _2672 = ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2647 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _900))) + ((_2653 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1736)) * cbPerFrame._m0[3u].x);
    uint _2673 = _275 + 6u;
    float _2681 = _837 / cbSceneParam._m0[86u].x;
    float _2682 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _760 : (isnan(_760) ? cbSceneParam._m0[77u].w : min(_760, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_760 > cbSceneParam._m0[78u].w)
    {
        float _2756 = isnan(_760) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _760 : min(cbSceneParam._m0[80u].w, _760));
        float _2757 = _2756 / _760;
        float _2768 = _2757 * _810;
        float _2769 = _811 * _2757;
        float _2770 = (-0.0) - _2769;
        float _2772 = _2757 * _812;
        float _2774 = (cbSceneParam._m0[77u].w * _2770) / _2756;
        float _2775 = _2774 + cbSceneParam._m0[79u].w;
        float _2776 = cbSceneParam._m0[79u].w - _2769;
        float _2782 = sqrt(((_2768 * _2768) + (_2769 * _2769)) + (_2772 * _2772));
        float _2785 = (1.0 - (cbSceneParam._m0[77u].w / _2756)) * _2782;
        float _2790 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2792 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2969;
        if (abs((_2770 - _2774) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2969 = ((((_2775 > 0.0) ? exp2(_2790 * _2775) : (2.0 - exp2(_2792 * _2775))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2785;
        }
        else
        {
            float _2913 = 1.0 / cbSceneParam._m0[80u].x;
            float _2914 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : max(_2775, _2776));
            float _2915 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : min(_2775, _2776));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            _2969 = ((abs(_2782 / _2770) * cbSceneParam._m0[80u].y) * ((((_2924 - _2925) * 2.0) - ((exp2(_2790 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0)))) - exp2(_2790 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))))) * _2913)) - ((exp2(_2792 * _2924) - exp2(_2792 * _2925)) * _2913))) + (_2785 * cbSceneParam._m0[80u].z);
        }
        vec4 _2971 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _2980 = exp2((_2969 * (-1.44269502162933349609375)) * (1.0 - _2971.w));
        float _2981 = log2(_2980);
        float _2997 = log2(_2701);
        _2794 = (exp2(_2997 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].x)) * _2971.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2796 = (exp2(_2997 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].y)) * _2971.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2798 = (exp2(_2997 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].z)) * _2971.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2800 = _2980 * _2701;
    }
    else
    {
        _2794 = _2698;
        _2796 = _2699;
        _2798 = _2700;
        _2800 = _2701;
    }
    bool _3007;
    vec4 _2810;
    vec4 _2832;
    float _2834;
    float _2838;
    float _2839;
    float _2840;
    float _2841;
    bool _2851;
    for (;;)
    {
        _2810 = cbMatDynParam._m0[0u];
        float _2812 = roundEven(_2810.y);
        bool _2813 = _2812 == 3.0;
        float _2814 = log2(_2800);
        float _2821 = exp2(_2814 * cbSceneParam._m0[78u].x) * _2670;
        float _2822 = exp2(_2814 * cbSceneParam._m0[78u].y) * _2671;
        float _2823 = exp2(_2814 * cbSceneParam._m0[78u].z) * _2672;
        float _2830 = _826 + (-0.5);
        _2832 = cbMtdParam._m0[1u];
        _2834 = _2832.y * _2830;
        float _2837 = (_2812 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2838 = _2837 * (_2813 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2794)));
        _2839 = _2837 * (_2813 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2796)));
        _2840 = _2837 * (_2813 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2798)));
        _2841 = _2830 * 0.999000012874603271484375;
        _2851 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2851)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _2841) < 0.5)
            {
                _3007 = true;
                break;
            }
        }
        uint _2948 = _875 + uint(_2810.w);
        if ((cbInstanceData._m0[_2948].w < 1.0) && ((cbInstanceData._m0[_2948].w + _2841) < 0.5))
        {
            _3007 = true;
            break;
        }
        if ((_2834 + 1.0) < _2832.x)
        {
            _3007 = true;
            break;
        }
        _3007 = false;
        break;
    }
    float _3212;
    if (_3007)
    {
        discard_state = true;
        _3212 = 0.0;
    }
    else
    {
        _3212 = cbInstanceData._m0[_2673].w;
    }
    SV_Target.x = _2838;
    SV_Target.y = _2839;
    SV_Target.z = _2840;
    SV_Target.w = _3212;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2673].w;
    discard_exit();
}


