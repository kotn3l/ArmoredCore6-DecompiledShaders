#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1420;
float _3800;
float _3801;
float _3802;
float _3803;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3812 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _441 = (_434 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _442 = (_434 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _443 = (_434 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3823 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _514 = (_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441;
    float _515 = (_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442;
    float _516 = (_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _553 = _551.x;
    float _563 = dot(vec4(_553, _551.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _575 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _362.z) * 2.0) - ((((_553 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3834 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _589 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_576 * ((_534.x * cbMtdParam._m0[14u].x) - _514)) + _514);
    float _592 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_576 * ((_534.y * cbMtdParam._m0[14u].y) - _515)) + _515);
    float _595 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_576 * ((_534.z * cbMtdParam._m0[14u].z) - _516)) + _516);
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _654 = _650.z;
    float _661 = ((_633.x - _652) * _434) + _652;
    float _662 = ((_633.y - _653) * _434) + _653;
    float _663 = ((_633.z - _654) * _434) + _654;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _686 = ((_675.x - _661) * _507) + _661;
    float _687 = ((_675.y - _662) * _507) + _662;
    float _688 = ((_675.z - _663) * _507) + _663;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _713 = ((_700.z - _688) * _576) + _688;
    float _716 = ((((_700.x - _686) * _576) + _686) * 2.0) + (-1.0);
    float _718 = ((((_700.y - _687) * _576) + _687) * 2.0) + (-1.0);
    float _719 = dot(vec2(_716, _718), vec2(_716, _718));
    float _3845 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _724 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _765 = _763.x;
    float _766 = 1.0 - _765;
    float _779 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_765 - _766) * cbMtdParam._m0[24u].w) + _766) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3856 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _780 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _787 = (_780 * ((_613.x * cbMtdParam._m0[18u].x) - _589)) + _589;
    float _788 = (_780 * ((_613.y * cbMtdParam._m0[18u].y) - _592)) + _592;
    float _789 = (_780 * ((_613.z * cbMtdParam._m0[18u].z) - _595)) + _595;
    float _793 = (cbMtdParam._m0[19u].w * (_738.z - _713)) + _713;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _813 = (_806.x * 2.0) + (-1.0);
    float _814 = (_806.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _3867 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _823 = (_780 * (_806.z - _793)) + _793;
    float _826 = (((_738.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _716;
    float _827 = (((_738.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _718;
    float _839 = (((_813 - _826) + (cbMtdParam._m0[21u].x * _826)) * _780) + _826;
    float _840 = (((_814 - _827) + (cbMtdParam._m0[21u].x * _827)) * _780) + _827;
    float _841 = (_780 * (sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _724)) + _724;
    float _845 = cbMtdParam._m0[22u].x + _738.w;
    float _848 = fma(_841, _239 * NORMAL.x, fma(_840, _246 * TANGENT.x, (_232 * _224) * _839));
    float _851 = fma(_841, _239 * NORMAL.y, fma(_840, _246 * TANGENT.y, (_232 * _225) * _839));
    float _854 = fma(_841, _239 * NORMAL.z, fma(_840, _246 * TANGENT.z, (_232 * _226) * _839));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3878 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _862 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3900 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3911 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _3922 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1101 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1107 = (cbMatDynParam._m0[5u].x * _1101) + cbMatDynParam._m0[5u].y;
        float _3933 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1112 = (cbMatDynParam._m0[5u].z * _1101) + cbMatDynParam._m0[5u].w;
        float _3944 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) - _1108)) + _1108) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _980 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _983 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _996 = _252 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_997].z;
    float _3955 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1021 = ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * TEXCOORD_5.w) * _1017.x;
    float _1022 = dot(vec3(_859, _860, _861), vec3(_938, _939, _940));
    float _1025 = _1022 * 2.0;
    float _1029 = (_1025 * _859) - _938;
    float _1030 = (_1025 * _860) - _939;
    float _1031 = (_1025 * _861) - _940;
    float _1035 = abs(dot(vec3(_938, _939, _940), vec3(_859, _860, _861)));
    float _3988 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1037 = sqrt(_862);
    float _1050 = exp2((_1037 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1037 * 3.0));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1419;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1144 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1148 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1152 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1177 = _1082 + _859;
        float _1178 = _1086 + _860;
        float _1179 = _1090 + _861;
        float _1189 = fma(_1179, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177)) - _1144;
        float _1190 = fma(_1179, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177)) - _1148;
        float _1191 = fma(_1179, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177)) - _1152;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1144 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1148 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[34u].z) + ((((((_1152 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1247 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1213.x + (-0.5));
        float _1249 = _1247 * (_1213.y + (-0.5));
        float _1250 = _1247 * (_1213.z + (-0.5));
        float _1257 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1220.x + (-0.5));
        float _1259 = _1257 * (_1220.y + (-0.5));
        float _1260 = _1257 * (_1220.z + (-0.5));
        float _1267 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1227.x + (-0.5));
        float _1269 = _1267 * (_1227.y + (-0.5));
        float _1270 = _1267 * (_1227.z + (-0.5));
        float _1277 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1234.x + (-0.5));
        float _1279 = _1277 * (_1234.y + (-0.5));
        float _1280 = _1277 * (_1234.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1301 = (dot(vec3(_859, _860, _861), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1311 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4036 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1313 + 1.0))) + _1318) * _1281;
        float _1328 = _1249 * 0.5;
        float _1329 = _1259 * 0.5;
        float _1330 = _1269 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_859, _860, _861), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4069 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1355 + 1.0))) + _1360) * _1282;
        float _1370 = _1250 * 0.5;
        float _1371 = _1260 * 0.5;
        float _1372 = _1270 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_859, _860, _861), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4102 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1397 + 1.0))) + _1402) * _1283;
        _1419 = _1250;
        _1421 = _1249;
        _1422 = _1248;
        _1423 = _1260;
        _1424 = _1259;
        _1425 = _1258;
        _1426 = _1270;
        _1427 = _1269;
        _1428 = _1268;
        _1429 = _1283;
        _1430 = _1282;
        _1431 = _1281;
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1420;
        _1421 = _1420;
        _1422 = _1420;
        _1423 = _1420;
        _1424 = _1420;
        _1425 = _1420;
        _1426 = _1420;
        _1427 = _1420;
        _1428 = _1420;
        _1429 = _1420;
        _1430 = _1420;
        _1431 = _1420;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1464 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1468 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1491 = _1082 + _859;
        float _1492 = _1086 + _860;
        float _1493 = _1090 + _861;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_859, _860, _861), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4165 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_859, _860, _861), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4198 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_859, _860, _861), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4231 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1420;
        _1730 = _1420;
        _1731 = _1420;
        _1732 = _1420;
        _1733 = _1420;
        _1734 = _1420;
        _1735 = _1420;
        _1736 = _1420;
        _1737 = _1420;
        _1738 = _1420;
        _1739 = _1420;
        _1740 = _1420;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1432)) + _1432;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1433)) + _1433;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1434)) + _1434;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1029 * 0.5;
    float _1798 = _1030 * 0.5;
    float _1799 = _1031 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1423, _1426, _1429));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1913 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1917 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1921 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1924 = fma(_1031, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029));
        float _1927 = fma(_1031, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029));
        float _1930 = fma(_1031, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029));
        float _1958;
        if (_1924 > 0.0)
        {
            _1958 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1958 = frontier_phi_17_15_ladder;
        }
        float _2179;
        if (_1927 > 0.0)
        {
            _2179 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2179 = frontier_phi_26_22_ladder;
        }
        float _2425;
        if (_1930 > 0.0)
        {
            _2425 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2425 = frontier_phi_38_33_ladder;
        }
        float _2427 = isnan(_2179) ? _1958 : (isnan(_1958) ? _2179 : min(_1958, _2179));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1924) + _1913;
        float _2433 = (_2428 * _1927) + _1917;
        float _2434 = (_2428 * _1930) + _1921;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2435;
        float _2439 = _2435 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 > _2439) || ((_2433 < _2437) || ((_2432 < _2437) || (_2432 > _2439))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2434, cbModelParam._m0[9u].z, fma(_2433, cbModelParam._m0[9u].y, _2432 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2434, cbModelParam._m0[10u].z, fma(_2433, cbModelParam._m0[10u].y, _2432 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2434, cbModelParam._m0[11u].z, fma(_2433, cbModelParam._m0[11u].y, _2432 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_16_38_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1946 = frontier_phi_16_38_ladder_2;
        _1948 = frontier_phi_16_38_ladder_1;
        _1950 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1029, _1030, _1031), _1866);
        _1946 = _1934.x * cbModelParam._m0[1u].y;
        _1948 = _1934.y * cbModelParam._m0[1u].y;
        _1950 = _1934.z * cbModelParam._m0[1u].y;
    }
    float _1954 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1954 : min(cbModelParam._m0[25u].w, _1954));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1031, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029));
        float _2022 = fma(_1031, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029));
        float _2025 = fma(_1031, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029));
        float _2184;
        if (_2019 > 0.0)
        {
            _2184 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2184 = frontier_phi_28_24_ladder;
        }
        float _2452;
        if (_2022 > 0.0)
        {
            _2452 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2452 = frontier_phi_40_35_ladder;
        }
        float _2657;
        if (_2025 > 0.0)
        {
            _2657 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2657 = frontier_phi_49_46_ladder;
        }
        float _2659 = isnan(_2452) ? _2184 : (isnan(_2184) ? _2452 : min(_2184, _2452));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _2019) + _2008;
        float _2665 = (_2660 * _2022) + _2012;
        float _2666 = (_2660 * _2025) + _2016;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1955);
            frontier_phi_25_49_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_25_49_ladder_2;
        _2046 = frontier_phi_25_49_ladder_1;
        _2048 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1029, _1030, _1031), _1955);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2060 = ((((1.0 - _1050) * ((_1037 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1050 * _1037)) * _1021;
    float _2061 = _2060 * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2062 = _2060 * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2063 = _2060 * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2066 = fma(_2063, cbSceneParam._m0[89u].z, fma(_2062, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2069 = fma(_2063, cbSceneParam._m0[90u].z, fma(_2062, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2072 = fma(_2063, cbSceneParam._m0[91u].z, fma(_2062, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    vec4 _2080 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_958, _959));
    float _2082 = _2080.w;
    float _2094 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2082);
    float _2095 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2082);
    float _2096 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2082);
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _1021 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2138 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2142 = _2102 | 1u;
    float _2153 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_859, _860, _861));
    float _2156 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_859, _860, _861));
    float _4367 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _4378 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2161 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2163 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2170 = ((cbLight._m0[_2119].x * _2125) * _2163) + (((cbLight._m0[_2129].x * _2094) * _2138) * _2161);
    float _2171 = ((_2125 * cbLight._m0[_2119].y) * _2163) + (((cbLight._m0[_2129].y * _2095) * _2138) * _2161);
    float _2172 = ((_2125 * cbLight._m0[_2119].z) * _2163) + (((cbLight._m0[_2129].z * _2096) * _2138) * _2161);
    uvec4 _2176 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2178 = _2176.x == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2178)
    {
        _2189 = _2170;
        _2191 = _2171;
        _2193 = _2172;
    }
    else
    {
        uint _2197 = _2102 + 6u;
        float _2213 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4389 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2216 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2189 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _2170;
        _2191 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _2171;
        _2193 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _2172;
    }
    bool _2196 = _2176.y == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2196)
    {
        _2234 = _2189;
        _2236 = _2191;
        _2238 = _2193;
    }
    else
    {
        uint _2396 = _2102 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4405 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2415 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2234 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2189;
        _2236 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2191;
        _2238 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2193;
    }
    uint _2241 = _2102 + 8u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _862) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_2102].x + _938;
    float _2257 = cbLight._m0[_2102].y + _939;
    float _2258 = cbLight._m0[_2102].z + _940;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2102].xyz));
    float _4421 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2270 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2271 = dot(vec3(_859, _860, _861), vec3(_2263, _2264, _2265));
    float _4443 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2263, _2264, _2265));
    float _4454 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2255 * _2255;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2295 = 1.0 - _2255;
    float _2306 = (0.5 / (((_2270 * ((_2269 * _2295) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2295) + _2255) * _2269))) * _2269;
    float _4465 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    uint _2322 = _2102 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _862) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2142].x + _938;
    float _2336 = cbLight._m0[_2142].y + _939;
    float _2337 = cbLight._m0[_2142].z + _940;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2142].xyz));
    float _4476 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2349 = dot(vec3(_859, _860, _861), vec3(_2342, _2343, _2344));
    float _4487 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2342, _2343, _2344));
    float _4498 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2371 = 1.0 - _2334;
    float _2381 = (0.5 / (((_2270 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2371) + _2334) * _2348))) * _2348;
    float _4509 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2393 = (((_2370 * cbLight._m0[_2322].x) * _2383) * _2125) + ((((cbLight._m0[_2241].x * _2094) * _2294) * _2308) * _2138);
    float _2394 = (((_2370 * cbLight._m0[_2322].y) * _2383) * _2125) + ((((cbLight._m0[_2241].y * _2095) * _2294) * _2308) * _2138);
    float _2395 = (((_2370 * cbLight._m0[_2322].z) * _2383) * _2125) + ((((cbLight._m0[_2241].z * _2096) * _2294) * _2308) * _2138);
    float _2457;
    float _2459;
    float _2461;
    if (_2178)
    {
        _2457 = _2393;
        _2459 = _2394;
        _2461 = _2395;
    }
    else
    {
        uint _2463 = _2102 + 2u;
        uint _2467 = _2102 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _862) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _938;
        float _2484 = cbLight._m0[_2463].y + _939;
        float _2485 = cbLight._m0[_2463].z + _940;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2463].xyz));
        float _4520 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2497 = dot(vec3(_859, _860, _861), vec3(_2490, _2491, _2492));
        float _4531 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4542 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2270 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2519) + _2482) * _2496))) * _2496;
        float _4553 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2457 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2393;
        _2459 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2394;
        _2461 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2395;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2196)
    {
        _2567 = _2457;
        _2569 = _2459;
        _2571 = _2461;
    }
    else
    {
        uint _2578 = _2102 + 3u;
        uint _2582 = _2102 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _862) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _938;
        float _2599 = cbLight._m0[_2578].y + _939;
        float _2600 = cbLight._m0[_2578].z + _940;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2578].xyz));
        float _4569 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2612 = dot(vec3(_859, _860, _861), vec3(_2605, _2606, _2607));
        float _4580 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4591 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2633 = (exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2634 = 1.0 - _2597;
        float _2644 = (0.5 / (((_2270 * ((_2611 * _2634) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2634) + _2597) * _2611))) * _2611;
        float _4602 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2567 = (((_2633 * cbLight._m0[_2582].x) * _2646) * _2647) + _2457;
        _2569 = (((_2633 * cbLight._m0[_2582].y) * _2646) * _2647) + _2459;
        _2571 = (((_2633 * cbLight._m0[_2582].z) * _2646) * _2647) + _2461;
    }
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_2100.y == 0u)
    {
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2722;
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2722;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2722;
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.x;
        uint _2749 = uint((float(_2737.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2738))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2738)));
        float _2759 = (log2(_2725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2760 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        uint _2763 = uint(isnan(14.0) ? _2760 : (isnan(_2760) ? 14.0 : min(_2760, 14.0)));
        uvec4 _2768 = texelFetch(g_lightClusterGridBuffer, int(((_2763 << 2u) + (_2749 << 6u)) >> 2u));
        uint _2769 = _2768.x;
        uint _2770 = _2737.z;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((((1u << ((_2770 >> 4u) & 15u)) + 4294967295u) & _2769) == 0u) || ((_2770 & 240u) == 0u))
        {
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
        }
        else
        {
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                else
                {
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    uint _3174;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3038;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3178 = uint(findLSB(_3174)) + (_3029 << 5u);
                        uint _3175 = (_3174 + 4294967295u) & _3174;
                        uint _3180 = _3178 * 48u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3200 = (_3178 * 48u) + 4u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3219 = (_3178 * 48u) + 8u;
                        vec3 _3230 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x));
                        float _3234 = _3194.x - _2723;
                        float _3235 = _3194.y - _2724;
                        float _3236 = _3194.z - _2725;
                        float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                        float _3240 = inversesqrt(_3237);
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3244 = dot(vec3(_977, _980, _983), vec3(_3241, _3242, _3243));
                        float _3249 = 1.0 - (_3237 * _3194.w);
                        float _4628 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3251 = sqrt(_3237) * _3213.w;
                        float _3254 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3244) + _3255;
                        float _3261 = _3251 * _3251;
                        float _3265 = ((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3250) / ((_3261 * 0.699999988079071044921875) + 1.0);
                        float _3269 = (-0.0) - _2723;
                        float _3270 = (-0.0) - _2724;
                        float _3271 = (-0.0) - _2725;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3286 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _1037;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_977, _980, _983), vec3(_3276, _3277, _3278));
                        float _4644 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3311 = dot(vec3(_977, _980, _983), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4655 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3254 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3244) + _3320;
                        float _4666 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4677 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3318 * _3318) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125))) * _3250;
                        _3098 = (_3265 * _3213.x) + _3171;
                        _3099 = (_3265 * _3213.y) + _3172;
                        _3100 = (_3265 * _3213.z) + _3173;
                        _3095 = (_3346 * _3230.x) + _3168;
                        _3096 = (_3346 * _3230.y) + _3169;
                        _3097 = (_3346 * _3230.z) + _3170;
                        if (_3175 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3175;
                        }
                    }
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                _2871 = frontier_phi_66_pred;
                _2881 = frontier_phi_66_pred_1;
                _2879 = frontier_phi_66_pred_2;
                _2877 = frontier_phi_66_pred_3;
                _2875 = frontier_phi_66_pred_4;
                _2873 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2871;
                    _3024 = _2873;
                    _3025 = _2875;
                    _3026 = _2877;
                    _3027 = _2879;
                    _3028 = _2881;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
        }
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.z;
        uint _2887 = (_2885 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2887) & _2769) == 0u)
        {
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
            float _3017 = _3016 * _2723;
            float _3018 = _3016 * _2724;
            float _3019 = _3016 * _2725;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2887 < ((_2885 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3151 = _2870;
                float _3152 = _2872;
                float _3153 = _2874;
                float _3154 = _2876;
                float _3155 = _2878;
                float _3156 = _2880;
                uint _3157 = _2887;
                uint _3166;
                bool _3167;
                for (;;)
                {
                    _3166 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                    _3167 = _3166 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3167)
                    {
                        frontier_phi_77_pred = _3156;
                        frontier_phi_77_pred_1 = _3155;
                        frontier_phi_77_pred_2 = _3154;
                        frontier_phi_77_pred_3 = _3153;
                        frontier_phi_77_pred_4 = _3152;
                        frontier_phi_77_pred_5 = _3151;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        uint _3379 = _3166;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3157 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2725, _3497.z, fma(_2724, _3497.y, _3497.x * _2723)) + _3497.w;
                            _3510 = !((fma(_2725, _3478.z, fma(_2724, _3478.y, _3478.x * _2723)) + _3478.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _2723;
                                float _3538 = _3405.y - _2724;
                                float _3539 = _3405.z - _2725;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4688 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_977, _980, _983))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2725, _3448.z, fma(_2724, _3448.y, _3448.x * _2723)) + _3448.w) / _3509;
                                float _3569 = (fma(_2725, _3463.z, fma(_2724, _3463.y, _3463.x * _2723)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4704 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _1037;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3017;
                                float _3599 = _3545 - _3018;
                                float _3600 = _3546 - _3019;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4715 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3612 = dot(vec3(_977, _980, _983), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4726 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_977, _980, _983), vec3(_3544, _3545, _3546))) + _3621;
                                float _4737 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4748 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3575 * _3421.y;
                                frontier_phi_83_pred_1 = _3575 * _3421.x;
                                frontier_phi_83_pred_2 = _3649 * _3433.z;
                                frontier_phi_83_pred_3 = _3649 * _3433.y;
                                frontier_phi_83_pred_4 = _3649 * _3433.x;
                                frontier_phi_83_pred_5 = _3575 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3657 = frontier_phi_83_pred;
                            _3656 = frontier_phi_83_pred_1;
                            _3655 = frontier_phi_83_pred_2;
                            _3654 = frontier_phi_83_pred_3;
                            _3653 = frontier_phi_83_pred_4;
                            _3658 = frontier_phi_83_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3365;
                        frontier_phi_77_pred_1 = _3364;
                        frontier_phi_77_pred_2 = _3363;
                        frontier_phi_77_pred_3 = _3362;
                        frontier_phi_77_pred_4 = _3361;
                        frontier_phi_77_pred_5 = _3360;
                    }
                    _3002 = frontier_phi_77_pred;
                    _3000 = frontier_phi_77_pred_1;
                    _2998 = frontier_phi_77_pred_2;
                    _2996 = frontier_phi_77_pred_3;
                    _2994 = frontier_phi_77_pred_4;
                    _2992 = frontier_phi_77_pred_5;
                    uint _3158 = _3157 + 1u;
                    if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3151 = _2992;
                        _3152 = _2994;
                        _3153 = _2996;
                        _3154 = _2998;
                        _3155 = _3000;
                        _3156 = _3002;
                        _3157 = _3158;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2996;
                frontier_phi_58_59_ladder_1 = _3002;
                frontier_phi_58_59_ladder_2 = _3000;
                frontier_phi_58_59_ladder_3 = _2998;
                frontier_phi_58_59_ladder_4 = _2994;
                frontier_phi_58_59_ladder_5 = _2992;
            }
            else
            {
                frontier_phi_58_59_ladder = _2874;
                frontier_phi_58_59_ladder_1 = _2880;
                frontier_phi_58_59_ladder_2 = _2878;
                frontier_phi_58_59_ladder_3 = _2876;
                frontier_phi_58_59_ladder_4 = _2872;
                frontier_phi_58_59_ladder_5 = _2870;
            }
            _2991 = frontier_phi_58_59_ladder_5;
            _2993 = frontier_phi_58_59_ladder_4;
            _2995 = frontier_phi_58_59_ladder;
            _2997 = frontier_phi_58_59_ladder_3;
            _2999 = frontier_phi_58_59_ladder_2;
            _3001 = frontier_phi_58_59_ladder_1;
        }
        float _3006 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        _2782 = (_3006 * _2997) + _2234;
        _2784 = (_3006 * _2999) + _2236;
        _2786 = (_3006 * _3001) + _2238;
        _2788 = ((_2991 * 0.039999999105930328369140625) * _3006) + _2567;
        _2790 = ((_2993 * 0.039999999105930328369140625) * _3006) + _2569;
        _2792 = ((_2995 * 0.039999999105930328369140625) * _3006) + _2571;
    }
    else
    {
        _2782 = _2234;
        _2784 = _2236;
        _2786 = _2238;
        _2788 = _2567;
        _2790 = _2569;
        _2792 = _2571;
    }
    float _4764 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4775 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4786 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2809 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2782 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1021))) + ((_2788 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2810 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2784 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1021))) + ((_2790 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2786 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1021))) + ((_2792 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    uint _2812 = _252 + 6u;
    float _2820 = _958 / cbSceneParam._m0[86u].x;
    float _2821 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2835 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2837 = _2835.x;
    float _2838 = _2835.y;
    float _2839 = _2835.z;
    float _2840 = _2835.w;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _2895 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _2896 = _2895 / _880;
        float _2907 = _2896 * _931;
        float _2908 = _932 * _2896;
        float _2909 = (-0.0) - _2908;
        float _2911 = _2896 * _933;
        float _2913 = (cbSceneParam._m0[77u].w * _2909) / _2895;
        float _2914 = _2913 + cbSceneParam._m0[79u].w;
        float _2915 = cbSceneParam._m0[79u].w - _2908;
        float _2921 = sqrt(((_2907 * _2907) + (_2908 * _2908)) + (_2911 * _2911));
        float _2924 = (1.0 - (cbSceneParam._m0[77u].w / _2895)) * _2921;
        float _2929 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2931 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2909 - _2913) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2914 > 0.0) ? exp2(_2929 * _2914) : (2.0 - exp2(_2931 * _2914))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2924;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : max(_2914, _2915));
            float _3054 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : min(_2914, _2915));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3108 = ((abs(_2921 / _2909) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2929 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2929 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2931 * _3063) - exp2(_2931 * _3064)) * _3052))) + (_2924 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2840);
        _2933 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2837;
        _2935 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2838;
        _2937 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2839;
        _2939 = _3119 * _2840;
    }
    else
    {
        _2933 = _2837;
        _2935 = _2838;
        _2937 = _2839;
        _2939 = _2840;
    }
    bool _3146;
    vec4 _2949;
    vec4 _2971;
    float _2973;
    float _2977;
    float _2978;
    float _2979;
    float _2980;
    bool _2990;
    for (;;)
    {
        _2949 = cbMatDynParam._m0[0u];
        float _2951 = roundEven(_2949.y);
        bool _2952 = _2951 == 3.0;
        float _2953 = log2(_2939);
        float _2960 = exp2(_2953 * cbSceneParam._m0[78u].x) * _2809;
        float _2961 = exp2(_2953 * cbSceneParam._m0[78u].y) * _2810;
        float _2962 = exp2(_2953 * cbSceneParam._m0[78u].z) * _2811;
        float _2969 = _947 + (-0.5);
        _2971 = cbMtdParam._m0[1u];
        _2973 = _2971.y * _2969;
        float _2976 = (_2951 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2977 = _2976 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2933)));
        _2978 = _2976 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2935)));
        _2979 = _2976 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2937)));
        _2980 = _2969 * 0.999000012874603271484375;
        _2990 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2990)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2980) < 0.5)
            {
                _3146 = true;
                break;
            }
        }
        uint _3087 = _996 + uint(_2949.w);
        if ((cbInstanceData._m0[_3087].w < 1.0) && ((cbInstanceData._m0[_3087].w + _2980) < 0.5))
        {
            _3146 = true;
            break;
        }
        if ((_2973 + 1.0) < _2971.x)
        {
            _3146 = true;
            break;
        }
        _3146 = false;
        break;
    }
    float _3351;
    if (_3146)
    {
        discard_state = true;
        _3351 = 0.0;
    }
    else
    {
        _3351 = cbInstanceData._m0[_2812].w;
    }
    SV_Target.x = _2977;
    SV_Target.y = _2978;
    SV_Target.z = _2979;
    SV_Target.w = _3351;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2812].w;
    discard_exit();
}


