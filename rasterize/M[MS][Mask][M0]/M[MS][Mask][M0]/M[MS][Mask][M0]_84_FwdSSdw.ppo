#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1368;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3695 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3706 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3717 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[24u].z) + _450) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3728 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[24u].z) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3739 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _551 = (_330.x * cbMtdParam._m0[9u].x) * ((_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475);
    float _552 = (_330.y * cbMtdParam._m0[9u].y) * ((_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476);
    float _553 = (_330.z * cbMtdParam._m0[9u].z) * ((_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477);
    float _557 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _551;
    float _560 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _552;
    float _563 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _553;
    float _571 = (((_551 - _557) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _557) * 4.55000019073486328125;
    float _573 = (((_552 - _560) * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) + _560) * 4.55000019073486328125;
    float _575 = (((_553 - _563) * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) + _563) * 4.55000019073486328125;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _655 = _653.x;
    float _656 = _653.y;
    float _657 = _653.z;
    float _664 = ((_636.x - _655) * _468) + _655;
    float _665 = ((_636.y - _656) * _468) + _656;
    float _666 = ((_636.z - _657) * _468) + _657;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _691 = ((_678.z - _666) * _541) + _666;
    float _694 = ((((_678.x - _664) * _541) + _664) * 2.0) + (-1.0);
    float _695 = ((((_678.y - _665) * _541) + _665) * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _3750 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _701 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _742 = _740.x;
    float _743 = 1.0 - _742;
    float _756 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_742 - _743) * cbMtdParam._m0[24u].w) + _743) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3761 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _764 = (_757 * ((_594.x * cbMtdParam._m0[18u].x) - _571)) + _571;
    float _765 = (_757 * ((_594.y * cbMtdParam._m0[18u].y) - _573)) + _573;
    float _766 = (_757 * ((_594.z * cbMtdParam._m0[18u].z) - _575)) + _575;
    float _771 = (((_613.z - _691) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _691;
    float _775 = ((_715.z - _771) * cbMtdParam._m0[19u].w) + _771;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _795 = (_788.x * 2.0) + (-1.0);
    float _796 = (_788.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _3772 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _805 = (_757 * (_788.z - _775)) + _775;
    float _814 = (_694 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_613.x * 2.0) + (-1.0)))) + (((_715.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _815 = (_695 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_613.y * 2.0) + (-1.0)))) + (((_715.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = (((_795 - _814) + (cbMtdParam._m0[21u].x * _814)) * _757) + _814;
    float _828 = (((_796 - _815) + (cbMtdParam._m0[21u].x * _815)) * _757) + _815;
    float _829 = (_757 * (sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _701)) + _701;
    float _833 = cbMtdParam._m0[22u].x + _715.w;
    float _836 = fma(_829, _240 * NORMAL.x, fma(_828, _247 * TANGENT.x, (_233 * _225) * _827));
    float _839 = fma(_829, _240 * NORMAL.y, fma(_828, _247 * TANGENT.y, (_233 * _226) * _827));
    float _842 = fma(_829, _240 * NORMAL.z, fma(_828, _247 * TANGENT.z, (_233 * _227) * _827));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _3783 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _850 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _3805 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3816 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3827 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _956 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _959 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _973 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _979 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_973].x;
    float _980 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_973].y;
    float _981 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_973].z;
    float _3838 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _997 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_847, _848, _849), vec3(_926, _927, _928));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _847) - _926;
    float _1006 = (_1001 * _848) - _927;
    float _1007 = (_1001 * _849) - _928;
    float _1011 = abs(dot(vec3(_926, _927, _928), vec3(_847, _848, _849)));
    float _3871 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_850);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1096 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1100 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1125 = _1058 + _847;
        float _1126 = _1062 + _848;
        float _1127 = _1066 + _849;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_847, _848, _849), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3919 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_847, _848, _849), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3952 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_847, _848, _849), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3985 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1410 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1414 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1437 = _1058 + _847;
        float _1438 = _1062 + _848;
        float _1439 = _1066 + _849;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_847, _848, _849), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4048 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_847, _848, _849), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4081 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_847, _848, _849), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4114 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1368;
        _1676 = _1368;
        _1677 = _1368;
        _1678 = _1368;
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1381)) + _1381;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1382)) + _1382;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _1005 * 0.5;
    float _1744 = _1006 * 0.5;
    float _1745 = _1007 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _850);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1873 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1876 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1904 = frontier_phi_14_12_ladder;
        }
        float _2125;
        if (_1873 > 0.0)
        {
            _2125 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2125 = frontier_phi_23_19_ladder;
        }
        float _2371;
        if (_1876 > 0.0)
        {
            _2371 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2371 = frontier_phi_35_30_ladder;
        }
        float _2373 = isnan(_2125) ? _1904 : (isnan(_1904) ? _2125 : min(_1904, _2125));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1870) + _1859;
        float _2379 = (_2374 * _1873) + _1863;
        float _2380 = (_2374 * _1876) + _1867;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2381;
        float _2385 = _2381 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 > _2385) || ((_2379 < _2383) || ((_2378 < _2383) || (_2378 > _2385))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2380, cbModelParam._m0[9u].z, fma(_2379, cbModelParam._m0[9u].y, _2378 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2380, cbModelParam._m0[10u].z, fma(_2379, cbModelParam._m0[10u].y, _2378 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2380, cbModelParam._m0[11u].z, fma(_2379, cbModelParam._m0[11u].y, _2378 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_13_35_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_13_35_ladder_2;
        _1894 = frontier_phi_13_35_ladder_1;
        _1896 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _850);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1968 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1971 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2130;
        if (_1965 > 0.0)
        {
            _2130 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2130 = frontier_phi_25_21_ladder;
        }
        float _2398;
        if (_1968 > 0.0)
        {
            _2398 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2398 = frontier_phi_37_32_ladder;
        }
        float _2603;
        if (_1971 > 0.0)
        {
            _2603 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2603 = frontier_phi_46_43_ladder;
        }
        float _2605 = isnan(_2398) ? _2130 : (isnan(_2130) ? _2398 : min(_2130, _2398));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _1965) + _1954;
        float _2611 = (_2606 * _1968) + _1958;
        float _2612 = (_2606 * _1971) + _1962;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2613;
        float _2616 = _2613 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2612 > _2616) || ((_2612 < _2614) || ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 < _2614) || (_2610 > _2616))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2612, cbModelParam._m0[17u].z, fma(_2611, cbModelParam._m0[17u].y, _2610 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2612, cbModelParam._m0[18u].z, fma(_2611, cbModelParam._m0[18u].y, _2610 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2612, cbModelParam._m0[19u].z, fma(_2611, cbModelParam._m0[19u].y, _2610 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_22_46_ladder = _2811.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2811.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2811.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_22_46_ladder_2;
        _1992 = frontier_phi_22_46_ladder_1;
        _1994 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1901);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2006 = ((((1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1026 * _1013)) * _997;
    float _2007 = _2006 * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2008 = _2006 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2009 = _2006 * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    vec4 _2026 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_934, _935));
    float _2028 = _2026.w;
    float _2040 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2028);
    float _2041 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2028);
    float _2042 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2028);
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _997 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2084 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2088 = _2048 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_847, _848, _849));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_847, _848, _849));
    float _4250 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4261 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2065].x * _2071) * _2109) + (((cbLight._m0[_2075].x * _2040) * _2084) * _2107);
    float _2117 = ((_2071 * cbLight._m0[_2065].y) * _2109) + (((cbLight._m0[_2075].y * _2041) * _2084) * _2107);
    float _2118 = ((_2071 * cbLight._m0[_2065].z) * _2109) + (((cbLight._m0[_2075].z * _2042) * _2084) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2048 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4272 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2162 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2342 = _2048 + 7u;
        float _2358 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2359 = _2358 * _2358;
        float _4288 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2360 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2361 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2180 = (((cbLight._m0[_2342].x * 0.3183098733425140380859375) * _2360) * _2361) + _2135;
        _2182 = (((cbLight._m0[_2342].y * 0.3183098733425140380859375) * _2360) * _2361) + _2137;
        _2184 = (((cbLight._m0[_2342].z * 0.3183098733425140380859375) * _2360) * _2361) + _2139;
    }
    uint _2187 = _2048 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _850) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2048].x + _926;
    float _2203 = cbLight._m0[_2048].y + _927;
    float _2204 = cbLight._m0[_2048].z + _928;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2048].xyz));
    float _4304 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2216 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2217 = dot(vec3(_847, _848, _849), vec3(_2209, _2210, _2211));
    float _4326 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2209, _2210, _2211));
    float _4337 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2201;
    float _2252 = (0.5 / (((_2216 * ((_2215 * _2241) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2241) + _2201) * _2215))) * _2215;
    float _4348 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2268 = _2048 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _850) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2088].x + _926;
    float _2282 = cbLight._m0[_2088].y + _927;
    float _2283 = cbLight._m0[_2088].z + _928;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2088].xyz));
    float _4359 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2295 = dot(vec3(_847, _848, _849), vec3(_2288, _2289, _2290));
    float _4370 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2288, _2289, _2290));
    float _4381 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2317 = 1.0 - _2280;
    float _2327 = (0.5 / (((_2216 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2317) + _2280) * _2294))) * _2294;
    float _4392 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2339 = (((_2316 * cbLight._m0[_2268].x) * _2329) * _2071) + ((((cbLight._m0[_2187].x * _2040) * _2240) * _2254) * _2084);
    float _2340 = (((_2316 * cbLight._m0[_2268].y) * _2329) * _2071) + ((((cbLight._m0[_2187].y * _2041) * _2240) * _2254) * _2084);
    float _2341 = (((_2316 * cbLight._m0[_2268].z) * _2329) * _2071) + ((((cbLight._m0[_2187].z * _2042) * _2240) * _2254) * _2084);
    float _2403;
    float _2405;
    float _2407;
    if (_2124)
    {
        _2403 = _2339;
        _2405 = _2340;
        _2407 = _2341;
    }
    else
    {
        uint _2409 = _2048 + 2u;
        uint _2413 = _2048 + 10u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _850) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _926;
        float _2430 = cbLight._m0[_2409].y + _927;
        float _2431 = cbLight._m0[_2409].z + _928;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2409].xyz));
        float _4403 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2443 = dot(vec3(_847, _848, _849), vec3(_2436, _2437, _2438));
        float _4414 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4425 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2216 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2465) + _2428) * _2442))) * _2442;
        float _4436 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2403 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2339;
        _2405 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2340;
        _2407 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2341;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2142)
    {
        _2513 = _2403;
        _2515 = _2405;
        _2517 = _2407;
    }
    else
    {
        uint _2524 = _2048 + 3u;
        uint _2528 = _2048 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _850) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _926;
        float _2545 = cbLight._m0[_2524].y + _927;
        float _2546 = cbLight._m0[_2524].z + _928;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2524].xyz));
        float _4452 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2558 = dot(vec3(_847, _848, _849), vec3(_2551, _2552, _2553));
        float _4463 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4474 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2580 = 1.0 - _2543;
        float _2590 = (0.5 / (((_2216 * ((_2557 * _2580) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2580) + _2543) * _2557))) * _2557;
        float _4485 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2513 = (((_2579 * cbLight._m0[_2528].x) * _2592) * _2593) + _2403;
        _2515 = (((_2579 * cbLight._m0[_2528].y) * _2592) * _2593) + _2405;
        _2517 = (((_2579 * cbLight._m0[_2528].z) * _2592) * _2593) + _2407;
    }
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2046.y == 0u)
    {
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2668;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2668;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2668;
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2684)));
        float _2705 = (log2(_2671 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2977)
                {
                    frontier_phi_61_pred = _2961;
                    frontier_phi_61_pred_1 = _2966;
                    frontier_phi_61_pred_2 = _2965;
                    frontier_phi_61_pred_3 = _2964;
                    frontier_phi_61_pred_4 = _2963;
                    frontier_phi_61_pred_5 = _2962;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2976;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2967 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _2669;
                        float _3152 = _3111.y - _2670;
                        float _3153 = _3111.z - _2671;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_953, _956, _959), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4511 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _2669;
                        float _3187 = (-0.0) - _2670;
                        float _3188 = (-0.0) - _2671;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3203 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _1013;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3193 + _3158;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_953, _956, _959), vec3(_3193, _3194, _3195));
                        float _4527 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3228 = dot(vec3(_953, _956, _959), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4538 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3171 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3161) + _3237;
                        float _4549 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4560 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3235 * _3235) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3020 = (_3182 * _3130.x) + _3088;
                        _3021 = (_3182 * _3130.y) + _3089;
                        _3022 = (_3182 * _3130.z) + _3090;
                        _3017 = (_3263 * _3147.x) + _3085;
                        _3018 = (_3263 * _3147.y) + _3086;
                        _3019 = (_3263 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_61_pred = _3017;
                    frontier_phi_61_pred_1 = _3022;
                    frontier_phi_61_pred_2 = _3021;
                    frontier_phi_61_pred_3 = _3020;
                    frontier_phi_61_pred_4 = _3019;
                    frontier_phi_61_pred_5 = _3018;
                }
                _2817 = frontier_phi_61_pred;
                _2827 = frontier_phi_61_pred_1;
                _2825 = frontier_phi_61_pred_2;
                _2823 = frontier_phi_61_pred_3;
                _2821 = frontier_phi_61_pred_4;
                _2819 = frontier_phi_61_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2817;
                    _2962 = _2819;
                    _2963 = _2821;
                    _2964 = _2823;
                    _2965 = _2825;
                    _2966 = _2827;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2833) & _2715) == 0u)
        {
            _2929 = _2816;
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
            float _2955 = _2954 * _2669;
            float _2956 = _2954 * _2670;
            float _2957 = _2954 * _2671;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3068 = _2816;
                float _3069 = _2818;
                float _3070 = _2820;
                float _3071 = _2822;
                float _3072 = _2824;
                float _3073 = _2826;
                uint _3074 = _2833;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3084)
                    {
                        frontier_phi_67_pred = _3071;
                        frontier_phi_67_pred_1 = _3072;
                        frontier_phi_67_pred_2 = _3073;
                        frontier_phi_67_pred_3 = _3070;
                        frontier_phi_67_pred_4 = _3069;
                        frontier_phi_67_pred_5 = _3068;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        float _3284 = _3071;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        uint _3287 = _3083;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3356;
                        vec4 _3371;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3298 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3298 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3298 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3298 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3298 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_2671, _3405.z, fma(_2670, _3405.y, _3405.x * _2669)) + _3405.w;
                            _3418 = !((fma(_2671, _3386.z, fma(_2670, _3386.y, _3386.x * _2669)) + _3386.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3313.x - _2669;
                                float _3446 = _3313.y - _2670;
                                float _3447 = _3313.z - _2671;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3314 * _3314));
                                float _4571 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3463 = sqrt(_3448) * _3329.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_953, _956, _959))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_2671, _3356.z, fma(_2670, _3356.y, _3356.x * _2669)) + _3356.w) / _3417;
                                float _3477 = (fma(_2671, _3371.z, fma(_2670, _3371.y, _3371.x * _2669)) + _3371.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4587 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _1013;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2955;
                                float _3507 = _3453 - _2956;
                                float _3508 = _3454 - _2957;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_953, _956, _959), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4598 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3520 = dot(vec3(_953, _956, _959), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4609 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_953, _956, _959), vec3(_3452, _3453, _3454))) + _3529;
                                float _4620 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4631 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3557 * _3341.x;
                                frontier_phi_73_pred_1 = _3557 * _3341.y;
                                frontier_phi_73_pred_2 = _3483 * _3329.z;
                                frontier_phi_73_pred_3 = _3483 * _3329.y;
                                frontier_phi_73_pred_4 = _3483 * _3329.x;
                                frontier_phi_73_pred_5 = _3557 * _3341.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_73_pred;
                            _3562 = frontier_phi_73_pred_1;
                            _3566 = frontier_phi_73_pred_2;
                            _3565 = frontier_phi_73_pred_3;
                            _3564 = frontier_phi_73_pred_4;
                            _3563 = frontier_phi_73_pred_5;
                            _3271 = _3564 + _3284;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3271;
                        frontier_phi_67_pred_1 = _3272;
                        frontier_phi_67_pred_2 = _3273;
                        frontier_phi_67_pred_3 = _3270;
                        frontier_phi_67_pred_4 = _3269;
                        frontier_phi_67_pred_5 = _3268;
                    }
                    _2936 = frontier_phi_67_pred;
                    _2938 = frontier_phi_67_pred_1;
                    _2940 = frontier_phi_67_pred_2;
                    _2934 = frontier_phi_67_pred_3;
                    _2932 = frontier_phi_67_pred_4;
                    _2930 = frontier_phi_67_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2930;
                        _3069 = _2932;
                        _3070 = _2934;
                        _3071 = _2936;
                        _3072 = _2938;
                        _3073 = _2940;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2938;
                frontier_phi_55_56_ladder_1 = _2940;
                frontier_phi_55_56_ladder_2 = _2936;
                frontier_phi_55_56_ladder_3 = _2934;
                frontier_phi_55_56_ladder_4 = _2932;
                frontier_phi_55_56_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_55_56_ladder = _2824;
                frontier_phi_55_56_ladder_1 = _2826;
                frontier_phi_55_56_ladder_2 = _2822;
                frontier_phi_55_56_ladder_3 = _2820;
                frontier_phi_55_56_ladder_4 = _2818;
                frontier_phi_55_56_ladder_5 = _2816;
            }
            _2929 = frontier_phi_55_56_ladder_5;
            _2931 = frontier_phi_55_56_ladder_4;
            _2933 = frontier_phi_55_56_ladder_3;
            _2935 = frontier_phi_55_56_ladder_2;
            _2937 = frontier_phi_55_56_ladder;
            _2939 = frontier_phi_55_56_ladder_1;
        }
        float _2944 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2728 = (_2944 * _2935) + _2180;
        _2730 = (_2944 * _2937) + _2182;
        _2732 = (_2944 * _2939) + _2184;
        _2734 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2513;
        _2736 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2515;
        _2738 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2517;
    }
    else
    {
        _2728 = _2180;
        _2730 = _2182;
        _2732 = _2184;
        _2734 = _2513;
        _2736 = _2515;
        _2738 = _2517;
    }
    float _4647 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4658 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4669 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _2758 = _274 + 6u;
    float _2766 = _934 / cbSceneParam._m0[86u].x;
    float _2767 = _935 / cbSceneParam._m0[86u].y;
    vec4 _2781 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2783 = _2781.x;
    float _2784 = _2781.y;
    float _2785 = _2781.z;
    float _2786 = _2781.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _2842 = _2841 / _868;
        float _2853 = _2842 * _919;
        float _2854 = _920 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2857 = _2842 * _921;
        float _2859 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2854;
        float _2867 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2855 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _2992 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3030 = ((abs(_2867 / _2855) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2877 * _3001) - exp2(_2877 * _3002)) * _2990))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2786);
        _2879 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2783;
        _2881 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2784;
        _2883 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2785;
        _2885 = _3041 * _2786;
    }
    else
    {
        _2879 = _2783;
        _2881 = _2784;
        _2883 = _2785;
        _2885 = _2786;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2728 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _997))) + ((_2734 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2730 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _997))) + ((_2736 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2732 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _997))) + ((_2738 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1801)) * cbPerFrame._m0[3u].x));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2758].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2758].w;
}


