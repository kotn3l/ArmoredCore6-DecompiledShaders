#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1383;
float _4025;
float _4026;
float _4027;
float _4028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4037 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[24u].z) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _558 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _345.z) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4059 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _566 = (_559 * ((_517.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _567 = (_559 * ((_517.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _568 = (_559 * ((_517.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _600 = _598.x;
    float _601 = _598.y;
    float _602 = _598.z;
    float _609 = ((_581.x - _600) * _417) + _600;
    float _610 = ((_581.y - _601) * _417) + _601;
    float _611 = ((_581.z - _602) * _417) + _602;
    vec4 _623 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _634 = ((_623.x - _609) * _490) + _609;
    float _635 = ((_623.y - _610) * _490) + _610;
    float _636 = ((_623.z - _611) * _490) + _611;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _661 = ((_648.z - _636) * _559) + _636;
    float _664 = ((((_648.x - _634) * _559) + _634) * 2.0) + (-1.0);
    float _666 = ((((_648.y - _635) * _559) + _635) * 2.0) + (-1.0);
    float _667 = dot(vec2(_664, _666), vec2(_664, _666));
    float _4070 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _698 = (((_686.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    float _699 = (((_686.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _713 = _711.x;
    float _714 = 1.0 - _713;
    float _742 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_713 - _714) * cbMtdParam._m0[24u].y) + _714) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4081 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _743 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _751 = ((((cbMtdParam._m0[10u].x - _566) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _743) + _566;
    float _752 = ((((cbMtdParam._m0[10u].y - _567) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _743) + _567;
    float _753 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _568)) * _743) + _568;
    float _757 = (cbMtdParam._m0[19u].w * (_686.z - _661)) + _661;
    float _761 = ((cbMtdParam._m0[23u].y - _757) * _743) + _757;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _786 = (_780.x * 2.0) + (-1.0);
    float _787 = (_780.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4092 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _804 = (_743 * (((cbMtdParam._m0[22u].z * _698) - _698) + _786)) + _698;
    float _805 = (_743 * (((cbMtdParam._m0[22u].z * _699) - _699) + _787)) + _699;
    float _806 = (_743 * (sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _672)) + _672;
    float _808 = cbMtdParam._m0[22u].x + _686.w;
    float _811 = fma(_806, _246 * NORMAL.x, fma(_805, _253 * TANGENT.x, (_239 * _231) * _804));
    float _814 = fma(_806, _246 * NORMAL.y, fma(_805, _253 * TANGENT.y, (_239 * _232) * _804));
    float _817 = fma(_806, _246 * NORMAL.z, fma(_805, _253 * TANGENT.z, (_239 * _233) * _804));
    float _821 = inversesqrt(dot(vec3(_811, _814, _817), vec3(_811, _814, _817)));
    float _822 = _821 * _811;
    float _823 = _821 * _814;
    float _824 = _821 * _817;
    float _4103 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _825 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4125 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4136 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4147 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1064 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1070 = (cbMatDynParam._m0[5u].x * _1064) + cbMatDynParam._m0[5u].y;
        float _4158 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1075 = (cbMatDynParam._m0[5u].z * _1064) + cbMatDynParam._m0[5u].w;
        float _4169 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) - _1071)) + _1071) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_824, cbSceneParam._m0[5u].z, fma(_823, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _822));
    float _943 = fma(_824, cbSceneParam._m0[6u].z, fma(_823, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _822));
    float _946 = fma(_824, cbSceneParam._m0[7u].z, fma(_823, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _822));
    uint _959 = _259 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_960].z;
    float _4180 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _984 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_822, _823, _824), vec3(_901, _902, _903));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _822) - _901;
    float _993 = (_988 * _823) - _902;
    float _994 = (_988 * _824) - _903;
    float _998 = abs(dot(vec3(_901, _902, _903), vec3(_822, _823, _824)));
    float _4213 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_825);
    float _1013 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1111 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1115 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1140 = _1045 + _822;
        float _1141 = _1049 + _823;
        float _1142 = _1053 + _824;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_822, _823, _824), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4261 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_822, _823, _824), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4294 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_822, _823, _824), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4327 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1427 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1431 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1454 = _1045 + _822;
        float _1455 = _1049 + _823;
        float _1456 = _1053 + _824;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_822, _823, _824), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4390 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_822, _823, _824), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4423 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_822, _823, _824), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4456 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1383;
        _1693 = _1383;
        _1694 = _1383;
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = _1383;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1395)) + _1395;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1396)) + _1396;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1397)) + _1397;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _992 * 0.5;
    float _1761 = _993 * 0.5;
    float _1762 = _994 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _825);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1891 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1894 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1922 = frontier_phi_17_15_ladder;
        }
        float _2093;
        if (_1891 > 0.0)
        {
            _2093 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2093 = frontier_phi_26_22_ladder;
        }
        float _2388;
        if (_1894 > 0.0)
        {
            _2388 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2388 = frontier_phi_38_33_ladder;
        }
        float _2390 = isnan(_2093) ? _1922 : (isnan(_1922) ? _2093 : min(_1922, _2093));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1888) + _1877;
        float _2396 = (_2391 * _1891) + _1881;
        float _2397 = (_2391 * _1894) + _1885;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_16_38_ladder_2;
        _1912 = frontier_phi_16_38_ladder_1;
        _1914 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1829);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _825);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1988 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1991 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2098;
        if (_1985 > 0.0)
        {
            _2098 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2098 = frontier_phi_28_24_ladder;
        }
        float _2415;
        if (_1988 > 0.0)
        {
            _2415 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2415 = frontier_phi_40_35_ladder;
        }
        float _2742;
        if (_1991 > 0.0)
        {
            _2742 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2742 = frontier_phi_50_47_ladder;
        }
        float _2744 = isnan(_2415) ? _2098 : (isnan(_2098) ? _2415 : min(_2098, _2415));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _1985) + _1974;
        float _2750 = (_2745 * _1988) + _1978;
        float _2751 = (_2745 * _1991) + _1982;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2752;
        float _2755 = _2752 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2751 > _2755) || ((_2751 < _2753) || ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 < _2753) || (_2749 > _2755))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2751, cbModelParam._m0[17u].z, fma(_2750, cbModelParam._m0[17u].y, _2749 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2751, cbModelParam._m0[18u].z, fma(_2750, cbModelParam._m0[18u].y, _2749 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2751, cbModelParam._m0[19u].z, fma(_2750, cbModelParam._m0[19u].y, _2749 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_25_50_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_25_50_ladder_2;
        _2012 = frontier_phi_25_50_ladder_1;
        _2014 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1919);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2026 = ((((1.0 - _1013) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1013 * _1000)) * _984;
    float _2027 = _2026 * ((cbModelParam._m0[1u].w * (_2010 - _1910)) + _1910);
    float _2028 = _2026 * ((cbModelParam._m0[1u].w * (_2012 - _1912)) + _1912);
    float _2029 = _2026 * ((cbModelParam._m0[1u].w * (_2014 - _1914)) + _1914);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2085 = _2072 / _2084;
    float _2086 = _2076 / _2084;
    float _2087 = _2080 / _2084;
    float _2234;
    float _2235;
    float _2236;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2114 = ((uint(_2087 > cbSceneParam._m0[59u].y) + uint(_2087 > cbSceneParam._m0[59u].x)) + uint(_2087 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2115 = _2114 + 43u;
        uint _2123 = _2114 + 44u;
        uint _2131 = _2114 + 45u;
        uint _2139 = _2114 + 46u;
        float _2150 = fma(_2084, cbSceneParam._m0[_2115].w, fma(_2080, cbSceneParam._m0[_2115].z, fma(_2076, cbSceneParam._m0[_2115].y, _2072 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2084, cbSceneParam._m0[_2123].w, fma(_2080, cbSceneParam._m0[_2123].z, fma(_2076, cbSceneParam._m0[_2123].y, _2072 * cbSceneParam._m0[_2123].x)));
        float _2162 = fma(_2084, cbSceneParam._m0[_2139].w, fma(_2080, cbSceneParam._m0[_2139].z, fma(_2076, cbSceneParam._m0[_2139].y, _2072 * cbSceneParam._m0[_2139].x)));
        float _2167 = cbSceneParam._m0[33u].z * _2162;
        float _2169 = cbSceneParam._m0[33u].w * _2162;
        float _2172 = fma(_2084, cbSceneParam._m0[_2131].w, fma(_2080, cbSceneParam._m0[_2131].z, fma(_2076, cbSceneParam._m0[_2131].y, _2072 * cbSceneParam._m0[_2131].x))) / _2162;
        float _2220 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
        float _4582 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2227 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2150) / _2162, (_2169 + _2154) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2150) / _2162, (_2154 - _2167) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2167) / _2162, (_2154 - _2169) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2169) / _2162, (_2167 + _2154) / _2162), _2172), 0.0)).x), vec4(0.25)));
        _2234 = 1.0 - (_2227 * cbSceneParam._m0[34u].x);
        _2235 = 1.0 - (_2227 * cbSceneParam._m0[34u].y);
        _2236 = 1.0 - (_2227 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2234 = 1.0;
        _2235 = 1.0;
        _2236 = 1.0;
    }
    float _2300;
    float _2302;
    float _2304;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2288 = fma(_2084, cbSceneParam._m0[63u].w, fma(_2080, cbSceneParam._m0[63u].z, fma(_2076, cbSceneParam._m0[63u].y, _2072 * cbSceneParam._m0[63u].x)));
        float _2289 = fma(_2084, cbSceneParam._m0[60u].w, fma(_2080, cbSceneParam._m0[60u].z, fma(_2076, cbSceneParam._m0[60u].y, _2072 * cbSceneParam._m0[60u].x))) / _2288;
        float _2290 = fma(_2084, cbSceneParam._m0[61u].w, fma(_2080, cbSceneParam._m0[61u].z, fma(_2076, cbSceneParam._m0[61u].y, _2072 * cbSceneParam._m0[61u].x))) / _2288;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2289 >= cbSceneParam._m0[64u].x) && (_2290 >= cbSceneParam._m0[64u].y)) && (_2289 <= cbSceneParam._m0[64u].z)) && (_2290 <= cbSceneParam._m0[64u].w))
        {
            float _2428 = fma(_2084, cbSceneParam._m0[62u].w, fma(_2080, cbSceneParam._m0[62u].z, fma(_2076, cbSceneParam._m0[62u].y, _2072 * cbSceneParam._m0[62u].x))) / _2288;
            float _2432 = isnan(cbSceneParam._m0[41u].w) ? _2428 : (isnan(_2428) ? cbSceneParam._m0[41u].w : max(_2428, cbSceneParam._m0[41u].w));
            float _2475 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
            float _4598 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
            float _2482 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2289, cbSceneParam._m0[33u].w + _2290), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2289, _2290 - cbSceneParam._m0[33u].z), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].z, _2290 - cbSceneParam._m0[33u].w), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2290), _2432), 0.0)).x), vec4(0.25)));
            float _2486 = 1.0 - (_2482 * cbSceneParam._m0[34u].x);
            float _2487 = 1.0 - (_2482 * cbSceneParam._m0[34u].y);
            float _2488 = 1.0 - (_2482 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_37_36_ladder_1 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_37_36_ladder_2 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
        }
        else
        {
            frontier_phi_37_36_ladder = _2236;
            frontier_phi_37_36_ladder_1 = _2235;
            frontier_phi_37_36_ladder_2 = _2234;
        }
        _2300 = frontier_phi_37_36_ladder_2;
        _2302 = frontier_phi_37_36_ladder_1;
        _2304 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2300 = _2234;
        _2302 = _2235;
        _2304 = _2236;
    }
    uvec4 _2309 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2311 = _2309.x * 14u;
    uint _2312 = _2311 + 13u;
    float _2319 = _984 + (-1.0);
    float _2324 = (cbLight._m0[_2312].x * _2319) + 1.0;
    float _2325 = (cbLight._m0[_2312].y * _2319) + 1.0;
    float _2326 = (cbLight._m0[_2312].z * _2319) + 1.0;
    float _2327 = (cbLight._m0[_2312].w * _2319) + 1.0;
    uint _2328 = _2311 + 5u;
    float _2334 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2338 = _2311 + 4u;
    float _2347 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2351 = _2311 | 1u;
    float _2362 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_822, _823, _824));
    float _2365 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_822, _823, _824));
    float _4634 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _4645 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 0.3183098733425140380859375;
    float _2372 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2379 = ((cbLight._m0[_2328].x * _2334) * _2372) + (((cbLight._m0[_2338].x * _2300) * _2347) * _2370);
    float _2380 = ((_2334 * cbLight._m0[_2328].y) * _2372) + (((cbLight._m0[_2338].y * _2302) * _2347) * _2370);
    float _2381 = ((_2334 * cbLight._m0[_2328].z) * _2372) + (((cbLight._m0[_2338].z * _2304) * _2347) * _2370);
    uvec4 _2385 = floatBitsToUint(cbLight._m0[_2311 + 12u]);
    bool _2387 = _2385.x == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2387)
    {
        _2489 = _2379;
        _2491 = _2380;
        _2493 = _2381;
    }
    else
    {
        uint _2497 = _2311 + 6u;
        float _2513 = (dot(vec3(cbLight._m0[_2311 + 2u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4656 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2516 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2489 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2379;
        _2491 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2380;
        _2493 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2381;
    }
    bool _2496 = _2385.y == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2496)
    {
        _2551 = _2489;
        _2553 = _2491;
        _2555 = _2493;
    }
    else
    {
        uint _2713 = _2311 + 7u;
        float _2729 = (dot(vec3(cbLight._m0[_2311 + 3u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2730 = _2729 * _2729;
        float _4672 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2731 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2732 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2551 = (((cbLight._m0[_2713].x * 0.3183098733425140380859375) * _2731) * _2732) + _2489;
        _2553 = (((cbLight._m0[_2713].y * 0.3183098733425140380859375) * _2731) * _2732) + _2491;
        _2555 = (((cbLight._m0[_2713].z * 0.3183098733425140380859375) * _2731) * _2732) + _2493;
    }
    uint _2558 = _2311 + 8u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _825) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2311].x + _901;
    float _2574 = cbLight._m0[_2311].y + _902;
    float _2575 = cbLight._m0[_2311].z + _903;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2311].xyz));
    float _4688 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _4699 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2587 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2588 = dot(vec3(_822, _823, _824), vec3(_2580, _2581, _2582));
    float _4710 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2580, _2581, _2582));
    float _4721 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2572 * _2572;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2611 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2612 = 1.0 - _2572;
    float _2623 = (0.5 / (((_2587 * ((_2586 * _2612) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2612) + _2572) * _2586))) * _2586;
    float _4732 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    uint _2639 = _2311 + 9u;
    float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _825) * 0.949999988079071044921875);
    float _2651 = _2650 * _2650;
    float _2652 = cbLight._m0[_2351].x + _901;
    float _2653 = cbLight._m0[_2351].y + _902;
    float _2654 = cbLight._m0[_2351].z + _903;
    float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
    float _2659 = _2658 * _2652;
    float _2660 = _2658 * _2653;
    float _2661 = _2658 * _2654;
    float _2662 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2351].xyz));
    float _4743 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2666 = dot(vec3(_822, _823, _824), vec3(_2659, _2660, _2661));
    float _4754 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2670 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2659, _2660, _2661));
    float _4765 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2674 = _2651 * _2651;
    float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
    float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2688 = 1.0 - _2651;
    float _2698 = (0.5 / (((_2587 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2688) + _2651) * _2665))) * _2665;
    float _4776 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2700 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
    float _2710 = (((_2687 * cbLight._m0[_2639].x) * _2700) * _2334) + ((((cbLight._m0[_2558].x * _2300) * _2611) * _2625) * _2347);
    float _2711 = (((_2687 * cbLight._m0[_2639].y) * _2700) * _2334) + ((((cbLight._m0[_2558].y * _2302) * _2611) * _2625) * _2347);
    float _2712 = (((_2687 * cbLight._m0[_2639].z) * _2700) * _2334) + ((((cbLight._m0[_2558].z * _2304) * _2611) * _2625) * _2347);
    float _2768;
    float _2770;
    float _2772;
    if (_2387)
    {
        _2768 = _2710;
        _2770 = _2711;
        _2772 = _2712;
    }
    else
    {
        uint _2774 = _2311 + 2u;
        uint _2778 = _2311 + 10u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _825) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _901;
        float _2795 = cbLight._m0[_2774].y + _902;
        float _2796 = cbLight._m0[_2774].z + _903;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2774].xyz));
        float _4787 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2808 = dot(vec3(_822, _823, _824), vec3(_2801, _2802, _2803));
        float _4798 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4809 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2829 = (exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2830 = 1.0 - _2793;
        float _2840 = (0.5 / (((_2587 * ((_2807 * _2830) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2830) + _2793) * _2807))) * _2807;
        float _4820 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2768 = (((_2829 * cbLight._m0[_2778].x) * _2842) * _2843) + _2710;
        _2770 = (((_2829 * cbLight._m0[_2778].y) * _2842) * _2843) + _2711;
        _2772 = (((_2829 * cbLight._m0[_2778].z) * _2842) * _2843) + _2712;
    }
    float _2874;
    float _2876;
    float _2878;
    if (_2496)
    {
        _2874 = _2768;
        _2876 = _2770;
        _2878 = _2772;
    }
    else
    {
        uint _2885 = _2311 + 3u;
        uint _2889 = _2311 + 11u;
        float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2885].w)) * _825) * 0.949999988079071044921875);
        float _2904 = _2903 * _2903;
        float _2905 = cbLight._m0[_2885].x + _901;
        float _2906 = cbLight._m0[_2885].y + _902;
        float _2907 = cbLight._m0[_2885].z + _903;
        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
        float _2912 = _2911 * _2905;
        float _2913 = _2911 * _2906;
        float _2914 = _2911 * _2907;
        float _2915 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2885].xyz));
        float _4836 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2919 = dot(vec3(_822, _823, _824), vec3(_2912, _2913, _2914));
        float _4847 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2923 = dot(vec3(cbLight._m0[_2885].xyz), vec3(_2912, _2913, _2914));
        float _4858 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2927 = _2904 * _2904;
        float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
        float _2940 = (exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2941 = 1.0 - _2904;
        float _2951 = (0.5 / (((_2587 * ((_2918 * _2941) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2941) + _2904) * _2918))) * _2918;
        float _4869 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2953 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
        float _2954 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2874 = (((_2940 * cbLight._m0[_2889].x) * _2953) * _2954) + _2768;
        _2876 = (((_2940 * cbLight._m0[_2889].y) * _2953) * _2954) + _2770;
        _2878 = (((_2940 * cbLight._m0[_2889].z) * _2953) * _2954) + _2772;
    }
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_2309.y == 0u)
    {
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _2976)));
        float _2997 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            uint _3246 = 0u;
            uint _3255;
            bool _3256;
            for (;;)
            {
                _3255 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                _3256 = _3255 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3256)
                {
                    frontier_phi_71_pred = _3245;
                    frontier_phi_71_pred_1 = _3244;
                    frontier_phi_71_pred_2 = _3243;
                    frontier_phi_71_pred_3 = _3242;
                    frontier_phi_71_pred_4 = _3241;
                    frontier_phi_71_pred_5 = _3240;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3255;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3246 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2085;
                        float _3452 = _3411.y - _2086;
                        float _3453 = _3411.z - _2087;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_940, _943, _946), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4895 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2085;
                        float _3487 = (-0.0) - _2086;
                        float _3488 = (-0.0) - _2087;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _1000;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_940, _943, _946), vec3(_3493, _3494, _3495));
                        float _4911 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3527 = dot(vec3(_940, _943, _946), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4922 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4933 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4944 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3315 = (_3482 * _3430.x) + _3388;
                        _3316 = (_3482 * _3430.y) + _3389;
                        _3317 = (_3482 * _3430.z) + _3390;
                        _3312 = (_3562 * _3447.x) + _3385;
                        _3313 = (_3562 * _3447.y) + _3386;
                        _3314 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_71_pred = _3317;
                    frontier_phi_71_pred_1 = _3316;
                    frontier_phi_71_pred_2 = _3315;
                    frontier_phi_71_pred_3 = _3314;
                    frontier_phi_71_pred_4 = _3313;
                    frontier_phi_71_pred_5 = _3312;
                }
                _3098 = frontier_phi_71_pred;
                _3096 = frontier_phi_71_pred_1;
                _3094 = frontier_phi_71_pred_2;
                _3092 = frontier_phi_71_pred_3;
                _3090 = frontier_phi_71_pred_4;
                _3088 = frontier_phi_71_pred_5;
                uint _3247 = _3246 + 1u;
                if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3240 = _3088;
                    _3241 = _3090;
                    _3242 = _3092;
                    _3243 = _3094;
                    _3244 = _3096;
                    _3245 = _3098;
                    _3246 = _3247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((4294967295u << _3104) & _3007) == 0u)
        {
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
        }
        else
        {
            float _3233 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _3234 = _3233 * _2085;
            float _3235 = _3233 * _2086;
            float _3236 = _3233 * _2087;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3368 = _3087;
                float _3369 = _3089;
                float _3370 = _3091;
                float _3371 = _3093;
                float _3372 = _3095;
                float _3373 = _3097;
                uint _3374 = _3104;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3384)
                    {
                        frontier_phi_82_pred = _3373;
                        frontier_phi_82_pred_1 = _3372;
                        frontier_phi_82_pred_2 = _3371;
                        frontier_phi_82_pred_3 = _3370;
                        frontier_phi_82_pred_4 = _3369;
                        frontier_phi_82_pred_5 = _3368;
                    }
                    else
                    {
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        uint _3595 = _3383;
                        uint _3596;
                        vec4 _3621;
                        float _3622;
                        vec4 _3637;
                        vec3 _3649;
                        vec4 _3664;
                        vec4 _3679;
                        float _3725;
                        bool _3726;
                        for (;;)
                        {
                            uint _3606 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3595));
                            _3596 = (_3595 + 4294967295u) & _3595;
                            uint _3608 = _3606 * 40u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3622 = _3621.w;
                            uint _3624 = (_3606 * 40u) + 4u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3606 * 40u) + 8u;
                            _3649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x));
                            uint _3651 = (_3606 * 40u) + 16u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3606 * 40u) + 20u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3606 * 40u) + 24u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3700 = (_3606 * 40u) + 28u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3725 = fma(_2087, _3713.z, fma(_2086, _3713.y, _3713.x * _2085)) + _3713.w;
                            _3726 = !((fma(_2087, _3694.z, fma(_2086, _3694.y, _3694.x * _2085)) + _3694.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3726)
                            {
                                float _3753 = _3621.x - _2085;
                                float _3754 = _3621.y - _2086;
                                float _3755 = _3621.z - _2087;
                                float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                                float _3759 = inversesqrt(_3756);
                                float _3760 = _3759 * _3753;
                                float _3761 = _3759 * _3754;
                                float _3762 = _3759 * _3755;
                                float _3766 = 1.0 - (_3756 / (_3622 * _3622));
                                float _4955 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3771 = sqrt(_3756) * _3637.w;
                                float _3773 = 1.39999997615814208984375 / (_3771 + 1.39999997615814208984375);
                                float _3774 = _3773 * _3773;
                                float _3777 = ((1.0 - _3774) * dot(vec3(_3760, _3761, _3762), vec3(_940, _943, _946))) + _3774;
                                float _3780 = _3771 * _3771;
                                float _3784 = (fma(_2087, _3664.z, fma(_2086, _3664.y, _3664.x * _2085)) + _3664.w) / _3725;
                                float _3785 = (fma(_2087, _3679.z, fma(_2086, _3679.y, _3679.x * _2085)) + _3679.w) / _3725;
                                float _3789 = 1.0 - dot(vec2(_3784, _3785), vec2(_3784, _3785));
                                float _4971 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3791 = _3790 * (((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3767) / ((_3780 * 0.699999988079071044921875) + 1.0));
                                float _3803 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                                float _3804 = 1.0 - _1000;
                                float _3811 = sqrt(1.0 - ((1.0 - (_3804 * _3804)) * (1.0 - (_3803 * _3803))));
                                float _3812 = _3811 * _3811;
                                float _3813 = _3812 * _3812;
                                float _3814 = _3760 - _3234;
                                float _3815 = _3761 - _3235;
                                float _3816 = _3762 - _3236;
                                float _3820 = inversesqrt(dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816)));
                                float _3824 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3234, (-0.0) - _3235, (-0.0) - _3236));
                                float _4982 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3828 = dot(vec3(_940, _943, _946), vec3(_3820 * _3814, _3820 * _3815, _3820 * _3816));
                                float _4993 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3835 = ((_3831 * _3831) * (_3813 + (-1.0))) + 1.0;
                                float _3836 = _3773 * _3812;
                                float _3837 = _3836 * _3836;
                                float _3843 = ((1.0 - _3837) * dot(vec3(_940, _943, _946), vec3(_3760, _3761, _3762))) + _3837;
                                float _5004 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3845 = 1.0 - _3812;
                                float _3855 = (0.5 / (((_3844 * ((_3827 * _3845) + _3812)) + 9.9999999392252902907785028219223e-09) + (((_3844 * _3845) + _3812) * _3827))) * _3844;
                                float _5015 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3865 = (_3790 * _3767) * (((_3813 * 3.1415927410125732421875) * (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) / ((_3835 * _3835) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3791 * _3637.z;
                                frontier_phi_88_pred_1 = _3791 * _3637.y;
                                frontier_phi_88_pred_2 = _3791 * _3637.x;
                                frontier_phi_88_pred_3 = _3865 * _3649.z;
                                frontier_phi_88_pred_4 = _3865 * _3649.y;
                                frontier_phi_88_pred_5 = _3865 * _3649.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3874 = frontier_phi_88_pred;
                            _3873 = frontier_phi_88_pred_1;
                            _3872 = frontier_phi_88_pred_2;
                            _3871 = frontier_phi_88_pred_3;
                            _3870 = frontier_phi_88_pred_4;
                            _3869 = frontier_phi_88_pred_5;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            if (_3596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3596;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3581;
                        frontier_phi_82_pred_1 = _3580;
                        frontier_phi_82_pred_2 = _3579;
                        frontier_phi_82_pred_3 = _3578;
                        frontier_phi_82_pred_4 = _3577;
                        frontier_phi_82_pred_5 = _3576;
                    }
                    _3219 = frontier_phi_82_pred;
                    _3217 = frontier_phi_82_pred_1;
                    _3215 = frontier_phi_82_pred_2;
                    _3213 = frontier_phi_82_pred_3;
                    _3211 = frontier_phi_82_pred_4;
                    _3209 = frontier_phi_82_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3209;
                        _3369 = _3211;
                        _3370 = _3213;
                        _3371 = _3215;
                        _3372 = _3217;
                        _3373 = _3219;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3215;
                frontier_phi_63_64_ladder_1 = _3219;
                frontier_phi_63_64_ladder_2 = _3217;
                frontier_phi_63_64_ladder_3 = _3213;
                frontier_phi_63_64_ladder_4 = _3211;
                frontier_phi_63_64_ladder_5 = _3209;
            }
            else
            {
                frontier_phi_63_64_ladder = _3093;
                frontier_phi_63_64_ladder_1 = _3097;
                frontier_phi_63_64_ladder_2 = _3095;
                frontier_phi_63_64_ladder_3 = _3091;
                frontier_phi_63_64_ladder_4 = _3089;
                frontier_phi_63_64_ladder_5 = _3087;
            }
            _3208 = frontier_phi_63_64_ladder_5;
            _3210 = frontier_phi_63_64_ladder_4;
            _3212 = frontier_phi_63_64_ladder_3;
            _3214 = frontier_phi_63_64_ladder;
            _3216 = frontier_phi_63_64_ladder_2;
            _3218 = frontier_phi_63_64_ladder_1;
        }
        float _3223 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _3020 = (_3223 * _3214) + _2551;
        _3022 = (_3223 * _3216) + _2553;
        _3024 = (_3223 * _3218) + _2555;
        _3026 = ((_3208 * 0.039999999105930328369140625) * _3223) + _2874;
        _3028 = ((_3210 * 0.039999999105930328369140625) * _3223) + _2876;
        _3030 = ((_3212 * 0.039999999105930328369140625) * _3223) + _2878;
    }
    else
    {
        _3020 = _2551;
        _3022 = _2553;
        _3024 = _2555;
        _3026 = _2874;
        _3028 = _2876;
        _3030 = _2878;
    }
    float _5031 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _5042 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _5053 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _3047 = ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_3020 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _984))) + ((_3026 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3022 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _984))) + ((_3028 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3049 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3024 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _984))) + ((_3030 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _3050 = _259 + 6u;
    float _3058 = _921 / cbSceneParam._m0[86u].x;
    float _3059 = _922 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _3113 = _3112 / _843;
        float _3124 = _3113 * _894;
        float _3125 = _895 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3128 = _3113 * _896;
        float _3130 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3125;
        float _3138 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3325;
        if (abs((_3126 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3325 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3269 = 1.0 / cbSceneParam._m0[80u].x;
            float _3270 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3271 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            _3325 = ((abs(_3138 / _3126) * cbSceneParam._m0[80u].y) * ((((_3280 - _3281) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))))) * _3269)) - ((exp2(_3148 * _3280) - exp2(_3148 * _3281)) * _3269))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3336 = exp2((_3325 * (-1.44269502162933349609375)) * (1.0 - _3327.w));
        float _3337 = log2(_3336);
        float _3353 = log2(_3078);
        _3150 = (exp2(_3353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].x)) * _3327.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3152 = (exp2(_3353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].y)) * _3327.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3154 = (exp2(_3353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].z)) * _3327.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3156 = _3336 * _3078;
    }
    else
    {
        _3150 = _3075;
        _3152 = _3076;
        _3154 = _3077;
        _3156 = _3078;
    }
    bool _3363;
    vec4 _3166;
    vec4 _3188;
    float _3190;
    float _3194;
    float _3195;
    float _3196;
    float _3197;
    bool _3207;
    for (;;)
    {
        _3166 = cbMatDynParam._m0[0u];
        float _3168 = roundEven(_3166.y);
        bool _3169 = _3168 == 3.0;
        float _3170 = log2(_3156);
        float _3177 = exp2(_3170 * cbSceneParam._m0[78u].x) * _3047;
        float _3178 = exp2(_3170 * cbSceneParam._m0[78u].y) * _3048;
        float _3179 = exp2(_3170 * cbSceneParam._m0[78u].z) * _3049;
        float _3186 = _910 + (-0.5);
        _3188 = cbMtdParam._m0[1u];
        _3190 = _3188.y * _3186;
        float _3193 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3194 = _3193 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
        _3195 = _3193 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
        _3196 = _3193 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
        _3197 = _3186 * 0.999000012874603271484375;
        _3207 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3207)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3197) < 0.5)
            {
                _3363 = true;
                break;
            }
        }
        uint _3304 = _959 + uint(_3166.w);
        if ((cbInstanceData._m0[_3304].w < 1.0) && ((cbInstanceData._m0[_3304].w + _3197) < 0.5))
        {
            _3363 = true;
            break;
        }
        if ((_3190 + 1.0) < _3188.x)
        {
            _3363 = true;
            break;
        }
        _3363 = false;
        break;
    }
    float _3567;
    if (_3363)
    {
        discard_state = true;
        _3567 = 0.0;
    }
    else
    {
        _3567 = cbInstanceData._m0[_3050].w;
    }
    SV_Target.x = _3194;
    SV_Target.y = _3195;
    SV_Target.z = _3196;
    SV_Target.w = _3567;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
    discard_exit();
}


