#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _367.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3979 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _443 = (_436 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _444 = (_436 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _445 = (_436 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _367.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[24u].z) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3990 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _522 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443);
    float _525 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444);
    float _528 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445);
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _436) + _586;
    float _596 = ((_567.y - _587) * _436) + _587;
    float _597 = ((_567.z - _588) * _436) + _588;
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _622 = ((_609.z - _597) * _509) + _597;
    float _625 = ((((_609.x - _595) * _509) + _595) * 2.0) + (-1.0);
    float _627 = ((((_609.y - _596) * _509) + _596) * 2.0) + (-1.0);
    float _628 = dot(vec2(_625, _627), vec2(_625, _627));
    float _4001 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _633 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _681 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _684 = ((isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : min(_681, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _693 = (_684 - ((((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _684))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4022 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _701 = (_694 * ((_547.x * cbMtdParam._m0[18u].x) - _522)) + _522;
    float _702 = (_694 * ((_547.y * cbMtdParam._m0[18u].y) - _525)) + _525;
    float _703 = (_694 * ((_547.z * cbMtdParam._m0[18u].z) - _528)) + _528;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _745 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_717 - _718) * cbMtdParam._m0[24u].y) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4033 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _754 = ((((cbMtdParam._m0[10u].x - _701) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _746) + _701;
    float _755 = ((((cbMtdParam._m0[10u].y - _702) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _746) + _702;
    float _756 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _703)) * _746) + _703;
    float _760 = (cbMtdParam._m0[19u].w * (_647.z - _622)) + _622;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _4044 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = (_694 * (_774.z - _760)) + _760;
    float _794 = ((cbMtdParam._m0[23u].y - _791) * _746) + _791;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _819 = (_813.x * 2.0) + (-1.0);
    float _820 = (_813.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4055 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _829 = (((_647.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _625;
    float _830 = (((_647.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _627;
    float _842 = (((_781 - _829) + (cbMtdParam._m0[21u].x * _829)) * _694) + _829;
    float _843 = (((_782 - _830) + (cbMtdParam._m0[21u].x * _830)) * _694) + _830;
    float _844 = (_694 * (sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) - _633)) + _633;
    float _855 = (((_819 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _746) + _842;
    float _856 = (((_820 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _746) + _843;
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) - _844) * _746) + _844;
    float _859 = cbMtdParam._m0[22u].x + _647.w;
    float _862 = fma(_857, _246 * NORMAL.x, fma(_856, _253 * TANGENT.x, (_239 * _231) * _855));
    float _865 = fma(_857, _246 * NORMAL.y, fma(_856, _253 * TANGENT.y, (_239 * _232) * _855));
    float _868 = fma(_857, _246 * NORMAL.z, fma(_856, _253 * TANGENT.z, (_239 * _233) * _855));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _4066 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _876 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4088 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4099 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4110 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _981 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _984 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _998 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_998].z;
    float _4121 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1022 = ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_873, _874, _875), vec3(_951, _952, _953));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _873) - _951;
    float _1031 = (_1026 * _874) - _952;
    float _1032 = (_1026 * _875) - _953;
    float _1036 = abs(dot(vec3(_951, _952, _953), vec3(_873, _874, _875)));
    float _4154 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_876);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1121 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1125 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1150 = _1083 + _873;
        float _1151 = _1087 + _874;
        float _1152 = _1091 + _875;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_873, _874, _875), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4202 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_873, _874, _875), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4235 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_873, _874, _875), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4268 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1435 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1439 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1462 = _1083 + _873;
        float _1463 = _1087 + _874;
        float _1464 = _1091 + _875;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_873, _874, _875), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4331 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_873, _874, _875), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4364 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_873, _874, _875), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4397 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1393;
        _1701 = _1393;
        _1702 = _1393;
        _1703 = _1393;
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1406)) + _1406;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1407)) + _1407;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _1030 * 0.5;
    float _1769 = _1031 * 0.5;
    float _1770 = _1032 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1898 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1901 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1929 = frontier_phi_14_12_ladder;
        }
        float _2098;
        if (_1898 > 0.0)
        {
            _2098 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2098 = frontier_phi_23_19_ladder;
        }
        float _2393;
        if (_1901 > 0.0)
        {
            _2393 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2393 = frontier_phi_35_30_ladder;
        }
        float _2395 = isnan(_2098) ? _1929 : (isnan(_1929) ? _2098 : min(_1929, _2098));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1895) + _1884;
        float _2401 = (_2396 * _1898) + _1888;
        float _2402 = (_2396 * _1901) + _1892;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2403;
        float _2407 = _2403 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 > _2407) || ((_2401 < _2405) || ((_2400 < _2405) || (_2400 > _2407))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2402, cbModelParam._m0[9u].z, fma(_2401, cbModelParam._m0[9u].y, _2400 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2402, cbModelParam._m0[10u].z, fma(_2401, cbModelParam._m0[10u].y, _2400 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2402, cbModelParam._m0[11u].z, fma(_2401, cbModelParam._m0[11u].y, _2400 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_13_35_ladder = _2547.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2547.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2547.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_13_35_ladder_2;
        _1919 = frontier_phi_13_35_ladder_1;
        _1921 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1837);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _1993 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _1996 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2103;
        if (_1990 > 0.0)
        {
            _2103 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2103 = frontier_phi_25_21_ladder;
        }
        float _2420;
        if (_1993 > 0.0)
        {
            _2420 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2420 = frontier_phi_37_32_ladder;
        }
        float _2747;
        if (_1996 > 0.0)
        {
            _2747 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2747 = frontier_phi_47_44_ladder;
        }
        float _2749 = isnan(_2420) ? _2103 : (isnan(_2103) ? _2420 : min(_2103, _2420));
        float _2750 = isnan(_2747) ? _2749 : (isnan(_2749) ? _2747 : min(_2749, _2747));
        float _2754 = (_2750 * _1990) + _1979;
        float _2755 = (_2750 * _1993) + _1983;
        float _2756 = (_2750 * _1996) + _1987;
        float _2757 = _2750 * 9.9999997473787516355514526367188e-05;
        float _2758 = (-1.0) - _2757;
        float _2760 = _2757 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2756 > _2760) || ((_2756 < _2758) || ((_2755 > _2760) || ((_2755 < _2758) || ((_2754 < _2758) || (_2754 > _2760))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2756, cbModelParam._m0[17u].z, fma(_2755, cbModelParam._m0[17u].y, _2754 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2756, cbModelParam._m0[18u].z, fma(_2755, cbModelParam._m0[18u].y, _2754 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2756, cbModelParam._m0[19u].z, fma(_2755, cbModelParam._m0[19u].y, _2754 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_22_47_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_22_47_ladder_2;
        _2017 = frontier_phi_22_47_ladder_1;
        _2019 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1926);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2031 = ((((1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1051 * _1038)) * _1022;
    float _2032 = _2031 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2033 = _2031 * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2034 = _2031 * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2037 = fma(_2034, cbSceneParam._m0[89u].z, fma(_2033, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2040 = fma(_2034, cbSceneParam._m0[90u].z, fma(_2033, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2043 = fma(_2034, cbSceneParam._m0[91u].z, fma(_2033, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2090 = _2077 / _2089;
    float _2091 = _2081 / _2089;
    float _2092 = _2085 / _2089;
    float _2239;
    float _2240;
    float _2241;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2119 = ((uint(_2092 > cbSceneParam._m0[59u].y) + uint(_2092 > cbSceneParam._m0[59u].x)) + uint(_2092 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2120 = _2119 + 43u;
        uint _2128 = _2119 + 44u;
        uint _2136 = _2119 + 45u;
        uint _2144 = _2119 + 46u;
        float _2155 = fma(_2089, cbSceneParam._m0[_2120].w, fma(_2085, cbSceneParam._m0[_2120].z, fma(_2081, cbSceneParam._m0[_2120].y, _2077 * cbSceneParam._m0[_2120].x)));
        float _2159 = fma(_2089, cbSceneParam._m0[_2128].w, fma(_2085, cbSceneParam._m0[_2128].z, fma(_2081, cbSceneParam._m0[_2128].y, _2077 * cbSceneParam._m0[_2128].x)));
        float _2167 = fma(_2089, cbSceneParam._m0[_2144].w, fma(_2085, cbSceneParam._m0[_2144].z, fma(_2081, cbSceneParam._m0[_2144].y, _2077 * cbSceneParam._m0[_2144].x)));
        float _2172 = cbSceneParam._m0[33u].z * _2167;
        float _2174 = cbSceneParam._m0[33u].w * _2167;
        float _2177 = fma(_2089, cbSceneParam._m0[_2136].w, fma(_2085, cbSceneParam._m0[_2136].z, fma(_2081, cbSceneParam._m0[_2136].y, _2077 * cbSceneParam._m0[_2136].x))) / _2167;
        float _2225 = (cbSceneParam._m0[33u].x - sqrt(((_2091 * _2091) + (_2090 * _2090)) + (_2092 * _2092))) * cbSceneParam._m0[33u].y;
        float _4523 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2232 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2155) / _2167, (_2174 + _2159) / _2167), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 + _2155) / _2167, (_2159 - _2172) / _2167), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 - _2172) / _2167, (_2159 - _2174) / _2167), _2177), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 - _2174) / _2167, (_2172 + _2159) / _2167), _2177), 0.0)).x), vec4(0.25)));
        _2239 = 1.0 - (_2232 * cbSceneParam._m0[34u].x);
        _2240 = 1.0 - (_2232 * cbSceneParam._m0[34u].y);
        _2241 = 1.0 - (_2232 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2239 = 1.0;
        _2240 = 1.0;
        _2241 = 1.0;
    }
    float _2305;
    float _2307;
    float _2309;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2293 = fma(_2089, cbSceneParam._m0[63u].w, fma(_2085, cbSceneParam._m0[63u].z, fma(_2081, cbSceneParam._m0[63u].y, _2077 * cbSceneParam._m0[63u].x)));
        float _2294 = fma(_2089, cbSceneParam._m0[60u].w, fma(_2085, cbSceneParam._m0[60u].z, fma(_2081, cbSceneParam._m0[60u].y, _2077 * cbSceneParam._m0[60u].x))) / _2293;
        float _2295 = fma(_2089, cbSceneParam._m0[61u].w, fma(_2085, cbSceneParam._m0[61u].z, fma(_2081, cbSceneParam._m0[61u].y, _2077 * cbSceneParam._m0[61u].x))) / _2293;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2294 >= cbSceneParam._m0[64u].x) && (_2295 >= cbSceneParam._m0[64u].y)) && (_2294 <= cbSceneParam._m0[64u].z)) && (_2295 <= cbSceneParam._m0[64u].w))
        {
            float _2433 = fma(_2089, cbSceneParam._m0[62u].w, fma(_2085, cbSceneParam._m0[62u].z, fma(_2081, cbSceneParam._m0[62u].y, _2077 * cbSceneParam._m0[62u].x))) / _2293;
            float _2437 = isnan(cbSceneParam._m0[41u].w) ? _2433 : (isnan(_2433) ? cbSceneParam._m0[41u].w : max(_2433, cbSceneParam._m0[41u].w));
            float _2480 = (cbSceneParam._m0[33u].x - sqrt(((_2091 * _2091) + (_2090 * _2090)) + (_2092 * _2092))) * cbSceneParam._m0[33u].y;
            float _4539 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
            float _2487 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2294, cbSceneParam._m0[33u].w + _2295), _2437), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2294, _2295 - cbSceneParam._m0[33u].z), _2437), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2294 - cbSceneParam._m0[33u].z, _2295 - cbSceneParam._m0[33u].w), _2437), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2294 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2295), _2437), 0.0)).x), vec4(0.25)));
            float _2491 = 1.0 - (_2487 * cbSceneParam._m0[34u].x);
            float _2492 = 1.0 - (_2487 * cbSceneParam._m0[34u].y);
            float _2493 = 1.0 - (_2487 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2493) ? _2241 : (isnan(_2241) ? _2493 : min(_2241, _2493));
            frontier_phi_34_33_ladder_1 = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
            frontier_phi_34_33_ladder_2 = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
        }
        else
        {
            frontier_phi_34_33_ladder = _2241;
            frontier_phi_34_33_ladder_1 = _2240;
            frontier_phi_34_33_ladder_2 = _2239;
        }
        _2305 = frontier_phi_34_33_ladder_2;
        _2307 = frontier_phi_34_33_ladder_1;
        _2309 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2305 = _2239;
        _2307 = _2240;
        _2309 = _2241;
    }
    uvec4 _2314 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2316 = _2314.x * 14u;
    uint _2317 = _2316 + 13u;
    float _2324 = _1022 + (-1.0);
    float _2329 = (cbLight._m0[_2317].x * _2324) + 1.0;
    float _2330 = (cbLight._m0[_2317].y * _2324) + 1.0;
    float _2331 = (cbLight._m0[_2317].z * _2324) + 1.0;
    float _2332 = (cbLight._m0[_2317].w * _2324) + 1.0;
    uint _2333 = _2316 + 5u;
    float _2339 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2343 = _2316 + 4u;
    float _2352 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2356 = _2316 | 1u;
    float _2367 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_873, _874, _875));
    float _2370 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_873, _874, _875));
    float _4575 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _4586 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2375 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * 0.3183098733425140380859375;
    float _2377 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * 0.3183098733425140380859375;
    float _2384 = ((cbLight._m0[_2333].x * _2339) * _2377) + (((cbLight._m0[_2343].x * _2305) * _2352) * _2375);
    float _2385 = ((_2339 * cbLight._m0[_2333].y) * _2377) + (((cbLight._m0[_2343].y * _2307) * _2352) * _2375);
    float _2386 = ((_2339 * cbLight._m0[_2333].z) * _2377) + (((cbLight._m0[_2343].z * _2309) * _2352) * _2375);
    uvec4 _2390 = floatBitsToUint(cbLight._m0[_2316 + 12u]);
    bool _2392 = _2390.x == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2392)
    {
        _2494 = _2384;
        _2496 = _2385;
        _2498 = _2386;
    }
    else
    {
        uint _2502 = _2316 + 6u;
        float _2518 = (dot(vec3(cbLight._m0[_2316 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4597 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2521 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2494 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2384;
        _2496 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2385;
        _2498 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2386;
    }
    bool _2501 = _2390.y == 0u;
    float _2556;
    float _2558;
    float _2560;
    if (_2501)
    {
        _2556 = _2494;
        _2558 = _2496;
        _2560 = _2498;
    }
    else
    {
        uint _2718 = _2316 + 7u;
        float _2734 = (dot(vec3(cbLight._m0[_2316 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2735 = _2734 * _2734;
        float _4613 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2736 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2737 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2556 = (((cbLight._m0[_2718].x * 0.3183098733425140380859375) * _2736) * _2737) + _2494;
        _2558 = (((cbLight._m0[_2718].y * 0.3183098733425140380859375) * _2736) * _2737) + _2496;
        _2560 = (((cbLight._m0[_2718].z * 0.3183098733425140380859375) * _2736) * _2737) + _2498;
    }
    uint _2563 = _2316 + 8u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _876) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2316].x + _951;
    float _2579 = cbLight._m0[_2316].y + _952;
    float _2580 = cbLight._m0[_2316].z + _953;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2316].xyz));
    float _4629 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _4640 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2592 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2593 = dot(vec3(_873, _874, _875), vec3(_2585, _2586, _2587));
    float _4651 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2597 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2585, _2586, _2587));
    float _4662 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2601 = _2577 * _2577;
    float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
    float _2616 = (exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2617 = 1.0 - _2577;
    float _2628 = (0.5 / (((_2592 * ((_2591 * _2617) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2592 * _2617) + _2577) * _2591))) * _2591;
    float _4673 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
    uint _2644 = _2316 + 9u;
    float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _876) * 0.949999988079071044921875);
    float _2656 = _2655 * _2655;
    float _2657 = cbLight._m0[_2356].x + _951;
    float _2658 = cbLight._m0[_2356].y + _952;
    float _2659 = cbLight._m0[_2356].z + _953;
    float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
    float _2664 = _2663 * _2657;
    float _2665 = _2663 * _2658;
    float _2666 = _2663 * _2659;
    float _2667 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2356].xyz));
    float _4684 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2671 = dot(vec3(_873, _874, _875), vec3(_2664, _2665, _2666));
    float _4695 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2675 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2664, _2665, _2666));
    float _4706 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2679 = _2656 * _2656;
    float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
    float _2692 = (exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2693 = 1.0 - _2656;
    float _2703 = (0.5 / (((_2592 * ((_2670 * _2693) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2592 * _2693) + _2656) * _2670))) * _2670;
    float _4717 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
    float _2715 = (((_2692 * cbLight._m0[_2644].x) * _2705) * _2339) + ((((cbLight._m0[_2563].x * _2305) * _2616) * _2630) * _2352);
    float _2716 = (((_2692 * cbLight._m0[_2644].y) * _2705) * _2339) + ((((cbLight._m0[_2563].y * _2307) * _2616) * _2630) * _2352);
    float _2717 = (((_2692 * cbLight._m0[_2644].z) * _2705) * _2339) + ((((cbLight._m0[_2563].z * _2309) * _2616) * _2630) * _2352);
    float _2773;
    float _2775;
    float _2777;
    if (_2392)
    {
        _2773 = _2715;
        _2775 = _2716;
        _2777 = _2717;
    }
    else
    {
        uint _2779 = _2316 + 2u;
        uint _2783 = _2316 + 10u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _876) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _951;
        float _2800 = cbLight._m0[_2779].y + _952;
        float _2801 = cbLight._m0[_2779].z + _953;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2779].xyz));
        float _4728 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2813 = dot(vec3(_873, _874, _875), vec3(_2806, _2807, _2808));
        float _4739 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4750 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2834 = (exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2835 = 1.0 - _2798;
        float _2845 = (0.5 / (((_2592 * ((_2812 * _2835) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2592 * _2835) + _2798) * _2812))) * _2812;
        float _4761 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2773 = (((_2834 * cbLight._m0[_2783].x) * _2847) * _2848) + _2715;
        _2775 = (((_2834 * cbLight._m0[_2783].y) * _2847) * _2848) + _2716;
        _2777 = (((_2834 * cbLight._m0[_2783].z) * _2847) * _2848) + _2717;
    }
    float _2879;
    float _2881;
    float _2883;
    if (_2501)
    {
        _2879 = _2773;
        _2881 = _2775;
        _2883 = _2777;
    }
    else
    {
        uint _2890 = _2316 + 3u;
        uint _2894 = _2316 + 11u;
        float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2890].w)) * _876) * 0.949999988079071044921875);
        float _2909 = _2908 * _2908;
        float _2910 = cbLight._m0[_2890].x + _951;
        float _2911 = cbLight._m0[_2890].y + _952;
        float _2912 = cbLight._m0[_2890].z + _953;
        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
        float _2917 = _2916 * _2910;
        float _2918 = _2916 * _2911;
        float _2919 = _2916 * _2912;
        float _2920 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2890].xyz));
        float _4777 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2924 = dot(vec3(_873, _874, _875), vec3(_2917, _2918, _2919));
        float _4788 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2928 = dot(vec3(cbLight._m0[_2890].xyz), vec3(_2917, _2918, _2919));
        float _4799 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2932 = _2909 * _2909;
        float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
        float _2945 = (exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2946 = 1.0 - _2909;
        float _2956 = (0.5 / (((_2592 * ((_2923 * _2946) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2592 * _2946) + _2909) * _2923))) * _2923;
        float _4810 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2958 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
        float _2959 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2879 = (((_2945 * cbLight._m0[_2894].x) * _2958) * _2959) + _2773;
        _2881 = (((_2945 * cbLight._m0[_2894].y) * _2958) * _2959) + _2775;
        _2883 = (((_2945 * cbLight._m0[_2894].z) * _2958) * _2959) + _2777;
    }
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_2314.y == 0u)
    {
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.x;
        uint _2992 = uint((float(_2980.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2981))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2981)));
        float _3002 = (log2(_2092 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3003 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        uint _3006 = uint(isnan(14.0) ? _3003 : (isnan(_3003) ? 14.0 : min(_3003, 14.0)));
        uvec4 _3011 = texelFetch(g_lightClusterGridBuffer, int(((_3006 << 2u) + (_2992 << 6u)) >> 2u));
        uint _3012 = _3011.x;
        uint _3013 = _2980.z;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((((1u << ((_3013 >> 4u) & 15u)) + 4294967295u) & _3012) == 0u) || ((_3013 & 240u) == 0u))
        {
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
        }
        else
        {
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            uint _3243 = 0u;
            uint _3252;
            bool _3253;
            for (;;)
            {
                _3252 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                _3253 = _3252 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3253)
                {
                    frontier_phi_66_pred = _3242;
                    frontier_phi_66_pred_1 = _3241;
                    frontier_phi_66_pred_2 = _3240;
                    frontier_phi_66_pred_3 = _3239;
                    frontier_phi_66_pred_4 = _3238;
                    frontier_phi_66_pred_5 = _3237;
                }
                else
                {
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    uint _3367;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3252;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    for (;;)
                    {
                        uint _3371 = uint(findLSB(_3367)) + (_3243 << 5u);
                        uint _3368 = (_3367 + 4294967295u) & _3367;
                        uint _3373 = _3371 * 48u;
                        vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 3u)).x));
                        uint _3393 = (_3371 * 48u) + 4u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 3u)).x));
                        uint _3412 = (_3371 * 48u) + 8u;
                        vec3 _3423 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x));
                        float _3427 = _3387.x - _2090;
                        float _3428 = _3387.y - _2091;
                        float _3429 = _3387.z - _2092;
                        float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                        float _3433 = inversesqrt(_3430);
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3437 = dot(vec3(_978, _981, _984), vec3(_3434, _3435, _3436));
                        float _3442 = 1.0 - (_3430 * _3387.w);
                        float _4836 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3444 = sqrt(_3430) * _3406.w;
                        float _3447 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3437) + _3448;
                        float _3454 = _3444 * _3444;
                        float _3458 = ((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3443) / ((_3454 * 0.699999988079071044921875) + 1.0);
                        float _3462 = (-0.0) - _2090;
                        float _3463 = (-0.0) - _2091;
                        float _3464 = (-0.0) - _2092;
                        float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3478 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                        float _3479 = 1.0 - _1038;
                        float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                        float _3487 = _3486 * _3486;
                        float _3488 = _3487 * _3487;
                        float _3489 = _3469 + _3434;
                        float _3490 = _3470 + _3435;
                        float _3491 = _3471 + _3436;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3499 = dot(vec3(_978, _981, _984), vec3(_3469, _3470, _3471));
                        float _4852 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3503 = dot(vec3(_978, _981, _984), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                        float _4863 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                        float _3511 = _3447 * _3487;
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3437) + _3512;
                        float _4874 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3516 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3517 = 1.0 - _3487;
                        float _3527 = (0.5 / (((_3516 * ((_3502 * _3517) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3487) * _3502))) * _3516;
                        float _4885 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3538 = (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3510 * _3510) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125))) * _3443;
                        _3296 = (_3458 * _3406.x) + _3364;
                        _3297 = (_3458 * _3406.y) + _3365;
                        _3298 = (_3458 * _3406.z) + _3366;
                        _3293 = (_3538 * _3423.x) + _3361;
                        _3294 = (_3538 * _3423.y) + _3362;
                        _3295 = (_3538 * _3423.z) + _3363;
                        if (_3368 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3368;
                        }
                    }
                    frontier_phi_66_pred = _3298;
                    frontier_phi_66_pred_1 = _3297;
                    frontier_phi_66_pred_2 = _3296;
                    frontier_phi_66_pred_3 = _3295;
                    frontier_phi_66_pred_4 = _3294;
                    frontier_phi_66_pred_5 = _3293;
                }
                _3103 = frontier_phi_66_pred;
                _3101 = frontier_phi_66_pred_1;
                _3099 = frontier_phi_66_pred_2;
                _3097 = frontier_phi_66_pred_3;
                _3095 = frontier_phi_66_pred_4;
                _3093 = frontier_phi_66_pred_5;
                uint _3244 = _3243 + 1u;
                if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3237 = _3093;
                    _3238 = _3095;
                    _3239 = _3097;
                    _3240 = _3099;
                    _3241 = _3101;
                    _3242 = _3103;
                    _3243 = _3244;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
        }
        uvec4 _3106 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3107 = _3106.z;
        uint _3109 = (_3107 >> 8u) & 15u;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((4294967295u << _3109) & _3012) == 0u)
        {
            _3205 = _3092;
            _3207 = _3094;
            _3209 = _3096;
            _3211 = _3098;
            _3213 = _3100;
            _3215 = _3102;
        }
        else
        {
            float _3230 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
            float _3231 = _3230 * _2090;
            float _3232 = _3230 * _2091;
            float _3233 = _3230 * _2092;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3109 < ((_3107 >> 12u) & 15u))
            {
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3344 = _3092;
                float _3345 = _3094;
                float _3346 = _3096;
                float _3347 = _3098;
                float _3348 = _3100;
                float _3349 = _3102;
                uint _3350 = _3109;
                uint _3359;
                bool _3360;
                for (;;)
                {
                    _3359 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3350 << 2u)) >> 2u)).x;
                    _3360 = _3359 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3360)
                    {
                        frontier_phi_72_pred = _3349;
                        frontier_phi_72_pred_1 = _3348;
                        frontier_phi_72_pred_2 = _3347;
                        frontier_phi_72_pred_3 = _3346;
                        frontier_phi_72_pred_4 = _3345;
                        frontier_phi_72_pred_5 = _3344;
                    }
                    else
                    {
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        float _3558 = _3346;
                        float _3559 = _3347;
                        float _3560 = _3348;
                        float _3561 = _3349;
                        uint _3562 = _3359;
                        uint _3563;
                        vec4 _3588;
                        float _3589;
                        vec4 _3604;
                        vec3 _3616;
                        vec4 _3631;
                        vec4 _3646;
                        float _3692;
                        bool _3693;
                        for (;;)
                        {
                            uint _3573 = ((_3350 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3562));
                            _3563 = (_3562 + 4294967295u) & _3562;
                            uint _3575 = _3573 * 40u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3589 = _3588.w;
                            uint _3591 = (_3573 * 40u) + 4u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3573 * 40u) + 8u;
                            _3616 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x));
                            uint _3618 = (_3573 * 40u) + 16u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3573 * 40u) + 20u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3573 * 40u) + 24u;
                            vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3667 = (_3573 * 40u) + 28u;
                            vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3692 = fma(_2092, _3680.z, fma(_2091, _3680.y, _3680.x * _2090)) + _3680.w;
                            _3693 = !((fma(_2092, _3661.z, fma(_2091, _3661.y, _3661.x * _2090)) + _3661.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3693)
                            {
                                float _3720 = _3588.x - _2090;
                                float _3721 = _3588.y - _2091;
                                float _3722 = _3588.z - _2092;
                                float _3723 = dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722));
                                float _3726 = inversesqrt(_3723);
                                float _3727 = _3726 * _3720;
                                float _3728 = _3726 * _3721;
                                float _3729 = _3726 * _3722;
                                float _3733 = 1.0 - (_3723 / (_3589 * _3589));
                                float _4896 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3738 = sqrt(_3723) * _3604.w;
                                float _3740 = 1.39999997615814208984375 / (_3738 + 1.39999997615814208984375);
                                float _3741 = _3740 * _3740;
                                float _3744 = ((1.0 - _3741) * dot(vec3(_3727, _3728, _3729), vec3(_978, _981, _984))) + _3741;
                                float _3747 = _3738 * _3738;
                                float _3751 = (fma(_2092, _3631.z, fma(_2091, _3631.y, _3631.x * _2090)) + _3631.w) / _3692;
                                float _3752 = (fma(_2092, _3646.z, fma(_2091, _3646.y, _3646.x * _2090)) + _3646.w) / _3692;
                                float _3756 = 1.0 - dot(vec2(_3751, _3752), vec2(_3751, _3752));
                                float _4912 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3758 = _3757 * (((isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0))) * _3734) / ((_3747 * 0.699999988079071044921875) + 1.0));
                                float _3770 = exp2(log2(1.0 / ((_3747 * 3.5) + 5.0)) * 0.25);
                                float _3771 = 1.0 - _1038;
                                float _3778 = sqrt(1.0 - ((1.0 - (_3771 * _3771)) * (1.0 - (_3770 * _3770))));
                                float _3779 = _3778 * _3778;
                                float _3780 = _3779 * _3779;
                                float _3781 = _3727 - _3231;
                                float _3782 = _3728 - _3232;
                                float _3783 = _3729 - _3233;
                                float _3787 = inversesqrt(dot(vec3(_3781, _3782, _3783), vec3(_3781, _3782, _3783)));
                                float _3791 = dot(vec3(_978, _981, _984), vec3((-0.0) - _3231, (-0.0) - _3232, (-0.0) - _3233));
                                float _4923 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3795 = dot(vec3(_978, _981, _984), vec3(_3787 * _3781, _3787 * _3782, _3787 * _3783));
                                float _4934 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3802 = ((_3798 * _3798) * (_3780 + (-1.0))) + 1.0;
                                float _3803 = _3740 * _3779;
                                float _3804 = _3803 * _3803;
                                float _3810 = ((1.0 - _3804) * dot(vec3(_978, _981, _984), vec3(_3727, _3728, _3729))) + _3804;
                                float _4945 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3812 = 1.0 - _3779;
                                float _3822 = (0.5 / (((_3811 * ((_3794 * _3812) + _3779)) + 9.9999999392252902907785028219223e-09) + (((_3811 * _3812) + _3779) * _3794))) * _3811;
                                float _4956 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3832 = (_3757 * _3734) * (((_3780 * 3.1415927410125732421875) * (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0)))) / ((_3802 * _3802) * ((_3747 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3758 * _3604.y;
                                frontier_phi_78_pred_1 = _3758 * _3604.x;
                                frontier_phi_78_pred_2 = _3832 * _3616.z;
                                frontier_phi_78_pred_3 = _3832 * _3616.y;
                                frontier_phi_78_pred_4 = _3832 * _3616.x;
                                frontier_phi_78_pred_5 = _3758 * _3604.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3840 = frontier_phi_78_pred;
                            _3839 = frontier_phi_78_pred_1;
                            _3838 = frontier_phi_78_pred_2;
                            _3837 = frontier_phi_78_pred_3;
                            _3836 = frontier_phi_78_pred_4;
                            _3841 = frontier_phi_78_pred_5;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            if (_3563 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3563;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3548;
                        frontier_phi_72_pred_1 = _3547;
                        frontier_phi_72_pred_2 = _3546;
                        frontier_phi_72_pred_3 = _3545;
                        frontier_phi_72_pred_4 = _3544;
                        frontier_phi_72_pred_5 = _3543;
                    }
                    _3216 = frontier_phi_72_pred;
                    _3214 = frontier_phi_72_pred_1;
                    _3212 = frontier_phi_72_pred_2;
                    _3210 = frontier_phi_72_pred_3;
                    _3208 = frontier_phi_72_pred_4;
                    _3206 = frontier_phi_72_pred_5;
                    uint _3351 = _3350 + 1u;
                    if (_3351 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3344 = _3206;
                        _3345 = _3208;
                        _3346 = _3210;
                        _3347 = _3212;
                        _3348 = _3214;
                        _3349 = _3216;
                        _3350 = _3351;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3216;
                frontier_phi_60_61_ladder_1 = _3214;
                frontier_phi_60_61_ladder_2 = _3210;
                frontier_phi_60_61_ladder_3 = _3208;
                frontier_phi_60_61_ladder_4 = _3206;
                frontier_phi_60_61_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_60_61_ladder = _3102;
                frontier_phi_60_61_ladder_1 = _3100;
                frontier_phi_60_61_ladder_2 = _3096;
                frontier_phi_60_61_ladder_3 = _3094;
                frontier_phi_60_61_ladder_4 = _3092;
                frontier_phi_60_61_ladder_5 = _3098;
            }
            _3205 = frontier_phi_60_61_ladder_4;
            _3207 = frontier_phi_60_61_ladder_3;
            _3209 = frontier_phi_60_61_ladder_2;
            _3211 = frontier_phi_60_61_ladder_5;
            _3213 = frontier_phi_60_61_ladder_1;
            _3215 = frontier_phi_60_61_ladder;
        }
        float _3220 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _3025 = (_3220 * _3211) + _2556;
        _3027 = (_3220 * _3213) + _2558;
        _3029 = (_3220 * _3215) + _2560;
        _3031 = ((_3205 * 0.039999999105930328369140625) * _3220) + _2879;
        _3033 = ((_3207 * 0.039999999105930328369140625) * _3220) + _2881;
        _3035 = ((_3209 * 0.039999999105930328369140625) * _3220) + _2883;
    }
    else
    {
        _3025 = _2556;
        _3027 = _2558;
        _3029 = _2560;
        _3031 = _2879;
        _3033 = _2881;
        _3035 = _2883;
    }
    float _4972 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4983 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4994 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    uint _3055 = _259 + 6u;
    float _3063 = _959 / cbSceneParam._m0[86u].x;
    float _3064 = _960 / cbSceneParam._m0[86u].y;
    vec4 _3078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3080 = _3078.x;
    float _3081 = _3078.y;
    float _3082 = _3078.z;
    float _3083 = _3078.w;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _3117 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _3118 = _3117 / _894;
        float _3129 = _3118 * _944;
        float _3130 = _945 * _3118;
        float _3131 = (-0.0) - _3130;
        float _3133 = _3118 * _946;
        float _3135 = (cbSceneParam._m0[77u].w * _3131) / _3117;
        float _3136 = _3135 + cbSceneParam._m0[79u].w;
        float _3137 = cbSceneParam._m0[79u].w - _3130;
        float _3143 = sqrt(((_3129 * _3129) + (_3130 * _3130)) + (_3133 * _3133));
        float _3146 = (1.0 - (cbSceneParam._m0[77u].w / _3117)) * _3143;
        float _3151 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3153 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3306;
        if (abs((_3131 - _3135) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3306 = ((((_3136 > 0.0) ? exp2(_3151 * _3136) : (2.0 - exp2(_3153 * _3136))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3146;
        }
        else
        {
            float _3266 = 1.0 / cbSceneParam._m0[80u].x;
            float _3267 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : max(_3136, _3137));
            float _3268 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : min(_3136, _3137));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            _3306 = ((abs(_3143 / _3131) * cbSceneParam._m0[80u].y) * ((((_3277 - _3278) * 2.0) - ((exp2(_3151 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0)))) - exp2(_3151 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))))) * _3266)) - ((exp2(_3153 * _3277) - exp2(_3153 * _3278)) * _3266))) + (_3146 * cbSceneParam._m0[80u].z);
        }
        vec4 _3308 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, 1.0), 0.0);
        float _3317 = exp2((_3306 * (-1.44269502162933349609375)) * (1.0 - _3308.w));
        float _3318 = log2(_3317);
        float _3334 = log2(_3083);
        _3155 = (exp2(_3334 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].x)) * _3308.x) / cbSceneParam._m0[78u].x)) + _3080;
        _3157 = (exp2(_3334 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].y)) * _3308.y) / cbSceneParam._m0[78u].y)) + _3081;
        _3159 = (exp2(_3334 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].z)) * _3308.z) / cbSceneParam._m0[78u].z)) + _3082;
        _3161 = _3317 * _3083;
    }
    else
    {
        _3155 = _3080;
        _3157 = _3081;
        _3159 = _3082;
        _3161 = _3083;
    }
    float _3173 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3174 = _3173 == 3.0;
    float _3175 = log2(_3161);
    float _3182 = exp2(_3175 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_3025 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1022))) + ((_3031 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _3183 = exp2(_3175 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_3027 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1022))) + ((_3033 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _3184 = exp2(_3175 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_3029 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1022))) + ((_3035 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _3193 = (_3173 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3193 * (_3174 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3155)));
    SV_Target.y = _3193 * (_3174 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3157)));
    SV_Target.z = _3193 * (_3174 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3159)));
    SV_Target.w = cbInstanceData._m0[_3055].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3055].w;
}


