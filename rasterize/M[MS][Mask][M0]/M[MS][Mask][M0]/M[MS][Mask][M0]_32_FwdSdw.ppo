#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1171;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3759 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _427 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_414 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _430 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_414 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _433 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_414 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _491 = _489.x;
    float _492 = _489.y;
    float _493 = _489.z;
    float _502 = ((_472.z - _493) * _414) + _493;
    float _505 = ((((_472.x - _491) * _414) + _491) * 2.0) + (-1.0);
    float _507 = ((((_472.y - _492) * _414) + _492) * 2.0) + (-1.0);
    float _508 = dot(vec2(_505, _507), vec2(_505, _507));
    float _3770 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _556 = _554.x;
    float _557 = 1.0 - _556;
    float _570 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_556 - _557) * cbMtdParam._m0[24u].w) + _557) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3781 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _578 = (_571 * ((_452.x * cbMtdParam._m0[18u].x) - _427)) + _427;
    float _579 = (_571 * ((_452.y * cbMtdParam._m0[18u].y) - _430)) + _430;
    float _580 = (_571 * ((_452.z * cbMtdParam._m0[18u].z) - _433)) + _433;
    float _584 = (cbMtdParam._m0[19u].w * (_529.z - _502)) + _502;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3792 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _614 = (_571 * (_597.z - _584)) + _584;
    float _617 = (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _505;
    float _618 = (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _507;
    float _630 = (((_604 - _617) + (cbMtdParam._m0[21u].x * _617)) * _571) + _617;
    float _631 = (((_605 - _618) + (cbMtdParam._m0[21u].x * _618)) * _571) + _618;
    float _632 = (_571 * (sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _513)) + _513;
    float _636 = cbMtdParam._m0[22u].x + _529.w;
    float _639 = fma(_632, _225 * NORMAL.x, fma(_631, _232 * TANGENT.x, (_218 * _210) * _630));
    float _642 = fma(_632, _225 * NORMAL.y, fma(_631, _232 * TANGENT.y, (_218 * _211) * _630));
    float _645 = fma(_632, _225 * NORMAL.z, fma(_631, _232 * TANGENT.z, (_218 * _212) * _630));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _3803 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _653 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3825 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3836 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3847 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_652, cbSceneParam._m0[5u].z, fma(_651, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _650));
    float _759 = fma(_652, cbSceneParam._m0[6u].z, fma(_651, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _650));
    float _762 = fma(_652, cbSceneParam._m0[7u].z, fma(_651, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _650));
    uint _776 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3858 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _800 = ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * TEXCOORD_5.w) * _796.x;
    float _801 = dot(vec3(_650, _651, _652), vec3(_729, _730, _731));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _650) - _729;
    float _809 = (_804 * _651) - _730;
    float _810 = (_804 * _652) - _731;
    float _814 = abs(dot(vec3(_729, _730, _731), vec3(_650, _651, _652)));
    float _3891 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_653);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _899 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _903 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _928 = _861 + _650;
        float _929 = _865 + _651;
        float _930 = _869 + _652;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _895;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _899;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _903;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_650, _651, _652), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3939 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_650, _651, _652), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3972 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_650, _651, _652), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _4005 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1214 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1218 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1241 = _861 + _650;
        float _1242 = _865 + _651;
        float _1243 = _869 + _652;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_650, _651, _652), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4068 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_650, _651, _652), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4101 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_650, _651, _652), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4134 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1171;
        _1480 = _1171;
        _1481 = _1171;
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _808 * 0.5;
    float _1548 = _809 * 0.5;
    float _1549 = _810 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _653);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1677 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1680 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1708 = frontier_phi_14_12_ladder;
        }
        float _1877;
        if (_1677 > 0.0)
        {
            _1877 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1877 = frontier_phi_23_19_ladder;
        }
        float _2172;
        if (_1680 > 0.0)
        {
            _2172 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2172 = frontier_phi_35_30_ladder;
        }
        float _2174 = isnan(_1877) ? _1708 : (isnan(_1708) ? _1877 : min(_1708, _1877));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1674) + _1663;
        float _2180 = (_2175 * _1677) + _1667;
        float _2181 = (_2175 * _1680) + _1671;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_13_35_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_13_35_ladder_2;
        _1698 = frontier_phi_13_35_ladder_1;
        _1700 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1616);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _653);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1772 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1775 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1882;
        if (_1769 > 0.0)
        {
            _1882 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1882 = frontier_phi_25_21_ladder;
        }
        float _2199;
        if (_1772 > 0.0)
        {
            _2199 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2199 = frontier_phi_37_32_ladder;
        }
        float _2526;
        if (_1775 > 0.0)
        {
            _2526 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2526 = frontier_phi_47_44_ladder;
        }
        float _2528 = isnan(_2199) ? _1882 : (isnan(_1882) ? _2199 : min(_1882, _2199));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1769) + _1758;
        float _2534 = (_2529 * _1772) + _1762;
        float _2535 = (_2529 * _1775) + _1766;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_22_47_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_22_47_ladder_2;
        _1796 = frontier_phi_22_47_ladder_1;
        _1798 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1705);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1696)) + _1696);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1869 = _1856 / _1868;
    float _1870 = _1860 / _1868;
    float _1871 = _1864 / _1868;
    float _2018;
    float _2019;
    float _2020;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1898 = ((uint(_1871 > cbSceneParam._m0[59u].y) + uint(_1871 > cbSceneParam._m0[59u].x)) + uint(_1871 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1899 = _1898 + 43u;
        uint _1907 = _1898 + 44u;
        uint _1915 = _1898 + 45u;
        uint _1923 = _1898 + 46u;
        float _1934 = fma(_1868, cbSceneParam._m0[_1899].w, fma(_1864, cbSceneParam._m0[_1899].z, fma(_1860, cbSceneParam._m0[_1899].y, _1856 * cbSceneParam._m0[_1899].x)));
        float _1938 = fma(_1868, cbSceneParam._m0[_1907].w, fma(_1864, cbSceneParam._m0[_1907].z, fma(_1860, cbSceneParam._m0[_1907].y, _1856 * cbSceneParam._m0[_1907].x)));
        float _1946 = fma(_1868, cbSceneParam._m0[_1923].w, fma(_1864, cbSceneParam._m0[_1923].z, fma(_1860, cbSceneParam._m0[_1923].y, _1856 * cbSceneParam._m0[_1923].x)));
        float _1951 = cbSceneParam._m0[33u].z * _1946;
        float _1953 = cbSceneParam._m0[33u].w * _1946;
        float _1956 = fma(_1868, cbSceneParam._m0[_1915].w, fma(_1864, cbSceneParam._m0[_1915].z, fma(_1860, cbSceneParam._m0[_1915].y, _1856 * cbSceneParam._m0[_1915].x))) / _1946;
        float _2004 = (cbSceneParam._m0[33u].x - sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871))) * cbSceneParam._m0[33u].y;
        float _4260 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2011 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 + _1934) / _1946, (_1953 + _1938) / _1946), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1953 + _1934) / _1946, (_1938 - _1951) / _1946), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1934 - _1951) / _1946, (_1938 - _1953) / _1946), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1934 - _1953) / _1946, (_1951 + _1938) / _1946), _1956), 0.0)).x), vec4(0.25)));
        _2018 = 1.0 - (_2011 * cbSceneParam._m0[34u].x);
        _2019 = 1.0 - (_2011 * cbSceneParam._m0[34u].y);
        _2020 = 1.0 - (_2011 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2018 = 1.0;
        _2019 = 1.0;
        _2020 = 1.0;
    }
    float _2084;
    float _2086;
    float _2088;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2072 = fma(_1868, cbSceneParam._m0[63u].w, fma(_1864, cbSceneParam._m0[63u].z, fma(_1860, cbSceneParam._m0[63u].y, _1856 * cbSceneParam._m0[63u].x)));
        float _2073 = fma(_1868, cbSceneParam._m0[60u].w, fma(_1864, cbSceneParam._m0[60u].z, fma(_1860, cbSceneParam._m0[60u].y, _1856 * cbSceneParam._m0[60u].x))) / _2072;
        float _2074 = fma(_1868, cbSceneParam._m0[61u].w, fma(_1864, cbSceneParam._m0[61u].z, fma(_1860, cbSceneParam._m0[61u].y, _1856 * cbSceneParam._m0[61u].x))) / _2072;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2073 >= cbSceneParam._m0[64u].x) && (_2074 >= cbSceneParam._m0[64u].y)) && (_2073 <= cbSceneParam._m0[64u].z)) && (_2074 <= cbSceneParam._m0[64u].w))
        {
            float _2212 = fma(_1868, cbSceneParam._m0[62u].w, fma(_1864, cbSceneParam._m0[62u].z, fma(_1860, cbSceneParam._m0[62u].y, _1856 * cbSceneParam._m0[62u].x))) / _2072;
            float _2216 = isnan(cbSceneParam._m0[41u].w) ? _2212 : (isnan(_2212) ? cbSceneParam._m0[41u].w : max(_2212, cbSceneParam._m0[41u].w));
            float _2259 = (cbSceneParam._m0[33u].x - sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871))) * cbSceneParam._m0[33u].y;
            float _4276 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
            float _2266 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2073, cbSceneParam._m0[33u].w + _2074), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2073, _2074 - cbSceneParam._m0[33u].z), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2073 - cbSceneParam._m0[33u].z, _2074 - cbSceneParam._m0[33u].w), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2073 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2074), _2216), 0.0)).x), vec4(0.25)));
            float _2270 = 1.0 - (_2266 * cbSceneParam._m0[34u].x);
            float _2271 = 1.0 - (_2266 * cbSceneParam._m0[34u].y);
            float _2272 = 1.0 - (_2266 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2272) ? _2020 : (isnan(_2020) ? _2272 : min(_2020, _2272));
            frontier_phi_34_33_ladder_1 = isnan(_2271) ? _2019 : (isnan(_2019) ? _2271 : min(_2019, _2271));
            frontier_phi_34_33_ladder_2 = isnan(_2270) ? _2018 : (isnan(_2018) ? _2270 : min(_2018, _2270));
        }
        else
        {
            frontier_phi_34_33_ladder = _2020;
            frontier_phi_34_33_ladder_1 = _2019;
            frontier_phi_34_33_ladder_2 = _2018;
        }
        _2084 = frontier_phi_34_33_ladder_2;
        _2086 = frontier_phi_34_33_ladder_1;
        _2088 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2084 = _2018;
        _2086 = _2019;
        _2088 = _2020;
    }
    uvec4 _2093 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2095 = _2093.x * 14u;
    uint _2096 = _2095 + 13u;
    float _2103 = _800 + (-1.0);
    float _2108 = (cbLight._m0[_2096].x * _2103) + 1.0;
    float _2109 = (cbLight._m0[_2096].y * _2103) + 1.0;
    float _2110 = (cbLight._m0[_2096].z * _2103) + 1.0;
    float _2111 = (cbLight._m0[_2096].w * _2103) + 1.0;
    uint _2112 = _2095 + 5u;
    float _2118 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2122 = _2095 + 4u;
    float _2131 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2135 = _2095 | 1u;
    float _2146 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_650, _651, _652));
    float _2149 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_650, _651, _652));
    float _4312 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _4323 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2156 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.3183098733425140380859375;
    float _2163 = ((cbLight._m0[_2112].x * _2118) * _2156) + (((cbLight._m0[_2122].x * _2084) * _2131) * _2154);
    float _2164 = ((_2118 * cbLight._m0[_2112].y) * _2156) + (((cbLight._m0[_2122].y * _2086) * _2131) * _2154);
    float _2165 = ((_2118 * cbLight._m0[_2112].z) * _2156) + (((cbLight._m0[_2122].z * _2088) * _2131) * _2154);
    uvec4 _2169 = floatBitsToUint(cbLight._m0[_2095 + 12u]);
    bool _2171 = _2169.x == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2171)
    {
        _2273 = _2163;
        _2275 = _2164;
        _2277 = _2165;
    }
    else
    {
        uint _2281 = _2095 + 6u;
        float _2297 = (dot(vec3(cbLight._m0[_2095 + 2u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4334 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2300 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2273 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2163;
        _2275 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2164;
        _2277 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2165;
    }
    bool _2280 = _2169.y == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2280)
    {
        _2335 = _2273;
        _2337 = _2275;
        _2339 = _2277;
    }
    else
    {
        uint _2497 = _2095 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2095 + 3u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4350 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2516 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2335 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2273;
        _2337 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2275;
        _2339 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2277;
    }
    uint _2342 = _2095 + 8u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _653) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2095].x + _729;
    float _2358 = cbLight._m0[_2095].y + _730;
    float _2359 = cbLight._m0[_2095].z + _731;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2095].xyz));
    float _4366 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _4377 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2371 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2372 = dot(vec3(_650, _651, _652), vec3(_2364, _2365, _2366));
    float _4388 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2376 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2364, _2365, _2366));
    float _4399 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = _2356 * _2356;
    float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
    float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2396 = 1.0 - _2356;
    float _2407 = (0.5 / (((_2371 * ((_2370 * _2396) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2396) + _2356) * _2370))) * _2370;
    float _4410 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
    uint _2423 = _2095 + 9u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _653) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2135].x + _729;
    float _2437 = cbLight._m0[_2135].y + _730;
    float _2438 = cbLight._m0[_2135].z + _731;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2135].xyz));
    float _4421 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2450 = dot(vec3(_650, _651, _652), vec3(_2443, _2444, _2445));
    float _4432 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2443, _2444, _2445));
    float _4443 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2435 * _2435;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2472 = 1.0 - _2435;
    float _2482 = (0.5 / (((_2371 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2472) + _2435) * _2449))) * _2449;
    float _4454 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    float _2494 = (((_2471 * cbLight._m0[_2423].x) * _2484) * _2118) + ((((cbLight._m0[_2342].x * _2084) * _2395) * _2409) * _2131);
    float _2495 = (((_2471 * cbLight._m0[_2423].y) * _2484) * _2118) + ((((cbLight._m0[_2342].y * _2086) * _2395) * _2409) * _2131);
    float _2496 = (((_2471 * cbLight._m0[_2423].z) * _2484) * _2118) + ((((cbLight._m0[_2342].z * _2088) * _2395) * _2409) * _2131);
    float _2552;
    float _2554;
    float _2556;
    if (_2171)
    {
        _2552 = _2494;
        _2554 = _2495;
        _2556 = _2496;
    }
    else
    {
        uint _2558 = _2095 + 2u;
        uint _2562 = _2095 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _653) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _729;
        float _2579 = cbLight._m0[_2558].y + _730;
        float _2580 = cbLight._m0[_2558].z + _731;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2558].xyz));
        float _4465 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2592 = dot(vec3(_650, _651, _652), vec3(_2585, _2586, _2587));
        float _4476 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4487 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2614 = 1.0 - _2577;
        float _2624 = (0.5 / (((_2371 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2614) + _2577) * _2591))) * _2591;
        float _4498 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2552 = (((_2613 * cbLight._m0[_2562].x) * _2626) * _2627) + _2494;
        _2554 = (((_2613 * cbLight._m0[_2562].y) * _2626) * _2627) + _2495;
        _2556 = (((_2613 * cbLight._m0[_2562].z) * _2626) * _2627) + _2496;
    }
    float _2658;
    float _2660;
    float _2662;
    if (_2280)
    {
        _2658 = _2552;
        _2660 = _2554;
        _2662 = _2556;
    }
    else
    {
        uint _2669 = _2095 + 3u;
        uint _2673 = _2095 + 11u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _653) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _729;
        float _2690 = cbLight._m0[_2669].y + _730;
        float _2691 = cbLight._m0[_2669].z + _731;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2669].xyz));
        float _4514 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2703 = dot(vec3(_650, _651, _652), vec3(_2696, _2697, _2698));
        float _4525 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4536 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2724 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2725 = 1.0 - _2688;
        float _2735 = (0.5 / (((_2371 * ((_2702 * _2725) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2725) + _2688) * _2702))) * _2702;
        float _4547 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2658 = (((_2724 * cbLight._m0[_2673].x) * _2737) * _2738) + _2552;
        _2660 = (((_2724 * cbLight._m0[_2673].y) * _2737) * _2738) + _2554;
        _2662 = (((_2724 * cbLight._m0[_2673].z) * _2737) * _2738) + _2556;
    }
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_2093.y == 0u)
    {
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.x;
        uint _2771 = uint((float(_2759.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2760))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2760)));
        float _2781 = (log2(_1871 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2782 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        uint _2785 = uint(isnan(14.0) ? _2782 : (isnan(_2782) ? 14.0 : min(_2782, 14.0)));
        uvec4 _2790 = texelFetch(g_lightClusterGridBuffer, int(((_2785 << 2u) + (_2771 << 6u)) >> 2u));
        uint _2791 = _2790.x;
        uint _2792 = _2759.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2792 >> 4u) & 15u)) + 4294967295u) & _2791) == 0u) || ((_2792 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3032)
                {
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3020;
                    frontier_phi_66_pred_2 = _3019;
                    frontier_phi_66_pred_3 = _3018;
                    frontier_phi_66_pred_4 = _3017;
                    frontier_phi_66_pred_5 = _3016;
                }
                else
                {
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    uint _3146;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3031;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3150 = uint(findLSB(_3146)) + (_3022 << 5u);
                        uint _3147 = (_3146 + 4294967295u) & _3146;
                        uint _3152 = _3150 * 48u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3172 = (_3150 * 48u) + 4u;
                        vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3191 = (_3150 * 48u) + 8u;
                        vec3 _3202 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x));
                        float _3206 = _3166.x - _1869;
                        float _3207 = _3166.y - _1870;
                        float _3208 = _3166.z - _1871;
                        float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                        float _3212 = inversesqrt(_3209);
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3216 = dot(vec3(_756, _759, _762), vec3(_3213, _3214, _3215));
                        float _3221 = 1.0 - (_3209 * _3166.w);
                        float _4573 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3223 = sqrt(_3209) * _3185.w;
                        float _3226 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3216) + _3227;
                        float _3233 = _3223 * _3223;
                        float _3237 = ((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3222) / ((_3233 * 0.699999988079071044921875) + 1.0);
                        float _3241 = (-0.0) - _1869;
                        float _3242 = (-0.0) - _1870;
                        float _3243 = (-0.0) - _1871;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3257 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _816;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3248 + _3213;
                        float _3269 = _3249 + _3214;
                        float _3270 = _3250 + _3215;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_756, _759, _762), vec3(_3248, _3249, _3250));
                        float _4589 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3282 = dot(vec3(_756, _759, _762), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4600 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3226 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3216) + _3291;
                        float _4611 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4622 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3289 * _3289) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125))) * _3222;
                        _3075 = (_3237 * _3185.x) + _3143;
                        _3076 = (_3237 * _3185.y) + _3144;
                        _3077 = (_3237 * _3185.z) + _3145;
                        _3072 = (_3317 * _3202.x) + _3140;
                        _3073 = (_3317 * _3202.y) + _3141;
                        _3074 = (_3317 * _3202.z) + _3142;
                        if (_3147 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3147;
                        }
                    }
                    frontier_phi_66_pred = _3077;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                _2882 = frontier_phi_66_pred;
                _2880 = frontier_phi_66_pred_1;
                _2878 = frontier_phi_66_pred_2;
                _2876 = frontier_phi_66_pred_3;
                _2874 = frontier_phi_66_pred_4;
                _2872 = frontier_phi_66_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2872;
                    _3017 = _2874;
                    _3018 = _2876;
                    _3019 = _2878;
                    _3020 = _2880;
                    _3021 = _2882;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2888) & _2791) == 0u)
        {
            _2984 = _2871;
            _2986 = _2873;
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
            float _3010 = _3009 * _1869;
            float _3011 = _3009 * _1870;
            float _3012 = _3009 * _1871;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3123 = _2871;
                float _3124 = _2873;
                float _3125 = _2875;
                float _3126 = _2877;
                float _3127 = _2879;
                float _3128 = _2881;
                uint _3129 = _2888;
                uint _3138;
                bool _3139;
                for (;;)
                {
                    _3138 = texelFetch(g_lightClassification, int((((_2785 << 5u) + (_2771 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                    _3139 = _3138 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3139)
                    {
                        frontier_phi_72_pred = _3128;
                        frontier_phi_72_pred_1 = _3127;
                        frontier_phi_72_pred_2 = _3126;
                        frontier_phi_72_pred_3 = _3125;
                        frontier_phi_72_pred_4 = _3124;
                        frontier_phi_72_pred_5 = _3123;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3335 = _3123;
                        float _3336 = _3124;
                        float _3337 = _3125;
                        float _3338 = _3126;
                        float _3339 = _3127;
                        float _3340 = _3128;
                        uint _3341 = _3138;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3426;
                        float _3472;
                        bool _3473;
                        for (;;)
                        {
                            uint _3352 = ((_3129 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3413 = (_3352 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3352 * 40u) + 24u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3447 = (_3352 * 40u) + 28u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3472 = fma(_1871, _3460.z, fma(_1870, _3460.y, _3460.x * _1869)) + _3460.w;
                            _3473 = !((fma(_1871, _3441.z, fma(_1870, _3441.y, _3441.x * _1869)) + _3441.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3473)
                            {
                                float _3500 = _3367.x - _1869;
                                float _3501 = _3367.y - _1870;
                                float _3502 = _3367.z - _1871;
                                float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                                float _3506 = inversesqrt(_3503);
                                float _3507 = _3506 * _3500;
                                float _3508 = _3506 * _3501;
                                float _3509 = _3506 * _3502;
                                float _3513 = 1.0 - (_3503 / (_3368 * _3368));
                                float _4633 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3518 = sqrt(_3503) * _3383.w;
                                float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                                float _3521 = _3520 * _3520;
                                float _3524 = ((1.0 - _3521) * dot(vec3(_3507, _3508, _3509), vec3(_756, _759, _762))) + _3521;
                                float _3527 = _3518 * _3518;
                                float _3531 = (fma(_1871, _3410.z, fma(_1870, _3410.y, _3410.x * _1869)) + _3410.w) / _3472;
                                float _3532 = (fma(_1871, _3426.z, fma(_1870, _3426.y, _3426.x * _1869)) + _3426.w) / _3472;
                                float _3536 = 1.0 - dot(vec2(_3531, _3532), vec2(_3531, _3532));
                                float _4649 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3538 = _3537 * (((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3514) / ((_3527 * 0.699999988079071044921875) + 1.0));
                                float _3550 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                                float _3551 = 1.0 - _816;
                                float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                                float _3559 = _3558 * _3558;
                                float _3560 = _3559 * _3559;
                                float _3561 = _3507 - _3010;
                                float _3562 = _3508 - _3011;
                                float _3563 = _3509 - _3012;
                                float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                                float _3571 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4660 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3575 = dot(vec3(_756, _759, _762), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                                float _4671 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                                float _3583 = _3520 * _3559;
                                float _3584 = _3583 * _3583;
                                float _3590 = ((1.0 - _3584) * dot(vec3(_756, _759, _762), vec3(_3507, _3508, _3509))) + _3584;
                                float _4682 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3592 = 1.0 - _3559;
                                float _3602 = (0.5 / (((_3591 * ((_3574 * _3592) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3559) * _3574))) * _3591;
                                float _4693 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3612 = (_3537 * _3514) * (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3582 * _3582) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3538 * _3383.y;
                                frontier_phi_78_pred_1 = _3538 * _3383.x;
                                frontier_phi_78_pred_2 = _3612 * _3395.z;
                                frontier_phi_78_pred_3 = _3612 * _3395.y;
                                frontier_phi_78_pred_4 = _3612 * _3395.x;
                                frontier_phi_78_pred_5 = _3538 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3620 = frontier_phi_78_pred;
                            _3619 = frontier_phi_78_pred_1;
                            _3618 = frontier_phi_78_pred_2;
                            _3617 = frontier_phi_78_pred_3;
                            _3616 = frontier_phi_78_pred_4;
                            _3621 = frontier_phi_78_pred_5;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3327 = _3621 + _3340;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3327;
                        frontier_phi_72_pred_1 = _3326;
                        frontier_phi_72_pred_2 = _3325;
                        frontier_phi_72_pred_3 = _3324;
                        frontier_phi_72_pred_4 = _3323;
                        frontier_phi_72_pred_5 = _3322;
                    }
                    _2995 = frontier_phi_72_pred;
                    _2993 = frontier_phi_72_pred_1;
                    _2991 = frontier_phi_72_pred_2;
                    _2989 = frontier_phi_72_pred_3;
                    _2987 = frontier_phi_72_pred_4;
                    _2985 = frontier_phi_72_pred_5;
                    uint _3130 = _3129 + 1u;
                    if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3123 = _2985;
                        _3124 = _2987;
                        _3125 = _2989;
                        _3126 = _2991;
                        _3127 = _2993;
                        _3128 = _2995;
                        _3129 = _3130;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2995;
                frontier_phi_60_61_ladder_1 = _2993;
                frontier_phi_60_61_ladder_2 = _2989;
                frontier_phi_60_61_ladder_3 = _2987;
                frontier_phi_60_61_ladder_4 = _2985;
                frontier_phi_60_61_ladder_5 = _2991;
            }
            else
            {
                frontier_phi_60_61_ladder = _2881;
                frontier_phi_60_61_ladder_1 = _2879;
                frontier_phi_60_61_ladder_2 = _2875;
                frontier_phi_60_61_ladder_3 = _2873;
                frontier_phi_60_61_ladder_4 = _2871;
                frontier_phi_60_61_ladder_5 = _2877;
            }
            _2984 = frontier_phi_60_61_ladder_4;
            _2986 = frontier_phi_60_61_ladder_3;
            _2988 = frontier_phi_60_61_ladder_2;
            _2990 = frontier_phi_60_61_ladder_5;
            _2992 = frontier_phi_60_61_ladder_1;
            _2994 = frontier_phi_60_61_ladder;
        }
        float _2999 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2804 = (_2999 * _2990) + _2335;
        _2806 = (_2999 * _2992) + _2337;
        _2808 = (_2999 * _2994) + _2339;
        _2810 = ((_2984 * 0.039999999105930328369140625) * _2999) + _2658;
        _2812 = ((_2986 * 0.039999999105930328369140625) * _2999) + _2660;
        _2814 = ((_2988 * 0.039999999105930328369140625) * _2999) + _2662;
    }
    else
    {
        _2804 = _2335;
        _2806 = _2337;
        _2808 = _2339;
        _2810 = _2658;
        _2812 = _2660;
        _2814 = _2662;
    }
    float _4709 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4720 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4731 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    uint _2834 = _238 + 6u;
    float _2842 = _737 / cbSceneParam._m0[86u].x;
    float _2843 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2857 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2859 = _2857.x;
    float _2860 = _2857.y;
    float _2861 = _2857.z;
    float _2862 = _2857.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2897 = _2896 / _671;
        float _2908 = _2897 * _722;
        float _2909 = _723 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2912 = _2897 * _724;
        float _2914 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2909;
        float _2922 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2910 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3047 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3085 = ((abs(_2922 / _2910) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2932 * _3056) - exp2(_2932 * _3057)) * _3045))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2862);
        _2934 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2859;
        _2936 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2860;
        _2938 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2861;
        _2940 = _3096 * _2862;
    }
    else
    {
        _2934 = _2859;
        _2936 = _2860;
        _2938 = _2861;
        _2940 = _2862;
    }
    float _2952 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2953 = _2952 == 3.0;
    float _2954 = log2(_2940);
    float _2961 = exp2(_2954 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2804 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _800))) + ((_2810 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2962 = exp2(_2954 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2806 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _800))) + ((_2812 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2963 = exp2(_2954 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2808 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _800))) + ((_2814 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2972 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2972 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.y = _2972 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.z = _2972 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.w = cbInstanceData._m0[_2834].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2834].w;
}


