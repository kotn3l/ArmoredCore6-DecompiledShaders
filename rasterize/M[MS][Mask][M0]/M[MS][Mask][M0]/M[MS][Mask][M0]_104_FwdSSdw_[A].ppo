#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1394;
float _3777;
float _3778;
float _3779;
float _3780;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3789 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3800 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3811 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3822 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _480 = (_473 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _481 = (_473 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _482 = (_473 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3833 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _553 = (_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480;
    float _554 = (_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481;
    float _555 = (_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[24u].z) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3844 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _625 = (_332.x * cbMtdParam._m0[9u].x) * ((_615 * ((_573.x * cbMtdParam._m0[14u].x) - _553)) + _553);
    float _626 = (_332.y * cbMtdParam._m0[9u].y) * ((_615 * ((_573.y * cbMtdParam._m0[14u].y) - _554)) + _554);
    float _627 = (_332.z * cbMtdParam._m0[9u].z) * ((_615 * ((_573.z * cbMtdParam._m0[14u].z) - _555)) + _555);
    float _631 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _625;
    float _634 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _626;
    float _637 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _627;
    float _645 = (((_625 - _631) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) + _631) * 4.55000019073486328125;
    float _647 = (((_626 - _634) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _634) * 4.55000019073486328125;
    float _649 = (((_627 - _637) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _637) * 4.55000019073486328125;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _705 = _701.z;
    float _712 = ((_684.x - _703) * _473) + _703;
    float _713 = ((_684.y - _704) * _473) + _704;
    float _714 = ((_684.z - _705) * _473) + _705;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _737 = ((_726.x - _712) * _546) + _712;
    float _738 = ((_726.y - _713) * _546) + _713;
    float _739 = ((_726.z - _714) * _546) + _714;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _764 = ((_751.z - _739) * _615) + _739;
    float _767 = ((((_751.x - _737) * _615) + _737) * 2.0) + (-1.0);
    float _768 = ((((_751.y - _738) * _615) + _738) * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3855 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    vec4 _794 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _806 = (_767 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_661.x * 2.0) + (-1.0)))) + (((_794.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _807 = (_768 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_661.y * 2.0) + (-1.0)))) + (((_794.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _812 = (((_661.z - _764) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _764;
    float _816 = ((_794.z - _812) * cbMtdParam._m0[19u].w) + _812;
    float _818 = cbMtdParam._m0[22u].x + _794.w;
    float _821 = fma(_774, _242 * NORMAL.x, fma(_807, _249 * TANGENT.x, (_235 * _227) * _806));
    float _824 = fma(_774, _242 * NORMAL.y, fma(_807, _249 * TANGENT.y, (_235 * _228) * _806));
    float _827 = fma(_774, _242 * NORMAL.z, fma(_807, _249 * TANGENT.z, (_235 * _229) * _806));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _3866 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _835 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _3888 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3899 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3910 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    vec4 _918 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _920 = _918.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1074 = sqrt(((_904 * _904) + (_905 * _905)) + (_906 * _906));
        float _1080 = (cbMatDynParam._m0[5u].x * _1074) + cbMatDynParam._m0[5u].y;
        float _3921 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1085 = (cbMatDynParam._m0[5u].z * _1074) + cbMatDynParam._m0[5u].w;
        float _3932 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) - _1081)) + _1081) < ((_920 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _950 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _953 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _956 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _969 = _276 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_970].z;
    float _3943 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    vec4 _990 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _994 = ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * TEXCOORD_5.w) * _990.x;
    float _995 = dot(vec3(_832, _833, _834), vec3(_911, _912, _913));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _832) - _911;
    float _1003 = (_998 * _833) - _912;
    float _1004 = (_998 * _834) - _913;
    float _1008 = abs(dot(vec3(_911, _912, _913), vec3(_832, _833, _834)));
    float _3976 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_835);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1393;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1122 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1126 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1151 = _1055 + _832;
        float _1152 = _1059 + _833;
        float _1153 = _1063 + _834;
        float _1163 = fma(_1153, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151)) - _1118;
        float _1164 = fma(_1153, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151)) - _1122;
        float _1165 = fma(_1153, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151)) - _1126;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1221 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1187.x + (-0.5));
        float _1223 = _1221 * (_1187.y + (-0.5));
        float _1224 = _1221 * (_1187.z + (-0.5));
        float _1231 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1194.x + (-0.5));
        float _1233 = _1231 * (_1194.y + (-0.5));
        float _1234 = _1231 * (_1194.z + (-0.5));
        float _1241 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1201.x + (-0.5));
        float _1243 = _1241 * (_1201.y + (-0.5));
        float _1244 = _1241 * (_1201.z + (-0.5));
        float _1251 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1208.x + (-0.5));
        float _1253 = _1251 * (_1208.y + (-0.5));
        float _1254 = _1251 * (_1208.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1275 = (dot(vec3(_832, _833, _834), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1285 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4024 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1287 + 1.0))) + _1292) * _1255;
        float _1302 = _1223 * 0.5;
        float _1303 = _1233 * 0.5;
        float _1304 = _1243 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_832, _833, _834), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4057 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1329 + 1.0))) + _1334) * _1256;
        float _1344 = _1224 * 0.5;
        float _1345 = _1234 * 0.5;
        float _1346 = _1244 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_832, _833, _834), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4090 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1371 + 1.0))) + _1376) * _1257;
        _1393 = _1224;
        _1395 = _1223;
        _1396 = _1222;
        _1397 = _1234;
        _1398 = _1233;
        _1399 = _1232;
        _1400 = _1244;
        _1401 = _1243;
        _1402 = _1242;
        _1403 = _1257;
        _1404 = _1256;
        _1405 = _1255;
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1394;
        _1395 = _1394;
        _1396 = _1394;
        _1397 = _1394;
        _1398 = _1394;
        _1399 = _1394;
        _1400 = _1394;
        _1401 = _1394;
        _1402 = _1394;
        _1403 = _1394;
        _1404 = _1394;
        _1405 = _1394;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1438 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1442 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1465 = _1055 + _832;
        float _1466 = _1059 + _833;
        float _1467 = _1063 + _834;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_832, _833, _834), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4153 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_832, _833, _834), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4186 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_832, _833, _834), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4219 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1394;
        _1704 = _1394;
        _1705 = _1394;
        _1706 = _1394;
        _1707 = _1394;
        _1708 = _1394;
        _1709 = _1394;
        _1710 = _1394;
        _1711 = _1394;
        _1712 = _1394;
        _1713 = _1394;
        _1714 = _1394;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1406)) + _1406;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1407)) + _1407;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _1002 * 0.5;
    float _1772 = _1003 * 0.5;
    float _1773 = _1004 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1393, _1397, _1400, _1403));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1888 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1892 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1896 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1899 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1902 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1905 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1933;
        if (_1899 > 0.0)
        {
            _1933 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1933 = frontier_phi_17_15_ladder;
        }
        float _2156;
        if (_1902 > 0.0)
        {
            _2156 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2156 = frontier_phi_26_22_ladder;
        }
        float _2402;
        if (_1905 > 0.0)
        {
            _2402 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2402 = frontier_phi_38_33_ladder;
        }
        float _2404 = isnan(_2156) ? _1933 : (isnan(_1933) ? _2156 : min(_1933, _2156));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1899) + _1888;
        float _2410 = (_2405 * _1902) + _1892;
        float _2411 = (_2405 * _1905) + _1896;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2412;
        float _2416 = _2412 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 > _2416) || ((_2410 < _2414) || ((_2409 < _2414) || (_2409 > _2416))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_16_38_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1921 = frontier_phi_16_38_ladder_2;
        _1923 = frontier_phi_16_38_ladder_1;
        _1925 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1840);
        _1921 = _1909.x * cbModelParam._m0[1u].y;
        _1923 = _1909.y * cbModelParam._m0[1u].y;
        _1925 = _1909.z * cbModelParam._m0[1u].y;
    }
    float _1929 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1929 : min(cbModelParam._m0[25u].w, _1929));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _1999 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _2002 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2161;
        if (_1996 > 0.0)
        {
            _2161 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2161 = frontier_phi_28_24_ladder;
        }
        float _2429;
        if (_1999 > 0.0)
        {
            _2429 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2429 = frontier_phi_40_35_ladder;
        }
        float _2634;
        if (_2002 > 0.0)
        {
            _2634 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2634 = frontier_phi_49_46_ladder;
        }
        float _2636 = isnan(_2429) ? _2161 : (isnan(_2161) ? _2429 : min(_2161, _2429));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _1996) + _1985;
        float _2642 = (_2637 * _1999) + _1989;
        float _2643 = (_2637 * _2002) + _1993;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2644;
        float _2647 = _2644 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2643 > _2647) || ((_2643 < _2645) || ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 < _2645) || (_2641 > _2647))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2643, cbModelParam._m0[17u].z, fma(_2642, cbModelParam._m0[17u].y, _2641 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2643, cbModelParam._m0[18u].z, fma(_2642, cbModelParam._m0[18u].y, _2641 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2643, cbModelParam._m0[19u].z, fma(_2642, cbModelParam._m0[19u].y, _2641 * cbModelParam._m0[19u].x))), _1930);
            frontier_phi_25_49_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_25_49_ladder_2;
        _2023 = frontier_phi_25_49_ladder_1;
        _2025 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1930);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2037 = ((((1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1023 * _1010)) * _994;
    float _2038 = _2037 * ((cbModelParam._m0[1u].w * (_2021 - _1921)) + _1921);
    float _2039 = _2037 * ((cbModelParam._m0[1u].w * (_2023 - _1923)) + _1923);
    float _2040 = _2037 * ((cbModelParam._m0[1u].w * (_2025 - _1925)) + _1925);
    float _2043 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    vec4 _2057 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_931, _932));
    float _2059 = _2057.w;
    float _2071 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2059);
    float _2072 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2059);
    float _2073 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2059);
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _994 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2115 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2119 = _2079 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_832, _833, _834));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_832, _833, _834));
    float _4355 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4366 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2096].x * _2102) * _2140) + (((cbLight._m0[_2106].x * _2071) * _2115) * _2138);
    float _2148 = ((_2102 * cbLight._m0[_2096].y) * _2140) + (((cbLight._m0[_2106].y * _2072) * _2115) * _2138);
    float _2149 = ((_2102 * cbLight._m0[_2096].z) * _2140) + (((cbLight._m0[_2106].z * _2073) * _2115) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2147;
        _2168 = _2148;
        _2170 = _2149;
    }
    else
    {
        uint _2174 = _2079 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4377 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2193 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2149;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2373 = _2079 + 7u;
        float _2389 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4393 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2392 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2211 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2166;
        _2213 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2168;
        _2215 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2170;
    }
    uint _2218 = _2079 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _835) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2079].x + _911;
    float _2234 = cbLight._m0[_2079].y + _912;
    float _2235 = cbLight._m0[_2079].z + _913;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2079].xyz));
    float _4409 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _4420 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2247 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2248 = dot(vec3(_832, _833, _834), vec3(_2240, _2241, _2242));
    float _4431 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2240, _2241, _2242));
    float _4442 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2247 * ((_2246 * _2272) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2272) + _2232) * _2246))) * _2246;
    float _4453 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2299 = _2079 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _835) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2119].x + _911;
    float _2313 = cbLight._m0[_2119].y + _912;
    float _2314 = cbLight._m0[_2119].z + _913;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2119].xyz));
    float _4464 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2326 = dot(vec3(_832, _833, _834), vec3(_2319, _2320, _2321));
    float _4475 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2319, _2320, _2321));
    float _4486 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2348 = 1.0 - _2311;
    float _2358 = (0.5 / (((_2247 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2348) + _2311) * _2325))) * _2325;
    float _4497 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2370 = (((_2347 * cbLight._m0[_2299].x) * _2360) * _2102) + ((((cbLight._m0[_2218].x * _2071) * _2271) * _2285) * _2115);
    float _2371 = (((_2347 * cbLight._m0[_2299].y) * _2360) * _2102) + ((((cbLight._m0[_2218].y * _2072) * _2271) * _2285) * _2115);
    float _2372 = (((_2347 * cbLight._m0[_2299].z) * _2360) * _2102) + ((((cbLight._m0[_2218].z * _2073) * _2271) * _2285) * _2115);
    float _2434;
    float _2436;
    float _2438;
    if (_2155)
    {
        _2434 = _2370;
        _2436 = _2371;
        _2438 = _2372;
    }
    else
    {
        uint _2440 = _2079 + 2u;
        uint _2444 = _2079 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _835) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _911;
        float _2461 = cbLight._m0[_2440].y + _912;
        float _2462 = cbLight._m0[_2440].z + _913;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2440].xyz));
        float _4508 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2474 = dot(vec3(_832, _833, _834), vec3(_2467, _2468, _2469));
        float _4519 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4530 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2247 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2496) + _2459) * _2473))) * _2473;
        float _4541 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2434 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2370;
        _2436 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2371;
        _2438 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2372;
    }
    float _2544;
    float _2546;
    float _2548;
    if (_2173)
    {
        _2544 = _2434;
        _2546 = _2436;
        _2548 = _2438;
    }
    else
    {
        uint _2555 = _2079 + 3u;
        uint _2559 = _2079 + 11u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _835) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _911;
        float _2576 = cbLight._m0[_2555].y + _912;
        float _2577 = cbLight._m0[_2555].z + _913;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2555].xyz));
        float _4557 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2589 = dot(vec3(_832, _833, _834), vec3(_2582, _2583, _2584));
        float _4568 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4579 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2610 = (exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2611 = 1.0 - _2574;
        float _2621 = (0.5 / (((_2247 * ((_2588 * _2611) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2611) + _2574) * _2588))) * _2588;
        float _4590 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2544 = (((_2610 * cbLight._m0[_2559].x) * _2623) * _2624) + _2434;
        _2546 = (((_2610 * cbLight._m0[_2559].y) * _2623) * _2624) + _2436;
        _2548 = (((_2610 * cbLight._m0[_2559].z) * _2623) * _2624) + _2438;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2077.y == 0u)
    {
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2699;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2699;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2699;
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2715)));
        float _2736 = (log2(_2702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            uint _3006 = 0u;
            uint _3015;
            bool _3016;
            for (;;)
            {
                _3015 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                _3016 = _3015 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3016)
                {
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                else
                {
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    uint _3151;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3015;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3155 = uint(findLSB(_3151)) + (_3006 << 5u);
                        uint _3152 = (_3151 + 4294967295u) & _3151;
                        uint _3157 = _3155 * 48u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3177 = (_3155 * 48u) + 4u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3196 = (_3155 * 48u) + 8u;
                        vec3 _3207 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x));
                        float _3211 = _3171.x - _2700;
                        float _3212 = _3171.y - _2701;
                        float _3213 = _3171.z - _2702;
                        float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                        float _3217 = inversesqrt(_3214);
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3221 = dot(vec3(_950, _953, _956), vec3(_3218, _3219, _3220));
                        float _3226 = 1.0 - (_3214 * _3171.w);
                        float _4616 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3228 = sqrt(_3214) * _3190.w;
                        float _3231 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3221) + _3232;
                        float _3238 = _3228 * _3228;
                        float _3242 = ((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3227) / ((_3238 * 0.699999988079071044921875) + 1.0);
                        float _3246 = (-0.0) - _2700;
                        float _3247 = (-0.0) - _2701;
                        float _3248 = (-0.0) - _2702;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3263 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _1010;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_950, _953, _956), vec3(_3253, _3254, _3255));
                        float _4632 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3288 = dot(vec3(_950, _953, _956), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4643 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3231 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3221) + _3297;
                        float _4654 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4665 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3295 * _3295) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125))) * _3227;
                        _3075 = (_3242 * _3190.x) + _3148;
                        _3076 = (_3242 * _3190.y) + _3149;
                        _3077 = (_3242 * _3190.z) + _3150;
                        _3072 = (_3323 * _3207.x) + _3145;
                        _3073 = (_3323 * _3207.y) + _3146;
                        _3074 = (_3323 * _3207.z) + _3147;
                        if (_3152 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3152;
                        }
                    }
                    frontier_phi_66_pred = _3072;
                    frontier_phi_66_pred_1 = _3077;
                    frontier_phi_66_pred_2 = _3076;
                    frontier_phi_66_pred_3 = _3075;
                    frontier_phi_66_pred_4 = _3074;
                    frontier_phi_66_pred_5 = _3073;
                }
                _2848 = frontier_phi_66_pred;
                _2858 = frontier_phi_66_pred_1;
                _2856 = frontier_phi_66_pred_2;
                _2854 = frontier_phi_66_pred_3;
                _2852 = frontier_phi_66_pred_4;
                _2850 = frontier_phi_66_pred_5;
                uint _3007 = _3006 + 1u;
                if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3000 = _2848;
                    _3001 = _2850;
                    _3002 = _2852;
                    _3003 = _2854;
                    _3004 = _2856;
                    _3005 = _2858;
                    _3006 = _3007;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((4294967295u << _2864) & _2746) == 0u)
        {
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
        }
        else
        {
            float _2993 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
            float _2994 = _2993 * _2700;
            float _2995 = _2993 * _2701;
            float _2996 = _2993 * _2702;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _3128 = _2847;
                float _3129 = _2849;
                float _3130 = _2851;
                float _3131 = _2853;
                float _3132 = _2855;
                float _3133 = _2857;
                uint _3134 = _2864;
                uint _3143;
                bool _3144;
                for (;;)
                {
                    _3143 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                    _3144 = _3143 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3144)
                    {
                        frontier_phi_77_pred = _3133;
                        frontier_phi_77_pred_1 = _3132;
                        frontier_phi_77_pred_2 = _3131;
                        frontier_phi_77_pred_3 = _3130;
                        frontier_phi_77_pred_4 = _3129;
                        frontier_phi_77_pred_5 = _3128;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        uint _3356 = _3143;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3134 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2702, _3474.z, fma(_2701, _3474.y, _3474.x * _2700)) + _3474.w;
                            _3487 = !((fma(_2702, _3455.z, fma(_2701, _3455.y, _3455.x * _2700)) + _3455.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2700;
                                float _3515 = _3382.y - _2701;
                                float _3516 = _3382.z - _2702;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4676 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_950, _953, _956))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2702, _3425.z, fma(_2701, _3425.y, _3425.x * _2700)) + _3425.w) / _3486;
                                float _3546 = (fma(_2702, _3440.z, fma(_2701, _3440.y, _3440.x * _2700)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4692 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _1010;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _2994;
                                float _3576 = _3522 - _2995;
                                float _3577 = _3523 - _2996;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_950, _953, _956), vec3((-0.0) - _2994, (-0.0) - _2995, (-0.0) - _2996));
                                float _4703 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3589 = dot(vec3(_950, _953, _956), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4714 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_950, _953, _956), vec3(_3521, _3522, _3523))) + _3598;
                                float _4725 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4736 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3552 * _3398.y;
                                frontier_phi_83_pred_1 = _3552 * _3398.x;
                                frontier_phi_83_pred_2 = _3626 * _3410.z;
                                frontier_phi_83_pred_3 = _3626 * _3410.y;
                                frontier_phi_83_pred_4 = _3626 * _3410.x;
                                frontier_phi_83_pred_5 = _3552 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_83_pred;
                            _3633 = frontier_phi_83_pred_1;
                            _3632 = frontier_phi_83_pred_2;
                            _3631 = frontier_phi_83_pred_3;
                            _3630 = frontier_phi_83_pred_4;
                            _3635 = frontier_phi_83_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3342;
                        frontier_phi_77_pred_1 = _3341;
                        frontier_phi_77_pred_2 = _3340;
                        frontier_phi_77_pred_3 = _3339;
                        frontier_phi_77_pred_4 = _3338;
                        frontier_phi_77_pred_5 = _3337;
                    }
                    _2979 = frontier_phi_77_pred;
                    _2977 = frontier_phi_77_pred_1;
                    _2975 = frontier_phi_77_pred_2;
                    _2973 = frontier_phi_77_pred_3;
                    _2971 = frontier_phi_77_pred_4;
                    _2969 = frontier_phi_77_pred_5;
                    uint _3135 = _3134 + 1u;
                    if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3128 = _2969;
                        _3129 = _2971;
                        _3130 = _2973;
                        _3131 = _2975;
                        _3132 = _2977;
                        _3133 = _2979;
                        _3134 = _3135;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2973;
                frontier_phi_58_59_ladder_1 = _2979;
                frontier_phi_58_59_ladder_2 = _2977;
                frontier_phi_58_59_ladder_3 = _2975;
                frontier_phi_58_59_ladder_4 = _2971;
                frontier_phi_58_59_ladder_5 = _2969;
            }
            else
            {
                frontier_phi_58_59_ladder = _2851;
                frontier_phi_58_59_ladder_1 = _2857;
                frontier_phi_58_59_ladder_2 = _2855;
                frontier_phi_58_59_ladder_3 = _2853;
                frontier_phi_58_59_ladder_4 = _2849;
                frontier_phi_58_59_ladder_5 = _2847;
            }
            _2968 = frontier_phi_58_59_ladder_5;
            _2970 = frontier_phi_58_59_ladder_4;
            _2972 = frontier_phi_58_59_ladder;
            _2974 = frontier_phi_58_59_ladder_3;
            _2976 = frontier_phi_58_59_ladder_2;
            _2978 = frontier_phi_58_59_ladder_1;
        }
        float _2983 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _2759 = (_2983 * _2974) + _2211;
        _2761 = (_2983 * _2976) + _2213;
        _2763 = (_2983 * _2978) + _2215;
        _2765 = ((_2968 * 0.039999999105930328369140625) * _2983) + _2544;
        _2767 = ((_2970 * 0.039999999105930328369140625) * _2983) + _2546;
        _2769 = ((_2972 * 0.039999999105930328369140625) * _2983) + _2548;
    }
    else
    {
        _2759 = _2211;
        _2761 = _2213;
        _2763 = _2215;
        _2765 = _2544;
        _2767 = _2546;
        _2769 = _2548;
    }
    float _4752 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4763 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4774 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2786 = ((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2759 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _994))) + ((_2765 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    float _2787 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2761 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _994))) + ((_2767 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2763 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _994))) + ((_2769 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1829)) * cbPerFrame._m0[3u].x);
    uint _2789 = _276 + 6u;
    float _2797 = _931 / cbSceneParam._m0[86u].x;
    float _2798 = _932 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2873 = _2872 / _853;
        float _2884 = _2873 * _904;
        float _2885 = _905 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _906;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3029 = 1.0 / cbSceneParam._m0[80u].x;
            float _3030 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3031 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            _3085 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3040 - _3041) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))))) * _3029)) - ((exp2(_2908 * _3040) - exp2(_2908 * _3041)) * _3029))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2817);
        _2910 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2912 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2914 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2916 = _3096 * _2817;
    }
    else
    {
        _2910 = _2814;
        _2912 = _2815;
        _2914 = _2816;
        _2916 = _2817;
    }
    bool _3123;
    vec4 _2926;
    vec4 _2948;
    float _2950;
    float _2954;
    float _2955;
    float _2956;
    float _2957;
    bool _2967;
    for (;;)
    {
        _2926 = cbMatDynParam._m0[0u];
        float _2928 = roundEven(_2926.y);
        bool _2929 = _2928 == 3.0;
        float _2930 = log2(_2916);
        float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * _2786;
        float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * _2787;
        float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * _2788;
        float _2946 = _920 + (-0.5);
        _2948 = cbMtdParam._m0[1u];
        _2950 = _2948.y * _2946;
        float _2953 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2954 = _2953 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
        _2955 = _2953 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
        _2956 = _2953 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
        _2957 = _2946 * 0.999000012874603271484375;
        _2967 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2967)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _2957) < 0.5)
            {
                _3123 = true;
                break;
            }
        }
        uint _3064 = _969 + uint(_2926.w);
        if ((cbInstanceData._m0[_3064].w < 1.0) && ((cbInstanceData._m0[_3064].w + _2957) < 0.5))
        {
            _3123 = true;
            break;
        }
        if ((_2950 + 1.0) < _2948.x)
        {
            _3123 = true;
            break;
        }
        _3123 = false;
        break;
    }
    float _3328;
    if (_3123)
    {
        discard_state = true;
        _3328 = 0.0;
    }
    else
    {
        _3328 = cbInstanceData._m0[_2789].w;
    }
    SV_Target.x = _2954;
    SV_Target.y = _2955;
    SV_Target.z = _2956;
    SV_Target.w = _3328;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
    discard_exit();
}


