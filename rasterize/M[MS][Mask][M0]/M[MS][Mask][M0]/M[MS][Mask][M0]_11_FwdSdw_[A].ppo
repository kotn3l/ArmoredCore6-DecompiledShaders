#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1159;
float _3803;
float _3804;
float _3805;
float _3806;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].z) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3815 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _399 = (_392 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _400 = (_392 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _401 = (_392 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _419 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3826 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _517 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_503 - _504) * cbMtdParam._m0[24u].w) + _504) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3837 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _525 = (_518 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _526 = (_518 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _527 = (_518 * (cbMtdParam._m0[17u].z - _401)) + _401;
    float _531 = (cbMtdParam._m0[19u].w * (_476.z - _449)) + _449;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _551 = (_544.x * 2.0) + (-1.0);
    float _552 = (_544.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3848 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _561 = (_518 * (_544.z - _531)) + _531;
    float _564 = (((_476.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _565 = (((_476.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _577 = (((_551 - _564) + (cbMtdParam._m0[21u].x * _564)) * _518) + _564;
    float _578 = (((_552 - _565) + (cbMtdParam._m0[21u].x * _565)) * _518) + _565;
    float _579 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) - _460)) + _460;
    float _583 = cbMtdParam._m0[22u].x + _476.w;
    float _586 = fma(_579, _225 * NORMAL.x, fma(_578, _232 * TANGENT.x, (_218 * _210) * _577));
    float _589 = fma(_579, _225 * NORMAL.y, fma(_578, _232 * TANGENT.y, (_218 * _211) * _577));
    float _592 = fma(_579, _225 * NORMAL.z, fma(_578, _232 * TANGENT.z, (_218 * _212) * _577));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3859 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _600 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3881 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3892 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3903 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _618 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    vec4 _684 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _686 = _684.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _840 = sqrt(((_670 * _670) + (_671 * _671)) + (_672 * _672));
        float _846 = (cbMatDynParam._m0[5u].x * _840) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _851 = (cbMatDynParam._m0[5u].z * _840) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _847)) + _847) < ((_686 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _716 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _719 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _722 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _735 = _238 + 9u;
    uint _736 = _735 + uint(cbMatDynParam._m0[0u].w);
    float _742 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_736].x;
    float _743 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_736].y;
    float _744 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_736].z;
    float _3936 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _756 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _760 = ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * TEXCOORD_5.w) * _756.x;
    float _761 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _597) - _677;
    float _769 = (_764 * _598) - _678;
    float _770 = (_764 * _599) - _679;
    float _774 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3969 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = sqrt(_600);
    float _789 = exp2((_776 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_776 * 3.0));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_829, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821));
        float _887 = fma(_829, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821));
        float _891 = fma(_829, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821));
        float _916 = _821 + _597;
        float _917 = _825 + _598;
        float _918 = _829 + _599;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_597, _598, _599), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _4017 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_597, _598, _599), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4050 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_597, _598, _599), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4083 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_829, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821));
        float _1205 = fma(_829, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821));
        float _1209 = fma(_829, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821));
        float _1232 = _821 + _597;
        float _1233 = _825 + _598;
        float _1234 = _829 + _599;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_597, _598, _599), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4146 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_597, _598, _599), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4179 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_597, _598, _599), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4212 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = _1159;
        _1480 = _1159;
        _1481 = _1159;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1172)) + _1172;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1173)) + _1173;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _768 * 0.5;
    float _1539 = _769 * 0.5;
    float _1540 = _770 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1655 = fma(_829, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821)) + cbModelParam._m0[13u].w;
        float _1659 = fma(_829, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821)) + cbModelParam._m0[14u].w;
        float _1663 = fma(_829, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821)) + cbModelParam._m0[15u].w;
        float _1666 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1669 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1672 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1700;
        if (_1666 > 0.0)
        {
            _1700 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1700 = frontier_phi_17_15_ladder;
        }
        float _1870;
        if (_1669 > 0.0)
        {
            _1870 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1870 = frontier_phi_26_22_ladder;
        }
        float _2165;
        if (_1672 > 0.0)
        {
            _2165 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2165 = frontier_phi_38_33_ladder;
        }
        float _2167 = isnan(_1870) ? _1700 : (isnan(_1700) ? _1870 : min(_1700, _1870));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1666) + _1655;
        float _2173 = (_2168 * _1669) + _1659;
        float _2174 = (_2168 * _1672) + _1663;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_16_38_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1688 = frontier_phi_16_38_ladder_2;
        _1690 = frontier_phi_16_38_ladder_1;
        _1692 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1607);
        _1688 = _1676.x * cbModelParam._m0[1u].y;
        _1690 = _1676.y * cbModelParam._m0[1u].y;
        _1692 = _1676.z * cbModelParam._m0[1u].y;
    }
    float _1696 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1696 : min(cbModelParam._m0[25u].w, _1696));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_829, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_829, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_829, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1765 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1768 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _1875;
        if (_1762 > 0.0)
        {
            _1875 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1875 = frontier_phi_28_24_ladder;
        }
        float _2192;
        if (_1765 > 0.0)
        {
            _2192 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2192 = frontier_phi_40_35_ladder;
        }
        float _2519;
        if (_1768 > 0.0)
        {
            _2519 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2519 = frontier_phi_50_47_ladder;
        }
        float _2521 = isnan(_2192) ? _1875 : (isnan(_1875) ? _2192 : min(_1875, _2192));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1762) + _1751;
        float _2527 = (_2522 * _1765) + _1755;
        float _2528 = (_2522 * _1768) + _1759;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1697);
            frontier_phi_25_50_ladder = _2646.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2646.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2646.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_25_50_ladder_2;
        _1789 = frontier_phi_25_50_ladder_1;
        _1791 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1697);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1803 = ((((1.0 - _789) * ((_776 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_789 * _776)) * _760;
    float _1804 = _1803 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1805 = _1803 * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1806 = _1803 * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1862 = _1849 / _1861;
    float _1863 = _1853 / _1861;
    float _1864 = _1857 / _1861;
    float _2011;
    float _2012;
    float _2013;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1891 = ((uint(_1864 > cbSceneParam._m0[59u].y) + uint(_1864 > cbSceneParam._m0[59u].x)) + uint(_1864 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1892 = _1891 + 43u;
        uint _1900 = _1891 + 44u;
        uint _1908 = _1891 + 45u;
        uint _1916 = _1891 + 46u;
        float _1927 = fma(_1861, cbSceneParam._m0[_1892].w, fma(_1857, cbSceneParam._m0[_1892].z, fma(_1853, cbSceneParam._m0[_1892].y, _1849 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1861, cbSceneParam._m0[_1900].w, fma(_1857, cbSceneParam._m0[_1900].z, fma(_1853, cbSceneParam._m0[_1900].y, _1849 * cbSceneParam._m0[_1900].x)));
        float _1939 = fma(_1861, cbSceneParam._m0[_1916].w, fma(_1857, cbSceneParam._m0[_1916].z, fma(_1853, cbSceneParam._m0[_1916].y, _1849 * cbSceneParam._m0[_1916].x)));
        float _1944 = cbSceneParam._m0[33u].z * _1939;
        float _1946 = cbSceneParam._m0[33u].w * _1939;
        float _1949 = fma(_1861, cbSceneParam._m0[_1908].w, fma(_1857, cbSceneParam._m0[_1908].z, fma(_1853, cbSceneParam._m0[_1908].y, _1849 * cbSceneParam._m0[_1908].x))) / _1939;
        float _1997 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
        float _4338 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2004 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1927) / _1939, (_1946 + _1931) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 + _1927) / _1939, (_1931 - _1944) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1944) / _1939, (_1931 - _1946) / _1939), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 - _1946) / _1939, (_1944 + _1931) / _1939), _1949), 0.0)).x), vec4(0.25)));
        _2011 = 1.0 - (_2004 * cbSceneParam._m0[34u].x);
        _2012 = 1.0 - (_2004 * cbSceneParam._m0[34u].y);
        _2013 = 1.0 - (_2004 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2011 = 1.0;
        _2012 = 1.0;
        _2013 = 1.0;
    }
    float _2077;
    float _2079;
    float _2081;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2065 = fma(_1861, cbSceneParam._m0[63u].w, fma(_1857, cbSceneParam._m0[63u].z, fma(_1853, cbSceneParam._m0[63u].y, _1849 * cbSceneParam._m0[63u].x)));
        float _2066 = fma(_1861, cbSceneParam._m0[60u].w, fma(_1857, cbSceneParam._m0[60u].z, fma(_1853, cbSceneParam._m0[60u].y, _1849 * cbSceneParam._m0[60u].x))) / _2065;
        float _2067 = fma(_1861, cbSceneParam._m0[61u].w, fma(_1857, cbSceneParam._m0[61u].z, fma(_1853, cbSceneParam._m0[61u].y, _1849 * cbSceneParam._m0[61u].x))) / _2065;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2066 >= cbSceneParam._m0[64u].x) && (_2067 >= cbSceneParam._m0[64u].y)) && (_2066 <= cbSceneParam._m0[64u].z)) && (_2067 <= cbSceneParam._m0[64u].w))
        {
            float _2205 = fma(_1861, cbSceneParam._m0[62u].w, fma(_1857, cbSceneParam._m0[62u].z, fma(_1853, cbSceneParam._m0[62u].y, _1849 * cbSceneParam._m0[62u].x))) / _2065;
            float _2209 = isnan(cbSceneParam._m0[41u].w) ? _2205 : (isnan(_2205) ? cbSceneParam._m0[41u].w : max(_2205, cbSceneParam._m0[41u].w));
            float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864))) * cbSceneParam._m0[33u].y;
            float _4354 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
            float _2259 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2066, cbSceneParam._m0[33u].w + _2067), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2066, _2067 - cbSceneParam._m0[33u].z), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].z, _2067 - cbSceneParam._m0[33u].w), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2066 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2067), _2209), 0.0)).x), vec4(0.25)));
            float _2263 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
            float _2264 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
            float _2265 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
            frontier_phi_37_36_ladder_1 = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
            frontier_phi_37_36_ladder_2 = isnan(_2263) ? _2011 : (isnan(_2011) ? _2263 : min(_2011, _2263));
        }
        else
        {
            frontier_phi_37_36_ladder = _2013;
            frontier_phi_37_36_ladder_1 = _2012;
            frontier_phi_37_36_ladder_2 = _2011;
        }
        _2077 = frontier_phi_37_36_ladder_2;
        _2079 = frontier_phi_37_36_ladder_1;
        _2081 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2077 = _2011;
        _2079 = _2012;
        _2081 = _2013;
    }
    uvec4 _2086 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2088 = _2086.x * 14u;
    uint _2089 = _2088 + 13u;
    float _2096 = _760 + (-1.0);
    float _2101 = (cbLight._m0[_2089].x * _2096) + 1.0;
    float _2102 = (cbLight._m0[_2089].y * _2096) + 1.0;
    float _2103 = (cbLight._m0[_2089].z * _2096) + 1.0;
    float _2104 = (cbLight._m0[_2089].w * _2096) + 1.0;
    uint _2105 = _2088 + 5u;
    float _2111 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2115 = _2088 + 4u;
    float _2124 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2128 = _2088 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_597, _598, _599));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_597, _598, _599));
    float _4390 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4401 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2105].x * _2111) * _2149) + (((cbLight._m0[_2115].x * _2077) * _2124) * _2147);
    float _2157 = ((_2111 * cbLight._m0[_2105].y) * _2149) + (((cbLight._m0[_2115].y * _2079) * _2124) * _2147);
    float _2158 = ((_2111 * cbLight._m0[_2105].z) * _2149) + (((cbLight._m0[_2115].z * _2081) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2088 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2164)
    {
        _2266 = _2156;
        _2268 = _2157;
        _2270 = _2158;
    }
    else
    {
        uint _2274 = _2088 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2088 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4412 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2293 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2156;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2157;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2158;
    }
    bool _2273 = _2162.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2273)
    {
        _2328 = _2266;
        _2330 = _2268;
        _2332 = _2270;
    }
    else
    {
        uint _2490 = _2088 + 7u;
        float _2506 = (dot(vec3(cbLight._m0[_2088 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4428 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2509 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2328 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2266;
        _2330 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2268;
        _2332 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2270;
    }
    uint _2335 = _2088 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _600) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2088].x + _677;
    float _2351 = cbLight._m0[_2088].y + _678;
    float _2352 = cbLight._m0[_2088].z + _679;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2088].xyz));
    float _4444 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2364 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2365 = dot(vec3(_597, _598, _599), vec3(_2357, _2358, _2359));
    float _4466 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2357, _2358, _2359));
    float _4477 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2364 * ((_2363 * _2389) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2389) + _2349) * _2363))) * _2363;
    float _4488 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2416 = _2088 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _600) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2128].x + _677;
    float _2430 = cbLight._m0[_2128].y + _678;
    float _2431 = cbLight._m0[_2128].z + _679;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2128].xyz));
    float _4499 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2443 = dot(vec3(_597, _598, _599), vec3(_2436, _2437, _2438));
    float _4510 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2436, _2437, _2438));
    float _4521 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2465 = 1.0 - _2428;
    float _2475 = (0.5 / (((_2364 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2465) + _2428) * _2442))) * _2442;
    float _4532 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2487 = (((_2464 * cbLight._m0[_2416].x) * _2477) * _2111) + ((((cbLight._m0[_2335].x * _2077) * _2388) * _2402) * _2124);
    float _2488 = (((_2464 * cbLight._m0[_2416].y) * _2477) * _2111) + ((((cbLight._m0[_2335].y * _2079) * _2388) * _2402) * _2124);
    float _2489 = (((_2464 * cbLight._m0[_2416].z) * _2477) * _2111) + ((((cbLight._m0[_2335].z * _2081) * _2388) * _2402) * _2124);
    float _2545;
    float _2547;
    float _2549;
    if (_2164)
    {
        _2545 = _2487;
        _2547 = _2488;
        _2549 = _2489;
    }
    else
    {
        uint _2551 = _2088 + 2u;
        uint _2555 = _2088 + 10u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _600) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _677;
        float _2572 = cbLight._m0[_2551].y + _678;
        float _2573 = cbLight._m0[_2551].z + _679;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2551].xyz));
        float _4543 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2585 = dot(vec3(_597, _598, _599), vec3(_2578, _2579, _2580));
        float _4554 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4565 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2364 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2607) + _2570) * _2584))) * _2584;
        float _4576 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2545 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2487;
        _2547 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2488;
        _2549 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2489;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2273)
    {
        _2651 = _2545;
        _2653 = _2547;
        _2655 = _2549;
    }
    else
    {
        uint _2662 = _2088 + 3u;
        uint _2666 = _2088 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _600) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _677;
        float _2683 = cbLight._m0[_2662].y + _678;
        float _2684 = cbLight._m0[_2662].z + _679;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2662].xyz));
        float _4592 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2696 = dot(vec3(_597, _598, _599), vec3(_2689, _2690, _2691));
        float _4603 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4614 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2364 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2718) + _2681) * _2695))) * _2695;
        float _4625 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2651 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2545;
        _2653 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2547;
        _2655 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2549;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2086.y == 0u)
    {
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2753)));
        float _2774 = (log2(_1864 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            uint _3023 = 0u;
            uint _3032;
            bool _3033;
            for (;;)
            {
                _3032 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                _3033 = _3032 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3033)
                {
                    frontier_phi_71_pred = _3022;
                    frontier_phi_71_pred_1 = _3021;
                    frontier_phi_71_pred_2 = _3020;
                    frontier_phi_71_pred_3 = _3019;
                    frontier_phi_71_pred_4 = _3018;
                    frontier_phi_71_pred_5 = _3017;
                }
                else
                {
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    uint _3168;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3032;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3172 = uint(findLSB(_3168)) + (_3023 << 5u);
                        uint _3169 = (_3168 + 4294967295u) & _3168;
                        uint _3174 = _3172 * 48u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3194 = (_3172 * 48u) + 4u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3213 = (_3172 * 48u) + 8u;
                        vec3 _3224 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x));
                        float _3228 = _3188.x - _1862;
                        float _3229 = _3188.y - _1863;
                        float _3230 = _3188.z - _1864;
                        float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                        float _3234 = inversesqrt(_3231);
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3238 = dot(vec3(_716, _719, _722), vec3(_3235, _3236, _3237));
                        float _3243 = 1.0 - (_3231 * _3188.w);
                        float _4651 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3245 = sqrt(_3231) * _3207.w;
                        float _3248 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3238) + _3249;
                        float _3255 = _3245 * _3245;
                        float _3259 = ((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3244) / ((_3255 * 0.699999988079071044921875) + 1.0);
                        float _3263 = (-0.0) - _1862;
                        float _3264 = (-0.0) - _1863;
                        float _3265 = (-0.0) - _1864;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3279 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _776;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3270 + _3235;
                        float _3291 = _3271 + _3236;
                        float _3292 = _3272 + _3237;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_716, _719, _722), vec3(_3270, _3271, _3272));
                        float _4667 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3304 = dot(vec3(_716, _719, _722), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4678 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3248 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3238) + _3313;
                        float _4689 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4700 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3311 * _3311) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125))) * _3244;
                        _3092 = (_3259 * _3207.x) + _3165;
                        _3093 = (_3259 * _3207.y) + _3166;
                        _3094 = (_3259 * _3207.z) + _3167;
                        _3089 = (_3339 * _3224.x) + _3162;
                        _3090 = (_3339 * _3224.y) + _3163;
                        _3091 = (_3339 * _3224.z) + _3164;
                        if (_3169 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3169;
                        }
                    }
                    frontier_phi_71_pred = _3094;
                    frontier_phi_71_pred_1 = _3093;
                    frontier_phi_71_pred_2 = _3092;
                    frontier_phi_71_pred_3 = _3091;
                    frontier_phi_71_pred_4 = _3090;
                    frontier_phi_71_pred_5 = _3089;
                }
                _2875 = frontier_phi_71_pred;
                _2873 = frontier_phi_71_pred_1;
                _2871 = frontier_phi_71_pred_2;
                _2869 = frontier_phi_71_pred_3;
                _2867 = frontier_phi_71_pred_4;
                _2865 = frontier_phi_71_pred_5;
                uint _3024 = _3023 + 1u;
                if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3017 = _2865;
                    _3018 = _2867;
                    _3019 = _2869;
                    _3020 = _2871;
                    _3021 = _2873;
                    _3022 = _2875;
                    _3023 = _3024;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((4294967295u << _2881) & _2784) == 0u)
        {
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
        }
        else
        {
            float _3010 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
            float _3011 = _3010 * _1862;
            float _3012 = _3010 * _1863;
            float _3013 = _3010 * _1864;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _3145 = _2864;
                float _3146 = _2866;
                float _3147 = _2868;
                float _3148 = _2870;
                float _3149 = _2872;
                float _3150 = _2874;
                uint _3151 = _2881;
                uint _3160;
                bool _3161;
                for (;;)
                {
                    _3160 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                    _3161 = _3160 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3161)
                    {
                        frontier_phi_82_pred = _3150;
                        frontier_phi_82_pred_1 = _3149;
                        frontier_phi_82_pred_2 = _3148;
                        frontier_phi_82_pred_3 = _3147;
                        frontier_phi_82_pred_4 = _3146;
                        frontier_phi_82_pred_5 = _3145;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        float _3371 = _3150;
                        uint _3372 = _3160;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3457;
                        float _3503;
                        bool _3504;
                        for (;;)
                        {
                            uint _3383 = ((_3151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3444 = (_3383 * 40u) + 20u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3383 * 40u) + 24u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3478 = (_3383 * 40u) + 28u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3503 = fma(_1864, _3491.z, fma(_1863, _3491.y, _3491.x * _1862)) + _3491.w;
                            _3504 = !((fma(_1864, _3472.z, fma(_1863, _3472.y, _3472.x * _1862)) + _3472.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3504)
                            {
                                float _3531 = _3398.x - _1862;
                                float _3532 = _3398.y - _1863;
                                float _3533 = _3398.z - _1864;
                                float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                                float _3537 = inversesqrt(_3534);
                                float _3538 = _3537 * _3531;
                                float _3539 = _3537 * _3532;
                                float _3540 = _3537 * _3533;
                                float _3544 = 1.0 - (_3534 / (_3399 * _3399));
                                float _4711 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3549 = sqrt(_3534) * _3414.w;
                                float _3551 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                                float _3552 = _3551 * _3551;
                                float _3555 = ((1.0 - _3552) * dot(vec3(_3538, _3539, _3540), vec3(_716, _719, _722))) + _3552;
                                float _3558 = _3549 * _3549;
                                float _3562 = (fma(_1864, _3441.z, fma(_1863, _3441.y, _3441.x * _1862)) + _3441.w) / _3503;
                                float _3563 = (fma(_1864, _3457.z, fma(_1863, _3457.y, _3457.x * _1862)) + _3457.w) / _3503;
                                float _3567 = 1.0 - dot(vec2(_3562, _3563), vec2(_3562, _3563));
                                float _4727 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3569 = _3568 * (((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3545) / ((_3558 * 0.699999988079071044921875) + 1.0));
                                float _3581 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                                float _3582 = 1.0 - _776;
                                float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                                float _3590 = _3589 * _3589;
                                float _3591 = _3590 * _3590;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3594 = _3540 - _3013;
                                float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                                float _3602 = dot(vec3(_716, _719, _722), vec3((-0.0) - _3011, (-0.0) - _3012, (-0.0) - _3013));
                                float _4738 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3606 = dot(vec3(_716, _719, _722), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                                float _4749 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                                float _3614 = _3551 * _3590;
                                float _3615 = _3614 * _3614;
                                float _3621 = ((1.0 - _3615) * dot(vec3(_716, _719, _722), vec3(_3538, _3539, _3540))) + _3615;
                                float _4760 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3623 = 1.0 - _3590;
                                float _3633 = (0.5 / (((_3622 * ((_3605 * _3623) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3590) * _3605))) * _3622;
                                float _4771 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3643 = (_3568 * _3545) * (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3613 * _3613) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3569 * _3414.z;
                                frontier_phi_88_pred_1 = _3569 * _3414.y;
                                frontier_phi_88_pred_2 = _3569 * _3414.x;
                                frontier_phi_88_pred_3 = _3643 * _3426.z;
                                frontier_phi_88_pred_4 = _3643 * _3426.y;
                                frontier_phi_88_pred_5 = _3643 * _3426.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_88_pred;
                            _3651 = frontier_phi_88_pred_1;
                            _3650 = frontier_phi_88_pred_2;
                            _3649 = frontier_phi_88_pred_3;
                            _3648 = frontier_phi_88_pred_4;
                            _3647 = frontier_phi_88_pred_5;
                            _3356 = _3650 + _3369;
                            _3357 = _3651 + _3370;
                            _3358 = _3652 + _3371;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3358;
                        frontier_phi_82_pred_1 = _3357;
                        frontier_phi_82_pred_2 = _3356;
                        frontier_phi_82_pred_3 = _3355;
                        frontier_phi_82_pred_4 = _3354;
                        frontier_phi_82_pred_5 = _3353;
                    }
                    _2996 = frontier_phi_82_pred;
                    _2994 = frontier_phi_82_pred_1;
                    _2992 = frontier_phi_82_pred_2;
                    _2990 = frontier_phi_82_pred_3;
                    _2988 = frontier_phi_82_pred_4;
                    _2986 = frontier_phi_82_pred_5;
                    uint _3152 = _3151 + 1u;
                    if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3145 = _2986;
                        _3146 = _2988;
                        _3147 = _2990;
                        _3148 = _2992;
                        _3149 = _2994;
                        _3150 = _2996;
                        _3151 = _3152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2992;
                frontier_phi_63_64_ladder_1 = _2996;
                frontier_phi_63_64_ladder_2 = _2994;
                frontier_phi_63_64_ladder_3 = _2990;
                frontier_phi_63_64_ladder_4 = _2988;
                frontier_phi_63_64_ladder_5 = _2986;
            }
            else
            {
                frontier_phi_63_64_ladder = _2870;
                frontier_phi_63_64_ladder_1 = _2874;
                frontier_phi_63_64_ladder_2 = _2872;
                frontier_phi_63_64_ladder_3 = _2868;
                frontier_phi_63_64_ladder_4 = _2866;
                frontier_phi_63_64_ladder_5 = _2864;
            }
            _2985 = frontier_phi_63_64_ladder_5;
            _2987 = frontier_phi_63_64_ladder_4;
            _2989 = frontier_phi_63_64_ladder_3;
            _2991 = frontier_phi_63_64_ladder;
            _2993 = frontier_phi_63_64_ladder_2;
            _2995 = frontier_phi_63_64_ladder_1;
        }
        float _3000 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2797 = (_3000 * _2991) + _2328;
        _2799 = (_3000 * _2993) + _2330;
        _2801 = (_3000 * _2995) + _2332;
        _2803 = ((_2985 * 0.039999999105930328369140625) * _3000) + _2651;
        _2805 = ((_2987 * 0.039999999105930328369140625) * _3000) + _2653;
        _2807 = ((_2989 * 0.039999999105930328369140625) * _3000) + _2655;
    }
    else
    {
        _2797 = _2328;
        _2799 = _2330;
        _2801 = _2332;
        _2803 = _2651;
        _2805 = _2653;
        _2807 = _2655;
    }
    float _4787 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4798 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4809 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2824 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2797 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _760))) + ((_2803 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2799 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _760))) + ((_2805 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2801 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _760))) + ((_2807 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    uint _2827 = _238 + 6u;
    float _2835 = _697 / cbSceneParam._m0[86u].x;
    float _2836 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _618 : (isnan(_618) ? cbSceneParam._m0[77u].w : min(_618, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_618 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_618) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _618 : min(cbSceneParam._m0[80u].w, _618));
        float _2890 = _2889 / _618;
        float _2901 = _2890 * _670;
        float _2902 = _671 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2905 = _2890 * _672;
        float _2907 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2908 = _2907 + cbSceneParam._m0[79u].w;
        float _2909 = cbSceneParam._m0[79u].w - _2902;
        float _2915 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2905 * _2905));
        float _2918 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2915;
        float _2923 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2925 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2903 - _2907) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2908 > 0.0) ? exp2(_2923 * _2908) : (2.0 - exp2(_2925 * _2908))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2918;
        }
        else
        {
            float _3046 = 1.0 / cbSceneParam._m0[80u].x;
            float _3047 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : max(_2908, _2909));
            float _3048 = isnan(_2909) ? _2908 : (isnan(_2908) ? _2909 : min(_2908, _2909));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            _3102 = ((abs(_2915 / _2903) * cbSceneParam._m0[80u].y) * ((((_3057 - _3058) * 2.0) - ((exp2(_2923 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0)))) - exp2(_2923 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))))) * _3046)) - ((exp2(_2925 * _3057) - exp2(_2925 * _3058)) * _3046))) + (_2918 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2855);
        _2927 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2929 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2931 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2933 = _3113 * _2855;
    }
    else
    {
        _2927 = _2852;
        _2929 = _2853;
        _2931 = _2854;
        _2933 = _2855;
    }
    bool _3140;
    vec4 _2943;
    vec4 _2965;
    float _2967;
    float _2971;
    float _2972;
    float _2973;
    float _2974;
    bool _2984;
    for (;;)
    {
        _2943 = cbMatDynParam._m0[0u];
        float _2945 = roundEven(_2943.y);
        bool _2946 = _2945 == 3.0;
        float _2947 = log2(_2933);
        float _2954 = exp2(_2947 * cbSceneParam._m0[78u].x) * _2824;
        float _2955 = exp2(_2947 * cbSceneParam._m0[78u].y) * _2825;
        float _2956 = exp2(_2947 * cbSceneParam._m0[78u].z) * _2826;
        float _2963 = _686 + (-0.5);
        _2965 = cbMtdParam._m0[1u];
        _2967 = _2965.y * _2963;
        float _2970 = (_2945 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2971 = _2970 * (_2946 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2927)));
        _2972 = _2970 * (_2946 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2929)));
        _2973 = _2970 * (_2946 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2931)));
        _2974 = _2963 * 0.999000012874603271484375;
        _2984 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2984)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2974) < 0.5)
            {
                _3140 = true;
                break;
            }
        }
        uint _3081 = _735 + uint(_2943.w);
        if ((cbInstanceData._m0[_3081].w < 1.0) && ((cbInstanceData._m0[_3081].w + _2974) < 0.5))
        {
            _3140 = true;
            break;
        }
        if ((_2967 + 1.0) < _2965.x)
        {
            _3140 = true;
            break;
        }
        _3140 = false;
        break;
    }
    float _3344;
    if (_3140)
    {
        discard_state = true;
        _3344 = 0.0;
    }
    else
    {
        _3344 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2971;
    SV_Target.y = _2972;
    SV_Target.z = _2973;
    SV_Target.w = _3344;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


