#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1648;
float _4004;
float _4005;
float _4006;
float _4007;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4016 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4027 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4038 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _474 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _491 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_462 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4049 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _499 = (_492 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _500 = (_492 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _501 = (_492 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _564 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4060 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _572 = (_565 * ((_518.x * cbMtdParam._m0[13u].x) - _499)) + _499;
    float _573 = (_565 * ((_518.y * cbMtdParam._m0[13u].y) - _500)) + _500;
    float _574 = (_565 * ((_518.z * cbMtdParam._m0[13u].z) - _501)) + _501;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _422.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4071 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _644 = (_351.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _572)) + _572);
    float _645 = (_351.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _573)) + _573);
    float _646 = (_351.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _574)) + _574);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _747 = _745.x;
    float _748 = _745.y;
    float _749 = _745.z;
    float _756 = ((_728.x - _747) * _492) + _747;
    float _757 = ((_728.y - _748) * _492) + _748;
    float _758 = ((_728.z - _749) * _492) + _749;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _781 = ((_770.x - _756) * _565) + _756;
    float _782 = ((_770.y - _757) * _565) + _757;
    float _783 = ((_770.z - _758) * _565) + _758;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _808 = ((_795.z - _783) * _634) + _783;
    float _811 = ((((_795.x - _781) * _634) + _781) * 2.0) + (-1.0);
    float _812 = ((((_795.y - _782) * _634) + _782) * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4082 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _818 = sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _857 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _859 = _857.x;
    float _860 = 1.0 - _859;
    float _866 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _869 = ((isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : min(_866, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _878 = (_869 - ((((((_859 - _860) * cbMtdParam._m0[24u].w) + _860) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _869))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4103 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _886 = (_879 * ((_686.x * cbMtdParam._m0[18u].x) - _664)) + _664;
    float _887 = (_879 * ((_686.y * cbMtdParam._m0[18u].y) - _666)) + _666;
    float _888 = (_879 * ((_686.z * cbMtdParam._m0[18u].z) - _668)) + _668;
    float _903 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _904 = _903 * TEXCOORD.z;
    float _905 = _903 * TEXCOORD.w;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _904) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _905) + cbTextureTilingScale._m0[19u].w));
    float _919 = _917.x;
    float _920 = 1.0 - _919;
    float _947 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_919 - _920) * cbMtdParam._m0[24u].y) + _920) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4114 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _948 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _956 = ((((cbMtdParam._m0[10u].x - _886) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _948) + _886;
    float _957 = ((((cbMtdParam._m0[10u].y - _887) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _948) + _887;
    float _958 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _888)) * _948) + _888;
    float _963 = (((_705.z - _808) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _808;
    float _967 = ((_832.z - _963) * cbMtdParam._m0[19u].w) + _963;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _988 = (_981.x * 2.0) + (-1.0);
    float _989 = (_981.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4125 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _998 = (_879 * (_981.z - _967)) + _967;
    float _1001 = ((cbMtdParam._m0[23u].y - _998) * _948) + _998;
    vec4 _1022 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _904) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _905) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1028 = (_1022.x * 2.0) + (-1.0);
    float _1029 = (_1022.y * 2.0) + (-1.0);
    float _1030 = dot(vec2(_1028, _1029), vec2(_1028, _1029));
    float _4136 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1044 = (_811 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_705.x * 2.0) + (-1.0)))) + (((_832.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1045 = (_812 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_705.y * 2.0) + (-1.0)))) + (((_832.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1057 = (((_988 - _1044) + (cbMtdParam._m0[21u].x * _1044)) * _879) + _1044;
    float _1058 = (((_989 - _1045) + (cbMtdParam._m0[21u].x * _1045)) * _879) + _1045;
    float _1059 = (_879 * (sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _818)) + _818;
    float _1070 = (((_1028 - _1057) + (_1057 * cbMtdParam._m0[22u].z)) * _948) + _1057;
    float _1071 = (((_1029 - _1058) + (_1058 * cbMtdParam._m0[22u].z)) * _948) + _1058;
    float _1072 = ((sqrt(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) - _1059) * _948) + _1059;
    float _1074 = cbMtdParam._m0[22u].x + _832.w;
    float _1077 = fma(_1072, _263 * NORMAL.x, fma(_1071, _270 * TANGENT.x, (_256 * _248) * _1070));
    float _1080 = fma(_1072, _263 * NORMAL.y, fma(_1071, _270 * TANGENT.y, (_256 * _249) * _1070));
    float _1083 = fma(_1072, _263 * NORMAL.z, fma(_1071, _270 * TANGENT.z, (_256 * _250) * _1070));
    float _1087 = inversesqrt(dot(vec3(_1077, _1080, _1083), vec3(_1077, _1080, _1083)));
    float _1088 = _1087 * _1077;
    float _1089 = _1087 * _1080;
    float _1090 = _1087 * _1083;
    float _4147 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1091 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4169 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4180 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4191 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1109 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1159 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1149);
    float _1160 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1149);
    float _1161 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1149);
    float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
    float _1166 = _1159 * _1165;
    float _1167 = _1160 * _1165;
    float _1168 = _1161 * _1165;
    vec4 _1173 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1175 = _1173.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1329 = sqrt(((_1159 * _1159) + (_1160 * _1160)) + (_1161 * _1161));
        float _1335 = (cbMatDynParam._m0[5u].x * _1329) + cbMatDynParam._m0[5u].y;
        float _4202 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1340 = (cbMatDynParam._m0[5u].z * _1329) + cbMatDynParam._m0[5u].w;
        float _4213 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) - _1336)) + _1336) < ((_1175 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1186 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1187 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1205 = fma(_1090, cbSceneParam._m0[5u].z, fma(_1089, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1088));
    float _1208 = fma(_1090, cbSceneParam._m0[6u].z, fma(_1089, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1088));
    float _1211 = fma(_1090, cbSceneParam._m0[7u].z, fma(_1089, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1088));
    uint _1224 = _295 + 9u;
    uint _1225 = _1224 + uint(cbMatDynParam._m0[0u].w);
    float _1231 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1225].x;
    float _1232 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_1225].y;
    float _1233 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_1225].z;
    float _4224 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1234 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _1235 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1236 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    vec4 _1245 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1186, cbSceneParam._m0[86u].y * _1187));
    float _1249 = ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * TEXCOORD_5.w) * _1245.x;
    float _1250 = dot(vec3(_1088, _1089, _1090), vec3(_1166, _1167, _1168));
    float _1253 = _1250 * 2.0;
    float _1257 = (_1253 * _1088) - _1166;
    float _1258 = (_1253 * _1089) - _1167;
    float _1259 = (_1253 * _1090) - _1168;
    float _1263 = abs(dot(vec3(_1166, _1167, _1168), vec3(_1088, _1089, _1090)));
    float _4257 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1265 = sqrt(_1091);
    float _1278 = exp2((_1265 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1265 * 3.0));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1314 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1318 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1647;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1372 = fma(_1318, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1310));
        float _1376 = fma(_1318, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1310));
        float _1380 = fma(_1318, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1310));
        float _1405 = _1310 + _1088;
        float _1406 = _1314 + _1089;
        float _1407 = _1318 + _1090;
        float _1417 = fma(_1407, cbModelParam._m0[26u].z, fma(_1406, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1405)) - _1372;
        float _1418 = fma(_1407, cbModelParam._m0[27u].z, fma(_1406, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1405)) - _1376;
        float _1419 = fma(_1407, cbModelParam._m0[28u].z, fma(_1406, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1405)) - _1380;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1372 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1376 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[34u].z) + ((((((_1380 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1475 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1441.x + (-0.5));
        float _1477 = _1475 * (_1441.y + (-0.5));
        float _1478 = _1475 * (_1441.z + (-0.5));
        float _1485 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1448.x + (-0.5));
        float _1487 = _1485 * (_1448.y + (-0.5));
        float _1488 = _1485 * (_1448.z + (-0.5));
        float _1495 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1455.x + (-0.5));
        float _1497 = _1495 * (_1455.y + (-0.5));
        float _1498 = _1495 * (_1455.z + (-0.5));
        float _1505 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1462.x + (-0.5));
        float _1507 = _1505 * (_1462.y + (-0.5));
        float _1508 = _1505 * (_1462.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1529 = (dot(vec3(_1088, _1089, _1090), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1539 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4305 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1541 + 1.0))) + _1546) * _1509;
        float _1556 = _1477 * 0.5;
        float _1557 = _1487 * 0.5;
        float _1558 = _1497 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_1088, _1089, _1090), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4338 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1583 + 1.0))) + _1588) * _1510;
        float _1598 = _1478 * 0.5;
        float _1599 = _1488 * 0.5;
        float _1600 = _1498 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_1088, _1089, _1090), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4371 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1625 + 1.0))) + _1630) * _1511;
        _1647 = _1478;
        _1649 = _1477;
        _1650 = _1476;
        _1651 = _1488;
        _1652 = _1487;
        _1653 = _1486;
        _1654 = _1498;
        _1655 = _1497;
        _1656 = _1496;
        _1657 = _1511;
        _1658 = _1510;
        _1659 = _1509;
        _1660 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1661 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1662 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1648;
        _1649 = _1648;
        _1650 = _1648;
        _1651 = _1648;
        _1652 = _1648;
        _1653 = _1648;
        _1654 = _1648;
        _1655 = _1648;
        _1656 = _1648;
        _1657 = _1648;
        _1658 = _1648;
        _1659 = _1648;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1688 = fma(_1318, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310));
        float _1692 = fma(_1318, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310));
        float _1696 = fma(_1318, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310));
        float _1719 = _1310 + _1088;
        float _1720 = _1314 + _1089;
        float _1721 = _1318 + _1090;
        float _1731 = fma(_1721, cbModelParam._m0[30u].z, fma(_1720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1719)) - _1688;
        float _1732 = fma(_1721, cbModelParam._m0[31u].z, fma(_1720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1719)) - _1692;
        float _1733 = fma(_1721, cbModelParam._m0[32u].z, fma(_1720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1719)) - _1696;
        float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
        float _1750 = ((_1737 * _1731) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1688 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1751 = ((_1737 * _1732) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1692 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1752 = ((_1737 * _1733) / cbModelParam._m0[35u].z) + ((((((_1696 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        float _1787 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1754.x + (-0.5));
        float _1789 = _1787 * (_1754.y + (-0.5));
        float _1790 = _1787 * (_1754.z + (-0.5));
        float _1797 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1761.x + (-0.5));
        float _1799 = _1797 * (_1761.y + (-0.5));
        float _1800 = _1797 * (_1761.z + (-0.5));
        float _1807 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1808 = _1807 * (_1768.x + (-0.5));
        float _1809 = _1807 * (_1768.y + (-0.5));
        float _1810 = _1807 * (_1768.z + (-0.5));
        float _1817 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1818 = _1817 * (_1775.x + (-0.5));
        float _1819 = _1817 * (_1775.y + (-0.5));
        float _1820 = _1817 * (_1775.z + (-0.5));
        float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = _1788 * 0.5;
        float _1825 = _1798 * 0.5;
        float _1826 = _1808 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1088, _1089, _1090), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1821 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4434 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1851 + 1.0))) + _1856) * _1821;
        float _1866 = _1789 * 0.5;
        float _1867 = _1799 * 0.5;
        float _1868 = _1809 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1088, _1089, _1090), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1822 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _4467 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1893 + 1.0))) + _1898) * _1822;
        float _1908 = _1790 * 0.5;
        float _1909 = _1800 * 0.5;
        float _1910 = _1810 * 0.5;
        float _1911 = dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910));
        float _1916 = (_1911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1911);
        float _1924 = (dot(vec3(_1088, _1089, _1090), vec3(_1916 * _1908, _1916 * _1909, _1916 * _1910)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1933 = sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1935 = _1934 * 2.0;
        float _1939 = (1.0 - _1934) / (_1934 + 1.0);
        float _4500 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1949 = ((((1.0 - _1940) * (_1935 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1935 + 1.0))) + _1940) * _1823;
        _1957 = _1790;
        _1958 = _1789;
        _1959 = _1788;
        _1960 = _1800;
        _1961 = _1799;
        _1962 = _1798;
        _1963 = _1810;
        _1964 = _1809;
        _1965 = _1808;
        _1966 = _1823;
        _1967 = _1822;
        _1968 = _1821;
        _1969 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1970 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)));
    }
    else
    {
        _1957 = _1648;
        _1958 = _1648;
        _1959 = _1648;
        _1960 = _1648;
        _1961 = _1648;
        _1962 = _1648;
        _1963 = _1648;
        _1964 = _1648;
        _1965 = _1648;
        _1966 = _1648;
        _1967 = _1648;
        _1968 = _1648;
        _1969 = 0.0;
        _1970 = 0.0;
        _1971 = 0.0;
    }
    float _1981 = (cbModelParam._m0[1u].x * (_1969 - _1660)) + _1660;
    float _1982 = (cbModelParam._m0[1u].x * (_1970 - _1661)) + _1661;
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1662)) + _1662;
    float _2004 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1981));
    float _2025 = _1257 * 0.5;
    float _2026 = _1258 * 0.5;
    float _2027 = _1259 * 0.5;
    float _2028 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2031 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1958, _1961, _1964, _1967));
    float _2034 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1957, _1960, _1963, _1966));
    float _2068;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2041 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1647, _1651, _1654, _1657));
        float _2045 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1649, _1652, _1655, _1658));
        float _2049 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1650, _1653, _1656, _1659));
        float _2056 = dot(vec4(cbModelParam._m0[39u]), vec4(_2025, _2026, _2027, 1.0));
        _2068 = dot(vec3(isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2056) ? 0.0 : (isnan(0.0) ? _2056 : max(0.0, _2056))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2068 = 1.0;
    }
    float _2079;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2070 = dot(vec4(cbModelParam._m0[40u]), vec4(_2025, _2026, _2027, 1.0));
        _2079 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2070) ? 0.0 : (isnan(0.0) ? _2070 : max(0.0, _2070))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2079 = 1.0;
    }
    float _2083 = (_2079 * cbModelParam._m0[1u].x) + (_2068 * (1.0 - cbModelParam._m0[1u].x));
    float _2093 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1091);
    float _2094 = isnan(_2093) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2093 : min(cbModelParam._m0[25u].z, _2093));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2141 = fma(_1318, cbModelParam._m0[13u].z, fma(_1314, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1310)) + cbModelParam._m0[13u].w;
        float _2145 = fma(_1318, cbModelParam._m0[14u].z, fma(_1314, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1310)) + cbModelParam._m0[14u].w;
        float _2149 = fma(_1318, cbModelParam._m0[15u].z, fma(_1314, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1310)) + cbModelParam._m0[15u].w;
        float _2152 = fma(_1259, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1257));
        float _2155 = fma(_1259, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1257));
        float _2158 = fma(_1259, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1257));
        float _2186;
        if (_2152 > 0.0)
        {
            _2186 = abs((1.0 - _2141) / _2152);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2141 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2186 = frontier_phi_17_15_ladder;
        }
        float _2386;
        if (_2155 > 0.0)
        {
            _2386 = abs((1.0 - _2145) / _2155);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2145 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2386 = frontier_phi_26_22_ladder;
        }
        float _2629;
        if (_2158 > 0.0)
        {
            _2629 = abs((1.0 - _2149) / _2158);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2149 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2629 = frontier_phi_38_33_ladder;
        }
        float _2631 = isnan(_2386) ? _2186 : (isnan(_2186) ? _2386 : min(_2186, _2386));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _2152) + _2141;
        float _2637 = (_2632 * _2155) + _2145;
        float _2638 = (_2632 * _2158) + _2149;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2639;
        float _2643 = _2639 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 > _2643) || ((_2637 < _2641) || ((_2636 < _2641) || (_2636 > _2643))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2638, cbModelParam._m0[9u].z, fma(_2637, cbModelParam._m0[9u].y, _2636 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2638, cbModelParam._m0[10u].z, fma(_2637, cbModelParam._m0[10u].y, _2636 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2638, cbModelParam._m0[11u].z, fma(_2637, cbModelParam._m0[11u].y, _2636 * cbModelParam._m0[11u].x))), _2094);
            frontier_phi_16_38_ladder = _2762.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2762.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2762.x * cbModelParam._m0[1u].y;
        }
        _2174 = frontier_phi_16_38_ladder_2;
        _2176 = frontier_phi_16_38_ladder_1;
        _2178 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1257, _1258, _1259), _2094);
        _2174 = _2162.x * cbModelParam._m0[1u].y;
        _2176 = _2162.y * cbModelParam._m0[1u].y;
        _2178 = _2162.z * cbModelParam._m0[1u].y;
    }
    float _2182 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1091);
    float _2183 = isnan(_2182) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2182 : min(cbModelParam._m0[25u].w, _2182));
    float _2272;
    float _2274;
    float _2276;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2236 = fma(_1318, cbModelParam._m0[21u].z, fma(_1314, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1310)) + cbModelParam._m0[21u].w;
        float _2240 = fma(_1318, cbModelParam._m0[22u].z, fma(_1314, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1310)) + cbModelParam._m0[22u].w;
        float _2244 = fma(_1318, cbModelParam._m0[23u].z, fma(_1314, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1310)) + cbModelParam._m0[23u].w;
        float _2247 = fma(_1259, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1257));
        float _2250 = fma(_1259, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1257));
        float _2253 = fma(_1259, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1257));
        float _2391;
        if (_2247 > 0.0)
        {
            _2391 = abs((1.0 - _2236) / _2247);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2236 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2391 = frontier_phi_28_24_ladder;
        }
        float _2656;
        if (_2250 > 0.0)
        {
            _2656 = abs((1.0 - _2240) / _2250);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2240 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2656 = frontier_phi_40_35_ladder;
        }
        float _2861;
        if (_2253 > 0.0)
        {
            _2861 = abs((1.0 - _2244) / _2253);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2244 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2861 = frontier_phi_49_46_ladder;
        }
        float _2863 = isnan(_2656) ? _2391 : (isnan(_2391) ? _2656 : min(_2391, _2656));
        float _2864 = isnan(_2861) ? _2863 : (isnan(_2863) ? _2861 : min(_2863, _2861));
        float _2868 = (_2864 * _2247) + _2236;
        float _2869 = (_2864 * _2250) + _2240;
        float _2870 = (_2864 * _2253) + _2244;
        float _2871 = _2864 * 9.9999997473787516355514526367188e-05;
        float _2872 = (-1.0) - _2871;
        float _2874 = _2871 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2870 > _2874) || ((_2870 < _2872) || ((_2869 > _2874) || ((_2869 < _2872) || ((_2868 < _2872) || (_2868 > _2874))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2870, cbModelParam._m0[17u].z, fma(_2869, cbModelParam._m0[17u].y, _2868 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2870, cbModelParam._m0[18u].z, fma(_2869, cbModelParam._m0[18u].y, _2868 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2870, cbModelParam._m0[19u].z, fma(_2869, cbModelParam._m0[19u].y, _2868 * cbModelParam._m0[19u].x))), _2183);
            frontier_phi_25_49_ladder = _3069.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3069.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3069.x * cbModelParam._m0[1u].z;
        }
        _2272 = frontier_phi_25_49_ladder_2;
        _2274 = frontier_phi_25_49_ladder_1;
        _2276 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2256 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1257, _1258, _1259), _2183);
        _2272 = _2256.x * cbModelParam._m0[1u].z;
        _2274 = _2256.y * cbModelParam._m0[1u].z;
        _2276 = _2256.z * cbModelParam._m0[1u].z;
    }
    float _2288 = ((((1.0 - _1278) * ((_1265 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1278 * _1265)) * _1249;
    float _2289 = _2288 * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2290 = _2288 * ((cbModelParam._m0[1u].w * (_2274 - _2176)) + _2176);
    float _2291 = _2288 * ((cbModelParam._m0[1u].w * (_2276 - _2178)) + _2178);
    float _2294 = fma(_2291, cbSceneParam._m0[89u].z, fma(_2290, cbSceneParam._m0[89u].y, _2289 * cbSceneParam._m0[89u].x));
    float _2297 = fma(_2291, cbSceneParam._m0[90u].z, fma(_2290, cbSceneParam._m0[90u].y, _2289 * cbSceneParam._m0[90u].x));
    float _2300 = fma(_2291, cbSceneParam._m0[91u].z, fma(_2290, cbSceneParam._m0[91u].y, _2289 * cbSceneParam._m0[91u].x));
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _1249 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2345 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2349 = _2312 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_1088, _1089, _1090));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_1088, _1089, _1090));
    float _4636 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4647 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2329].x * _2335) * _2370) + ((cbLight._m0[_2339].x * _2345) * _2368);
    float _2378 = ((_2335 * cbLight._m0[_2329].y) * _2370) + ((_2345 * cbLight._m0[_2339].y) * _2368);
    float _2379 = ((_2335 * cbLight._m0[_2329].z) * _2370) + ((_2345 * cbLight._m0[_2339].z) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2385)
    {
        _2396 = _2377;
        _2398 = _2378;
        _2400 = _2379;
    }
    else
    {
        uint _2404 = _2312 + 6u;
        float _2420 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_1088, _1089, _1090)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4658 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2423 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2396 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2377;
        _2398 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2378;
        _2400 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2379;
    }
    bool _2403 = _2383.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2403)
    {
        _2441 = _2396;
        _2443 = _2398;
        _2445 = _2400;
    }
    else
    {
        uint _2600 = _2312 + 7u;
        float _2616 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_1088, _1089, _1090)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4674 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2619 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2441 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2396;
        _2443 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2398;
        _2445 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2400;
    }
    uint _2448 = _2312 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _1091) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2312].x + _1166;
    float _2464 = cbLight._m0[_2312].y + _1167;
    float _2465 = cbLight._m0[_2312].z + _1168;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2312].xyz));
    float _4690 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _4701 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _2477 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2478 = dot(vec3(_1088, _1089, _1090), vec3(_2470, _2471, _2472));
    float _4712 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2470, _2471, _2472));
    float _4723 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2502 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2477 * ((_2476 * _2502) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2502) + _2462) * _2476))) * _2476;
    float _4734 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2526 = _2312 + 9u;
    float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _1091) * 0.949999988079071044921875);
    float _2538 = _2537 * _2537;
    float _2539 = cbLight._m0[_2349].x + _1166;
    float _2540 = cbLight._m0[_2349].y + _1167;
    float _2541 = cbLight._m0[_2349].z + _1168;
    float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
    float _2546 = _2545 * _2539;
    float _2547 = _2545 * _2540;
    float _2548 = _2545 * _2541;
    float _2549 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2349].xyz));
    float _4745 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2553 = dot(vec3(_1088, _1089, _1090), vec3(_2546, _2547, _2548));
    float _4756 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2546, _2547, _2548));
    float _4767 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2538 * _2538;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2575 = 1.0 - _2538;
    float _2585 = (0.5 / (((_2477 * ((_2552 * _2575) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2575) + _2538) * _2552))) * _2552;
    float _4778 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    float _2597 = (((_2574 * cbLight._m0[_2526].x) * _2587) * _2335) + (((_2501 * cbLight._m0[_2448].x) * _2515) * _2345);
    float _2598 = (((_2574 * cbLight._m0[_2526].y) * _2587) * _2335) + (((_2501 * cbLight._m0[_2448].y) * _2515) * _2345);
    float _2599 = (((_2574 * cbLight._m0[_2526].z) * _2587) * _2335) + (((_2501 * cbLight._m0[_2448].z) * _2515) * _2345);
    float _2661;
    float _2663;
    float _2665;
    if (_2385)
    {
        _2661 = _2597;
        _2663 = _2598;
        _2665 = _2599;
    }
    else
    {
        uint _2667 = _2312 + 2u;
        uint _2671 = _2312 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _1091) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _1166;
        float _2688 = cbLight._m0[_2667].y + _1167;
        float _2689 = cbLight._m0[_2667].z + _1168;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2667].xyz));
        float _4789 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2701 = dot(vec3(_1088, _1089, _1090), vec3(_2694, _2695, _2696));
        float _4800 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4811 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2477 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2723) + _2686) * _2700))) * _2700;
        float _4822 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2661 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2597;
        _2663 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2598;
        _2665 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2599;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2403)
    {
        _2771 = _2661;
        _2773 = _2663;
        _2775 = _2665;
    }
    else
    {
        uint _2782 = _2312 + 3u;
        uint _2786 = _2312 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _1091) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _1166;
        float _2803 = cbLight._m0[_2782].y + _1167;
        float _2804 = cbLight._m0[_2782].z + _1168;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_1088, _1089, _1090), vec3(cbLight._m0[_2782].xyz));
        float _4838 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2816 = dot(vec3(_1088, _1089, _1090), vec3(_2809, _2810, _2811));
        float _4849 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4860 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2837 = (exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2838 = 1.0 - _2801;
        float _2848 = (0.5 / (((_2477 * ((_2815 * _2838) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2838) + _2801) * _2815))) * _2815;
        float _4871 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2771 = (((_2837 * cbLight._m0[_2786].x) * _2850) * _2851) + _2661;
        _2773 = (((_2837 * cbLight._m0[_2786].y) * _2850) * _2851) + _2663;
        _2775 = (((_2837 * cbLight._m0[_2786].z) * _2850) * _2851) + _2665;
    }
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_2310.y == 0u)
    {
        float _2926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2926;
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2926;
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2926;
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.x;
        uint _2953 = uint((float(_2941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1187) / _2942))) + floor(float(uint(cbSceneParam._m0[85u].x * _1186) / _2942)));
        float _2963 = (log2(_2929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2964 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        uint _2967 = uint(isnan(14.0) ? _2964 : (isnan(_2964) ? 14.0 : min(_2964, 14.0)));
        uvec4 _2972 = texelFetch(g_lightClusterGridBuffer, int(((_2967 << 2u) + (_2953 << 6u)) >> 2u));
        uint _2973 = _2972.x;
        uint _2974 = _2941.z;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((((1u << ((_2974 >> 4u) & 15u)) + 4294967295u) & _2973) == 0u) || ((_2974 & 240u) == 0u))
        {
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
        }
        else
        {
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            uint _3233 = 0u;
            uint _3242;
            bool _3243;
            for (;;)
            {
                _3242 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                _3243 = _3242 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3243)
                {
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                else
                {
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    uint _3378;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3242;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    for (;;)
                    {
                        uint _3382 = uint(findLSB(_3378)) + (_3233 << 5u);
                        uint _3379 = (_3378 + 4294967295u) & _3378;
                        uint _3384 = _3382 * 48u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3404 = (_3382 * 48u) + 4u;
                        vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3423 = (_3382 * 48u) + 8u;
                        vec3 _3434 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x));
                        float _3438 = _3398.x - _2927;
                        float _3439 = _3398.y - _2928;
                        float _3440 = _3398.z - _2929;
                        float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                        float _3444 = inversesqrt(_3441);
                        float _3445 = _3444 * _3438;
                        float _3446 = _3444 * _3439;
                        float _3447 = _3444 * _3440;
                        float _3448 = dot(vec3(_1205, _1208, _1211), vec3(_3445, _3446, _3447));
                        float _3453 = 1.0 - (_3441 * _3398.w);
                        float _4897 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3455 = sqrt(_3441) * _3417.w;
                        float _3458 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3448) + _3459;
                        float _3465 = _3455 * _3455;
                        float _3469 = ((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3454) / ((_3465 * 0.699999988079071044921875) + 1.0);
                        float _3473 = (-0.0) - _2927;
                        float _3474 = (-0.0) - _2928;
                        float _3475 = (-0.0) - _2929;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3490 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _1265;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3480 + _3445;
                        float _3502 = _3481 + _3446;
                        float _3503 = _3482 + _3447;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_1205, _1208, _1211), vec3(_3480, _3481, _3482));
                        float _4913 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3515 = dot(vec3(_1205, _1208, _1211), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4924 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3458 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3448) + _3524;
                        float _4935 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4946 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3522 * _3522) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125))) * _3454;
                        _3302 = (_3469 * _3417.x) + _3375;
                        _3303 = (_3469 * _3417.y) + _3376;
                        _3304 = (_3469 * _3417.z) + _3377;
                        _3299 = (_3550 * _3434.x) + _3372;
                        _3300 = (_3550 * _3434.y) + _3373;
                        _3301 = (_3550 * _3434.z) + _3374;
                        if (_3379 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3379;
                        }
                    }
                    frontier_phi_66_pred = _3299;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                _3075 = frontier_phi_66_pred;
                _3085 = frontier_phi_66_pred_1;
                _3083 = frontier_phi_66_pred_2;
                _3081 = frontier_phi_66_pred_3;
                _3079 = frontier_phi_66_pred_4;
                _3077 = frontier_phi_66_pred_5;
                uint _3234 = _3233 + 1u;
                if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3227 = _3075;
                    _3228 = _3077;
                    _3229 = _3079;
                    _3230 = _3081;
                    _3231 = _3083;
                    _3232 = _3085;
                    _3233 = _3234;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
        }
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.z;
        uint _3091 = (_3089 >> 8u) & 15u;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((4294967295u << _3091) & _2973) == 0u)
        {
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
        }
        else
        {
            float _3220 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
            float _3221 = _3220 * _2927;
            float _3222 = _3220 * _2928;
            float _3223 = _3220 * _2929;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3091 < ((_3089 >> 12u) & 15u))
            {
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3355 = _3074;
                float _3356 = _3076;
                float _3357 = _3078;
                float _3358 = _3080;
                float _3359 = _3082;
                float _3360 = _3084;
                uint _3361 = _3091;
                uint _3370;
                bool _3371;
                for (;;)
                {
                    _3370 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                    _3371 = _3370 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3371)
                    {
                        frontier_phi_77_pred = _3360;
                        frontier_phi_77_pred_1 = _3359;
                        frontier_phi_77_pred_2 = _3358;
                        frontier_phi_77_pred_3 = _3357;
                        frontier_phi_77_pred_4 = _3356;
                        frontier_phi_77_pred_5 = _3355;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        uint _3583 = _3370;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3361 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2929, _3701.z, fma(_2928, _3701.y, _3701.x * _2927)) + _3701.w;
                            _3714 = !((fma(_2929, _3682.z, fma(_2928, _3682.y, _3682.x * _2927)) + _3682.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2927;
                                float _3742 = _3609.y - _2928;
                                float _3743 = _3609.z - _2929;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4957 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_1205, _1208, _1211))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2929, _3652.z, fma(_2928, _3652.y, _3652.x * _2927)) + _3652.w) / _3713;
                                float _3773 = (fma(_2929, _3667.z, fma(_2928, _3667.y, _3667.x * _2927)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4973 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _1265;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3221;
                                float _3803 = _3749 - _3222;
                                float _3804 = _3750 - _3223;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_1205, _1208, _1211), vec3((-0.0) - _3221, (-0.0) - _3222, (-0.0) - _3223));
                                float _4984 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3816 = dot(vec3(_1205, _1208, _1211), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _4995 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_1205, _1208, _1211), vec3(_3748, _3749, _3750))) + _3825;
                                float _5006 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _5017 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3779 * _3625.y;
                                frontier_phi_83_pred_1 = _3779 * _3625.x;
                                frontier_phi_83_pred_2 = _3853 * _3637.z;
                                frontier_phi_83_pred_3 = _3853 * _3637.y;
                                frontier_phi_83_pred_4 = _3853 * _3637.x;
                                frontier_phi_83_pred_5 = _3779 * _3625.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_83_pred;
                            _3860 = frontier_phi_83_pred_1;
                            _3859 = frontier_phi_83_pred_2;
                            _3858 = frontier_phi_83_pred_3;
                            _3857 = frontier_phi_83_pred_4;
                            _3862 = frontier_phi_83_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3569;
                        frontier_phi_77_pred_1 = _3568;
                        frontier_phi_77_pred_2 = _3567;
                        frontier_phi_77_pred_3 = _3566;
                        frontier_phi_77_pred_4 = _3565;
                        frontier_phi_77_pred_5 = _3564;
                    }
                    _3206 = frontier_phi_77_pred;
                    _3204 = frontier_phi_77_pred_1;
                    _3202 = frontier_phi_77_pred_2;
                    _3200 = frontier_phi_77_pred_3;
                    _3198 = frontier_phi_77_pred_4;
                    _3196 = frontier_phi_77_pred_5;
                    uint _3362 = _3361 + 1u;
                    if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3355 = _3196;
                        _3356 = _3198;
                        _3357 = _3200;
                        _3358 = _3202;
                        _3359 = _3204;
                        _3360 = _3206;
                        _3361 = _3362;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3200;
                frontier_phi_58_59_ladder_1 = _3206;
                frontier_phi_58_59_ladder_2 = _3204;
                frontier_phi_58_59_ladder_3 = _3202;
                frontier_phi_58_59_ladder_4 = _3198;
                frontier_phi_58_59_ladder_5 = _3196;
            }
            else
            {
                frontier_phi_58_59_ladder = _3078;
                frontier_phi_58_59_ladder_1 = _3084;
                frontier_phi_58_59_ladder_2 = _3082;
                frontier_phi_58_59_ladder_3 = _3080;
                frontier_phi_58_59_ladder_4 = _3076;
                frontier_phi_58_59_ladder_5 = _3074;
            }
            _3195 = frontier_phi_58_59_ladder_5;
            _3197 = frontier_phi_58_59_ladder_4;
            _3199 = frontier_phi_58_59_ladder;
            _3201 = frontier_phi_58_59_ladder_3;
            _3203 = frontier_phi_58_59_ladder_2;
            _3205 = frontier_phi_58_59_ladder_1;
        }
        float _3210 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _2986 = (_3210 * _3201) + _2441;
        _2988 = (_3210 * _3203) + _2443;
        _2990 = (_3210 * _3205) + _2445;
        _2992 = ((_3195 * 0.039999999105930328369140625) * _3210) + _2771;
        _2994 = ((_3197 * 0.039999999105930328369140625) * _3210) + _2773;
        _2996 = ((_3199 * 0.039999999105930328369140625) * _3210) + _2775;
    }
    else
    {
        _2986 = _2441;
        _2988 = _2443;
        _2990 = _2445;
        _2992 = _2771;
        _2994 = _2773;
        _2996 = _2775;
    }
    float _5033 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _5044 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _5055 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _3013 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2986 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1249))) + ((_2992 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _2083)) * cbPerFrame._m0[3u].x);
    float _3014 = ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_2988 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1249))) + ((_2994 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2083)) * cbPerFrame._m0[3u].x);
    float _3015 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_2990 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1249))) + ((_2996 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2083)) * cbPerFrame._m0[3u].x);
    uint _3016 = _295 + 6u;
    float _3024 = _1186 / cbSceneParam._m0[86u].x;
    float _3025 = _1187 / cbSceneParam._m0[86u].y;
    vec4 _3039 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, (log2((isnan(cbSceneParam._m0[77u].w) ? _1109 : (isnan(_1109) ? cbSceneParam._m0[77u].w : min(_1109, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3041 = _3039.x;
    float _3042 = _3039.y;
    float _3043 = _3039.z;
    float _3044 = _3039.w;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_1109 > cbSceneParam._m0[78u].w)
    {
        float _3099 = isnan(_1109) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1109 : min(cbSceneParam._m0[80u].w, _1109));
        float _3100 = _3099 / _1109;
        float _3111 = _3100 * _1159;
        float _3112 = _1160 * _3100;
        float _3113 = (-0.0) - _3112;
        float _3115 = _3100 * _1161;
        float _3117 = (cbSceneParam._m0[77u].w * _3113) / _3099;
        float _3118 = _3117 + cbSceneParam._m0[79u].w;
        float _3119 = cbSceneParam._m0[79u].w - _3112;
        float _3125 = sqrt(((_3111 * _3111) + (_3112 * _3112)) + (_3115 * _3115));
        float _3128 = (1.0 - (cbSceneParam._m0[77u].w / _3099)) * _3125;
        float _3133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3312;
        if (abs((_3113 - _3117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3312 = ((((_3118 > 0.0) ? exp2(_3133 * _3118) : (2.0 - exp2(_3135 * _3118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3128;
        }
        else
        {
            float _3256 = 1.0 / cbSceneParam._m0[80u].x;
            float _3257 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : max(_3118, _3119));
            float _3258 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : min(_3118, _3119));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            _3312 = ((abs(_3125 / _3113) * cbSceneParam._m0[80u].y) * ((((_3267 - _3268) * 2.0) - ((exp2(_3133 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0)))) - exp2(_3133 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))))) * _3256)) - ((exp2(_3135 * _3267) - exp2(_3135 * _3268)) * _3256))) + (_3128 * cbSceneParam._m0[80u].z);
        }
        vec4 _3314 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, 1.0), 0.0);
        float _3323 = exp2((_3312 * (-1.44269502162933349609375)) * (1.0 - _3314.w));
        float _3324 = log2(_3323);
        float _3340 = log2(_3044);
        _3137 = (exp2(_3340 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].x)) * _3314.x) / cbSceneParam._m0[78u].x)) + _3041;
        _3139 = (exp2(_3340 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].y)) * _3314.y) / cbSceneParam._m0[78u].y)) + _3042;
        _3141 = (exp2(_3340 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].z)) * _3314.z) / cbSceneParam._m0[78u].z)) + _3043;
        _3143 = _3323 * _3044;
    }
    else
    {
        _3137 = _3041;
        _3139 = _3042;
        _3141 = _3043;
        _3143 = _3044;
    }
    bool _3350;
    vec4 _3153;
    vec4 _3175;
    float _3177;
    float _3181;
    float _3182;
    float _3183;
    float _3184;
    bool _3194;
    for (;;)
    {
        _3153 = cbMatDynParam._m0[0u];
        float _3155 = roundEven(_3153.y);
        bool _3156 = _3155 == 3.0;
        float _3157 = log2(_3143);
        float _3164 = exp2(_3157 * cbSceneParam._m0[78u].x) * _3013;
        float _3165 = exp2(_3157 * cbSceneParam._m0[78u].y) * _3014;
        float _3166 = exp2(_3157 * cbSceneParam._m0[78u].z) * _3015;
        float _3173 = _1175 + (-0.5);
        _3175 = cbMtdParam._m0[1u];
        _3177 = _3175.y * _3173;
        float _3180 = (_3155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3181 = _3180 * (_3156 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3137)));
        _3182 = _3180 * (_3156 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3139)));
        _3183 = _3180 * (_3156 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3141)));
        _3184 = _3173 * 0.999000012874603271484375;
        _3194 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3194)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3184) < 0.5)
            {
                _3350 = true;
                break;
            }
        }
        uint _3291 = _1224 + uint(_3153.w);
        if ((cbInstanceData._m0[_3291].w < 1.0) && ((cbInstanceData._m0[_3291].w + _3184) < 0.5))
        {
            _3350 = true;
            break;
        }
        if ((_3177 + 1.0) < _3175.x)
        {
            _3350 = true;
            break;
        }
        _3350 = false;
        break;
    }
    float _3555;
    if (_3350)
    {
        discard_state = true;
        _3555 = 0.0;
    }
    else
    {
        _3555 = cbInstanceData._m0[_3016].w;
    }
    SV_Target.x = _3181;
    SV_Target.y = _3182;
    SV_Target.z = _3183;
    SV_Target.w = _3555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3016].w;
    discard_exit();
}


