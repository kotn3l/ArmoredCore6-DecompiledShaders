#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1389;
float _4028;
float _4029;
float _4030;
float _4031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4040 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _419 = (_412 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _420 = (_412 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _421 = (_412 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _470 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _484 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_460 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4051 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _492 = (_485 * ((_438.x * cbMtdParam._m0[13u].x) - _419)) + _419;
    float _493 = (_485 * ((_438.y * cbMtdParam._m0[13u].y) - _420)) + _420;
    float _494 = (_485 * ((_438.z * cbMtdParam._m0[13u].z) - _421)) + _421;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _553 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _340.z) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4062 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _561 = (_554 * ((_512.x * cbMtdParam._m0[14u].x) - _492)) + _492;
    float _562 = (_554 * ((_512.y * cbMtdParam._m0[14u].y) - _493)) + _493;
    float _563 = (_554 * ((_512.z * cbMtdParam._m0[14u].z) - _494)) + _494;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _620 = _618.x;
    float _621 = _618.y;
    float _622 = _618.z;
    float _629 = ((_601.x - _620) * _412) + _620;
    float _630 = ((_601.y - _621) * _412) + _621;
    float _631 = ((_601.z - _622) * _412) + _622;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _654 = ((_643.x - _629) * _485) + _629;
    float _655 = ((_643.y - _630) * _485) + _630;
    float _656 = ((_643.z - _631) * _485) + _631;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _681 = ((_668.z - _656) * _554) + _656;
    float _684 = ((((_668.x - _654) * _554) + _654) * 2.0) + (-1.0);
    float _686 = ((((_668.y - _655) * _554) + _655) * 2.0) + (-1.0);
    float _687 = dot(vec2(_684, _686), vec2(_684, _686));
    float _4073 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _692 = sqrt(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _747 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_733 - _734) * cbMtdParam._m0[24u].w) + _734) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4084 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _755 = (_748 * ((_581.x * cbMtdParam._m0[18u].x) - _561)) + _561;
    float _756 = (_748 * ((_581.y * cbMtdParam._m0[18u].y) - _562)) + _562;
    float _757 = (_748 * ((_581.z * cbMtdParam._m0[18u].z) - _563)) + _563;
    float _761 = (cbMtdParam._m0[19u].w * (_706.z - _681)) + _681;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _4095 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = (_748 * (_774.z - _761)) + _761;
    float _794 = (((_706.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _684;
    float _795 = (((_706.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _686;
    float _807 = (((_781 - _794) + (cbMtdParam._m0[21u].x * _794)) * _748) + _794;
    float _808 = (((_782 - _795) + (cbMtdParam._m0[21u].x * _795)) * _748) + _795;
    float _809 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) - _692)) + _692;
    float _813 = cbMtdParam._m0[22u].x + _706.w;
    float _816 = fma(_809, _239 * NORMAL.x, fma(_808, _246 * TANGENT.x, (_232 * _224) * _807));
    float _819 = fma(_809, _239 * NORMAL.y, fma(_808, _246 * TANGENT.y, (_232 * _225) * _807));
    float _822 = fma(_809, _239 * NORMAL.z, fma(_808, _246 * TANGENT.z, (_232 * _226) * _807));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _4106 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _830 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4128 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4139 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4150 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _848 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    vec4 _914 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _916 = _914.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1070 = sqrt(((_900 * _900) + (_901 * _901)) + (_902 * _902));
        float _1076 = (cbMatDynParam._m0[5u].x * _1070) + cbMatDynParam._m0[5u].y;
        float _4161 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1081 = (cbMatDynParam._m0[5u].z * _1070) + cbMatDynParam._m0[5u].w;
        float _4172 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) - _1077)) + _1077) < ((_916 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _946 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _949 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _952 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _965 = _252 + 9u;
    uint _966 = _965 + uint(cbMatDynParam._m0[0u].w);
    float _972 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_966].x;
    float _973 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_966].y;
    float _974 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_966].z;
    float _4183 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _990 = ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * TEXCOORD_5.w) * _986.x;
    float _991 = dot(vec3(_827, _828, _829), vec3(_907, _908, _909));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _827) - _907;
    float _999 = (_994 * _828) - _908;
    float _1000 = (_994 * _829) - _909;
    float _1004 = abs(dot(vec3(_907, _908, _909), vec3(_827, _828, _829)));
    float _4216 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_830);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1388;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1117 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1121 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1146 = _1051 + _827;
        float _1147 = _1055 + _828;
        float _1148 = _1059 + _829;
        float _1158 = fma(_1148, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146)) - _1113;
        float _1159 = fma(_1148, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146)) - _1117;
        float _1160 = fma(_1148, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146)) - _1121;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1216 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1182.x + (-0.5));
        float _1218 = _1216 * (_1182.y + (-0.5));
        float _1219 = _1216 * (_1182.z + (-0.5));
        float _1226 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1189.x + (-0.5));
        float _1228 = _1226 * (_1189.y + (-0.5));
        float _1229 = _1226 * (_1189.z + (-0.5));
        float _1236 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1196.x + (-0.5));
        float _1238 = _1236 * (_1196.y + (-0.5));
        float _1239 = _1236 * (_1196.z + (-0.5));
        float _1246 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1203.x + (-0.5));
        float _1248 = _1246 * (_1203.y + (-0.5));
        float _1249 = _1246 * (_1203.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1270 = (dot(vec3(_827, _828, _829), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1280 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4264 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1282 + 1.0))) + _1287) * _1250;
        float _1297 = _1218 * 0.5;
        float _1298 = _1228 * 0.5;
        float _1299 = _1238 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_827, _828, _829), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4297 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1324 + 1.0))) + _1329) * _1251;
        float _1339 = _1219 * 0.5;
        float _1340 = _1229 * 0.5;
        float _1341 = _1239 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_827, _828, _829), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4330 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1366 + 1.0))) + _1371) * _1252;
        _1388 = _1219;
        _1390 = _1218;
        _1391 = _1217;
        _1392 = _1229;
        _1393 = _1228;
        _1394 = _1227;
        _1395 = _1239;
        _1396 = _1238;
        _1397 = _1237;
        _1398 = _1252;
        _1399 = _1251;
        _1400 = _1250;
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1389;
        _1390 = _1389;
        _1391 = _1389;
        _1392 = _1389;
        _1393 = _1389;
        _1394 = _1389;
        _1395 = _1389;
        _1396 = _1389;
        _1397 = _1389;
        _1398 = _1389;
        _1399 = _1389;
        _1400 = _1389;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1433 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1437 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1460 = _1051 + _827;
        float _1461 = _1055 + _828;
        float _1462 = _1059 + _829;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_827, _828, _829), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4393 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_827, _828, _829), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4426 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_827, _828, _829), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4459 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1389;
        _1699 = _1389;
        _1700 = _1389;
        _1701 = _1389;
        _1702 = _1389;
        _1703 = _1389;
        _1704 = _1389;
        _1705 = _1389;
        _1706 = _1389;
        _1707 = _1389;
        _1708 = _1389;
        _1709 = _1389;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1401)) + _1401;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1402)) + _1402;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1403)) + _1403;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _998 * 0.5;
    float _1767 = _999 * 0.5;
    float _1768 = _1000 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1388, _1392, _1395, _1398));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1882 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1886 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1890 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1893 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1896 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1899 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1927;
        if (_1893 > 0.0)
        {
            _1927 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1927 = frontier_phi_17_15_ladder;
        }
        float _2096;
        if (_1896 > 0.0)
        {
            _2096 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2096 = frontier_phi_26_22_ladder;
        }
        float _2391;
        if (_1899 > 0.0)
        {
            _2391 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2391 = frontier_phi_38_33_ladder;
        }
        float _2393 = isnan(_2096) ? _1927 : (isnan(_1927) ? _2096 : min(_1927, _2096));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1893) + _1882;
        float _2399 = (_2394 * _1896) + _1886;
        float _2400 = (_2394 * _1899) + _1890;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1915 = frontier_phi_16_38_ladder_2;
        _1917 = frontier_phi_16_38_ladder_1;
        _1919 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1835);
        _1915 = _1903.x * cbModelParam._m0[1u].y;
        _1917 = _1903.y * cbModelParam._m0[1u].y;
        _1919 = _1903.z * cbModelParam._m0[1u].y;
    }
    float _1923 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1923 : min(cbModelParam._m0[25u].w, _1923));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1977 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1981 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1985 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1988 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1991 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1994 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2101;
        if (_1988 > 0.0)
        {
            _2101 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2418;
        if (_1991 > 0.0)
        {
            _2418 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2418 = frontier_phi_40_35_ladder;
        }
        float _2745;
        if (_1994 > 0.0)
        {
            _2745 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2745 = frontier_phi_50_47_ladder;
        }
        float _2747 = isnan(_2418) ? _2101 : (isnan(_2101) ? _2418 : min(_2101, _2418));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _1988) + _1977;
        float _2753 = (_2748 * _1991) + _1981;
        float _2754 = (_2748 * _1994) + _1985;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _1924);
            frontier_phi_25_50_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _2013 = frontier_phi_25_50_ladder_2;
        _2015 = frontier_phi_25_50_ladder_1;
        _2017 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1924);
        _2013 = _1997.x * cbModelParam._m0[1u].z;
        _2015 = _1997.y * cbModelParam._m0[1u].z;
        _2017 = _1997.z * cbModelParam._m0[1u].z;
    }
    float _2029 = ((((1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1019 * _1006)) * _990;
    float _2030 = _2029 * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2031 = _2029 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2032 = _2029 * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2030 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2030 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2030 * cbSceneParam._m0[91u].x));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2088 = _2075 / _2087;
    float _2089 = _2079 / _2087;
    float _2090 = _2083 / _2087;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2117 = ((uint(_2090 > cbSceneParam._m0[59u].y) + uint(_2090 > cbSceneParam._m0[59u].x)) + uint(_2090 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2118 = _2117 + 43u;
        uint _2126 = _2117 + 44u;
        uint _2134 = _2117 + 45u;
        uint _2142 = _2117 + 46u;
        float _2153 = fma(_2087, cbSceneParam._m0[_2118].w, fma(_2083, cbSceneParam._m0[_2118].z, fma(_2079, cbSceneParam._m0[_2118].y, _2075 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2087, cbSceneParam._m0[_2126].w, fma(_2083, cbSceneParam._m0[_2126].z, fma(_2079, cbSceneParam._m0[_2126].y, _2075 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2087, cbSceneParam._m0[_2142].w, fma(_2083, cbSceneParam._m0[_2142].z, fma(_2079, cbSceneParam._m0[_2142].y, _2075 * cbSceneParam._m0[_2142].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2165;
        float _2172 = cbSceneParam._m0[33u].w * _2165;
        float _2175 = fma(_2087, cbSceneParam._m0[_2134].w, fma(_2083, cbSceneParam._m0[_2134].z, fma(_2079, cbSceneParam._m0[_2134].y, _2075 * cbSceneParam._m0[_2134].x))) / _2165;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
        float _4585 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2153) / _2165, (_2172 + _2157) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2153) / _2165, (_2157 - _2170) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2170) / _2165, (_2157 - _2172) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2172) / _2165, (_2170 + _2157) / _2165), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2087, cbSceneParam._m0[63u].w, fma(_2083, cbSceneParam._m0[63u].z, fma(_2079, cbSceneParam._m0[63u].y, _2075 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2087, cbSceneParam._m0[60u].w, fma(_2083, cbSceneParam._m0[60u].z, fma(_2079, cbSceneParam._m0[60u].y, _2075 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2087, cbSceneParam._m0[61u].w, fma(_2083, cbSceneParam._m0[61u].z, fma(_2079, cbSceneParam._m0[61u].y, _2075 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2431 = fma(_2087, cbSceneParam._m0[62u].w, fma(_2083, cbSceneParam._m0[62u].z, fma(_2079, cbSceneParam._m0[62u].y, _2075 * cbSceneParam._m0[62u].x))) / _2291;
            float _2435 = isnan(cbSceneParam._m0[41u].w) ? _2431 : (isnan(_2431) ? cbSceneParam._m0[41u].w : max(_2431, cbSceneParam._m0[41u].w));
            float _2478 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
            float _4601 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
            float _2485 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2435), 0.0)).x), vec4(0.25)));
            float _2489 = 1.0 - (_2485 * cbSceneParam._m0[34u].x);
            float _2490 = 1.0 - (_2485 * cbSceneParam._m0[34u].y);
            float _2491 = 1.0 - (_2485 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_1 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_37_36_ladder = _2239;
            frontier_phi_37_36_ladder_1 = _2238;
            frontier_phi_37_36_ladder_2 = _2237;
        }
        _2303 = frontier_phi_37_36_ladder_2;
        _2305 = frontier_phi_37_36_ladder_1;
        _2307 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _990 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_827, _828, _829));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_827, _828, _829));
    float _4637 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4648 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2303) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2305) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2307) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2390)
    {
        _2492 = _2382;
        _2494 = _2383;
        _2496 = _2384;
    }
    else
    {
        uint _2500 = _2314 + 6u;
        float _2516 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4659 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2519 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2492 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2382;
        _2494 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2383;
        _2496 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2384;
    }
    bool _2499 = _2388.y == 0u;
    float _2554;
    float _2556;
    float _2558;
    if (_2499)
    {
        _2554 = _2492;
        _2556 = _2494;
        _2558 = _2496;
    }
    else
    {
        uint _2716 = _2314 + 7u;
        float _2732 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4675 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2735 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2554 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2492;
        _2556 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2494;
        _2558 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2496;
    }
    uint _2561 = _2314 + 8u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _830) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2314].x + _907;
    float _2577 = cbLight._m0[_2314].y + _908;
    float _2578 = cbLight._m0[_2314].z + _909;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2314].xyz));
    float _4691 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _4702 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2590 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2591 = dot(vec3(_827, _828, _829), vec3(_2583, _2584, _2585));
    float _4713 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2583, _2584, _2585));
    float _4724 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2575 * _2575;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2615 = 1.0 - _2575;
    float _2626 = (0.5 / (((_2590 * ((_2589 * _2615) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2615) + _2575) * _2589))) * _2589;
    float _4735 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    uint _2642 = _2314 + 9u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _830) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2354].x + _907;
    float _2656 = cbLight._m0[_2354].y + _908;
    float _2657 = cbLight._m0[_2354].z + _909;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2354].xyz));
    float _4746 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2669 = dot(vec3(_827, _828, _829), vec3(_2662, _2663, _2664));
    float _4757 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2673 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2662, _2663, _2664));
    float _4768 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2677 = _2654 * _2654;
    float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
    float _2690 = (exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2691 = 1.0 - _2654;
    float _2701 = (0.5 / (((_2590 * ((_2668 * _2691) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2691) + _2654) * _2668))) * _2668;
    float _4779 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
    float _2713 = (((_2690 * cbLight._m0[_2642].x) * _2703) * _2337) + ((((cbLight._m0[_2561].x * _2303) * _2614) * _2628) * _2350);
    float _2714 = (((_2690 * cbLight._m0[_2642].y) * _2703) * _2337) + ((((cbLight._m0[_2561].y * _2305) * _2614) * _2628) * _2350);
    float _2715 = (((_2690 * cbLight._m0[_2642].z) * _2703) * _2337) + ((((cbLight._m0[_2561].z * _2307) * _2614) * _2628) * _2350);
    float _2771;
    float _2773;
    float _2775;
    if (_2390)
    {
        _2771 = _2713;
        _2773 = _2714;
        _2775 = _2715;
    }
    else
    {
        uint _2777 = _2314 + 2u;
        uint _2781 = _2314 + 10u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _830) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _907;
        float _2798 = cbLight._m0[_2777].y + _908;
        float _2799 = cbLight._m0[_2777].z + _909;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2777].xyz));
        float _4790 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2811 = dot(vec3(_827, _828, _829), vec3(_2804, _2805, _2806));
        float _4801 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4812 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2832 = (exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2833 = 1.0 - _2796;
        float _2843 = (0.5 / (((_2590 * ((_2810 * _2833) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2833) + _2796) * _2810))) * _2810;
        float _4823 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2771 = (((_2832 * cbLight._m0[_2781].x) * _2845) * _2846) + _2713;
        _2773 = (((_2832 * cbLight._m0[_2781].y) * _2845) * _2846) + _2714;
        _2775 = (((_2832 * cbLight._m0[_2781].z) * _2845) * _2846) + _2715;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2499)
    {
        _2877 = _2771;
        _2879 = _2773;
        _2881 = _2775;
    }
    else
    {
        uint _2888 = _2314 + 3u;
        uint _2892 = _2314 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _830) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _907;
        float _2909 = cbLight._m0[_2888].y + _908;
        float _2910 = cbLight._m0[_2888].z + _909;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2888].xyz));
        float _4839 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2922 = dot(vec3(_827, _828, _829), vec3(_2915, _2916, _2917));
        float _4850 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4861 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2943 = (exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2944 = 1.0 - _2907;
        float _2954 = (0.5 / (((_2590 * ((_2921 * _2944) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2944) + _2907) * _2921))) * _2921;
        float _4872 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2956 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2957 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2877 = (((_2943 * cbLight._m0[_2892].x) * _2956) * _2957) + _2771;
        _2879 = (((_2943 * cbLight._m0[_2892].y) * _2956) * _2957) + _2773;
        _2881 = (((_2943 * cbLight._m0[_2892].z) * _2956) * _2957) + _2775;
    }
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    if (_2312.y == 0u)
    {
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.x;
        uint _2990 = uint((float(_2978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _2979))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _2979)));
        float _3000 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3001 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        uint _3004 = uint(isnan(14.0) ? _3001 : (isnan(_3001) ? 14.0 : min(_3001, 14.0)));
        uvec4 _3009 = texelFetch(g_lightClusterGridBuffer, int(((_3004 << 2u) + (_2990 << 6u)) >> 2u));
        uint _3010 = _3009.x;
        uint _3011 = _2978.z;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((((1u << ((_3011 >> 4u) & 15u)) + 4294967295u) & _3010) == 0u) || ((_3011 & 240u) == 0u))
        {
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
        }
        else
        {
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            uint _3249 = 0u;
            uint _3258;
            bool _3259;
            for (;;)
            {
                _3258 = texelFetch(g_lightClassification, int((((_3004 << 5u) + (_2990 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                _3259 = _3258 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3259)
                {
                    frontier_phi_71_pred = _3248;
                    frontier_phi_71_pred_1 = _3247;
                    frontier_phi_71_pred_2 = _3246;
                    frontier_phi_71_pred_3 = _3245;
                    frontier_phi_71_pred_4 = _3244;
                    frontier_phi_71_pred_5 = _3243;
                }
                else
                {
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    uint _3394;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3258;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    for (;;)
                    {
                        uint _3398 = uint(findLSB(_3394)) + (_3249 << 5u);
                        uint _3395 = (_3394 + 4294967295u) & _3394;
                        uint _3400 = _3398 * 48u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3420 = (_3398 * 48u) + 4u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3439 = (_3398 * 48u) + 8u;
                        vec3 _3450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x));
                        float _3454 = _3414.x - _2088;
                        float _3455 = _3414.y - _2089;
                        float _3456 = _3414.z - _2090;
                        float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                        float _3460 = inversesqrt(_3457);
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3464 = dot(vec3(_946, _949, _952), vec3(_3461, _3462, _3463));
                        float _3469 = 1.0 - (_3457 * _3414.w);
                        float _4898 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3471 = sqrt(_3457) * _3433.w;
                        float _3474 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3464) + _3475;
                        float _3481 = _3471 * _3471;
                        float _3485 = ((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3470) / ((_3481 * 0.699999988079071044921875) + 1.0);
                        float _3489 = (-0.0) - _2088;
                        float _3490 = (-0.0) - _2089;
                        float _3491 = (-0.0) - _2090;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3505 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                        float _3506 = 1.0 - _1006;
                        float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                        float _3514 = _3513 * _3513;
                        float _3515 = _3514 * _3514;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3526 = dot(vec3(_946, _949, _952), vec3(_3496, _3497, _3498));
                        float _4914 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3530 = dot(vec3(_946, _949, _952), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                        float _4925 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                        float _3538 = _3474 * _3514;
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3464) + _3539;
                        float _4936 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3544 = 1.0 - _3514;
                        float _3554 = (0.5 / (((_3543 * ((_3529 * _3544) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3514) * _3529))) * _3543;
                        float _4947 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3565 = (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) / ((_3537 * _3537) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125))) * _3470;
                        _3318 = (_3485 * _3433.x) + _3391;
                        _3319 = (_3485 * _3433.y) + _3392;
                        _3320 = (_3485 * _3433.z) + _3393;
                        _3315 = (_3565 * _3450.x) + _3388;
                        _3316 = (_3565 * _3450.y) + _3389;
                        _3317 = (_3565 * _3450.z) + _3390;
                        if (_3395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3395;
                        }
                    }
                    frontier_phi_71_pred = _3320;
                    frontier_phi_71_pred_1 = _3319;
                    frontier_phi_71_pred_2 = _3318;
                    frontier_phi_71_pred_3 = _3317;
                    frontier_phi_71_pred_4 = _3316;
                    frontier_phi_71_pred_5 = _3315;
                }
                _3101 = frontier_phi_71_pred;
                _3099 = frontier_phi_71_pred_1;
                _3097 = frontier_phi_71_pred_2;
                _3095 = frontier_phi_71_pred_3;
                _3093 = frontier_phi_71_pred_4;
                _3091 = frontier_phi_71_pred_5;
                uint _3250 = _3249 + 1u;
                if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3243 = _3091;
                    _3244 = _3093;
                    _3245 = _3095;
                    _3246 = _3097;
                    _3247 = _3099;
                    _3248 = _3101;
                    _3249 = _3250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
        }
        uvec4 _3104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3105 = _3104.z;
        uint _3107 = (_3105 >> 8u) & 15u;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((4294967295u << _3107) & _3010) == 0u)
        {
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
        }
        else
        {
            float _3236 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _3237 = _3236 * _2088;
            float _3238 = _3236 * _2089;
            float _3239 = _3236 * _2090;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3107 < ((_3105 >> 12u) & 15u))
            {
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3371 = _3090;
                float _3372 = _3092;
                float _3373 = _3094;
                float _3374 = _3096;
                float _3375 = _3098;
                float _3376 = _3100;
                uint _3377 = _3107;
                uint _3386;
                bool _3387;
                for (;;)
                {
                    _3386 = texelFetch(g_lightClassification, int((((_3004 << 5u) + (_2990 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                    _3387 = _3386 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3387)
                    {
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        uint _3598 = _3386;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3682;
                        float _3728;
                        bool _3729;
                        for (;;)
                        {
                            uint _3609 = ((_3377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3609 * 40u) + 20u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3609 * 40u) + 24u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3703 = (_3609 * 40u) + 28u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3728 = fma(_2090, _3716.z, fma(_2089, _3716.y, _3716.x * _2088)) + _3716.w;
                            _3729 = !((fma(_2090, _3697.z, fma(_2089, _3697.y, _3697.x * _2088)) + _3697.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3729)
                            {
                                float _3756 = _3624.x - _2088;
                                float _3757 = _3624.y - _2089;
                                float _3758 = _3624.z - _2090;
                                float _3759 = dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758));
                                float _3762 = inversesqrt(_3759);
                                float _3763 = _3762 * _3756;
                                float _3764 = _3762 * _3757;
                                float _3765 = _3762 * _3758;
                                float _3769 = 1.0 - (_3759 / (_3625 * _3625));
                                float _4958 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3774 = sqrt(_3759) * _3640.w;
                                float _3776 = 1.39999997615814208984375 / (_3774 + 1.39999997615814208984375);
                                float _3777 = _3776 * _3776;
                                float _3780 = ((1.0 - _3777) * dot(vec3(_3763, _3764, _3765), vec3(_946, _949, _952))) + _3777;
                                float _3783 = _3774 * _3774;
                                float _3787 = (fma(_2090, _3667.z, fma(_2089, _3667.y, _3667.x * _2088)) + _3667.w) / _3728;
                                float _3788 = (fma(_2090, _3682.z, fma(_2089, _3682.y, _3682.x * _2088)) + _3682.w) / _3728;
                                float _3792 = 1.0 - dot(vec2(_3787, _3788), vec2(_3787, _3788));
                                float _4974 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3794 = _3793 * (((isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0))) * _3770) / ((_3783 * 0.699999988079071044921875) + 1.0));
                                float _3806 = exp2(log2(1.0 / ((_3783 * 3.5) + 5.0)) * 0.25);
                                float _3807 = 1.0 - _1006;
                                float _3814 = sqrt(1.0 - ((1.0 - (_3807 * _3807)) * (1.0 - (_3806 * _3806))));
                                float _3815 = _3814 * _3814;
                                float _3816 = _3815 * _3815;
                                float _3817 = _3763 - _3237;
                                float _3818 = _3764 - _3238;
                                float _3819 = _3765 - _3239;
                                float _3823 = inversesqrt(dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819)));
                                float _3827 = dot(vec3(_946, _949, _952), vec3((-0.0) - _3237, (-0.0) - _3238, (-0.0) - _3239));
                                float _4985 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3831 = dot(vec3(_946, _949, _952), vec3(_3823 * _3817, _3823 * _3818, _3823 * _3819));
                                float _4996 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3838 = ((_3834 * _3834) * (_3816 + (-1.0))) + 1.0;
                                float _3839 = _3776 * _3815;
                                float _3840 = _3839 * _3839;
                                float _3846 = ((1.0 - _3840) * dot(vec3(_946, _949, _952), vec3(_3763, _3764, _3765))) + _3840;
                                float _5007 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3848 = 1.0 - _3815;
                                float _3858 = (0.5 / (((_3847 * ((_3830 * _3848) + _3815)) + 9.9999999392252902907785028219223e-09) + (((_3847 * _3848) + _3815) * _3830))) * _3847;
                                float _5018 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3868 = (_3793 * _3770) * (((_3816 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3838 * _3838) * ((_3783 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3794 * _3640.z;
                                frontier_phi_88_pred_1 = _3794 * _3640.y;
                                frontier_phi_88_pred_2 = _3794 * _3640.x;
                                frontier_phi_88_pred_3 = _3868 * _3652.z;
                                frontier_phi_88_pred_4 = _3868 * _3652.y;
                                frontier_phi_88_pred_5 = _3868 * _3652.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3877 = frontier_phi_88_pred;
                            _3876 = frontier_phi_88_pred_1;
                            _3875 = frontier_phi_88_pred_2;
                            _3874 = frontier_phi_88_pred_3;
                            _3873 = frontier_phi_88_pred_4;
                            _3872 = frontier_phi_88_pred_5;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3584;
                        frontier_phi_82_pred_1 = _3583;
                        frontier_phi_82_pred_2 = _3582;
                        frontier_phi_82_pred_3 = _3581;
                        frontier_phi_82_pred_4 = _3580;
                        frontier_phi_82_pred_5 = _3579;
                    }
                    _3222 = frontier_phi_82_pred;
                    _3220 = frontier_phi_82_pred_1;
                    _3218 = frontier_phi_82_pred_2;
                    _3216 = frontier_phi_82_pred_3;
                    _3214 = frontier_phi_82_pred_4;
                    _3212 = frontier_phi_82_pred_5;
                    uint _3378 = _3377 + 1u;
                    if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3371 = _3212;
                        _3372 = _3214;
                        _3373 = _3216;
                        _3374 = _3218;
                        _3375 = _3220;
                        _3376 = _3222;
                        _3377 = _3378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_63_64_ladder = _3096;
                frontier_phi_63_64_ladder_1 = _3100;
                frontier_phi_63_64_ladder_2 = _3098;
                frontier_phi_63_64_ladder_3 = _3094;
                frontier_phi_63_64_ladder_4 = _3092;
                frontier_phi_63_64_ladder_5 = _3090;
            }
            _3211 = frontier_phi_63_64_ladder_5;
            _3213 = frontier_phi_63_64_ladder_4;
            _3215 = frontier_phi_63_64_ladder_3;
            _3217 = frontier_phi_63_64_ladder;
            _3219 = frontier_phi_63_64_ladder_2;
            _3221 = frontier_phi_63_64_ladder_1;
        }
        float _3226 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3023 = (_3226 * _3217) + _2554;
        _3025 = (_3226 * _3219) + _2556;
        _3027 = (_3226 * _3221) + _2558;
        _3029 = ((_3211 * 0.039999999105930328369140625) * _3226) + _2877;
        _3031 = ((_3213 * 0.039999999105930328369140625) * _3226) + _2879;
        _3033 = ((_3215 * 0.039999999105930328369140625) * _3226) + _2881;
    }
    else
    {
        _3023 = _2554;
        _3025 = _2556;
        _3027 = _2558;
        _3029 = _2877;
        _3031 = _2879;
        _3033 = _2881;
    }
    float _5034 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5045 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5056 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _3050 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3023 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _990))) + ((_3029 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _3051 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3025 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _990))) + ((_3031 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _3052 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3027 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _990))) + ((_3033 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    uint _3053 = _252 + 6u;
    float _3061 = _927 / cbSceneParam._m0[86u].x;
    float _3062 = _928 / cbSceneParam._m0[86u].y;
    vec4 _3076 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, (log2((isnan(cbSceneParam._m0[77u].w) ? _848 : (isnan(_848) ? cbSceneParam._m0[77u].w : min(_848, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3078 = _3076.x;
    float _3079 = _3076.y;
    float _3080 = _3076.z;
    float _3081 = _3076.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_848 > cbSceneParam._m0[78u].w)
    {
        float _3115 = isnan(_848) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _848 : min(cbSceneParam._m0[80u].w, _848));
        float _3116 = _3115 / _848;
        float _3127 = _3116 * _900;
        float _3128 = _901 * _3116;
        float _3129 = (-0.0) - _3128;
        float _3131 = _3116 * _902;
        float _3133 = (cbSceneParam._m0[77u].w * _3129) / _3115;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3128;
        float _3141 = sqrt(((_3127 * _3127) + (_3128 * _3128)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3115)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3328;
        if (abs((_3129 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3328 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3274 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3328 = ((abs(_3141 / _3129) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3151 * _3283) - exp2(_3151 * _3284)) * _3272))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, 1.0), 0.0);
        float _3339 = exp2((_3328 * (-1.44269502162933349609375)) * (1.0 - _3330.w));
        float _3340 = log2(_3339);
        float _3356 = log2(_3081);
        _3153 = (exp2(_3356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].x)) * _3330.x) / cbSceneParam._m0[78u].x)) + _3078;
        _3155 = (exp2(_3356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].y)) * _3330.y) / cbSceneParam._m0[78u].y)) + _3079;
        _3157 = (exp2(_3356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].z)) * _3330.z) / cbSceneParam._m0[78u].z)) + _3080;
        _3159 = _3339 * _3081;
    }
    else
    {
        _3153 = _3078;
        _3155 = _3079;
        _3157 = _3080;
        _3159 = _3081;
    }
    bool _3366;
    vec4 _3169;
    vec4 _3191;
    float _3193;
    float _3197;
    float _3198;
    float _3199;
    float _3200;
    bool _3210;
    for (;;)
    {
        _3169 = cbMatDynParam._m0[0u];
        float _3171 = roundEven(_3169.y);
        bool _3172 = _3171 == 3.0;
        float _3173 = log2(_3159);
        float _3180 = exp2(_3173 * cbSceneParam._m0[78u].x) * _3050;
        float _3181 = exp2(_3173 * cbSceneParam._m0[78u].y) * _3051;
        float _3182 = exp2(_3173 * cbSceneParam._m0[78u].z) * _3052;
        float _3189 = _916 + (-0.5);
        _3191 = cbMtdParam._m0[1u];
        _3193 = _3191.y * _3189;
        float _3196 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3197 = _3196 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
        _3198 = _3196 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
        _3199 = _3196 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
        _3200 = _3189 * 0.999000012874603271484375;
        _3210 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3210)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3200) < 0.5)
            {
                _3366 = true;
                break;
            }
        }
        uint _3307 = _965 + uint(_3169.w);
        if ((cbInstanceData._m0[_3307].w < 1.0) && ((cbInstanceData._m0[_3307].w + _3200) < 0.5))
        {
            _3366 = true;
            break;
        }
        if ((_3193 + 1.0) < _3191.x)
        {
            _3366 = true;
            break;
        }
        _3366 = false;
        break;
    }
    float _3570;
    if (_3366)
    {
        discard_state = true;
        _3570 = 0.0;
    }
    else
    {
        _3570 = cbInstanceData._m0[_3053].w;
    }
    SV_Target.x = _3197;
    SV_Target.y = _3198;
    SV_Target.z = _3199;
    SV_Target.w = _3570;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3053].w;
    discard_exit();
}


