#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1496;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _367.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].z) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3822 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _367.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].z) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3833 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _539 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _558 = _556.x;
    float _568 = dot(vec4(_558, _556.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _580 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _367.z) * 2.0) - ((((_558 - _568) * cbMtdParam._m0[24u].z) + _568) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3844 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _594 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_581 * ((_539.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _597 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_581 * ((_539.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _600 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_581 * ((_539.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _439) + _637;
    float _647 = ((_618.y - _638) * _439) + _638;
    float _648 = ((_618.z - _639) * _439) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _671 = ((_660.x - _646) * _512) + _646;
    float _672 = ((_660.y - _647) * _512) + _647;
    float _673 = ((_660.z - _648) * _512) + _648;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _698 = ((_685.z - _673) * _581) + _673;
    float _701 = ((((_685.x - _671) * _581) + _671) * 2.0) + (-1.0);
    float _703 = ((((_685.y - _672) * _581) + _672) * 2.0) + (-1.0);
    float _704 = dot(vec2(_701, _703), vec2(_701, _703));
    float _3855 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _709 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _735 = (((_723.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _736 = (((_723.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _739 = fma(_709, _247, fma(_736, _254, _735 * _240));
    float _742 = fma(_709, _248, fma(_736, _255, _735 * _241));
    float _745 = fma(_709, _249, fma(_736, _256, _735 * _242));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _778 = _776.x;
    float _779 = 1.0 - _778;
    float _785 = (cbMtdParam._m0[19u].x + dot(vec4(_749 * _739, _749 * _742, _749 * _745, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_778 - _779) * cbMtdParam._m0[24u].w) + _779) * cbMtdParam._m0[21u].z);
    float _3866 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _788 = (-0.0) - cbMtdParam._m0[24u].x;
    float _790 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
    float _798 = _786 - ((_786 * TEXCOORD_8.x) * _791);
    float _799 = _786 - ((_786 * TEXCOORD_8.y) * _791);
    float _800 = _786 - ((_786 * TEXCOORD_8.z) * _791);
    float _807 = (_798 * (cbMtdParam._m0[17u].x - _594)) + _594;
    float _808 = (_799 * (cbMtdParam._m0[17u].y - _597)) + _597;
    float _809 = (_800 * (cbMtdParam._m0[17u].z - _600)) + _600;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _852 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_823 - _824) * cbMtdParam._m0[24u].y) + _824) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3887 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _853 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _861 = ((((cbMtdParam._m0[10u].x - _807) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _853) + _807;
    float _862 = ((((cbMtdParam._m0[10u].y - _808) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _853) + _808;
    float _863 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _809)) * _853) + _809;
    float _867 = (cbMtdParam._m0[19u].w * (_723.z - _698)) + _698;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _888 = (_881.x * 2.0) + (-1.0);
    float _889 = (_881.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _3898 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _898 = ((_881.z - _867) * _798) + _867;
    float _901 = ((cbMtdParam._m0[23u].y - _898) * _853) + _898;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _926 = (_920.x * 2.0) + (-1.0);
    float _927 = (_920.y * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _3909 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _943 = ((sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) - _709) * _800) + _709;
    float _946 = (((_888 - _735) * _798) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _947 = (((_889 - _736) * _799) + _736) + (cbMtdParam._m0[21u].x * _736);
    float _958 = (((_926 - _946) + (_946 * cbMtdParam._m0[22u].z)) * _853) + _946;
    float _959 = (((_927 - _947) + (_947 * cbMtdParam._m0[22u].z)) * _853) + _947;
    float _960 = (_853 * (sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) - _943)) + _943;
    float _962 = cbMtdParam._m0[22u].x + _723.w;
    float _965 = fma(_960, _247, fma(_959, _254, _958 * _240));
    float _968 = fma(_960, _248, fma(_959, _255, _958 * _241));
    float _971 = fma(_960, _249, fma(_959, _256, _958 * _242));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _976 = _975 * _965;
    float _977 = _975 * _968;
    float _978 = _975 * _971;
    float _3920 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _979 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _3942 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _3953 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _3964 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _997 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1047 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1037);
    float _1048 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1037);
    float _1049 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1037);
    float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
    float _1054 = _1047 * _1053;
    float _1055 = _1048 * _1053;
    float _1056 = _1049 * _1053;
    float _1062 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1063 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1081 = fma(_978, cbSceneParam._m0[5u].z, fma(_977, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _976));
    float _1084 = fma(_978, cbSceneParam._m0[6u].z, fma(_977, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _976));
    float _1087 = fma(_978, cbSceneParam._m0[7u].z, fma(_977, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _976));
    uint _1101 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1107 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1101].x;
    float _1108 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1101].y;
    float _1109 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1101].z;
    float _3975 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    vec4 _1121 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1062, cbSceneParam._m0[86u].y * _1063));
    float _1125 = ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * TEXCOORD_5.w) * _1121.x;
    float _1126 = dot(vec3(_976, _977, _978), vec3(_1054, _1055, _1056));
    float _1129 = _1126 * 2.0;
    float _1133 = (_1129 * _976) - _1054;
    float _1134 = (_1129 * _977) - _1055;
    float _1135 = (_1129 * _978) - _1056;
    float _1139 = abs(dot(vec3(_1054, _1055, _1056), vec3(_976, _977, _978)));
    float _4008 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1141 = sqrt(_979);
    float _1154 = exp2((_1141 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1141 * 3.0));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1495;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1220 = fma(_1194, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186));
        float _1224 = fma(_1194, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186));
        float _1228 = fma(_1194, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186));
        float _1253 = _1186 + _976;
        float _1254 = _1190 + _977;
        float _1255 = _1194 + _978;
        float _1265 = fma(_1255, cbModelParam._m0[26u].z, fma(_1254, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253)) - _1220;
        float _1266 = fma(_1255, cbModelParam._m0[27u].z, fma(_1254, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253)) - _1224;
        float _1267 = fma(_1255, cbModelParam._m0[28u].z, fma(_1254, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253)) - _1228;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1220 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1224 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[34u].z) + ((((((_1228 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1323 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1289.x + (-0.5));
        float _1325 = _1323 * (_1289.y + (-0.5));
        float _1326 = _1323 * (_1289.z + (-0.5));
        float _1333 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1296.x + (-0.5));
        float _1335 = _1333 * (_1296.y + (-0.5));
        float _1336 = _1333 * (_1296.z + (-0.5));
        float _1343 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1303.x + (-0.5));
        float _1345 = _1343 * (_1303.y + (-0.5));
        float _1346 = _1343 * (_1303.z + (-0.5));
        float _1353 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1310.x + (-0.5));
        float _1355 = _1353 * (_1310.y + (-0.5));
        float _1356 = _1353 * (_1310.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1377 = (dot(vec3(_976, _977, _978), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1387 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4056 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1389 + 1.0))) + _1394) * _1357;
        float _1404 = _1325 * 0.5;
        float _1405 = _1335 * 0.5;
        float _1406 = _1345 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_976, _977, _978), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4089 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1431 + 1.0))) + _1436) * _1358;
        float _1446 = _1326 * 0.5;
        float _1447 = _1336 * 0.5;
        float _1448 = _1346 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_976, _977, _978), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4122 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1473 + 1.0))) + _1478) * _1359;
        _1495 = _1326;
        _1497 = _1325;
        _1498 = _1324;
        _1499 = _1336;
        _1500 = _1335;
        _1501 = _1334;
        _1502 = _1346;
        _1503 = _1345;
        _1504 = _1344;
        _1505 = _1359;
        _1506 = _1358;
        _1507 = _1357;
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1496;
        _1497 = _1496;
        _1498 = _1496;
        _1499 = _1496;
        _1500 = _1496;
        _1501 = _1496;
        _1502 = _1496;
        _1503 = _1496;
        _1504 = _1496;
        _1505 = _1496;
        _1506 = _1496;
        _1507 = _1496;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1533 = fma(_1194, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186));
        float _1537 = fma(_1194, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186));
        float _1541 = fma(_1194, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186));
        float _1564 = _1186 + _976;
        float _1565 = _1190 + _977;
        float _1566 = _1194 + _978;
        float _1576 = fma(_1566, cbModelParam._m0[30u].z, fma(_1565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1564)) - _1533;
        float _1577 = fma(_1566, cbModelParam._m0[31u].z, fma(_1565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1564)) - _1537;
        float _1578 = fma(_1566, cbModelParam._m0[32u].z, fma(_1565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1564)) - _1541;
        float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
        float _1595 = ((_1582 * _1576) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1533 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1582 * _1577) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1537 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1582 * _1578) / cbModelParam._m0[35u].z) + ((((((_1541 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        float _1632 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1599.x + (-0.5));
        float _1634 = _1632 * (_1599.y + (-0.5));
        float _1635 = _1632 * (_1599.z + (-0.5));
        float _1642 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1606.x + (-0.5));
        float _1644 = _1642 * (_1606.y + (-0.5));
        float _1645 = _1642 * (_1606.z + (-0.5));
        float _1652 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1613.x + (-0.5));
        float _1654 = _1652 * (_1613.y + (-0.5));
        float _1655 = _1652 * (_1613.z + (-0.5));
        float _1662 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1620.x + (-0.5));
        float _1664 = _1662 * (_1620.y + (-0.5));
        float _1665 = _1662 * (_1620.z + (-0.5));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = _1633 * 0.5;
        float _1670 = _1643 * 0.5;
        float _1671 = _1653 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_976, _977, _978), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4185 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1696 + 1.0))) + _1701) * _1666;
        float _1711 = _1634 * 0.5;
        float _1712 = _1644 * 0.5;
        float _1713 = _1654 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_976, _977, _978), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4218 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1738 + 1.0))) + _1743) * _1667;
        float _1753 = _1635 * 0.5;
        float _1754 = _1645 * 0.5;
        float _1755 = _1655 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_976, _977, _978), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4251 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1780 + 1.0))) + _1785) * _1668;
        _1802 = _1635;
        _1803 = _1634;
        _1804 = _1633;
        _1805 = _1645;
        _1806 = _1644;
        _1807 = _1643;
        _1808 = _1655;
        _1809 = _1654;
        _1810 = _1653;
        _1811 = _1668;
        _1812 = _1667;
        _1813 = _1666;
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
    }
    else
    {
        _1802 = _1496;
        _1803 = _1496;
        _1804 = _1496;
        _1805 = _1496;
        _1806 = _1496;
        _1807 = _1496;
        _1808 = _1496;
        _1809 = _1496;
        _1810 = _1496;
        _1811 = _1496;
        _1812 = _1496;
        _1813 = _1496;
        _1814 = 0.0;
        _1815 = 0.0;
        _1816 = 0.0;
    }
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1508)) + _1508;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1509)) + _1509;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1510)) + _1510;
    float _1849 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1826));
    float _1870 = _1133 * 0.5;
    float _1871 = _1134 * 0.5;
    float _1872 = _1135 * 0.5;
    float _1873 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1876 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1879 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1913;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1886 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1495, _1499, _1502, _1505));
        float _1890 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1894 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1901 = dot(vec4(cbModelParam._m0[39u]), vec4(_1870, _1871, _1872, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1924;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1915 = dot(vec4(cbModelParam._m0[40u]), vec4(_1870, _1871, _1872, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1928 = (_1924 * cbModelParam._m0[1u].x) + (_1913 * (1.0 - cbModelParam._m0[1u].x));
    float _1938 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _979);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1938 : min(cbModelParam._m0[25u].z, _1938));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1986 = fma(_1194, cbModelParam._m0[13u].z, fma(_1190, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186)) + cbModelParam._m0[13u].w;
        float _1990 = fma(_1194, cbModelParam._m0[14u].z, fma(_1190, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186)) + cbModelParam._m0[14u].w;
        float _1994 = fma(_1194, cbModelParam._m0[15u].z, fma(_1190, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186)) + cbModelParam._m0[15u].w;
        float _1997 = fma(_1135, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133));
        float _2000 = fma(_1135, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133));
        float _2003 = fma(_1135, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133));
        float _2031;
        if (_1997 > 0.0)
        {
            _2031 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2031 = frontier_phi_14_12_ladder;
        }
        float _2253;
        if (_2000 > 0.0)
        {
            _2253 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2253 = frontier_phi_23_19_ladder;
        }
        float _2499;
        if (_2003 > 0.0)
        {
            _2499 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2499 = frontier_phi_35_30_ladder;
        }
        float _2501 = isnan(_2253) ? _2031 : (isnan(_2031) ? _2253 : min(_2031, _2253));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1997) + _1986;
        float _2507 = (_2502 * _2000) + _1990;
        float _2508 = (_2502 * _2003) + _1994;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2509;
        float _2513 = _2509 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 > _2513) || ((_2507 < _2511) || ((_2506 < _2511) || (_2506 > _2513))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2508, cbModelParam._m0[9u].z, fma(_2507, cbModelParam._m0[9u].y, _2506 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2508, cbModelParam._m0[10u].z, fma(_2507, cbModelParam._m0[10u].y, _2506 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2508, cbModelParam._m0[11u].z, fma(_2507, cbModelParam._m0[11u].y, _2506 * cbModelParam._m0[11u].x))), _1939);
            frontier_phi_13_35_ladder = _2632.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2632.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2632.x * cbModelParam._m0[1u].y;
        }
        _2019 = frontier_phi_13_35_ladder_2;
        _2021 = frontier_phi_13_35_ladder_1;
        _2023 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1133, _1134, _1135), _1939);
        _2019 = _2007.x * cbModelParam._m0[1u].y;
        _2021 = _2007.y * cbModelParam._m0[1u].y;
        _2023 = _2007.z * cbModelParam._m0[1u].y;
    }
    float _2027 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _979);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2027 : min(cbModelParam._m0[25u].w, _2027));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2082 = fma(_1194, cbModelParam._m0[21u].z, fma(_1190, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186)) + cbModelParam._m0[21u].w;
        float _2086 = fma(_1194, cbModelParam._m0[22u].z, fma(_1190, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186)) + cbModelParam._m0[22u].w;
        float _2090 = fma(_1194, cbModelParam._m0[23u].z, fma(_1190, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186)) + cbModelParam._m0[23u].w;
        float _2093 = fma(_1135, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133));
        float _2096 = fma(_1135, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133));
        float _2099 = fma(_1135, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133));
        float _2258;
        if (_2093 > 0.0)
        {
            _2258 = abs((1.0 - _2082) / _2093);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2082 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2258 = frontier_phi_25_21_ladder;
        }
        float _2526;
        if (_2096 > 0.0)
        {
            _2526 = abs((1.0 - _2086) / _2096);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2086 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2526 = frontier_phi_37_32_ladder;
        }
        float _2731;
        if (_2099 > 0.0)
        {
            _2731 = abs((1.0 - _2090) / _2099);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2090 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2731 = frontier_phi_46_43_ladder;
        }
        float _2733 = isnan(_2526) ? _2258 : (isnan(_2258) ? _2526 : min(_2258, _2526));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _2093) + _2082;
        float _2739 = (_2734 * _2096) + _2086;
        float _2740 = (_2734 * _2099) + _2090;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _2028);
            frontier_phi_22_46_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2118 = frontier_phi_22_46_ladder_2;
        _2120 = frontier_phi_22_46_ladder_1;
        _2122 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1133, _1134, _1135), _2028);
        _2118 = _2102.x * cbModelParam._m0[1u].z;
        _2120 = _2102.y * cbModelParam._m0[1u].z;
        _2122 = _2102.z * cbModelParam._m0[1u].z;
    }
    float _2134 = ((((1.0 - _1154) * ((_1141 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1154 * _1141)) * _1125;
    float _2135 = _2134 * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2136 = _2134 * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2137 = _2134 * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2140 = fma(_2137, cbSceneParam._m0[89u].z, fma(_2136, cbSceneParam._m0[89u].y, _2135 * cbSceneParam._m0[89u].x));
    float _2143 = fma(_2137, cbSceneParam._m0[90u].z, fma(_2136, cbSceneParam._m0[90u].y, _2135 * cbSceneParam._m0[90u].x));
    float _2146 = fma(_2137, cbSceneParam._m0[91u].z, fma(_2136, cbSceneParam._m0[91u].y, _2135 * cbSceneParam._m0[91u].x));
    vec4 _2154 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1062, _1063));
    float _2156 = _2154.w;
    float _2168 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2156);
    float _2169 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2156);
    float _2170 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2156);
    uvec4 _2174 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2176 = _2174.x * 14u;
    uint _2177 = _2176 + 13u;
    float _2184 = _1125 + (-1.0);
    float _2189 = (cbLight._m0[_2177].x * _2184) + 1.0;
    float _2190 = (cbLight._m0[_2177].y * _2184) + 1.0;
    float _2191 = (cbLight._m0[_2177].z * _2184) + 1.0;
    float _2192 = (cbLight._m0[_2177].w * _2184) + 1.0;
    uint _2193 = _2176 + 5u;
    float _2199 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    uint _2203 = _2176 + 4u;
    float _2212 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2216 = _2176 | 1u;
    float _2227 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_976, _977, _978));
    float _2230 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_976, _977, _978));
    float _4387 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _4398 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2235 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2237 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2244 = ((cbLight._m0[_2193].x * _2199) * _2237) + (((cbLight._m0[_2203].x * _2168) * _2212) * _2235);
    float _2245 = ((_2199 * cbLight._m0[_2193].y) * _2237) + (((cbLight._m0[_2203].y * _2169) * _2212) * _2235);
    float _2246 = ((_2199 * cbLight._m0[_2193].z) * _2237) + (((cbLight._m0[_2203].z * _2170) * _2212) * _2235);
    uvec4 _2250 = floatBitsToUint(cbLight._m0[_2176 + 12u]);
    bool _2252 = _2250.x == 0u;
    float _2263;
    float _2265;
    float _2267;
    if (_2252)
    {
        _2263 = _2244;
        _2265 = _2245;
        _2267 = _2246;
    }
    else
    {
        uint _2271 = _2176 + 6u;
        float _2287 = (dot(vec3(cbLight._m0[_2176 + 2u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4409 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2290 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2263 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2244;
        _2265 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2245;
        _2267 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2246;
    }
    bool _2270 = _2250.y == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2270)
    {
        _2308 = _2263;
        _2310 = _2265;
        _2312 = _2267;
    }
    else
    {
        uint _2470 = _2176 + 7u;
        float _2486 = (dot(vec3(cbLight._m0[_2176 + 3u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2487 = _2486 * _2486;
        float _4425 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2488 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2489 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2308 = (((cbLight._m0[_2470].x * 0.3183098733425140380859375) * _2488) * _2489) + _2263;
        _2310 = (((cbLight._m0[_2470].y * 0.3183098733425140380859375) * _2488) * _2489) + _2265;
        _2312 = (((cbLight._m0[_2470].z * 0.3183098733425140380859375) * _2488) * _2489) + _2267;
    }
    uint _2315 = _2176 + 8u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _979) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2176].x + _1054;
    float _2331 = cbLight._m0[_2176].y + _1055;
    float _2332 = cbLight._m0[_2176].z + _1056;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2176].xyz));
    float _4441 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _4452 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2344 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2345 = dot(vec3(_976, _977, _978), vec3(_2337, _2338, _2339));
    float _4463 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2337, _2338, _2339));
    float _4474 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2329 * _2329;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2368 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2369 = 1.0 - _2329;
    float _2380 = (0.5 / (((_2344 * ((_2343 * _2369) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2369) + _2329) * _2343))) * _2343;
    float _4485 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    uint _2396 = _2176 + 9u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _979) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2216].x + _1054;
    float _2410 = cbLight._m0[_2216].y + _1055;
    float _2411 = cbLight._m0[_2216].z + _1056;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2216].xyz));
    float _4496 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2423 = dot(vec3(_976, _977, _978), vec3(_2416, _2417, _2418));
    float _4507 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2416, _2417, _2418));
    float _4518 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2408 * _2408;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2445 = 1.0 - _2408;
    float _2455 = (0.5 / (((_2344 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2445) + _2408) * _2422))) * _2422;
    float _4529 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    float _2467 = (((_2444 * cbLight._m0[_2396].x) * _2457) * _2199) + ((((cbLight._m0[_2315].x * _2168) * _2368) * _2382) * _2212);
    float _2468 = (((_2444 * cbLight._m0[_2396].y) * _2457) * _2199) + ((((cbLight._m0[_2315].y * _2169) * _2368) * _2382) * _2212);
    float _2469 = (((_2444 * cbLight._m0[_2396].z) * _2457) * _2199) + ((((cbLight._m0[_2315].z * _2170) * _2368) * _2382) * _2212);
    float _2531;
    float _2533;
    float _2535;
    if (_2252)
    {
        _2531 = _2467;
        _2533 = _2468;
        _2535 = _2469;
    }
    else
    {
        uint _2537 = _2176 + 2u;
        uint _2541 = _2176 + 10u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _979) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _1054;
        float _2558 = cbLight._m0[_2537].y + _1055;
        float _2559 = cbLight._m0[_2537].z + _1056;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2537].xyz));
        float _4540 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2571 = dot(vec3(_976, _977, _978), vec3(_2564, _2565, _2566));
        float _4551 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4562 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2593 = 1.0 - _2556;
        float _2603 = (0.5 / (((_2344 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2593) + _2556) * _2570))) * _2570;
        float _4573 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2531 = (((_2592 * cbLight._m0[_2541].x) * _2605) * _2606) + _2467;
        _2533 = (((_2592 * cbLight._m0[_2541].y) * _2605) * _2606) + _2468;
        _2535 = (((_2592 * cbLight._m0[_2541].z) * _2605) * _2606) + _2469;
    }
    float _2641;
    float _2643;
    float _2645;
    if (_2270)
    {
        _2641 = _2531;
        _2643 = _2533;
        _2645 = _2535;
    }
    else
    {
        uint _2652 = _2176 + 3u;
        uint _2656 = _2176 + 11u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _979) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _1054;
        float _2673 = cbLight._m0[_2652].y + _1055;
        float _2674 = cbLight._m0[_2652].z + _1056;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2652].xyz));
        float _4589 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2686 = dot(vec3(_976, _977, _978), vec3(_2679, _2680, _2681));
        float _4600 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4611 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2344 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2708) + _2671) * _2685))) * _2685;
        float _4622 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2641 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2531;
        _2643 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2533;
        _2645 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2535;
    }
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_2174.y == 0u)
    {
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2796;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2796;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2796;
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1063) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _1062) / _2812)));
        float _2833 = (log2(_2799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3104)
                {
                    frontier_phi_61_pred = _3088;
                    frontier_phi_61_pred_1 = _3093;
                    frontier_phi_61_pred_2 = _3092;
                    frontier_phi_61_pred_3 = _3091;
                    frontier_phi_61_pred_4 = _3090;
                    frontier_phi_61_pred_5 = _3089;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3103;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3094 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _2797;
                        float _3279 = _3238.y - _2798;
                        float _3280 = _3238.z - _2799;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_1081, _1084, _1087), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4648 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _2797;
                        float _3314 = (-0.0) - _2798;
                        float _3315 = (-0.0) - _2799;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3330 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3331 = 1.0 - _1141;
                        float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                        float _3339 = _3338 * _3338;
                        float _3340 = _3339 * _3339;
                        float _3341 = _3320 + _3285;
                        float _3342 = _3321 + _3286;
                        float _3343 = _3322 + _3287;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3351 = dot(vec3(_1081, _1084, _1087), vec3(_3320, _3321, _3322));
                        float _4664 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3355 = dot(vec3(_1081, _1084, _1087), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                        float _4675 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                        float _3363 = _3298 * _3339;
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3288) + _3364;
                        float _4686 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3369 = 1.0 - _3339;
                        float _3379 = (0.5 / (((_3368 * ((_3354 * _3369) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3339) * _3354))) * _3368;
                        float _4697 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3390 = (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3362 * _3362) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3147 = (_3309 * _3257.x) + _3215;
                        _3148 = (_3309 * _3257.y) + _3216;
                        _3149 = (_3309 * _3257.z) + _3217;
                        _3144 = (_3390 * _3274.x) + _3212;
                        _3145 = (_3390 * _3274.y) + _3213;
                        _3146 = (_3390 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_61_pred = _3144;
                    frontier_phi_61_pred_1 = _3149;
                    frontier_phi_61_pred_2 = _3148;
                    frontier_phi_61_pred_3 = _3147;
                    frontier_phi_61_pred_4 = _3146;
                    frontier_phi_61_pred_5 = _3145;
                }
                _2945 = frontier_phi_61_pred;
                _2955 = frontier_phi_61_pred_1;
                _2953 = frontier_phi_61_pred_2;
                _2951 = frontier_phi_61_pred_3;
                _2949 = frontier_phi_61_pred_4;
                _2947 = frontier_phi_61_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2945;
                    _3089 = _2947;
                    _3090 = _2949;
                    _3091 = _2951;
                    _3092 = _2953;
                    _3093 = _2955;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2961) & _2843) == 0u)
        {
            _3056 = _2944;
            _3058 = _2946;
            _3060 = _2948;
            _3062 = _2950;
            _3064 = _2952;
            _3066 = _2954;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
            float _3082 = _3081 * _2797;
            float _3083 = _3081 * _2798;
            float _3084 = _3081 * _2799;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3195 = _2944;
                float _3196 = _2946;
                float _3197 = _2948;
                float _3198 = _2950;
                float _3199 = _2952;
                float _3200 = _2954;
                uint _3201 = _2961;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3211)
                    {
                        frontier_phi_67_pred = _3198;
                        frontier_phi_67_pred_1 = _3199;
                        frontier_phi_67_pred_2 = _3200;
                        frontier_phi_67_pred_3 = _3197;
                        frontier_phi_67_pred_4 = _3196;
                        frontier_phi_67_pred_5 = _3195;
                    }
                    else
                    {
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3408 = _3195;
                        float _3409 = _3196;
                        float _3410 = _3197;
                        float _3411 = _3198;
                        float _3412 = _3199;
                        float _3413 = _3200;
                        uint _3414 = _3210;
                        uint _3415;
                        vec4 _3440;
                        float _3441;
                        vec4 _3456;
                        vec3 _3468;
                        vec4 _3483;
                        vec4 _3498;
                        float _3544;
                        bool _3545;
                        for (;;)
                        {
                            uint _3425 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3414));
                            _3415 = (_3414 + 4294967295u) & _3414;
                            uint _3427 = _3425 * 40u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3441 = _3440.w;
                            uint _3443 = (_3425 * 40u) + 4u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3425 * 40u) + 8u;
                            _3468 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x));
                            uint _3470 = (_3425 * 40u) + 16u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3425 * 40u) + 20u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3425 * 40u) + 24u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3519 = (_3425 * 40u) + 28u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3544 = fma(_2799, _3532.z, fma(_2798, _3532.y, _3532.x * _2797)) + _3532.w;
                            _3545 = !((fma(_2799, _3513.z, fma(_2798, _3513.y, _3513.x * _2797)) + _3513.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3545)
                            {
                                float _3572 = _3440.x - _2797;
                                float _3573 = _3440.y - _2798;
                                float _3574 = _3440.z - _2799;
                                float _3575 = dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574));
                                float _3578 = inversesqrt(_3575);
                                float _3579 = _3578 * _3572;
                                float _3580 = _3578 * _3573;
                                float _3581 = _3578 * _3574;
                                float _3585 = 1.0 - (_3575 / (_3441 * _3441));
                                float _4708 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3590 = sqrt(_3575) * _3456.w;
                                float _3592 = 1.39999997615814208984375 / (_3590 + 1.39999997615814208984375);
                                float _3593 = _3592 * _3592;
                                float _3596 = ((1.0 - _3593) * dot(vec3(_3579, _3580, _3581), vec3(_1081, _1084, _1087))) + _3593;
                                float _3599 = _3590 * _3590;
                                float _3603 = (fma(_2799, _3483.z, fma(_2798, _3483.y, _3483.x * _2797)) + _3483.w) / _3544;
                                float _3604 = (fma(_2799, _3498.z, fma(_2798, _3498.y, _3498.x * _2797)) + _3498.w) / _3544;
                                float _3608 = 1.0 - dot(vec2(_3603, _3604), vec2(_3603, _3604));
                                float _4724 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3610 = _3609 * (((isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0))) * _3586) / ((_3599 * 0.699999988079071044921875) + 1.0));
                                float _3622 = exp2(log2(1.0 / ((_3599 * 3.5) + 5.0)) * 0.25);
                                float _3623 = 1.0 - _1141;
                                float _3630 = sqrt(1.0 - ((1.0 - (_3623 * _3623)) * (1.0 - (_3622 * _3622))));
                                float _3631 = _3630 * _3630;
                                float _3632 = _3631 * _3631;
                                float _3633 = _3579 - _3082;
                                float _3634 = _3580 - _3083;
                                float _3635 = _3581 - _3084;
                                float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                                float _3643 = dot(vec3(_1081, _1084, _1087), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4735 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3647 = dot(vec3(_1081, _1084, _1087), vec3(_3639 * _3633, _3639 * _3634, _3639 * _3635));
                                float _4746 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3654 = ((_3650 * _3650) * (_3632 + (-1.0))) + 1.0;
                                float _3655 = _3592 * _3631;
                                float _3656 = _3655 * _3655;
                                float _3662 = ((1.0 - _3656) * dot(vec3(_1081, _1084, _1087), vec3(_3579, _3580, _3581))) + _3656;
                                float _4757 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3664 = 1.0 - _3631;
                                float _3674 = (0.5 / (((_3663 * ((_3646 * _3664) + _3631)) + 9.9999999392252902907785028219223e-09) + (((_3663 * _3664) + _3631) * _3646))) * _3663;
                                float _4768 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3684 = (_3609 * _3586) * (((_3632 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3654 * _3654) * ((_3599 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3684 * _3468.x;
                                frontier_phi_73_pred_1 = _3684 * _3468.y;
                                frontier_phi_73_pred_2 = _3610 * _3456.z;
                                frontier_phi_73_pred_3 = _3610 * _3456.y;
                                frontier_phi_73_pred_4 = _3610 * _3456.x;
                                frontier_phi_73_pred_5 = _3684 * _3468.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_73_pred;
                            _3689 = frontier_phi_73_pred_1;
                            _3693 = frontier_phi_73_pred_2;
                            _3692 = frontier_phi_73_pred_3;
                            _3691 = frontier_phi_73_pred_4;
                            _3690 = frontier_phi_73_pred_5;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            if (_3415 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3415;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3398;
                        frontier_phi_67_pred_1 = _3399;
                        frontier_phi_67_pred_2 = _3400;
                        frontier_phi_67_pred_3 = _3397;
                        frontier_phi_67_pred_4 = _3396;
                        frontier_phi_67_pred_5 = _3395;
                    }
                    _3063 = frontier_phi_67_pred;
                    _3065 = frontier_phi_67_pred_1;
                    _3067 = frontier_phi_67_pred_2;
                    _3061 = frontier_phi_67_pred_3;
                    _3059 = frontier_phi_67_pred_4;
                    _3057 = frontier_phi_67_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3057;
                        _3196 = _3059;
                        _3197 = _3061;
                        _3198 = _3063;
                        _3199 = _3065;
                        _3200 = _3067;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3065;
                frontier_phi_55_56_ladder_1 = _3067;
                frontier_phi_55_56_ladder_2 = _3063;
                frontier_phi_55_56_ladder_3 = _3061;
                frontier_phi_55_56_ladder_4 = _3059;
                frontier_phi_55_56_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_55_56_ladder = _2952;
                frontier_phi_55_56_ladder_1 = _2954;
                frontier_phi_55_56_ladder_2 = _2950;
                frontier_phi_55_56_ladder_3 = _2948;
                frontier_phi_55_56_ladder_4 = _2946;
                frontier_phi_55_56_ladder_5 = _2944;
            }
            _3056 = frontier_phi_55_56_ladder_5;
            _3058 = frontier_phi_55_56_ladder_4;
            _3060 = frontier_phi_55_56_ladder_3;
            _3062 = frontier_phi_55_56_ladder_2;
            _3064 = frontier_phi_55_56_ladder;
            _3066 = frontier_phi_55_56_ladder_1;
        }
        float _3071 = isnan(1.0) ? _1125 : (isnan(_1125) ? 1.0 : min(_1125, 1.0));
        _2856 = (_3071 * _3062) + _2308;
        _2858 = (_3071 * _3064) + _2310;
        _2860 = (_3071 * _3066) + _2312;
        _2862 = ((_3056 * 0.039999999105930328369140625) * _3071) + _2641;
        _2864 = ((_3058 * 0.039999999105930328369140625) * _3071) + _2643;
        _2866 = ((_3060 * 0.039999999105930328369140625) * _3071) + _2645;
    }
    else
    {
        _2856 = _2308;
        _2858 = _2310;
        _2860 = _2312;
        _2862 = _2641;
        _2864 = _2643;
        _2866 = _2645;
    }
    float _4784 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _4795 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _4806 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    uint _2886 = _259 + 6u;
    float _2894 = _1062 / cbSceneParam._m0[86u].x;
    float _2895 = _1063 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _997 : (isnan(_997) ? cbSceneParam._m0[77u].w : min(_997, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_997 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_997) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _997 : min(cbSceneParam._m0[80u].w, _997));
        float _2970 = _2969 / _997;
        float _2981 = _2970 * _1047;
        float _2982 = _1048 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2984 = _2970 * _1049;
        float _2986 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2982;
        float _2994 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3157;
        if (abs((_2983 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3157 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3119 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3157 = ((abs(_2994 / _2983) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_3004 * _3128) - exp2(_3004 * _3129)) * _3117))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3159 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3168 = exp2((_3157 * (-1.44269502162933349609375)) * (1.0 - _3159.w));
        float _3169 = log2(_3168);
        float _3185 = log2(_2914);
        _3006 = (exp2(_3185 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].x)) * _3159.x) / cbSceneParam._m0[78u].x)) + _2911;
        _3008 = (exp2(_3185 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].y)) * _3159.y) / cbSceneParam._m0[78u].y)) + _2912;
        _3010 = (exp2(_3185 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].z)) * _3159.z) / cbSceneParam._m0[78u].z)) + _2913;
        _3012 = _3168 * _2914;
    }
    else
    {
        _3006 = _2911;
        _3008 = _2912;
        _3010 = _2913;
        _3012 = _2914;
    }
    float _3024 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3025 = _3024 == 3.0;
    float _3026 = log2(_3012);
    float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2856 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1125))) + ((_2862 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1928)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2858 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1125))) + ((_2864 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1928)) * cbPerFrame._m0[3u].x));
    float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2860 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1125))) + ((_2866 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1928)) * cbPerFrame._m0[3u].x));
    float _3044 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3044 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.y = _3044 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.z = _3044 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.w = cbInstanceData._m0[_2886].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
}


