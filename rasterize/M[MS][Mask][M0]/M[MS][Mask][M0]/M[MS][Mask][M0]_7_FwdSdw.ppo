#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1164;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3756 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _419) + _472;
    float _484 = ((((_451.x - _470) * _419) + _470) * 2.0) + (-1.0);
    float _486 = ((((_451.y - _471) * _419) + _471) * 2.0) + (-1.0);
    float _487 = dot(vec2(_484, _486), vec2(_484, _486));
    float _3767 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _521 = (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _535 = _533.x;
    float _536 = 1.0 - _535;
    float _564 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_535 - _536) * cbMtdParam._m0[24u].y) + _536) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3778 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _573 = ((((cbMtdParam._m0[10u].x - _432) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _565) + _432;
    float _574 = ((((cbMtdParam._m0[10u].y - _435) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _565) + _435;
    float _575 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _438)) * _565) + _438;
    float _579 = (cbMtdParam._m0[19u].w * (_508.z - _481)) + _481;
    float _583 = ((cbMtdParam._m0[23u].y - _579) * _565) + _579;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _608 = (_602.x * 2.0) + (-1.0);
    float _609 = (_602.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3789 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _626 = (_565 * (((cbMtdParam._m0[22u].z * _520) - _520) + _608)) + _520;
    float _627 = (_565 * (((cbMtdParam._m0[22u].z * _521) - _521) + _609)) + _521;
    float _628 = (_565 * (sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) - _492)) + _492;
    float _630 = cbMtdParam._m0[22u].x + _508.w;
    float _633 = fma(_628, _232 * NORMAL.x, fma(_627, _239 * TANGENT.x, (_225 * _217) * _626));
    float _636 = fma(_628, _232 * NORMAL.y, fma(_627, _239 * TANGENT.y, (_225 * _218) * _626));
    float _639 = fma(_628, _232 * NORMAL.z, fma(_627, _239 * TANGENT.z, (_225 * _219) * _626));
    float _643 = inversesqrt(dot(vec3(_633, _636, _639), vec3(_633, _636, _639)));
    float _644 = _643 * _633;
    float _645 = _643 * _636;
    float _646 = _643 * _639;
    float _3800 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _647 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3822 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3833 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3844 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_646, cbSceneParam._m0[5u].z, fma(_645, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _644));
    float _752 = fma(_646, cbSceneParam._m0[6u].z, fma(_645, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _644));
    float _755 = fma(_646, cbSceneParam._m0[7u].z, fma(_645, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _644));
    uint _769 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3855 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _793 = ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_644, _645, _646), vec3(_722, _723, _724));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _644) - _722;
    float _802 = (_797 * _645) - _723;
    float _803 = (_797 * _646) - _724;
    float _807 = abs(dot(vec3(_722, _723, _724), vec3(_644, _645, _646)));
    float _3888 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_647);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1163;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _888 = fma(_862, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854));
        float _892 = fma(_862, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854));
        float _896 = fma(_862, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854));
        float _921 = _854 + _644;
        float _922 = _858 + _645;
        float _923 = _862 + _646;
        float _933 = fma(_923, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921)) - _888;
        float _934 = fma(_923, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921)) - _892;
        float _935 = fma(_923, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921)) - _896;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_888 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_892 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[34u].z) + ((((((_896 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _991 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_957.x + (-0.5));
        float _993 = _991 * (_957.y + (-0.5));
        float _994 = _991 * (_957.z + (-0.5));
        float _1001 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_964.x + (-0.5));
        float _1003 = _1001 * (_964.y + (-0.5));
        float _1004 = _1001 * (_964.z + (-0.5));
        float _1011 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_971.x + (-0.5));
        float _1013 = _1011 * (_971.y + (-0.5));
        float _1014 = _1011 * (_971.z + (-0.5));
        float _1021 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_978.x + (-0.5));
        float _1023 = _1021 * (_978.y + (-0.5));
        float _1024 = _1021 * (_978.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1045 = (dot(vec3(_644, _645, _646), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1055 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3936 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1057 + 1.0))) + _1062) * _1025;
        float _1072 = _993 * 0.5;
        float _1073 = _1003 * 0.5;
        float _1074 = _1013 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_644, _645, _646), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3969 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1099 + 1.0))) + _1104) * _1026;
        float _1114 = _994 * 0.5;
        float _1115 = _1004 * 0.5;
        float _1116 = _1014 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_644, _645, _646), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _4002 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1141 + 1.0))) + _1146) * _1027;
        _1163 = _994;
        _1165 = _993;
        _1166 = _992;
        _1167 = _1004;
        _1168 = _1003;
        _1169 = _1002;
        _1170 = _1014;
        _1171 = _1013;
        _1172 = _1012;
        _1173 = _1027;
        _1174 = _1026;
        _1175 = _1025;
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _1164;
        _1165 = _1164;
        _1166 = _1164;
        _1167 = _1164;
        _1168 = _1164;
        _1169 = _1164;
        _1170 = _1164;
        _1171 = _1164;
        _1172 = _1164;
        _1173 = _1164;
        _1174 = _1164;
        _1175 = _1164;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_862, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854));
        float _1207 = fma(_862, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854));
        float _1211 = fma(_862, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854));
        float _1234 = _854 + _644;
        float _1235 = _858 + _645;
        float _1236 = _862 + _646;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_644, _645, _646), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4065 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_644, _645, _646), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4098 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_644, _645, _646), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4131 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1164;
        _1473 = _1164;
        _1474 = _1164;
        _1475 = _1164;
        _1476 = _1164;
        _1477 = _1164;
        _1478 = _1164;
        _1479 = _1164;
        _1480 = _1164;
        _1481 = _1164;
        _1482 = _1164;
        _1483 = _1164;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1176)) + _1176;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1177)) + _1177;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1178)) + _1178;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _801 * 0.5;
    float _1541 = _802 * 0.5;
    float _1542 = _803 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1163, _1167, _1170, _1173));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _647);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_862, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_862, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_862, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1672 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1675 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1703 = frontier_phi_14_12_ladder;
        }
        float _1874;
        if (_1672 > 0.0)
        {
            _1874 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1874 = frontier_phi_23_19_ladder;
        }
        float _2169;
        if (_1675 > 0.0)
        {
            _2169 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2169 = frontier_phi_35_30_ladder;
        }
        float _2171 = isnan(_1874) ? _1703 : (isnan(_1703) ? _1874 : min(_1703, _1874));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1669) + _1658;
        float _2177 = (_2172 * _1672) + _1662;
        float _2178 = (_2172 * _1675) + _1666;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_13_35_ladder = _2323.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2323.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_13_35_ladder_2;
        _1693 = frontier_phi_13_35_ladder_1;
        _1695 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1609);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _647);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_862, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_862, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_862, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1769 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1772 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1879;
        if (_1766 > 0.0)
        {
            _1879 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1879 = frontier_phi_25_21_ladder;
        }
        float _2196;
        if (_1769 > 0.0)
        {
            _2196 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2196 = frontier_phi_37_32_ladder;
        }
        float _2523;
        if (_1772 > 0.0)
        {
            _2523 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2523 = frontier_phi_47_44_ladder;
        }
        float _2525 = isnan(_2196) ? _1879 : (isnan(_1879) ? _2196 : min(_1879, _2196));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1766) + _1755;
        float _2531 = (_2526 * _1769) + _1759;
        float _2532 = (_2526 * _1772) + _1763;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_22_47_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_22_47_ladder_2;
        _1793 = frontier_phi_22_47_ladder_1;
        _1795 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1700);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1807 = ((((1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_822 * _809)) * _793;
    float _1808 = _1807 * ((cbModelParam._m0[1u].w * (_1791 - _1691)) + _1691);
    float _1809 = _1807 * ((cbModelParam._m0[1u].w * (_1793 - _1693)) + _1693);
    float _1810 = _1807 * ((cbModelParam._m0[1u].w * (_1795 - _1695)) + _1695);
    float _1813 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1866 = _1853 / _1865;
    float _1867 = _1857 / _1865;
    float _1868 = _1861 / _1865;
    float _2015;
    float _2016;
    float _2017;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1895 = ((uint(_1868 > cbSceneParam._m0[59u].y) + uint(_1868 > cbSceneParam._m0[59u].x)) + uint(_1868 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1896 = _1895 + 43u;
        uint _1904 = _1895 + 44u;
        uint _1912 = _1895 + 45u;
        uint _1920 = _1895 + 46u;
        float _1931 = fma(_1865, cbSceneParam._m0[_1896].w, fma(_1861, cbSceneParam._m0[_1896].z, fma(_1857, cbSceneParam._m0[_1896].y, _1853 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1865, cbSceneParam._m0[_1904].w, fma(_1861, cbSceneParam._m0[_1904].z, fma(_1857, cbSceneParam._m0[_1904].y, _1853 * cbSceneParam._m0[_1904].x)));
        float _1943 = fma(_1865, cbSceneParam._m0[_1920].w, fma(_1861, cbSceneParam._m0[_1920].z, fma(_1857, cbSceneParam._m0[_1920].y, _1853 * cbSceneParam._m0[_1920].x)));
        float _1948 = cbSceneParam._m0[33u].z * _1943;
        float _1950 = cbSceneParam._m0[33u].w * _1943;
        float _1953 = fma(_1865, cbSceneParam._m0[_1912].w, fma(_1861, cbSceneParam._m0[_1912].z, fma(_1857, cbSceneParam._m0[_1912].y, _1853 * cbSceneParam._m0[_1912].x))) / _1943;
        float _2001 = (cbSceneParam._m0[33u].x - sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868))) * cbSceneParam._m0[33u].y;
        float _4257 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2008 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 + _1931) / _1943, (_1950 + _1935) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 + _1931) / _1943, (_1935 - _1948) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 - _1948) / _1943, (_1935 - _1950) / _1943), _1953), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 - _1950) / _1943, (_1948 + _1935) / _1943), _1953), 0.0)).x), vec4(0.25)));
        _2015 = 1.0 - (_2008 * cbSceneParam._m0[34u].x);
        _2016 = 1.0 - (_2008 * cbSceneParam._m0[34u].y);
        _2017 = 1.0 - (_2008 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2015 = 1.0;
        _2016 = 1.0;
        _2017 = 1.0;
    }
    float _2081;
    float _2083;
    float _2085;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2069 = fma(_1865, cbSceneParam._m0[63u].w, fma(_1861, cbSceneParam._m0[63u].z, fma(_1857, cbSceneParam._m0[63u].y, _1853 * cbSceneParam._m0[63u].x)));
        float _2070 = fma(_1865, cbSceneParam._m0[60u].w, fma(_1861, cbSceneParam._m0[60u].z, fma(_1857, cbSceneParam._m0[60u].y, _1853 * cbSceneParam._m0[60u].x))) / _2069;
        float _2071 = fma(_1865, cbSceneParam._m0[61u].w, fma(_1861, cbSceneParam._m0[61u].z, fma(_1857, cbSceneParam._m0[61u].y, _1853 * cbSceneParam._m0[61u].x))) / _2069;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2070 >= cbSceneParam._m0[64u].x) && (_2071 >= cbSceneParam._m0[64u].y)) && (_2070 <= cbSceneParam._m0[64u].z)) && (_2071 <= cbSceneParam._m0[64u].w))
        {
            float _2209 = fma(_1865, cbSceneParam._m0[62u].w, fma(_1861, cbSceneParam._m0[62u].z, fma(_1857, cbSceneParam._m0[62u].y, _1853 * cbSceneParam._m0[62u].x))) / _2069;
            float _2213 = isnan(cbSceneParam._m0[41u].w) ? _2209 : (isnan(_2209) ? cbSceneParam._m0[41u].w : max(_2209, cbSceneParam._m0[41u].w));
            float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868))) * cbSceneParam._m0[33u].y;
            float _4273 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
            float _2263 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2070, cbSceneParam._m0[33u].w + _2071), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2070, _2071 - cbSceneParam._m0[33u].z), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2070 - cbSceneParam._m0[33u].z, _2071 - cbSceneParam._m0[33u].w), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2070 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2071), _2213), 0.0)).x), vec4(0.25)));
            float _2267 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
            float _2268 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
            float _2269 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2269) ? _2017 : (isnan(_2017) ? _2269 : min(_2017, _2269));
            frontier_phi_34_33_ladder_1 = isnan(_2268) ? _2016 : (isnan(_2016) ? _2268 : min(_2016, _2268));
            frontier_phi_34_33_ladder_2 = isnan(_2267) ? _2015 : (isnan(_2015) ? _2267 : min(_2015, _2267));
        }
        else
        {
            frontier_phi_34_33_ladder = _2017;
            frontier_phi_34_33_ladder_1 = _2016;
            frontier_phi_34_33_ladder_2 = _2015;
        }
        _2081 = frontier_phi_34_33_ladder_2;
        _2083 = frontier_phi_34_33_ladder_1;
        _2085 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2081 = _2015;
        _2083 = _2016;
        _2085 = _2017;
    }
    uvec4 _2090 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2092 = _2090.x * 14u;
    uint _2093 = _2092 + 13u;
    float _2100 = _793 + (-1.0);
    float _2105 = (cbLight._m0[_2093].x * _2100) + 1.0;
    float _2106 = (cbLight._m0[_2093].y * _2100) + 1.0;
    float _2107 = (cbLight._m0[_2093].z * _2100) + 1.0;
    float _2108 = (cbLight._m0[_2093].w * _2100) + 1.0;
    uint _2109 = _2092 + 5u;
    float _2115 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2119 = _2092 + 4u;
    float _2128 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2132 = _2092 | 1u;
    float _2143 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_644, _645, _646));
    float _2146 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_644, _645, _646));
    float _4309 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _4320 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2151 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2153 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2160 = ((cbLight._m0[_2109].x * _2115) * _2153) + (((cbLight._m0[_2119].x * _2081) * _2128) * _2151);
    float _2161 = ((_2115 * cbLight._m0[_2109].y) * _2153) + (((cbLight._m0[_2119].y * _2083) * _2128) * _2151);
    float _2162 = ((_2115 * cbLight._m0[_2109].z) * _2153) + (((cbLight._m0[_2119].z * _2085) * _2128) * _2151);
    uvec4 _2166 = floatBitsToUint(cbLight._m0[_2092 + 12u]);
    bool _2168 = _2166.x == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2168)
    {
        _2270 = _2160;
        _2272 = _2161;
        _2274 = _2162;
    }
    else
    {
        uint _2278 = _2092 + 6u;
        float _2294 = (dot(vec3(cbLight._m0[_2092 + 2u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4331 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2297 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2270 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2160;
        _2272 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2161;
        _2274 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2162;
    }
    bool _2277 = _2166.y == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2277)
    {
        _2332 = _2270;
        _2334 = _2272;
        _2336 = _2274;
    }
    else
    {
        uint _2494 = _2092 + 7u;
        float _2510 = (dot(vec3(cbLight._m0[_2092 + 3u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4347 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2513 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2332 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2270;
        _2334 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2272;
        _2336 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2274;
    }
    uint _2339 = _2092 + 8u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _647) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2092].x + _722;
    float _2355 = cbLight._m0[_2092].y + _723;
    float _2356 = cbLight._m0[_2092].z + _724;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2092].xyz));
    float _4363 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _4374 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2368 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2369 = dot(vec3(_644, _645, _646), vec3(_2361, _2362, _2363));
    float _4385 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2361, _2362, _2363));
    float _4396 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2353 * _2353;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2393 = 1.0 - _2353;
    float _2404 = (0.5 / (((_2368 * ((_2367 * _2393) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2393) + _2353) * _2367))) * _2367;
    float _4407 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    uint _2420 = _2092 + 9u;
    float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _647) * 0.949999988079071044921875);
    float _2432 = _2431 * _2431;
    float _2433 = cbLight._m0[_2132].x + _722;
    float _2434 = cbLight._m0[_2132].y + _723;
    float _2435 = cbLight._m0[_2132].z + _724;
    float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
    float _2440 = _2439 * _2433;
    float _2441 = _2439 * _2434;
    float _2442 = _2439 * _2435;
    float _2443 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2132].xyz));
    float _4418 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2447 = dot(vec3(_644, _645, _646), vec3(_2440, _2441, _2442));
    float _4429 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2451 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2440, _2441, _2442));
    float _4440 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2455 = _2432 * _2432;
    float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
    float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2469 = 1.0 - _2432;
    float _2479 = (0.5 / (((_2368 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2469) + _2432) * _2446))) * _2446;
    float _4451 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
    float _2491 = (((_2468 * cbLight._m0[_2420].x) * _2481) * _2115) + ((((cbLight._m0[_2339].x * _2081) * _2392) * _2406) * _2128);
    float _2492 = (((_2468 * cbLight._m0[_2420].y) * _2481) * _2115) + ((((cbLight._m0[_2339].y * _2083) * _2392) * _2406) * _2128);
    float _2493 = (((_2468 * cbLight._m0[_2420].z) * _2481) * _2115) + ((((cbLight._m0[_2339].z * _2085) * _2392) * _2406) * _2128);
    float _2549;
    float _2551;
    float _2553;
    if (_2168)
    {
        _2549 = _2491;
        _2551 = _2492;
        _2553 = _2493;
    }
    else
    {
        uint _2555 = _2092 + 2u;
        uint _2559 = _2092 + 10u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _647) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _722;
        float _2576 = cbLight._m0[_2555].y + _723;
        float _2577 = cbLight._m0[_2555].z + _724;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2555].xyz));
        float _4462 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2589 = dot(vec3(_644, _645, _646), vec3(_2582, _2583, _2584));
        float _4473 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4484 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2610 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2611 = 1.0 - _2574;
        float _2621 = (0.5 / (((_2368 * ((_2588 * _2611) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2611) + _2574) * _2588))) * _2588;
        float _4495 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2549 = (((_2610 * cbLight._m0[_2559].x) * _2623) * _2624) + _2491;
        _2551 = (((_2610 * cbLight._m0[_2559].y) * _2623) * _2624) + _2492;
        _2553 = (((_2610 * cbLight._m0[_2559].z) * _2623) * _2624) + _2493;
    }
    float _2655;
    float _2657;
    float _2659;
    if (_2277)
    {
        _2655 = _2549;
        _2657 = _2551;
        _2659 = _2553;
    }
    else
    {
        uint _2666 = _2092 + 3u;
        uint _2670 = _2092 + 11u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _647) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _722;
        float _2687 = cbLight._m0[_2666].y + _723;
        float _2688 = cbLight._m0[_2666].z + _724;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2666].xyz));
        float _4511 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2700 = dot(vec3(_644, _645, _646), vec3(_2693, _2694, _2695));
        float _4522 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4533 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2721 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2722 = 1.0 - _2685;
        float _2732 = (0.5 / (((_2368 * ((_2699 * _2722) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2722) + _2685) * _2699))) * _2699;
        float _4544 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2655 = (((_2721 * cbLight._m0[_2670].x) * _2734) * _2735) + _2549;
        _2657 = (((_2721 * cbLight._m0[_2670].y) * _2734) * _2735) + _2551;
        _2659 = (((_2721 * cbLight._m0[_2670].z) * _2734) * _2735) + _2553;
    }
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_2090.y == 0u)
    {
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.x;
        uint _2768 = uint((float(_2756.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2757))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2757)));
        float _2778 = (log2(_1868 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2779 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        uint _2782 = uint(isnan(14.0) ? _2779 : (isnan(_2779) ? 14.0 : min(_2779, 14.0)));
        uvec4 _2787 = texelFetch(g_lightClusterGridBuffer, int(((_2782 << 2u) + (_2768 << 6u)) >> 2u));
        uint _2788 = _2787.x;
        uint _2789 = _2756.z;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((((1u << ((_2789 >> 4u) & 15u)) + 4294967295u) & _2788) == 0u) || ((_2789 & 240u) == 0u))
        {
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
        }
        else
        {
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3029)
                {
                    frontier_phi_66_pred = _3018;
                    frontier_phi_66_pred_1 = _3017;
                    frontier_phi_66_pred_2 = _3016;
                    frontier_phi_66_pred_3 = _3015;
                    frontier_phi_66_pred_4 = _3014;
                    frontier_phi_66_pred_5 = _3013;
                }
                else
                {
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    uint _3143;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3028;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    for (;;)
                    {
                        uint _3147 = uint(findLSB(_3143)) + (_3019 << 5u);
                        uint _3144 = (_3143 + 4294967295u) & _3143;
                        uint _3149 = _3147 * 48u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3169 = (_3147 * 48u) + 4u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3188 = (_3147 * 48u) + 8u;
                        vec3 _3199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x));
                        float _3203 = _3163.x - _1866;
                        float _3204 = _3163.y - _1867;
                        float _3205 = _3163.z - _1868;
                        float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                        float _3209 = inversesqrt(_3206);
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3213 = dot(vec3(_749, _752, _755), vec3(_3210, _3211, _3212));
                        float _3218 = 1.0 - (_3206 * _3163.w);
                        float _4570 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3220 = sqrt(_3206) * _3182.w;
                        float _3223 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3213) + _3224;
                        float _3230 = _3220 * _3220;
                        float _3234 = ((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3219) / ((_3230 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _1866;
                        float _3239 = (-0.0) - _1867;
                        float _3240 = (-0.0) - _1868;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3254 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _809;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_749, _752, _755), vec3(_3245, _3246, _3247));
                        float _4586 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3279 = dot(vec3(_749, _752, _755), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4597 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3223 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3213) + _3288;
                        float _4608 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4619 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3286 * _3286) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125))) * _3219;
                        _3072 = (_3234 * _3182.x) + _3140;
                        _3073 = (_3234 * _3182.y) + _3141;
                        _3074 = (_3234 * _3182.z) + _3142;
                        _3069 = (_3314 * _3199.x) + _3137;
                        _3070 = (_3314 * _3199.y) + _3138;
                        _3071 = (_3314 * _3199.z) + _3139;
                        if (_3144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3144;
                        }
                    }
                    frontier_phi_66_pred = _3074;
                    frontier_phi_66_pred_1 = _3073;
                    frontier_phi_66_pred_2 = _3072;
                    frontier_phi_66_pred_3 = _3071;
                    frontier_phi_66_pred_4 = _3070;
                    frontier_phi_66_pred_5 = _3069;
                }
                _2879 = frontier_phi_66_pred;
                _2877 = frontier_phi_66_pred_1;
                _2875 = frontier_phi_66_pred_2;
                _2873 = frontier_phi_66_pred_3;
                _2871 = frontier_phi_66_pred_4;
                _2869 = frontier_phi_66_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2869;
                    _3014 = _2871;
                    _3015 = _2873;
                    _3016 = _2875;
                    _3017 = _2877;
                    _3018 = _2879;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
        }
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.z;
        uint _2885 = (_2883 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2885) & _2788) == 0u)
        {
            _2981 = _2868;
            _2983 = _2870;
            _2985 = _2872;
            _2987 = _2874;
            _2989 = _2876;
            _2991 = _2878;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
            float _3007 = _3006 * _1866;
            float _3008 = _3006 * _1867;
            float _3009 = _3006 * _1868;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2885 < ((_2883 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3120 = _2868;
                float _3121 = _2870;
                float _3122 = _2872;
                float _3123 = _2874;
                float _3124 = _2876;
                float _3125 = _2878;
                uint _3126 = _2885;
                uint _3135;
                bool _3136;
                for (;;)
                {
                    _3135 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                    _3136 = _3135 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3136)
                    {
                        frontier_phi_72_pred = _3125;
                        frontier_phi_72_pred_1 = _3124;
                        frontier_phi_72_pred_2 = _3123;
                        frontier_phi_72_pred_3 = _3122;
                        frontier_phi_72_pred_4 = _3121;
                        frontier_phi_72_pred_5 = _3120;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3332 = _3120;
                        float _3333 = _3121;
                        float _3334 = _3122;
                        float _3335 = _3123;
                        float _3336 = _3124;
                        float _3337 = _3125;
                        uint _3338 = _3135;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3423;
                        float _3469;
                        bool _3470;
                        for (;;)
                        {
                            uint _3349 = ((_3126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3349 * 40u) + 20u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3349 * 40u) + 24u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3444 = (_3349 * 40u) + 28u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3469 = fma(_1868, _3457.z, fma(_1867, _3457.y, _3457.x * _1866)) + _3457.w;
                            _3470 = !((fma(_1868, _3438.z, fma(_1867, _3438.y, _3438.x * _1866)) + _3438.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3470)
                            {
                                float _3497 = _3364.x - _1866;
                                float _3498 = _3364.y - _1867;
                                float _3499 = _3364.z - _1868;
                                float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                                float _3503 = inversesqrt(_3500);
                                float _3504 = _3503 * _3497;
                                float _3505 = _3503 * _3498;
                                float _3506 = _3503 * _3499;
                                float _3510 = 1.0 - (_3500 / (_3365 * _3365));
                                float _4630 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3515 = sqrt(_3500) * _3380.w;
                                float _3517 = 1.39999997615814208984375 / (_3515 + 1.39999997615814208984375);
                                float _3518 = _3517 * _3517;
                                float _3521 = ((1.0 - _3518) * dot(vec3(_3504, _3505, _3506), vec3(_749, _752, _755))) + _3518;
                                float _3524 = _3515 * _3515;
                                float _3528 = (fma(_1868, _3407.z, fma(_1867, _3407.y, _3407.x * _1866)) + _3407.w) / _3469;
                                float _3529 = (fma(_1868, _3423.z, fma(_1867, _3423.y, _3423.x * _1866)) + _3423.w) / _3469;
                                float _3533 = 1.0 - dot(vec2(_3528, _3529), vec2(_3528, _3529));
                                float _4646 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3535 = _3534 * (((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3511) / ((_3524 * 0.699999988079071044921875) + 1.0));
                                float _3547 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                                float _3548 = 1.0 - _809;
                                float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                                float _3556 = _3555 * _3555;
                                float _3557 = _3556 * _3556;
                                float _3558 = _3504 - _3007;
                                float _3559 = _3505 - _3008;
                                float _3560 = _3506 - _3009;
                                float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                                float _3568 = dot(vec3(_749, _752, _755), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4657 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3572 = dot(vec3(_749, _752, _755), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                                float _4668 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                                float _3580 = _3517 * _3556;
                                float _3581 = _3580 * _3580;
                                float _3587 = ((1.0 - _3581) * dot(vec3(_749, _752, _755), vec3(_3504, _3505, _3506))) + _3581;
                                float _4679 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3589 = 1.0 - _3556;
                                float _3599 = (0.5 / (((_3588 * ((_3571 * _3589) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3556) * _3571))) * _3588;
                                float _4690 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3609 = (_3534 * _3511) * (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3579 * _3579) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3535 * _3380.y;
                                frontier_phi_78_pred_1 = _3535 * _3380.x;
                                frontier_phi_78_pred_2 = _3609 * _3392.z;
                                frontier_phi_78_pred_3 = _3609 * _3392.y;
                                frontier_phi_78_pred_4 = _3609 * _3392.x;
                                frontier_phi_78_pred_5 = _3535 * _3380.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3617 = frontier_phi_78_pred;
                            _3616 = frontier_phi_78_pred_1;
                            _3615 = frontier_phi_78_pred_2;
                            _3614 = frontier_phi_78_pred_3;
                            _3613 = frontier_phi_78_pred_4;
                            _3618 = frontier_phi_78_pred_5;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3324;
                        frontier_phi_72_pred_1 = _3323;
                        frontier_phi_72_pred_2 = _3322;
                        frontier_phi_72_pred_3 = _3321;
                        frontier_phi_72_pred_4 = _3320;
                        frontier_phi_72_pred_5 = _3319;
                    }
                    _2992 = frontier_phi_72_pred;
                    _2990 = frontier_phi_72_pred_1;
                    _2988 = frontier_phi_72_pred_2;
                    _2986 = frontier_phi_72_pred_3;
                    _2984 = frontier_phi_72_pred_4;
                    _2982 = frontier_phi_72_pred_5;
                    uint _3127 = _3126 + 1u;
                    if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3120 = _2982;
                        _3121 = _2984;
                        _3122 = _2986;
                        _3123 = _2988;
                        _3124 = _2990;
                        _3125 = _2992;
                        _3126 = _3127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2992;
                frontier_phi_60_61_ladder_1 = _2990;
                frontier_phi_60_61_ladder_2 = _2986;
                frontier_phi_60_61_ladder_3 = _2984;
                frontier_phi_60_61_ladder_4 = _2982;
                frontier_phi_60_61_ladder_5 = _2988;
            }
            else
            {
                frontier_phi_60_61_ladder = _2878;
                frontier_phi_60_61_ladder_1 = _2876;
                frontier_phi_60_61_ladder_2 = _2872;
                frontier_phi_60_61_ladder_3 = _2870;
                frontier_phi_60_61_ladder_4 = _2868;
                frontier_phi_60_61_ladder_5 = _2874;
            }
            _2981 = frontier_phi_60_61_ladder_4;
            _2983 = frontier_phi_60_61_ladder_3;
            _2985 = frontier_phi_60_61_ladder_2;
            _2987 = frontier_phi_60_61_ladder_5;
            _2989 = frontier_phi_60_61_ladder_1;
            _2991 = frontier_phi_60_61_ladder;
        }
        float _2996 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2801 = (_2996 * _2987) + _2332;
        _2803 = (_2996 * _2989) + _2334;
        _2805 = (_2996 * _2991) + _2336;
        _2807 = ((_2981 * 0.039999999105930328369140625) * _2996) + _2655;
        _2809 = ((_2983 * 0.039999999105930328369140625) * _2996) + _2657;
        _2811 = ((_2985 * 0.039999999105930328369140625) * _2996) + _2659;
    }
    else
    {
        _2801 = _2332;
        _2803 = _2334;
        _2805 = _2336;
        _2807 = _2655;
        _2809 = _2657;
        _2811 = _2659;
    }
    float _4706 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4717 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4728 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    uint _2831 = _245 + 6u;
    float _2839 = _730 / cbSceneParam._m0[86u].x;
    float _2840 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2893 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2894 = _2893 / _665;
        float _2905 = _2894 * _715;
        float _2906 = _716 * _2894;
        float _2907 = (-0.0) - _2906;
        float _2909 = _2894 * _717;
        float _2911 = (cbSceneParam._m0[77u].w * _2907) / _2893;
        float _2912 = _2911 + cbSceneParam._m0[79u].w;
        float _2913 = cbSceneParam._m0[79u].w - _2906;
        float _2919 = sqrt(((_2905 * _2905) + (_2906 * _2906)) + (_2909 * _2909));
        float _2922 = (1.0 - (cbSceneParam._m0[77u].w / _2893)) * _2919;
        float _2927 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2929 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3082;
        if (abs((_2907 - _2911) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3082 = ((((_2912 > 0.0) ? exp2(_2927 * _2912) : (2.0 - exp2(_2929 * _2912))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2922;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : max(_2912, _2913));
            float _3044 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : min(_2912, _2913));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3082 = ((abs(_2919 / _2907) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2927 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2927 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2929 * _3053) - exp2(_2929 * _3054)) * _3042))) + (_2922 * cbSceneParam._m0[80u].z);
        }
        vec4 _3084 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3093 = exp2((_3082 * (-1.44269502162933349609375)) * (1.0 - _3084.w));
        float _3094 = log2(_3093);
        float _3110 = log2(_2859);
        _2931 = (exp2(_3110 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].x)) * _3084.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2933 = (exp2(_3110 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].y)) * _3084.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2935 = (exp2(_3110 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].z)) * _3084.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2937 = _3093 * _2859;
    }
    else
    {
        _2931 = _2856;
        _2933 = _2857;
        _2935 = _2858;
        _2937 = _2859;
    }
    float _2949 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2950 = _2949 == 3.0;
    float _2951 = log2(_2937);
    float _2958 = exp2(_2951 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2801 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _793))) + ((_2807 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2959 = exp2(_2951 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2803 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _793))) + ((_2809 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2960 = exp2(_2951 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2805 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _793))) + ((_2811 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2969 = (_2949 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2969 * (_2950 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2931)));
    SV_Target.y = _2969 * (_2950 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2933)));
    SV_Target.z = _2969 * (_2950 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2935)));
    SV_Target.w = cbInstanceData._m0[_2831].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
}


