#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1330;
float _3713;
float _3714;
float _3715;
float _3716;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _399 = _397.x;
    float _411 = dot(vec4(_399, _397.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _428 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_399 - _411) * cbMtdParam._m0[24u].z) + _411) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3725 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _442 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_429 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323);
    float _445 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_429 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324);
    float _448 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_429 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325);
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _517 = ((_487.z - _508) * _429) + _508;
    float _520 = ((((_487.x - _506) * _429) + _506) * 2.0) + (-1.0);
    float _522 = ((((_487.y - _507) * _429) + _507) * 2.0) + (-1.0);
    float _523 = dot(vec2(_520, _522), vec2(_520, _522));
    float _3736 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _571 = _569.x;
    float _572 = 1.0 - _571;
    float _578 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _581 = ((isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : min(_578, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _590 = (_581 - ((((((_571 - _572) * cbMtdParam._m0[24u].w) + _572) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _581))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3757 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _598 = (_591 * ((_467.x * cbMtdParam._m0[18u].x) - _442)) + _442;
    float _599 = (_591 * ((_467.y * cbMtdParam._m0[18u].y) - _445)) + _445;
    float _600 = (_591 * ((_467.z * cbMtdParam._m0[18u].z) - _448)) + _448;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _614 = _612.x;
    float _615 = 1.0 - _614;
    float _642 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_614 - _615) * cbMtdParam._m0[24u].y) + _615) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3768 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _651 = ((((cbMtdParam._m0[10u].x - _598) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _643) + _598;
    float _652 = ((((cbMtdParam._m0[10u].y - _599) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _643) + _599;
    float _653 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _600)) * _643) + _600;
    float _657 = (cbMtdParam._m0[19u].w * (_544.z - _517)) + _517;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _678 = (_671.x * 2.0) + (-1.0);
    float _679 = (_671.y * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3779 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _688 = (_591 * (_671.z - _657)) + _657;
    float _691 = ((cbMtdParam._m0[23u].y - _688) * _643) + _688;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _716 = (_710.x * 2.0) + (-1.0);
    float _717 = (_710.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _3790 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _726 = (((_544.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _520;
    float _727 = (((_544.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _522;
    float _739 = (((_678 - _726) + (cbMtdParam._m0[21u].x * _726)) * _591) + _726;
    float _740 = (((_679 - _727) + (cbMtdParam._m0[21u].x * _727)) * _591) + _727;
    float _741 = (_591 * (sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _528)) + _528;
    float _752 = (((_716 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _643) + _739;
    float _753 = (((_717 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _643) + _740;
    float _754 = ((sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _741) * _643) + _741;
    float _756 = cbMtdParam._m0[22u].x + _544.w;
    float _759 = fma(_754, _242 * NORMAL.x, fma(_753, _249 * TANGENT.x, (_235 * _227) * _752));
    float _762 = fma(_754, _242 * NORMAL.y, fma(_753, _249 * TANGENT.y, (_235 * _228) * _752));
    float _765 = fma(_754, _242 * NORMAL.z, fma(_753, _249 * TANGENT.z, (_235 * _229) * _752));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3801 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _773 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3823 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3834 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3845 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    vec4 _855 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _857 = _855.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1011 = sqrt(((_841 * _841) + (_842 * _842)) + (_843 * _843));
        float _1017 = (cbMatDynParam._m0[5u].x * _1011) + cbMatDynParam._m0[5u].y;
        float _3856 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1022 = (cbMatDynParam._m0[5u].z * _1011) + cbMatDynParam._m0[5u].w;
        float _3867 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) - _1018)) + _1018) < ((_857 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _868 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _869 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _887 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _890 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _893 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _906 = _255 + 9u;
    uint _907 = _906 + uint(cbMatDynParam._m0[0u].w);
    float _913 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_907].x;
    float _914 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_907].y;
    float _915 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_907].z;
    float _3878 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _868, cbSceneParam._m0[86u].y * _869));
    float _931 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _927.x;
    float _932 = dot(vec3(_770, _771, _772), vec3(_848, _849, _850));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _770) - _848;
    float _940 = (_935 * _771) - _849;
    float _941 = (_935 * _772) - _850;
    float _945 = abs(dot(vec3(_848, _849, _850), vec3(_770, _771, _772)));
    float _3911 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_773);
    float _960 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1058 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1062 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1087 = _992 + _770;
        float _1088 = _996 + _771;
        float _1089 = _1000 + _772;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_770, _771, _772), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3959 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_770, _771, _772), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3992 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_770, _771, _772), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4025 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1376 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1380 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1403 = _992 + _770;
        float _1404 = _996 + _771;
        float _1405 = _1000 + _772;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_770, _771, _772), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4088 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_770, _771, _772), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4121 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_770, _771, _772), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4154 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = _1330;
        _1652 = _1330;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1342)) + _1342;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _939 * 0.5;
    float _1710 = _940 * 0.5;
    float _1711 = _941 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1839 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1842 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1870 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1839 > 0.0)
        {
            _2091 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2337;
        if (_1842 > 0.0)
        {
            _2337 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2337 = frontier_phi_38_33_ladder;
        }
        float _2339 = isnan(_2091) ? _1870 : (isnan(_1870) ? _2091 : min(_1870, _2091));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1836) + _1825;
        float _2345 = (_2340 * _1839) + _1829;
        float _2346 = (_2340 * _1842) + _1833;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_16_38_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_16_38_ladder_2;
        _1860 = frontier_phi_16_38_ladder_1;
        _1862 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1778);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1934 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1937 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2096;
        if (_1931 > 0.0)
        {
            _2096 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1934 > 0.0)
        {
            _2364 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2569;
        if (_1937 > 0.0)
        {
            _2569 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2569 = frontier_phi_49_46_ladder;
        }
        float _2571 = isnan(_2364) ? _2096 : (isnan(_2096) ? _2364 : min(_2096, _2364));
        float _2572 = isnan(_2569) ? _2571 : (isnan(_2571) ? _2569 : min(_2571, _2569));
        float _2576 = (_2572 * _1931) + _1920;
        float _2577 = (_2572 * _1934) + _1924;
        float _2578 = (_2572 * _1937) + _1928;
        float _2579 = _2572 * 9.9999997473787516355514526367188e-05;
        float _2580 = (-1.0) - _2579;
        float _2582 = _2579 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2578 > _2582) || ((_2578 < _2580) || ((_2577 > _2582) || ((_2577 < _2580) || ((_2576 < _2580) || (_2576 > _2582))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2578, cbModelParam._m0[17u].z, fma(_2577, cbModelParam._m0[17u].y, _2576 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2578, cbModelParam._m0[18u].z, fma(_2577, cbModelParam._m0[18u].y, _2576 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2578, cbModelParam._m0[19u].z, fma(_2577, cbModelParam._m0[19u].y, _2576 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_25_49_ladder = _2777.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2777.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2777.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_25_49_ladder_2;
        _1958 = frontier_phi_25_49_ladder_1;
        _1960 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1867);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1972 = ((((1.0 - _960) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_960 * _947)) * _931;
    float _1973 = _1972 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1974 = _1972 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1975 = _1972 * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    vec4 _1992 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_868, _869));
    float _1994 = _1992.w;
    float _2006 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1994);
    float _2007 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1994);
    float _2008 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1994);
    uvec4 _2012 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2014 = _2012.x * 14u;
    uint _2015 = _2014 + 13u;
    float _2022 = _931 + (-1.0);
    float _2027 = (cbLight._m0[_2015].x * _2022) + 1.0;
    float _2028 = (cbLight._m0[_2015].y * _2022) + 1.0;
    float _2029 = (cbLight._m0[_2015].z * _2022) + 1.0;
    float _2030 = (cbLight._m0[_2015].w * _2022) + 1.0;
    uint _2031 = _2014 + 5u;
    float _2037 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2041 = _2014 + 4u;
    float _2050 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2054 = _2014 | 1u;
    float _2065 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_770, _771, _772));
    float _2068 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_770, _771, _772));
    float _4290 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _4301 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2075 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2082 = ((cbLight._m0[_2031].x * _2037) * _2075) + (((cbLight._m0[_2041].x * _2006) * _2050) * _2073);
    float _2083 = ((_2037 * cbLight._m0[_2031].y) * _2075) + (((cbLight._m0[_2041].y * _2007) * _2050) * _2073);
    float _2084 = ((_2037 * cbLight._m0[_2031].z) * _2075) + (((cbLight._m0[_2041].z * _2008) * _2050) * _2073);
    uvec4 _2088 = floatBitsToUint(cbLight._m0[_2014 + 12u]);
    bool _2090 = _2088.x == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2090)
    {
        _2101 = _2082;
        _2103 = _2083;
        _2105 = _2084;
    }
    else
    {
        uint _2109 = _2014 + 6u;
        float _2125 = (dot(vec3(cbLight._m0[_2014 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4312 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2128 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2101 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _2082;
        _2103 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _2083;
        _2105 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _2084;
    }
    bool _2108 = _2088.y == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2108)
    {
        _2146 = _2101;
        _2148 = _2103;
        _2150 = _2105;
    }
    else
    {
        uint _2308 = _2014 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2014 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4328 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2327 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2146 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2101;
        _2148 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2103;
        _2150 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2105;
    }
    uint _2153 = _2014 + 8u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _773) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_2014].x + _848;
    float _2169 = cbLight._m0[_2014].y + _849;
    float _2170 = cbLight._m0[_2014].z + _850;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2014].xyz));
    float _4344 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2182 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2183 = dot(vec3(_770, _771, _772), vec3(_2175, _2176, _2177));
    float _4366 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2175, _2176, _2177));
    float _4377 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2167 * _2167;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2207 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2182 * ((_2181 * _2207) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2207) + _2167) * _2181))) * _2181;
    float _4388 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    uint _2234 = _2014 + 9u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _773) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2054].x + _848;
    float _2248 = cbLight._m0[_2054].y + _849;
    float _2249 = cbLight._m0[_2054].z + _850;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2054].xyz));
    float _4399 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2261 = dot(vec3(_770, _771, _772), vec3(_2254, _2255, _2256));
    float _4410 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2254, _2255, _2256));
    float _4421 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2246 * _2246;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2283 = 1.0 - _2246;
    float _2293 = (0.5 / (((_2182 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2283) + _2246) * _2260))) * _2260;
    float _4432 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    float _2305 = (((_2282 * cbLight._m0[_2234].x) * _2295) * _2037) + ((((cbLight._m0[_2153].x * _2006) * _2206) * _2220) * _2050);
    float _2306 = (((_2282 * cbLight._m0[_2234].y) * _2295) * _2037) + ((((cbLight._m0[_2153].y * _2007) * _2206) * _2220) * _2050);
    float _2307 = (((_2282 * cbLight._m0[_2234].z) * _2295) * _2037) + ((((cbLight._m0[_2153].z * _2008) * _2206) * _2220) * _2050);
    float _2369;
    float _2371;
    float _2373;
    if (_2090)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2014 + 2u;
        uint _2379 = _2014 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _773) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _848;
        float _2396 = cbLight._m0[_2375].y + _849;
        float _2397 = cbLight._m0[_2375].z + _850;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2375].xyz));
        float _4443 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2409 = dot(vec3(_770, _771, _772), vec3(_2402, _2403, _2404));
        float _4454 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4465 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2430 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2431 = 1.0 - _2394;
        float _2441 = (0.5 / (((_2182 * ((_2408 * _2431) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2431) + _2394) * _2408))) * _2408;
        float _4476 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2369 = (((_2430 * cbLight._m0[_2379].x) * _2443) * _2444) + _2305;
        _2371 = (((_2430 * cbLight._m0[_2379].y) * _2443) * _2444) + _2306;
        _2373 = (((_2430 * cbLight._m0[_2379].z) * _2443) * _2444) + _2307;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2108)
    {
        _2479 = _2369;
        _2481 = _2371;
        _2483 = _2373;
    }
    else
    {
        uint _2490 = _2014 + 3u;
        uint _2494 = _2014 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _773) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _848;
        float _2511 = cbLight._m0[_2490].y + _849;
        float _2512 = cbLight._m0[_2490].z + _850;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2490].xyz));
        float _4492 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2524 = dot(vec3(_770, _771, _772), vec3(_2517, _2518, _2519));
        float _4503 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4514 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2182 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2546) + _2509) * _2523))) * _2523;
        float _4525 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2479 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2369;
        _2481 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2371;
        _2483 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2373;
    }
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_2012.y == 0u)
    {
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2634;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2634;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2634;
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.x;
        uint _2661 = uint((float(_2649.y) * floor(float(uint(cbSceneParam._m0[85u].y * _869) / _2650))) + floor(float(uint(cbSceneParam._m0[85u].x * _868) / _2650)));
        float _2671 = (log2(_2637 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        uint _2675 = uint(isnan(14.0) ? _2672 : (isnan(_2672) ? 14.0 : min(_2672, 14.0)));
        uvec4 _2680 = texelFetch(g_lightClusterGridBuffer, int(((_2675 << 2u) + (_2661 << 6u)) >> 2u));
        uint _2681 = _2680.x;
        uint _2682 = _2649.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2682 >> 4u) & 15u)) + 4294967295u) & _2681) == 0u) || ((_2682 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2951)
                {
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                else
                {
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    uint _3086;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2950;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3090 = uint(findLSB(_3086)) + (_2941 << 5u);
                        uint _3087 = (_3086 + 4294967295u) & _3086;
                        uint _3092 = _3090 * 48u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3112 = (_3090 * 48u) + 4u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3131 = (_3090 * 48u) + 8u;
                        vec3 _3142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x));
                        float _3146 = _3106.x - _2635;
                        float _3147 = _3106.y - _2636;
                        float _3148 = _3106.z - _2637;
                        float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                        float _3152 = inversesqrt(_3149);
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3156 = dot(vec3(_887, _890, _893), vec3(_3153, _3154, _3155));
                        float _3161 = 1.0 - (_3149 * _3106.w);
                        float _4551 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3163 = sqrt(_3149) * _3125.w;
                        float _3166 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3156) + _3167;
                        float _3173 = _3163 * _3163;
                        float _3177 = ((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3162) / ((_3173 * 0.699999988079071044921875) + 1.0);
                        float _3181 = (-0.0) - _2635;
                        float _3182 = (-0.0) - _2636;
                        float _3183 = (-0.0) - _2637;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3198 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                        float _3199 = 1.0 - _947;
                        float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                        float _3207 = _3206 * _3206;
                        float _3208 = _3207 * _3207;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3219 = dot(vec3(_887, _890, _893), vec3(_3188, _3189, _3190));
                        float _4567 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3223 = dot(vec3(_887, _890, _893), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                        float _4578 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                        float _3231 = _3166 * _3207;
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3156) + _3232;
                        float _4589 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3237 = 1.0 - _3207;
                        float _3247 = (0.5 / (((_3236 * ((_3222 * _3237) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3207) * _3222))) * _3236;
                        float _4600 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3258 = (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) / ((_3230 * _3230) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125))) * _3162;
                        _3010 = (_3177 * _3125.x) + _3083;
                        _3011 = (_3177 * _3125.y) + _3084;
                        _3012 = (_3177 * _3125.z) + _3085;
                        _3007 = (_3258 * _3142.x) + _3080;
                        _3008 = (_3258 * _3142.y) + _3081;
                        _3009 = (_3258 * _3142.z) + _3082;
                        if (_3087 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3087;
                        }
                    }
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                _2783 = frontier_phi_66_pred;
                _2793 = frontier_phi_66_pred_1;
                _2791 = frontier_phi_66_pred_2;
                _2789 = frontier_phi_66_pred_3;
                _2787 = frontier_phi_66_pred_4;
                _2785 = frontier_phi_66_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2783;
                    _2936 = _2785;
                    _2937 = _2787;
                    _2938 = _2789;
                    _2939 = _2791;
                    _2940 = _2793;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2799) & _2681) == 0u)
        {
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
            float _2929 = _2928 * _2635;
            float _2930 = _2928 * _2636;
            float _2931 = _2928 * _2637;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3063 = _2782;
                float _3064 = _2784;
                float _3065 = _2786;
                float _3066 = _2788;
                float _3067 = _2790;
                float _3068 = _2792;
                uint _3069 = _2799;
                uint _3078;
                bool _3079;
                for (;;)
                {
                    _3078 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                    _3079 = _3078 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3079)
                    {
                        frontier_phi_77_pred = _3068;
                        frontier_phi_77_pred_1 = _3067;
                        frontier_phi_77_pred_2 = _3066;
                        frontier_phi_77_pred_3 = _3065;
                        frontier_phi_77_pred_4 = _3064;
                        frontier_phi_77_pred_5 = _3063;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        uint _3291 = _3078;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3376;
                        float _3422;
                        bool _3423;
                        for (;;)
                        {
                            uint _3302 = ((_3069 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3363 = (_3302 * 40u) + 20u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3302 * 40u) + 24u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3397 = (_3302 * 40u) + 28u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3422 = fma(_2637, _3410.z, fma(_2636, _3410.y, _3410.x * _2635)) + _3410.w;
                            _3423 = !((fma(_2637, _3391.z, fma(_2636, _3391.y, _3391.x * _2635)) + _3391.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3423)
                            {
                                float _3450 = _3317.x - _2635;
                                float _3451 = _3317.y - _2636;
                                float _3452 = _3317.z - _2637;
                                float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                                float _3456 = inversesqrt(_3453);
                                float _3457 = _3456 * _3450;
                                float _3458 = _3456 * _3451;
                                float _3459 = _3456 * _3452;
                                float _3463 = 1.0 - (_3453 / (_3318 * _3318));
                                float _4611 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3468 = sqrt(_3453) * _3333.w;
                                float _3470 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                                float _3471 = _3470 * _3470;
                                float _3474 = ((1.0 - _3471) * dot(vec3(_3457, _3458, _3459), vec3(_887, _890, _893))) + _3471;
                                float _3477 = _3468 * _3468;
                                float _3481 = (fma(_2637, _3360.z, fma(_2636, _3360.y, _3360.x * _2635)) + _3360.w) / _3422;
                                float _3482 = (fma(_2637, _3376.z, fma(_2636, _3376.y, _3376.x * _2635)) + _3376.w) / _3422;
                                float _3486 = 1.0 - dot(vec2(_3481, _3482), vec2(_3481, _3482));
                                float _4627 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3488 = _3487 * (((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3464) / ((_3477 * 0.699999988079071044921875) + 1.0));
                                float _3500 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                                float _3501 = 1.0 - _947;
                                float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                                float _3509 = _3508 * _3508;
                                float _3510 = _3509 * _3509;
                                float _3511 = _3457 - _2929;
                                float _3512 = _3458 - _2930;
                                float _3513 = _3459 - _2931;
                                float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                                float _3521 = dot(vec3(_887, _890, _893), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4638 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3525 = dot(vec3(_887, _890, _893), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                                float _4649 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                                float _3533 = _3470 * _3509;
                                float _3534 = _3533 * _3533;
                                float _3540 = ((1.0 - _3534) * dot(vec3(_887, _890, _893), vec3(_3457, _3458, _3459))) + _3534;
                                float _4660 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3542 = 1.0 - _3509;
                                float _3552 = (0.5 / (((_3541 * ((_3524 * _3542) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3509) * _3524))) * _3541;
                                float _4671 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3562 = (_3487 * _3464) * (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3532 * _3532) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3488 * _3333.y;
                                frontier_phi_83_pred_1 = _3488 * _3333.x;
                                frontier_phi_83_pred_2 = _3562 * _3345.z;
                                frontier_phi_83_pred_3 = _3562 * _3345.y;
                                frontier_phi_83_pred_4 = _3562 * _3345.x;
                                frontier_phi_83_pred_5 = _3488 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3570 = frontier_phi_83_pred;
                            _3569 = frontier_phi_83_pred_1;
                            _3568 = frontier_phi_83_pred_2;
                            _3567 = frontier_phi_83_pred_3;
                            _3566 = frontier_phi_83_pred_4;
                            _3571 = frontier_phi_83_pred_5;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            _3277 = _3571 + _3290;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            _3274 = _3568 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3277;
                        frontier_phi_77_pred_1 = _3276;
                        frontier_phi_77_pred_2 = _3275;
                        frontier_phi_77_pred_3 = _3274;
                        frontier_phi_77_pred_4 = _3273;
                        frontier_phi_77_pred_5 = _3272;
                    }
                    _2914 = frontier_phi_77_pred;
                    _2912 = frontier_phi_77_pred_1;
                    _2910 = frontier_phi_77_pred_2;
                    _2908 = frontier_phi_77_pred_3;
                    _2906 = frontier_phi_77_pred_4;
                    _2904 = frontier_phi_77_pred_5;
                    uint _3070 = _3069 + 1u;
                    if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3063 = _2904;
                        _3064 = _2906;
                        _3065 = _2908;
                        _3066 = _2910;
                        _3067 = _2912;
                        _3068 = _2914;
                        _3069 = _3070;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2908;
                frontier_phi_58_59_ladder_1 = _2914;
                frontier_phi_58_59_ladder_2 = _2912;
                frontier_phi_58_59_ladder_3 = _2910;
                frontier_phi_58_59_ladder_4 = _2906;
                frontier_phi_58_59_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_58_59_ladder = _2786;
                frontier_phi_58_59_ladder_1 = _2792;
                frontier_phi_58_59_ladder_2 = _2790;
                frontier_phi_58_59_ladder_3 = _2788;
                frontier_phi_58_59_ladder_4 = _2784;
                frontier_phi_58_59_ladder_5 = _2782;
            }
            _2903 = frontier_phi_58_59_ladder_5;
            _2905 = frontier_phi_58_59_ladder_4;
            _2907 = frontier_phi_58_59_ladder;
            _2909 = frontier_phi_58_59_ladder_3;
            _2911 = frontier_phi_58_59_ladder_2;
            _2913 = frontier_phi_58_59_ladder_1;
        }
        float _2918 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2694 = (_2918 * _2909) + _2146;
        _2696 = (_2918 * _2911) + _2148;
        _2698 = (_2918 * _2913) + _2150;
        _2700 = ((_2903 * 0.039999999105930328369140625) * _2918) + _2479;
        _2702 = ((_2905 * 0.039999999105930328369140625) * _2918) + _2481;
        _2704 = ((_2907 * 0.039999999105930328369140625) * _2918) + _2483;
    }
    else
    {
        _2694 = _2146;
        _2696 = _2148;
        _2698 = _2150;
        _2700 = _2479;
        _2702 = _2481;
        _2704 = _2483;
    }
    float _4687 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4698 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4709 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2721 = ((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2694 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _931))) + ((_2700 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _2722 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2696 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _931))) + ((_2702 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _2723 = ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2698 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _931))) + ((_2704 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    uint _2724 = _255 + 6u;
    float _2732 = _868 / cbSceneParam._m0[86u].x;
    float _2733 = _869 / cbSceneParam._m0[86u].y;
    vec4 _2747 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2749 = _2747.x;
    float _2750 = _2747.y;
    float _2751 = _2747.z;
    float _2752 = _2747.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2808 = _2807 / _791;
        float _2819 = _2808 * _841;
        float _2820 = _842 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2823 = _2808 * _843;
        float _2825 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2820;
        float _2833 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2821 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2966 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3020 = ((abs(_2833 / _2821) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2843 * _2975) - exp2(_2843 * _2976)) * _2964))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2752);
        _2845 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2749;
        _2847 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2750;
        _2849 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2751;
        _2851 = _3031 * _2752;
    }
    else
    {
        _2845 = _2749;
        _2847 = _2750;
        _2849 = _2751;
        _2851 = _2752;
    }
    bool _3058;
    vec4 _2861;
    vec4 _2883;
    float _2885;
    float _2889;
    float _2890;
    float _2891;
    float _2892;
    bool _2902;
    for (;;)
    {
        _2861 = cbMatDynParam._m0[0u];
        float _2863 = roundEven(_2861.y);
        bool _2864 = _2863 == 3.0;
        float _2865 = log2(_2851);
        float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * _2721;
        float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * _2722;
        float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * _2723;
        float _2881 = _857 + (-0.5);
        _2883 = cbMtdParam._m0[1u];
        _2885 = _2883.y * _2881;
        float _2888 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2889 = _2888 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
        _2890 = _2888 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
        _2891 = _2888 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
        _2892 = _2881 * 0.999000012874603271484375;
        _2902 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2902)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2892) < 0.5)
            {
                _3058 = true;
                break;
            }
        }
        uint _2999 = _906 + uint(_2861.w);
        if ((cbInstanceData._m0[_2999].w < 1.0) && ((cbInstanceData._m0[_2999].w + _2892) < 0.5))
        {
            _3058 = true;
            break;
        }
        if ((_2885 + 1.0) < _2883.x)
        {
            _3058 = true;
            break;
        }
        _3058 = false;
        break;
    }
    float _3263;
    if (_3058)
    {
        discard_state = true;
        _3263 = 0.0;
    }
    else
    {
        _3263 = cbInstanceData._m0[_2724].w;
    }
    SV_Target.x = _2889;
    SV_Target.y = _2890;
    SV_Target.z = _2891;
    SV_Target.w = _3263;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2724].w;
    discard_exit();
}


