#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1487;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4072 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4083 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4094 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4105 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _484 = (_477 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _485 = (_477 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _486 = (_477 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4116 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _557 = (_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484;
    float _558 = (_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485;
    float _559 = (_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _596 = _594.x;
    float _606 = dot(vec4(_596, _594.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _618 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_596 - _606) * cbMtdParam._m0[24u].z) + _606) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4127 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _629 = (_336.x * cbMtdParam._m0[9u].x) * ((_619 * ((_577.x * cbMtdParam._m0[14u].x) - _557)) + _557);
    float _630 = (_336.y * cbMtdParam._m0[9u].y) * ((_619 * ((_577.y * cbMtdParam._m0[14u].y) - _558)) + _558);
    float _631 = (_336.z * cbMtdParam._m0[9u].z) * ((_619 * ((_577.z * cbMtdParam._m0[14u].z) - _559)) + _559);
    float _635 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _629;
    float _638 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _630;
    float _641 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _631;
    float _649 = (((_629 - _635) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _635) * 4.55000019073486328125;
    float _651 = (((_630 - _638) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) + _638) * 4.55000019073486328125;
    float _653 = (((_631 - _641) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) + _641) * 4.55000019073486328125;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _736 = _732.z;
    float _743 = ((_715.x - _734) * _477) + _734;
    float _744 = ((_715.y - _735) * _477) + _735;
    float _745 = ((_715.z - _736) * _477) + _736;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _768 = ((_757.x - _743) * _550) + _743;
    float _769 = ((_757.y - _744) * _550) + _744;
    float _770 = ((_757.z - _745) * _550) + _745;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _795 = ((_782.z - _770) * _619) + _770;
    float _798 = ((((_782.x - _768) * _619) + _768) * 2.0) + (-1.0);
    float _799 = ((((_782.y - _769) * _619) + _769) * 2.0) + (-1.0);
    float _800 = dot(vec2(_798, _799), vec2(_798, _799));
    float _4138 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _805 = sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))));
    vec4 _823 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _835 = (_798 + ((((_690.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_823.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _836 = (_799 + ((((_690.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_823.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _839 = fma(_805, _247, fma(_836, _254, _835 * _240));
    float _842 = fma(_805, _248, fma(_836, _255, _835 * _241));
    float _845 = fma(_805, _249, fma(_836, _256, _835 * _242));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    vec4 _876 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _878 = _876.x;
    float _879 = 1.0 - _878;
    float _885 = (cbMtdParam._m0[19u].x + dot(vec4(_849 * _839, _849 * _842, _849 * _845, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_878 - _879) * cbMtdParam._m0[24u].w) + _879) * cbMtdParam._m0[21u].z);
    float _4149 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _886 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _893 = (_886 * ((_671.x * cbMtdParam._m0[18u].x) - _649)) + _649;
    float _894 = (_886 * ((_671.y * cbMtdParam._m0[18u].y) - _651)) + _651;
    float _895 = (_886 * ((_671.z * cbMtdParam._m0[18u].z) - _653)) + _653;
    float _900 = (((_690.z - _795) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _795;
    float _904 = ((_823.z - _900) * cbMtdParam._m0[19u].w) + _900;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _924 = (_917.x * 2.0) + (-1.0);
    float _925 = (_917.y * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _4160 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _934 = ((_917.z - _904) * _886) + _904;
    float _944 = ((sqrt(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) - _805) * _886) + _805;
    float _947 = (((_924 - _835) * _886) + _835) + (cbMtdParam._m0[21u].x * _835);
    float _948 = (((_925 - _836) * _886) + _836) + (cbMtdParam._m0[21u].x * _836);
    float _952 = cbMtdParam._m0[22u].x + _823.w;
    float _955 = fma(_944, _247, fma(_948, _254, _947 * _240));
    float _958 = fma(_944, _248, fma(_948, _255, _947 * _241));
    float _961 = fma(_944, _249, fma(_948, _256, _947 * _242));
    float _965 = inversesqrt(dot(vec3(_955, _958, _961), vec3(_955, _958, _961)));
    float _966 = _965 * _955;
    float _967 = _965 * _958;
    float _968 = _965 * _961;
    float _4171 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _969 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4193 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4204 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4215 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _987 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1038 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1028);
    float _1039 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1028);
    float _1040 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1028);
    float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
    float _1045 = _1038 * _1044;
    float _1046 = _1039 * _1044;
    float _1047 = _1040 * _1044;
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_968, cbSceneParam._m0[5u].z, fma(_967, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _966));
    float _1075 = fma(_968, cbSceneParam._m0[6u].z, fma(_967, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _966));
    float _1078 = fma(_968, cbSceneParam._m0[7u].z, fma(_967, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _966));
    uint _1092 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4226 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1116 = ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_966, _967, _968), vec3(_1045, _1046, _1047));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _966) - _1045;
    float _1125 = (_1120 * _967) - _1046;
    float _1126 = (_1120 * _968) - _1047;
    float _1130 = abs(dot(vec3(_1045, _1046, _1047), vec3(_966, _967, _968)));
    float _4259 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_969);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1486;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1211 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1215 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1219 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1244 = _1177 + _966;
        float _1245 = _1181 + _967;
        float _1246 = _1185 + _968;
        float _1256 = fma(_1246, cbModelParam._m0[26u].z, fma(_1245, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244)) - _1211;
        float _1257 = fma(_1246, cbModelParam._m0[27u].z, fma(_1245, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244)) - _1215;
        float _1258 = fma(_1246, cbModelParam._m0[28u].z, fma(_1245, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244)) - _1219;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1211 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1215 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[34u].z) + ((((((_1219 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1314 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1280.x + (-0.5));
        float _1316 = _1314 * (_1280.y + (-0.5));
        float _1317 = _1314 * (_1280.z + (-0.5));
        float _1324 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1287.x + (-0.5));
        float _1326 = _1324 * (_1287.y + (-0.5));
        float _1327 = _1324 * (_1287.z + (-0.5));
        float _1334 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1294.x + (-0.5));
        float _1336 = _1334 * (_1294.y + (-0.5));
        float _1337 = _1334 * (_1294.z + (-0.5));
        float _1344 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1301.x + (-0.5));
        float _1346 = _1344 * (_1301.y + (-0.5));
        float _1347 = _1344 * (_1301.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1368 = (dot(vec3(_966, _967, _968), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1378 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4307 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1380 + 1.0))) + _1385) * _1348;
        float _1395 = _1316 * 0.5;
        float _1396 = _1326 * 0.5;
        float _1397 = _1336 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_966, _967, _968), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4340 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1422 + 1.0))) + _1427) * _1349;
        float _1437 = _1317 * 0.5;
        float _1438 = _1327 * 0.5;
        float _1439 = _1337 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_966, _967, _968), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4373 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1464 + 1.0))) + _1469) * _1350;
        _1486 = _1317;
        _1488 = _1316;
        _1489 = _1315;
        _1490 = _1327;
        _1491 = _1326;
        _1492 = _1325;
        _1493 = _1337;
        _1494 = _1336;
        _1495 = _1335;
        _1496 = _1350;
        _1497 = _1349;
        _1498 = _1348;
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1487;
        _1488 = _1487;
        _1489 = _1487;
        _1490 = _1487;
        _1491 = _1487;
        _1492 = _1487;
        _1493 = _1487;
        _1494 = _1487;
        _1495 = _1487;
        _1496 = _1487;
        _1497 = _1487;
        _1498 = _1487;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1528 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1532 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1555 = _1177 + _966;
        float _1556 = _1181 + _967;
        float _1557 = _1185 + _968;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_966, _967, _968), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4436 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_966, _967, _968), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4469 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_966, _967, _968), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4502 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1487;
        _1794 = _1487;
        _1795 = _1487;
        _1796 = _1487;
        _1797 = _1487;
        _1798 = _1487;
        _1799 = _1487;
        _1800 = _1487;
        _1801 = _1487;
        _1802 = _1487;
        _1803 = _1487;
        _1804 = _1487;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1500)) + _1500;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1124 * 0.5;
    float _1862 = _1125 * 0.5;
    float _1863 = _1126 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1486, _1490, _1493, _1496));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _969);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1991 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1994 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2022 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1991 > 0.0)
        {
            _2191 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2486;
        if (_1994 > 0.0)
        {
            _2486 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2486 = frontier_phi_35_30_ladder;
        }
        float _2488 = isnan(_2191) ? _2022 : (isnan(_2022) ? _2191 : min(_2022, _2191));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1988) + _1977;
        float _2494 = (_2489 * _1991) + _1981;
        float _2495 = (_2489 * _1994) + _1985;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_13_35_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_13_35_ladder_2;
        _2012 = frontier_phi_13_35_ladder_1;
        _2014 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _969);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2086 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2089 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2196;
        if (_2083 > 0.0)
        {
            _2196 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2513;
        if (_2086 > 0.0)
        {
            _2513 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2513 = frontier_phi_37_32_ladder;
        }
        float _2840;
        if (_2089 > 0.0)
        {
            _2840 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2840 = frontier_phi_47_44_ladder;
        }
        float _2842 = isnan(_2513) ? _2196 : (isnan(_2196) ? _2513 : min(_2196, _2513));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2083) + _2072;
        float _2848 = (_2843 * _2086) + _2076;
        float _2849 = (_2843 * _2089) + _2080;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2851 = (-1.0) - _2850;
        float _2853 = _2850 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2849 > _2853) || ((_2849 < _2851) || ((_2848 > _2853) || ((_2848 < _2851) || ((_2847 < _2851) || (_2847 > _2853))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2849, cbModelParam._m0[17u].z, fma(_2848, cbModelParam._m0[17u].y, _2847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2849, cbModelParam._m0[18u].z, fma(_2848, cbModelParam._m0[18u].y, _2847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2849, cbModelParam._m0[19u].z, fma(_2848, cbModelParam._m0[19u].y, _2847 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_22_47_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_22_47_ladder_2;
        _2110 = frontier_phi_22_47_ladder_1;
        _2112 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2019);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2124 = ((((1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1145 * _1132)) * _1116;
    float _2125 = _2124 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2126 = _2124 * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2127 = _2124 * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2183 = _2170 / _2182;
    float _2184 = _2174 / _2182;
    float _2185 = _2178 / _2182;
    float _2332;
    float _2333;
    float _2334;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2212 = ((uint(_2185 > cbSceneParam._m0[59u].y) + uint(_2185 > cbSceneParam._m0[59u].x)) + uint(_2185 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2213 = _2212 + 43u;
        uint _2221 = _2212 + 44u;
        uint _2229 = _2212 + 45u;
        uint _2237 = _2212 + 46u;
        float _2248 = fma(_2182, cbSceneParam._m0[_2213].w, fma(_2178, cbSceneParam._m0[_2213].z, fma(_2174, cbSceneParam._m0[_2213].y, _2170 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2182, cbSceneParam._m0[_2221].w, fma(_2178, cbSceneParam._m0[_2221].z, fma(_2174, cbSceneParam._m0[_2221].y, _2170 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2182, cbSceneParam._m0[_2237].w, fma(_2178, cbSceneParam._m0[_2237].z, fma(_2174, cbSceneParam._m0[_2237].y, _2170 * cbSceneParam._m0[_2237].x)));
        float _2265 = cbSceneParam._m0[33u].z * _2260;
        float _2267 = cbSceneParam._m0[33u].w * _2260;
        float _2270 = fma(_2182, cbSceneParam._m0[_2229].w, fma(_2178, cbSceneParam._m0[_2229].z, fma(_2174, cbSceneParam._m0[_2229].y, _2170 * cbSceneParam._m0[_2229].x))) / _2260;
        float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
        float _4628 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2325 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2265 + _2248) / _2260, (_2267 + _2252) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2248) / _2260, (_2252 - _2265) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2265) / _2260, (_2252 - _2267) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2267) / _2260, (_2265 + _2252) / _2260), _2270), 0.0)).x), vec4(0.25)));
        _2332 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
        _2333 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
        _2334 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2332 = 1.0;
        _2333 = 1.0;
        _2334 = 1.0;
    }
    float _2398;
    float _2400;
    float _2402;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2386 = fma(_2182, cbSceneParam._m0[63u].w, fma(_2178, cbSceneParam._m0[63u].z, fma(_2174, cbSceneParam._m0[63u].y, _2170 * cbSceneParam._m0[63u].x)));
        float _2387 = fma(_2182, cbSceneParam._m0[60u].w, fma(_2178, cbSceneParam._m0[60u].z, fma(_2174, cbSceneParam._m0[60u].y, _2170 * cbSceneParam._m0[60u].x))) / _2386;
        float _2388 = fma(_2182, cbSceneParam._m0[61u].w, fma(_2178, cbSceneParam._m0[61u].z, fma(_2174, cbSceneParam._m0[61u].y, _2170 * cbSceneParam._m0[61u].x))) / _2386;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2387 >= cbSceneParam._m0[64u].x) && (_2388 >= cbSceneParam._m0[64u].y)) && (_2387 <= cbSceneParam._m0[64u].z)) && (_2388 <= cbSceneParam._m0[64u].w))
        {
            float _2526 = fma(_2182, cbSceneParam._m0[62u].w, fma(_2178, cbSceneParam._m0[62u].z, fma(_2174, cbSceneParam._m0[62u].y, _2170 * cbSceneParam._m0[62u].x))) / _2386;
            float _2530 = isnan(cbSceneParam._m0[41u].w) ? _2526 : (isnan(_2526) ? cbSceneParam._m0[41u].w : max(_2526, cbSceneParam._m0[41u].w));
            float _2573 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
            float _4644 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
            float _2580 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2387, cbSceneParam._m0[33u].w + _2388), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2387, _2388 - cbSceneParam._m0[33u].z), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].z, _2388 - cbSceneParam._m0[33u].w), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2388), _2530), 0.0)).x), vec4(0.25)));
            float _2584 = 1.0 - (_2580 * cbSceneParam._m0[34u].x);
            float _2585 = 1.0 - (_2580 * cbSceneParam._m0[34u].y);
            float _2586 = 1.0 - (_2580 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_34_33_ladder_1 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_34_33_ladder_2 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
        }
        else
        {
            frontier_phi_34_33_ladder = _2334;
            frontier_phi_34_33_ladder_1 = _2333;
            frontier_phi_34_33_ladder_2 = _2332;
        }
        _2398 = frontier_phi_34_33_ladder_2;
        _2400 = frontier_phi_34_33_ladder_1;
        _2402 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2398 = _2332;
        _2400 = _2333;
        _2402 = _2334;
    }
    uvec4 _2407 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2409 = _2407.x * 14u;
    uint _2410 = _2409 + 13u;
    float _2417 = _1116 + (-1.0);
    float _2422 = (cbLight._m0[_2410].x * _2417) + 1.0;
    float _2423 = (cbLight._m0[_2410].y * _2417) + 1.0;
    float _2424 = (cbLight._m0[_2410].z * _2417) + 1.0;
    float _2425 = (cbLight._m0[_2410].w * _2417) + 1.0;
    uint _2426 = _2409 + 5u;
    float _2432 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2436 = _2409 + 4u;
    float _2445 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2449 = _2409 | 1u;
    float _2460 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_966, _967, _968));
    float _2463 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_966, _967, _968));
    float _4680 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _4691 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2470 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.3183098733425140380859375;
    float _2477 = ((cbLight._m0[_2426].x * _2432) * _2470) + (((cbLight._m0[_2436].x * _2398) * _2445) * _2468);
    float _2478 = ((_2432 * cbLight._m0[_2426].y) * _2470) + (((cbLight._m0[_2436].y * _2400) * _2445) * _2468);
    float _2479 = ((_2432 * cbLight._m0[_2426].z) * _2470) + (((cbLight._m0[_2436].z * _2402) * _2445) * _2468);
    uvec4 _2483 = floatBitsToUint(cbLight._m0[_2409 + 12u]);
    bool _2485 = _2483.x == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2485)
    {
        _2587 = _2477;
        _2589 = _2478;
        _2591 = _2479;
    }
    else
    {
        uint _2595 = _2409 + 6u;
        float _2611 = (dot(vec3(cbLight._m0[_2409 + 2u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4702 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2614 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2587 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2477;
        _2589 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2478;
        _2591 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2479;
    }
    bool _2594 = _2483.y == 0u;
    float _2649;
    float _2651;
    float _2653;
    if (_2594)
    {
        _2649 = _2587;
        _2651 = _2589;
        _2653 = _2591;
    }
    else
    {
        uint _2811 = _2409 + 7u;
        float _2827 = (dot(vec3(cbLight._m0[_2409 + 3u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2828 = _2827 * _2827;
        float _4718 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2829 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2830 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2649 = (((cbLight._m0[_2811].x * 0.3183098733425140380859375) * _2829) * _2830) + _2587;
        _2651 = (((cbLight._m0[_2811].y * 0.3183098733425140380859375) * _2829) * _2830) + _2589;
        _2653 = (((cbLight._m0[_2811].z * 0.3183098733425140380859375) * _2829) * _2830) + _2591;
    }
    uint _2656 = _2409 + 8u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _969) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2409].x + _1045;
    float _2672 = cbLight._m0[_2409].y + _1046;
    float _2673 = cbLight._m0[_2409].z + _1047;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2409].xyz));
    float _4734 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _4745 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2685 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2686 = dot(vec3(_966, _967, _968), vec3(_2678, _2679, _2680));
    float _4756 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2678, _2679, _2680));
    float _4767 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2670 * _2670;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2709 = (exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2710 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2685 * ((_2684 * _2710) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2710) + _2670) * _2684))) * _2684;
    float _4778 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    uint _2737 = _2409 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _969) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2449].x + _1045;
    float _2751 = cbLight._m0[_2449].y + _1046;
    float _2752 = cbLight._m0[_2449].z + _1047;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2449].xyz));
    float _4789 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2764 = dot(vec3(_966, _967, _968), vec3(_2757, _2758, _2759));
    float _4800 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2757, _2758, _2759));
    float _4811 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2785 = (exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2786 = 1.0 - _2749;
    float _2796 = (0.5 / (((_2685 * ((_2763 * _2786) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2786) + _2749) * _2763))) * _2763;
    float _4822 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2808 = (((_2785 * cbLight._m0[_2737].x) * _2798) * _2432) + ((((cbLight._m0[_2656].x * _2398) * _2709) * _2723) * _2445);
    float _2809 = (((_2785 * cbLight._m0[_2737].y) * _2798) * _2432) + ((((cbLight._m0[_2656].y * _2400) * _2709) * _2723) * _2445);
    float _2810 = (((_2785 * cbLight._m0[_2737].z) * _2798) * _2432) + ((((cbLight._m0[_2656].z * _2402) * _2709) * _2723) * _2445);
    float _2866;
    float _2868;
    float _2870;
    if (_2485)
    {
        _2866 = _2808;
        _2868 = _2809;
        _2870 = _2810;
    }
    else
    {
        uint _2872 = _2409 + 2u;
        uint _2876 = _2409 + 10u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _969) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _1045;
        float _2893 = cbLight._m0[_2872].y + _1046;
        float _2894 = cbLight._m0[_2872].z + _1047;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2872].xyz));
        float _4833 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2906 = dot(vec3(_966, _967, _968), vec3(_2899, _2900, _2901));
        float _4844 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4855 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2927 = (exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2928 = 1.0 - _2891;
        float _2938 = (0.5 / (((_2685 * ((_2905 * _2928) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2928) + _2891) * _2905))) * _2905;
        float _4866 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2866 = (((_2927 * cbLight._m0[_2876].x) * _2940) * _2941) + _2808;
        _2868 = (((_2927 * cbLight._m0[_2876].y) * _2940) * _2941) + _2809;
        _2870 = (((_2927 * cbLight._m0[_2876].z) * _2940) * _2941) + _2810;
    }
    float _2972;
    float _2974;
    float _2976;
    if (_2594)
    {
        _2972 = _2866;
        _2974 = _2868;
        _2976 = _2870;
    }
    else
    {
        uint _2983 = _2409 + 3u;
        uint _2987 = _2409 + 11u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _969) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _1045;
        float _3004 = cbLight._m0[_2983].y + _1046;
        float _3005 = cbLight._m0[_2983].z + _1047;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2983].xyz));
        float _4882 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _3017 = dot(vec3(_966, _967, _968), vec3(_3010, _3011, _3012));
        float _4893 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _4904 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3038 = (exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3039 = 1.0 - _3002;
        float _3049 = (0.5 / (((_2685 * ((_3016 * _3039) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _3039) + _3002) * _3016))) * _3016;
        float _4915 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3051 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3052 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2972 = (((_3038 * cbLight._m0[_2987].x) * _3051) * _3052) + _2866;
        _2974 = (((_3038 * cbLight._m0[_2987].y) * _3051) * _3052) + _2868;
        _2976 = (((_3038 * cbLight._m0[_2987].z) * _3051) * _3052) + _2870;
    }
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_2407.y == 0u)
    {
        uvec4 _3073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3074 = _3073.x;
        uint _3085 = uint((float(_3073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _3074))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _3074)));
        float _3095 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3096 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        uint _3099 = uint(isnan(14.0) ? _3096 : (isnan(_3096) ? 14.0 : min(_3096, 14.0)));
        uvec4 _3104 = texelFetch(g_lightClusterGridBuffer, int(((_3099 << 2u) + (_3085 << 6u)) >> 2u));
        uint _3105 = _3104.x;
        uint _3106 = _3073.z;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((((1u << ((_3106 >> 4u) & 15u)) + 4294967295u) & _3105) == 0u) || ((_3106 & 240u) == 0u))
        {
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
        }
        else
        {
            float _3186;
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            uint _3336 = 0u;
            uint _3345;
            bool _3346;
            for (;;)
            {
                _3345 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                _3346 = _3345 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3346)
                {
                    frontier_phi_66_pred = _3335;
                    frontier_phi_66_pred_1 = _3334;
                    frontier_phi_66_pred_2 = _3333;
                    frontier_phi_66_pred_3 = _3332;
                    frontier_phi_66_pred_4 = _3331;
                    frontier_phi_66_pred_5 = _3330;
                }
                else
                {
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    uint _3460;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3345;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    for (;;)
                    {
                        uint _3464 = uint(findLSB(_3460)) + (_3336 << 5u);
                        uint _3461 = (_3460 + 4294967295u) & _3460;
                        uint _3466 = _3464 * 48u;
                        vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3466)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 3u)).x));
                        uint _3486 = (_3464 * 48u) + 4u;
                        vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 3u)).x));
                        uint _3505 = (_3464 * 48u) + 8u;
                        vec3 _3516 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3505)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 2u)).x));
                        float _3520 = _3480.x - _2183;
                        float _3521 = _3480.y - _2184;
                        float _3522 = _3480.z - _2185;
                        float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                        float _3526 = inversesqrt(_3523);
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3530 = dot(vec3(_1072, _1075, _1078), vec3(_3527, _3528, _3529));
                        float _3535 = 1.0 - (_3523 * _3480.w);
                        float _4941 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3536 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3537 = sqrt(_3523) * _3499.w;
                        float _3540 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3530) + _3541;
                        float _3547 = _3537 * _3537;
                        float _3551 = ((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3536) / ((_3547 * 0.699999988079071044921875) + 1.0);
                        float _3555 = (-0.0) - _2183;
                        float _3556 = (-0.0) - _2184;
                        float _3557 = (-0.0) - _2185;
                        float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                        float _3562 = _3561 * _3555;
                        float _3563 = _3561 * _3556;
                        float _3564 = _3561 * _3557;
                        float _3571 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                        float _3572 = 1.0 - _1132;
                        float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                        float _3580 = _3579 * _3579;
                        float _3581 = _3580 * _3580;
                        float _3582 = _3562 + _3527;
                        float _3583 = _3563 + _3528;
                        float _3584 = _3564 + _3529;
                        float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                        float _3592 = dot(vec3(_1072, _1075, _1078), vec3(_3562, _3563, _3564));
                        float _4957 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3595 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3596 = dot(vec3(_1072, _1075, _1078), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                        float _4968 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3599 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                        float _3604 = _3540 * _3580;
                        float _3605 = _3604 * _3604;
                        float _3608 = ((1.0 - _3605) * _3530) + _3605;
                        float _4979 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3609 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3610 = 1.0 - _3580;
                        float _3620 = (0.5 / (((_3609 * ((_3595 * _3610) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3609 * _3610) + _3580) * _3595))) * _3609;
                        float _4990 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3631 = (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3603 * _3603) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125))) * _3536;
                        _3389 = (_3551 * _3499.x) + _3457;
                        _3390 = (_3551 * _3499.y) + _3458;
                        _3391 = (_3551 * _3499.z) + _3459;
                        _3386 = (_3631 * _3516.x) + _3454;
                        _3387 = (_3631 * _3516.y) + _3455;
                        _3388 = (_3631 * _3516.z) + _3456;
                        if (_3461 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3461;
                        }
                    }
                    frontier_phi_66_pred = _3391;
                    frontier_phi_66_pred_1 = _3390;
                    frontier_phi_66_pred_2 = _3389;
                    frontier_phi_66_pred_3 = _3388;
                    frontier_phi_66_pred_4 = _3387;
                    frontier_phi_66_pred_5 = _3386;
                }
                _3196 = frontier_phi_66_pred;
                _3194 = frontier_phi_66_pred_1;
                _3192 = frontier_phi_66_pred_2;
                _3190 = frontier_phi_66_pred_3;
                _3188 = frontier_phi_66_pred_4;
                _3186 = frontier_phi_66_pred_5;
                uint _3337 = _3336 + 1u;
                if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3330 = _3186;
                    _3331 = _3188;
                    _3332 = _3190;
                    _3333 = _3192;
                    _3334 = _3194;
                    _3335 = _3196;
                    _3336 = _3337;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
        }
        uvec4 _3199 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3200 = _3199.z;
        uint _3202 = (_3200 >> 8u) & 15u;
        float _3298;
        float _3300;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        if (((4294967295u << _3202) & _3105) == 0u)
        {
            _3298 = _3185;
            _3300 = _3187;
            _3302 = _3189;
            _3304 = _3191;
            _3306 = _3193;
            _3308 = _3195;
        }
        else
        {
            float _3323 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _3324 = _3323 * _2183;
            float _3325 = _3323 * _2184;
            float _3326 = _3323 * _2185;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3202 < ((_3200 >> 12u) & 15u))
            {
                float _3299;
                float _3301;
                float _3303;
                float _3305;
                float _3307;
                float _3309;
                float _3437 = _3185;
                float _3438 = _3187;
                float _3439 = _3189;
                float _3440 = _3191;
                float _3441 = _3193;
                float _3442 = _3195;
                uint _3443 = _3202;
                uint _3452;
                bool _3453;
                for (;;)
                {
                    _3452 = texelFetch(g_lightClassification, int((((_3099 << 5u) + (_3085 << 9u)) + (_3443 << 2u)) >> 2u)).x;
                    _3453 = _3452 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3453)
                    {
                        frontier_phi_72_pred = _3442;
                        frontier_phi_72_pred_1 = _3441;
                        frontier_phi_72_pred_2 = _3440;
                        frontier_phi_72_pred_3 = _3439;
                        frontier_phi_72_pred_4 = _3438;
                        frontier_phi_72_pred_5 = _3437;
                    }
                    else
                    {
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3649 = _3437;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        float _3654 = _3442;
                        uint _3655 = _3452;
                        uint _3656;
                        vec4 _3681;
                        float _3682;
                        vec4 _3697;
                        vec3 _3709;
                        vec4 _3724;
                        vec4 _3739;
                        float _3785;
                        bool _3786;
                        for (;;)
                        {
                            uint _3666 = ((_3443 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3655));
                            _3656 = (_3655 + 4294967295u) & _3655;
                            uint _3668 = _3666 * 40u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            _3682 = _3681.w;
                            uint _3684 = (_3666 * 40u) + 4u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3666 * 40u) + 8u;
                            _3709 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x));
                            uint _3711 = (_3666 * 40u) + 16u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3666 * 40u) + 20u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3666 * 40u) + 24u;
                            vec4 _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3760 = (_3666 * 40u) + 28u;
                            vec4 _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            _3785 = fma(_2185, _3773.z, fma(_2184, _3773.y, _3773.x * _2183)) + _3773.w;
                            _3786 = !((fma(_2185, _3754.z, fma(_2184, _3754.y, _3754.x * _2183)) + _3754.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3786)
                            {
                                float _3813 = _3681.x - _2183;
                                float _3814 = _3681.y - _2184;
                                float _3815 = _3681.z - _2185;
                                float _3816 = dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815));
                                float _3819 = inversesqrt(_3816);
                                float _3820 = _3819 * _3813;
                                float _3821 = _3819 * _3814;
                                float _3822 = _3819 * _3815;
                                float _3826 = 1.0 - (_3816 / (_3682 * _3682));
                                float _5001 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3831 = sqrt(_3816) * _3697.w;
                                float _3833 = 1.39999997615814208984375 / (_3831 + 1.39999997615814208984375);
                                float _3834 = _3833 * _3833;
                                float _3837 = ((1.0 - _3834) * dot(vec3(_3820, _3821, _3822), vec3(_1072, _1075, _1078))) + _3834;
                                float _3840 = _3831 * _3831;
                                float _3844 = (fma(_2185, _3724.z, fma(_2184, _3724.y, _3724.x * _2183)) + _3724.w) / _3785;
                                float _3845 = (fma(_2185, _3739.z, fma(_2184, _3739.y, _3739.x * _2183)) + _3739.w) / _3785;
                                float _3849 = 1.0 - dot(vec2(_3844, _3845), vec2(_3844, _3845));
                                float _5017 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3851 = _3850 * (((isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0))) * _3827) / ((_3840 * 0.699999988079071044921875) + 1.0));
                                float _3863 = exp2(log2(1.0 / ((_3840 * 3.5) + 5.0)) * 0.25);
                                float _3864 = 1.0 - _1132;
                                float _3871 = sqrt(1.0 - ((1.0 - (_3864 * _3864)) * (1.0 - (_3863 * _3863))));
                                float _3872 = _3871 * _3871;
                                float _3873 = _3872 * _3872;
                                float _3874 = _3820 - _3324;
                                float _3875 = _3821 - _3325;
                                float _3876 = _3822 - _3326;
                                float _3880 = inversesqrt(dot(vec3(_3874, _3875, _3876), vec3(_3874, _3875, _3876)));
                                float _3884 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3324, (-0.0) - _3325, (-0.0) - _3326));
                                float _5028 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3887 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3888 = dot(vec3(_1072, _1075, _1078), vec3(_3880 * _3874, _3880 * _3875, _3880 * _3876));
                                float _5039 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3895 = ((_3891 * _3891) * (_3873 + (-1.0))) + 1.0;
                                float _3896 = _3833 * _3872;
                                float _3897 = _3896 * _3896;
                                float _3903 = ((1.0 - _3897) * dot(vec3(_1072, _1075, _1078), vec3(_3820, _3821, _3822))) + _3897;
                                float _5050 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3905 = 1.0 - _3872;
                                float _3915 = (0.5 / (((_3904 * ((_3887 * _3905) + _3872)) + 9.9999999392252902907785028219223e-09) + (((_3904 * _3905) + _3872) * _3887))) * _3904;
                                float _5061 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3925 = (_3850 * _3827) * (((_3873 * 3.1415927410125732421875) * (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0)))) / ((_3895 * _3895) * ((_3840 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3851 * _3697.y;
                                frontier_phi_78_pred_1 = _3851 * _3697.x;
                                frontier_phi_78_pred_2 = _3925 * _3709.z;
                                frontier_phi_78_pred_3 = _3925 * _3709.y;
                                frontier_phi_78_pred_4 = _3925 * _3709.x;
                                frontier_phi_78_pred_5 = _3851 * _3697.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3933 = frontier_phi_78_pred;
                            _3932 = frontier_phi_78_pred_1;
                            _3931 = frontier_phi_78_pred_2;
                            _3930 = frontier_phi_78_pred_3;
                            _3929 = frontier_phi_78_pred_4;
                            _3934 = frontier_phi_78_pred_5;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            if (_3656 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3656;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3641;
                        frontier_phi_72_pred_1 = _3640;
                        frontier_phi_72_pred_2 = _3639;
                        frontier_phi_72_pred_3 = _3638;
                        frontier_phi_72_pred_4 = _3637;
                        frontier_phi_72_pred_5 = _3636;
                    }
                    _3309 = frontier_phi_72_pred;
                    _3307 = frontier_phi_72_pred_1;
                    _3305 = frontier_phi_72_pred_2;
                    _3303 = frontier_phi_72_pred_3;
                    _3301 = frontier_phi_72_pred_4;
                    _3299 = frontier_phi_72_pred_5;
                    uint _3444 = _3443 + 1u;
                    if (_3444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3437 = _3299;
                        _3438 = _3301;
                        _3439 = _3303;
                        _3440 = _3305;
                        _3441 = _3307;
                        _3442 = _3309;
                        _3443 = _3444;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3309;
                frontier_phi_60_61_ladder_1 = _3307;
                frontier_phi_60_61_ladder_2 = _3303;
                frontier_phi_60_61_ladder_3 = _3301;
                frontier_phi_60_61_ladder_4 = _3299;
                frontier_phi_60_61_ladder_5 = _3305;
            }
            else
            {
                frontier_phi_60_61_ladder = _3195;
                frontier_phi_60_61_ladder_1 = _3193;
                frontier_phi_60_61_ladder_2 = _3189;
                frontier_phi_60_61_ladder_3 = _3187;
                frontier_phi_60_61_ladder_4 = _3185;
                frontier_phi_60_61_ladder_5 = _3191;
            }
            _3298 = frontier_phi_60_61_ladder_4;
            _3300 = frontier_phi_60_61_ladder_3;
            _3302 = frontier_phi_60_61_ladder_2;
            _3304 = frontier_phi_60_61_ladder_5;
            _3306 = frontier_phi_60_61_ladder_1;
            _3308 = frontier_phi_60_61_ladder;
        }
        float _3313 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3118 = (_3313 * _3304) + _2649;
        _3120 = (_3313 * _3306) + _2651;
        _3122 = (_3313 * _3308) + _2653;
        _3124 = ((_3298 * 0.039999999105930328369140625) * _3313) + _2972;
        _3126 = ((_3300 * 0.039999999105930328369140625) * _3313) + _2974;
        _3128 = ((_3302 * 0.039999999105930328369140625) * _3313) + _2976;
    }
    else
    {
        _3118 = _2649;
        _3120 = _2651;
        _3122 = _2653;
        _3124 = _2972;
        _3126 = _2974;
        _3128 = _2976;
    }
    float _5077 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _5088 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _5099 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    uint _3148 = _280 + 6u;
    float _3156 = _1053 / cbSceneParam._m0[86u].x;
    float _3157 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _3171 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, (log2((isnan(cbSceneParam._m0[77u].w) ? _987 : (isnan(_987) ? cbSceneParam._m0[77u].w : min(_987, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3173 = _3171.x;
    float _3174 = _3171.y;
    float _3175 = _3171.z;
    float _3176 = _3171.w;
    float _3248;
    float _3250;
    float _3252;
    float _3254;
    if (_987 > cbSceneParam._m0[78u].w)
    {
        float _3210 = isnan(_987) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _987 : min(cbSceneParam._m0[80u].w, _987));
        float _3211 = _3210 / _987;
        float _3222 = _3211 * _1038;
        float _3223 = _1039 * _3211;
        float _3224 = (-0.0) - _3223;
        float _3226 = _3211 * _1040;
        float _3228 = (cbSceneParam._m0[77u].w * _3224) / _3210;
        float _3229 = _3228 + cbSceneParam._m0[79u].w;
        float _3230 = cbSceneParam._m0[79u].w - _3223;
        float _3236 = sqrt(((_3222 * _3222) + (_3223 * _3223)) + (_3226 * _3226));
        float _3239 = (1.0 - (cbSceneParam._m0[77u].w / _3210)) * _3236;
        float _3244 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3246 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3399;
        if (abs((_3224 - _3228) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3399 = ((((_3229 > 0.0) ? exp2(_3244 * _3229) : (2.0 - exp2(_3246 * _3229))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3239;
        }
        else
        {
            float _3359 = 1.0 / cbSceneParam._m0[80u].x;
            float _3360 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : max(_3229, _3230));
            float _3361 = isnan(_3230) ? _3229 : (isnan(_3229) ? _3230 : min(_3229, _3230));
            float _3370 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : min(_3360, 0.0));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            _3399 = ((abs(_3236 / _3224) * cbSceneParam._m0[80u].y) * ((((_3370 - _3371) * 2.0) - ((exp2(_3244 * (isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0)))) - exp2(_3244 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))))) * _3359)) - ((exp2(_3246 * _3370) - exp2(_3246 * _3371)) * _3359))) + (_3239 * cbSceneParam._m0[80u].z);
        }
        vec4 _3401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3156, _3157, 1.0), 0.0);
        float _3410 = exp2((_3399 * (-1.44269502162933349609375)) * (1.0 - _3401.w));
        float _3411 = log2(_3410);
        float _3427 = log2(_3176);
        _3248 = (exp2(_3427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].x)) * _3401.x) / cbSceneParam._m0[78u].x)) + _3173;
        _3250 = (exp2(_3427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].y)) * _3401.y) / cbSceneParam._m0[78u].y)) + _3174;
        _3252 = (exp2(_3427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].z)) * _3401.z) / cbSceneParam._m0[78u].z)) + _3175;
        _3254 = _3410 * _3176;
    }
    else
    {
        _3248 = _3173;
        _3250 = _3174;
        _3252 = _3175;
        _3254 = _3176;
    }
    float _3266 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3267 = _3266 == 3.0;
    float _3268 = log2(_3254);
    float _3275 = exp2(_3268 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3118 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1116))) + ((_3124 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3276 = exp2(_3268 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3120 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1116))) + ((_3126 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3277 = exp2(_3268 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3122 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1116))) + ((_3128 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3286 = (_3266 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3286 * (_3267 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3248)));
    SV_Target.y = _3286 * (_3267 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3250)));
    SV_Target.z = _3286 * (_3267 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3252)));
    SV_Target.w = cbInstanceData._m0[_3148].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3148].w;
}


