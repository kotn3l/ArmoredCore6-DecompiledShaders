#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1555;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3881 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3892 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3903 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3914 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _470 = (_463 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _471 = (_463 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _472 = (_463 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[24u].z) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3925 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3936 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _624;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    float _721 = ((_693.x - _712) * _463) + _712;
    float _722 = ((_693.y - _713) * _463) + _713;
    float _723 = ((_693.z - _714) * _463) + _714;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _746 = ((_735.x - _721) * _536) + _721;
    float _747 = ((_735.y - _722) * _536) + _722;
    float _748 = ((_735.z - _723) * _536) + _723;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _773 = ((_760.z - _748) * _605) + _748;
    float _776 = ((((_760.x - _746) * _605) + _746) * 2.0) + (-1.0);
    float _777 = ((((_760.y - _747) * _605) + _747) * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3947 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _824 = _822.x;
    float _825 = 1.0 - _824;
    float _831 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _834 = ((isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : min(_831, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _843 = (_834 - ((((((_824 - _825) * cbMtdParam._m0[24u].w) + _825) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _834))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3968 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _851 = (_844 * ((_651.x * cbMtdParam._m0[18u].x) - _631)) + _631;
    float _852 = (_844 * ((_651.y * cbMtdParam._m0[18u].y) - _632)) + _632;
    float _853 = (_844 * ((_651.z * cbMtdParam._m0[18u].z) - _633)) + _633;
    vec4 _865 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _867 = _865.x;
    float _868 = 1.0 - _867;
    float _895 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_867 - _868) * cbMtdParam._m0[24u].y) + _868) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3979 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _904 = ((((cbMtdParam._m0[10u].x - _851) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _896) + _851;
    float _905 = ((((cbMtdParam._m0[10u].y - _852) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _896) + _852;
    float _906 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _853)) * _896) + _853;
    float _911 = (((_670.z - _773) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _773;
    float _915 = ((_797.z - _911) * cbMtdParam._m0[19u].w) + _911;
    vec4 _929 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _936 = (_929.x * 2.0) + (-1.0);
    float _937 = (_929.y * 2.0) + (-1.0);
    float _938 = dot(vec2(_936, _937), vec2(_936, _937));
    float _3990 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _946 = (_844 * (_929.z - _915)) + _915;
    float _949 = ((cbMtdParam._m0[23u].y - _946) * _896) + _946;
    vec4 _968 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _974 = (_968.x * 2.0) + (-1.0);
    float _975 = (_968.y * 2.0) + (-1.0);
    float _976 = dot(vec2(_974, _975), vec2(_974, _975));
    float _4001 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _990 = (_776 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_670.x * 2.0) + (-1.0)))) + (((_797.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _991 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_670.y * 2.0) + (-1.0)))) + (((_797.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1003 = (((_936 - _990) + (cbMtdParam._m0[21u].x * _990)) * _844) + _990;
    float _1004 = (((_937 - _991) + (cbMtdParam._m0[21u].x * _991)) * _844) + _991;
    float _1005 = (_844 * (sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _783)) + _783;
    float _1016 = (((_974 - _1003) + (_1003 * cbMtdParam._m0[22u].z)) * _896) + _1003;
    float _1017 = (((_975 - _1004) + (_1004 * cbMtdParam._m0[22u].z)) * _896) + _1004;
    float _1018 = ((sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) - _1005) * _896) + _1005;
    float _1020 = cbMtdParam._m0[22u].x + _797.w;
    float _1023 = fma(_1018, _259 * NORMAL.x, fma(_1017, _266 * TANGENT.x, (_252 * _244) * _1016));
    float _1026 = fma(_1018, _259 * NORMAL.y, fma(_1017, _266 * TANGENT.y, (_252 * _245) * _1016));
    float _1029 = fma(_1018, _259 * NORMAL.z, fma(_1017, _266 * TANGENT.z, (_252 * _246) * _1016));
    float _1033 = inversesqrt(dot(vec3(_1023, _1026, _1029), vec3(_1023, _1026, _1029)));
    float _1034 = _1033 * _1023;
    float _1035 = _1033 * _1026;
    float _1036 = _1033 * _1029;
    float _4012 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _1037 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4034 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4045 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4056 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _1055 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1106 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1096);
    float _1107 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1096);
    float _1108 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1096);
    float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
    float _1113 = _1106 * _1112;
    float _1114 = _1107 * _1112;
    float _1115 = _1108 * _1112;
    float _1121 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1122 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1140 = fma(_1036, cbSceneParam._m0[5u].z, fma(_1035, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1034));
    float _1143 = fma(_1036, cbSceneParam._m0[6u].z, fma(_1035, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1034));
    float _1146 = fma(_1036, cbSceneParam._m0[7u].z, fma(_1035, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1034));
    uint _1160 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1166 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1160].x;
    float _1167 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1160].y;
    float _1168 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1160].z;
    float _4067 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1169 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1170 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    vec4 _1180 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1121, cbSceneParam._m0[86u].y * _1122));
    float _1184 = ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * TEXCOORD_5.w) * _1180.x;
    float _1185 = dot(vec3(_1034, _1035, _1036), vec3(_1113, _1114, _1115));
    float _1188 = _1185 * 2.0;
    float _1192 = (_1188 * _1034) - _1113;
    float _1193 = (_1188 * _1035) - _1114;
    float _1194 = (_1188 * _1036) - _1115;
    float _1198 = abs(dot(vec3(_1113, _1114, _1115), vec3(_1034, _1035, _1036)));
    float _4100 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1200 = sqrt(_1037);
    float _1213 = exp2((_1200 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1200 * 3.0));
    float _1245 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1249 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1554;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1279 = fma(_1253, cbModelParam._m0[26u].z, fma(_1249, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245));
        float _1283 = fma(_1253, cbModelParam._m0[27u].z, fma(_1249, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245));
        float _1287 = fma(_1253, cbModelParam._m0[28u].z, fma(_1249, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245));
        float _1312 = _1245 + _1034;
        float _1313 = _1249 + _1035;
        float _1314 = _1253 + _1036;
        float _1324 = fma(_1314, cbModelParam._m0[26u].z, fma(_1313, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1312)) - _1279;
        float _1325 = fma(_1314, cbModelParam._m0[27u].z, fma(_1313, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1312)) - _1283;
        float _1326 = fma(_1314, cbModelParam._m0[28u].z, fma(_1313, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1312)) - _1287;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1279 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1283 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[34u].z) + ((((((_1287 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1382 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1348.x + (-0.5));
        float _1384 = _1382 * (_1348.y + (-0.5));
        float _1385 = _1382 * (_1348.z + (-0.5));
        float _1392 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1355.x + (-0.5));
        float _1394 = _1392 * (_1355.y + (-0.5));
        float _1395 = _1392 * (_1355.z + (-0.5));
        float _1402 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1362.x + (-0.5));
        float _1404 = _1402 * (_1362.y + (-0.5));
        float _1405 = _1402 * (_1362.z + (-0.5));
        float _1412 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1369.x + (-0.5));
        float _1414 = _1412 * (_1369.y + (-0.5));
        float _1415 = _1412 * (_1369.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1436 = (dot(vec3(_1034, _1035, _1036), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1446 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4148 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1448 + 1.0))) + _1453) * _1416;
        float _1463 = _1384 * 0.5;
        float _1464 = _1394 * 0.5;
        float _1465 = _1404 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_1034, _1035, _1036), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4181 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1490 + 1.0))) + _1495) * _1417;
        float _1505 = _1385 * 0.5;
        float _1506 = _1395 * 0.5;
        float _1507 = _1405 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_1034, _1035, _1036), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4214 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1532 + 1.0))) + _1537) * _1418;
        _1554 = _1385;
        _1556 = _1384;
        _1557 = _1383;
        _1558 = _1395;
        _1559 = _1394;
        _1560 = _1393;
        _1561 = _1405;
        _1562 = _1404;
        _1563 = _1403;
        _1564 = _1418;
        _1565 = _1417;
        _1566 = _1416;
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1555;
        _1556 = _1555;
        _1557 = _1555;
        _1558 = _1555;
        _1559 = _1555;
        _1560 = _1555;
        _1561 = _1555;
        _1562 = _1555;
        _1563 = _1555;
        _1564 = _1555;
        _1565 = _1555;
        _1566 = _1555;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1592 = fma(_1253, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245));
        float _1596 = fma(_1253, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245));
        float _1600 = fma(_1253, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245));
        float _1623 = _1245 + _1034;
        float _1624 = _1249 + _1035;
        float _1625 = _1253 + _1036;
        float _1635 = fma(_1625, cbModelParam._m0[30u].z, fma(_1624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1623)) - _1592;
        float _1636 = fma(_1625, cbModelParam._m0[31u].z, fma(_1624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1623)) - _1596;
        float _1637 = fma(_1625, cbModelParam._m0[32u].z, fma(_1624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1623)) - _1600;
        float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
        float _1654 = ((_1641 * _1635) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1592 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1655 = ((_1641 * _1636) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1596 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1641 * _1637) / cbModelParam._m0[35u].z) + ((((((_1600 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        float _1691 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1658.x + (-0.5));
        float _1693 = _1691 * (_1658.y + (-0.5));
        float _1694 = _1691 * (_1658.z + (-0.5));
        float _1701 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1665.x + (-0.5));
        float _1703 = _1701 * (_1665.y + (-0.5));
        float _1704 = _1701 * (_1665.z + (-0.5));
        float _1711 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1672.x + (-0.5));
        float _1713 = _1711 * (_1672.y + (-0.5));
        float _1714 = _1711 * (_1672.z + (-0.5));
        float _1721 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1679.x + (-0.5));
        float _1723 = _1721 * (_1679.y + (-0.5));
        float _1724 = _1721 * (_1679.z + (-0.5));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = _1692 * 0.5;
        float _1729 = _1702 * 0.5;
        float _1730 = _1712 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_1034, _1035, _1036), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4277 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1755 + 1.0))) + _1760) * _1725;
        float _1770 = _1693 * 0.5;
        float _1771 = _1703 * 0.5;
        float _1772 = _1713 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_1034, _1035, _1036), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4310 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1797 + 1.0))) + _1802) * _1726;
        float _1812 = _1694 * 0.5;
        float _1813 = _1704 * 0.5;
        float _1814 = _1714 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_1034, _1035, _1036), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4343 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1839 + 1.0))) + _1844) * _1727;
        _1861 = _1694;
        _1862 = _1693;
        _1863 = _1692;
        _1864 = _1704;
        _1865 = _1703;
        _1866 = _1702;
        _1867 = _1714;
        _1868 = _1713;
        _1869 = _1712;
        _1870 = _1727;
        _1871 = _1726;
        _1872 = _1725;
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    }
    else
    {
        _1861 = _1555;
        _1862 = _1555;
        _1863 = _1555;
        _1864 = _1555;
        _1865 = _1555;
        _1866 = _1555;
        _1867 = _1555;
        _1868 = _1555;
        _1869 = _1555;
        _1870 = _1555;
        _1871 = _1555;
        _1872 = _1555;
        _1873 = 0.0;
        _1874 = 0.0;
        _1875 = 0.0;
    }
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1567)) + _1567;
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1568)) + _1568;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1569)) + _1569;
    float _1908 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1885));
    float _1929 = _1192 * 0.5;
    float _1930 = _1193 * 0.5;
    float _1931 = _1194 * 0.5;
    float _1932 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1935 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1938 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1972;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1945 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1554, _1558, _1561, _1564));
        float _1949 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1953 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1960 = dot(vec4(cbModelParam._m0[39u]), vec4(_1929, _1930, _1931, 1.0));
        _1972 = dot(vec3(isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1960) ? 0.0 : (isnan(0.0) ? _1960 : max(0.0, _1960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1972 = 1.0;
    }
    float _1983;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1974 = dot(vec4(cbModelParam._m0[40u]), vec4(_1929, _1930, _1931, 1.0));
        _1983 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1983 = 1.0;
    }
    float _1987 = (_1983 * cbModelParam._m0[1u].x) + (_1972 * (1.0 - cbModelParam._m0[1u].x));
    float _1997 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1037);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1997 : min(cbModelParam._m0[25u].z, _1997));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2045 = fma(_1253, cbModelParam._m0[13u].z, fma(_1249, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1245)) + cbModelParam._m0[13u].w;
        float _2049 = fma(_1253, cbModelParam._m0[14u].z, fma(_1249, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1245)) + cbModelParam._m0[14u].w;
        float _2053 = fma(_1253, cbModelParam._m0[15u].z, fma(_1249, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1245)) + cbModelParam._m0[15u].w;
        float _2056 = fma(_1194, cbModelParam._m0[13u].z, fma(_1193, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192));
        float _2059 = fma(_1194, cbModelParam._m0[14u].z, fma(_1193, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192));
        float _2062 = fma(_1194, cbModelParam._m0[15u].z, fma(_1193, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192));
        float _2090;
        if (_2056 > 0.0)
        {
            _2090 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2090 = frontier_phi_14_12_ladder;
        }
        float _2311;
        if (_2059 > 0.0)
        {
            _2311 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2311 = frontier_phi_23_19_ladder;
        }
        float _2557;
        if (_2062 > 0.0)
        {
            _2557 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2557 = frontier_phi_35_30_ladder;
        }
        float _2559 = isnan(_2311) ? _2090 : (isnan(_2090) ? _2311 : min(_2090, _2311));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _2056) + _2045;
        float _2565 = (_2560 * _2059) + _2049;
        float _2566 = (_2560 * _2062) + _2053;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2567;
        float _2571 = _2567 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 > _2571) || ((_2565 < _2569) || ((_2564 < _2569) || (_2564 > _2571))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2566, cbModelParam._m0[9u].z, fma(_2565, cbModelParam._m0[9u].y, _2564 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2566, cbModelParam._m0[10u].z, fma(_2565, cbModelParam._m0[10u].y, _2564 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2566, cbModelParam._m0[11u].z, fma(_2565, cbModelParam._m0[11u].y, _2564 * cbModelParam._m0[11u].x))), _1998);
            frontier_phi_13_35_ladder = _2690.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2690.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2690.x * cbModelParam._m0[1u].y;
        }
        _2078 = frontier_phi_13_35_ladder_2;
        _2080 = frontier_phi_13_35_ladder_1;
        _2082 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1192, _1193, _1194), _1998);
        _2078 = _2066.x * cbModelParam._m0[1u].y;
        _2080 = _2066.y * cbModelParam._m0[1u].y;
        _2082 = _2066.z * cbModelParam._m0[1u].y;
    }
    float _2086 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1037);
    float _2087 = isnan(_2086) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2086 : min(cbModelParam._m0[25u].w, _2086));
    float _2176;
    float _2178;
    float _2180;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2140 = fma(_1253, cbModelParam._m0[21u].z, fma(_1249, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1245)) + cbModelParam._m0[21u].w;
        float _2144 = fma(_1253, cbModelParam._m0[22u].z, fma(_1249, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1245)) + cbModelParam._m0[22u].w;
        float _2148 = fma(_1253, cbModelParam._m0[23u].z, fma(_1249, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1245)) + cbModelParam._m0[23u].w;
        float _2151 = fma(_1194, cbModelParam._m0[21u].z, fma(_1193, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192));
        float _2154 = fma(_1194, cbModelParam._m0[22u].z, fma(_1193, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192));
        float _2157 = fma(_1194, cbModelParam._m0[23u].z, fma(_1193, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192));
        float _2316;
        if (_2151 > 0.0)
        {
            _2316 = abs((1.0 - _2140) / _2151);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2140 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2316 = frontier_phi_25_21_ladder;
        }
        float _2584;
        if (_2154 > 0.0)
        {
            _2584 = abs((1.0 - _2144) / _2154);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2144 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2584 = frontier_phi_37_32_ladder;
        }
        float _2789;
        if (_2157 > 0.0)
        {
            _2789 = abs((1.0 - _2148) / _2157);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2148 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2789 = frontier_phi_46_43_ladder;
        }
        float _2791 = isnan(_2584) ? _2316 : (isnan(_2316) ? _2584 : min(_2316, _2584));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2151) + _2140;
        float _2797 = (_2792 * _2154) + _2144;
        float _2798 = (_2792 * _2157) + _2148;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _2087);
            frontier_phi_22_46_ladder = _2997.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2997.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2997.x * cbModelParam._m0[1u].z;
        }
        _2176 = frontier_phi_22_46_ladder_2;
        _2178 = frontier_phi_22_46_ladder_1;
        _2180 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1192, _1193, _1194), _2087);
        _2176 = _2160.x * cbModelParam._m0[1u].z;
        _2178 = _2160.y * cbModelParam._m0[1u].z;
        _2180 = _2160.z * cbModelParam._m0[1u].z;
    }
    float _2192 = ((((1.0 - _1213) * ((_1200 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1213 * _1200)) * _1184;
    float _2193 = _2192 * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2194 = _2192 * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2195 = _2192 * ((cbModelParam._m0[1u].w * (_2180 - _2082)) + _2082);
    float _2198 = fma(_2195, cbSceneParam._m0[89u].z, fma(_2194, cbSceneParam._m0[89u].y, _2193 * cbSceneParam._m0[89u].x));
    float _2201 = fma(_2195, cbSceneParam._m0[90u].z, fma(_2194, cbSceneParam._m0[90u].y, _2193 * cbSceneParam._m0[90u].x));
    float _2204 = fma(_2195, cbSceneParam._m0[91u].z, fma(_2194, cbSceneParam._m0[91u].y, _2193 * cbSceneParam._m0[91u].x));
    vec4 _2212 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1121, _1122));
    float _2214 = _2212.w;
    float _2226 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2214);
    float _2227 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2214);
    float _2228 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2214);
    uvec4 _2232 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2234 = _2232.x * 14u;
    uint _2235 = _2234 + 13u;
    float _2242 = _1184 + (-1.0);
    float _2247 = (cbLight._m0[_2235].x * _2242) + 1.0;
    float _2248 = (cbLight._m0[_2235].y * _2242) + 1.0;
    float _2249 = (cbLight._m0[_2235].z * _2242) + 1.0;
    float _2250 = (cbLight._m0[_2235].w * _2242) + 1.0;
    uint _2251 = _2234 + 5u;
    float _2257 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2261 = _2234 + 4u;
    float _2270 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2274 = _2234 | 1u;
    float _2285 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_1034, _1035, _1036));
    float _2288 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_1034, _1035, _1036));
    float _4479 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _4490 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2295 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2302 = ((cbLight._m0[_2251].x * _2257) * _2295) + (((cbLight._m0[_2261].x * _2226) * _2270) * _2293);
    float _2303 = ((_2257 * cbLight._m0[_2251].y) * _2295) + (((cbLight._m0[_2261].y * _2227) * _2270) * _2293);
    float _2304 = ((_2257 * cbLight._m0[_2251].z) * _2295) + (((cbLight._m0[_2261].z * _2228) * _2270) * _2293);
    uvec4 _2308 = floatBitsToUint(cbLight._m0[_2234 + 12u]);
    bool _2310 = _2308.x == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2310)
    {
        _2321 = _2302;
        _2323 = _2303;
        _2325 = _2304;
    }
    else
    {
        uint _2329 = _2234 + 6u;
        float _2345 = (dot(vec3(cbLight._m0[_2234 + 2u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4501 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2348 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2321 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2302;
        _2323 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2303;
        _2325 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2304;
    }
    bool _2328 = _2308.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2328)
    {
        _2366 = _2321;
        _2368 = _2323;
        _2370 = _2325;
    }
    else
    {
        uint _2528 = _2234 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2234 + 3u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4517 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2547 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2366 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2321;
        _2368 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2323;
        _2370 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2325;
    }
    uint _2373 = _2234 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _1037) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2234].x + _1113;
    float _2389 = cbLight._m0[_2234].y + _1114;
    float _2390 = cbLight._m0[_2234].z + _1115;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2234].xyz));
    float _4533 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _2402 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2403 = dot(vec3(_1034, _1035, _1036), vec3(_2395, _2396, _2397));
    float _4555 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2395, _2396, _2397));
    float _4566 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4577 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2454 = _2234 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _1037) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2274].x + _1113;
    float _2468 = cbLight._m0[_2274].y + _1114;
    float _2469 = cbLight._m0[_2274].z + _1115;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2274].xyz));
    float _4588 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2481 = dot(vec3(_1034, _1035, _1036), vec3(_2474, _2475, _2476));
    float _4599 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2474, _2475, _2476));
    float _4610 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2402 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2503) + _2466) * _2480))) * _2480;
    float _4621 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2257) + ((((cbLight._m0[_2373].x * _2226) * _2426) * _2440) * _2270);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2257) + ((((cbLight._m0[_2373].y * _2227) * _2426) * _2440) * _2270);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2257) + ((((cbLight._m0[_2373].z * _2228) * _2426) * _2440) * _2270);
    float _2589;
    float _2591;
    float _2593;
    if (_2310)
    {
        _2589 = _2525;
        _2591 = _2526;
        _2593 = _2527;
    }
    else
    {
        uint _2595 = _2234 + 2u;
        uint _2599 = _2234 + 10u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _1037) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _1113;
        float _2616 = cbLight._m0[_2595].y + _1114;
        float _2617 = cbLight._m0[_2595].z + _1115;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2595].xyz));
        float _4632 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2629 = dot(vec3(_1034, _1035, _1036), vec3(_2622, _2623, _2624));
        float _4643 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4654 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2650 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2651 = 1.0 - _2614;
        float _2661 = (0.5 / (((_2402 * ((_2628 * _2651) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2651) + _2614) * _2628))) * _2628;
        float _4665 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2589 = (((_2650 * cbLight._m0[_2599].x) * _2663) * _2664) + _2525;
        _2591 = (((_2650 * cbLight._m0[_2599].y) * _2663) * _2664) + _2526;
        _2593 = (((_2650 * cbLight._m0[_2599].z) * _2663) * _2664) + _2527;
    }
    float _2699;
    float _2701;
    float _2703;
    if (_2328)
    {
        _2699 = _2589;
        _2701 = _2591;
        _2703 = _2593;
    }
    else
    {
        uint _2710 = _2234 + 3u;
        uint _2714 = _2234 + 11u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _1037) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _1113;
        float _2731 = cbLight._m0[_2710].y + _1114;
        float _2732 = cbLight._m0[_2710].z + _1115;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2710].xyz));
        float _4681 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2744 = dot(vec3(_1034, _1035, _1036), vec3(_2737, _2738, _2739));
        float _4692 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4703 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2765 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2766 = 1.0 - _2729;
        float _2776 = (0.5 / (((_2402 * ((_2743 * _2766) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2766) + _2729) * _2743))) * _2743;
        float _4714 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2778 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2779 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2699 = (((_2765 * cbLight._m0[_2714].x) * _2778) * _2779) + _2589;
        _2701 = (((_2765 * cbLight._m0[_2714].y) * _2778) * _2779) + _2591;
        _2703 = (((_2765 * cbLight._m0[_2714].z) * _2778) * _2779) + _2593;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2232.y == 0u)
    {
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2854;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2854;
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2854;
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1122) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _1121) / _2870)));
        float _2891 = (log2(_2857 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            uint _3153 = 0u;
            uint _3162;
            bool _3163;
            for (;;)
            {
                _3162 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                _3163 = _3162 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3163)
                {
                    frontier_phi_61_pred = _3147;
                    frontier_phi_61_pred_1 = _3152;
                    frontier_phi_61_pred_2 = _3151;
                    frontier_phi_61_pred_3 = _3150;
                    frontier_phi_61_pred_4 = _3149;
                    frontier_phi_61_pred_5 = _3148;
                }
                else
                {
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    uint _3277;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3162;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3281 = uint(findLSB(_3277)) + (_3153 << 5u);
                        uint _3278 = (_3277 + 4294967295u) & _3277;
                        uint _3283 = _3281 * 48u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3303 = (_3281 * 48u) + 4u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3322 = (_3281 * 48u) + 8u;
                        vec3 _3333 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x));
                        float _3337 = _3297.x - _2855;
                        float _3338 = _3297.y - _2856;
                        float _3339 = _3297.z - _2857;
                        float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                        float _3343 = inversesqrt(_3340);
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3347 = dot(vec3(_1140, _1143, _1146), vec3(_3344, _3345, _3346));
                        float _3352 = 1.0 - (_3340 * _3297.w);
                        float _4740 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3354 = sqrt(_3340) * _3316.w;
                        float _3357 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3347) + _3358;
                        float _3364 = _3354 * _3354;
                        float _3368 = ((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3353) / ((_3364 * 0.699999988079071044921875) + 1.0);
                        float _3372 = (-0.0) - _2855;
                        float _3373 = (-0.0) - _2856;
                        float _3374 = (-0.0) - _2857;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3389 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                        float _3390 = 1.0 - _1200;
                        float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                        float _3398 = _3397 * _3397;
                        float _3399 = _3398 * _3398;
                        float _3400 = _3379 + _3344;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3410 = dot(vec3(_1140, _1143, _1146), vec3(_3379, _3380, _3381));
                        float _4756 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3414 = dot(vec3(_1140, _1143, _1146), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                        float _4767 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                        float _3422 = _3357 * _3398;
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3347) + _3423;
                        float _4778 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3428 = 1.0 - _3398;
                        float _3438 = (0.5 / (((_3427 * ((_3413 * _3428) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3398) * _3413))) * _3427;
                        float _4789 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3449 = (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3421 * _3421) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125))) * _3353;
                        _3206 = (_3368 * _3316.x) + _3274;
                        _3207 = (_3368 * _3316.y) + _3275;
                        _3208 = (_3368 * _3316.z) + _3276;
                        _3203 = (_3449 * _3333.x) + _3271;
                        _3204 = (_3449 * _3333.y) + _3272;
                        _3205 = (_3449 * _3333.z) + _3273;
                        if (_3278 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3278;
                        }
                    }
                    frontier_phi_61_pred = _3203;
                    frontier_phi_61_pred_1 = _3208;
                    frontier_phi_61_pred_2 = _3207;
                    frontier_phi_61_pred_3 = _3206;
                    frontier_phi_61_pred_4 = _3205;
                    frontier_phi_61_pred_5 = _3204;
                }
                _3003 = frontier_phi_61_pred;
                _3013 = frontier_phi_61_pred_1;
                _3011 = frontier_phi_61_pred_2;
                _3009 = frontier_phi_61_pred_3;
                _3007 = frontier_phi_61_pred_4;
                _3005 = frontier_phi_61_pred_5;
                uint _3154 = _3153 + 1u;
                if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3147 = _3003;
                    _3148 = _3005;
                    _3149 = _3007;
                    _3150 = _3009;
                    _3151 = _3011;
                    _3152 = _3013;
                    _3153 = _3154;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((4294967295u << _3019) & _2901) == 0u)
        {
            _3115 = _3002;
            _3117 = _3004;
            _3119 = _3006;
            _3121 = _3008;
            _3123 = _3010;
            _3125 = _3012;
        }
        else
        {
            float _3140 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
            float _3141 = _3140 * _2855;
            float _3142 = _3140 * _2856;
            float _3143 = _3140 * _2857;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3254 = _3002;
                float _3255 = _3004;
                float _3256 = _3006;
                float _3257 = _3008;
                float _3258 = _3010;
                float _3259 = _3012;
                uint _3260 = _3019;
                uint _3269;
                bool _3270;
                for (;;)
                {
                    _3269 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                    _3270 = _3269 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3270)
                    {
                        frontier_phi_67_pred = _3257;
                        frontier_phi_67_pred_1 = _3258;
                        frontier_phi_67_pred_2 = _3259;
                        frontier_phi_67_pred_3 = _3256;
                        frontier_phi_67_pred_4 = _3255;
                        frontier_phi_67_pred_5 = _3254;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        uint _3473 = _3269;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3542;
                        vec4 _3557;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3484 = ((_3260 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3529 = (_3484 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3484 * 40u) + 20u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3484 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3484 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_2857, _3591.z, fma(_2856, _3591.y, _3591.x * _2855)) + _3591.w;
                            _3604 = !((fma(_2857, _3572.z, fma(_2856, _3572.y, _3572.x * _2855)) + _3572.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3499.x - _2855;
                                float _3632 = _3499.y - _2856;
                                float _3633 = _3499.z - _2857;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3500 * _3500));
                                float _4800 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3649 = sqrt(_3634) * _3515.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_1140, _1143, _1146))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_2857, _3542.z, fma(_2856, _3542.y, _3542.x * _2855)) + _3542.w) / _3603;
                                float _3663 = (fma(_2857, _3557.z, fma(_2856, _3557.y, _3557.x * _2855)) + _3557.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4816 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _1200;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3141;
                                float _3693 = _3639 - _3142;
                                float _3694 = _3640 - _3143;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_1140, _1143, _1146), vec3((-0.0) - _3141, (-0.0) - _3142, (-0.0) - _3143));
                                float _4827 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3706 = dot(vec3(_1140, _1143, _1146), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4838 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_1140, _1143, _1146), vec3(_3638, _3639, _3640))) + _3715;
                                float _4849 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4860 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3743 * _3527.x;
                                frontier_phi_73_pred_1 = _3743 * _3527.y;
                                frontier_phi_73_pred_2 = _3669 * _3515.z;
                                frontier_phi_73_pred_3 = _3669 * _3515.y;
                                frontier_phi_73_pred_4 = _3669 * _3515.x;
                                frontier_phi_73_pred_5 = _3743 * _3527.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3747 = frontier_phi_73_pred;
                            _3748 = frontier_phi_73_pred_1;
                            _3752 = frontier_phi_73_pred_2;
                            _3751 = frontier_phi_73_pred_3;
                            _3750 = frontier_phi_73_pred_4;
                            _3749 = frontier_phi_73_pred_5;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3457;
                        frontier_phi_67_pred_1 = _3458;
                        frontier_phi_67_pred_2 = _3459;
                        frontier_phi_67_pred_3 = _3456;
                        frontier_phi_67_pred_4 = _3455;
                        frontier_phi_67_pred_5 = _3454;
                    }
                    _3122 = frontier_phi_67_pred;
                    _3124 = frontier_phi_67_pred_1;
                    _3126 = frontier_phi_67_pred_2;
                    _3120 = frontier_phi_67_pred_3;
                    _3118 = frontier_phi_67_pred_4;
                    _3116 = frontier_phi_67_pred_5;
                    uint _3261 = _3260 + 1u;
                    if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3254 = _3116;
                        _3255 = _3118;
                        _3256 = _3120;
                        _3257 = _3122;
                        _3258 = _3124;
                        _3259 = _3126;
                        _3260 = _3261;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3124;
                frontier_phi_55_56_ladder_1 = _3126;
                frontier_phi_55_56_ladder_2 = _3122;
                frontier_phi_55_56_ladder_3 = _3120;
                frontier_phi_55_56_ladder_4 = _3118;
                frontier_phi_55_56_ladder_5 = _3116;
            }
            else
            {
                frontier_phi_55_56_ladder = _3010;
                frontier_phi_55_56_ladder_1 = _3012;
                frontier_phi_55_56_ladder_2 = _3008;
                frontier_phi_55_56_ladder_3 = _3006;
                frontier_phi_55_56_ladder_4 = _3004;
                frontier_phi_55_56_ladder_5 = _3002;
            }
            _3115 = frontier_phi_55_56_ladder_5;
            _3117 = frontier_phi_55_56_ladder_4;
            _3119 = frontier_phi_55_56_ladder_3;
            _3121 = frontier_phi_55_56_ladder_2;
            _3123 = frontier_phi_55_56_ladder;
            _3125 = frontier_phi_55_56_ladder_1;
        }
        float _3130 = isnan(1.0) ? _1184 : (isnan(_1184) ? 1.0 : min(_1184, 1.0));
        _2914 = (_3130 * _3121) + _2366;
        _2916 = (_3130 * _3123) + _2368;
        _2918 = (_3130 * _3125) + _2370;
        _2920 = ((_3115 * 0.039999999105930328369140625) * _3130) + _2699;
        _2922 = ((_3117 * 0.039999999105930328369140625) * _3130) + _2701;
        _2924 = ((_3119 * 0.039999999105930328369140625) * _3130) + _2703;
    }
    else
    {
        _2914 = _2366;
        _2916 = _2368;
        _2918 = _2370;
        _2920 = _2699;
        _2922 = _2701;
        _2924 = _2703;
    }
    float _4876 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _4887 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _4898 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    uint _2944 = _291 + 6u;
    float _2952 = _1121 / cbSceneParam._m0[86u].x;
    float _2953 = _1122 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _1055 : (isnan(_1055) ? cbSceneParam._m0[77u].w : min(_1055, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_1055 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_1055) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1055 : min(cbSceneParam._m0[80u].w, _1055));
        float _3028 = _3027 / _1055;
        float _3039 = _3028 * _1106;
        float _3040 = _1107 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3043 = _3028 * _1108;
        float _3045 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3040;
        float _3053 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3041 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3176 = 1.0 / cbSceneParam._m0[80u].x;
            float _3177 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3178 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            _3216 = ((abs(_3053 / _3041) * cbSceneParam._m0[80u].y) * ((((_3187 - _3188) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))))) * _3176)) - ((exp2(_3063 * _3187) - exp2(_3063 * _3188)) * _3176))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2972);
        _3065 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3067 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3069 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3071 = _3227 * _2972;
    }
    else
    {
        _3065 = _2969;
        _3067 = _2970;
        _3069 = _2971;
        _3071 = _2972;
    }
    float _3083 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3084 = _3083 == 3.0;
    float _3085 = log2(_3071);
    float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2914 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1184))) + ((_2920 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2916 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1184))) + ((_2922 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2918 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1184))) + ((_2924 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3103 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3103 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.y = _3103 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.z = _3103 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.w = cbInstanceData._m0[_2944].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
}


