#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1531;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3834 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3845 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3856 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[24u].z) + _441) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3867 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _466 = (_459 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _467 = (_459 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _468 = (_459 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[24u].z) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3878 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _306) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _307) + cbTextureTilingScale._m0[24u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _578 = _576.x;
    float _588 = dot(vec4(_578, _576.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _600 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _389.z) * 2.0) - ((((_578 - _588) * cbMtdParam._m0[24u].z) + _588) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3889 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _608 = (_601 * ((_559.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _609 = (_601 * ((_559.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _610 = (_601 * ((_559.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _614 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _608;
    float _617 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _609;
    float _620 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _610;
    float _627 = ((_608 - _614) * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) + _614;
    float _628 = ((_609 - _617) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) + _617;
    float _629 = ((_610 - _620) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _620;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _688 = _686.x;
    float _689 = _686.y;
    float _690 = _686.z;
    float _697 = ((_669.x - _688) * _459) + _688;
    float _698 = ((_669.y - _689) * _459) + _689;
    float _699 = ((_669.z - _690) * _459) + _690;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _722 = ((_711.x - _697) * _532) + _697;
    float _723 = ((_711.y - _698) * _532) + _698;
    float _724 = ((_711.z - _699) * _532) + _699;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _306) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _307) + cbTextureTilingScale._m0[23u].w));
    float _749 = ((_736.z - _724) * _601) + _724;
    float _752 = ((((_736.x - _722) * _601) + _722) * 2.0) + (-1.0);
    float _753 = ((((_736.y - _723) * _601) + _723) * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3900 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _759 = sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))));
    vec4 _773 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _800 = _798.x;
    float _801 = 1.0 - _800;
    float _807 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _810 = ((isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : min(_807, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _819 = (_810 - ((((((_800 - _801) * cbMtdParam._m0[24u].w) + _801) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _810))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3921 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _820 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _827 = (_820 * (cbMtdParam._m0[17u].x - _627)) + _627;
    float _828 = (_820 * (cbMtdParam._m0[17u].y - _628)) + _628;
    float _829 = (_820 * (cbMtdParam._m0[17u].z - _629)) + _629;
    vec4 _841 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _843 = _841.x;
    float _844 = 1.0 - _843;
    float _871 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_843 - _844) * cbMtdParam._m0[24u].y) + _844) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3932 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _880 = ((((cbMtdParam._m0[10u].x - _827) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _872) + _827;
    float _881 = ((((cbMtdParam._m0[10u].y - _828) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _872) + _828;
    float _882 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _829)) * _872) + _829;
    float _887 = (((_646.z - _749) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _749;
    float _891 = ((_773.z - _887) * cbMtdParam._m0[19u].w) + _887;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _912 = (_905.x * 2.0) + (-1.0);
    float _913 = (_905.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _3943 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _922 = (_820 * (_905.z - _891)) + _891;
    float _925 = ((cbMtdParam._m0[23u].y - _922) * _872) + _922;
    vec4 _944 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _950 = (_944.x * 2.0) + (-1.0);
    float _951 = (_944.y * 2.0) + (-1.0);
    float _952 = dot(vec2(_950, _951), vec2(_950, _951));
    float _3954 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _966 = (_752 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_646.x * 2.0) + (-1.0)))) + (((_773.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _967 = (_753 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_646.y * 2.0) + (-1.0)))) + (((_773.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _979 = (((_912 - _966) + (cbMtdParam._m0[21u].x * _966)) * _820) + _966;
    float _980 = (((_913 - _967) + (cbMtdParam._m0[21u].x * _967)) * _820) + _967;
    float _981 = (_820 * (sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _759)) + _759;
    float _992 = (((_950 - _979) + (_979 * cbMtdParam._m0[22u].z)) * _872) + _979;
    float _993 = (((_951 - _980) + (_980 * cbMtdParam._m0[22u].z)) * _872) + _980;
    float _994 = ((sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) - _981) * _872) + _981;
    float _996 = cbMtdParam._m0[22u].x + _773.w;
    float _999 = fma(_994, _255 * NORMAL.x, fma(_993, _262 * TANGENT.x, (_248 * _240) * _992));
    float _1002 = fma(_994, _255 * NORMAL.y, fma(_993, _262 * TANGENT.y, (_248 * _241) * _992));
    float _1005 = fma(_994, _255 * NORMAL.z, fma(_993, _262 * TANGENT.z, (_248 * _242) * _992));
    float _1009 = inversesqrt(dot(vec3(_999, _1002, _1005), vec3(_999, _1002, _1005)));
    float _1010 = _1009 * _999;
    float _1011 = _1009 * _1002;
    float _1012 = _1009 * _1005;
    float _3965 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _1013 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _3987 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _3998 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4009 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _1031 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1082 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1072);
    float _1083 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1072);
    float _1084 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1072);
    float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
    float _1089 = _1082 * _1088;
    float _1090 = _1083 * _1088;
    float _1091 = _1084 * _1088;
    float _1097 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1098 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1116 = fma(_1012, cbSceneParam._m0[5u].z, fma(_1011, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1010));
    float _1119 = fma(_1012, cbSceneParam._m0[6u].z, fma(_1011, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1010));
    float _1122 = fma(_1012, cbSceneParam._m0[7u].z, fma(_1011, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1010));
    uint _1136 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1142 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_1136].x;
    float _1143 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_1136].y;
    float _1144 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_1136].z;
    float _4020 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    vec4 _1156 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1097, cbSceneParam._m0[86u].y * _1098));
    float _1160 = ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * TEXCOORD_5.w) * _1156.x;
    float _1161 = dot(vec3(_1010, _1011, _1012), vec3(_1089, _1090, _1091));
    float _1164 = _1161 * 2.0;
    float _1168 = (_1164 * _1010) - _1089;
    float _1169 = (_1164 * _1011) - _1090;
    float _1170 = (_1164 * _1012) - _1091;
    float _1174 = abs(dot(vec3(_1089, _1090, _1091), vec3(_1010, _1011, _1012)));
    float _4053 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1176 = sqrt(_1013);
    float _1189 = exp2((_1176 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1176 * 3.0));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1229, cbModelParam._m0[26u].z, fma(_1225, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1221));
        float _1259 = fma(_1229, cbModelParam._m0[27u].z, fma(_1225, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1221));
        float _1263 = fma(_1229, cbModelParam._m0[28u].z, fma(_1225, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1221));
        float _1288 = _1221 + _1010;
        float _1289 = _1225 + _1011;
        float _1290 = _1229 + _1012;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_1010, _1011, _1012), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4101 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_1010, _1011, _1012), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4134 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_1010, _1011, _1012), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4167 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1568 = fma(_1229, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221));
        float _1572 = fma(_1229, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221));
        float _1576 = fma(_1229, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221));
        float _1599 = _1221 + _1010;
        float _1600 = _1225 + _1011;
        float _1601 = _1229 + _1012;
        float _1611 = fma(_1601, cbModelParam._m0[30u].z, fma(_1600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1599)) - _1568;
        float _1612 = fma(_1601, cbModelParam._m0[31u].z, fma(_1600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1599)) - _1572;
        float _1613 = fma(_1601, cbModelParam._m0[32u].z, fma(_1600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1599)) - _1576;
        float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
        float _1630 = ((_1617 * _1611) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1568 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1617 * _1612) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1572 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1617 * _1613) / cbModelParam._m0[35u].z) + ((((((_1576 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        float _1667 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1634.x + (-0.5));
        float _1669 = _1667 * (_1634.y + (-0.5));
        float _1670 = _1667 * (_1634.z + (-0.5));
        float _1677 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1641.x + (-0.5));
        float _1679 = _1677 * (_1641.y + (-0.5));
        float _1680 = _1677 * (_1641.z + (-0.5));
        float _1687 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1648.x + (-0.5));
        float _1689 = _1687 * (_1648.y + (-0.5));
        float _1690 = _1687 * (_1648.z + (-0.5));
        float _1697 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1655.x + (-0.5));
        float _1699 = _1697 * (_1655.y + (-0.5));
        float _1700 = _1697 * (_1655.z + (-0.5));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = _1668 * 0.5;
        float _1705 = _1678 * 0.5;
        float _1706 = _1688 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_1010, _1011, _1012), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4230 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1731 + 1.0))) + _1736) * _1701;
        float _1746 = _1669 * 0.5;
        float _1747 = _1679 * 0.5;
        float _1748 = _1689 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_1010, _1011, _1012), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4263 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1773 + 1.0))) + _1778) * _1702;
        float _1788 = _1670 * 0.5;
        float _1789 = _1680 * 0.5;
        float _1790 = _1690 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_1010, _1011, _1012), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4296 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1815 + 1.0))) + _1820) * _1703;
        _1837 = _1670;
        _1838 = _1669;
        _1839 = _1668;
        _1840 = _1680;
        _1841 = _1679;
        _1842 = _1678;
        _1843 = _1690;
        _1844 = _1689;
        _1845 = _1688;
        _1846 = _1703;
        _1847 = _1702;
        _1848 = _1701;
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
    }
    else
    {
        _1837 = _1531;
        _1838 = _1531;
        _1839 = _1531;
        _1840 = _1531;
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = 0.0;
        _1850 = 0.0;
        _1851 = 0.0;
    }
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1543)) + _1543;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1544)) + _1544;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1545)) + _1545;
    float _1884 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1861));
    float _1905 = _1168 * 0.5;
    float _1906 = _1169 * 0.5;
    float _1907 = _1170 * 0.5;
    float _1908 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1911 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1914 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1948;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1921 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1925 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1929 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1936 = dot(vec4(cbModelParam._m0[39u]), vec4(_1905, _1906, _1907, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1936) ? 0.0 : (isnan(0.0) ? _1936 : max(0.0, _1936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1959;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1950 = dot(vec4(cbModelParam._m0[40u]), vec4(_1905, _1906, _1907, 1.0));
        _1959 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1959 = 1.0;
    }
    float _1963 = (_1959 * cbModelParam._m0[1u].x) + (_1948 * (1.0 - cbModelParam._m0[1u].x));
    float _1973 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1013);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1973 : min(cbModelParam._m0[25u].z, _1973));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2021 = fma(_1229, cbModelParam._m0[13u].z, fma(_1225, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1221)) + cbModelParam._m0[13u].w;
        float _2025 = fma(_1229, cbModelParam._m0[14u].z, fma(_1225, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1221)) + cbModelParam._m0[14u].w;
        float _2029 = fma(_1229, cbModelParam._m0[15u].z, fma(_1225, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1221)) + cbModelParam._m0[15u].w;
        float _2032 = fma(_1170, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168));
        float _2035 = fma(_1170, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168));
        float _2038 = fma(_1170, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168));
        float _2066;
        if (_2032 > 0.0)
        {
            _2066 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2066 = frontier_phi_14_12_ladder;
        }
        float _2267;
        if (_2035 > 0.0)
        {
            _2267 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2267 = frontier_phi_23_19_ladder;
        }
        float _2510;
        if (_2038 > 0.0)
        {
            _2510 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2510 = frontier_phi_35_30_ladder;
        }
        float _2512 = isnan(_2267) ? _2066 : (isnan(_2066) ? _2267 : min(_2066, _2267));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _2032) + _2021;
        float _2518 = (_2513 * _2035) + _2025;
        float _2519 = (_2513 * _2038) + _2029;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1974);
            frontier_phi_13_35_ladder = _2643.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2643.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2643.x * cbModelParam._m0[1u].y;
        }
        _2054 = frontier_phi_13_35_ladder_2;
        _2056 = frontier_phi_13_35_ladder_1;
        _2058 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1168, _1169, _1170), _1974);
        _2054 = _2042.x * cbModelParam._m0[1u].y;
        _2056 = _2042.y * cbModelParam._m0[1u].y;
        _2058 = _2042.z * cbModelParam._m0[1u].y;
    }
    float _2062 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1013);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2062 : min(cbModelParam._m0[25u].w, _2062));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1229, cbModelParam._m0[21u].z, fma(_1225, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1221)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1229, cbModelParam._m0[22u].z, fma(_1225, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1221)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1229, cbModelParam._m0[23u].z, fma(_1225, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1221)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1170, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168));
        float _2131 = fma(_1170, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168));
        float _2134 = fma(_1170, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168));
        float _2272;
        if (_2128 > 0.0)
        {
            _2272 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2272 = frontier_phi_25_21_ladder;
        }
        float _2537;
        if (_2131 > 0.0)
        {
            _2537 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2537 = frontier_phi_37_32_ladder;
        }
        float _2742;
        if (_2134 > 0.0)
        {
            _2742 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2742 = frontier_phi_46_43_ladder;
        }
        float _2744 = isnan(_2537) ? _2272 : (isnan(_2272) ? _2537 : min(_2272, _2537));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _2128) + _2117;
        float _2750 = (_2745 * _2131) + _2121;
        float _2751 = (_2745 * _2134) + _2125;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2752;
        float _2755 = _2752 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2751 > _2755) || ((_2751 < _2753) || ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 < _2753) || (_2749 > _2755))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2751, cbModelParam._m0[17u].z, fma(_2750, cbModelParam._m0[17u].y, _2749 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2751, cbModelParam._m0[18u].z, fma(_2750, cbModelParam._m0[18u].y, _2749 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2751, cbModelParam._m0[19u].z, fma(_2750, cbModelParam._m0[19u].y, _2749 * cbModelParam._m0[19u].x))), _2063);
            frontier_phi_22_46_ladder = _2950.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2950.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2950.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_22_46_ladder_2;
        _2155 = frontier_phi_22_46_ladder_1;
        _2157 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1168, _1169, _1170), _2063);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2169 = ((((1.0 - _1189) * ((_1176 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1189 * _1176)) * _1160;
    float _2170 = _2169 * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2171 = _2169 * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2172 = _2169 * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2171, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2171, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2171, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _1160 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2226 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2230 = _2193 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_1010, _1011, _1012));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_1010, _1011, _1012));
    float _4432 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4443 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2210].x * _2216) * _2251) + ((cbLight._m0[_2220].x * _2226) * _2249);
    float _2259 = ((_2216 * cbLight._m0[_2210].y) * _2251) + ((_2226 * cbLight._m0[_2220].y) * _2249);
    float _2260 = ((_2216 * cbLight._m0[_2210].z) * _2251) + ((_2226 * cbLight._m0[_2220].z) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2193 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4454 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2304 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2481 = _2193 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4470 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2500 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2322 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2277;
        _2324 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2279;
        _2326 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2281;
    }
    uint _2329 = _2193 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _1013) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2193].x + _1089;
    float _2345 = cbLight._m0[_2193].y + _1090;
    float _2346 = cbLight._m0[_2193].z + _1091;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2193].xyz));
    float _4486 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _2358 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2359 = dot(vec3(_1010, _1011, _1012), vec3(_2351, _2352, _2353));
    float _4508 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2351, _2352, _2353));
    float _4519 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2358 * ((_2357 * _2383) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2383) + _2343) * _2357))) * _2357;
    float _4530 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2407 = _2193 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _1013) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2230].x + _1089;
    float _2421 = cbLight._m0[_2230].y + _1090;
    float _2422 = cbLight._m0[_2230].z + _1091;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2230].xyz));
    float _4541 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2434 = dot(vec3(_1010, _1011, _1012), vec3(_2427, _2428, _2429));
    float _4552 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2427, _2428, _2429));
    float _4563 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2419;
    float _2466 = (0.5 / (((_2358 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2456) + _2419) * _2433))) * _2433;
    float _4574 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2478 = (((_2455 * cbLight._m0[_2407].x) * _2468) * _2216) + (((_2382 * cbLight._m0[_2329].x) * _2396) * _2226);
    float _2479 = (((_2455 * cbLight._m0[_2407].y) * _2468) * _2216) + (((_2382 * cbLight._m0[_2329].y) * _2396) * _2226);
    float _2480 = (((_2455 * cbLight._m0[_2407].z) * _2468) * _2216) + (((_2382 * cbLight._m0[_2329].z) * _2396) * _2226);
    float _2542;
    float _2544;
    float _2546;
    if (_2266)
    {
        _2542 = _2478;
        _2544 = _2479;
        _2546 = _2480;
    }
    else
    {
        uint _2548 = _2193 + 2u;
        uint _2552 = _2193 + 10u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _1013) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _1089;
        float _2569 = cbLight._m0[_2548].y + _1090;
        float _2570 = cbLight._m0[_2548].z + _1091;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2548].xyz));
        float _4585 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2582 = dot(vec3(_1010, _1011, _1012), vec3(_2575, _2576, _2577));
        float _4596 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4607 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2603 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2604 = 1.0 - _2567;
        float _2614 = (0.5 / (((_2358 * ((_2581 * _2604) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2604) + _2567) * _2581))) * _2581;
        float _4618 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2542 = (((_2603 * cbLight._m0[_2552].x) * _2616) * _2617) + _2478;
        _2544 = (((_2603 * cbLight._m0[_2552].y) * _2616) * _2617) + _2479;
        _2546 = (((_2603 * cbLight._m0[_2552].z) * _2616) * _2617) + _2480;
    }
    float _2652;
    float _2654;
    float _2656;
    if (_2284)
    {
        _2652 = _2542;
        _2654 = _2544;
        _2656 = _2546;
    }
    else
    {
        uint _2663 = _2193 + 3u;
        uint _2667 = _2193 + 11u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _1013) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _1089;
        float _2684 = cbLight._m0[_2663].y + _1090;
        float _2685 = cbLight._m0[_2663].z + _1091;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2663].xyz));
        float _4634 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2697 = dot(vec3(_1010, _1011, _1012), vec3(_2690, _2691, _2692));
        float _4645 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4656 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2718 = (exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2719 = 1.0 - _2682;
        float _2729 = (0.5 / (((_2358 * ((_2696 * _2719) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2719) + _2682) * _2696))) * _2696;
        float _4667 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2652 = (((_2718 * cbLight._m0[_2667].x) * _2731) * _2732) + _2542;
        _2654 = (((_2718 * cbLight._m0[_2667].y) * _2731) * _2732) + _2544;
        _2656 = (((_2718 * cbLight._m0[_2667].z) * _2731) * _2732) + _2546;
    }
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_2191.y == 0u)
    {
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2807;
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2807;
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2807;
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.x;
        uint _2834 = uint((float(_2822.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1098) / _2823))) + floor(float(uint(cbSceneParam._m0[85u].x * _1097) / _2823)));
        float _2844 = (log2(_2810 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2845 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        uint _2848 = uint(isnan(14.0) ? _2845 : (isnan(_2845) ? 14.0 : min(_2845, 14.0)));
        uvec4 _2853 = texelFetch(g_lightClusterGridBuffer, int(((_2848 << 2u) + (_2834 << 6u)) >> 2u));
        uint _2854 = _2853.x;
        uint _2855 = _2822.z;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((((1u << ((_2855 >> 4u) & 15u)) + 4294967295u) & _2854) == 0u) || ((_2855 & 240u) == 0u))
        {
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
        }
        else
        {
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3116)
                {
                    frontier_phi_61_pred = _3100;
                    frontier_phi_61_pred_1 = _3105;
                    frontier_phi_61_pred_2 = _3104;
                    frontier_phi_61_pred_3 = _3103;
                    frontier_phi_61_pred_4 = _3102;
                    frontier_phi_61_pred_5 = _3101;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3115;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3106 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _2808;
                        float _3291 = _3250.y - _2809;
                        float _3292 = _3250.z - _2810;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_1116, _1119, _1122), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4693 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _2808;
                        float _3326 = (-0.0) - _2809;
                        float _3327 = (-0.0) - _2810;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3342 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _1176;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_1116, _1119, _1122), vec3(_3332, _3333, _3334));
                        float _4709 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3367 = dot(vec3(_1116, _1119, _1122), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4720 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3310 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3300) + _3376;
                        float _4731 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4742 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3374 * _3374) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3159 = (_3321 * _3269.x) + _3227;
                        _3160 = (_3321 * _3269.y) + _3228;
                        _3161 = (_3321 * _3269.z) + _3229;
                        _3156 = (_3402 * _3286.x) + _3224;
                        _3157 = (_3402 * _3286.y) + _3225;
                        _3158 = (_3402 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_61_pred = _3156;
                    frontier_phi_61_pred_1 = _3161;
                    frontier_phi_61_pred_2 = _3160;
                    frontier_phi_61_pred_3 = _3159;
                    frontier_phi_61_pred_4 = _3158;
                    frontier_phi_61_pred_5 = _3157;
                }
                _2956 = frontier_phi_61_pred;
                _2966 = frontier_phi_61_pred_1;
                _2964 = frontier_phi_61_pred_2;
                _2962 = frontier_phi_61_pred_3;
                _2960 = frontier_phi_61_pred_4;
                _2958 = frontier_phi_61_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2956;
                    _3101 = _2958;
                    _3102 = _2960;
                    _3103 = _2962;
                    _3104 = _2964;
                    _3105 = _2966;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
        }
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.z;
        uint _2972 = (_2970 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2972) & _2854) == 0u)
        {
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
            float _3094 = _3093 * _2808;
            float _3095 = _3093 * _2809;
            float _3096 = _3093 * _2810;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2972 < ((_2970 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3207 = _2955;
                float _3208 = _2957;
                float _3209 = _2959;
                float _3210 = _2961;
                float _3211 = _2963;
                float _3212 = _2965;
                uint _3213 = _2972;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3223)
                    {
                        frontier_phi_67_pred = _3210;
                        frontier_phi_67_pred_1 = _3211;
                        frontier_phi_67_pred_2 = _3212;
                        frontier_phi_67_pred_3 = _3209;
                        frontier_phi_67_pred_4 = _3208;
                        frontier_phi_67_pred_5 = _3207;
                    }
                    else
                    {
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3420 = _3207;
                        float _3421 = _3208;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        uint _3426 = _3222;
                        uint _3427;
                        vec4 _3452;
                        float _3453;
                        vec4 _3468;
                        vec3 _3480;
                        vec4 _3495;
                        vec4 _3510;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3437 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3426));
                            _3427 = (_3426 + 4294967295u) & _3426;
                            uint _3439 = _3437 * 40u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3453 = _3452.w;
                            uint _3455 = (_3437 * 40u) + 4u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3437 * 40u) + 8u;
                            _3480 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x));
                            uint _3482 = (_3437 * 40u) + 16u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3437 * 40u) + 20u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3437 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3437 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_2810, _3544.z, fma(_2809, _3544.y, _3544.x * _2808)) + _3544.w;
                            _3557 = !((fma(_2810, _3525.z, fma(_2809, _3525.y, _3525.x * _2808)) + _3525.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3452.x - _2808;
                                float _3585 = _3452.y - _2809;
                                float _3586 = _3452.z - _2810;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3453 * _3453));
                                float _4753 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3602 = sqrt(_3587) * _3468.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_1116, _1119, _1122))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_2810, _3495.z, fma(_2809, _3495.y, _3495.x * _2808)) + _3495.w) / _3556;
                                float _3616 = (fma(_2810, _3510.z, fma(_2809, _3510.y, _3510.x * _2808)) + _3510.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4769 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _1176;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3094;
                                float _3646 = _3592 - _3095;
                                float _3647 = _3593 - _3096;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_1116, _1119, _1122), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4780 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3659 = dot(vec3(_1116, _1119, _1122), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4791 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_1116, _1119, _1122), vec3(_3591, _3592, _3593))) + _3668;
                                float _4802 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4813 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3696 * _3480.x;
                                frontier_phi_73_pred_1 = _3696 * _3480.y;
                                frontier_phi_73_pred_2 = _3622 * _3468.z;
                                frontier_phi_73_pred_3 = _3622 * _3468.y;
                                frontier_phi_73_pred_4 = _3622 * _3468.x;
                                frontier_phi_73_pred_5 = _3696 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3700 = frontier_phi_73_pred;
                            _3701 = frontier_phi_73_pred_1;
                            _3705 = frontier_phi_73_pred_2;
                            _3704 = frontier_phi_73_pred_3;
                            _3703 = frontier_phi_73_pred_4;
                            _3702 = frontier_phi_73_pred_5;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            if (_3427 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3427;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3410;
                        frontier_phi_67_pred_1 = _3411;
                        frontier_phi_67_pred_2 = _3412;
                        frontier_phi_67_pred_3 = _3409;
                        frontier_phi_67_pred_4 = _3408;
                        frontier_phi_67_pred_5 = _3407;
                    }
                    _3075 = frontier_phi_67_pred;
                    _3077 = frontier_phi_67_pred_1;
                    _3079 = frontier_phi_67_pred_2;
                    _3073 = frontier_phi_67_pred_3;
                    _3071 = frontier_phi_67_pred_4;
                    _3069 = frontier_phi_67_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3069;
                        _3208 = _3071;
                        _3209 = _3073;
                        _3210 = _3075;
                        _3211 = _3077;
                        _3212 = _3079;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3077;
                frontier_phi_55_56_ladder_1 = _3079;
                frontier_phi_55_56_ladder_2 = _3075;
                frontier_phi_55_56_ladder_3 = _3073;
                frontier_phi_55_56_ladder_4 = _3071;
                frontier_phi_55_56_ladder_5 = _3069;
            }
            else
            {
                frontier_phi_55_56_ladder = _2963;
                frontier_phi_55_56_ladder_1 = _2965;
                frontier_phi_55_56_ladder_2 = _2961;
                frontier_phi_55_56_ladder_3 = _2959;
                frontier_phi_55_56_ladder_4 = _2957;
                frontier_phi_55_56_ladder_5 = _2955;
            }
            _3068 = frontier_phi_55_56_ladder_5;
            _3070 = frontier_phi_55_56_ladder_4;
            _3072 = frontier_phi_55_56_ladder_3;
            _3074 = frontier_phi_55_56_ladder_2;
            _3076 = frontier_phi_55_56_ladder;
            _3078 = frontier_phi_55_56_ladder_1;
        }
        float _3083 = isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0));
        _2867 = (_3083 * _3074) + _2322;
        _2869 = (_3083 * _3076) + _2324;
        _2871 = (_3083 * _3078) + _2326;
        _2873 = ((_3068 * 0.039999999105930328369140625) * _3083) + _2652;
        _2875 = ((_3070 * 0.039999999105930328369140625) * _3083) + _2654;
        _2877 = ((_3072 * 0.039999999105930328369140625) * _3083) + _2656;
    }
    else
    {
        _2867 = _2322;
        _2869 = _2324;
        _2871 = _2326;
        _2873 = _2652;
        _2875 = _2654;
        _2877 = _2656;
    }
    float _4829 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _4840 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4851 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    uint _2897 = _287 + 6u;
    float _2905 = _1097 / cbSceneParam._m0[86u].x;
    float _2906 = _1098 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _1031 : (isnan(_1031) ? cbSceneParam._m0[77u].w : min(_1031, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_1031 > cbSceneParam._m0[78u].w)
    {
        float _2980 = isnan(_1031) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1031 : min(cbSceneParam._m0[80u].w, _1031));
        float _2981 = _2980 / _1031;
        float _2992 = _2981 * _1082;
        float _2993 = _1083 * _2981;
        float _2994 = (-0.0) - _2993;
        float _2996 = _2981 * _1084;
        float _2998 = (cbSceneParam._m0[77u].w * _2994) / _2980;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2993;
        float _3006 = sqrt(((_2992 * _2992) + (_2993 * _2993)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2980)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2994 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3131 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3169 = ((abs(_3006 / _2994) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3016 * _3140) - exp2(_3016 * _3141)) * _3129))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2925);
        _3018 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2922;
        _3020 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3022 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3024 = _3180 * _2925;
    }
    else
    {
        _3018 = _2922;
        _3020 = _2923;
        _3022 = _2924;
        _3024 = _2925;
    }
    float _3036 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3037 = _3036 == 3.0;
    float _3038 = log2(_3024);
    float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2867 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1160))) + ((_2873 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1963)) * cbPerFrame._m0[3u].x));
    float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2869 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1160))) + ((_2875 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1963)) * cbPerFrame._m0[3u].x));
    float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2871 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1160))) + ((_2877 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1963)) * cbPerFrame._m0[3u].x));
    float _3056 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3056 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.y = _3056 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.z = _3056 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.w = cbInstanceData._m0[_2897].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2897].w;
}


